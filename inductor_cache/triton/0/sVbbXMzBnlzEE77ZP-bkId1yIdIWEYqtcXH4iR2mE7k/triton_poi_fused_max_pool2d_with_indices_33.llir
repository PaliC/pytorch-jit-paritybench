; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %.lobit3 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = or disjoint i32 %13, 32, !dbg !13
  %22 = or disjoint i32 %13, 36, !dbg !13
  %23 = or disjoint i32 %13, 40, !dbg !13
  %24 = or disjoint i32 %13, 44, !dbg !13
  %25 = or disjoint i32 %13, 48, !dbg !13
  %26 = or disjoint i32 %13, 52, !dbg !13
  %27 = or disjoint i32 %13, 56, !dbg !13
  %28 = or disjoint i32 %13, 60, !dbg !13
  %29 = icmp slt i32 %12, 1156, !dbg !14
  %30 = icmp slt i32 %13, 1156, !dbg !14
  %31 = icmp slt i32 %14, 1156, !dbg !14
  %32 = icmp slt i32 %15, 1156, !dbg !14
  %33 = icmp slt i32 %16, 1156, !dbg !14
  %34 = icmp slt i32 %17, 1156, !dbg !14
  %35 = icmp slt i32 %18, 1156, !dbg !14
  %36 = icmp slt i32 %19, 1156, !dbg !14
  %37 = icmp slt i32 %20, 1156, !dbg !14
  %38 = icmp slt i32 %21, 1156, !dbg !14
  %39 = icmp slt i32 %22, 1156, !dbg !14
  %40 = icmp slt i32 %23, 1156, !dbg !14
  %41 = icmp slt i32 %24, 1156, !dbg !14
  %42 = icmp slt i32 %25, 1156, !dbg !14
  %43 = icmp slt i32 %26, 1156, !dbg !14
  %44 = icmp slt i32 %27, 1156, !dbg !14
  %45 = icmp slt i32 %28, 1156, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %47 = shl i32 %46, 6, !dbg !16
  %48 = shl i32 %8, 4, !dbg !17
  %49 = and i32 %48, 48, !dbg !17
  %50 = and i32 %8, 63, !dbg !17
  %51 = or disjoint i32 %47, %49, !dbg !18
  %52 = or disjoint i32 %51, 4, !dbg !18
  %53 = or disjoint i32 %51, 8, !dbg !18
  %54 = or disjoint i32 %51, 12, !dbg !18
  %55 = or disjoint i32 %47, %50, !dbg !18
  %56 = icmp slt i32 %51, 288, !dbg !19
  %57 = icmp slt i32 %55, 288, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %58 = sdiv i32 %.frozen, 17, !dbg !20
  %59 = mul i32 %58, 17, !dbg !21
  %.decomposed = sub i32 %.frozen, %59, !dbg !21
  %60 = srem i32 %58, 17, !dbg !22
  %61 = sdiv i32 %12, 289, !dbg !23
  %.frozen31 = freeze i32 %13, !dbg !23
  %62 = sdiv i32 %.frozen31, 289, !dbg !23
  %.frozen33 = freeze i32 %14, !dbg !23
  %63 = sdiv i32 %.frozen33, 289, !dbg !23
  %.frozen35 = freeze i32 %15, !dbg !23
  %64 = sdiv i32 %.frozen35, 289, !dbg !23
  %.frozen37 = freeze i32 %16, !dbg !23
  %65 = sdiv i32 %.frozen37, 289, !dbg !23
  %.frozen39 = freeze i32 %17, !dbg !23
  %66 = sdiv i32 %.frozen39, 289, !dbg !23
  %.frozen41 = freeze i32 %18, !dbg !23
  %67 = sdiv i32 %.frozen41, 289, !dbg !23
  %.frozen43 = freeze i32 %19, !dbg !23
  %68 = sdiv i32 %.frozen43, 289, !dbg !23
  %.frozen45 = freeze i32 %20, !dbg !23
  %69 = sdiv i32 %.frozen45, 289, !dbg !23
  %.frozen47 = freeze i32 %21, !dbg !23
  %70 = sdiv i32 %.frozen47, 289, !dbg !23
  %.frozen49 = freeze i32 %22, !dbg !23
  %71 = sdiv i32 %.frozen49, 289, !dbg !23
  %.frozen51 = freeze i32 %23, !dbg !23
  %72 = sdiv i32 %.frozen51, 289, !dbg !23
  %.frozen53 = freeze i32 %24, !dbg !23
  %73 = sdiv i32 %.frozen53, 289, !dbg !23
  %.frozen55 = freeze i32 %25, !dbg !23
  %74 = sdiv i32 %.frozen55, 289, !dbg !23
  %.frozen57 = freeze i32 %26, !dbg !23
  %75 = sdiv i32 %.frozen57, 289, !dbg !23
  %.frozen59 = freeze i32 %27, !dbg !23
  %76 = sdiv i32 %.frozen59, 289, !dbg !23
  %.frozen61 = freeze i32 %28, !dbg !23
  %77 = sdiv i32 %.frozen61, 289, !dbg !23
  %78 = mul i32 %62, 289, !dbg !24
  %.decomposed32 = sub i32 %.frozen31, %78, !dbg !24
  %79 = mul i32 %63, 289, !dbg !24
  %.decomposed34 = sub i32 %.frozen33, %79, !dbg !24
  %80 = mul i32 %64, 289, !dbg !24
  %.decomposed36 = sub i32 %.frozen35, %80, !dbg !24
  %81 = mul i32 %65, 289, !dbg !24
  %.decomposed38 = sub i32 %.frozen37, %81, !dbg !24
  %82 = mul i32 %66, 289, !dbg !24
  %.decomposed40 = sub i32 %.frozen39, %82, !dbg !24
  %83 = mul i32 %67, 289, !dbg !24
  %.decomposed42 = sub i32 %.frozen41, %83, !dbg !24
  %84 = mul i32 %68, 289, !dbg !24
  %.decomposed44 = sub i32 %.frozen43, %84, !dbg !24
  %85 = mul i32 %69, 289, !dbg !24
  %.decomposed46 = sub i32 %.frozen45, %85, !dbg !24
  %86 = mul i32 %70, 289, !dbg !24
  %.decomposed48 = sub i32 %.frozen47, %86, !dbg !24
  %87 = mul i32 %71, 289, !dbg !24
  %.decomposed50 = sub i32 %.frozen49, %87, !dbg !24
  %88 = mul i32 %72, 289, !dbg !24
  %.decomposed52 = sub i32 %.frozen51, %88, !dbg !24
  %89 = mul i32 %73, 289, !dbg !24
  %.decomposed54 = sub i32 %.frozen53, %89, !dbg !24
  %90 = mul i32 %74, 289, !dbg !24
  %.decomposed56 = sub i32 %.frozen55, %90, !dbg !24
  %91 = mul i32 %75, 289, !dbg !24
  %.decomposed58 = sub i32 %.frozen57, %91, !dbg !24
  %92 = mul i32 %76, 289, !dbg !24
  %.decomposed60 = sub i32 %.frozen59, %92, !dbg !24
  %93 = mul i32 %77, 289, !dbg !24
  %.decomposed62 = sub i32 %.frozen61, %93, !dbg !24
  %94 = mul nsw i32 %.decomposed, 576, !dbg !25
  %95 = mul nsw i32 %60, 20160, !dbg !26
  %96 = mul i32 %61, 352800, !dbg !27
  %97 = add i32 %96, %94, !dbg !28
  %98 = add i32 %97, %51, !dbg !29
  %99 = add i32 %98, %95, !dbg !30
  %100 = add i32 %97, %52, !dbg !29
  %101 = add i32 %100, %95, !dbg !30
  %102 = add i32 %97, %53, !dbg !29
  %103 = add i32 %102, %95, !dbg !30
  %104 = add i32 %97, %54, !dbg !29
  %105 = add i32 %104, %95, !dbg !30
  %106 = sext i32 %99 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !31
  %108 = sext i32 %101 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !31
  %110 = sext i32 %103 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !31
  %112 = sext i32 %105 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !31
  %114 = and i1 %29, %56, !dbg !32
  %115 = and i1 %30, %57, !dbg !32
  %116 = and i1 %31, %57, !dbg !32
  %117 = and i1 %32, %57, !dbg !32
  %118 = and i1 %33, %57, !dbg !32
  %119 = and i1 %34, %57, !dbg !32
  %120 = and i1 %35, %57, !dbg !32
  %121 = and i1 %36, %57, !dbg !32
  %122 = and i1 %37, %57, !dbg !32
  %123 = and i1 %38, %57, !dbg !32
  %124 = and i1 %39, %57, !dbg !32
  %125 = and i1 %40, %57, !dbg !32
  %126 = and i1 %41, %57, !dbg !32
  %127 = and i1 %42, %57, !dbg !32
  %128 = and i1 %43, %57, !dbg !32
  %129 = and i1 %44, %57, !dbg !32
  %130 = and i1 %45, %57, !dbg !32
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %114) #2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %114) #2, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !33
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %114) #2, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !33
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !33
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %114) #2, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !33
  %151 = add i32 %97, 288, !dbg !34
  %152 = add i32 %151, %51, !dbg !35
  %153 = add i32 %152, %95, !dbg !36
  %154 = add i32 %151, %52, !dbg !35
  %155 = add i32 %154, %95, !dbg !36
  %156 = add i32 %151, %53, !dbg !35
  %157 = add i32 %156, %95, !dbg !36
  %158 = add i32 %151, %54, !dbg !35
  %159 = add i32 %158, %95, !dbg !36
  %160 = sext i32 %153 to i64, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !37
  %162 = sext i32 %155 to i64, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !37
  %164 = sext i32 %157 to i64, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !37
  %166 = sext i32 %159 to i64, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !37
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %114) #2, !dbg !38
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !38
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !38
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !38
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %114) #2, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !38
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !38
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %114) #2, !dbg !38
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !38
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !38
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !38
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %114) #2, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !38
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !38
  %188 = add i32 %97, 576, !dbg !39
  %189 = add i32 %188, %51, !dbg !40
  %190 = add i32 %189, %95, !dbg !41
  %191 = add i32 %188, %52, !dbg !40
  %192 = add i32 %191, %95, !dbg !41
  %193 = add i32 %188, %53, !dbg !40
  %194 = add i32 %193, %95, !dbg !41
  %195 = add i32 %188, %54, !dbg !40
  %196 = add i32 %195, %95, !dbg !41
  %197 = sext i32 %190 to i64, !dbg !42
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !42
  %199 = sext i32 %192 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !42
  %201 = sext i32 %194 to i64, !dbg !42
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !42
  %203 = sext i32 %196 to i64, !dbg !42
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !42
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %114) #2, !dbg !43
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !43
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !43
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !43
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %114) #2, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !43
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !43
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %202, i1 %114) #2, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !43
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !43
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !43
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %204, i1 %114) #2, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !43
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !43
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !43
  %225 = add i32 %97, 10080, !dbg !44
  %226 = add i32 %225, %51, !dbg !45
  %227 = add i32 %226, %95, !dbg !46
  %228 = add i32 %225, %52, !dbg !45
  %229 = add i32 %228, %95, !dbg !46
  %230 = add i32 %225, %53, !dbg !45
  %231 = add i32 %230, %95, !dbg !46
  %232 = add i32 %225, %54, !dbg !45
  %233 = add i32 %232, %95, !dbg !46
  %234 = sext i32 %227 to i64, !dbg !47
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !47
  %236 = sext i32 %229 to i64, !dbg !47
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !47
  %238 = sext i32 %231 to i64, !dbg !47
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !47
  %240 = sext i32 %233 to i64, !dbg !47
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !47
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %114) #2, !dbg !48
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !48
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !48
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !48
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !48
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 %114) #2, !dbg !48
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !48
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !48
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !48
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !48
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %239, i1 %114) #2, !dbg !48
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !48
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !48
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !48
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !48
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %114) #2, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !48
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !48
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !48
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !48
  %262 = add i32 %97, 10368, !dbg !49
  %263 = add i32 %262, %51, !dbg !50
  %264 = add i32 %263, %95, !dbg !51
  %265 = add i32 %262, %52, !dbg !50
  %266 = add i32 %265, %95, !dbg !51
  %267 = add i32 %262, %53, !dbg !50
  %268 = add i32 %267, %95, !dbg !51
  %269 = add i32 %262, %54, !dbg !50
  %270 = add i32 %269, %95, !dbg !51
  %271 = sext i32 %264 to i64, !dbg !52
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !52
  %273 = sext i32 %266 to i64, !dbg !52
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !52
  %275 = sext i32 %268 to i64, !dbg !52
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !52
  %277 = sext i32 %270 to i64, !dbg !52
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !52
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %114) #2, !dbg !53
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !53
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !53
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !53
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !53
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %114) #2, !dbg !53
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !53
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !53
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !53
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %276, i1 %114) #2, !dbg !53
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !53
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !53
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !53
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !53
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %278, i1 %114) #2, !dbg !53
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !53
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !53
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !53
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !53
  %299 = add i32 %97, 10656, !dbg !54
  %300 = add i32 %299, %51, !dbg !55
  %301 = add i32 %300, %95, !dbg !56
  %302 = add i32 %299, %52, !dbg !55
  %303 = add i32 %302, %95, !dbg !56
  %304 = add i32 %299, %53, !dbg !55
  %305 = add i32 %304, %95, !dbg !56
  %306 = add i32 %299, %54, !dbg !55
  %307 = add i32 %306, %95, !dbg !56
  %308 = sext i32 %301 to i64, !dbg !57
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !57
  %310 = sext i32 %303 to i64, !dbg !57
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !57
  %312 = sext i32 %305 to i64, !dbg !57
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !57
  %314 = sext i32 %307 to i64, !dbg !57
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !57
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %309, i1 %114) #2, !dbg !58
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !58
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !58
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !58
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !58
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %311, i1 %114) #2, !dbg !58
  %322 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !58
  %323 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !58
  %324 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !58
  %325 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !58
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 %114) #2, !dbg !58
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !58
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !58
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !58
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !58
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %315, i1 %114) #2, !dbg !58
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !58
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !58
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !58
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !58
  %336 = add i32 %97, 20160, !dbg !59
  %337 = add i32 %336, %51, !dbg !60
  %338 = add i32 %337, %95, !dbg !61
  %339 = add i32 %336, %52, !dbg !60
  %340 = add i32 %339, %95, !dbg !61
  %341 = add i32 %336, %53, !dbg !60
  %342 = add i32 %341, %95, !dbg !61
  %343 = add i32 %336, %54, !dbg !60
  %344 = add i32 %343, %95, !dbg !61
  %345 = sext i32 %338 to i64, !dbg !62
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !62
  %347 = sext i32 %340 to i64, !dbg !62
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !62
  %349 = sext i32 %342 to i64, !dbg !62
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !62
  %351 = sext i32 %344 to i64, !dbg !62
  %352 = getelementptr float, ptr addrspace(1) %0, i64 %351, !dbg !62
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %346, i1 %114) #2, !dbg !63
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !63
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !63
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !63
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !63
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %348, i1 %114) #2, !dbg !63
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !63
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !63
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !63
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !63
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %350, i1 %114) #2, !dbg !63
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !63
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !63
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !63
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !63
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %352, i1 %114) #2, !dbg !63
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !63
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !63
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !63
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !63
  %373 = add i32 %97, 20448, !dbg !64
  %374 = add i32 %373, %51, !dbg !65
  %375 = add i32 %374, %95, !dbg !66
  %376 = add i32 %373, %52, !dbg !65
  %377 = add i32 %376, %95, !dbg !66
  %378 = add i32 %373, %53, !dbg !65
  %379 = add i32 %378, %95, !dbg !66
  %380 = add i32 %373, %54, !dbg !65
  %381 = add i32 %380, %95, !dbg !66
  %382 = sext i32 %375 to i64, !dbg !67
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !67
  %384 = sext i32 %377 to i64, !dbg !67
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !67
  %386 = sext i32 %379 to i64, !dbg !67
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !67
  %388 = sext i32 %381 to i64, !dbg !67
  %389 = getelementptr float, ptr addrspace(1) %0, i64 %388, !dbg !67
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %383, i1 %114) #2, !dbg !68
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !68
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !68
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !68
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !68
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %385, i1 %114) #2, !dbg !68
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !68
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !68
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !68
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !68
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %387, i1 %114) #2, !dbg !68
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !68
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !68
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !68
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !68
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %389, i1 %114) #2, !dbg !68
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !68
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !68
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !68
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !68
  %410 = add i32 %97, 20736, !dbg !69
  %411 = add i32 %410, %51, !dbg !70
  %412 = add i32 %411, %95, !dbg !71
  %413 = add i32 %410, %52, !dbg !70
  %414 = add i32 %413, %95, !dbg !71
  %415 = add i32 %410, %53, !dbg !70
  %416 = add i32 %415, %95, !dbg !71
  %417 = add i32 %410, %54, !dbg !70
  %418 = add i32 %417, %95, !dbg !71
  %419 = sext i32 %412 to i64, !dbg !72
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !72
  %421 = sext i32 %414 to i64, !dbg !72
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !72
  %423 = sext i32 %416 to i64, !dbg !72
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !72
  %425 = sext i32 %418 to i64, !dbg !72
  %426 = getelementptr float, ptr addrspace(1) %0, i64 %425, !dbg !72
  %427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %420, i1 %114) #2, !dbg !73
  %428 = extractvalue { i32, i32, i32, i32 } %427, 0, !dbg !73
  %429 = extractvalue { i32, i32, i32, i32 } %427, 1, !dbg !73
  %430 = extractvalue { i32, i32, i32, i32 } %427, 2, !dbg !73
  %431 = extractvalue { i32, i32, i32, i32 } %427, 3, !dbg !73
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %422, i1 %114) #2, !dbg !73
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !73
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !73
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !73
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !73
  %437 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %424, i1 %114) #2, !dbg !73
  %438 = extractvalue { i32, i32, i32, i32 } %437, 0, !dbg !73
  %439 = extractvalue { i32, i32, i32, i32 } %437, 1, !dbg !73
  %440 = extractvalue { i32, i32, i32, i32 } %437, 2, !dbg !73
  %441 = extractvalue { i32, i32, i32, i32 } %437, 3, !dbg !73
  %442 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %426, i1 %114) #2, !dbg !73
  %443 = extractvalue { i32, i32, i32, i32 } %442, 0, !dbg !73
  %444 = extractvalue { i32, i32, i32, i32 } %442, 1, !dbg !73
  %445 = extractvalue { i32, i32, i32, i32 } %442, 2, !dbg !73
  %446 = extractvalue { i32, i32, i32, i32 } %442, 3, !dbg !73
  %447 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !33
  %448 = insertelement <4 x i32> %447, i32 %133, i64 1, !dbg !33
  %449 = insertelement <4 x i32> %448, i32 %134, i64 2, !dbg !33
  %450 = insertelement <4 x i32> %449, i32 %135, i64 3, !dbg !33
  %451 = bitcast <4 x i32> %450 to <4 x float>, !dbg !33
  %452 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !38
  %453 = insertelement <4 x i32> %452, i32 %170, i64 1, !dbg !38
  %454 = insertelement <4 x i32> %453, i32 %171, i64 2, !dbg !38
  %455 = insertelement <4 x i32> %454, i32 %172, i64 3, !dbg !38
  %456 = bitcast <4 x i32> %455 to <4 x float>, !dbg !38
  %457 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !43
  %458 = insertelement <4 x i32> %457, i32 %207, i64 1, !dbg !43
  %459 = insertelement <4 x i32> %458, i32 %208, i64 2, !dbg !43
  %460 = insertelement <4 x i32> %459, i32 %209, i64 3, !dbg !43
  %461 = bitcast <4 x i32> %460 to <4 x float>, !dbg !43
  %462 = insertelement <4 x i32> poison, i32 %243, i64 0, !dbg !48
  %463 = insertelement <4 x i32> %462, i32 %244, i64 1, !dbg !48
  %464 = insertelement <4 x i32> %463, i32 %245, i64 2, !dbg !48
  %465 = insertelement <4 x i32> %464, i32 %246, i64 3, !dbg !48
  %466 = bitcast <4 x i32> %465 to <4 x float>, !dbg !48
  %467 = insertelement <4 x i32> poison, i32 %280, i64 0, !dbg !53
  %468 = insertelement <4 x i32> %467, i32 %281, i64 1, !dbg !53
  %469 = insertelement <4 x i32> %468, i32 %282, i64 2, !dbg !53
  %470 = insertelement <4 x i32> %469, i32 %283, i64 3, !dbg !53
  %471 = bitcast <4 x i32> %470 to <4 x float>, !dbg !53
  %472 = insertelement <4 x i32> poison, i32 %317, i64 0, !dbg !58
  %473 = insertelement <4 x i32> %472, i32 %318, i64 1, !dbg !58
  %474 = insertelement <4 x i32> %473, i32 %319, i64 2, !dbg !58
  %475 = insertelement <4 x i32> %474, i32 %320, i64 3, !dbg !58
  %476 = bitcast <4 x i32> %475 to <4 x float>, !dbg !58
  %477 = insertelement <4 x i32> poison, i32 %354, i64 0, !dbg !63
  %478 = insertelement <4 x i32> %477, i32 %355, i64 1, !dbg !63
  %479 = insertelement <4 x i32> %478, i32 %356, i64 2, !dbg !63
  %480 = insertelement <4 x i32> %479, i32 %357, i64 3, !dbg !63
  %481 = bitcast <4 x i32> %480 to <4 x float>, !dbg !63
  %482 = insertelement <4 x i32> poison, i32 %391, i64 0, !dbg !68
  %483 = insertelement <4 x i32> %482, i32 %392, i64 1, !dbg !68
  %484 = insertelement <4 x i32> %483, i32 %393, i64 2, !dbg !68
  %485 = insertelement <4 x i32> %484, i32 %394, i64 3, !dbg !68
  %486 = bitcast <4 x i32> %485 to <4 x float>, !dbg !68
  %487 = insertelement <4 x i32> poison, i32 %428, i64 0, !dbg !73
  %488 = insertelement <4 x i32> %487, i32 %429, i64 1, !dbg !73
  %489 = insertelement <4 x i32> %488, i32 %430, i64 2, !dbg !73
  %490 = insertelement <4 x i32> %489, i32 %431, i64 3, !dbg !73
  %491 = bitcast <4 x i32> %490 to <4 x float>, !dbg !73
  %492 = fcmp ogt <4 x float> %456, %451, !dbg !74
  %493 = fcmp uno <4 x float> %456, zeroinitializer, !dbg !78
  %494 = or <4 x i1> %492, %493, !dbg !79
  %.v = select <4 x i1> %494, <4 x i32> %455, <4 x i32> %450, !dbg !80
  %495 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %496 = fcmp olt <4 x float> %495, %461, !dbg !81
  %497 = fcmp uno <4 x float> %461, zeroinitializer, !dbg !83
  %498 = or <4 x i1> %496, %497, !dbg !84
  %.v4 = select <4 x i1> %498, <4 x i32> %460, <4 x i32> %.v, !dbg !85
  %499 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !85
  %500 = fcmp olt <4 x float> %499, %466, !dbg !86
  %501 = fcmp uno <4 x float> %466, zeroinitializer, !dbg !88
  %502 = or <4 x i1> %500, %501, !dbg !89
  %.v5 = select <4 x i1> %502, <4 x i32> %465, <4 x i32> %.v4, !dbg !90
  %503 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !90
  %504 = fcmp olt <4 x float> %503, %471, !dbg !91
  %505 = fcmp uno <4 x float> %471, zeroinitializer, !dbg !93
  %506 = or <4 x i1> %504, %505, !dbg !94
  %.v6 = select <4 x i1> %506, <4 x i32> %470, <4 x i32> %.v5, !dbg !95
  %507 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !95
  %508 = fcmp olt <4 x float> %507, %476, !dbg !96
  %509 = fcmp uno <4 x float> %476, zeroinitializer, !dbg !98
  %510 = or <4 x i1> %508, %509, !dbg !99
  %.v7 = select <4 x i1> %510, <4 x i32> %475, <4 x i32> %.v6, !dbg !100
  %511 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !100
  %512 = fcmp olt <4 x float> %511, %481, !dbg !101
  %513 = fcmp uno <4 x float> %481, zeroinitializer, !dbg !103
  %514 = or <4 x i1> %512, %513, !dbg !104
  %.v8 = select <4 x i1> %514, <4 x i32> %480, <4 x i32> %.v7, !dbg !105
  %515 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !105
  %516 = fcmp olt <4 x float> %515, %486, !dbg !106
  %517 = fcmp uno <4 x float> %486, zeroinitializer, !dbg !108
  %518 = or <4 x i1> %516, %517, !dbg !109
  %.v9 = select <4 x i1> %518, <4 x i32> %485, <4 x i32> %.v8, !dbg !110
  %519 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !110
  %520 = fcmp olt <4 x float> %519, %491, !dbg !111
  %521 = bitcast i32 %428 to float, !dbg !113
  %522 = fcmp uno float %521, 0.000000e+00, !dbg !113
  %523 = bitcast i32 %429 to float, !dbg !113
  %524 = fcmp uno float %523, 0.000000e+00, !dbg !113
  %525 = bitcast i32 %430 to float, !dbg !113
  %526 = fcmp uno float %525, 0.000000e+00, !dbg !113
  %527 = bitcast i32 %431 to float, !dbg !113
  %528 = fcmp uno float %527, 0.000000e+00, !dbg !113
  %529 = extractelement <4 x i1> %520, i64 0, !dbg !114
  %530 = or i1 %529, %522, !dbg !114
  %531 = extractelement <4 x i1> %520, i64 1, !dbg !114
  %532 = or i1 %531, %524, !dbg !114
  %533 = extractelement <4 x i1> %520, i64 2, !dbg !114
  %534 = or i1 %533, %526, !dbg !114
  %535 = extractelement <4 x i1> %520, i64 3, !dbg !114
  %536 = or i1 %535, %528, !dbg !114
  %537 = zext <4 x i1> %492 to <4 x i8>, !dbg !115
  %538 = select <4 x i1> %496, <4 x i8> splat (i8 2), <4 x i8> %537, !dbg !116
  %539 = select <4 x i1> %500, <4 x i8> splat (i8 3), <4 x i8> %538, !dbg !117
  %540 = select <4 x i1> %504, <4 x i8> splat (i8 4), <4 x i8> %539, !dbg !118
  %541 = select <4 x i1> %508, <4 x i8> splat (i8 5), <4 x i8> %540, !dbg !119
  %542 = select <4 x i1> %512, <4 x i8> splat (i8 6), <4 x i8> %541, !dbg !120
  %543 = select <4 x i1> %516, <4 x i8> splat (i8 7), <4 x i8> %542, !dbg !121
  %544 = select <4 x i1> %520, <4 x i8> splat (i8 8), <4 x i8> %543, !dbg !122
  %545 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !33
  %546 = insertelement <4 x i32> %545, i32 %138, i64 1, !dbg !33
  %547 = insertelement <4 x i32> %546, i32 %139, i64 2, !dbg !33
  %548 = insertelement <4 x i32> %547, i32 %140, i64 3, !dbg !33
  %549 = bitcast <4 x i32> %548 to <4 x float>, !dbg !33
  %550 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !38
  %551 = insertelement <4 x i32> %550, i32 %175, i64 1, !dbg !38
  %552 = insertelement <4 x i32> %551, i32 %176, i64 2, !dbg !38
  %553 = insertelement <4 x i32> %552, i32 %177, i64 3, !dbg !38
  %554 = bitcast <4 x i32> %553 to <4 x float>, !dbg !38
  %555 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !43
  %556 = insertelement <4 x i32> %555, i32 %212, i64 1, !dbg !43
  %557 = insertelement <4 x i32> %556, i32 %213, i64 2, !dbg !43
  %558 = insertelement <4 x i32> %557, i32 %214, i64 3, !dbg !43
  %559 = bitcast <4 x i32> %558 to <4 x float>, !dbg !43
  %560 = insertelement <4 x i32> poison, i32 %248, i64 0, !dbg !48
  %561 = insertelement <4 x i32> %560, i32 %249, i64 1, !dbg !48
  %562 = insertelement <4 x i32> %561, i32 %250, i64 2, !dbg !48
  %563 = insertelement <4 x i32> %562, i32 %251, i64 3, !dbg !48
  %564 = bitcast <4 x i32> %563 to <4 x float>, !dbg !48
  %565 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !53
  %566 = insertelement <4 x i32> %565, i32 %286, i64 1, !dbg !53
  %567 = insertelement <4 x i32> %566, i32 %287, i64 2, !dbg !53
  %568 = insertelement <4 x i32> %567, i32 %288, i64 3, !dbg !53
  %569 = bitcast <4 x i32> %568 to <4 x float>, !dbg !53
  %570 = insertelement <4 x i32> poison, i32 %322, i64 0, !dbg !58
  %571 = insertelement <4 x i32> %570, i32 %323, i64 1, !dbg !58
  %572 = insertelement <4 x i32> %571, i32 %324, i64 2, !dbg !58
  %573 = insertelement <4 x i32> %572, i32 %325, i64 3, !dbg !58
  %574 = bitcast <4 x i32> %573 to <4 x float>, !dbg !58
  %575 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !63
  %576 = insertelement <4 x i32> %575, i32 %360, i64 1, !dbg !63
  %577 = insertelement <4 x i32> %576, i32 %361, i64 2, !dbg !63
  %578 = insertelement <4 x i32> %577, i32 %362, i64 3, !dbg !63
  %579 = bitcast <4 x i32> %578 to <4 x float>, !dbg !63
  %580 = insertelement <4 x i32> poison, i32 %396, i64 0, !dbg !68
  %581 = insertelement <4 x i32> %580, i32 %397, i64 1, !dbg !68
  %582 = insertelement <4 x i32> %581, i32 %398, i64 2, !dbg !68
  %583 = insertelement <4 x i32> %582, i32 %399, i64 3, !dbg !68
  %584 = bitcast <4 x i32> %583 to <4 x float>, !dbg !68
  %585 = insertelement <4 x i32> poison, i32 %433, i64 0, !dbg !73
  %586 = insertelement <4 x i32> %585, i32 %434, i64 1, !dbg !73
  %587 = insertelement <4 x i32> %586, i32 %435, i64 2, !dbg !73
  %588 = insertelement <4 x i32> %587, i32 %436, i64 3, !dbg !73
  %589 = bitcast <4 x i32> %588 to <4 x float>, !dbg !73
  %590 = fcmp ogt <4 x float> %554, %549, !dbg !74
  %591 = fcmp uno <4 x float> %554, zeroinitializer, !dbg !78
  %592 = or <4 x i1> %590, %591, !dbg !79
  %.v10 = select <4 x i1> %592, <4 x i32> %553, <4 x i32> %548, !dbg !80
  %593 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !80
  %594 = fcmp olt <4 x float> %593, %559, !dbg !81
  %595 = fcmp uno <4 x float> %559, zeroinitializer, !dbg !83
  %596 = or <4 x i1> %594, %595, !dbg !84
  %.v11 = select <4 x i1> %596, <4 x i32> %558, <4 x i32> %.v10, !dbg !85
  %597 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !85
  %598 = fcmp olt <4 x float> %597, %564, !dbg !86
  %599 = fcmp uno <4 x float> %564, zeroinitializer, !dbg !88
  %600 = or <4 x i1> %598, %599, !dbg !89
  %.v12 = select <4 x i1> %600, <4 x i32> %563, <4 x i32> %.v11, !dbg !90
  %601 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !90
  %602 = fcmp olt <4 x float> %601, %569, !dbg !91
  %603 = fcmp uno <4 x float> %569, zeroinitializer, !dbg !93
  %604 = or <4 x i1> %602, %603, !dbg !94
  %.v13 = select <4 x i1> %604, <4 x i32> %568, <4 x i32> %.v12, !dbg !95
  %605 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !95
  %606 = fcmp olt <4 x float> %605, %574, !dbg !96
  %607 = fcmp uno <4 x float> %574, zeroinitializer, !dbg !98
  %608 = or <4 x i1> %606, %607, !dbg !99
  %.v14 = select <4 x i1> %608, <4 x i32> %573, <4 x i32> %.v13, !dbg !100
  %609 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !100
  %610 = fcmp olt <4 x float> %609, %579, !dbg !101
  %611 = fcmp uno <4 x float> %579, zeroinitializer, !dbg !103
  %612 = or <4 x i1> %610, %611, !dbg !104
  %.v15 = select <4 x i1> %612, <4 x i32> %578, <4 x i32> %.v14, !dbg !105
  %613 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !105
  %614 = fcmp olt <4 x float> %613, %584, !dbg !106
  %615 = fcmp uno <4 x float> %584, zeroinitializer, !dbg !108
  %616 = or <4 x i1> %614, %615, !dbg !109
  %.v16 = select <4 x i1> %616, <4 x i32> %583, <4 x i32> %.v15, !dbg !110
  %617 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !110
  %618 = fcmp olt <4 x float> %617, %589, !dbg !111
  %619 = bitcast i32 %433 to float, !dbg !113
  %620 = fcmp uno float %619, 0.000000e+00, !dbg !113
  %621 = bitcast i32 %434 to float, !dbg !113
  %622 = fcmp uno float %621, 0.000000e+00, !dbg !113
  %623 = bitcast i32 %435 to float, !dbg !113
  %624 = fcmp uno float %623, 0.000000e+00, !dbg !113
  %625 = bitcast i32 %436 to float, !dbg !113
  %626 = fcmp uno float %625, 0.000000e+00, !dbg !113
  %627 = extractelement <4 x i1> %618, i64 0, !dbg !114
  %628 = or i1 %627, %620, !dbg !114
  %629 = extractelement <4 x i1> %618, i64 1, !dbg !114
  %630 = or i1 %629, %622, !dbg !114
  %631 = extractelement <4 x i1> %618, i64 2, !dbg !114
  %632 = or i1 %631, %624, !dbg !114
  %633 = extractelement <4 x i1> %618, i64 3, !dbg !114
  %634 = or i1 %633, %626, !dbg !114
  %635 = zext <4 x i1> %590 to <4 x i8>, !dbg !115
  %636 = select <4 x i1> %594, <4 x i8> splat (i8 2), <4 x i8> %635, !dbg !116
  %637 = select <4 x i1> %598, <4 x i8> splat (i8 3), <4 x i8> %636, !dbg !117
  %638 = select <4 x i1> %602, <4 x i8> splat (i8 4), <4 x i8> %637, !dbg !118
  %639 = select <4 x i1> %606, <4 x i8> splat (i8 5), <4 x i8> %638, !dbg !119
  %640 = select <4 x i1> %610, <4 x i8> splat (i8 6), <4 x i8> %639, !dbg !120
  %641 = select <4 x i1> %614, <4 x i8> splat (i8 7), <4 x i8> %640, !dbg !121
  %642 = select <4 x i1> %618, <4 x i8> splat (i8 8), <4 x i8> %641, !dbg !122
  %643 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !33
  %644 = insertelement <4 x i32> %643, i32 %143, i64 1, !dbg !33
  %645 = insertelement <4 x i32> %644, i32 %144, i64 2, !dbg !33
  %646 = insertelement <4 x i32> %645, i32 %145, i64 3, !dbg !33
  %647 = bitcast <4 x i32> %646 to <4 x float>, !dbg !33
  %648 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !38
  %649 = insertelement <4 x i32> %648, i32 %180, i64 1, !dbg !38
  %650 = insertelement <4 x i32> %649, i32 %181, i64 2, !dbg !38
  %651 = insertelement <4 x i32> %650, i32 %182, i64 3, !dbg !38
  %652 = bitcast <4 x i32> %651 to <4 x float>, !dbg !38
  %653 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !43
  %654 = insertelement <4 x i32> %653, i32 %217, i64 1, !dbg !43
  %655 = insertelement <4 x i32> %654, i32 %218, i64 2, !dbg !43
  %656 = insertelement <4 x i32> %655, i32 %219, i64 3, !dbg !43
  %657 = bitcast <4 x i32> %656 to <4 x float>, !dbg !43
  %658 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !48
  %659 = insertelement <4 x i32> %658, i32 %254, i64 1, !dbg !48
  %660 = insertelement <4 x i32> %659, i32 %255, i64 2, !dbg !48
  %661 = insertelement <4 x i32> %660, i32 %256, i64 3, !dbg !48
  %662 = bitcast <4 x i32> %661 to <4 x float>, !dbg !48
  %663 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !53
  %664 = insertelement <4 x i32> %663, i32 %291, i64 1, !dbg !53
  %665 = insertelement <4 x i32> %664, i32 %292, i64 2, !dbg !53
  %666 = insertelement <4 x i32> %665, i32 %293, i64 3, !dbg !53
  %667 = bitcast <4 x i32> %666 to <4 x float>, !dbg !53
  %668 = insertelement <4 x i32> poison, i32 %327, i64 0, !dbg !58
  %669 = insertelement <4 x i32> %668, i32 %328, i64 1, !dbg !58
  %670 = insertelement <4 x i32> %669, i32 %329, i64 2, !dbg !58
  %671 = insertelement <4 x i32> %670, i32 %330, i64 3, !dbg !58
  %672 = bitcast <4 x i32> %671 to <4 x float>, !dbg !58
  %673 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !63
  %674 = insertelement <4 x i32> %673, i32 %365, i64 1, !dbg !63
  %675 = insertelement <4 x i32> %674, i32 %366, i64 2, !dbg !63
  %676 = insertelement <4 x i32> %675, i32 %367, i64 3, !dbg !63
  %677 = bitcast <4 x i32> %676 to <4 x float>, !dbg !63
  %678 = insertelement <4 x i32> poison, i32 %401, i64 0, !dbg !68
  %679 = insertelement <4 x i32> %678, i32 %402, i64 1, !dbg !68
  %680 = insertelement <4 x i32> %679, i32 %403, i64 2, !dbg !68
  %681 = insertelement <4 x i32> %680, i32 %404, i64 3, !dbg !68
  %682 = bitcast <4 x i32> %681 to <4 x float>, !dbg !68
  %683 = insertelement <4 x i32> poison, i32 %438, i64 0, !dbg !73
  %684 = insertelement <4 x i32> %683, i32 %439, i64 1, !dbg !73
  %685 = insertelement <4 x i32> %684, i32 %440, i64 2, !dbg !73
  %686 = insertelement <4 x i32> %685, i32 %441, i64 3, !dbg !73
  %687 = bitcast <4 x i32> %686 to <4 x float>, !dbg !73
  %688 = fcmp ogt <4 x float> %652, %647, !dbg !74
  %689 = fcmp uno <4 x float> %652, zeroinitializer, !dbg !78
  %690 = or <4 x i1> %688, %689, !dbg !79
  %.v17 = select <4 x i1> %690, <4 x i32> %651, <4 x i32> %646, !dbg !80
  %691 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !80
  %692 = fcmp olt <4 x float> %691, %657, !dbg !81
  %693 = fcmp uno <4 x float> %657, zeroinitializer, !dbg !83
  %694 = or <4 x i1> %692, %693, !dbg !84
  %.v18 = select <4 x i1> %694, <4 x i32> %656, <4 x i32> %.v17, !dbg !85
  %695 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !85
  %696 = fcmp olt <4 x float> %695, %662, !dbg !86
  %697 = fcmp uno <4 x float> %662, zeroinitializer, !dbg !88
  %698 = or <4 x i1> %696, %697, !dbg !89
  %.v19 = select <4 x i1> %698, <4 x i32> %661, <4 x i32> %.v18, !dbg !90
  %699 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !90
  %700 = fcmp olt <4 x float> %699, %667, !dbg !91
  %701 = fcmp uno <4 x float> %667, zeroinitializer, !dbg !93
  %702 = or <4 x i1> %700, %701, !dbg !94
  %.v20 = select <4 x i1> %702, <4 x i32> %666, <4 x i32> %.v19, !dbg !95
  %703 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !95
  %704 = fcmp olt <4 x float> %703, %672, !dbg !96
  %705 = fcmp uno <4 x float> %672, zeroinitializer, !dbg !98
  %706 = or <4 x i1> %704, %705, !dbg !99
  %.v21 = select <4 x i1> %706, <4 x i32> %671, <4 x i32> %.v20, !dbg !100
  %707 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !100
  %708 = fcmp olt <4 x float> %707, %677, !dbg !101
  %709 = fcmp uno <4 x float> %677, zeroinitializer, !dbg !103
  %710 = or <4 x i1> %708, %709, !dbg !104
  %.v22 = select <4 x i1> %710, <4 x i32> %676, <4 x i32> %.v21, !dbg !105
  %711 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !105
  %712 = fcmp olt <4 x float> %711, %682, !dbg !106
  %713 = fcmp uno <4 x float> %682, zeroinitializer, !dbg !108
  %714 = or <4 x i1> %712, %713, !dbg !109
  %.v23 = select <4 x i1> %714, <4 x i32> %681, <4 x i32> %.v22, !dbg !110
  %715 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !110
  %716 = fcmp olt <4 x float> %715, %687, !dbg !111
  %717 = bitcast i32 %438 to float, !dbg !113
  %718 = fcmp uno float %717, 0.000000e+00, !dbg !113
  %719 = bitcast i32 %439 to float, !dbg !113
  %720 = fcmp uno float %719, 0.000000e+00, !dbg !113
  %721 = bitcast i32 %440 to float, !dbg !113
  %722 = fcmp uno float %721, 0.000000e+00, !dbg !113
  %723 = bitcast i32 %441 to float, !dbg !113
  %724 = fcmp uno float %723, 0.000000e+00, !dbg !113
  %725 = extractelement <4 x i1> %716, i64 0, !dbg !114
  %726 = or i1 %725, %718, !dbg !114
  %727 = extractelement <4 x i1> %716, i64 1, !dbg !114
  %728 = or i1 %727, %720, !dbg !114
  %729 = extractelement <4 x i1> %716, i64 2, !dbg !114
  %730 = or i1 %729, %722, !dbg !114
  %731 = extractelement <4 x i1> %716, i64 3, !dbg !114
  %732 = or i1 %731, %724, !dbg !114
  %733 = zext <4 x i1> %688 to <4 x i8>, !dbg !115
  %734 = select <4 x i1> %692, <4 x i8> splat (i8 2), <4 x i8> %733, !dbg !116
  %735 = select <4 x i1> %696, <4 x i8> splat (i8 3), <4 x i8> %734, !dbg !117
  %736 = select <4 x i1> %700, <4 x i8> splat (i8 4), <4 x i8> %735, !dbg !118
  %737 = select <4 x i1> %704, <4 x i8> splat (i8 5), <4 x i8> %736, !dbg !119
  %738 = select <4 x i1> %708, <4 x i8> splat (i8 6), <4 x i8> %737, !dbg !120
  %739 = select <4 x i1> %712, <4 x i8> splat (i8 7), <4 x i8> %738, !dbg !121
  %740 = select <4 x i1> %716, <4 x i8> splat (i8 8), <4 x i8> %739, !dbg !122
  %741 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !33
  %742 = insertelement <4 x i32> %741, i32 %148, i64 1, !dbg !33
  %743 = insertelement <4 x i32> %742, i32 %149, i64 2, !dbg !33
  %744 = insertelement <4 x i32> %743, i32 %150, i64 3, !dbg !33
  %745 = bitcast <4 x i32> %744 to <4 x float>, !dbg !33
  %746 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !38
  %747 = insertelement <4 x i32> %746, i32 %185, i64 1, !dbg !38
  %748 = insertelement <4 x i32> %747, i32 %186, i64 2, !dbg !38
  %749 = insertelement <4 x i32> %748, i32 %187, i64 3, !dbg !38
  %750 = bitcast <4 x i32> %749 to <4 x float>, !dbg !38
  %751 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !43
  %752 = insertelement <4 x i32> %751, i32 %222, i64 1, !dbg !43
  %753 = insertelement <4 x i32> %752, i32 %223, i64 2, !dbg !43
  %754 = insertelement <4 x i32> %753, i32 %224, i64 3, !dbg !43
  %755 = bitcast <4 x i32> %754 to <4 x float>, !dbg !43
  %756 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !48
  %757 = insertelement <4 x i32> %756, i32 %259, i64 1, !dbg !48
  %758 = insertelement <4 x i32> %757, i32 %260, i64 2, !dbg !48
  %759 = insertelement <4 x i32> %758, i32 %261, i64 3, !dbg !48
  %760 = bitcast <4 x i32> %759 to <4 x float>, !dbg !48
  %761 = insertelement <4 x i32> poison, i32 %295, i64 0, !dbg !53
  %762 = insertelement <4 x i32> %761, i32 %296, i64 1, !dbg !53
  %763 = insertelement <4 x i32> %762, i32 %297, i64 2, !dbg !53
  %764 = insertelement <4 x i32> %763, i32 %298, i64 3, !dbg !53
  %765 = bitcast <4 x i32> %764 to <4 x float>, !dbg !53
  %766 = insertelement <4 x i32> poison, i32 %332, i64 0, !dbg !58
  %767 = insertelement <4 x i32> %766, i32 %333, i64 1, !dbg !58
  %768 = insertelement <4 x i32> %767, i32 %334, i64 2, !dbg !58
  %769 = insertelement <4 x i32> %768, i32 %335, i64 3, !dbg !58
  %770 = bitcast <4 x i32> %769 to <4 x float>, !dbg !58
  %771 = insertelement <4 x i32> poison, i32 %369, i64 0, !dbg !63
  %772 = insertelement <4 x i32> %771, i32 %370, i64 1, !dbg !63
  %773 = insertelement <4 x i32> %772, i32 %371, i64 2, !dbg !63
  %774 = insertelement <4 x i32> %773, i32 %372, i64 3, !dbg !63
  %775 = bitcast <4 x i32> %774 to <4 x float>, !dbg !63
  %776 = insertelement <4 x i32> poison, i32 %406, i64 0, !dbg !68
  %777 = insertelement <4 x i32> %776, i32 %407, i64 1, !dbg !68
  %778 = insertelement <4 x i32> %777, i32 %408, i64 2, !dbg !68
  %779 = insertelement <4 x i32> %778, i32 %409, i64 3, !dbg !68
  %780 = bitcast <4 x i32> %779 to <4 x float>, !dbg !68
  %781 = insertelement <4 x i32> poison, i32 %443, i64 0, !dbg !73
  %782 = insertelement <4 x i32> %781, i32 %444, i64 1, !dbg !73
  %783 = insertelement <4 x i32> %782, i32 %445, i64 2, !dbg !73
  %784 = insertelement <4 x i32> %783, i32 %446, i64 3, !dbg !73
  %785 = bitcast <4 x i32> %784 to <4 x float>, !dbg !73
  %786 = fcmp ogt <4 x float> %750, %745, !dbg !74
  %787 = fcmp uno <4 x float> %750, zeroinitializer, !dbg !78
  %788 = or <4 x i1> %786, %787, !dbg !79
  %.v24 = select <4 x i1> %788, <4 x i32> %749, <4 x i32> %744, !dbg !80
  %789 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !80
  %790 = fcmp olt <4 x float> %789, %755, !dbg !81
  %791 = fcmp uno <4 x float> %755, zeroinitializer, !dbg !83
  %792 = or <4 x i1> %790, %791, !dbg !84
  %.v25 = select <4 x i1> %792, <4 x i32> %754, <4 x i32> %.v24, !dbg !85
  %793 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !85
  %794 = fcmp olt <4 x float> %793, %760, !dbg !86
  %795 = fcmp uno <4 x float> %760, zeroinitializer, !dbg !88
  %796 = or <4 x i1> %794, %795, !dbg !89
  %.v26 = select <4 x i1> %796, <4 x i32> %759, <4 x i32> %.v25, !dbg !90
  %797 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !90
  %798 = fcmp olt <4 x float> %797, %765, !dbg !91
  %799 = fcmp uno <4 x float> %765, zeroinitializer, !dbg !93
  %800 = or <4 x i1> %798, %799, !dbg !94
  %.v27 = select <4 x i1> %800, <4 x i32> %764, <4 x i32> %.v26, !dbg !95
  %801 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !95
  %802 = fcmp olt <4 x float> %801, %770, !dbg !96
  %803 = fcmp uno <4 x float> %770, zeroinitializer, !dbg !98
  %804 = or <4 x i1> %802, %803, !dbg !99
  %.v28 = select <4 x i1> %804, <4 x i32> %769, <4 x i32> %.v27, !dbg !100
  %805 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !100
  %806 = fcmp olt <4 x float> %805, %775, !dbg !101
  %807 = fcmp uno <4 x float> %775, zeroinitializer, !dbg !103
  %808 = or <4 x i1> %806, %807, !dbg !104
  %.v29 = select <4 x i1> %808, <4 x i32> %774, <4 x i32> %.v28, !dbg !105
  %809 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !105
  %810 = fcmp olt <4 x float> %809, %780, !dbg !106
  %811 = fcmp uno <4 x float> %780, zeroinitializer, !dbg !108
  %812 = or <4 x i1> %810, %811, !dbg !109
  %.v30 = select <4 x i1> %812, <4 x i32> %779, <4 x i32> %.v29, !dbg !110
  %813 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !110
  %814 = fcmp olt <4 x float> %813, %785, !dbg !111
  %815 = bitcast i32 %443 to float, !dbg !113
  %816 = fcmp uno float %815, 0.000000e+00, !dbg !113
  %817 = bitcast i32 %444 to float, !dbg !113
  %818 = fcmp uno float %817, 0.000000e+00, !dbg !113
  %819 = bitcast i32 %445 to float, !dbg !113
  %820 = fcmp uno float %819, 0.000000e+00, !dbg !113
  %821 = bitcast i32 %446 to float, !dbg !113
  %822 = fcmp uno float %821, 0.000000e+00, !dbg !113
  %823 = extractelement <4 x i1> %814, i64 0, !dbg !114
  %824 = or i1 %823, %816, !dbg !114
  %825 = extractelement <4 x i1> %814, i64 1, !dbg !114
  %826 = or i1 %825, %818, !dbg !114
  %827 = extractelement <4 x i1> %814, i64 2, !dbg !114
  %828 = or i1 %827, %820, !dbg !114
  %829 = extractelement <4 x i1> %814, i64 3, !dbg !114
  %830 = or i1 %829, %822, !dbg !114
  %831 = zext <4 x i1> %786 to <4 x i8>, !dbg !115
  %832 = select <4 x i1> %790, <4 x i8> splat (i8 2), <4 x i8> %831, !dbg !116
  %833 = select <4 x i1> %794, <4 x i8> splat (i8 3), <4 x i8> %832, !dbg !117
  %834 = select <4 x i1> %798, <4 x i8> splat (i8 4), <4 x i8> %833, !dbg !118
  %835 = select <4 x i1> %802, <4 x i8> splat (i8 5), <4 x i8> %834, !dbg !119
  %836 = select <4 x i1> %806, <4 x i8> splat (i8 6), <4 x i8> %835, !dbg !120
  %837 = select <4 x i1> %810, <4 x i8> splat (i8 7), <4 x i8> %836, !dbg !121
  %838 = select <4 x i1> %814, <4 x i8> splat (i8 8), <4 x i8> %837, !dbg !122
  %839 = mul i32 %55, 289, !dbg !123
  %840 = add i32 %839, %.decomposed32, !dbg !124
  %841 = mul i32 %62, 221952, !dbg !125
  %842 = mul i32 %63, 221952, !dbg !125
  %843 = mul i32 %64, 221952, !dbg !125
  %844 = mul i32 %65, 221952, !dbg !125
  %845 = mul i32 %66, 221952, !dbg !125
  %846 = mul i32 %67, 221952, !dbg !125
  %847 = mul i32 %68, 221952, !dbg !125
  %848 = mul i32 %69, 221952, !dbg !125
  %849 = mul i32 %70, 221952, !dbg !125
  %850 = mul i32 %71, 221952, !dbg !125
  %851 = mul i32 %72, 221952, !dbg !125
  %852 = mul i32 %73, 221952, !dbg !125
  %853 = mul i32 %74, 221952, !dbg !125
  %854 = mul i32 %75, 221952, !dbg !125
  %855 = mul i32 %76, 221952, !dbg !125
  %856 = mul i32 %77, 221952, !dbg !125
  %857 = add i32 %840, %841, !dbg !126
  %858 = add i32 %842, %.decomposed34, !dbg !124
  %859 = add i32 %858, %839, !dbg !126
  %860 = add i32 %843, %.decomposed36, !dbg !124
  %861 = add i32 %860, %839, !dbg !126
  %862 = add i32 %844, %.decomposed38, !dbg !124
  %863 = add i32 %862, %839, !dbg !126
  %864 = add i32 %845, %.decomposed40, !dbg !124
  %865 = add i32 %864, %839, !dbg !126
  %866 = add i32 %846, %.decomposed42, !dbg !124
  %867 = add i32 %866, %839, !dbg !126
  %868 = add i32 %847, %.decomposed44, !dbg !124
  %869 = add i32 %868, %839, !dbg !126
  %870 = add i32 %848, %.decomposed46, !dbg !124
  %871 = add i32 %870, %839, !dbg !126
  %872 = add i32 %849, %.decomposed48, !dbg !124
  %873 = add i32 %872, %839, !dbg !126
  %874 = add i32 %850, %.decomposed50, !dbg !124
  %875 = add i32 %874, %839, !dbg !126
  %876 = add i32 %851, %.decomposed52, !dbg !124
  %877 = add i32 %876, %839, !dbg !126
  %878 = add i32 %852, %.decomposed54, !dbg !124
  %879 = add i32 %878, %839, !dbg !126
  %880 = add i32 %853, %.decomposed56, !dbg !124
  %881 = add i32 %880, %839, !dbg !126
  %882 = add i32 %854, %.decomposed58, !dbg !124
  %883 = add i32 %882, %839, !dbg !126
  %884 = add i32 %855, %.decomposed60, !dbg !124
  %885 = add i32 %884, %839, !dbg !126
  %886 = add i32 %856, %.decomposed62, !dbg !124
  %887 = add i32 %886, %839, !dbg !126
  %888 = sext i32 %857 to i64, !dbg !127
  %889 = getelementptr float, ptr addrspace(1) %1, i64 %888, !dbg !127
  %890 = sext i32 %859 to i64, !dbg !127
  %891 = getelementptr float, ptr addrspace(1) %1, i64 %890, !dbg !127
  %892 = sext i32 %861 to i64, !dbg !127
  %893 = getelementptr float, ptr addrspace(1) %1, i64 %892, !dbg !127
  %894 = sext i32 %863 to i64, !dbg !127
  %895 = getelementptr float, ptr addrspace(1) %1, i64 %894, !dbg !127
  %896 = sext i32 %865 to i64, !dbg !127
  %897 = getelementptr float, ptr addrspace(1) %1, i64 %896, !dbg !127
  %898 = sext i32 %867 to i64, !dbg !127
  %899 = getelementptr float, ptr addrspace(1) %1, i64 %898, !dbg !127
  %900 = sext i32 %869 to i64, !dbg !127
  %901 = getelementptr float, ptr addrspace(1) %1, i64 %900, !dbg !127
  %902 = sext i32 %871 to i64, !dbg !127
  %903 = getelementptr float, ptr addrspace(1) %1, i64 %902, !dbg !127
  %904 = sext i32 %873 to i64, !dbg !127
  %905 = getelementptr float, ptr addrspace(1) %1, i64 %904, !dbg !127
  %906 = sext i32 %875 to i64, !dbg !127
  %907 = getelementptr float, ptr addrspace(1) %1, i64 %906, !dbg !127
  %908 = sext i32 %877 to i64, !dbg !127
  %909 = getelementptr float, ptr addrspace(1) %1, i64 %908, !dbg !127
  %910 = sext i32 %879 to i64, !dbg !127
  %911 = getelementptr float, ptr addrspace(1) %1, i64 %910, !dbg !127
  %912 = sext i32 %881 to i64, !dbg !127
  %913 = getelementptr float, ptr addrspace(1) %1, i64 %912, !dbg !127
  %914 = sext i32 %883 to i64, !dbg !127
  %915 = getelementptr float, ptr addrspace(1) %1, i64 %914, !dbg !127
  %916 = sext i32 %885 to i64, !dbg !127
  %917 = getelementptr float, ptr addrspace(1) %1, i64 %916, !dbg !127
  %918 = sext i32 %887 to i64, !dbg !127
  %919 = getelementptr float, ptr addrspace(1) %1, i64 %918, !dbg !127
  %920 = and i32 %48, 4080, !dbg !128
  %921 = and i32 %8, 255, !dbg !128
  %922 = lshr i32 %920, 6, !dbg !128
  %923 = getelementptr float, ptr addrspace(3) @global_smem, i32 %922, !dbg !128
  %924 = getelementptr float, ptr addrspace(3) %923, i32 %920, !dbg !128
  %925 = extractelement <4 x i32> %.v9, i64 0, !dbg !128
  %926 = select i1 %530, i32 %428, i32 %925, !dbg !129
  %927 = insertelement <1 x i32> poison, i32 %926, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %927, i1 true) #2, !dbg !128
  %928 = or disjoint i32 %920, 1, !dbg !128
  %929 = getelementptr float, ptr addrspace(3) %923, i32 %928, !dbg !128
  %930 = extractelement <4 x i32> %.v9, i64 1, !dbg !128
  %931 = select i1 %532, i32 %429, i32 %930, !dbg !129
  %932 = insertelement <1 x i32> poison, i32 %931, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %929, <1 x i32> %932, i1 true) #2, !dbg !128
  %933 = or disjoint i32 %920, 2, !dbg !128
  %934 = getelementptr float, ptr addrspace(3) %923, i32 %933, !dbg !128
  %935 = extractelement <4 x i32> %.v9, i64 2, !dbg !128
  %936 = select i1 %534, i32 %430, i32 %935, !dbg !129
  %937 = insertelement <1 x i32> poison, i32 %936, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %934, <1 x i32> %937, i1 true) #2, !dbg !128
  %938 = or disjoint i32 %920, 3, !dbg !128
  %939 = getelementptr float, ptr addrspace(3) %923, i32 %938, !dbg !128
  %940 = extractelement <4 x i32> %.v9, i64 3, !dbg !128
  %941 = select i1 %536, i32 %431, i32 %940, !dbg !129
  %942 = insertelement <1 x i32> poison, i32 %941, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %939, <1 x i32> %942, i1 true) #2, !dbg !128
  %943 = or disjoint i32 %920, 4, !dbg !128
  %944 = getelementptr float, ptr addrspace(3) %923, i32 %943, !dbg !128
  %945 = extractelement <4 x i32> %.v16, i64 0, !dbg !128
  %946 = select i1 %628, i32 %433, i32 %945, !dbg !129
  %947 = insertelement <1 x i32> poison, i32 %946, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %944, <1 x i32> %947, i1 true) #2, !dbg !128
  %948 = or disjoint i32 %920, 5, !dbg !128
  %949 = getelementptr float, ptr addrspace(3) %923, i32 %948, !dbg !128
  %950 = extractelement <4 x i32> %.v16, i64 1, !dbg !128
  %951 = select i1 %630, i32 %434, i32 %950, !dbg !129
  %952 = insertelement <1 x i32> poison, i32 %951, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %949, <1 x i32> %952, i1 true) #2, !dbg !128
  %953 = or disjoint i32 %920, 6, !dbg !128
  %954 = getelementptr float, ptr addrspace(3) %923, i32 %953, !dbg !128
  %955 = extractelement <4 x i32> %.v16, i64 2, !dbg !128
  %956 = select i1 %632, i32 %435, i32 %955, !dbg !129
  %957 = insertelement <1 x i32> poison, i32 %956, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %954, <1 x i32> %957, i1 true) #2, !dbg !128
  %958 = or disjoint i32 %920, 7, !dbg !128
  %959 = getelementptr float, ptr addrspace(3) %923, i32 %958, !dbg !128
  %960 = extractelement <4 x i32> %.v16, i64 3, !dbg !128
  %961 = select i1 %634, i32 %436, i32 %960, !dbg !129
  %962 = insertelement <1 x i32> poison, i32 %961, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %959, <1 x i32> %962, i1 true) #2, !dbg !128
  %963 = or disjoint i32 %920, 8, !dbg !128
  %964 = getelementptr float, ptr addrspace(3) %923, i32 %963, !dbg !128
  %965 = extractelement <4 x i32> %.v23, i64 0, !dbg !128
  %966 = select i1 %726, i32 %438, i32 %965, !dbg !129
  %967 = insertelement <1 x i32> poison, i32 %966, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %964, <1 x i32> %967, i1 true) #2, !dbg !128
  %968 = or disjoint i32 %920, 9, !dbg !128
  %969 = getelementptr float, ptr addrspace(3) %923, i32 %968, !dbg !128
  %970 = extractelement <4 x i32> %.v23, i64 1, !dbg !128
  %971 = select i1 %728, i32 %439, i32 %970, !dbg !129
  %972 = insertelement <1 x i32> poison, i32 %971, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %969, <1 x i32> %972, i1 true) #2, !dbg !128
  %973 = or disjoint i32 %920, 10, !dbg !128
  %974 = getelementptr float, ptr addrspace(3) %923, i32 %973, !dbg !128
  %975 = extractelement <4 x i32> %.v23, i64 2, !dbg !128
  %976 = select i1 %730, i32 %440, i32 %975, !dbg !129
  %977 = insertelement <1 x i32> poison, i32 %976, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %974, <1 x i32> %977, i1 true) #2, !dbg !128
  %978 = or disjoint i32 %920, 11, !dbg !128
  %979 = getelementptr float, ptr addrspace(3) %923, i32 %978, !dbg !128
  %980 = extractelement <4 x i32> %.v23, i64 3, !dbg !128
  %981 = select i1 %732, i32 %441, i32 %980, !dbg !129
  %982 = insertelement <1 x i32> poison, i32 %981, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %979, <1 x i32> %982, i1 true) #2, !dbg !128
  %983 = or disjoint i32 %920, 12, !dbg !128
  %984 = getelementptr float, ptr addrspace(3) %923, i32 %983, !dbg !128
  %985 = extractelement <4 x i32> %.v30, i64 0, !dbg !128
  %986 = select i1 %824, i32 %443, i32 %985, !dbg !129
  %987 = insertelement <1 x i32> poison, i32 %986, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %984, <1 x i32> %987, i1 true) #2, !dbg !128
  %988 = or disjoint i32 %920, 13, !dbg !128
  %989 = getelementptr float, ptr addrspace(3) %923, i32 %988, !dbg !128
  %990 = extractelement <4 x i32> %.v30, i64 1, !dbg !128
  %991 = select i1 %826, i32 %444, i32 %990, !dbg !129
  %992 = insertelement <1 x i32> poison, i32 %991, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %989, <1 x i32> %992, i1 true) #2, !dbg !128
  %993 = or disjoint i32 %920, 14, !dbg !128
  %994 = getelementptr float, ptr addrspace(3) %923, i32 %993, !dbg !128
  %995 = extractelement <4 x i32> %.v30, i64 2, !dbg !128
  %996 = select i1 %828, i32 %445, i32 %995, !dbg !129
  %997 = insertelement <1 x i32> poison, i32 %996, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %994, <1 x i32> %997, i1 true) #2, !dbg !128
  %998 = or disjoint i32 %920, 15, !dbg !128
  %999 = getelementptr float, ptr addrspace(3) %923, i32 %998, !dbg !128
  %1000 = extractelement <4 x i32> %.v30, i64 3, !dbg !128
  %1001 = select i1 %830, i32 %446, i32 %1000, !dbg !129
  %1002 = insertelement <1 x i32> poison, i32 %1001, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %999, <1 x i32> %1002, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %1003 = lshr i32 %921, 6, !dbg !128
  %1004 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1003, !dbg !128
  %1005 = getelementptr inbounds float, ptr addrspace(3) %1004, i32 %921, !dbg !128
  %1006 = load i32, ptr addrspace(3) %1005, align 4, !dbg !128
  %1007 = or disjoint i32 %921, 256, !dbg !128
  %1008 = lshr i32 %1007, 6, !dbg !128
  %1009 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1008, !dbg !128
  %1010 = getelementptr inbounds float, ptr addrspace(3) %1009, i32 %1007, !dbg !128
  %1011 = load i32, ptr addrspace(3) %1010, align 4, !dbg !128
  %1012 = or disjoint i32 %921, 512, !dbg !128
  %1013 = lshr i32 %1012, 6, !dbg !128
  %1014 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1013, !dbg !128
  %1015 = getelementptr inbounds float, ptr addrspace(3) %1014, i32 %1012, !dbg !128
  %1016 = load i32, ptr addrspace(3) %1015, align 4, !dbg !128
  %1017 = or disjoint i32 %921, 768, !dbg !128
  %1018 = lshr i32 %1017, 6, !dbg !128
  %1019 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1018, !dbg !128
  %1020 = getelementptr inbounds float, ptr addrspace(3) %1019, i32 %1017, !dbg !128
  %1021 = load i32, ptr addrspace(3) %1020, align 4, !dbg !128
  %1022 = or disjoint i32 %921, 1024, !dbg !128
  %1023 = lshr i32 %1022, 6, !dbg !128
  %1024 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1023, !dbg !128
  %1025 = getelementptr inbounds float, ptr addrspace(3) %1024, i32 %1022, !dbg !128
  %1026 = load i32, ptr addrspace(3) %1025, align 4, !dbg !128
  %1027 = or disjoint i32 %921, 1280, !dbg !128
  %1028 = lshr i32 %1027, 6, !dbg !128
  %1029 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1028, !dbg !128
  %1030 = getelementptr inbounds float, ptr addrspace(3) %1029, i32 %1027, !dbg !128
  %1031 = load i32, ptr addrspace(3) %1030, align 4, !dbg !128
  %1032 = or disjoint i32 %921, 1536, !dbg !128
  %1033 = lshr i32 %1032, 6, !dbg !128
  %1034 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1033, !dbg !128
  %1035 = getelementptr inbounds float, ptr addrspace(3) %1034, i32 %1032, !dbg !128
  %1036 = load i32, ptr addrspace(3) %1035, align 4, !dbg !128
  %1037 = or disjoint i32 %921, 1792, !dbg !128
  %1038 = lshr i32 %1037, 6, !dbg !128
  %1039 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1038, !dbg !128
  %1040 = getelementptr inbounds float, ptr addrspace(3) %1039, i32 %1037, !dbg !128
  %1041 = load i32, ptr addrspace(3) %1040, align 4, !dbg !128
  %1042 = or disjoint i32 %921, 2048, !dbg !128
  %1043 = lshr i32 %1042, 6, !dbg !128
  %1044 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1043, !dbg !128
  %1045 = getelementptr inbounds float, ptr addrspace(3) %1044, i32 %1042, !dbg !128
  %1046 = load i32, ptr addrspace(3) %1045, align 4, !dbg !128
  %1047 = or disjoint i32 %921, 2304, !dbg !128
  %1048 = lshr i32 %1047, 6, !dbg !128
  %1049 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1048, !dbg !128
  %1050 = getelementptr inbounds float, ptr addrspace(3) %1049, i32 %1047, !dbg !128
  %1051 = load i32, ptr addrspace(3) %1050, align 4, !dbg !128
  %1052 = or disjoint i32 %921, 2560, !dbg !128
  %1053 = lshr i32 %1052, 6, !dbg !128
  %1054 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1053, !dbg !128
  %1055 = getelementptr inbounds float, ptr addrspace(3) %1054, i32 %1052, !dbg !128
  %1056 = load i32, ptr addrspace(3) %1055, align 4, !dbg !128
  %1057 = or disjoint i32 %921, 2816, !dbg !128
  %1058 = lshr i32 %1057, 6, !dbg !128
  %1059 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1058, !dbg !128
  %1060 = getelementptr inbounds float, ptr addrspace(3) %1059, i32 %1057, !dbg !128
  %1061 = load i32, ptr addrspace(3) %1060, align 4, !dbg !128
  %1062 = or disjoint i32 %921, 3072, !dbg !128
  %1063 = lshr i32 %1062, 6, !dbg !128
  %1064 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1063, !dbg !128
  %1065 = getelementptr inbounds float, ptr addrspace(3) %1064, i32 %1062, !dbg !128
  %1066 = load i32, ptr addrspace(3) %1065, align 4, !dbg !128
  %1067 = or disjoint i32 %921, 3328, !dbg !128
  %1068 = lshr i32 %1067, 6, !dbg !128
  %1069 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1068, !dbg !128
  %1070 = getelementptr inbounds float, ptr addrspace(3) %1069, i32 %1067, !dbg !128
  %1071 = load i32, ptr addrspace(3) %1070, align 4, !dbg !128
  %1072 = or disjoint i32 %921, 3584, !dbg !128
  %1073 = lshr i32 %1072, 6, !dbg !128
  %1074 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1073, !dbg !128
  %1075 = getelementptr inbounds float, ptr addrspace(3) %1074, i32 %1072, !dbg !128
  %1076 = load i32, ptr addrspace(3) %1075, align 4, !dbg !128
  %1077 = or disjoint i32 %921, 3840, !dbg !128
  %1078 = lshr i32 %1077, 6, !dbg !128
  %1079 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1078, !dbg !128
  %1080 = getelementptr inbounds float, ptr addrspace(3) %1079, i32 %1077, !dbg !128
  %1081 = load i32, ptr addrspace(3) %1080, align 4, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1006, ptr addrspace(1) %889, i1 %115) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1011, ptr addrspace(1) %891, i1 %116) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1016, ptr addrspace(1) %893, i1 %117) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1021, ptr addrspace(1) %895, i1 %118) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1026, ptr addrspace(1) %897, i1 %119) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1031, ptr addrspace(1) %899, i1 %120) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1036, ptr addrspace(1) %901, i1 %121) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1041, ptr addrspace(1) %903, i1 %122) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1046, ptr addrspace(1) %905, i1 %123) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1051, ptr addrspace(1) %907, i1 %124) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1056, ptr addrspace(1) %909, i1 %125) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1061, ptr addrspace(1) %911, i1 %126) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1066, ptr addrspace(1) %913, i1 %127) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1071, ptr addrspace(1) %915, i1 %128) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1076, ptr addrspace(1) %917, i1 %129) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1081, ptr addrspace(1) %919, i1 %130) #2, !dbg !128
  %1082 = mul i32 %12, 288, !dbg !130
  %1083 = add i32 %51, %1082, !dbg !131
  %1084 = sext i32 %1083 to i64, !dbg !132
  %1085 = getelementptr i8, ptr addrspace(1) %2, i64 %1084, !dbg !132
  %1086 = bitcast <4 x i8> %544 to i32, !dbg !133
  %1087 = bitcast <4 x i8> %642 to i32, !dbg !133
  %1088 = bitcast <4 x i8> %740 to i32, !dbg !133
  %1089 = bitcast <4 x i8> %838 to i32, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1086, i32 %1087, i32 %1088, i32 %1089, ptr addrspace(1) %1085, i1 %114) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnrb2fsk3244maxp22ftzahp45hqnrs5iatxqfkpvgqbd5e5eoy.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_33", linkageName: "triton_poi_fused_max_pool2d_with_indices_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 50, scope: !7)
!27 = !DILocation(line: 34, column: 62, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 55, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 75, scope: !7)
!33 = !DILocation(line: 34, column: 67, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 61, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 73, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 61, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 73, scope: !7)
!44 = !DILocation(line: 37, column: 43, scope: !7)
!45 = !DILocation(line: 37, column: 52, scope: !7)
!46 = !DILocation(line: 37, column: 63, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 75, scope: !7)
!49 = !DILocation(line: 38, column: 43, scope: !7)
!50 = !DILocation(line: 38, column: 52, scope: !7)
!51 = !DILocation(line: 38, column: 63, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 75, scope: !7)
!54 = !DILocation(line: 39, column: 43, scope: !7)
!55 = !DILocation(line: 39, column: 52, scope: !7)
!56 = !DILocation(line: 39, column: 63, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 75, scope: !7)
!59 = !DILocation(line: 40, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 53, scope: !7)
!61 = !DILocation(line: 40, column: 64, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 76, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 41, column: 53, scope: !7)
!66 = !DILocation(line: 41, column: 64, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 76, scope: !7)
!69 = !DILocation(line: 42, column: 44, scope: !7)
!70 = !DILocation(line: 42, column: 53, scope: !7)
!71 = !DILocation(line: 42, column: 64, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 76, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 54, column: 35, scope: !7)
!116 = !DILocation(line: 57, column: 35, scope: !7)
!117 = !DILocation(line: 60, column: 35, scope: !7)
!118 = !DILocation(line: 63, column: 35, scope: !7)
!119 = !DILocation(line: 66, column: 35, scope: !7)
!120 = !DILocation(line: 69, column: 35, scope: !7)
!121 = !DILocation(line: 72, column: 35, scope: !7)
!122 = !DILocation(line: 75, column: 35, scope: !7)
!123 = !DILocation(line: 76, column: 34, scope: !7)
!124 = !DILocation(line: 76, column: 30, scope: !7)
!125 = !DILocation(line: 76, column: 46, scope: !7)
!126 = !DILocation(line: 76, column: 39, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 58, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
