; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 160, !dbg !14
  %16 = shl i32 %11, 2, !dbg !15
  %17 = and i32 %16, 12, !dbg !15
  %18 = srem i32 %14, 40, !dbg !16
  %19 = shl i32 %14, 4, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !20
  %24 = sext i32 %18 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %15) #5, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #5, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #5, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #5, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !28
  %46 = fadd float %35, 0x3EE4F8B580000000, !dbg !29
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i13 = icmp eq i32 %53, 0, !dbg !30
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i16 = icmp eq i32 %54, 0, !dbg !30
  br i1 %.not.i13, label %60, label %55, !dbg !30

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %58, label %56, !dbg !30

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %63, label %61, !dbg !30

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #5, !dbg !30
  br label %__nv_sqrtf.exit17, !dbg !30

__nv_sqrtf.exit17:                                ; preds = %56, %58, %61, %63
  %.0.i15 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %66 = bitcast i32 %65 to float, !dbg !20
  %67 = bitcast i32 %29 to float, !dbg !22
  %68 = fsub float %66, %67, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %70 = bitcast i32 %69 to float, !dbg !20
  %71 = fsub float %70, %67, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %73 = bitcast i32 %72 to float, !dbg !20
  %74 = fsub float %73, %67, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %76 = bitcast i32 %75 to float, !dbg !20
  %77 = fsub float %76, %67, !dbg !31
  %78 = bitcast i32 %45 to float, !dbg !28
  %79 = bitcast i32 %40 to float, !dbg !26
  %80 = and i32 %11, 31, !dbg !12
  %81 = or disjoint i32 %10, %80, !dbg !13
  %82 = icmp slt i32 %81, 160, !dbg !14
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !32
  %84 = fmul float %77, %83, !dbg !33
  %85 = fmul float %74, %83, !dbg !33
  %86 = fmul float %71, %83, !dbg !33
  %87 = fmul float %68, %83, !dbg !33
  %88 = fmul float %84, %79, !dbg !34
  %89 = fmul float %85, %79, !dbg !34
  %90 = fmul float %86, %79, !dbg !34
  %91 = fmul float %87, %79, !dbg !34
  %92 = fadd float %88, %78, !dbg !35
  %93 = fadd float %89, %78, !dbg !35
  %94 = fadd float %90, %78, !dbg !35
  %95 = fadd float %91, %78, !dbg !35
  %96 = fadd float %92, %93, !dbg !36
  %97 = fadd float %94, %96, !dbg !36
  %98 = fadd float %95, %97, !dbg !36
  %99 = select i1 %15, float %98, float 0.000000e+00, !dbg !36
  %100 = bitcast float %99 to i32, !dbg !41
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !41
  %102 = bitcast i32 %101 to float, !dbg !41
  %103 = fadd float %99, %102, !dbg !36
  %104 = bitcast float %103 to i32, !dbg !41
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !41
  %106 = bitcast i32 %105 to float, !dbg !41
  %107 = fadd float %103, %106, !dbg !36
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %109 = bitcast float %107 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !42
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !42
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.600000e+01) #5, !dbg !42
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !43
  %114 = bitcast float %92 to i32, !dbg !44
  %115 = bitcast float %93 to i32, !dbg !44
  %116 = bitcast float %94 to i32, !dbg !44
  %117 = bitcast float %95 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %113, i1 %15) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %118 = sext i32 %81 to i64, !dbg !46
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !46
  %120 = and i32 %11, 96, !dbg !47
  %121 = icmp eq i32 %120, 0, !dbg !47
  %122 = bitcast float %112 to i32, !dbg !47
  %123 = and i1 %121, %82, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %119, i1 %123) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccogasx3ysqxoh52fdo5zg6cra2icmsrjst2qhvr4jbspgn36orv.py", directory: "inductor_cache/co")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_10", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 50, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 25, scope: !7)
!44 = !DILocation(line: 53, column: 45, scope: !7)
!45 = !DILocation(line: 54, column: 4, scope: !7)
!46 = !DILocation(line: 55, column: 28, scope: !7)
!47 = !DILocation(line: 55, column: 40, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
