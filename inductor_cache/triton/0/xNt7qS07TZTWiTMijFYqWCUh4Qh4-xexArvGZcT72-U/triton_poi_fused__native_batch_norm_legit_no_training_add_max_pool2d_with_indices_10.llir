; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 3, !dbg !12
  %19 = and i32 %18, 1016, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 4, !dbg !13
  %22 = srem i32 %20, 48, !dbg !14
  %23 = srem i32 %21, 48, !dbg !14
  %24 = sext i32 %20 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = sext i32 %21 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !16
  %30 = sext i32 %22 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = sext i32 %23 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = bitcast i32 %50 to float, !dbg !20
  %55 = bitcast i32 %51 to float, !dbg !20
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !22
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #4, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = bitcast i32 %78 to float, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #4, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !31
  %93 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !31
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #4, !dbg !32
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #4, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !33
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !34
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !34
  %100 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %101 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %102 = fadd float %45, 0x3EE4F8B580000000, !dbg !35
  %103 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %104 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %106 = fadd float %54, 0x3EE4F8B580000000, !dbg !35
  %107 = fadd float %55, 0x3EE4F8B580000000, !dbg !35
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i, label %115, label %110, !dbg !36

110:                                              ; preds = %14
  br i1 %.not1.i, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %14
  br i1 %.not1.i, label %118, label %116, !dbg !36

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i30 = icmp eq i32 %120, 0, !dbg !36
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i33 = icmp eq i32 %121, 0, !dbg !36
  br i1 %.not.i30, label %127, label %122, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #4, !dbg !36
  br label %__nv_sqrtf.exit34, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #4, !dbg !36
  br label %__nv_sqrtf.exit34, !dbg !36

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %130, label %128, !dbg !36

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #4, !dbg !36
  br label %__nv_sqrtf.exit34, !dbg !36

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #4, !dbg !36
  br label %__nv_sqrtf.exit34, !dbg !36

__nv_sqrtf.exit34:                                ; preds = %123, %125, %128, %130
  %.0.i32 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i35 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i38 = icmp eq i32 %133, 0, !dbg !36
  br i1 %.not.i35, label %139, label %134, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #4, !dbg !36
  br label %__nv_sqrtf.exit39, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #4, !dbg !36
  br label %__nv_sqrtf.exit39, !dbg !36

139:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %142, label %140, !dbg !36

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #4, !dbg !36
  br label %__nv_sqrtf.exit39, !dbg !36

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #4, !dbg !36
  br label %__nv_sqrtf.exit39, !dbg !36

__nv_sqrtf.exit39:                                ; preds = %135, %137, %140, %142
  %.0.i37 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i40 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i43 = icmp eq i32 %145, 0, !dbg !36
  br i1 %.not.i40, label %151, label %146, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #4, !dbg !36
  br label %__nv_sqrtf.exit44, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #4, !dbg !36
  br label %__nv_sqrtf.exit44, !dbg !36

151:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #4, !dbg !36
  br label %__nv_sqrtf.exit44, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #4, !dbg !36
  br label %__nv_sqrtf.exit44, !dbg !36

__nv_sqrtf.exit44:                                ; preds = %147, %149, %152, %154
  %.0.i42 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i45 = icmp eq i32 %156, 0, !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i48 = icmp eq i32 %157, 0, !dbg !36
  br i1 %.not.i45, label %163, label %158, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit49, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit49, !dbg !36

163:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %166, label %164, !dbg !36

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit49, !dbg !36

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit49, !dbg !36

__nv_sqrtf.exit49:                                ; preds = %159, %161, %164, %166
  %.0.i47 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i50 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i53 = icmp eq i32 %169, 0, !dbg !36
  br i1 %.not.i50, label %175, label %170, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit54, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit54, !dbg !36

175:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %178, label %176, !dbg !36

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit54, !dbg !36

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit54, !dbg !36

__nv_sqrtf.exit54:                                ; preds = %171, %173, %176, %178
  %.0.i52 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i55 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i58 = icmp eq i32 %181, 0, !dbg !36
  br i1 %.not.i55, label %187, label %182, !dbg !36

182:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %185, label %183, !dbg !36

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit59, !dbg !36

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit59, !dbg !36

187:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit59, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit59, !dbg !36

__nv_sqrtf.exit59:                                ; preds = %183, %185, %188, %190
  %.0.i57 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i60 = icmp eq i32 %192, 0, !dbg !36
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i63 = icmp eq i32 %193, 0, !dbg !36
  br i1 %.not.i60, label %199, label %194, !dbg !36

194:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %197, label %195, !dbg !36

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit64, !dbg !36

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit64, !dbg !36

199:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %202, label %200, !dbg !36

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit64, !dbg !36

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit64, !dbg !36

__nv_sqrtf.exit64:                                ; preds = %195, %197, %200, %202
  %.0.i62 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !36
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !37
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !37
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !37
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !37
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !37
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !37
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !37
  %212 = fadd float %79, 0x3EE4F8B580000000, !dbg !38
  %213 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %214 = fadd float %81, 0x3EE4F8B580000000, !dbg !38
  %215 = fadd float %82, 0x3EE4F8B580000000, !dbg !38
  %216 = fadd float %88, 0x3EE4F8B580000000, !dbg !38
  %217 = fadd float %89, 0x3EE4F8B580000000, !dbg !38
  %218 = fadd float %90, 0x3EE4F8B580000000, !dbg !38
  %219 = fadd float %91, 0x3EE4F8B580000000, !dbg !38
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i65 = icmp eq i32 %220, 0, !dbg !39
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i68 = icmp eq i32 %221, 0, !dbg !39
  br i1 %.not.i65, label %227, label %222, !dbg !39

222:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %225, label %223, !dbg !39

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #4, !dbg !39
  br label %__nv_sqrtf.exit69, !dbg !39

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #4, !dbg !39
  br label %__nv_sqrtf.exit69, !dbg !39

227:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %230, label %228, !dbg !39

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #4, !dbg !39
  br label %__nv_sqrtf.exit69, !dbg !39

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #4, !dbg !39
  br label %__nv_sqrtf.exit69, !dbg !39

__nv_sqrtf.exit69:                                ; preds = %223, %225, %228, %230
  %.0.i67 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !39
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i70 = icmp eq i32 %232, 0, !dbg !39
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i73 = icmp eq i32 %233, 0, !dbg !39
  br i1 %.not.i70, label %239, label %234, !dbg !39

234:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %237, label %235, !dbg !39

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #4, !dbg !39
  br label %__nv_sqrtf.exit74, !dbg !39

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #4, !dbg !39
  br label %__nv_sqrtf.exit74, !dbg !39

239:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %242, label %240, !dbg !39

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #4, !dbg !39
  br label %__nv_sqrtf.exit74, !dbg !39

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #4, !dbg !39
  br label %__nv_sqrtf.exit74, !dbg !39

__nv_sqrtf.exit74:                                ; preds = %235, %237, %240, %242
  %.0.i72 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !39
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i75 = icmp eq i32 %244, 0, !dbg !39
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i78 = icmp eq i32 %245, 0, !dbg !39
  br i1 %.not.i75, label %251, label %246, !dbg !39

246:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %249, label %247, !dbg !39

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #4, !dbg !39
  br label %__nv_sqrtf.exit79, !dbg !39

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #4, !dbg !39
  br label %__nv_sqrtf.exit79, !dbg !39

251:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %254, label %252, !dbg !39

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #4, !dbg !39
  br label %__nv_sqrtf.exit79, !dbg !39

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #4, !dbg !39
  br label %__nv_sqrtf.exit79, !dbg !39

__nv_sqrtf.exit79:                                ; preds = %247, %249, %252, %254
  %.0.i77 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !39
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i80 = icmp eq i32 %256, 0, !dbg !39
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i83 = icmp eq i32 %257, 0, !dbg !39
  br i1 %.not.i80, label %263, label %258, !dbg !39

258:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %261, label %259, !dbg !39

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #4, !dbg !39
  br label %__nv_sqrtf.exit84, !dbg !39

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #4, !dbg !39
  br label %__nv_sqrtf.exit84, !dbg !39

263:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %266, label %264, !dbg !39

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #4, !dbg !39
  br label %__nv_sqrtf.exit84, !dbg !39

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #4, !dbg !39
  br label %__nv_sqrtf.exit84, !dbg !39

__nv_sqrtf.exit84:                                ; preds = %259, %261, %264, %266
  %.0.i82 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !39
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i85 = icmp eq i32 %268, 0, !dbg !39
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i88 = icmp eq i32 %269, 0, !dbg !39
  br i1 %.not.i85, label %275, label %270, !dbg !39

270:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %273, label %271, !dbg !39

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #4, !dbg !39
  br label %__nv_sqrtf.exit89, !dbg !39

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #4, !dbg !39
  br label %__nv_sqrtf.exit89, !dbg !39

275:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %278, label %276, !dbg !39

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #4, !dbg !39
  br label %__nv_sqrtf.exit89, !dbg !39

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #4, !dbg !39
  br label %__nv_sqrtf.exit89, !dbg !39

__nv_sqrtf.exit89:                                ; preds = %271, %273, %276, %278
  %.0.i87 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i90 = icmp eq i32 %280, 0, !dbg !39
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i93 = icmp eq i32 %281, 0, !dbg !39
  br i1 %.not.i90, label %287, label %282, !dbg !39

282:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %285, label %283, !dbg !39

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #4, !dbg !39
  br label %__nv_sqrtf.exit94, !dbg !39

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #4, !dbg !39
  br label %__nv_sqrtf.exit94, !dbg !39

287:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %290, label %288, !dbg !39

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #4, !dbg !39
  br label %__nv_sqrtf.exit94, !dbg !39

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #4, !dbg !39
  br label %__nv_sqrtf.exit94, !dbg !39

__nv_sqrtf.exit94:                                ; preds = %283, %285, %288, %290
  %.0.i92 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i95 = icmp eq i32 %292, 0, !dbg !39
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i98 = icmp eq i32 %293, 0, !dbg !39
  br i1 %.not.i95, label %299, label %294, !dbg !39

294:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %297, label %295, !dbg !39

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #4, !dbg !39
  br label %__nv_sqrtf.exit99, !dbg !39

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #4, !dbg !39
  br label %__nv_sqrtf.exit99, !dbg !39

299:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %302, label %300, !dbg !39

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #4, !dbg !39
  br label %__nv_sqrtf.exit99, !dbg !39

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #4, !dbg !39
  br label %__nv_sqrtf.exit99, !dbg !39

__nv_sqrtf.exit99:                                ; preds = %295, %297, %300, %302
  %.0.i97 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !39
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i100 = icmp eq i32 %304, 0, !dbg !39
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i103 = icmp eq i32 %305, 0, !dbg !39
  br i1 %.not.i100, label %311, label %306, !dbg !39

306:                                              ; preds = %__nv_sqrtf.exit99
  br i1 %.not1.i103, label %309, label %307, !dbg !39

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #4, !dbg !39
  br label %__nv_sqrtf.exit104, !dbg !39

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #4, !dbg !39
  br label %__nv_sqrtf.exit104, !dbg !39

311:                                              ; preds = %__nv_sqrtf.exit99
  br i1 %.not1.i103, label %314, label %312, !dbg !39

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #4, !dbg !39
  br label %__nv_sqrtf.exit104, !dbg !39

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #4, !dbg !39
  br label %__nv_sqrtf.exit104, !dbg !39

__nv_sqrtf.exit104:                               ; preds = %307, %309, %312, %314
  %.0.i102 = phi float [ %308, %307 ], [ %310, %309 ], [ %313, %312 ], [ %315, %314 ], !dbg !39
  %316 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %317 = bitcast i32 %316 to float, !dbg !16
  %318 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %319 = bitcast i32 %318 to float, !dbg !18
  %320 = fsub float %317, %319, !dbg !40
  %321 = fmul float %320, %211, !dbg !41
  %322 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !22
  %323 = bitcast i32 %322 to float, !dbg !22
  %324 = fmul float %321, %323, !dbg !42
  %325 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %326 = bitcast i32 %325 to float, !dbg !24
  %327 = fadd float %324, %326, !dbg !43
  %328 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %329 = bitcast i32 %328 to float, !dbg !26
  %330 = fadd float %327, %329, !dbg !44
  %331 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %332 = bitcast i32 %331 to float, !dbg !28
  %333 = fsub float %330, %332, !dbg !45
  %334 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %335 = bitcast i32 %334 to float, !dbg !16
  %336 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %337 = bitcast i32 %336 to float, !dbg !18
  %338 = fsub float %335, %337, !dbg !40
  %339 = fmul float %338, %210, !dbg !41
  %340 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !22
  %341 = bitcast i32 %340 to float, !dbg !22
  %342 = fmul float %339, %341, !dbg !42
  %343 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %344 = bitcast i32 %343 to float, !dbg !24
  %345 = fadd float %342, %344, !dbg !43
  %346 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %347 = bitcast i32 %346 to float, !dbg !26
  %348 = fadd float %345, %347, !dbg !44
  %349 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %350 = bitcast i32 %349 to float, !dbg !28
  %351 = fsub float %348, %350, !dbg !45
  %352 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %353 = bitcast i32 %352 to float, !dbg !16
  %354 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %355 = bitcast i32 %354 to float, !dbg !18
  %356 = fsub float %353, %355, !dbg !40
  %357 = fmul float %356, %209, !dbg !41
  %358 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !22
  %359 = bitcast i32 %358 to float, !dbg !22
  %360 = fmul float %357, %359, !dbg !42
  %361 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %362 = bitcast i32 %361 to float, !dbg !24
  %363 = fadd float %360, %362, !dbg !43
  %364 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %365 = bitcast i32 %364 to float, !dbg !26
  %366 = fadd float %363, %365, !dbg !44
  %367 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %368 = bitcast i32 %367 to float, !dbg !28
  %369 = fsub float %366, %368, !dbg !45
  %370 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %371 = bitcast i32 %370 to float, !dbg !16
  %372 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %373 = bitcast i32 %372 to float, !dbg !18
  %374 = fsub float %371, %373, !dbg !40
  %375 = fmul float %374, %208, !dbg !41
  %376 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !22
  %377 = bitcast i32 %376 to float, !dbg !22
  %378 = fmul float %375, %377, !dbg !42
  %379 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %380 = bitcast i32 %379 to float, !dbg !24
  %381 = fadd float %378, %380, !dbg !43
  %382 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %383 = bitcast i32 %382 to float, !dbg !26
  %384 = fadd float %381, %383, !dbg !44
  %385 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %386 = bitcast i32 %385 to float, !dbg !28
  %387 = fsub float %384, %386, !dbg !45
  %388 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %389 = bitcast i32 %388 to float, !dbg !16
  %390 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %391 = bitcast i32 %390 to float, !dbg !18
  %392 = fsub float %389, %391, !dbg !40
  %393 = fmul float %392, %207, !dbg !41
  %394 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !22
  %395 = bitcast i32 %394 to float, !dbg !22
  %396 = fmul float %393, %395, !dbg !42
  %397 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %398 = bitcast i32 %397 to float, !dbg !24
  %399 = fadd float %396, %398, !dbg !43
  %400 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %401 = bitcast i32 %400 to float, !dbg !26
  %402 = fadd float %399, %401, !dbg !44
  %403 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %404 = bitcast i32 %403 to float, !dbg !28
  %405 = fsub float %402, %404, !dbg !45
  %406 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %407 = bitcast i32 %406 to float, !dbg !16
  %408 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %409 = bitcast i32 %408 to float, !dbg !18
  %410 = fsub float %407, %409, !dbg !40
  %411 = fmul float %410, %206, !dbg !41
  %412 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !22
  %413 = bitcast i32 %412 to float, !dbg !22
  %414 = fmul float %411, %413, !dbg !42
  %415 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %416 = bitcast i32 %415 to float, !dbg !24
  %417 = fadd float %414, %416, !dbg !43
  %418 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %419 = bitcast i32 %418 to float, !dbg !26
  %420 = fadd float %417, %419, !dbg !44
  %421 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %422 = bitcast i32 %421 to float, !dbg !28
  %423 = fsub float %420, %422, !dbg !45
  %424 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %425 = bitcast i32 %424 to float, !dbg !16
  %426 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %427 = bitcast i32 %426 to float, !dbg !18
  %428 = fsub float %425, %427, !dbg !40
  %429 = fmul float %428, %205, !dbg !41
  %430 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !22
  %431 = bitcast i32 %430 to float, !dbg !22
  %432 = fmul float %429, %431, !dbg !42
  %433 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %434 = bitcast i32 %433 to float, !dbg !24
  %435 = fadd float %432, %434, !dbg !43
  %436 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %437 = bitcast i32 %436 to float, !dbg !26
  %438 = fadd float %435, %437, !dbg !44
  %439 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %440 = bitcast i32 %439 to float, !dbg !28
  %441 = fsub float %438, %440, !dbg !45
  %442 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %443 = bitcast i32 %442 to float, !dbg !16
  %444 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %445 = bitcast i32 %444 to float, !dbg !18
  %446 = fsub float %443, %445, !dbg !40
  %447 = fmul float %446, %204, !dbg !41
  %448 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !22
  %449 = bitcast i32 %448 to float, !dbg !22
  %450 = fmul float %447, %449, !dbg !42
  %451 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %452 = bitcast i32 %451 to float, !dbg !24
  %453 = fadd float %450, %452, !dbg !43
  %454 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %455 = bitcast i32 %454 to float, !dbg !26
  %456 = fadd float %453, %455, !dbg !44
  %457 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %458 = bitcast i32 %457 to float, !dbg !28
  %459 = fsub float %456, %458, !dbg !45
  %460 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !34
  %461 = bitcast i32 %460 to float, !dbg !34
  %462 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !34
  %463 = bitcast i32 %462 to float, !dbg !34
  %464 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !34
  %465 = bitcast i32 %464 to float, !dbg !34
  %466 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !34
  %467 = bitcast i32 %466 to float, !dbg !34
  %468 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %469 = bitcast i32 %468 to float, !dbg !34
  %470 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %471 = bitcast i32 %470 to float, !dbg !34
  %472 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %473 = bitcast i32 %472 to float, !dbg !34
  %474 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %475 = bitcast i32 %474 to float, !dbg !34
  %476 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %477 = bitcast i32 %476 to float, !dbg !32
  %478 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %479 = bitcast i32 %478 to float, !dbg !32
  %480 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %481 = bitcast i32 %480 to float, !dbg !32
  %482 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %483 = bitcast i32 %482 to float, !dbg !32
  %484 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %485 = bitcast i32 %484 to float, !dbg !32
  %486 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %487 = bitcast i32 %486 to float, !dbg !32
  %488 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %489 = bitcast i32 %488 to float, !dbg !32
  %490 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %491 = bitcast i32 %490 to float, !dbg !32
  %492 = shl i32 %17, 2, !dbg !12
  %493 = and i32 %492, 508, !dbg !12
  %494 = or disjoint i32 %493, 512, !dbg !12
  %495 = or disjoint i32 %16, %494, !dbg !13
  %496 = or disjoint i32 %16, %493, !dbg !13
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i67) #4, !dbg !46
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i72) #4, !dbg !46
  %499 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i77) #4, !dbg !46
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i82) #4, !dbg !46
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i87) #4, !dbg !46
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i92) #4, !dbg !46
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i97) #4, !dbg !46
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i102) #4, !dbg !46
  %505 = fmul float %459, %497, !dbg !47
  %506 = fmul float %441, %498, !dbg !47
  %507 = fmul float %423, %499, !dbg !47
  %508 = fmul float %405, %500, !dbg !47
  %509 = fmul float %387, %501, !dbg !47
  %510 = fmul float %369, %502, !dbg !47
  %511 = fmul float %351, %503, !dbg !47
  %512 = fmul float %333, %504, !dbg !47
  %513 = fmul float %505, %491, !dbg !48
  %514 = fmul float %506, %489, !dbg !48
  %515 = fmul float %507, %487, !dbg !48
  %516 = fmul float %508, %485, !dbg !48
  %517 = fmul float %509, %483, !dbg !48
  %518 = fmul float %510, %481, !dbg !48
  %519 = fmul float %511, %479, !dbg !48
  %520 = fmul float %512, %477, !dbg !48
  %521 = fadd float %513, %475, !dbg !49
  %522 = fadd float %514, %473, !dbg !49
  %523 = fadd float %515, %471, !dbg !49
  %524 = fadd float %516, %469, !dbg !49
  %525 = fadd float %517, %467, !dbg !49
  %526 = fadd float %518, %465, !dbg !49
  %527 = fadd float %519, %463, !dbg !49
  %528 = fadd float %520, %461, !dbg !49
  %529 = sext i32 %496 to i64, !dbg !50
  %530 = getelementptr float, ptr addrspace(1) %10, i64 %529, !dbg !50
  %531 = sext i32 %495 to i64, !dbg !50
  %532 = getelementptr float, ptr addrspace(1) %10, i64 %531, !dbg !50
  %533 = zext nneg i32 %19 to i64, !dbg !51
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %533, !dbg !51
  %535 = bitcast float %456 to i32, !dbg !51
  %536 = bitcast float %438 to i32, !dbg !51
  %537 = bitcast float %420 to i32, !dbg !51
  %538 = bitcast float %402 to i32, !dbg !51
  %539 = bitcast float %384 to i32, !dbg !51
  %540 = bitcast float %366 to i32, !dbg !51
  %541 = bitcast float %348 to i32, !dbg !51
  %542 = bitcast float %330 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %534, i32 %535, i32 %536, i32 %537, i32 %538, i1 true) #4, !dbg !51
  %543 = getelementptr inbounds i8, ptr addrspace(3) %534, i64 16, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %543, i32 %539, i32 %540, i32 %541, i32 %542, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %544 = zext nneg i32 %493 to i64, !dbg !51
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %544, !dbg !51
  %546 = zext nneg i32 %494 to i64, !dbg !51
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %546, !dbg !51
  %548 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %545, align 16, !dbg !51
  %549 = getelementptr inbounds i8, ptr addrspace(3) %545, i64 4, !dbg !51
  %.extract8 = load i32, ptr addrspace(3) %549, align 4, !dbg !51
  %550 = getelementptr inbounds i8, ptr addrspace(3) %545, i64 8, !dbg !51
  %.extract9 = load i32, ptr addrspace(3) %550, align 8, !dbg !51
  %551 = getelementptr inbounds i8, ptr addrspace(3) %545, i64 12, !dbg !51
  %.extract10 = load i32, ptr addrspace(3) %551, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %530, i1 true) #4, !dbg !51
  %.extract11 = extractelement <4 x i32> %548, i64 0, !dbg !51
  %.extract12 = extractelement <4 x i32> %548, i64 1, !dbg !51
  %.extract13 = extractelement <4 x i32> %548, i64 2, !dbg !51
  %.extract14 = extractelement <4 x i32> %548, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %532, i1 true) #4, !dbg !51
  %552 = getelementptr i8, ptr addrspace(1) %11, i64 %24, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %552, i1 true) #4, !dbg !53
  %553 = getelementptr float, ptr addrspace(1) %12, i64 %529, !dbg !54
  %554 = getelementptr float, ptr addrspace(1) %12, i64 %531, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %555 = bitcast float %521 to i32, !dbg !55
  %556 = bitcast float %522 to i32, !dbg !55
  %557 = bitcast float %523 to i32, !dbg !55
  %558 = bitcast float %524 to i32, !dbg !55
  %559 = bitcast float %525 to i32, !dbg !55
  %560 = bitcast float %526 to i32, !dbg !55
  %561 = bitcast float %527 to i32, !dbg !55
  %562 = bitcast float %528 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %534, i32 %555, i32 %556, i32 %557, i32 %558, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %543, i32 %559, i32 %560, i32 %561, i32 %562, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %563 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !55
  %.extract22 = load i32, ptr addrspace(3) %545, align 16, !dbg !55
  %.extract23 = load i32, ptr addrspace(3) %549, align 4, !dbg !55
  %.extract24 = load i32, ptr addrspace(3) %550, align 8, !dbg !55
  %.extract25 = load i32, ptr addrspace(3) %551, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %553, i1 true) #4, !dbg !55
  %.extract26 = extractelement <4 x i32> %563, i64 0, !dbg !55
  %.extract27 = extractelement <4 x i32> %563, i64 1, !dbg !55
  %.extract28 = extractelement <4 x i32> %563, i64 2, !dbg !55
  %.extract29 = extractelement <4 x i32> %563, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %554, i1 true) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cayu6guz4cmafwmefzuxfs5igjx5zjajf42aq6ouln4nvd34f7zo.py", directory: "inductor_cache/ay")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 37, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 37, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
