; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = or disjoint i32 %10, 16, !dbg !12
  %13 = or disjoint i32 %10, 24, !dbg !12
  %14 = and i32 %8, 31, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 64, !dbg !14
  %21 = icmp slt i32 %16, 64, !dbg !14
  %22 = icmp slt i32 %17, 64, !dbg !14
  %23 = icmp slt i32 %18, 64, !dbg !14
  %24 = icmp slt i32 %19, 64, !dbg !14
  %25 = shl i32 %8, 2, !dbg !15
  %26 = and i32 %25, 124, !dbg !15
  %27 = icmp samesign ult i32 %26, 108, !dbg !16
  %28 = mul i32 %15, 108, !dbg !17
  %29 = mul i32 %16, 108, !dbg !17
  %30 = mul i32 %17, 108, !dbg !17
  %31 = mul i32 %18, 108, !dbg !17
  %32 = add i32 %28, %26, !dbg !18
  %33 = add i32 %29, %26, !dbg !18
  %34 = add i32 %30, %26, !dbg !18
  %35 = add i32 %31, %26, !dbg !18
  %36 = sext i32 %32 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = sext i32 %33 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %34 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = sext i32 %35 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = and i1 %27, %20, !dbg !20
  %45 = and i1 %27, %21, !dbg !20
  %46 = and i1 %27, %22, !dbg !20
  %47 = and i1 %27, %23, !dbg !20
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = bitcast i32 %50 to float, !dbg !21
  %55 = bitcast i32 %51 to float, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = bitcast i32 %59 to float, !dbg !21
  %64 = bitcast i32 %60 to float, !dbg !21
  %65 = bitcast i32 %61 to float, !dbg !21
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !21
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !21
  %71 = bitcast i32 %67 to float, !dbg !21
  %72 = bitcast i32 %68 to float, !dbg !21
  %73 = bitcast i32 %69 to float, !dbg !21
  %74 = bitcast i32 %70 to float, !dbg !21
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !21
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !21
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !21
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !21
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !21
  %80 = bitcast i32 %76 to float, !dbg !21
  %81 = bitcast i32 %77 to float, !dbg !21
  %82 = bitcast i32 %78 to float, !dbg !21
  %83 = bitcast i32 %79 to float, !dbg !21
  %84 = zext nneg i32 %26 to i64, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !22
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !23
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !23
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !23
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !23
  %91 = bitcast i32 %87 to float, !dbg !23
  %92 = bitcast i32 %88 to float, !dbg !23
  %93 = bitcast i32 %89 to float, !dbg !23
  %94 = bitcast i32 %90 to float, !dbg !23
  %95 = fmul float %53, %91, !dbg !24
  %96 = fmul float %54, %92, !dbg !24
  %97 = fmul float %55, %93, !dbg !24
  %98 = fmul float %56, %94, !dbg !24
  %99 = fmul float %62, %91, !dbg !24
  %100 = fmul float %63, %92, !dbg !24
  %101 = fmul float %64, %93, !dbg !24
  %102 = fmul float %65, %94, !dbg !24
  %103 = fmul float %71, %91, !dbg !24
  %104 = fmul float %72, %92, !dbg !24
  %105 = fmul float %73, %93, !dbg !24
  %106 = fmul float %74, %94, !dbg !24
  %107 = fmul float %80, %91, !dbg !24
  %108 = fmul float %81, %92, !dbg !24
  %109 = fmul float %82, %93, !dbg !24
  %110 = fmul float %83, %94, !dbg !24
  %111 = fadd float %95, %96, !dbg !25
  %112 = fadd float %97, %111, !dbg !25
  %113 = fadd float %98, %112, !dbg !25
  %114 = select i1 %44, float %113, float 0.000000e+00, !dbg !25
  %115 = fadd float %99, %100, !dbg !25
  %116 = fadd float %101, %115, !dbg !25
  %117 = fadd float %102, %116, !dbg !25
  %118 = select i1 %45, float %117, float 0.000000e+00, !dbg !25
  %119 = fadd float %103, %104, !dbg !25
  %120 = fadd float %105, %119, !dbg !25
  %121 = fadd float %106, %120, !dbg !25
  %122 = select i1 %46, float %121, float 0.000000e+00, !dbg !25
  %123 = fadd float %107, %108, !dbg !25
  %124 = fadd float %109, %123, !dbg !25
  %125 = fadd float %110, %124, !dbg !25
  %126 = select i1 %47, float %125, float 0.000000e+00, !dbg !25
  %127 = bitcast float %114 to i32, !dbg !30
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !30
  %129 = bitcast i32 %128 to float, !dbg !30
  %130 = fadd float %114, %129, !dbg !25
  %131 = bitcast float %130 to i32, !dbg !30
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fadd float %130, %133, !dbg !25
  %135 = bitcast float %134 to i32, !dbg !30
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !30
  %137 = bitcast i32 %136 to float, !dbg !30
  %138 = fadd float %134, %137, !dbg !25
  %139 = bitcast float %138 to i32, !dbg !30
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !30
  %141 = bitcast i32 %140 to float, !dbg !30
  %142 = fadd float %138, %141, !dbg !25
  %143 = bitcast float %142 to i32, !dbg !30
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !30
  %145 = bitcast i32 %144 to float, !dbg !30
  %146 = fadd float %142, %145, !dbg !25
  %147 = bitcast float %118 to i32, !dbg !30
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !30
  %149 = bitcast i32 %148 to float, !dbg !30
  %150 = fadd float %118, %149, !dbg !25
  %151 = bitcast float %150 to i32, !dbg !30
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !30
  %153 = bitcast i32 %152 to float, !dbg !30
  %154 = fadd float %150, %153, !dbg !25
  %155 = bitcast float %154 to i32, !dbg !30
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = fadd float %154, %157, !dbg !25
  %159 = bitcast float %158 to i32, !dbg !30
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !30
  %161 = bitcast i32 %160 to float, !dbg !30
  %162 = fadd float %158, %161, !dbg !25
  %163 = bitcast float %162 to i32, !dbg !30
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = fadd float %162, %165, !dbg !25
  %167 = bitcast float %122 to i32, !dbg !30
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = fadd float %122, %169, !dbg !25
  %171 = bitcast float %170 to i32, !dbg !30
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = fadd float %170, %173, !dbg !25
  %175 = bitcast float %174 to i32, !dbg !30
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = fadd float %174, %177, !dbg !25
  %179 = bitcast float %178 to i32, !dbg !30
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !30
  %181 = bitcast i32 %180 to float, !dbg !30
  %182 = fadd float %178, %181, !dbg !25
  %183 = bitcast float %182 to i32, !dbg !30
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !30
  %185 = bitcast i32 %184 to float, !dbg !30
  %186 = fadd float %182, %185, !dbg !25
  %187 = bitcast float %126 to i32, !dbg !30
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !30
  %189 = bitcast i32 %188 to float, !dbg !30
  %190 = fadd float %126, %189, !dbg !25
  %191 = bitcast float %190 to i32, !dbg !30
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = fadd float %190, %193, !dbg !25
  %195 = bitcast float %194 to i32, !dbg !30
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 4, i32 31), !dbg !30
  %197 = bitcast i32 %196 to float, !dbg !30
  %198 = fadd float %194, %197, !dbg !25
  %199 = bitcast float %198 to i32, !dbg !30
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 2, i32 31), !dbg !30
  %201 = bitcast i32 %200 to float, !dbg !30
  %202 = fadd float %198, %201, !dbg !25
  %203 = bitcast float %202 to i32, !dbg !30
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !30
  %205 = bitcast i32 %204 to float, !dbg !30
  %206 = fadd float %202, %205, !dbg !25
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %208 = bitcast float %146 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #3, !dbg !31
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %210 = bitcast float %166 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #3, !dbg !31
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %212 = bitcast float %186 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #3, !dbg !31
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %214 = bitcast float %206 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !31
  %217 = sext i32 %19 to i64, !dbg !32
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !32
  %219 = and i32 %8, 224, !dbg !33
  %220 = icmp eq i32 %219, 0, !dbg !33
  %221 = and i1 %220, %24, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %218, i1 %221) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgxinxl3cbfc56zndizzezyosaom4sp2iyfhslwwgkcm33liwfzh.py", directory: "inductor_cache/gx")
!4 = !{ptr @triton_per_fused_mv_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_0", linkageName: "triton_per_fused_mv_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 52, scope: !7)
!21 = !DILocation(line: 31, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 36, column: 27, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 4, scope: !7)
