; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_atan_div_maximum_mean_minimum_mul_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = icmp slt i32 %14, 4, !dbg !14
  %16 = shl i32 %14, 2, !dbg !15
  %17 = or disjoint i32 %16, 2, !dbg !16
  %18 = sext i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %15) #2, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #2, !dbg !20
  %23 = sext i32 %16 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #2, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #2, !dbg !24
  %28 = or disjoint i32 %16, 3, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #2, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #2, !dbg !29
  %34 = or disjoint i32 %16, 1, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #2, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !33
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #2, !dbg !34
  %40 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %31, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %44 = insertelement <2 x i32> %43, i32 %37, i64 1, !dbg !22
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !22
  %46 = fcmp uno <2 x float> %42, zeroinitializer, !dbg !35
  %47 = fcmp uno <2 x float> %45, zeroinitializer, !dbg !39
  %48 = bitcast i32 %20 to float, !dbg !41
  %49 = bitcast i32 %25 to float, !dbg !41
  %50 = fsub float %48, %49, !dbg !41
  %51 = bitcast i32 %31 to float, !dbg !42
  %52 = bitcast i32 %37 to float, !dbg !42
  %53 = fsub float %51, %52, !dbg !42
  %54 = bitcast i32 %22 to float, !dbg !43
  %55 = bitcast i32 %27 to float, !dbg !43
  %56 = fsub float %54, %55, !dbg !43
  %57 = bitcast i32 %33 to float, !dbg !44
  %58 = bitcast i32 %39 to float, !dbg !44
  %59 = fsub float %57, %58, !dbg !44
  %60 = fadd float %48, %49, !dbg !45
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.000000e+00) #2, !dbg !46
  %62 = fadd float %54, %55, !dbg !47
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.000000e+00) #2, !dbg !48
  %64 = fsub float %61, %63, !dbg !49
  %65 = fmul float %64, %64, !dbg !50
  %66 = fadd float %51, %52, !dbg !51
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 2.000000e+00) #2, !dbg !52
  %68 = fadd float %57, %58, !dbg !53
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 2.000000e+00) #2, !dbg !54
  %70 = fsub float %67, %69, !dbg !55
  %71 = fmul float %70, %70, !dbg !56
  %72 = fadd float %65, %71, !dbg !57
  %73 = fcmp olt float %49, %55, !dbg !58
  %74 = extractelement <2 x i1> %47, i64 0, !dbg !60
  %75 = or i1 %74, %73, !dbg !60
  %76 = select i1 %75, float %49, float %55, !dbg !61
  %77 = fcmp ogt float %48, %54, !dbg !62
  %78 = extractelement <2 x i1> %46, i64 0, !dbg !64
  %79 = or i1 %78, %77, !dbg !64
  %80 = select i1 %79, float %48, float %54, !dbg !65
  %81 = fsub float %76, %80, !dbg !66
  %82 = fmul float %81, %81, !dbg !67
  %83 = fcmp olt float %52, %58, !dbg !68
  %84 = extractelement <2 x i1> %47, i64 1, !dbg !70
  %85 = or i1 %84, %83, !dbg !70
  %86 = select i1 %85, float %52, float %58, !dbg !71
  %87 = fcmp ogt float %51, %57, !dbg !72
  %88 = extractelement <2 x i1> %46, i64 1, !dbg !74
  %89 = or i1 %88, %87, !dbg !74
  %90 = select i1 %89, float %51, float %57, !dbg !75
  %91 = fsub float %86, %90, !dbg !76
  %92 = fmul float %91, %91, !dbg !77
  %93 = fadd float %82, %92, !dbg !78
  %94 = fadd float %93, 0x3EE4F8B580000000, !dbg !79
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %94) #2, !dbg !80
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %53) #2, !dbg !81
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not.i = icmp eq i32 %97, 0, !dbg !82
  %98 = tail call float @llvm.nvvm.fabs.ftz.f(float %96) #2, !dbg !82
  %99 = tail call float @llvm.nvvm.fabs.f(float %96) #2, !dbg !82
  %.0.i = select i1 %.not.i, float %99, float %98, !dbg !82
  %100 = fcmp ogt float %.0.i, 1.000000e+00, !dbg !82
  %101 = fdiv float 1.000000e+00, %.0.i, !dbg !82
  %t1.0.i = select i1 %100, float %101, float %.0.i, !dbg !82
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not1.i = icmp eq i32 %102, 0, !dbg !82
  %103 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t1.0.i, float %t1.0.i) #2, !dbg !82
  %104 = tail call float @llvm.nvvm.mul.rn.f(float %t1.0.i, float %t1.0.i) #2, !dbg !82
  %.01.i = select i1 %.not1.i, float %104, float %103, !dbg !82
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not2.i = icmp eq i32 %105, 0, !dbg !82
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #2, !dbg !82
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #2, !dbg !82
  %.02.i = select i1 %.not2.i, float %107, float %106, !dbg !82
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not3.i = icmp eq i32 %108, 0, !dbg !82
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %.01.i, float 0xC01A4320E0000000) #2, !dbg !82
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %.01.i, float 0xC01A4320E0000000) #2, !dbg !82
  %.03.i = select i1 %.not3.i, float %110, float %109, !dbg !82
  %111 = fmul float %.01.i, %.03.i, !dbg !82
  %112 = fmul float %t1.0.i, %111, !dbg !82
  %113 = fadd float %.01.i, 0x4026ABB800000000, !dbg !82
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not4.i = icmp eq i32 %114, 0, !dbg !82
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %113, float %.01.i, float 0x403CD7AC00000000) #2, !dbg !82
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %113, float %.01.i, float 0x403CD7AC00000000) #2, !dbg !82
  %.04.i = select i1 %.not4.i, float %116, float %115, !dbg !82
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not5.i = icmp eq i32 %117, 0, !dbg !82
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %.01.i, float 0x4033B25900000000) #2, !dbg !82
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %.01.i, float 0x4033B25900000000) #2, !dbg !82
  %.05.i = select i1 %.not5.i, float %119, float %118, !dbg !82
  %120 = fdiv float 1.000000e+00, %.05.i, !dbg !82
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %.not6.i = icmp eq i32 %121, 0, !dbg !82
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float %120, float %t1.0.i) #2, !dbg !82
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %112, float %120, float %t1.0.i) #2, !dbg !82
  %.06.i = select i1 %.not6.i, float %123, float %122, !dbg !82
  %124 = fsub float 0x3FF921FB60000000, %.06.i, !dbg !82
  %t1.1.i = select i1 %100, float %124, float %.06.i, !dbg !82
  %125 = fcmp ord float %.0.i, 0.000000e+00, !dbg !82
  br i1 %125, label %126, label %__nv_atanf.exit, !dbg !82

126:                                              ; preds = %9
  %127 = bitcast float %t1.1.i to i32, !dbg !82
  %128 = bitcast float %96 to i32, !dbg !82
  %129 = and i32 %128, -2147483648, !dbg !82
  %130 = or i32 %129, %127, !dbg !82
  %131 = bitcast i32 %130 to float, !dbg !82
  br label %__nv_atanf.exit, !dbg !82

__nv_atanf.exit:                                  ; preds = %9, %126
  %t1.2.i = phi float [ %131, %126 ], [ %t1.1.i, %9 ], !dbg !82
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %59) #2, !dbg !83
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not.i2 = icmp eq i32 %133, 0, !dbg !84
  %134 = tail call float @llvm.nvvm.fabs.ftz.f(float %132) #2, !dbg !84
  %135 = tail call float @llvm.nvvm.fabs.f(float %132) #2, !dbg !84
  %.0.i3 = select i1 %.not.i2, float %135, float %134, !dbg !84
  %136 = fcmp ogt float %.0.i3, 1.000000e+00, !dbg !84
  %137 = fdiv float 1.000000e+00, %.0.i3, !dbg !84
  %t1.0.i4 = select i1 %136, float %137, float %.0.i3, !dbg !84
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not1.i5 = icmp eq i32 %138, 0, !dbg !84
  %139 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t1.0.i4, float %t1.0.i4) #2, !dbg !84
  %140 = tail call float @llvm.nvvm.mul.rn.f(float %t1.0.i4, float %t1.0.i4) #2, !dbg !84
  %.01.i6 = select i1 %.not1.i5, float %140, float %139, !dbg !84
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not2.i7 = icmp eq i32 %141, 0, !dbg !84
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i6, float 0xBFEA58FD40000000, float 0xC016B31060000000) #2, !dbg !84
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i6, float 0xBFEA58FD40000000, float 0xC016B31060000000) #2, !dbg !84
  %.02.i8 = select i1 %.not2.i7, float %143, float %142, !dbg !84
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not3.i9 = icmp eq i32 %144, 0, !dbg !84
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i8, float %.01.i6, float 0xC01A4320E0000000) #2, !dbg !84
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i8, float %.01.i6, float 0xC01A4320E0000000) #2, !dbg !84
  %.03.i10 = select i1 %.not3.i9, float %146, float %145, !dbg !84
  %147 = fmul float %.01.i6, %.03.i10, !dbg !84
  %148 = fmul float %t1.0.i4, %147, !dbg !84
  %149 = fadd float %.01.i6, 0x4026ABB800000000, !dbg !84
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not4.i11 = icmp eq i32 %150, 0, !dbg !84
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %149, float %.01.i6, float 0x403CD7AC00000000) #2, !dbg !84
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %149, float %.01.i6, float 0x403CD7AC00000000) #2, !dbg !84
  %.04.i12 = select i1 %.not4.i11, float %152, float %151, !dbg !84
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not5.i13 = icmp eq i32 %153, 0, !dbg !84
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i12, float %.01.i6, float 0x4033B25900000000) #2, !dbg !84
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i12, float %.01.i6, float 0x4033B25900000000) #2, !dbg !84
  %.05.i14 = select i1 %.not5.i13, float %155, float %154, !dbg !84
  %156 = fdiv float 1.000000e+00, %.05.i14, !dbg !84
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !84
  %.not6.i15 = icmp eq i32 %157, 0, !dbg !84
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float %156, float %t1.0.i4) #2, !dbg !84
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %148, float %156, float %t1.0.i4) #2, !dbg !84
  %.06.i16 = select i1 %.not6.i15, float %159, float %158, !dbg !84
  %160 = fsub float 0x3FF921FB60000000, %.06.i16, !dbg !84
  %t1.1.i17 = select i1 %136, float %160, float %.06.i16, !dbg !84
  %161 = fcmp ord float %.0.i3, 0.000000e+00, !dbg !84
  br i1 %161, label %162, label %__nv_atanf.exit19, !dbg !84

162:                                              ; preds = %__nv_atanf.exit
  %163 = bitcast float %t1.1.i17 to i32, !dbg !84
  %164 = bitcast float %132 to i32, !dbg !84
  %165 = and i32 %164, -2147483648, !dbg !84
  %166 = or i32 %165, %163, !dbg !84
  %167 = bitcast i32 %166 to float, !dbg !84
  br label %__nv_atanf.exit19, !dbg !84

__nv_atanf.exit19:                                ; preds = %__nv_atanf.exit, %162
  %t1.2.i18 = phi float [ %167, %162 ], [ %t1.1.i17, %__nv_atanf.exit ], !dbg !84
  %168 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !24
  %169 = insertelement <2 x i32> %168, i32 %39, i64 1, !dbg !24
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !24
  %171 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !20
  %172 = insertelement <2 x i32> %171, i32 %33, i64 1, !dbg !20
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !20
  %174 = fmul float %50, %53, !dbg !85
  %175 = fmul float %56, %59, !dbg !86
  %176 = fadd float %174, %175, !dbg !87
  %177 = fcmp olt <2 x float> %42, %173, !dbg !88
  %178 = fcmp ogt <2 x float> %45, %170, !dbg !89
  %179 = or <2 x i1> %46, %177, !dbg !90
  %.v = select <2 x i1> %179, <2 x i32> %41, <2 x i32> %172, !dbg !91
  %180 = bitcast <2 x i32> %.v to <2 x float>, !dbg !91
  %181 = or <2 x i1> %47, %178, !dbg !92
  %.v20 = select <2 x i1> %181, <2 x i32> %44, <2 x i32> %169, !dbg !93
  %182 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !93
  %183 = fsub <2 x float> %180, %182, !dbg !94
  %184 = fadd <2 x float> %183, splat (float 0x3EE4F8B580000000), !dbg !95
  %185 = fcmp ole <2 x float> %184, zeroinitializer, !dbg !96
  %186 = select <2 x i1> %185, <2 x float> zeroinitializer, <2 x float> %184, !dbg !96
  %shift = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !98
  %187 = fmul <2 x float> %186, %shift, !dbg !98
  %188 = extractelement <2 x float> %187, i64 0, !dbg !98
  %189 = fsub float %176, %188, !dbg !99
  %190 = and i32 %12, 28, !dbg !12
  %191 = fsub float %t1.2.i, %t1.2.i18, !dbg !100
  %192 = fmul float %191, %191, !dbg !101
  %193 = fmul float %192, 0x3FD9F02F60000000, !dbg !102
  %194 = sext i32 %14 to i64, !dbg !103
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !103
  %196 = icmp eq i32 %190, 0, !dbg !104
  %197 = bitcast float %188 to i32, !dbg !104
  %198 = and i1 %196, %15, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %195, i1 %198) #2, !dbg !104
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !105
  %200 = bitcast float %189 to i32, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %199, i1 %198) #2, !dbg !106
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %194, !dbg !107
  %202 = bitcast float %95 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %201, i1 %198) #2, !dbg !108
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %203, i1 %198) #2, !dbg !110
  %204 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %204, i1 %198) #2, !dbg !112
  %205 = getelementptr float, ptr addrspace(1) %7, i64 %194, !dbg !113
  %206 = bitcast float %193 to i32, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %205, i1 %198) #2, !dbg !114
  ret void, !dbg !115
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmd6wb46xuhbuif3i7sqck3sraxssnpwfcfenua2gbqplbjykpt.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_add_atan_div_maximum_mean_minimum_mul_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_atan_div_maximum_mean_minimum_mul_pow_sub_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_atan_div_maximum_mean_minimum_mul_pow_sub_sum_0", linkageName: "triton_poi_fused_add_atan_div_maximum_mean_minimum_mul_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 36, scope: !7)
!16 = !DILocation(line: 25, column: 34, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 41, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 33, column: 40, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 34, column: 40, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 19, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !59)
!59 = !DILocation(line: 68, column: 41, scope: !7)
!60 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !59)
!61 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !59)
!62 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 41, scope: !7)
!64 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !63)
!65 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !63)
!66 = !DILocation(line: 70, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !69)
!69 = !DILocation(line: 72, column: 42, scope: !7)
!70 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !69)
!71 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !69)
!72 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !73)
!73 = !DILocation(line: 73, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !73)
!75 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !73)
!76 = !DILocation(line: 74, column: 20, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 76, column: 20, scope: !7)
!79 = !DILocation(line: 77, column: 20, scope: !7)
!80 = !DILocation(line: 78, column: 20, scope: !7)
!81 = !DILocation(line: 79, column: 20, scope: !7)
!82 = !DILocation(line: 80, column: 27, scope: !7)
!83 = !DILocation(line: 81, column: 20, scope: !7)
!84 = !DILocation(line: 82, column: 27, scope: !7)
!85 = !DILocation(line: 48, column: 20, scope: !7)
!86 = !DILocation(line: 51, column: 20, scope: !7)
!87 = !DILocation(line: 52, column: 20, scope: !7)
!88 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !38)
!89 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !40)
!90 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !38)
!91 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !38)
!92 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !40)
!93 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !40)
!94 = !DILocation(line: 35, column: 18, scope: !7)
!95 = !DILocation(line: 37, column: 18, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !97)
!97 = !DILocation(line: 39, column: 41, scope: !7)
!98 = !DILocation(line: 45, column: 20, scope: !7)
!99 = !DILocation(line: 53, column: 20, scope: !7)
!100 = !DILocation(line: 83, column: 20, scope: !7)
!101 = !DILocation(line: 84, column: 20, scope: !7)
!102 = !DILocation(line: 86, column: 20, scope: !7)
!103 = !DILocation(line: 87, column: 25, scope: !7)
!104 = !DILocation(line: 87, column: 37, scope: !7)
!105 = !DILocation(line: 88, column: 25, scope: !7)
!106 = !DILocation(line: 88, column: 37, scope: !7)
!107 = !DILocation(line: 89, column: 25, scope: !7)
!108 = !DILocation(line: 89, column: 37, scope: !7)
!109 = !DILocation(line: 90, column: 25, scope: !7)
!110 = !DILocation(line: 90, column: 37, scope: !7)
!111 = !DILocation(line: 91, column: 25, scope: !7)
!112 = !DILocation(line: 91, column: 37, scope: !7)
!113 = !DILocation(line: 92, column: 25, scope: !7)
!114 = !DILocation(line: 92, column: 37, scope: !7)
!115 = !DILocation(line: 92, column: 4, scope: !7)
