; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__log_softmax_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %9, 1, !dbg !12
  %12 = and i32 %11, 6, !dbg !12
  %13 = and i32 %9, 7, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = lshr i32 %9, 5, !dbg !14
  %17 = lshr i32 %9, 2, !dbg !14
  %18 = and i32 %17, 15, !dbg !14
  %19 = icmp samesign ult i32 %18, 12, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %20 = sdiv i32 %.frozen, 4096, !dbg !16
  %21 = mul i32 %20, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = shl nuw nsw i32 %18, 12, !dbg !18
  %23 = add nsw i32 %.decomposed, %22, !dbg !19
  %24 = mul i32 %20, 49152, !dbg !20
  %25 = add i32 %23, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = bitcast i32 %30 to float, !dbg !23
  %33 = zext nneg i32 %18 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fadd float %31, %37, !dbg !26
  %39 = fadd float %32, %37, !dbg !26
  %40 = select i1 %19, float %38, float 0xFFF0000000000000, !dbg !27
  %41 = select i1 %19, float %39, float 0xFFF0000000000000, !dbg !27
  %42 = bitcast float %40 to i32, !dbg !28
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = fcmp ogt float %40, %44, !dbg !32
  %46 = fcmp uno float %40, 0.000000e+00, !dbg !34
  %47 = or i1 %45, %46, !dbg !35
  %48 = select i1 %47, float %40, float %44, !dbg !36
  %49 = bitcast float %48 to i32, !dbg !28
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fcmp ogt float %48, %51, !dbg !32
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !34
  %54 = or i1 %52, %53, !dbg !35
  %55 = select i1 %54, float %48, float %51, !dbg !36
  %56 = bitcast float %55 to i32, !dbg !28
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = fcmp ogt float %55, %58, !dbg !32
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !34
  %61 = or i1 %59, %60, !dbg !35
  %62 = bitcast float %41 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fcmp ogt float %41, %64, !dbg !32
  %66 = fcmp uno float %41, 0.000000e+00, !dbg !34
  %67 = or i1 %66, %65, !dbg !35
  %68 = select i1 %67, float %41, float %64, !dbg !36
  %69 = bitcast float %68 to i32, !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fcmp ogt float %68, %71, !dbg !32
  %73 = fcmp uno float %68, 0.000000e+00, !dbg !34
  %74 = or i1 %72, %73, !dbg !35
  %75 = select i1 %74, float %68, float %71, !dbg !36
  %76 = bitcast float %75 to i32, !dbg !28
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = fcmp ogt float %75, %78, !dbg !32
  %80 = fcmp uno float %75, 0.000000e+00, !dbg !34
  %81 = or i1 %79, %80, !dbg !35
  %82 = icmp samesign ult i32 %10, 4, !dbg !28
  %83 = and i32 %16, 1, !dbg !28
  %84 = shl nuw nsw i32 %12, 1, !dbg !28
  %85 = or disjoint i32 %84, %83, !dbg !28
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !28
  %87 = select i1 %61, i32 %56, i32 %57, !dbg !36
  %88 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %88, i1 %82) #3, !dbg !28
  %89 = or disjoint i32 %84, 2, !dbg !28
  %90 = or disjoint i32 %89, %83, !dbg !28
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !28
  %92 = select i1 %81, i32 %76, i32 %77, !dbg !36
  %93 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %93, i1 %82) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %94 = icmp slt i32 %9, 16, !dbg !28
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %94) #3, !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fcmp ogt float %97, %99, !dbg !32
  %101 = fcmp uno float %97, 0.000000e+00, !dbg !34
  %102 = or i1 %101, %100, !dbg !35
  %103 = and i32 %9, 1, !dbg !28
  %104 = icmp eq i32 %103, 0, !dbg !28
  %105 = and i1 %94, %104, !dbg !28
  %106 = select i1 %102, i32 %96, i32 %98, !dbg !36
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %107, i1 %105) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !28
  %109 = load float, ptr addrspace(3) %108, align 16, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !28
  %111 = load float, ptr addrspace(3) %110, align 8, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %113 = bitcast float %109 to i32, !dbg !37
  %114 = bitcast float %111 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %113, i32 %114, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !37
  %117 = fsub float %38, %109, !dbg !38
  %118 = fsub float %39, %111, !dbg !38
  %119 = fmul float %117, 0x3FF7154760000000, !dbg !39
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #3, !dbg !39
  %121 = fmul float %118, 0x3FF7154760000000, !dbg !39
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #3, !dbg !39
  %123 = select i1 %19, float %120, float 0.000000e+00, !dbg !40
  %124 = select i1 %19, float %122, float 0.000000e+00, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %125 = bitcast float %123 to i32, !dbg !41
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !41
  %127 = bitcast i32 %126 to float, !dbg !41
  %128 = fadd float %123, %127, !dbg !45
  %129 = bitcast float %128 to i32, !dbg !41
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !41
  %131 = bitcast i32 %130 to float, !dbg !41
  %132 = fadd float %128, %131, !dbg !45
  %133 = bitcast float %132 to i32, !dbg !41
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !41
  %135 = bitcast i32 %134 to float, !dbg !41
  %136 = fadd float %132, %135, !dbg !45
  %137 = bitcast float %124 to i32, !dbg !41
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !41
  %139 = bitcast i32 %138 to float, !dbg !41
  %140 = fadd float %124, %139, !dbg !45
  %141 = bitcast float %140 to i32, !dbg !41
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !41
  %143 = bitcast i32 %142 to float, !dbg !41
  %144 = fadd float %140, %143, !dbg !45
  %145 = bitcast float %144 to i32, !dbg !41
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !41
  %147 = bitcast i32 %146 to float, !dbg !41
  %148 = fadd float %144, %147, !dbg !45
  %149 = bitcast float %136 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %149, i1 %82) #3, !dbg !41
  %150 = bitcast float %148 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %150, i1 %82) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %151 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %94) #3, !dbg !41
  %152 = bitcast i32 %151 to float, !dbg !41
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !41
  %154 = bitcast i32 %153 to float, !dbg !41
  %155 = fadd float %152, %154, !dbg !45
  %156 = bitcast float %155 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %156, i1 %105) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %157 = load i32, ptr addrspace(3) %108, align 16, !dbg !41
  %158 = load i32, ptr addrspace(3) %110, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %157, i32 %158, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %159 = load i32, ptr addrspace(3) %115, align 4, !dbg !47
  %160 = sext i32 %15 to i64, !dbg !48
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !48
  %162 = lshr i32 %10, 3, !dbg !49
  %163 = shl nuw nsw i32 %83, 2, !dbg !49
  %164 = or disjoint i32 %163, %162, !dbg !49
  %165 = icmp eq i32 %164, 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %161, i1 %165) #3, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %166, i1 %165) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd66hixlhcp7ftzr4kzqnfgppfmdzya3baaabzscajm6w5wtmksl.py", directory: "inductor_cache/d6")
!4 = !{ptr @triton_per_fused__log_softmax_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_convolution_27, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_convolution_27", linkageName: "triton_per_fused__log_softmax_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 33, scope: !7)
!28 = !DILocation(line: 131, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 37, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !31)
!35 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !31)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !31)
!37 = !DILocation(line: 38, column: 40, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 23, scope: !7)
!40 = !DILocation(line: 42, column: 34, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 43, column: 29, scope: !7)
!48 = !DILocation(line: 44, column: 25, scope: !7)
!49 = !DILocation(line: 44, column: 36, scope: !7)
!50 = !DILocation(line: 45, column: 25, scope: !7)
!51 = !DILocation(line: 45, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 4, scope: !7)
