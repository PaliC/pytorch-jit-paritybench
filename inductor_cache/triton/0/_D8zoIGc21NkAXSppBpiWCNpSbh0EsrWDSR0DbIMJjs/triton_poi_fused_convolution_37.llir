; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %12, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !17
  %24 = or disjoint i32 %21, %10, !dbg !17
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %27 = icmp slt i32 %24, 64, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %28 = sdiv i32 %.frozen, 128, !dbg !19
  %29 = mul i32 %28, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %22, 7, !dbg !21
  %31 = shl i32 %23, 7, !dbg !21
  %32 = shl i32 %28, 13, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = and i1 %17, %25, !dbg !26
  %41 = and i1 %17, %26, !dbg !26
  %42 = and i1 %18, %27, !dbg !26
  %43 = and i1 %19, %27, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = bitcast i32 %48 to float, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = sext i32 %.decomposed to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %17) #2, !dbg !29
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %69 = bitcast i32 %65 to float, !dbg !29
  %70 = bitcast i32 %66 to float, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = fadd float %49, %69, !dbg !30
  %74 = fadd float %50, %70, !dbg !30
  %75 = fadd float %51, %71, !dbg !30
  %76 = fadd float %52, %72, !dbg !30
  %77 = fadd float %58, %69, !dbg !30
  %78 = fadd float %59, %70, !dbg !30
  %79 = fadd float %60, %71, !dbg !30
  %80 = fadd float %61, %72, !dbg !30
  %81 = shl i32 %15, 6, !dbg !31
  %82 = shl i32 %16, 6, !dbg !31
  %83 = add i32 %24, %81, !dbg !32
  %84 = add i32 %24, %82, !dbg !32
  %85 = sext i32 %83 to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !33
  %87 = sext i32 %84 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !33
  %89 = shl i32 %8, 7, !dbg !34
  %90 = and i32 %89, 896, !dbg !34
  %91 = or disjoint i32 %90, %12, !dbg !34
  %92 = and i32 %9, 508, !dbg !34
  %93 = lshr exact i32 %90, 5, !dbg !34
  %94 = add nuw nsw i32 %93, %91, !dbg !34
  %95 = zext nneg i32 %94 to i64, !dbg !34
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !34
  %97 = bitcast float %73 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !34
  %98 = or disjoint i32 %91, 32, !dbg !34
  %99 = lshr i32 %98, 5, !dbg !34
  %100 = add nuw nsw i32 %99, %98, !dbg !34
  %101 = zext nneg i32 %100 to i64, !dbg !34
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !34
  %103 = bitcast float %74 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !34
  %104 = or disjoint i32 %91, 64, !dbg !34
  %105 = lshr i32 %104, 5, !dbg !34
  %106 = add nuw nsw i32 %105, %104, !dbg !34
  %107 = zext nneg i32 %106 to i64, !dbg !34
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !34
  %109 = bitcast float %75 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !34
  %110 = or disjoint i32 %91, 96, !dbg !34
  %111 = lshr i32 %110, 5, !dbg !34
  %112 = add nuw nsw i32 %111, %110, !dbg !34
  %113 = zext nneg i32 %112 to i64, !dbg !34
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !34
  %115 = bitcast float %76 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !34
  %116 = or disjoint i32 %91, 16, !dbg !34
  %117 = add nuw nsw i32 %116, %93, !dbg !34
  %118 = zext nneg i32 %117 to i64, !dbg !34
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !34
  %120 = bitcast float %77 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !34
  %121 = or disjoint i32 %91, 48, !dbg !34
  %122 = lshr i32 %121, 5, !dbg !34
  %123 = add nuw nsw i32 %122, %121, !dbg !34
  %124 = zext nneg i32 %123 to i64, !dbg !34
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !34
  %126 = bitcast float %78 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !34
  %127 = or disjoint i32 %91, 80, !dbg !34
  %128 = lshr i32 %127, 5, !dbg !34
  %129 = add nuw nsw i32 %128, %127, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  %132 = bitcast float %79 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !34
  %133 = or disjoint i32 %91, 112, !dbg !34
  %134 = lshr i32 %133, 5, !dbg !34
  %135 = add nuw nsw i32 %134, %133, !dbg !34
  %136 = zext nneg i32 %135 to i64, !dbg !34
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !34
  %138 = bitcast float %80 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %139 = lshr i32 %92, 5, !dbg !34
  %140 = add nuw nsw i32 %139, %92, !dbg !34
  %141 = zext nneg i32 %140 to i64, !dbg !34
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !34
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !34
  %144 = or disjoint i32 %92, 1, !dbg !34
  %145 = add nuw nsw i32 %144, %139, !dbg !34
  %146 = zext nneg i32 %145 to i64, !dbg !34
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !34
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !34
  %149 = or disjoint i32 %92, 2, !dbg !34
  %150 = add nuw nsw i32 %149, %139, !dbg !34
  %151 = zext nneg i32 %150 to i64, !dbg !34
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !34
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !34
  %154 = or disjoint i32 %92, 3, !dbg !34
  %155 = add nuw nsw i32 %154, %139, !dbg !34
  %156 = zext nneg i32 %155 to i64, !dbg !34
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !34
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !34
  %159 = or disjoint i32 %92, 512, !dbg !34
  %160 = lshr i32 %159, 5, !dbg !34
  %161 = add nuw nsw i32 %160, %159, !dbg !34
  %162 = zext nneg i32 %161 to i64, !dbg !34
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !34
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !34
  %165 = or disjoint i32 %92, 513, !dbg !34
  %166 = lshr i32 %165, 5, !dbg !34
  %167 = add nuw nsw i32 %166, %165, !dbg !34
  %168 = zext nneg i32 %167 to i64, !dbg !34
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !34
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !34
  %171 = or disjoint i32 %92, 514, !dbg !34
  %172 = lshr i32 %171, 5, !dbg !34
  %173 = add nuw nsw i32 %172, %171, !dbg !34
  %174 = zext nneg i32 %173 to i64, !dbg !34
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %174, !dbg !34
  %176 = load i32, ptr addrspace(3) %175, align 4, !dbg !34
  %177 = or disjoint i32 %92, 515, !dbg !34
  %178 = lshr i32 %177, 5, !dbg !34
  %179 = add nuw nsw i32 %178, %177, !dbg !34
  %180 = zext nneg i32 %179 to i64, !dbg !34
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %180, !dbg !34
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %143, i32 %148, i32 %153, i32 %158, ptr addrspace(1) %86, i1 %42) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %170, i32 %176, i32 %182, ptr addrspace(1) %88, i1 %43) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy3efab7wort7bglsgf6mmmwpyxgyz5lxkxge7eqjdwoom5paica.py", directory: "inductor_cache/y3")
!4 = !{ptr @triton_poi_fused_convolution_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_37", linkageName: "triton_poi_fused_convolution_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 44, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
