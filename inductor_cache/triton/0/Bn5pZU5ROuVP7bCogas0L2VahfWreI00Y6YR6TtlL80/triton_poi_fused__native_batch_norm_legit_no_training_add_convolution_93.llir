; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_93(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = icmp slt i32 %20, 22272, !dbg !14
  %23 = srem i32 %20, 87, !dbg !15
  %24 = srem i32 %21, 87, !dbg !15
  %25 = sext i32 %20 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %22) #3, !dbg !17
  %28 = sext i32 %23 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !18
  %30 = sext i32 %24 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %22) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !27
  %47 = bitcast i32 %46 to float, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %22) #3, !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #3, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %22) #3, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %22) #3, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !35
  %65 = bitcast i32 %64 to float, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %22) #3, !dbg !35
  %67 = bitcast i32 %66 to float, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !36
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #3, !dbg !37
  %72 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #3, !dbg !39
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %22) #3, !dbg !39
  %76 = fadd float %47, 0x3EE4F8B580000000, !dbg !40
  %77 = fadd float %49, 0x3EE4F8B580000000, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %78, 0, !dbg !41
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %79, 0, !dbg !41
  br i1 %.not.i, label %85, label %80, !dbg !41

80:                                               ; preds = %14
  br i1 %.not1.i, label %83, label %81, !dbg !41

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

85:                                               ; preds = %14
  br i1 %.not1.i, label %88, label %86, !dbg !41

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !41
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %90, 0, !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !41
  br i1 %.not.i1, label %97, label %92, !dbg !41

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !41

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !41
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %104 = fadd float %65, 0x3EE4F8B580000000, !dbg !43
  %105 = fadd float %67, 0x3EE4F8B580000000, !dbg !43
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %106, 0, !dbg !44
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !44
  br i1 %.not.i6, label %113, label %108, !dbg !44

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !44

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !44

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !44
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %118, 0, !dbg !44
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %119, 0, !dbg !44
  br i1 %.not.i11, label %125, label %120, !dbg !44

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !44

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !44

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %121, %123, %126, %128
  %.0.i13 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !44
  %130 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %131 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %132 = insertelement <2 x i32> %131, i32 %39, i64 1, !dbg !19
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !19
  %134 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !25
  %135 = insertelement <2 x i32> %134, i32 %61, i64 1, !dbg !25
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !25
  %137 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %138 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !19
  %139 = insertelement <2 x i32> %138, i32 %38, i64 1, !dbg !19
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !19
  %141 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !25
  %142 = insertelement <2 x i32> %141, i32 %60, i64 1, !dbg !25
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !25
  %144 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %145 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !29
  %146 = insertelement <2 x i32> %145, i32 %71, i64 1, !dbg !29
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !29
  %148 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !31
  %149 = insertelement <2 x i32> %148, i32 %75, i64 1, !dbg !31
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !31
  %151 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %152 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !29
  %153 = insertelement <2 x i32> %152, i32 %70, i64 1, !dbg !29
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !29
  %155 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !31
  %156 = insertelement <2 x i32> %155, i32 %74, i64 1, !dbg !31
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !31
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %160 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !17
  %161 = insertelement <2 x i32> %160, i32 %137, i64 1, !dbg !17
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !17
  %163 = fadd <2 x float> %162, %140, !dbg !46
  %164 = fsub <2 x float> %163, %143, !dbg !47
  %165 = insertelement <2 x float> poison, float %102, i64 0, !dbg !48
  %166 = insertelement <2 x float> %165, float %158, i64 1, !dbg !48
  %167 = fmul <2 x float> %164, %166, !dbg !48
  %168 = fmul <2 x float> %167, %154, !dbg !49
  %169 = fadd <2 x float> %168, %157, !dbg !50
  %170 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !17
  %171 = insertelement <2 x i32> %170, i32 %130, i64 1, !dbg !17
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !17
  %173 = fadd <2 x float> %172, %133, !dbg !46
  %174 = fsub <2 x float> %173, %136, !dbg !47
  %175 = insertelement <2 x float> poison, float %103, i64 0, !dbg !48
  %176 = insertelement <2 x float> %175, float %159, i64 1, !dbg !48
  %177 = fmul <2 x float> %174, %176, !dbg !48
  %178 = fmul <2 x float> %177, %147, !dbg !49
  %179 = fadd <2 x float> %178, %150, !dbg !50
  %shift = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %180 = fadd <2 x float> %169, %shift, !dbg !51
  %shift16 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %181 = fadd <2 x float> %179, %shift16, !dbg !51
  %bc = bitcast <2 x float> %163 to <2 x i32>, !dbg !52
  %182 = extractelement <2 x i32> %bc, i64 0, !dbg !52
  %bc17 = bitcast <2 x float> %173 to <2 x i32>, !dbg !52
  %183 = extractelement <2 x i32> %bc17, i64 0, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %26, i1 %22) #3, !dbg !52
  %bc18 = bitcast <2 x float> %163 to <2 x i32>, !dbg !53
  %184 = extractelement <2 x i32> %bc18, i64 1, !dbg !53
  %bc19 = bitcast <2 x float> %173 to <2 x i32>, !dbg !53
  %185 = extractelement <2 x i32> %bc19, i64 1, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %34, i1 %22) #3, !dbg !53
  %186 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !54
  %bc20 = bitcast <2 x float> %180 to <2 x i32>, !dbg !55
  %187 = extractelement <2 x i32> %bc20, i64 0, !dbg !55
  %bc21 = bitcast <2 x float> %181 to <2 x i32>, !dbg !55
  %188 = extractelement <2 x i32> %bc21, i64 0, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %188, ptr addrspace(1) %186, i1 %22) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgdgor5op23xqa7ga44netlzrvcgm3kclxezl6222ibb5mwp3n47.py", directory: "inductor_cache/gd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_93, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_93, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_93", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_93", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 39, scope: !7)
!53 = !DILocation(line: 61, column: 39, scope: !7)
!54 = !DILocation(line: 62, column: 25, scope: !7)
!55 = !DILocation(line: 62, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
