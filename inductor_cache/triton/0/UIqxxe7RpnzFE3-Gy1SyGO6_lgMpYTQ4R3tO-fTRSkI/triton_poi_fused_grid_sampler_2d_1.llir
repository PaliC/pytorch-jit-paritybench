; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp93 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp88 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp76 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp71 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp49 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp31 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp25 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %6 = shl i32 %5, 10, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 2, !dbg !14
  %9 = and i32 %8, 508, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %10, 1, !dbg !15
  %12 = or disjoint i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %10, 3, !dbg !15
  %14 = or disjoint i32 %10, 512, !dbg !15
  %15 = or disjoint i32 %10, 513, !dbg !15
  %16 = or disjoint i32 %10, 514, !dbg !15
  %17 = or disjoint i32 %10, 515, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %18 = sdiv i32 %.frozen, 50176, !dbg !16
  %19 = mul i32 %18, 50176, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = srem i32 %11, 50176, !dbg !17
  %21 = srem i32 %12, 50176, !dbg !17
  %22 = srem i32 %13, 50176, !dbg !17
  %.frozen65 = freeze i32 %14, !dbg !16
  %23 = sdiv i32 %.frozen65, 50176, !dbg !16
  %24 = mul i32 %23, 50176, !dbg !17
  %.decomposed66 = sub i32 %.frozen65, %24, !dbg !17
  %25 = srem i32 %15, 50176, !dbg !17
  %26 = srem i32 %16, 50176, !dbg !17
  %27 = srem i32 %17, 50176, !dbg !17
  %28 = sdiv i32 %10, 200704, !dbg !18
  %29 = sdiv i32 %14, 200704, !dbg !18
  %30 = shl nsw i32 %.decomposed, 1, !dbg !19
  %31 = shl nsw i32 %20, 1, !dbg !19
  %32 = shl nsw i32 %21, 1, !dbg !19
  %33 = shl nsw i32 %22, 1, !dbg !19
  %34 = shl nsw i32 %.decomposed66, 1, !dbg !19
  %35 = shl nsw i32 %25, 1, !dbg !19
  %36 = shl nsw i32 %26, 1, !dbg !19
  %37 = shl nsw i32 %27, 1, !dbg !19
  %38 = mul nsw i32 %28, 100352, !dbg !20
  %39 = mul nsw i32 %29, 100352, !dbg !20
  %40 = add nsw i32 %30, %38, !dbg !21
  %41 = add nsw i32 %38, %31, !dbg !21
  %42 = add nsw i32 %38, %32, !dbg !21
  %43 = add nsw i32 %38, %33, !dbg !21
  %44 = add nsw i32 %34, %39, !dbg !21
  %45 = add nsw i32 %35, %39, !dbg !21
  %46 = add nsw i32 %36, %39, !dbg !21
  %47 = add nsw i32 %37, %39, !dbg !21
  %48 = sext i32 %40 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !22
  %50 = sext i32 %41 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !22
  %52 = sext i32 %42 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !22
  %54 = sext i32 %43 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !22
  %56 = sext i32 %44 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !22
  %58 = sext i32 %45 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !22
  %60 = sext i32 %46 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !22
  %62 = sext i32 %47 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !23
  %72 = or disjoint i32 %30, 1, !dbg !24
  %73 = or disjoint i32 %31, 1, !dbg !24
  %74 = or disjoint i32 %32, 1, !dbg !24
  %75 = or disjoint i32 %33, 1, !dbg !24
  %76 = or disjoint i32 %34, 1, !dbg !24
  %77 = or disjoint i32 %35, 1, !dbg !24
  %78 = or disjoint i32 %36, 1, !dbg !24
  %79 = or disjoint i32 %37, 1, !dbg !24
  %80 = add nsw i32 %72, %38, !dbg !25
  %81 = add nsw i32 %73, %38, !dbg !25
  %82 = add nsw i32 %74, %38, !dbg !25
  %83 = add nsw i32 %75, %38, !dbg !25
  %84 = add nsw i32 %76, %39, !dbg !25
  %85 = add nsw i32 %77, %39, !dbg !25
  %86 = add nsw i32 %78, %39, !dbg !25
  %87 = add nsw i32 %79, %39, !dbg !25
  %88 = sext i32 %80 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !26
  %90 = sext i32 %81 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !26
  %92 = sext i32 %82 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !26
  %94 = sext i32 %83 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !26
  %96 = sext i32 %84 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !26
  %98 = sext i32 %85 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !26
  %100 = sext i32 %86 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !26
  %102 = sext i32 %87 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #5, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #5, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #5, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #5, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #5, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #5, !dbg !27
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #5, !dbg !27
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %121 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !27
  %122 = insertelement <2 x i32> %121, i32 %64, i64 1, !dbg !27
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !27
  %124 = fmul <2 x float> %123, splat (float 2.000000e+00), !dbg !30
  %125 = fadd <2 x float> %124, splat (float 1.500000e+00), !dbg !31
  %126 = extractelement <2 x float> %125, i64 1, !dbg !31
  %127 = tail call float @llvm.nvvm.floor.ftz.f(float %126), !dbg !28
  %128 = tail call float @llvm.nvvm.floor.f(float %126), !dbg !28
  %129 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !29
  %130 = insertelement <2 x i32> %129, i32 %112, i64 1, !dbg !29
  %131 = icmp eq <2 x i32> %130, zeroinitializer, !dbg !29
  %132 = extractelement <2 x float> %125, i64 0, !dbg !29
  %133 = tail call float @llvm.nvvm.floor.ftz.f(float %132), !dbg !29
  %134 = tail call float @llvm.nvvm.floor.f(float %132), !dbg !29
  %135 = insertelement <2 x float> poison, float %134, i64 0, !dbg !29
  %136 = insertelement <2 x float> %135, float %128, i64 1, !dbg !29
  %137 = insertelement <2 x float> poison, float %133, i64 0, !dbg !29
  %138 = insertelement <2 x float> %137, float %127, i64 1, !dbg !29
  %139 = select <2 x i1> %131, <2 x float> %136, <2 x float> %138, !dbg !29
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %141 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !27
  %142 = insertelement <2 x i32> %141, i32 %65, i64 1, !dbg !27
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !27
  %144 = fmul <2 x float> %143, splat (float 2.000000e+00), !dbg !30
  %145 = fadd <2 x float> %144, splat (float 1.500000e+00), !dbg !31
  %146 = extractelement <2 x float> %145, i64 1, !dbg !31
  %147 = tail call float @llvm.nvvm.floor.ftz.f(float %146), !dbg !28
  %148 = tail call float @llvm.nvvm.floor.f(float %146), !dbg !28
  %149 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !29
  %150 = insertelement <2 x i32> %149, i32 %113, i64 1, !dbg !29
  %151 = icmp eq <2 x i32> %150, zeroinitializer, !dbg !29
  %152 = extractelement <2 x float> %145, i64 0, !dbg !29
  %153 = tail call float @llvm.nvvm.floor.ftz.f(float %152), !dbg !29
  %154 = tail call float @llvm.nvvm.floor.f(float %152), !dbg !29
  %155 = insertelement <2 x float> poison, float %154, i64 0, !dbg !29
  %156 = insertelement <2 x float> %155, float %148, i64 1, !dbg !29
  %157 = insertelement <2 x float> poison, float %153, i64 0, !dbg !29
  %158 = insertelement <2 x float> %157, float %147, i64 1, !dbg !29
  %159 = select <2 x i1> %151, <2 x float> %156, <2 x float> %158, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %161 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !27
  %162 = insertelement <2 x i32> %161, i32 %66, i64 1, !dbg !27
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !27
  %164 = fmul <2 x float> %163, splat (float 2.000000e+00), !dbg !30
  %165 = fadd <2 x float> %164, splat (float 1.500000e+00), !dbg !31
  %166 = extractelement <2 x float> %165, i64 1, !dbg !31
  %167 = tail call float @llvm.nvvm.floor.ftz.f(float %166), !dbg !28
  %168 = tail call float @llvm.nvvm.floor.f(float %166), !dbg !28
  %169 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !29
  %170 = insertelement <2 x i32> %169, i32 %114, i64 1, !dbg !29
  %171 = icmp eq <2 x i32> %170, zeroinitializer, !dbg !29
  %172 = extractelement <2 x float> %165, i64 0, !dbg !29
  %173 = tail call float @llvm.nvvm.floor.ftz.f(float %172), !dbg !29
  %174 = tail call float @llvm.nvvm.floor.f(float %172), !dbg !29
  %175 = insertelement <2 x float> poison, float %174, i64 0, !dbg !29
  %176 = insertelement <2 x float> %175, float %168, i64 1, !dbg !29
  %177 = insertelement <2 x float> poison, float %173, i64 0, !dbg !29
  %178 = insertelement <2 x float> %177, float %167, i64 1, !dbg !29
  %179 = select <2 x i1> %171, <2 x float> %176, <2 x float> %178, !dbg !29
  %180 = shufflevector <2 x float> %179, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %181 = shufflevector <2 x float> %179, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %183 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !27
  %184 = insertelement <2 x i32> %183, i32 %67, i64 1, !dbg !27
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !27
  %186 = fmul <2 x float> %185, splat (float 2.000000e+00), !dbg !30
  %187 = fadd <2 x float> %186, splat (float 1.500000e+00), !dbg !31
  %188 = extractelement <2 x float> %187, i64 1, !dbg !31
  %189 = tail call float @llvm.nvvm.floor.ftz.f(float %188), !dbg !28
  %190 = tail call float @llvm.nvvm.floor.f(float %188), !dbg !28
  %191 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !29
  %192 = insertelement <2 x i32> %191, i32 %115, i64 1, !dbg !29
  %193 = icmp eq <2 x i32> %192, zeroinitializer, !dbg !29
  %194 = extractelement <2 x float> %187, i64 0, !dbg !29
  %195 = tail call float @llvm.nvvm.floor.ftz.f(float %194), !dbg !29
  %196 = tail call float @llvm.nvvm.floor.f(float %194), !dbg !29
  %197 = insertelement <2 x float> poison, float %196, i64 0, !dbg !29
  %198 = insertelement <2 x float> %197, float %190, i64 1, !dbg !29
  %199 = insertelement <2 x float> poison, float %195, i64 0, !dbg !29
  %200 = insertelement <2 x float> %199, float %189, i64 1, !dbg !29
  %201 = select <2 x i1> %193, <2 x float> %198, <2 x float> %200, !dbg !29
  %202 = shufflevector <2 x float> %201, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %203 = shufflevector <2 x float> %201, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %205 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !27
  %206 = insertelement <2 x i32> %205, i32 %68, i64 1, !dbg !27
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !27
  %208 = fmul <2 x float> %207, splat (float 2.000000e+00), !dbg !30
  %209 = fadd <2 x float> %208, splat (float 1.500000e+00), !dbg !31
  %210 = extractelement <2 x float> %209, i64 1, !dbg !31
  %211 = tail call float @llvm.nvvm.floor.ftz.f(float %210), !dbg !28
  %212 = tail call float @llvm.nvvm.floor.f(float %210), !dbg !28
  %213 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !29
  %214 = insertelement <2 x i32> %213, i32 %116, i64 1, !dbg !29
  %215 = icmp eq <2 x i32> %214, zeroinitializer, !dbg !29
  %216 = extractelement <2 x float> %209, i64 0, !dbg !29
  %217 = tail call float @llvm.nvvm.floor.ftz.f(float %216), !dbg !29
  %218 = tail call float @llvm.nvvm.floor.f(float %216), !dbg !29
  %219 = insertelement <2 x float> poison, float %218, i64 0, !dbg !29
  %220 = insertelement <2 x float> %219, float %212, i64 1, !dbg !29
  %221 = insertelement <2 x float> poison, float %217, i64 0, !dbg !29
  %222 = insertelement <2 x float> %221, float %211, i64 1, !dbg !29
  %223 = select <2 x i1> %215, <2 x float> %220, <2 x float> %222, !dbg !29
  %224 = shufflevector <2 x float> %223, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %225 = shufflevector <2 x float> %223, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %227 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !27
  %228 = insertelement <2 x i32> %227, i32 %69, i64 1, !dbg !27
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !27
  %230 = fmul <2 x float> %229, splat (float 2.000000e+00), !dbg !30
  %231 = fadd <2 x float> %230, splat (float 1.500000e+00), !dbg !31
  %232 = extractelement <2 x float> %231, i64 1, !dbg !31
  %233 = tail call float @llvm.nvvm.floor.ftz.f(float %232), !dbg !28
  %234 = tail call float @llvm.nvvm.floor.f(float %232), !dbg !28
  %235 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !29
  %236 = insertelement <2 x i32> %235, i32 %117, i64 1, !dbg !29
  %237 = icmp eq <2 x i32> %236, zeroinitializer, !dbg !29
  %238 = extractelement <2 x float> %231, i64 0, !dbg !29
  %239 = tail call float @llvm.nvvm.floor.ftz.f(float %238), !dbg !29
  %240 = tail call float @llvm.nvvm.floor.f(float %238), !dbg !29
  %241 = insertelement <2 x float> poison, float %240, i64 0, !dbg !29
  %242 = insertelement <2 x float> %241, float %234, i64 1, !dbg !29
  %243 = insertelement <2 x float> poison, float %239, i64 0, !dbg !29
  %244 = insertelement <2 x float> %243, float %233, i64 1, !dbg !29
  %245 = select <2 x i1> %237, <2 x float> %242, <2 x float> %244, !dbg !29
  %246 = shufflevector <2 x float> %245, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %247 = shufflevector <2 x float> %245, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %249 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !27
  %250 = insertelement <2 x i32> %249, i32 %70, i64 1, !dbg !27
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !27
  %252 = fmul <2 x float> %251, splat (float 2.000000e+00), !dbg !30
  %253 = fadd <2 x float> %252, splat (float 1.500000e+00), !dbg !31
  %254 = extractelement <2 x float> %253, i64 1, !dbg !31
  %255 = tail call float @llvm.nvvm.floor.ftz.f(float %254), !dbg !28
  %256 = tail call float @llvm.nvvm.floor.f(float %254), !dbg !28
  %257 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !29
  %258 = insertelement <2 x i32> %257, i32 %118, i64 1, !dbg !29
  %259 = icmp eq <2 x i32> %258, zeroinitializer, !dbg !29
  %260 = extractelement <2 x float> %253, i64 0, !dbg !29
  %261 = tail call float @llvm.nvvm.floor.ftz.f(float %260), !dbg !29
  %262 = tail call float @llvm.nvvm.floor.f(float %260), !dbg !29
  %263 = insertelement <2 x float> poison, float %262, i64 0, !dbg !29
  %264 = insertelement <2 x float> %263, float %256, i64 1, !dbg !29
  %265 = insertelement <2 x float> poison, float %261, i64 0, !dbg !29
  %266 = insertelement <2 x float> %265, float %255, i64 1, !dbg !29
  %267 = select <2 x i1> %259, <2 x float> %264, <2 x float> %266, !dbg !29
  %268 = shufflevector <2 x float> %267, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %269 = shufflevector <2 x float> %267, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %271 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !27
  %272 = insertelement <2 x i32> %271, i32 %71, i64 1, !dbg !27
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !27
  %274 = fmul <2 x float> %273, splat (float 2.000000e+00), !dbg !30
  %275 = fadd <2 x float> %274, splat (float 1.500000e+00), !dbg !31
  %276 = extractelement <2 x float> %275, i64 1, !dbg !31
  %277 = tail call float @llvm.nvvm.floor.ftz.f(float %276), !dbg !28
  %278 = tail call float @llvm.nvvm.floor.f(float %276), !dbg !28
  %279 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !29
  %280 = insertelement <2 x i32> %279, i32 %119, i64 1, !dbg !29
  %281 = icmp eq <2 x i32> %280, zeroinitializer, !dbg !29
  %282 = extractelement <2 x float> %275, i64 0, !dbg !29
  %283 = tail call float @llvm.nvvm.floor.ftz.f(float %282), !dbg !29
  %284 = tail call float @llvm.nvvm.floor.f(float %282), !dbg !29
  %285 = insertelement <2 x float> poison, float %284, i64 0, !dbg !29
  %286 = insertelement <2 x float> %285, float %278, i64 1, !dbg !29
  %287 = insertelement <2 x float> poison, float %283, i64 0, !dbg !29
  %288 = insertelement <2 x float> %287, float %277, i64 1, !dbg !29
  %289 = select <2 x i1> %281, <2 x float> %286, <2 x float> %288, !dbg !29
  %290 = shufflevector <2 x float> %289, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %291 = shufflevector <2 x float> %289, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %292 = shufflevector <2 x float> %159, <2 x float> %139, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %293 = shufflevector <8 x float> %292, <8 x float> %181, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %294 = shufflevector <8 x float> %293, <8 x float> %203, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %295 = shufflevector <8 x float> %294, <8 x float> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !32
  %296 = shufflevector <8 x float> %295, <8 x float> %247, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %297 = shufflevector <8 x float> %296, <8 x float> %269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !32
  %298 = shufflevector <8 x float> %297, <8 x float> %291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %299 = fcmp oge <8 x float> %298, zeroinitializer, !dbg !32
  %300 = fcmp olt <8 x float> %298, splat (float 4.000000e+00), !dbg !33
  %301 = shufflevector <2 x float> %159, <2 x float> %139, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %302 = shufflevector <8 x float> %301, <8 x float> %180, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %303 = shufflevector <8 x float> %302, <8 x float> %202, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %304 = shufflevector <8 x float> %303, <8 x float> %224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !34
  %305 = shufflevector <8 x float> %304, <8 x float> %246, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !34
  %306 = shufflevector <8 x float> %305, <8 x float> %268, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !34
  %307 = shufflevector <8 x float> %306, <8 x float> %290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !34
  %308 = fcmp oge <8 x float> %307, zeroinitializer, !dbg !34
  %309 = fcmp olt <8 x float> %307, splat (float 4.000000e+00), !dbg !35
  %310 = and <8 x i1> %308, %309, !dbg !36
  %311 = and <8 x i1> %300, %310, !dbg !37
  %312 = and <8 x i1> %299, %311, !dbg !38
  %313 = fptosi <8 x float> %307 to <8 x i64>, !dbg !39
  %314 = select <8 x i1> %312, <8 x i64> %313, <8 x i64> zeroinitializer, !dbg !40
  %315 = lshr <8 x i64> %314, splat (i64 61), !dbg !41
  %316 = and <8 x i64> %315, splat (i64 4), !dbg !41
  %317 = add <8 x i64> %316, %314, !dbg !41
  %318 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %317), !dbg !42
  %.not = icmp ult i64 %318, 4, !dbg !42
  br i1 %.not, label %320, label %319, !dbg !42

319:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 54, ptr nonnull @assertFunc_0, i64 1), !dbg !42
  unreachable, !dbg !42

320:                                              ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %321 = fptosi <8 x float> %298 to <8 x i64>, !dbg !43
  %322 = select <8 x i1> %312, <8 x i64> %321, <8 x i64> zeroinitializer, !dbg !44
  %323 = lshr <8 x i64> %322, splat (i64 61), !dbg !45
  %324 = and <8 x i64> %323, splat (i64 4), !dbg !45
  %325 = add <8 x i64> %324, %322, !dbg !45
  %326 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %325), !dbg !46
  %.not1 = icmp ult i64 %326, 4, !dbg !46
  br i1 %.not1, label %328, label %327, !dbg !46

327:                                              ; preds = %320
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 60, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  unreachable, !dbg !46

328:                                              ; preds = %320
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %329 = extractelement <8 x i64> %317, i64 7, !dbg !47
  %330 = shl nuw nsw i64 %329, 2, !dbg !47
  %331 = extractelement <8 x i64> %325, i64 7, !dbg !48
  %332 = or disjoint i64 %330, %331, !dbg !48
  %333 = shl nsw i32 %18, 4, !dbg !49
  %334 = shl nsw i32 %23, 4, !dbg !49
  %335 = sext i32 %333 to i64, !dbg !50
  %336 = sext i32 %334 to i64, !dbg !50
  %337 = or disjoint i64 %332, %336, !dbg !50
  %338 = extractelement <8 x i64> %325, i64 1, !dbg !51
  %339 = getelementptr float, ptr addrspace(1) %2, i64 %338, !dbg !51
  %340 = extractelement <8 x i64> %317, i64 1, !dbg !51
  %.idx = shl i64 %340, 4, !dbg !51
  %341 = getelementptr i8, ptr addrspace(1) %339, i64 %.idx, !dbg !51
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %335, !dbg !51
  %343 = extractelement <8 x i64> %325, i64 0, !dbg !51
  %344 = getelementptr float, ptr addrspace(1) %2, i64 %343, !dbg !51
  %345 = extractelement <8 x i64> %317, i64 0, !dbg !51
  %.idx2 = shl i64 %345, 4, !dbg !51
  %346 = getelementptr i8, ptr addrspace(1) %344, i64 %.idx2, !dbg !51
  %347 = getelementptr float, ptr addrspace(1) %346, i64 %335, !dbg !51
  %348 = extractelement <8 x i64> %325, i64 2, !dbg !51
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !51
  %350 = extractelement <8 x i64> %317, i64 2, !dbg !51
  %.idx3 = shl i64 %350, 4, !dbg !51
  %351 = getelementptr i8, ptr addrspace(1) %349, i64 %.idx3, !dbg !51
  %352 = getelementptr float, ptr addrspace(1) %351, i64 %335, !dbg !51
  %353 = extractelement <8 x i64> %325, i64 3, !dbg !51
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %353, !dbg !51
  %355 = extractelement <8 x i64> %317, i64 3, !dbg !51
  %.idx4 = shl i64 %355, 4, !dbg !51
  %356 = getelementptr i8, ptr addrspace(1) %354, i64 %.idx4, !dbg !51
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %335, !dbg !51
  %358 = extractelement <8 x i64> %325, i64 4, !dbg !51
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %358, !dbg !51
  %360 = extractelement <8 x i64> %317, i64 4, !dbg !51
  %.idx5 = shl i64 %360, 4, !dbg !51
  %361 = getelementptr i8, ptr addrspace(1) %359, i64 %.idx5, !dbg !51
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %336, !dbg !51
  %363 = extractelement <8 x i64> %325, i64 5, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %2, i64 %363, !dbg !51
  %365 = extractelement <8 x i64> %317, i64 5, !dbg !51
  %.idx6 = shl i64 %365, 4, !dbg !51
  %366 = getelementptr i8, ptr addrspace(1) %364, i64 %.idx6, !dbg !51
  %367 = getelementptr float, ptr addrspace(1) %366, i64 %336, !dbg !51
  %368 = extractelement <8 x i64> %325, i64 6, !dbg !51
  %369 = getelementptr float, ptr addrspace(1) %2, i64 %368, !dbg !51
  %370 = extractelement <8 x i64> %317, i64 6, !dbg !51
  %.idx7 = shl i64 %370, 4, !dbg !51
  %371 = getelementptr i8, ptr addrspace(1) %369, i64 %.idx7, !dbg !51
  %372 = getelementptr float, ptr addrspace(1) %371, i64 %336, !dbg !51
  %373 = getelementptr float, ptr addrspace(1) %2, i64 %337, !dbg !51
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #5, !dbg !52
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 true) #5, !dbg !52
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 true) #5, !dbg !52
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 true) #5, !dbg !52
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 true) #5, !dbg !52
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 true) #5, !dbg !52
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 true) #5, !dbg !52
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 true) #5, !dbg !52
  %382 = fadd <8 x float> %298, splat (float 1.000000e+00), !dbg !53
  %383 = fadd <8 x float> %307, splat (float 1.000000e+00), !dbg !54
  %384 = fcmp oge <8 x float> %382, zeroinitializer, !dbg !55
  %385 = fcmp olt <8 x float> %382, splat (float 4.000000e+00), !dbg !56
  %386 = and <8 x i1> %385, %310, !dbg !57
  %387 = and <8 x i1> %384, %386, !dbg !58
  %388 = select <8 x i1> %387, <8 x i64> %313, <8 x i64> zeroinitializer, !dbg !59
  %389 = lshr <8 x i64> %388, splat (i64 61), !dbg !60
  %390 = and <8 x i64> %389, splat (i64 4), !dbg !60
  %391 = add <8 x i64> %390, %388, !dbg !60
  %392 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %391), !dbg !61
  %.not8 = icmp ult i64 %392, 4, !dbg !61
  br i1 %.not8, label %394, label %393, !dbg !61

393:                                              ; preds = %328
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 78, ptr nonnull @assertFunc_2, i64 1), !dbg !61
  unreachable, !dbg !61

394:                                              ; preds = %328
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %395 = fptosi <8 x float> %382 to <8 x i64>, !dbg !62
  %396 = select <8 x i1> %387, <8 x i64> %395, <8 x i64> zeroinitializer, !dbg !63
  %397 = lshr <8 x i64> %396, splat (i64 61), !dbg !64
  %398 = and <8 x i64> %397, splat (i64 4), !dbg !64
  %399 = add <8 x i64> %398, %396, !dbg !64
  %400 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %399), !dbg !65
  %.not9 = icmp ult i64 %400, 4, !dbg !65
  br i1 %.not9, label %402, label %401, !dbg !65

401:                                              ; preds = %394
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 84, ptr nonnull @assertFunc_3, i64 1), !dbg !65
  unreachable, !dbg !65

402:                                              ; preds = %394
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %403 = extractelement <8 x i64> %391, i64 7, !dbg !66
  %404 = shl nuw nsw i64 %403, 2, !dbg !66
  %405 = extractelement <8 x i64> %399, i64 7, !dbg !67
  %406 = or disjoint i64 %404, %405, !dbg !67
  %407 = or disjoint i64 %406, %336, !dbg !68
  %408 = extractelement <8 x i64> %399, i64 1, !dbg !69
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %408, !dbg !69
  %410 = extractelement <8 x i64> %391, i64 1, !dbg !69
  %.idx10 = shl i64 %410, 4, !dbg !69
  %411 = getelementptr i8, ptr addrspace(1) %409, i64 %.idx10, !dbg !69
  %412 = getelementptr float, ptr addrspace(1) %411, i64 %335, !dbg !69
  %413 = extractelement <8 x i64> %399, i64 0, !dbg !69
  %414 = getelementptr float, ptr addrspace(1) %2, i64 %413, !dbg !69
  %415 = extractelement <8 x i64> %391, i64 0, !dbg !69
  %.idx11 = shl i64 %415, 4, !dbg !69
  %416 = getelementptr i8, ptr addrspace(1) %414, i64 %.idx11, !dbg !69
  %417 = getelementptr float, ptr addrspace(1) %416, i64 %335, !dbg !69
  %418 = extractelement <8 x i64> %399, i64 2, !dbg !69
  %419 = getelementptr float, ptr addrspace(1) %2, i64 %418, !dbg !69
  %420 = extractelement <8 x i64> %391, i64 2, !dbg !69
  %.idx12 = shl i64 %420, 4, !dbg !69
  %421 = getelementptr i8, ptr addrspace(1) %419, i64 %.idx12, !dbg !69
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %335, !dbg !69
  %423 = extractelement <8 x i64> %399, i64 3, !dbg !69
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !69
  %425 = extractelement <8 x i64> %391, i64 3, !dbg !69
  %.idx13 = shl i64 %425, 4, !dbg !69
  %426 = getelementptr i8, ptr addrspace(1) %424, i64 %.idx13, !dbg !69
  %427 = getelementptr float, ptr addrspace(1) %426, i64 %335, !dbg !69
  %428 = extractelement <8 x i64> %399, i64 4, !dbg !69
  %429 = getelementptr float, ptr addrspace(1) %2, i64 %428, !dbg !69
  %430 = extractelement <8 x i64> %391, i64 4, !dbg !69
  %.idx14 = shl i64 %430, 4, !dbg !69
  %431 = getelementptr i8, ptr addrspace(1) %429, i64 %.idx14, !dbg !69
  %432 = getelementptr float, ptr addrspace(1) %431, i64 %336, !dbg !69
  %433 = extractelement <8 x i64> %399, i64 5, !dbg !69
  %434 = getelementptr float, ptr addrspace(1) %2, i64 %433, !dbg !69
  %435 = extractelement <8 x i64> %391, i64 5, !dbg !69
  %.idx15 = shl i64 %435, 4, !dbg !69
  %436 = getelementptr i8, ptr addrspace(1) %434, i64 %.idx15, !dbg !69
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %336, !dbg !69
  %438 = extractelement <8 x i64> %399, i64 6, !dbg !69
  %439 = getelementptr float, ptr addrspace(1) %2, i64 %438, !dbg !69
  %440 = extractelement <8 x i64> %391, i64 6, !dbg !69
  %.idx16 = shl i64 %440, 4, !dbg !69
  %441 = getelementptr i8, ptr addrspace(1) %439, i64 %.idx16, !dbg !69
  %442 = getelementptr float, ptr addrspace(1) %441, i64 %336, !dbg !69
  %443 = getelementptr float, ptr addrspace(1) %2, i64 %407, !dbg !69
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 true) #5, !dbg !70
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 true) #5, !dbg !70
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %422, i1 true) #5, !dbg !70
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 true) #5, !dbg !70
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %432, i1 true) #5, !dbg !70
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 true) #5, !dbg !70
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %442, i1 true) #5, !dbg !70
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 true) #5, !dbg !70
  %452 = fcmp oge <8 x float> %383, zeroinitializer, !dbg !71
  %453 = fcmp olt <8 x float> %383, splat (float 4.000000e+00), !dbg !72
  %454 = and <8 x i1> %452, %453, !dbg !73
  %455 = and <8 x i1> %300, %454, !dbg !74
  %456 = and <8 x i1> %299, %455, !dbg !75
  %457 = fptosi <8 x float> %383 to <8 x i64>, !dbg !76
  %458 = select <8 x i1> %456, <8 x i64> %457, <8 x i64> zeroinitializer, !dbg !77
  %459 = lshr <8 x i64> %458, splat (i64 61), !dbg !78
  %460 = and <8 x i64> %459, splat (i64 4), !dbg !78
  %461 = add <8 x i64> %460, %458, !dbg !78
  %462 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %461), !dbg !79
  %.not17 = icmp ult i64 %462, 4, !dbg !79
  br i1 %.not17, label %464, label %463, !dbg !79

463:                                              ; preds = %402
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 100, ptr nonnull @assertFunc_4, i64 1), !dbg !79
  unreachable, !dbg !79

464:                                              ; preds = %402
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %465 = select <8 x i1> %456, <8 x i64> %321, <8 x i64> zeroinitializer, !dbg !80
  %466 = lshr <8 x i64> %465, splat (i64 61), !dbg !81
  %467 = and <8 x i64> %466, splat (i64 4), !dbg !81
  %468 = add <8 x i64> %467, %465, !dbg !81
  %469 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %468), !dbg !82
  %.not18 = icmp ult i64 %469, 4, !dbg !82
  br i1 %.not18, label %471, label %470, !dbg !82

470:                                              ; preds = %464
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 105, ptr nonnull @assertFunc_5, i64 1), !dbg !82
  unreachable, !dbg !82

471:                                              ; preds = %464
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %472 = extractelement <8 x i64> %461, i64 7, !dbg !83
  %473 = shl nuw nsw i64 %472, 2, !dbg !83
  %474 = extractelement <8 x i64> %468, i64 7, !dbg !84
  %475 = or disjoint i64 %473, %474, !dbg !84
  %476 = or disjoint i64 %475, %336, !dbg !85
  %477 = extractelement <8 x i64> %468, i64 1, !dbg !86
  %478 = getelementptr float, ptr addrspace(1) %2, i64 %477, !dbg !86
  %479 = extractelement <8 x i64> %461, i64 1, !dbg !86
  %.idx19 = shl i64 %479, 4, !dbg !86
  %480 = getelementptr i8, ptr addrspace(1) %478, i64 %.idx19, !dbg !86
  %481 = getelementptr float, ptr addrspace(1) %480, i64 %335, !dbg !86
  %482 = extractelement <8 x i64> %468, i64 0, !dbg !86
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %482, !dbg !86
  %484 = extractelement <8 x i64> %461, i64 0, !dbg !86
  %.idx20 = shl i64 %484, 4, !dbg !86
  %485 = getelementptr i8, ptr addrspace(1) %483, i64 %.idx20, !dbg !86
  %486 = getelementptr float, ptr addrspace(1) %485, i64 %335, !dbg !86
  %487 = extractelement <8 x i64> %468, i64 2, !dbg !86
  %488 = getelementptr float, ptr addrspace(1) %2, i64 %487, !dbg !86
  %489 = extractelement <8 x i64> %461, i64 2, !dbg !86
  %.idx21 = shl i64 %489, 4, !dbg !86
  %490 = getelementptr i8, ptr addrspace(1) %488, i64 %.idx21, !dbg !86
  %491 = getelementptr float, ptr addrspace(1) %490, i64 %335, !dbg !86
  %492 = extractelement <8 x i64> %468, i64 3, !dbg !86
  %493 = getelementptr float, ptr addrspace(1) %2, i64 %492, !dbg !86
  %494 = extractelement <8 x i64> %461, i64 3, !dbg !86
  %.idx22 = shl i64 %494, 4, !dbg !86
  %495 = getelementptr i8, ptr addrspace(1) %493, i64 %.idx22, !dbg !86
  %496 = getelementptr float, ptr addrspace(1) %495, i64 %335, !dbg !86
  %497 = extractelement <8 x i64> %468, i64 4, !dbg !86
  %498 = getelementptr float, ptr addrspace(1) %2, i64 %497, !dbg !86
  %499 = extractelement <8 x i64> %461, i64 4, !dbg !86
  %.idx23 = shl i64 %499, 4, !dbg !86
  %500 = getelementptr i8, ptr addrspace(1) %498, i64 %.idx23, !dbg !86
  %501 = getelementptr float, ptr addrspace(1) %500, i64 %336, !dbg !86
  %502 = extractelement <8 x i64> %468, i64 5, !dbg !86
  %503 = getelementptr float, ptr addrspace(1) %2, i64 %502, !dbg !86
  %504 = extractelement <8 x i64> %461, i64 5, !dbg !86
  %.idx24 = shl i64 %504, 4, !dbg !86
  %505 = getelementptr i8, ptr addrspace(1) %503, i64 %.idx24, !dbg !86
  %506 = getelementptr float, ptr addrspace(1) %505, i64 %336, !dbg !86
  %507 = extractelement <8 x i64> %468, i64 6, !dbg !86
  %508 = getelementptr float, ptr addrspace(1) %2, i64 %507, !dbg !86
  %509 = extractelement <8 x i64> %461, i64 6, !dbg !86
  %.idx25 = shl i64 %509, 4, !dbg !86
  %510 = getelementptr i8, ptr addrspace(1) %508, i64 %.idx25, !dbg !86
  %511 = getelementptr float, ptr addrspace(1) %510, i64 %336, !dbg !86
  %512 = getelementptr float, ptr addrspace(1) %2, i64 %476, !dbg !86
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %481, i1 true) #5, !dbg !87
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %486, i1 true) #5, !dbg !87
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %491, i1 true) #5, !dbg !87
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %496, i1 true) #5, !dbg !87
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %501, i1 true) #5, !dbg !87
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %506, i1 true) #5, !dbg !87
  %519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %511, i1 true) #5, !dbg !87
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %512, i1 true) #5, !dbg !87
  %521 = and <8 x i1> %385, %454, !dbg !88
  %522 = and <8 x i1> %384, %521, !dbg !89
  %523 = select <8 x i1> %522, <8 x i64> %457, <8 x i64> zeroinitializer, !dbg !90
  %524 = lshr <8 x i64> %523, splat (i64 61), !dbg !91
  %525 = and <8 x i64> %524, splat (i64 4), !dbg !91
  %526 = add <8 x i64> %525, %523, !dbg !91
  %527 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %526), !dbg !92
  %.not26 = icmp ult i64 %527, 4, !dbg !92
  br i1 %.not26, label %529, label %528, !dbg !92

528:                                              ; preds = %471
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 117, ptr nonnull @assertFunc_6, i64 1), !dbg !92
  unreachable, !dbg !92

529:                                              ; preds = %471
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %530 = select <8 x i1> %522, <8 x i64> %395, <8 x i64> zeroinitializer, !dbg !93
  %531 = lshr <8 x i64> %530, splat (i64 61), !dbg !94
  %532 = and <8 x i64> %531, splat (i64 4), !dbg !94
  %533 = add <8 x i64> %532, %530, !dbg !94
  %534 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %533), !dbg !95
  %.not27 = icmp ult i64 %534, 4, !dbg !95
  br i1 %.not27, label %536, label %535, !dbg !95

535:                                              ; preds = %529
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 122, ptr nonnull @assertFunc_7, i64 1), !dbg !95
  unreachable, !dbg !95

536:                                              ; preds = %529
  %537 = extractelement <2 x float> %179, i64 1, !dbg !29
  %538 = extractelement <2 x float> %201, i64 1, !dbg !29
  %539 = extractelement <2 x float> %223, i64 1, !dbg !29
  %540 = extractelement <2 x float> %245, i64 1, !dbg !29
  %541 = extractelement <2 x float> %267, i64 1, !dbg !29
  %542 = extractelement <2 x float> %289, i64 1, !dbg !29
  %543 = extractelement <8 x float> %382, i64 7, !dbg !96
  %544 = fsub float %543, %276, !dbg !96
  %545 = fsub <2 x float> %275, %289, !dbg !97
  %546 = extractelement <8 x float> %382, i64 6, !dbg !96
  %547 = fsub float %546, %254, !dbg !96
  %548 = fsub <2 x float> %253, %267, !dbg !97
  %549 = extractelement <8 x float> %382, i64 5, !dbg !96
  %550 = fsub float %549, %232, !dbg !96
  %551 = fsub <2 x float> %231, %245, !dbg !97
  %552 = extractelement <8 x float> %382, i64 4, !dbg !96
  %553 = fsub float %552, %210, !dbg !96
  %554 = fsub <2 x float> %209, %223, !dbg !97
  %555 = extractelement <8 x float> %382, i64 3, !dbg !96
  %556 = fsub float %555, %188, !dbg !96
  %557 = fsub <2 x float> %187, %201, !dbg !97
  %558 = extractelement <8 x float> %382, i64 2, !dbg !96
  %559 = fsub float %558, %166, !dbg !96
  %560 = fsub <2 x float> %165, %179, !dbg !97
  %561 = extractelement <8 x float> %382, i64 0, !dbg !96
  %562 = fsub float %561, %146, !dbg !96
  %563 = fsub <2 x float> %145, %159, !dbg !97
  %564 = extractelement <8 x float> %382, i64 1, !dbg !96
  %565 = fsub float %564, %126, !dbg !96
  %566 = fsub <2 x float> %125, %139, !dbg !97
  %567 = bitcast i32 %451 to float, !dbg !70
  %568 = fsub float %276, %542, !dbg !98
  %569 = extractelement <8 x float> %383, i64 7, !dbg !99
  %570 = fsub float %569, %282, !dbg !99
  %571 = fmul float %568, %570, !dbg !100
  %572 = extractelement <8 x i1> %387, i64 7, !dbg !101
  %573 = select i1 %572, float %571, float 0.000000e+00, !dbg !101
  %574 = fmul float %573, %567, !dbg !102
  %575 = bitcast i32 %450 to float, !dbg !70
  %576 = fsub float %254, %541, !dbg !98
  %577 = extractelement <8 x float> %383, i64 6, !dbg !99
  %578 = fsub float %577, %260, !dbg !99
  %579 = fmul float %576, %578, !dbg !100
  %580 = extractelement <8 x i1> %387, i64 6, !dbg !101
  %581 = select i1 %580, float %579, float 0.000000e+00, !dbg !101
  %582 = fmul float %581, %575, !dbg !102
  %583 = bitcast i32 %449 to float, !dbg !70
  %584 = fsub float %232, %540, !dbg !98
  %585 = extractelement <8 x float> %383, i64 5, !dbg !99
  %586 = fsub float %585, %238, !dbg !99
  %587 = fmul float %584, %586, !dbg !100
  %588 = extractelement <8 x i1> %387, i64 5, !dbg !101
  %589 = select i1 %588, float %587, float 0.000000e+00, !dbg !101
  %590 = fmul float %589, %583, !dbg !102
  %591 = bitcast i32 %448 to float, !dbg !70
  %592 = fsub float %210, %539, !dbg !98
  %593 = extractelement <8 x float> %383, i64 4, !dbg !99
  %594 = fsub float %593, %216, !dbg !99
  %595 = fmul float %592, %594, !dbg !100
  %596 = extractelement <8 x i1> %387, i64 4, !dbg !101
  %597 = select i1 %596, float %595, float 0.000000e+00, !dbg !101
  %598 = fmul float %597, %591, !dbg !102
  %599 = bitcast i32 %447 to float, !dbg !70
  %600 = fsub float %188, %538, !dbg !98
  %601 = extractelement <8 x float> %383, i64 3, !dbg !99
  %602 = fsub float %601, %194, !dbg !99
  %603 = fmul float %600, %602, !dbg !100
  %604 = extractelement <8 x i1> %387, i64 3, !dbg !101
  %605 = select i1 %604, float %603, float 0.000000e+00, !dbg !101
  %606 = fmul float %605, %599, !dbg !102
  %607 = bitcast i32 %446 to float, !dbg !70
  %608 = fsub float %166, %537, !dbg !98
  %609 = extractelement <8 x float> %383, i64 2, !dbg !99
  %610 = fsub float %609, %172, !dbg !99
  %611 = fmul float %608, %610, !dbg !100
  %612 = extractelement <8 x i1> %387, i64 2, !dbg !101
  %613 = select i1 %612, float %611, float 0.000000e+00, !dbg !101
  %614 = fmul float %613, %607, !dbg !102
  %615 = bitcast i32 %445 to float, !dbg !70
  %616 = fsub <2 x float> %145, %159, !dbg !98
  %617 = extractelement <2 x float> %616, i64 1, !dbg !98
  %618 = extractelement <8 x float> %383, i64 0, !dbg !99
  %619 = fsub float %618, %152, !dbg !99
  %620 = fmul float %617, %619, !dbg !100
  %621 = extractelement <8 x i1> %387, i64 0, !dbg !101
  %622 = select i1 %621, float %620, float 0.000000e+00, !dbg !101
  %623 = fmul float %622, %615, !dbg !102
  %624 = bitcast i32 %444 to float, !dbg !70
  %625 = fsub <2 x float> %125, %139, !dbg !98
  %626 = extractelement <2 x float> %625, i64 1, !dbg !98
  %627 = extractelement <8 x float> %383, i64 1, !dbg !99
  %628 = fsub float %627, %132, !dbg !99
  %629 = fmul float %626, %628, !dbg !100
  %630 = extractelement <8 x i1> %387, i64 1, !dbg !101
  %631 = select i1 %630, float %629, float 0.000000e+00, !dbg !101
  %632 = fmul float %631, %624, !dbg !102
  %633 = bitcast i32 %381 to float, !dbg !52
  %634 = fmul float %544, %570, !dbg !103
  %635 = extractelement <8 x i1> %312, i64 7, !dbg !104
  %636 = select i1 %635, float %634, float 0.000000e+00, !dbg !104
  %637 = fmul float %636, %633, !dbg !105
  %638 = bitcast i32 %380 to float, !dbg !52
  %639 = fmul float %547, %578, !dbg !103
  %640 = extractelement <8 x i1> %312, i64 6, !dbg !104
  %641 = select i1 %640, float %639, float 0.000000e+00, !dbg !104
  %642 = fmul float %641, %638, !dbg !105
  %643 = bitcast i32 %379 to float, !dbg !52
  %644 = fmul float %550, %586, !dbg !103
  %645 = extractelement <8 x i1> %312, i64 5, !dbg !104
  %646 = select i1 %645, float %644, float 0.000000e+00, !dbg !104
  %647 = fmul float %646, %643, !dbg !105
  %648 = bitcast i32 %378 to float, !dbg !52
  %649 = fmul float %553, %594, !dbg !103
  %650 = extractelement <8 x i1> %312, i64 4, !dbg !104
  %651 = select i1 %650, float %649, float 0.000000e+00, !dbg !104
  %652 = fmul float %651, %648, !dbg !105
  %653 = bitcast i32 %377 to float, !dbg !52
  %654 = fmul float %556, %602, !dbg !103
  %655 = extractelement <8 x i1> %312, i64 3, !dbg !104
  %656 = select i1 %655, float %654, float 0.000000e+00, !dbg !104
  %657 = fmul float %656, %653, !dbg !105
  %658 = bitcast i32 %376 to float, !dbg !52
  %659 = fmul float %559, %610, !dbg !103
  %660 = extractelement <8 x i1> %312, i64 2, !dbg !104
  %661 = select i1 %660, float %659, float 0.000000e+00, !dbg !104
  %662 = fmul float %661, %658, !dbg !105
  %663 = bitcast i32 %375 to float, !dbg !52
  %664 = fmul float %562, %619, !dbg !103
  %665 = extractelement <8 x i1> %312, i64 0, !dbg !104
  %666 = select i1 %665, float %664, float 0.000000e+00, !dbg !104
  %667 = fmul float %666, %663, !dbg !105
  %668 = bitcast i32 %374 to float, !dbg !52
  %669 = fmul float %565, %628, !dbg !103
  %670 = extractelement <8 x i1> %312, i64 1, !dbg !104
  %671 = select i1 %670, float %669, float 0.000000e+00, !dbg !104
  %672 = fmul float %671, %668, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %673 = extractelement <8 x i64> %526, i64 7, !dbg !106
  %674 = shl nuw nsw i64 %673, 2, !dbg !106
  %675 = extractelement <8 x i64> %533, i64 7, !dbg !107
  %676 = or disjoint i64 %674, %675, !dbg !107
  %677 = or disjoint i64 %676, %336, !dbg !108
  %678 = extractelement <8 x i64> %533, i64 1, !dbg !109
  %679 = getelementptr float, ptr addrspace(1) %2, i64 %678, !dbg !109
  %680 = extractelement <8 x i64> %526, i64 1, !dbg !109
  %.idx28 = shl i64 %680, 4, !dbg !109
  %681 = getelementptr i8, ptr addrspace(1) %679, i64 %.idx28, !dbg !109
  %682 = getelementptr float, ptr addrspace(1) %681, i64 %335, !dbg !109
  %683 = extractelement <8 x i64> %533, i64 0, !dbg !109
  %684 = getelementptr float, ptr addrspace(1) %2, i64 %683, !dbg !109
  %685 = extractelement <8 x i64> %526, i64 0, !dbg !109
  %.idx29 = shl i64 %685, 4, !dbg !109
  %686 = getelementptr i8, ptr addrspace(1) %684, i64 %.idx29, !dbg !109
  %687 = getelementptr float, ptr addrspace(1) %686, i64 %335, !dbg !109
  %688 = extractelement <8 x i64> %533, i64 2, !dbg !109
  %689 = getelementptr float, ptr addrspace(1) %2, i64 %688, !dbg !109
  %690 = extractelement <8 x i64> %526, i64 2, !dbg !109
  %.idx30 = shl i64 %690, 4, !dbg !109
  %691 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx30, !dbg !109
  %692 = getelementptr float, ptr addrspace(1) %691, i64 %335, !dbg !109
  %693 = extractelement <8 x i64> %533, i64 3, !dbg !109
  %694 = getelementptr float, ptr addrspace(1) %2, i64 %693, !dbg !109
  %695 = extractelement <8 x i64> %526, i64 3, !dbg !109
  %.idx31 = shl i64 %695, 4, !dbg !109
  %696 = getelementptr i8, ptr addrspace(1) %694, i64 %.idx31, !dbg !109
  %697 = getelementptr float, ptr addrspace(1) %696, i64 %335, !dbg !109
  %698 = extractelement <8 x i64> %533, i64 4, !dbg !109
  %699 = getelementptr float, ptr addrspace(1) %2, i64 %698, !dbg !109
  %700 = extractelement <8 x i64> %526, i64 4, !dbg !109
  %.idx32 = shl i64 %700, 4, !dbg !109
  %701 = getelementptr i8, ptr addrspace(1) %699, i64 %.idx32, !dbg !109
  %702 = getelementptr float, ptr addrspace(1) %701, i64 %336, !dbg !109
  %703 = extractelement <8 x i64> %533, i64 5, !dbg !109
  %704 = getelementptr float, ptr addrspace(1) %2, i64 %703, !dbg !109
  %705 = extractelement <8 x i64> %526, i64 5, !dbg !109
  %.idx33 = shl i64 %705, 4, !dbg !109
  %706 = getelementptr i8, ptr addrspace(1) %704, i64 %.idx33, !dbg !109
  %707 = getelementptr float, ptr addrspace(1) %706, i64 %336, !dbg !109
  %708 = extractelement <8 x i64> %533, i64 6, !dbg !109
  %709 = getelementptr float, ptr addrspace(1) %2, i64 %708, !dbg !109
  %710 = extractelement <8 x i64> %526, i64 6, !dbg !109
  %.idx34 = shl i64 %710, 4, !dbg !109
  %711 = getelementptr i8, ptr addrspace(1) %709, i64 %.idx34, !dbg !109
  %712 = getelementptr float, ptr addrspace(1) %711, i64 %336, !dbg !109
  %713 = getelementptr float, ptr addrspace(1) %2, i64 %677, !dbg !109
  %714 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %682, i1 true) #5, !dbg !110
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %687, i1 true) #5, !dbg !110
  %716 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %692, i1 true) #5, !dbg !110
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %697, i1 true) #5, !dbg !110
  %718 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %702, i1 true) #5, !dbg !110
  %719 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %707, i1 true) #5, !dbg !110
  %720 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %712, i1 true) #5, !dbg !110
  %721 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %713, i1 true) #5, !dbg !110
  %722 = insertelement <2 x i32> poison, i32 %513, i64 0, !dbg !87
  %723 = insertelement <2 x i32> %722, i32 %714, i64 1, !dbg !87
  %724 = bitcast <2 x i32> %723 to <2 x float>, !dbg !87
  %725 = shufflevector <2 x float> %566, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %726 = insertelement <2 x float> %725, float %565, i64 0, !dbg !111
  %727 = fmul <2 x float> %566, %726, !dbg !111
  %728 = shufflevector <8 x i1> %456, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !112
  %729 = shufflevector <8 x i1> %728, <8 x i1> %522, <2 x i32> <i32 0, i32 9>, !dbg !112
  %730 = select <2 x i1> %729, <2 x float> %727, <2 x float> zeroinitializer, !dbg !112
  %731 = fmul <2 x float> %730, %724, !dbg !113
  %732 = insertelement <2 x i32> poison, i32 %514, i64 0, !dbg !87
  %733 = insertelement <2 x i32> %732, i32 %715, i64 1, !dbg !87
  %734 = bitcast <2 x i32> %733 to <2 x float>, !dbg !87
  %735 = shufflevector <2 x float> %563, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %736 = insertelement <2 x float> %735, float %562, i64 0, !dbg !111
  %737 = fmul <2 x float> %563, %736, !dbg !111
  %738 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 0, i32 8>, !dbg !112
  %739 = select <2 x i1> %738, <2 x float> %737, <2 x float> zeroinitializer, !dbg !112
  %740 = fmul <2 x float> %739, %734, !dbg !113
  %741 = insertelement <2 x i32> poison, i32 %515, i64 0, !dbg !87
  %742 = insertelement <2 x i32> %741, i32 %716, i64 1, !dbg !87
  %743 = bitcast <2 x i32> %742 to <2 x float>, !dbg !87
  %744 = shufflevector <2 x float> %560, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %745 = insertelement <2 x float> %744, float %559, i64 0, !dbg !111
  %746 = fmul <2 x float> %560, %745, !dbg !111
  %747 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 2, i32 10>, !dbg !112
  %748 = select <2 x i1> %747, <2 x float> %746, <2 x float> zeroinitializer, !dbg !112
  %749 = fmul <2 x float> %748, %743, !dbg !113
  %750 = insertelement <2 x i32> poison, i32 %516, i64 0, !dbg !87
  %751 = insertelement <2 x i32> %750, i32 %717, i64 1, !dbg !87
  %752 = bitcast <2 x i32> %751 to <2 x float>, !dbg !87
  %753 = shufflevector <2 x float> %557, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %754 = insertelement <2 x float> %753, float %556, i64 0, !dbg !111
  %755 = fmul <2 x float> %557, %754, !dbg !111
  %756 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 3, i32 11>, !dbg !112
  %757 = select <2 x i1> %756, <2 x float> %755, <2 x float> zeroinitializer, !dbg !112
  %758 = fmul <2 x float> %757, %752, !dbg !113
  %759 = insertelement <2 x i32> poison, i32 %517, i64 0, !dbg !87
  %760 = insertelement <2 x i32> %759, i32 %718, i64 1, !dbg !87
  %761 = bitcast <2 x i32> %760 to <2 x float>, !dbg !87
  %762 = shufflevector <2 x float> %554, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %763 = insertelement <2 x float> %762, float %553, i64 0, !dbg !111
  %764 = fmul <2 x float> %554, %763, !dbg !111
  %765 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 4, i32 12>, !dbg !112
  %766 = select <2 x i1> %765, <2 x float> %764, <2 x float> zeroinitializer, !dbg !112
  %767 = fmul <2 x float> %766, %761, !dbg !113
  %768 = insertelement <2 x i32> poison, i32 %518, i64 0, !dbg !87
  %769 = insertelement <2 x i32> %768, i32 %719, i64 1, !dbg !87
  %770 = bitcast <2 x i32> %769 to <2 x float>, !dbg !87
  %771 = shufflevector <2 x float> %551, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %772 = insertelement <2 x float> %771, float %550, i64 0, !dbg !111
  %773 = fmul <2 x float> %551, %772, !dbg !111
  %774 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 5, i32 13>, !dbg !112
  %775 = select <2 x i1> %774, <2 x float> %773, <2 x float> zeroinitializer, !dbg !112
  %776 = fmul <2 x float> %775, %770, !dbg !113
  %777 = insertelement <2 x i32> poison, i32 %519, i64 0, !dbg !87
  %778 = insertelement <2 x i32> %777, i32 %720, i64 1, !dbg !87
  %779 = bitcast <2 x i32> %778 to <2 x float>, !dbg !87
  %780 = shufflevector <2 x float> %548, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %781 = insertelement <2 x float> %780, float %547, i64 0, !dbg !111
  %782 = fmul <2 x float> %548, %781, !dbg !111
  %783 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 6, i32 14>, !dbg !112
  %784 = select <2 x i1> %783, <2 x float> %782, <2 x float> zeroinitializer, !dbg !112
  %785 = fmul <2 x float> %784, %779, !dbg !113
  %786 = insertelement <2 x i32> poison, i32 %520, i64 0, !dbg !87
  %787 = insertelement <2 x i32> %786, i32 %721, i64 1, !dbg !87
  %788 = bitcast <2 x i32> %787 to <2 x float>, !dbg !87
  %789 = shufflevector <2 x float> %545, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %790 = insertelement <2 x float> %789, float %544, i64 0, !dbg !111
  %791 = fmul <2 x float> %545, %790, !dbg !111
  %792 = shufflevector <8 x i1> %456, <8 x i1> %522, <2 x i32> <i32 7, i32 15>, !dbg !112
  %793 = select <2 x i1> %792, <2 x float> %791, <2 x float> zeroinitializer, !dbg !112
  %794 = fmul <2 x float> %793, %788, !dbg !113
  %795 = fadd float %672, %632, !dbg !114
  %796 = fadd float %667, %623, !dbg !114
  %797 = fadd float %662, %614, !dbg !114
  %798 = fadd float %657, %606, !dbg !114
  %799 = fadd float %652, %598, !dbg !114
  %800 = fadd float %647, %590, !dbg !114
  %801 = fadd float %642, %582, !dbg !114
  %802 = fadd float %637, %574, !dbg !114
  %803 = extractelement <2 x float> %731, i64 0, !dbg !115
  %804 = fadd float %795, %803, !dbg !115
  %805 = extractelement <2 x float> %740, i64 0, !dbg !115
  %806 = fadd float %796, %805, !dbg !115
  %807 = extractelement <2 x float> %749, i64 0, !dbg !115
  %808 = fadd float %797, %807, !dbg !115
  %809 = extractelement <2 x float> %758, i64 0, !dbg !115
  %810 = fadd float %798, %809, !dbg !115
  %811 = extractelement <2 x float> %767, i64 0, !dbg !115
  %812 = fadd float %799, %811, !dbg !115
  %813 = extractelement <2 x float> %776, i64 0, !dbg !115
  %814 = fadd float %800, %813, !dbg !115
  %815 = extractelement <2 x float> %785, i64 0, !dbg !115
  %816 = fadd float %801, %815, !dbg !115
  %817 = extractelement <2 x float> %794, i64 0, !dbg !115
  %818 = fadd float %802, %817, !dbg !115
  %819 = extractelement <2 x float> %731, i64 1, !dbg !116
  %820 = fadd float %804, %819, !dbg !116
  %821 = extractelement <2 x float> %740, i64 1, !dbg !116
  %822 = fadd float %806, %821, !dbg !116
  %823 = extractelement <2 x float> %749, i64 1, !dbg !116
  %824 = fadd float %808, %823, !dbg !116
  %825 = extractelement <2 x float> %758, i64 1, !dbg !116
  %826 = fadd float %810, %825, !dbg !116
  %827 = extractelement <2 x float> %767, i64 1, !dbg !116
  %828 = fadd float %812, %827, !dbg !116
  %829 = extractelement <2 x float> %776, i64 1, !dbg !116
  %830 = fadd float %814, %829, !dbg !116
  %831 = extractelement <2 x float> %785, i64 1, !dbg !116
  %832 = fadd float %816, %831, !dbg !116
  %833 = extractelement <2 x float> %794, i64 1, !dbg !116
  %834 = fadd float %818, %833, !dbg !116
  %835 = sext i32 %10 to i64, !dbg !117
  %836 = getelementptr float, ptr addrspace(1) %0, i64 %835, !dbg !117
  %837 = sext i32 %14 to i64, !dbg !117
  %838 = getelementptr float, ptr addrspace(1) %0, i64 %837, !dbg !117
  %839 = bitcast float %820 to i32, !dbg !118
  %840 = bitcast float %822 to i32, !dbg !118
  %841 = bitcast float %824 to i32, !dbg !118
  %842 = bitcast float %826 to i32, !dbg !118
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %839, i32 %840, i32 %841, i32 %842, ptr addrspace(1) %836, i1 true) #5, !dbg !118
  %843 = bitcast float %828 to i32, !dbg !118
  %844 = bitcast float %830 to i32, !dbg !118
  %845 = bitcast float %832 to i32, !dbg !118
  %846 = bitcast float %834 to i32, !dbg !118
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %843, i32 %844, i32 %845, i32 %846, ptr addrspace(1) %838, i1 true) #5, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v8i64(<8 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 26, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 32, scope: !11)
!20 = !DILocation(line: 28, column: 44, scope: !11)
!21 = !DILocation(line: 28, column: 37, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 49, scope: !11)
!24 = !DILocation(line: 29, column: 35, scope: !11)
!25 = !DILocation(line: 29, column: 42, scope: !11)
!26 = !DILocation(line: 29, column: 31, scope: !11)
!27 = !DILocation(line: 29, column: 54, scope: !11)
!28 = !DILocation(line: 34, column: 27, scope: !11)
!29 = !DILocation(line: 41, column: 28, scope: !11)
!30 = !DILocation(line: 39, column: 20, scope: !11)
!31 = !DILocation(line: 40, column: 20, scope: !11)
!32 = !DILocation(line: 36, column: 19, scope: !11)
!33 = !DILocation(line: 38, column: 18, scope: !11)
!34 = !DILocation(line: 42, column: 21, scope: !11)
!35 = !DILocation(line: 43, column: 20, scope: !11)
!36 = !DILocation(line: 44, column: 20, scope: !11)
!37 = !DILocation(line: 45, column: 19, scope: !11)
!38 = !DILocation(line: 46, column: 19, scope: !11)
!39 = !DILocation(line: 47, column: 21, scope: !11)
!40 = !DILocation(line: 49, column: 35, scope: !11)
!41 = !DILocation(line: 53, column: 35, scope: !11)
!42 = !DILocation(line: 54, column: 49, scope: !11)
!43 = !DILocation(line: 55, column: 20, scope: !11)
!44 = !DILocation(line: 56, column: 35, scope: !11)
!45 = !DILocation(line: 59, column: 35, scope: !11)
!46 = !DILocation(line: 60, column: 49, scope: !11)
!47 = !DILocation(line: 61, column: 41, scope: !11)
!48 = !DILocation(line: 61, column: 39, scope: !11)
!49 = !DILocation(line: 61, column: 52, scope: !11)
!50 = !DILocation(line: 61, column: 49, scope: !11)
!51 = !DILocation(line: 61, column: 31, scope: !11)
!52 = !DILocation(line: 61, column: 57, scope: !11)
!53 = !DILocation(line: 63, column: 19, scope: !11)
!54 = !DILocation(line: 65, column: 20, scope: !11)
!55 = !DILocation(line: 70, column: 21, scope: !11)
!56 = !DILocation(line: 71, column: 20, scope: !11)
!57 = !DILocation(line: 72, column: 20, scope: !11)
!58 = !DILocation(line: 73, column: 20, scope: !11)
!59 = !DILocation(line: 74, column: 35, scope: !11)
!60 = !DILocation(line: 77, column: 35, scope: !11)
!61 = !DILocation(line: 78, column: 49, scope: !11)
!62 = !DILocation(line: 79, column: 21, scope: !11)
!63 = !DILocation(line: 80, column: 35, scope: !11)
!64 = !DILocation(line: 83, column: 35, scope: !11)
!65 = !DILocation(line: 84, column: 49, scope: !11)
!66 = !DILocation(line: 85, column: 41, scope: !11)
!67 = !DILocation(line: 85, column: 39, scope: !11)
!68 = !DILocation(line: 85, column: 49, scope: !11)
!69 = !DILocation(line: 85, column: 31, scope: !11)
!70 = !DILocation(line: 85, column: 57, scope: !11)
!71 = !DILocation(line: 90, column: 21, scope: !11)
!72 = !DILocation(line: 91, column: 20, scope: !11)
!73 = !DILocation(line: 92, column: 20, scope: !11)
!74 = !DILocation(line: 93, column: 19, scope: !11)
!75 = !DILocation(line: 94, column: 19, scope: !11)
!76 = !DILocation(line: 95, column: 21, scope: !11)
!77 = !DILocation(line: 96, column: 35, scope: !11)
!78 = !DILocation(line: 99, column: 35, scope: !11)
!79 = !DILocation(line: 100, column: 49, scope: !11)
!80 = !DILocation(line: 101, column: 35, scope: !11)
!81 = !DILocation(line: 104, column: 35, scope: !11)
!82 = !DILocation(line: 105, column: 49, scope: !11)
!83 = !DILocation(line: 106, column: 41, scope: !11)
!84 = !DILocation(line: 106, column: 39, scope: !11)
!85 = !DILocation(line: 106, column: 49, scope: !11)
!86 = !DILocation(line: 106, column: 31, scope: !11)
!87 = !DILocation(line: 106, column: 57, scope: !11)
!88 = !DILocation(line: 111, column: 20, scope: !11)
!89 = !DILocation(line: 112, column: 20, scope: !11)
!90 = !DILocation(line: 113, column: 35, scope: !11)
!91 = !DILocation(line: 116, column: 35, scope: !11)
!92 = !DILocation(line: 117, column: 49, scope: !11)
!93 = !DILocation(line: 118, column: 35, scope: !11)
!94 = !DILocation(line: 121, column: 35, scope: !11)
!95 = !DILocation(line: 122, column: 49, scope: !11)
!96 = !DILocation(line: 64, column: 20, scope: !11)
!97 = !DILocation(line: 107, column: 20, scope: !11)
!98 = !DILocation(line: 86, column: 19, scope: !11)
!99 = !DILocation(line: 66, column: 20, scope: !11)
!100 = !DILocation(line: 87, column: 20, scope: !11)
!101 = !DILocation(line: 88, column: 35, scope: !11)
!102 = !DILocation(line: 89, column: 20, scope: !11)
!103 = !DILocation(line: 67, column: 20, scope: !11)
!104 = !DILocation(line: 68, column: 35, scope: !11)
!105 = !DILocation(line: 69, column: 20, scope: !11)
!106 = !DILocation(line: 123, column: 41, scope: !11)
!107 = !DILocation(line: 123, column: 39, scope: !11)
!108 = !DILocation(line: 123, column: 49, scope: !11)
!109 = !DILocation(line: 123, column: 31, scope: !11)
!110 = !DILocation(line: 123, column: 57, scope: !11)
!111 = !DILocation(line: 108, column: 20, scope: !11)
!112 = !DILocation(line: 109, column: 35, scope: !11)
!113 = !DILocation(line: 110, column: 20, scope: !11)
!114 = !DILocation(line: 127, column: 20, scope: !11)
!115 = !DILocation(line: 128, column: 21, scope: !11)
!116 = !DILocation(line: 129, column: 22, scope: !11)
!117 = !DILocation(line: 130, column: 28, scope: !11)
!118 = !DILocation(line: 130, column: 41, scope: !11)
!119 = !DILocation(line: 130, column: 4, scope: !11)
