; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
.peel.next:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = and i32 %12, 63, !dbg !12
  %15 = lshr i32 %12, 2, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %12, 64, !dbg !12
  %18 = lshr exact i32 %17, 2, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %12, 128, !dbg !12
  %21 = lshr exact i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = or disjoint i32 %11, %14, !dbg !13
  %24 = or disjoint i32 %11, %22, !dbg !13
  %25 = icmp slt i32 %23, 512, !dbg !14
  %26 = icmp slt i32 %24, 512, !dbg !14
  %.lobit2 = lshr exact i32 %17, 6, !dbg !15
  %27 = lshr exact i32 %20, 6, !dbg !15
  %.frozen = freeze i32 %23, !dbg !16
  %28 = sdiv i32 %.frozen, 4, !dbg !16
  %29 = mul i32 %28, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %29, !dbg !17
  %30 = srem i32 %28, 32, !dbg !18
  %31 = sext i32 %30 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %25) #3, !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = shl nsw i32 %.decomposed, 4, !dbg !21
  %36 = shl i32 %24, 16, !dbg !22
  %37 = shl i32 %28, 15, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %invariant.op11 = or disjoint i32 %.lobit2, %27, !dbg !25
  %39 = or disjoint i32 %36, %13
  %40 = shl i32 %12, 6
  %41 = and i32 %40, 192
  %.reass = or disjoint i32 %41, %16
  %42 = or disjoint i32 %18, %.reass
  %43 = or disjoint i32 %42, %21
  %44 = and i32 %12, 255
  %45 = lshr exact i32 %41, 4
  %46 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %45
  %47 = getelementptr float, ptr addrspace(3) %46, i32 %43
  %48 = lshr i32 %44, 6
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %44
  %51 = shl i32 %12, 2
  %52 = and i32 %51, 252
  %.reass12 = or disjoint i32 %52, %invariant.op11
  %53 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %52
  %54 = getelementptr float, ptr addrspace(3) %53, i32 %.reass12
  %55 = lshr i32 %44, 2
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55
  %57 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %44
  %58 = sext i32 %39 to i64, !dbg !25
  %59 = sext i32 %35 to i64, !dbg !26
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %60, i1 %25, i1 %25) #3, !dbg !27
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !28
  %63 = zext nneg i32 %invariant.op11 to i64, !dbg !29
  %64 = getelementptr i64, ptr addrspace(1) %0, i64 %63, !dbg !29
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %26, i32 0, i1 %26) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %68 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %68, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %69 = load float, ptr addrspace(3) %50, align 4, !dbg !32
  %70 = lshr i64 %61, 58, !dbg !33
  %71 = and i64 %70, 32, !dbg !33
  %72 = add i64 %71, %61, !dbg !33
  %73 = lshr i64 %62, 58, !dbg !34
  %74 = and i64 %73, 32, !dbg !34
  %75 = add i64 %74, %62, !dbg !34
  %76 = lshr i64 %65, 58, !dbg !35
  %77 = and i64 %76, 32, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !36
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %77, !dbg !36
  %.idx.peel = shl i64 %75, 7, !dbg !36
  %80 = getelementptr i8, ptr addrspace(1) %79, i64 %.idx.peel, !dbg !36
  %.idx4.peel = shl i64 %72, 12, !dbg !36
  %81 = getelementptr i8, ptr addrspace(1) %80, i64 %.idx4.peel, !dbg !36
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %38, !dbg !36
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #3, !dbg !37
  %84 = bitcast i32 %83 to float, !dbg !37
  %85 = fadd float %34, %84, !dbg !38
  %86 = fadd float %69, %85, !dbg !39
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %88 = bitcast float %86 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %88, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %89 = load i32, ptr addrspace(3) %57, align 4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %87, i1 %26) #3, !dbg !41
  %90 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !42
  %91 = select i1 %25, float %86, float 0.000000e+00, !dbg !43
  %invariant.op = or i32 %.lobit2, %27, !dbg !25
  br label %92, !dbg !25

92:                                               ; preds = %.peel.next, %92
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %92 ]
  %93 = phi float [ %90, %.peel.next ], [ %140, %92 ]
  %94 = phi float [ 0.000000e+00, %.peel.next ], [ %139, %92 ]
  %95 = phi float [ %91, %.peel.next ], [ %138, %92 ]
  %96 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !44
  %97 = lshr i32 %96, 12, !dbg !44
  %98 = lshr i64 %indvars.iv, 6, !dbg !45
  %99 = and i64 %98, 63, !dbg !46
  %.masked = and i32 %96, 60, !dbg !47
  %.reass19.reass = or i32 %.masked, %invariant.op
  %100 = add nuw nsw i32 %97, %35, !dbg !48
  %101 = sext i32 %100 to i64, !dbg !26
  %102 = getelementptr i64, ptr addrspace(1) %0, i64 %101, !dbg !26
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %102, i1 %25, i1 %25) #3, !dbg !27
  %104 = getelementptr i64, ptr addrspace(1) %0, i64 %99, !dbg !49
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !28
  %106 = zext nneg i32 %.reass19.reass to i64, !dbg !29
  %107 = getelementptr i64, ptr addrspace(1) %0, i64 %106, !dbg !29
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !30
  %109 = add nuw nsw i64 %indvars.iv, %58, !dbg !50
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %26, i32 0, i1 %26) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %112 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %112, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %113 = load float, ptr addrspace(3) %50, align 4, !dbg !32
  %114 = lshr i64 %103, 58, !dbg !33
  %115 = and i64 %114, 32, !dbg !33
  %116 = add i64 %115, %103, !dbg !33
  %117 = lshr i64 %105, 58, !dbg !34
  %118 = and i64 %117, 32, !dbg !34
  %119 = add i64 %118, %105, !dbg !34
  %120 = lshr i64 %108, 58, !dbg !35
  %121 = and i64 %120, 32, !dbg !35
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !36
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %121, !dbg !36
  %.idx = shl i64 %119, 7, !dbg !36
  %124 = getelementptr i8, ptr addrspace(1) %123, i64 %.idx, !dbg !36
  %.idx4 = shl i64 %116, 12, !dbg !36
  %125 = getelementptr i8, ptr addrspace(1) %124, i64 %.idx4, !dbg !36
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %38, !dbg !36
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %25) #3, !dbg !37
  %128 = bitcast i32 %127 to float, !dbg !37
  %129 = fadd float %34, %128, !dbg !38
  %130 = fadd float %113, %129, !dbg !39
  %131 = fsub float %130, %95, !dbg !51
  %132 = fadd float %93, 1.000000e+00, !dbg !55
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %132) #3, !dbg !56
  %134 = fadd float %95, %133, !dbg !57
  %135 = fsub float %130, %134, !dbg !58
  %136 = fmul float %131, %135, !dbg !59
  %137 = fadd float %94, %136, !dbg !60
  %138 = select i1 %25, float %134, float %95, !dbg !43
  %139 = select i1 %25, float %137, float %94, !dbg !61
  %140 = select i1 %25, float %132, float %93, !dbg !42
  %141 = getelementptr float, ptr addrspace(1) %4, i64 %109, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %142 = bitcast float %130 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %142, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %143 = load i32, ptr addrspace(3) %57, align 4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %141, i1 %26) #3, !dbg !41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !25
  %144 = icmp samesign ult i64 %indvars.iv, 65532, !dbg !25
  br i1 %144, label %92, label %.loopexit, !dbg !25, !llvm.loop !62

.loopexit:                                        ; preds = %92
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %145 = lshr i32 %12, 6, !dbg !64
  %146 = and i32 %145, 3, !dbg !64
  %147 = shl nuw nsw i32 %14, 2, !dbg !64
  %148 = or disjoint i32 %147, %146, !dbg !64
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !64
  %150 = bitcast float %138 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #3, !dbg !64
  %151 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %148, !dbg !64
  %152 = bitcast float %139 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #3, !dbg !64
  %153 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %148, !dbg !64
  %154 = bitcast float %140 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %155 = icmp slt i32 %12, 256, !dbg !64
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %157 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %156, i1 %155) #3, !dbg !64
  %158 = bitcast i32 %157 to float, !dbg !64
  %159 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !64
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %155) #3, !dbg !64
  %161 = bitcast i32 %160 to float, !dbg !64
  %162 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !64
  %163 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %155) #3, !dbg !64
  %164 = bitcast i32 %163 to float, !dbg !64
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !64
  %166 = bitcast i32 %165 to float, !dbg !64
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !64
  %168 = bitcast i32 %167 to float, !dbg !64
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !64
  %170 = bitcast i32 %169 to float, !dbg !64
  %171 = fsub float %166, %158, !dbg !66
  %172 = fadd float %164, %170, !dbg !68
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !69
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #3, !dbg !70
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !71
  %176 = fmul float %171, %175, !dbg !72
  %177 = fadd float %176, %158, !dbg !73
  %178 = fadd float %161, %168, !dbg !74
  %179 = fmul float %171, %171, !dbg !75
  %180 = fmul float %179, %164, !dbg !76
  %181 = fmul float %180, %175, !dbg !77
  %182 = fadd float %178, %181, !dbg !78
  %183 = bitcast float %177 to i32, !dbg !64
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !64
  %185 = bitcast i32 %184 to float, !dbg !64
  %186 = bitcast float %182 to i32, !dbg !64
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !64
  %188 = bitcast i32 %187 to float, !dbg !64
  %189 = bitcast float %172 to i32, !dbg !64
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !64
  %191 = bitcast i32 %190 to float, !dbg !64
  %192 = fsub float %185, %177, !dbg !66
  %193 = fadd float %172, %191, !dbg !68
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !69
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #3, !dbg !70
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !71
  %197 = fmul float %192, %196, !dbg !72
  %198 = fadd float %177, %197, !dbg !73
  %199 = fadd float %182, %188, !dbg !74
  %200 = fmul float %192, %192, !dbg !75
  %201 = fmul float %172, %200, !dbg !76
  %202 = fmul float %196, %201, !dbg !77
  %203 = fadd float %199, %202, !dbg !78
  %204 = icmp eq i32 %13, 0, !dbg !64
  %205 = and i1 %155, %204, !dbg !64
  %206 = bitcast float %198 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %206, i1 %205) #3, !dbg !64
  %207 = bitcast float %203 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %207, i1 %205) #3, !dbg !64
  %208 = bitcast float %193 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %208, i1 %205) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !64
  %210 = load i32, ptr addrspace(3) %209, align 16, !dbg !64
  %211 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %147, !dbg !64
  %212 = load i32, ptr addrspace(3) %211, align 16, !dbg !64
  %213 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %147, !dbg !64
  %214 = load i32, ptr addrspace(3) %213, align 16, !dbg !64
  %215 = sext i32 %23 to i64, !dbg !79
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !79
  %217 = icmp eq i32 %146, 0, !dbg !80
  %218 = and i1 %217, %25, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %216, i1 %218) #3, !dbg !80
  %219 = getelementptr float, ptr addrspace(1) %6, i64 %215, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %219, i1 %218) #3, !dbg !82
  %220 = getelementptr float, ptr addrspace(1) %7, i64 %215, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %220, i1 %218) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvufye4t4qgcnv7awu2oaqubrgkts4trqohebzwjbrqt5mgtqpsa.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 42, scope: !7)
!22 = !DILocation(line: 44, column: 46, scope: !7)
!23 = !DILocation(line: 55, column: 71, scope: !7)
!24 = !DILocation(line: 55, column: 65, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 41, column: 47, scope: !7)
!28 = !DILocation(line: 42, column: 39, scope: !7)
!29 = !DILocation(line: 43, column: 34, scope: !7)
!30 = !DILocation(line: 43, column: 39, scope: !7)
!31 = !DILocation(line: 44, column: 35, scope: !7)
!32 = !DILocation(line: 44, column: 51, scope: !7)
!33 = !DILocation(line: 48, column: 36, scope: !7)
!34 = !DILocation(line: 51, column: 36, scope: !7)
!35 = !DILocation(line: 54, column: 39, scope: !7)
!36 = !DILocation(line: 55, column: 35, scope: !7)
!37 = !DILocation(line: 55, column: 76, scope: !7)
!38 = !DILocation(line: 56, column: 24, scope: !7)
!39 = !DILocation(line: 57, column: 24, scope: !7)
!40 = !DILocation(line: 65, column: 29, scope: !7)
!41 = !DILocation(line: 65, column: 52, scope: !7)
!42 = !DILocation(line: 64, column: 58, scope: !7)
!43 = !DILocation(line: 62, column: 54, scope: !7)
!44 = !DILocation(line: 37, column: 23, scope: !7)
!45 = !DILocation(line: 38, column: 25, scope: !7)
!46 = !DILocation(line: 38, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 23, scope: !7)
!48 = !DILocation(line: 41, column: 39, scope: !7)
!49 = !DILocation(line: 42, column: 34, scope: !7)
!50 = !DILocation(line: 44, column: 40, scope: !7)
!51 = !DILocation(line: 183, column: 24, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 60, column: 55, scope: !7)
!55 = !DILocation(line: 184, column: 30, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 185, column: 34, scope: !52, inlinedAt: !54)
!57 = !DILocation(line: 185, column: 26, scope: !52, inlinedAt: !54)
!58 = !DILocation(line: 186, column: 39, scope: !52, inlinedAt: !54)
!59 = !DILocation(line: 186, column: 31, scope: !52, inlinedAt: !54)
!60 = !DILocation(line: 186, column: 22, scope: !52, inlinedAt: !54)
!61 = !DILocation(line: 63, column: 50, scope: !7)
!62 = distinct !{!62, !63}
!63 = !{!"llvm.loop.peeled.count", i32 1}
!64 = !DILocation(line: 204, column: 46, scope: !52, inlinedAt: !65)
!65 = !DILocation(line: 67, column: 44, scope: !7)
!66 = !DILocation(line: 192, column: 21, scope: !67, inlinedAt: !65)
!67 = distinct !DILexicalBlockFile(scope: !52, file: !53, discriminator: 0)
!68 = !DILocation(line: 193, column: 28, scope: !67, inlinedAt: !65)
!69 = !DILocation(line: 194, column: 39, scope: !67, inlinedAt: !65)
!70 = !DILocation(line: 194, column: 60, scope: !67, inlinedAt: !65)
!71 = !DILocation(line: 194, column: 49, scope: !67, inlinedAt: !65)
!72 = !DILocation(line: 196, column: 25, scope: !67, inlinedAt: !65)
!73 = !DILocation(line: 196, column: 17, scope: !67, inlinedAt: !65)
!74 = !DILocation(line: 197, column: 15, scope: !67, inlinedAt: !65)
!75 = !DILocation(line: 197, column: 30, scope: !67, inlinedAt: !65)
!76 = !DILocation(line: 197, column: 38, scope: !67, inlinedAt: !65)
!77 = !DILocation(line: 197, column: 49, scope: !67, inlinedAt: !65)
!78 = !DILocation(line: 197, column: 22, scope: !67, inlinedAt: !65)
!79 = !DILocation(line: 72, column: 25, scope: !7)
!80 = !DILocation(line: 72, column: 37, scope: !7)
!81 = !DILocation(line: 73, column: 25, scope: !7)
!82 = !DILocation(line: 73, column: 37, scope: !7)
!83 = !DILocation(line: 74, column: 25, scope: !7)
!84 = !DILocation(line: 74, column: 37, scope: !7)
!85 = !DILocation(line: 74, column: 4, scope: !7)
