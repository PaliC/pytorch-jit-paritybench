; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = icmp slt i32 %14, 16, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = srem i32 %14, 4, !dbg !13
  %19 = shl i32 %14, 4, !dbg !14
  %20 = or disjoint i32 %19, %17, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15) #5, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15) #5, !dbg !17
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #5, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #5, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #5, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #5, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %15) #5, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %15) #5, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #5, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #5, !dbg !31
  %49 = sext i32 %14 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %49, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #5, !dbg !33
  %52 = fadd float %40, 0x3EE4F8B580000000, !dbg !34
  %53 = fadd float %42, 0x3EE4F8B580000000, !dbg !34
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %54, 0, !dbg !35
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %55, 0, !dbg !35
  br i1 %.not.i, label %61, label %56, !dbg !35

56:                                               ; preds = %13
  br i1 %.not1.i, label %59, label %57, !dbg !35

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

61:                                               ; preds = %13
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !35
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i1 = icmp eq i32 %66, 0, !dbg !35
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !35
  br i1 %.not.i1, label %73, label %68, !dbg !35

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #5, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !35
  %78 = bitcast i32 %31 to float, !dbg !21
  %79 = bitcast i32 %34 to float, !dbg !23
  %80 = fadd float %78, %79, !dbg !36
  %81 = bitcast i32 %37 to float, !dbg !25
  %82 = fsub float %80, %81, !dbg !37
  %83 = bitcast i32 %30 to float, !dbg !21
  %84 = bitcast i32 %33 to float, !dbg !23
  %85 = fadd float %83, %84, !dbg !36
  %86 = bitcast i32 %36 to float, !dbg !25
  %87 = fsub float %85, %86, !dbg !37
  %88 = bitcast i32 %24 to float, !dbg !17
  %89 = bitcast i32 %28 to float, !dbg !19
  %90 = fadd float %88, %89, !dbg !38
  %91 = bitcast i32 %23 to float, !dbg !17
  %92 = bitcast i32 %27 to float, !dbg !19
  %93 = fadd float %91, %92, !dbg !38
  %94 = bitcast i32 %51 to float, !dbg !33
  %95 = bitcast i32 %48 to float, !dbg !31
  %96 = bitcast i32 %47 to float, !dbg !31
  %97 = bitcast i32 %45 to float, !dbg !29
  %98 = bitcast i32 %44 to float, !dbg !29
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !39
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !39
  %101 = fmul float %87, %99, !dbg !40
  %102 = fmul float %82, %100, !dbg !40
  %103 = fmul float %101, %98, !dbg !41
  %104 = fmul float %102, %97, !dbg !41
  %105 = fadd float %103, %96, !dbg !42
  %106 = fadd float %104, %95, !dbg !42
  %107 = fadd float %93, %105, !dbg !43
  %108 = fadd float %90, %106, !dbg !43
  %109 = fsub float 0.000000e+00, %94, !dbg !44
  %110 = fmul float %109, 0x3FF7154760000000, !dbg !48
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #5, !dbg !48
  %112 = fadd float %111, 1.000000e+00, !dbg !49
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #5, !dbg !50
  %114 = fmul float %113, %108, !dbg !51
  %115 = select i1 %15, float %107, float 0.000000e+00, !dbg !52
  %116 = bitcast float %115 to i32, !dbg !53
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !53
  %118 = bitcast i32 %117 to float, !dbg !53
  %119 = fadd float %115, %118, !dbg !55
  %120 = bitcast float %119 to i32, !dbg !53
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !53
  %122 = bitcast i32 %121 to float, !dbg !53
  %123 = fadd float %119, %122, !dbg !55
  %124 = bitcast float %123 to i32, !dbg !53
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !53
  %126 = bitcast i32 %125 to float, !dbg !53
  %127 = fadd float %123, %126, !dbg !55
  %128 = bitcast float %127 to i32, !dbg !53
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !53
  %130 = bitcast i32 %129 to float, !dbg !53
  %131 = fadd float %127, %130, !dbg !55
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.600000e+01) #5, !dbg !57
  %133 = and i32 %16, 48, !dbg !58
  %134 = icmp eq i32 %133, 0, !dbg !58
  %135 = bitcast float %90 to i32, !dbg !58
  %136 = and i1 %134, %15, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %22, i1 %136) #5, !dbg !58
  %137 = bitcast float %80 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %29, i1 %136) #5, !dbg !59
  %138 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !60
  %139 = bitcast float %114 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %138, i1 %136) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !63
  %urem = and i32 %16, 63, !dbg !64
  %141 = icmp eq i32 %urem, 0, !dbg !64
  %142 = bitcast float %132 to i32, !dbg !64
  %143 = and i1 %141, %15, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %140, i1 %143) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczqxph4h7gimzqubexhsxcmc2symispnzwydu7mssto22ylq4mj.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_2", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 19, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 19, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 55, column: 23, scope: !7)
!48 = !DILocation(line: 47, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 47, column: 20, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 47, column: 16, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 35, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 59, column: 26, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 47, scope: !7)
!59 = !DILocation(line: 63, column: 47, scope: !7)
!60 = !DILocation(line: 64, column: 25, scope: !7)
!61 = !DILocation(line: 64, column: 45, scope: !7)
!62 = !DILocation(line: 65, column: 4, scope: !7)
!63 = !DILocation(line: 66, column: 28, scope: !7)
!64 = !DILocation(line: 66, column: 40, scope: !7)
!65 = !DILocation(line: 66, column: 4, scope: !7)
