; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %9, 3, !dbg !17
  %21 = and i32 %20, 24, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = lshr i32 %9, 3, !dbg !17
  %24 = and i32 %23, 15, !dbg !17
  %25 = or disjoint i32 %24, 16, !dbg !17
  %26 = or disjoint i32 %19, %21, !dbg !18
  %27 = or disjoint i32 %19, %22, !dbg !18
  %28 = or disjoint i32 %19, %24, !dbg !18
  %29 = or disjoint i32 %19, %25, !dbg !18
  %30 = srem i32 %14, 64, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 64, !dbg !20
  %32 = mul i32 %31, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %32, !dbg !19
  %33 = shl i32 %14, 12, !dbg !21
  %34 = add i32 %26, %33, !dbg !22
  %35 = add i32 %27, %33, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %16) #2, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %16) #2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = sext i32 %30 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #2, !dbg !26
  %60 = shl i32 %28, 6, !dbg !27
  %61 = shl i32 %29, 6, !dbg !27
  %62 = shl i32 %31, 18, !dbg !28
  %63 = add i32 %62, %.decomposed, !dbg !29
  %64 = add i32 %63, %60, !dbg !30
  %65 = add i32 %63, %61, !dbg !30
  %66 = sext i32 %64 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !31
  %68 = sext i32 %65 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !31
  %70 = shl i32 %9, 8, !dbg !32
  %71 = and i32 %70, 768, !dbg !32
  %72 = or disjoint i32 %71, %11, !dbg !32
  %73 = and i32 %12, 508, !dbg !32
  %74 = lshr exact i32 %71, 1, !dbg !32
  %75 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %74, !dbg !32
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %72, !dbg !32
  %77 = or disjoint i32 %72, 32, !dbg !32
  %78 = lshr i32 %77, 3, !dbg !32
  %79 = and i32 %78, 100, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !32
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77, !dbg !32
  %82 = or disjoint i32 %72, 64, !dbg !32
  %83 = lshr i32 %82, 3, !dbg !32
  %84 = and i32 %83, 104, !dbg !32
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %82, !dbg !32
  %87 = or disjoint i32 %72, 96, !dbg !32
  %88 = lshr i32 %87, 3, !dbg !32
  %89 = and i32 %88, 108, !dbg !32
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !32
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %87, !dbg !32
  %92 = or disjoint i32 %72, 128, !dbg !32
  %93 = lshr i32 %92, 3, !dbg !32
  %94 = and i32 %93, 112, !dbg !32
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !32
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !32
  %97 = or disjoint i32 %72, 160, !dbg !32
  %98 = lshr i32 %97, 3, !dbg !32
  %99 = and i32 %98, 116, !dbg !32
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !32
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %97, !dbg !32
  %102 = or disjoint i32 %72, 192, !dbg !32
  %103 = lshr i32 %102, 3, !dbg !32
  %104 = and i32 %103, 120, !dbg !32
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !32
  %107 = or disjoint i32 %72, 224, !dbg !32
  %108 = lshr i32 %107, 3, !dbg !32
  %109 = and i32 %108, 124, !dbg !32
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !32
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %107, !dbg !32
  %112 = lshr i32 %12, 3, !dbg !32
  %113 = and i32 %112, 60, !dbg !32
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %73, !dbg !32
  %116 = or disjoint i32 %73, 512, !dbg !32
  %117 = lshr i32 %116, 3, !dbg !32
  %118 = and i32 %117, 124, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %116, !dbg !32
  %121 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 4, !dbg !32
  %122 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 8, !dbg !32
  %123 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 12, !dbg !32
  %124 = getelementptr i1, ptr addrspace(1) %3, i64 %36, !dbg !33
  %125 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !24
  %126 = insertelement <4 x i32> %125, i32 %42, i64 1, !dbg !24
  %127 = insertelement <4 x i32> %126, i32 %43, i64 2, !dbg !24
  %128 = insertelement <4 x i32> %127, i32 %44, i64 3, !dbg !24
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !24
  %130 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !34
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !34
  %132 = shufflevector <4 x float> %131, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %133 = fadd <4 x float> %132, %129, !dbg !34
  %134 = fcmp ogt <4 x float> %133, zeroinitializer, !dbg !35
  %135 = fmul <4 x float> %133, splat (float 0x3F847AE140000000), !dbg !36
  %136 = select <4 x i1> %134, <4 x float> %133, <4 x float> %135, !dbg !37
  %137 = fcmp ogt <4 x float> %136, zeroinitializer, !dbg !38
  %138 = extractelement <4 x float> %136, i64 0, !dbg !32
  %139 = bitcast float %138 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %139, i1 true) #2, !dbg !32
  %140 = extractelement <4 x float> %136, i64 1, !dbg !32
  %141 = bitcast float %140 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %141, i1 true) #2, !dbg !32
  %142 = extractelement <4 x float> %136, i64 2, !dbg !32
  %143 = bitcast float %142 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %143, i1 true) #2, !dbg !32
  %144 = extractelement <4 x float> %136, i64 3, !dbg !32
  %145 = bitcast float %144 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %145, i1 true) #2, !dbg !32
  %146 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !24
  %147 = insertelement <4 x i32> %146, i32 %47, i64 1, !dbg !24
  %148 = insertelement <4 x i32> %147, i32 %48, i64 2, !dbg !24
  %149 = insertelement <4 x i32> %148, i32 %49, i64 3, !dbg !24
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !24
  %151 = fadd <4 x float> %132, %150, !dbg !34
  %152 = fcmp ogt <4 x float> %151, zeroinitializer, !dbg !35
  %153 = fmul <4 x float> %151, splat (float 0x3F847AE140000000), !dbg !36
  %154 = select <4 x i1> %152, <4 x float> %151, <4 x float> %153, !dbg !37
  %155 = fcmp ogt <4 x float> %154, zeroinitializer, !dbg !38
  %156 = extractelement <4 x float> %154, i64 0, !dbg !32
  %157 = bitcast float %156 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %157, i1 true) #2, !dbg !32
  %158 = extractelement <4 x float> %154, i64 1, !dbg !32
  %159 = bitcast float %158 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %159, i1 true) #2, !dbg !32
  %160 = extractelement <4 x float> %154, i64 2, !dbg !32
  %161 = bitcast float %160 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %161, i1 true) #2, !dbg !32
  %162 = extractelement <4 x float> %154, i64 3, !dbg !32
  %163 = bitcast float %162 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %163, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %164 = load <4 x i32>, ptr addrspace(3) %120, align 16, !dbg !32
  %.extract = load i32, ptr addrspace(3) %115, align 16, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %121, align 4, !dbg !32
  %.extract11 = load i32, ptr addrspace(3) %122, align 8, !dbg !32
  %.extract12 = load i32, ptr addrspace(3) %123, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %67, i1 %17) #2, !dbg !32
  %.extract13 = extractelement <4 x i32> %164, i64 0, !dbg !32
  %.extract14 = extractelement <4 x i32> %164, i64 1, !dbg !32
  %.extract15 = extractelement <4 x i32> %164, i64 2, !dbg !32
  %.extract16 = extractelement <4 x i32> %164, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %69, i1 %17) #2, !dbg !32
  %165 = zext <4 x i1> %137 to <4 x i8>, !dbg !39
  %166 = bitcast <4 x i8> %165 to i32, !dbg !39
  %167 = zext <4 x i1> %155 to <4 x i8>, !dbg !39
  %168 = bitcast <4 x i8> %167 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %168, ptr addrspace(1) %124, i1 %16) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukmu6yksl5tbcnjmgavcj44pvez3mpvrdu4bybl5ue7ui4w4f36.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_0", linkageName: "triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 41, column: 33, scope: !7)
!28 = !DILocation(line: 41, column: 45, scope: !7)
!29 = !DILocation(line: 41, column: 30, scope: !7)
!30 = !DILocation(line: 41, column: 38, scope: !7)
!31 = !DILocation(line: 41, column: 25, scope: !7)
!32 = !DILocation(line: 41, column: 56, scope: !7)
!33 = !DILocation(line: 42, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 32, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 46, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
