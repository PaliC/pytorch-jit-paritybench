; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 512, !dbg !13
  %12 = or disjoint i32 %9, 513, !dbg !13
  %13 = sdiv i32 %9, 64, !dbg !14
  %14 = sdiv i32 %11, 64, !dbg !14
  %15 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %16 = insertelement <2 x i32> %15, i32 %13, i64 1, !dbg !15
  %17 = srem <2 x i32> %16, splat (i32 64), !dbg !15
  %18 = srem i32 %10, 64, !dbg !15
  %19 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %20 = insertelement <2 x i32> %19, i32 %14, i64 1, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 64), !dbg !15
  %22 = extractelement <2 x i32> %17, i64 1, !dbg !16
  %23 = icmp sgt i32 %22, 0, !dbg !17
  %24 = extractelement <2 x i32> %21, i64 1, !dbg !18
  %25 = icmp sgt i32 %24, 0, !dbg !17
  %26 = extractelement <2 x i32> %17, i64 0, !dbg !19
  %27 = icmp sgt i32 %26, 0, !dbg !20
  %28 = icmp sgt i32 %18, 0, !dbg !20
  %29 = extractelement <2 x i32> %21, i64 0, !dbg !18
  %30 = icmp sgt i32 %29, 0, !dbg !20
  %31 = and i1 %27, %23, !dbg !21
  %32 = and i1 %28, %23, !dbg !21
  %33 = and i1 %27, %25, !dbg !21
  %34 = and i1 %30, %25, !dbg !21
  %35 = add i32 %9, -65, !dbg !22
  %36 = add i32 %9, -64, !dbg !22
  %37 = add i32 %9, -63, !dbg !22
  %38 = add i32 %9, -62, !dbg !22
  %39 = sext i32 %35 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %36 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %37 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %38 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %11 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = getelementptr i8, ptr addrspace(1) %48, i64 -260, !dbg !23
  %50 = sext i32 %12 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 -260, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %31, i32 0, i1 %31) #1, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %32, i32 0, i1 %32) #1, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = icmp sgt i32 %26, -1, !dbg !25
  %58 = and i1 %57, %23, !dbg !26
  %59 = and i1 %57, %25, !dbg !26
  %60 = getelementptr i8, ptr addrspace(1) %48, i64 -256, !dbg !27
  %61 = icmp ult i32 %26, 64, !dbg !28
  %62 = add nuw nsw i32 %18, 1, !dbg !28
  %63 = icmp ult i32 %18, 63, !dbg !28
  %64 = add nuw nsw i32 %29, 1, !dbg !28
  %65 = icmp ult i32 %29, 63, !dbg !28
  %66 = and i1 %61, %23, !dbg !29
  %67 = and i1 %63, %23, !dbg !29
  %68 = and i1 %61, %25, !dbg !29
  %69 = and i1 %65, %25, !dbg !29
  %70 = add i32 %9, -61, !dbg !30
  %71 = add i32 %9, -60, !dbg !30
  %72 = sext i32 %70 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !31
  %74 = sext i32 %71 to i64, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !31
  %76 = getelementptr i8, ptr addrspace(1) %48, i64 -252, !dbg !31
  %77 = getelementptr i8, ptr addrspace(1) %51, i64 -252, !dbg !31
  %78 = icmp sgt i32 %22, -1, !dbg !32
  %79 = icmp sgt i32 %24, -1, !dbg !32
  %80 = and i1 %27, %78, !dbg !33
  %81 = and i1 %28, %78, !dbg !33
  %82 = and i1 %27, %79, !dbg !33
  %83 = and i1 %30, %79, !dbg !33
  %84 = add i32 %9, -1, !dbg !34
  %85 = sext i32 %84 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !35
  %87 = sext i32 %10 to i64, !dbg !35
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !35
  %89 = getelementptr i8, ptr addrspace(1) %88, i64 -4, !dbg !35
  %90 = getelementptr i8, ptr addrspace(1) %48, i64 -4, !dbg !35
  %91 = getelementptr i8, ptr addrspace(1) %51, i64 -4, !dbg !35
  %92 = or i32 %22, %26, !dbg !19
  %93 = icmp sgt i32 %92, -1, !dbg !19
  %94 = or i32 %24, %26, !dbg !19
  %95 = icmp sgt i32 %94, -1, !dbg !19
  %96 = sext i32 %9 to i64, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !36
  %98 = and i1 %61, %78, !dbg !37
  %99 = and i1 %63, %78, !dbg !37
  %100 = and i1 %61, %79, !dbg !37
  %101 = and i1 %65, %79, !dbg !37
  %102 = add i32 %9, 516, !dbg !38
  %103 = getelementptr i8, ptr addrspace(1) %88, i64 4, !dbg !39
  %104 = getelementptr i8, ptr addrspace(1) %51, i64 4, !dbg !39
  %105 = sext i32 %102 to i64, !dbg !39
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !39
  %107 = add nsw i32 %22, 1, !dbg !40
  %108 = icmp ult i32 %107, 64, !dbg !40
  %109 = add nsw i32 %24, 1, !dbg !40
  %110 = icmp ult i32 %109, 64, !dbg !40
  %111 = and i1 %27, %108, !dbg !41
  %112 = and i1 %28, %108, !dbg !41
  %113 = and i1 %27, %110, !dbg !41
  %114 = and i1 %30, %110, !dbg !41
  %115 = add i32 %9, 575, !dbg !42
  %116 = add i32 %9, 576, !dbg !42
  %117 = add i32 %9, 577, !dbg !42
  %118 = add i32 %9, 578, !dbg !42
  %119 = getelementptr i8, ptr addrspace(1) %97, i64 252, !dbg !43
  %120 = getelementptr i8, ptr addrspace(1) %88, i64 252, !dbg !43
  %121 = sext i32 %115 to i64, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !43
  %123 = sext i32 %116 to i64, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !43
  %125 = sext i32 %117 to i64, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !43
  %127 = sext i32 %118 to i64, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !43
  %129 = and i1 %57, %108, !dbg !44
  %130 = and i1 %57, %110, !dbg !44
  %131 = getelementptr i8, ptr addrspace(1) %97, i64 256, !dbg !45
  %132 = shufflevector <2 x i32> %17, <2 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 0>, !dbg !46
  %133 = add i32 %9, 579, !dbg !47
  %134 = add i32 %9, 580, !dbg !47
  %135 = getelementptr i8, ptr addrspace(1) %97, i64 260, !dbg !48
  %136 = getelementptr i8, ptr addrspace(1) %88, i64 260, !dbg !48
  %137 = sext i32 %133 to i64, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !48
  %139 = sext i32 %134 to i64, !dbg !48
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !48
  %141 = or disjoint i32 %26, 2, !dbg !49
  %142 = or disjoint i32 %18, 2, !dbg !49
  %143 = or disjoint i32 %29, 2, !dbg !49
  %144 = icmp sgt i32 %26, 62, !dbg !50
  %145 = icmp sgt i32 %18, 62, !dbg !50
  %146 = icmp sgt i32 %29, 62, !dbg !50
  %147 = select i1 %144, i32 65, i32 0, !dbg !51
  %148 = select i1 %145, i32 65, i32 0, !dbg !51
  %149 = select i1 %146, i32 65, i32 0, !dbg !51
  %150 = icmp slt i32 %26, 63, !dbg !52
  %151 = icmp slt i32 %18, 63, !dbg !52
  %152 = icmp slt i32 %29, 63, !dbg !52
  %153 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !13
  %154 = shufflevector <4 x i32> %153, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %155 = or disjoint <4 x i32> %154, <i32 515, i32 514, i32 3, i32 2>, !dbg !13
  %156 = srem <4 x i32> %155, splat (i32 64), !dbg !15
  %157 = extractelement <4 x i32> %156, i64 3, !dbg !16
  %158 = icmp sgt i32 %157, 0, !dbg !20
  %159 = extractelement <4 x i32> %156, i64 2, !dbg !16
  %160 = icmp sgt i32 %159, 0, !dbg !20
  %161 = extractelement <4 x i32> %156, i64 1, !dbg !18
  %162 = icmp sgt i32 %161, 0, !dbg !20
  %163 = extractelement <4 x i32> %156, i64 0, !dbg !18
  %164 = icmp sgt i32 %163, 0, !dbg !20
  %165 = and i1 %158, %23, !dbg !21
  %166 = and i1 %160, %23, !dbg !21
  %167 = and i1 %162, %25, !dbg !21
  %168 = and i1 %164, %25, !dbg !21
  %169 = extractelement <4 x i32> %155, i64 1, !dbg !23
  %170 = sext i32 %169 to i64, !dbg !23
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !23
  %172 = getelementptr i8, ptr addrspace(1) %171, i64 -260, !dbg !23
  %173 = extractelement <4 x i32> %155, i64 0, !dbg !23
  %174 = sext i32 %173 to i64, !dbg !23
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !23
  %176 = getelementptr i8, ptr addrspace(1) %175, i64 -260, !dbg !23
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %165, i32 0, i1 %165) #1, !dbg !24
  %178 = bitcast i32 %177 to float, !dbg !24
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %166, i32 0, i1 %166) #1, !dbg !24
  %180 = bitcast i32 %179 to float, !dbg !24
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %33, i32 0, i1 %33) #1, !dbg !24
  %182 = bitcast i32 %181 to float, !dbg !24
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %34, i32 0, i1 %34) #1, !dbg !24
  %184 = bitcast i32 %183 to float, !dbg !24
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %167, i32 0, i1 %167) #1, !dbg !24
  %186 = bitcast i32 %185 to float, !dbg !24
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %168, i32 0, i1 %168) #1, !dbg !24
  %188 = bitcast i32 %187 to float, !dbg !24
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !53
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !53
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !53
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !53
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !53
  %194 = bitcast i32 %190 to float, !dbg !53
  %195 = bitcast i32 %191 to float, !dbg !53
  %196 = bitcast i32 %192 to float, !dbg !53
  %197 = bitcast i32 %193 to float, !dbg !53
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !53
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !53
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !53
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !53
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !53
  %203 = bitcast i32 %199 to float, !dbg !53
  %204 = bitcast i32 %200 to float, !dbg !53
  %205 = bitcast i32 %201 to float, !dbg !53
  %206 = bitcast i32 %202 to float, !dbg !53
  %207 = fadd float %54, %194, !dbg !54
  %208 = fadd float %56, %195, !dbg !54
  %209 = fadd float %178, %196, !dbg !54
  %210 = fadd float %180, %197, !dbg !54
  %211 = fadd float %182, %203, !dbg !54
  %212 = fadd float %184, %204, !dbg !54
  %213 = fadd float %186, %205, !dbg !54
  %214 = fadd float %188, %206, !dbg !54
  %215 = icmp ult i32 %157, 64, !dbg !28
  %216 = add nsw i32 %159, 1, !dbg !28
  %217 = icmp ult i32 %216, 64, !dbg !28
  %218 = icmp ult i32 %161, 64, !dbg !28
  %219 = add nsw i32 %163, 1, !dbg !28
  %220 = icmp ult i32 %219, 64, !dbg !28
  %221 = and i1 %215, %23, !dbg !29
  %222 = and i1 %217, %23, !dbg !29
  %223 = and i1 %218, %25, !dbg !29
  %224 = and i1 %25, %220, !dbg !29
  %225 = getelementptr i8, ptr addrspace(1) %171, i64 -252, !dbg !31
  %226 = getelementptr i8, ptr addrspace(1) %175, i64 -252, !dbg !31
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %66, i32 0, i1 %66) #1, !dbg !55
  %228 = bitcast i32 %227 to float, !dbg !55
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %67, i32 0, i1 %67) #1, !dbg !55
  %230 = bitcast i32 %229 to float, !dbg !55
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %221, i32 0, i1 %221) #1, !dbg !55
  %232 = bitcast i32 %231 to float, !dbg !55
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %222, i32 0, i1 %222) #1, !dbg !55
  %234 = bitcast i32 %233 to float, !dbg !55
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %236 = bitcast i32 %235 to float, !dbg !55
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %69, i32 0, i1 %69) #1, !dbg !55
  %238 = bitcast i32 %237 to float, !dbg !55
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %223, i32 0, i1 %223) #1, !dbg !55
  %240 = bitcast i32 %239 to float, !dbg !55
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %224, i32 0, i1 %224) #1, !dbg !55
  %242 = bitcast i32 %241 to float, !dbg !55
  %243 = fadd float %207, %228, !dbg !56
  %244 = fadd float %208, %230, !dbg !56
  %245 = fadd float %209, %232, !dbg !56
  %246 = fadd float %210, %234, !dbg !56
  %247 = fadd float %211, %236, !dbg !56
  %248 = fadd float %212, %238, !dbg !56
  %249 = fadd float %213, %240, !dbg !56
  %250 = fadd float %214, %242, !dbg !56
  %251 = and i1 %158, %78, !dbg !33
  %252 = and i1 %160, %78, !dbg !33
  %253 = and i1 %162, %79, !dbg !33
  %254 = and i1 %164, %79, !dbg !33
  %255 = extractelement <4 x i32> %155, i64 3, !dbg !35
  %256 = sext i32 %255 to i64, !dbg !35
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !35
  %258 = getelementptr i8, ptr addrspace(1) %257, i64 -4, !dbg !35
  %259 = extractelement <4 x i32> %155, i64 2, !dbg !35
  %260 = sext i32 %259 to i64, !dbg !35
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !35
  %262 = getelementptr i8, ptr addrspace(1) %261, i64 -4, !dbg !35
  %263 = getelementptr i8, ptr addrspace(1) %171, i64 -4, !dbg !35
  %264 = getelementptr i8, ptr addrspace(1) %175, i64 -4, !dbg !35
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %80, i32 0, i1 %80) #1, !dbg !57
  %266 = bitcast i32 %265 to float, !dbg !57
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %81, i32 0, i1 %81) #1, !dbg !57
  %268 = bitcast i32 %267 to float, !dbg !57
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %251, i32 0, i1 %251) #1, !dbg !57
  %270 = bitcast i32 %269 to float, !dbg !57
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %252, i32 0, i1 %252) #1, !dbg !57
  %272 = bitcast i32 %271 to float, !dbg !57
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %82, i32 0, i1 %82) #1, !dbg !57
  %274 = bitcast i32 %273 to float, !dbg !57
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %83, i32 0, i1 %83) #1, !dbg !57
  %276 = bitcast i32 %275 to float, !dbg !57
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %253, i32 0, i1 %253) #1, !dbg !57
  %278 = bitcast i32 %277 to float, !dbg !57
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %254, i32 0, i1 %254) #1, !dbg !57
  %280 = bitcast i32 %279 to float, !dbg !57
  %281 = fadd float %243, %266, !dbg !58
  %282 = fadd float %244, %268, !dbg !58
  %283 = fadd float %245, %270, !dbg !58
  %284 = fadd float %246, %272, !dbg !58
  %285 = fadd float %247, %274, !dbg !58
  %286 = fadd float %248, %276, !dbg !58
  %287 = fadd float %249, %278, !dbg !58
  %288 = fadd float %250, %280, !dbg !58
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !59
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !59
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !59
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !59
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !59
  %294 = bitcast i32 %290 to float, !dbg !59
  %295 = bitcast i32 %291 to float, !dbg !59
  %296 = bitcast i32 %292 to float, !dbg !59
  %297 = bitcast i32 %293 to float, !dbg !59
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !59
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !59
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !59
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !59
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !59
  %303 = bitcast i32 %299 to float, !dbg !59
  %304 = bitcast i32 %300 to float, !dbg !59
  %305 = bitcast i32 %301 to float, !dbg !59
  %306 = bitcast i32 %302 to float, !dbg !59
  %307 = fadd float %281, %294, !dbg !60
  %308 = fadd float %282, %295, !dbg !60
  %309 = fadd float %283, %296, !dbg !60
  %310 = fadd float %284, %297, !dbg !60
  %311 = fadd float %285, %303, !dbg !60
  %312 = fadd float %286, %304, !dbg !60
  %313 = fadd float %287, %305, !dbg !60
  %314 = fadd float %288, %306, !dbg !60
  %315 = and i1 %215, %78, !dbg !37
  %316 = and i1 %217, %78, !dbg !37
  %317 = and i1 %218, %79, !dbg !37
  %318 = and i1 %79, %220, !dbg !37
  %319 = getelementptr i8, ptr addrspace(1) %261, i64 4, !dbg !39
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %98, i32 0, i1 %98) #1, !dbg !61
  %321 = bitcast i32 %320 to float, !dbg !61
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %99, i32 0, i1 %99) #1, !dbg !61
  %323 = bitcast i32 %322 to float, !dbg !61
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %315, i32 0, i1 %315) #1, !dbg !61
  %325 = bitcast i32 %324 to float, !dbg !61
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %316, i32 0, i1 %316) #1, !dbg !61
  %327 = bitcast i32 %326 to float, !dbg !61
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %100, i32 0, i1 %100) #1, !dbg !61
  %329 = bitcast i32 %328 to float, !dbg !61
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %101, i32 0, i1 %101) #1, !dbg !61
  %331 = bitcast i32 %330 to float, !dbg !61
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %317, i32 0, i1 %317) #1, !dbg !61
  %333 = bitcast i32 %332 to float, !dbg !61
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %318, i32 0, i1 %318) #1, !dbg !61
  %335 = bitcast i32 %334 to float, !dbg !61
  %336 = fadd float %307, %321, !dbg !62
  %337 = fadd float %308, %323, !dbg !62
  %338 = fadd float %309, %325, !dbg !62
  %339 = fadd float %310, %327, !dbg !62
  %340 = fadd float %311, %329, !dbg !62
  %341 = fadd float %312, %331, !dbg !62
  %342 = fadd float %313, %333, !dbg !62
  %343 = fadd float %314, %335, !dbg !62
  %344 = and i1 %158, %108, !dbg !41
  %345 = and i1 %160, %108, !dbg !41
  %346 = and i1 %162, %110, !dbg !41
  %347 = and i1 %164, %110, !dbg !41
  %348 = getelementptr i8, ptr addrspace(1) %257, i64 252, !dbg !43
  %349 = getelementptr i8, ptr addrspace(1) %261, i64 252, !dbg !43
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %111, i32 0, i1 %111) #1, !dbg !63
  %351 = bitcast i32 %350 to float, !dbg !63
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %112, i32 0, i1 %112) #1, !dbg !63
  %353 = bitcast i32 %352 to float, !dbg !63
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %348, i1 %344, i32 0, i1 %344) #1, !dbg !63
  %355 = bitcast i32 %354 to float, !dbg !63
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %345, i32 0, i1 %345) #1, !dbg !63
  %357 = bitcast i32 %356 to float, !dbg !63
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %113, i32 0, i1 %113) #1, !dbg !63
  %359 = bitcast i32 %358 to float, !dbg !63
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %114, i32 0, i1 %114) #1, !dbg !63
  %361 = bitcast i32 %360 to float, !dbg !63
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %346, i32 0, i1 %346) #1, !dbg !63
  %363 = bitcast i32 %362 to float, !dbg !63
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %347, i32 0, i1 %347) #1, !dbg !63
  %365 = bitcast i32 %364 to float, !dbg !63
  %366 = fadd float %336, %351, !dbg !64
  %367 = fadd float %337, %353, !dbg !64
  %368 = fadd float %338, %355, !dbg !64
  %369 = fadd float %339, %357, !dbg !64
  %370 = fadd float %340, %359, !dbg !64
  %371 = fadd float %341, %361, !dbg !64
  %372 = fadd float %342, %363, !dbg !64
  %373 = fadd float %343, %365, !dbg !64
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !65
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !65
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !65
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !65
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !65
  %379 = bitcast i32 %375 to float, !dbg !65
  %380 = bitcast i32 %376 to float, !dbg !65
  %381 = bitcast i32 %377 to float, !dbg !65
  %382 = bitcast i32 %378 to float, !dbg !65
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #1, !dbg !65
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !65
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !65
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !65
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !65
  %388 = bitcast i32 %384 to float, !dbg !65
  %389 = bitcast i32 %385 to float, !dbg !65
  %390 = bitcast i32 %386 to float, !dbg !65
  %391 = bitcast i32 %387 to float, !dbg !65
  %392 = fadd float %366, %379, !dbg !66
  %393 = fadd float %367, %380, !dbg !66
  %394 = fadd float %368, %381, !dbg !66
  %395 = fadd float %369, %382, !dbg !66
  %396 = fadd float %370, %388, !dbg !66
  %397 = fadd float %371, %389, !dbg !66
  %398 = fadd float %372, %390, !dbg !66
  %399 = fadd float %373, %391, !dbg !66
  %400 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !46
  %401 = insertelement <8 x i32> %400, i32 %109, i64 1, !dbg !46
  %402 = insertelement <8 x i32> %401, i32 %64, i64 2, !dbg !46
  %403 = insertelement <8 x i32> %402, i32 %216, i64 4, !dbg !46
  %404 = insertelement <8 x i32> %403, i32 %107, i64 5, !dbg !46
  %405 = insertelement <8 x i32> %404, i32 %62, i64 6, !dbg !46
  %406 = shufflevector <8 x i32> %405, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 1, i32 4, i32 5, i32 6, i32 5>, !dbg !46
  %407 = shufflevector <8 x i32> %132, <8 x i32> %404, <8 x i32> <i32 9, i32 poison, i32 9, i32 3, i32 13, i32 poison, i32 13, i32 7>, !dbg !46
  %408 = shufflevector <4 x i32> %156, <4 x i32> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %409 = shufflevector <8 x i32> %407, <8 x i32> %408, <8 x i32> <i32 0, i32 9, i32 2, i32 3, i32 4, i32 11, i32 6, i32 7>, !dbg !46
  %410 = or <8 x i32> %406, %409, !dbg !46
  %411 = icmp ult <8 x i32> %410, splat (i32 64), !dbg !46
  %412 = getelementptr i8, ptr addrspace(1) %257, i64 260, !dbg !48
  %413 = getelementptr i8, ptr addrspace(1) %261, i64 260, !dbg !48
  %414 = extractelement <8 x i1> %411, i64 7, !dbg !67
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %414, i32 0, i1 %414) #1, !dbg !67
  %416 = bitcast i32 %415 to float, !dbg !67
  %417 = extractelement <8 x i1> %411, i64 6, !dbg !67
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %417, i32 0, i1 %417) #1, !dbg !67
  %419 = bitcast i32 %418 to float, !dbg !67
  %420 = extractelement <8 x i1> %411, i64 5, !dbg !67
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %412, i1 %420, i32 0, i1 %420) #1, !dbg !67
  %422 = bitcast i32 %421 to float, !dbg !67
  %423 = extractelement <8 x i1> %411, i64 4, !dbg !67
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %423, i32 0, i1 %423) #1, !dbg !67
  %425 = bitcast i32 %424 to float, !dbg !67
  %426 = extractelement <8 x i1> %411, i64 3, !dbg !67
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %426, i32 0, i1 %426) #1, !dbg !67
  %428 = bitcast i32 %427 to float, !dbg !67
  %429 = extractelement <8 x i1> %411, i64 2, !dbg !67
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %429, i32 0, i1 %429) #1, !dbg !67
  %431 = bitcast i32 %430 to float, !dbg !67
  %432 = extractelement <8 x i1> %411, i64 1, !dbg !67
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %432, i32 0, i1 %432) #1, !dbg !67
  %434 = bitcast i32 %433 to float, !dbg !67
  %435 = extractelement <8 x i1> %411, i64 0, !dbg !67
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %435, i32 0, i1 %435) #1, !dbg !67
  %437 = bitcast i32 %436 to float, !dbg !67
  %438 = fadd float %392, %416, !dbg !68
  %439 = fadd float %393, %419, !dbg !68
  %440 = fadd float %394, %422, !dbg !68
  %441 = fadd float %395, %425, !dbg !68
  %442 = fadd float %396, %428, !dbg !68
  %443 = fadd float %397, %431, !dbg !68
  %444 = fadd float %398, %434, !dbg !68
  %445 = fadd float %399, %437, !dbg !68
  %446 = add nsw i32 %157, 2, !dbg !49
  %447 = add nsw i32 %159, 2, !dbg !49
  %448 = add nsw i32 %161, 2, !dbg !49
  %449 = add nsw i32 %163, 2, !dbg !49
  %450 = icmp sgt i32 %157, 62, !dbg !50
  %451 = icmp sgt i32 %159, 62, !dbg !50
  %452 = icmp sgt i32 %161, 62, !dbg !50
  %453 = icmp sgt i32 %163, 62, !dbg !50
  %454 = select i1 %450, i32 65, i32 0, !dbg !51
  %455 = select i1 %451, i32 65, i32 0, !dbg !51
  %456 = select i1 %452, i32 65, i32 0, !dbg !51
  %457 = select i1 %453, i32 65, i32 0, !dbg !51
  %458 = icmp slt <4 x i32> %156, splat (i32 63), !dbg !52
  %459 = select i1 %150, i32 %141, i32 0, !dbg !69
  %460 = select i1 %151, i32 %142, i32 0, !dbg !69
  %461 = extractelement <4 x i1> %458, i64 3, !dbg !69
  %462 = select i1 %461, i32 %446, i32 0, !dbg !69
  %463 = extractelement <4 x i1> %458, i64 2, !dbg !69
  %464 = select i1 %463, i32 %447, i32 0, !dbg !69
  %465 = select i1 %152, i32 %143, i32 0, !dbg !69
  %466 = extractelement <4 x i1> %458, i64 1, !dbg !69
  %467 = select i1 %466, i32 %448, i32 0, !dbg !69
  %468 = extractelement <4 x i1> %458, i64 0, !dbg !69
  %469 = select i1 %468, i32 %449, i32 0, !dbg !69
  %470 = add nsw i32 %147, %459, !dbg !70
  %471 = add nsw i32 %148, %460, !dbg !70
  %472 = add nsw i32 %454, %462, !dbg !70
  %473 = add nsw i32 %455, %464, !dbg !70
  %474 = add nsw i32 %149, %465, !dbg !70
  %475 = add nsw i32 %456, %467, !dbg !70
  %476 = add nsw i32 %457, %469, !dbg !70
  %477 = add nsw i32 %22, 2, !dbg !71
  %478 = add nsw i32 %24, 2, !dbg !71
  %479 = icmp sgt i32 %22, 62, !dbg !72
  %480 = icmp sgt i32 %24, 62, !dbg !72
  %481 = select i1 %479, i32 65, i32 0, !dbg !73
  %482 = select i1 %480, i32 65, i32 0, !dbg !73
  %483 = icmp slt i32 %22, 63, !dbg !74
  %484 = icmp slt i32 %24, 63, !dbg !74
  %485 = select i1 %483, i32 %477, i32 0, !dbg !75
  %486 = select i1 %484, i32 %478, i32 0, !dbg !75
  %487 = add nsw i32 %481, %485, !dbg !76
  %488 = add nsw i32 %482, %486, !dbg !76
  %reass.add = sub nsw i32 %487, %22
  %reass.mul = mul nsw i32 %reass.add, %470
  %reass.add45 = sub nsw i32 %22, %487
  %reass.mul46 = mul nsw i32 %reass.add45, %26
  %489 = add nsw i32 %26, %22, !dbg !18
  %reass.sub = sub nsw i32 %470, %489, !dbg !16
  %490 = add nsw i32 %reass.sub, 1, !dbg !16
  %491 = add nsw i32 %490, %487, !dbg !77
  %492 = add i32 %491, %reass.mul, !dbg !78
  %493 = add i32 %492, %reass.mul46, !dbg !79
  %reass.mul32 = mul nsw i32 %reass.add, %471
  %reass.mul48 = mul nsw i32 %reass.add45, %18
  %494 = add nsw i32 %471, 1, !dbg !16
  %495 = add nsw i32 %18, %22, !dbg !16
  %496 = sub nsw i32 %494, %495, !dbg !16
  %497 = add nsw i32 %496, %487, !dbg !77
  %498 = add i32 %497, %reass.mul32, !dbg !78
  %499 = add i32 %498, %reass.mul48, !dbg !79
  %reass.mul34 = mul nsw i32 %reass.add, %472
  %reass.mul50 = mul nsw i32 %reass.add45, %157
  %500 = add nsw i32 %472, 1, !dbg !16
  %501 = add nsw i32 %157, %22, !dbg !16
  %502 = sub nsw i32 %500, %501, !dbg !16
  %503 = add nsw i32 %502, %487, !dbg !77
  %504 = add nsw i32 %503, %reass.mul34, !dbg !78
  %505 = add nsw i32 %504, %reass.mul50, !dbg !79
  %reass.mul36 = mul nsw i32 %reass.add, %473
  %reass.mul52 = mul nsw i32 %reass.add45, %159
  %506 = add nsw i32 %473, 1, !dbg !16
  %507 = add nsw i32 %159, %22, !dbg !16
  %508 = sub nsw i32 %506, %507, !dbg !16
  %509 = add nsw i32 %508, %487, !dbg !77
  %510 = add nsw i32 %509, %reass.mul36, !dbg !78
  %511 = add nsw i32 %510, %reass.mul52, !dbg !79
  %reass.add37 = sub nsw i32 %488, %24
  %reass.mul38 = mul nsw i32 %reass.add37, %470
  %reass.add53 = sub nsw i32 %24, %488
  %reass.mul54 = mul nsw i32 %reass.add53, %26
  %512 = add nsw i32 %26, %24, !dbg !18
  %reass.sub64 = sub nsw i32 %470, %512, !dbg !16
  %513 = add nsw i32 %reass.sub64, 1, !dbg !16
  %514 = add nsw i32 %513, %488, !dbg !77
  %515 = add i32 %514, %reass.mul38, !dbg !78
  %516 = add i32 %515, %reass.mul54, !dbg !79
  %reass.mul40 = mul nsw i32 %reass.add37, %474
  %reass.mul56 = mul nsw i32 %reass.add53, %29
  %517 = add nsw i32 %29, %24, !dbg !18
  %reass.sub65 = sub nsw i32 %474, %517, !dbg !16
  %518 = add nsw i32 %reass.sub65, 1, !dbg !16
  %519 = add nsw i32 %518, %488, !dbg !77
  %520 = add i32 %519, %reass.mul40, !dbg !78
  %521 = add i32 %520, %reass.mul56, !dbg !79
  %reass.mul42 = mul nsw i32 %reass.add37, %475
  %reass.mul58 = mul nsw i32 %reass.add53, %161
  %522 = add nsw i32 %161, %24, !dbg !18
  %reass.sub66 = sub nsw i32 %475, %522, !dbg !16
  %523 = add nsw i32 %reass.sub66, 1, !dbg !16
  %524 = add nsw i32 %523, %488, !dbg !77
  %525 = add nsw i32 %524, %reass.mul42, !dbg !78
  %526 = add nsw i32 %525, %reass.mul58, !dbg !79
  %reass.mul44 = mul nsw i32 %reass.add37, %476
  %reass.mul60 = mul nsw i32 %reass.add53, %163
  %527 = add nsw i32 %163, %24, !dbg !18
  %reass.sub67 = sub nsw i32 %476, %527, !dbg !16
  %528 = add nsw i32 %reass.sub67, 1, !dbg !16
  %529 = add nsw i32 %528, %488, !dbg !77
  %530 = add nsw i32 %529, %reass.mul44, !dbg !78
  %531 = add nsw i32 %530, %reass.mul60, !dbg !79
  %532 = sitofp i32 %493 to float, !dbg !80
  %533 = sitofp i32 %499 to float, !dbg !80
  %534 = sitofp i32 %505 to float, !dbg !80
  %535 = sitofp i32 %511 to float, !dbg !80
  %536 = sitofp i32 %516 to float, !dbg !80
  %537 = sitofp i32 %521 to float, !dbg !80
  %538 = sitofp i32 %526 to float, !dbg !80
  %539 = sitofp i32 %531 to float, !dbg !80
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %532) #1, !dbg !80
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %533) #1, !dbg !80
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %534) #1, !dbg !80
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %441, float %535) #1, !dbg !80
  %544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float %536) #1, !dbg !80
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %443, float %537) #1, !dbg !80
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %538) #1, !dbg !80
  %547 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %539) #1, !dbg !80
  %548 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !81
  %549 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !81
  %550 = bitcast float %540 to i32, !dbg !82
  %551 = bitcast float %541 to i32, !dbg !82
  %552 = bitcast float %542 to i32, !dbg !82
  %553 = bitcast float %543 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %551, i32 %552, i32 %553, ptr addrspace(1) %548, i1 true) #1, !dbg !82
  %554 = bitcast float %544 to i32, !dbg !82
  %555 = bitcast float %545 to i32, !dbg !82
  %556 = bitcast float %546 to i32, !dbg !82
  %557 = bitcast float %547 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %554, i32 %555, i32 %556, i32 %557, ptr addrspace(1) %549, i1 true) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cekevgjzoewgnrdpdxqsqqk7h55cthhltn3mk4fsp6f7e6ygfx4c.py", directory: "inductor_cache/ek")
!4 = !{ptr @triton_poi_fused_avg_pool2d_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_2", linkageName: "triton_poi_fused_avg_pool2d_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 79, column: 169, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 79, column: 48, scope: !7)
!19 = !DILocation(line: 60, column: 20, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 31, scope: !7)
!24 = !DILocation(line: 38, column: 44, scope: !7)
!25 = !DILocation(line: 40, column: 21, scope: !7)
!26 = !DILocation(line: 43, column: 19, scope: !7)
!27 = !DILocation(line: 44, column: 31, scope: !7)
!28 = !DILocation(line: 49, column: 20, scope: !7)
!29 = !DILocation(line: 50, column: 19, scope: !7)
!30 = !DILocation(line: 51, column: 39, scope: !7)
!31 = !DILocation(line: 51, column: 31, scope: !7)
!32 = !DILocation(line: 54, column: 21, scope: !7)
!33 = !DILocation(line: 57, column: 20, scope: !7)
!34 = !DILocation(line: 58, column: 38, scope: !7)
!35 = !DILocation(line: 58, column: 31, scope: !7)
!36 = !DILocation(line: 61, column: 31, scope: !7)
!37 = !DILocation(line: 63, column: 20, scope: !7)
!38 = !DILocation(line: 64, column: 35, scope: !7)
!39 = !DILocation(line: 64, column: 31, scope: !7)
!40 = !DILocation(line: 69, column: 20, scope: !7)
!41 = !DILocation(line: 70, column: 20, scope: !7)
!42 = !DILocation(line: 71, column: 36, scope: !7)
!43 = !DILocation(line: 71, column: 31, scope: !7)
!44 = !DILocation(line: 73, column: 20, scope: !7)
!45 = !DILocation(line: 74, column: 31, scope: !7)
!46 = !DILocation(line: 76, column: 20, scope: !7)
!47 = !DILocation(line: 77, column: 36, scope: !7)
!48 = !DILocation(line: 77, column: 31, scope: !7)
!49 = !DILocation(line: 79, column: 70, scope: !7)
!50 = !DILocation(line: 79, column: 66, scope: !7)
!51 = !DILocation(line: 79, column: 57, scope: !7)
!52 = !DILocation(line: 79, column: 101, scope: !7)
!53 = !DILocation(line: 44, column: 44, scope: !7)
!54 = !DILocation(line: 45, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 44, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 43, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 36, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 40, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 41, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 74, column: 41, scope: !7)
!66 = !DILocation(line: 75, column: 20, scope: !7)
!67 = !DILocation(line: 77, column: 41, scope: !7)
!68 = !DILocation(line: 78, column: 20, scope: !7)
!69 = !DILocation(line: 79, column: 89, scope: !7)
!70 = !DILocation(line: 79, column: 77, scope: !7)
!71 = !DILocation(line: 79, column: 129, scope: !7)
!72 = !DILocation(line: 79, column: 125, scope: !7)
!73 = !DILocation(line: 79, column: 116, scope: !7)
!74 = !DILocation(line: 79, column: 160, scope: !7)
!75 = !DILocation(line: 79, column: 148, scope: !7)
!76 = !DILocation(line: 79, column: 136, scope: !7)
!77 = !DILocation(line: 79, column: 240, scope: !7)
!78 = !DILocation(line: 79, column: 311, scope: !7)
!79 = !DILocation(line: 79, column: 372, scope: !7)
!80 = !DILocation(line: 80, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 25, scope: !7)
!82 = !DILocation(line: 81, column: 37, scope: !7)
!83 = !DILocation(line: 81, column: 4, scope: !7)
