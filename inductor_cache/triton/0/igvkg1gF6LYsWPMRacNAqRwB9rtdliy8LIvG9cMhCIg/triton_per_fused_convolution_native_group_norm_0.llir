; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = lshr i32 %10, 4, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = and i32 %10, 32, !dbg !12
  %14 = lshr exact i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %.lobit, %14, !dbg !12
  %16 = and i32 %12, 4, !dbg !12
  %17 = or disjoint i32 %15, %16, !dbg !12
  %18 = and i32 %12, 8, !dbg !12
  %19 = or disjoint i32 %17, %18, !dbg !12
  %20 = and i32 %10, 31, !dbg !12
  %21 = or disjoint i32 %9, %19, !dbg !13
  %22 = or i32 %21, 16, !dbg !13
  %23 = or disjoint i32 %9, %20, !dbg !13
  %24 = icmp slt i32 %23, 64, !dbg !14
  %25 = icmp slt i32 %21, 64, !dbg !14
  %26 = icmp slt i32 %22, 64, !dbg !14
  %27 = shl i32 %10, 2, !dbg !15
  %28 = and i32 %27, 60, !dbg !15
  %29 = srem i32 %23, 16, !dbg !16
  %30 = shl i32 %21, 6, !dbg !17
  %31 = shl i32 %22, 6, !dbg !17
  %32 = or disjoint i32 %30, %28, !dbg !18
  %33 = or disjoint i32 %31, %28, !dbg !18
  %34 = sext i32 %32 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %33 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #5, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !20
  %48 = shl i32 %10, 7, !dbg !20
  %49 = and i32 %48, 1920, !dbg !20
  %50 = or disjoint i32 %15, %49, !dbg !20
  %51 = or disjoint i32 %50, %16, !dbg !20
  %52 = or disjoint i32 %51, %18, !dbg !20
  %53 = and i32 %10, 255, !dbg !20
  %54 = lshr exact i32 %49, 3, !dbg !20
  %55 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %54, !dbg !20
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %52, !dbg !20
  %57 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !20
  %58 = xor i32 %52, 32, !dbg !20
  %59 = lshr i32 %58, 5, !dbg !20
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !20
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %58, !dbg !20
  %62 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #5, !dbg !20
  %63 = xor i32 %52, 64, !dbg !20
  %64 = lshr i32 %63, 5, !dbg !20
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !20
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %63, !dbg !20
  %67 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !20
  %68 = xor i32 %52, 96, !dbg !20
  %69 = lshr i32 %68, 5, !dbg !20
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !20
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %68, !dbg !20
  %72 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #5, !dbg !20
  %73 = xor i32 %52, 16, !dbg !20
  %74 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %73, !dbg !20
  %75 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #5, !dbg !20
  %76 = xor i32 %52, 48, !dbg !20
  %77 = lshr i32 %76, 5, !dbg !20
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !20
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %76, !dbg !20
  %80 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #5, !dbg !20
  %81 = xor i32 %52, 80, !dbg !20
  %82 = lshr i32 %81, 5, !dbg !20
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !20
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %81, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #5, !dbg !20
  %86 = xor i32 %52, 112, !dbg !20
  %87 = lshr i32 %86, 5, !dbg !20
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !20
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !20
  %90 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %91 = lshr i32 %53, 5, !dbg !20
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !20
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %53, !dbg !20
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !20
  %95 = or disjoint i32 %53, 256, !dbg !20
  %96 = lshr i32 %95, 5, !dbg !20
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !20
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %95, !dbg !20
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !20
  %100 = or disjoint i32 %53, 512, !dbg !20
  %101 = lshr i32 %100, 5, !dbg !20
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !20
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100, !dbg !20
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !20
  %105 = or disjoint i32 %53, 768, !dbg !20
  %106 = lshr i32 %105, 5, !dbg !20
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !20
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %105, !dbg !20
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !20
  %110 = or disjoint i32 %53, 1024, !dbg !20
  %111 = lshr i32 %110, 5, !dbg !20
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !20
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !20
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !20
  %115 = or disjoint i32 %53, 1280, !dbg !20
  %116 = lshr i32 %115, 5, !dbg !20
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !20
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !20
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !20
  %120 = or disjoint i32 %53, 1536, !dbg !20
  %121 = lshr i32 %120, 5, !dbg !20
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !20
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !20
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !20
  %125 = or disjoint i32 %53, 1792, !dbg !20
  %126 = lshr i32 %125, 5, !dbg !20
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !20
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %125, !dbg !20
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !20
  %130 = shl nsw i32 %29, 2, !dbg !21
  %131 = or disjoint i32 %130, 1, !dbg !22
  %132 = or disjoint i32 %130, 2, !dbg !22
  %133 = or disjoint i32 %130, 3, !dbg !22
  %134 = sext i32 %130 to i64, !dbg !23
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !23
  %136 = sext i32 %131 to i64, !dbg !23
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !23
  %138 = sext i32 %132 to i64, !dbg !23
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !23
  %140 = sext i32 %133 to i64, !dbg !23
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !23
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %143 = bitcast i32 %142 to float, !dbg !24
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %145 = bitcast i32 %144 to float, !dbg !24
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %149 = bitcast i32 %148 to float, !dbg !24
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %151 = bitcast i32 %150 to float, !dbg !24
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %153 = bitcast i32 %152 to float, !dbg !24
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %155 = bitcast i32 %154 to float, !dbg !24
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %157 = bitcast i32 %156 to float, !dbg !24
  %158 = fadd float %94, %143, !dbg !25
  %159 = fadd float %99, %145, !dbg !25
  %160 = fadd float %104, %147, !dbg !25
  %161 = fadd float %109, %149, !dbg !25
  %162 = fadd float %114, %151, !dbg !25
  %163 = fadd float %119, %153, !dbg !25
  %164 = fadd float %124, %155, !dbg !25
  %165 = fadd float %129, %157, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %166 = fadd float %158, %159, !dbg !30
  %167 = fadd float %166, %160, !dbg !30
  %168 = fadd float %167, %161, !dbg !30
  %169 = fadd float %168, %162, !dbg !30
  %170 = fadd float %169, %163, !dbg !30
  %171 = fadd float %170, %164, !dbg !30
  %172 = fadd float %171, %165, !dbg !30
  %173 = and i32 %11, 7, !dbg !26
  %174 = shl nuw nsw i32 %20, 3, !dbg !26
  %175 = or disjoint i32 %174, %173, !dbg !26
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !26
  %177 = bitcast float %172 to i32, !dbg !26
  %178 = select i1 %24, i32 %177, i32 0, !dbg !30
  %179 = insertelement <1 x i32> poison, i32 %178, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %179, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %180 = icmp slt i32 %10, 256, !dbg !26
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %182 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %181, i1 %180) #5, !dbg !26
  %183 = bitcast i32 %182 to float, !dbg !26
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 4, i32 31), !dbg !26
  %185 = bitcast i32 %184 to float, !dbg !26
  %186 = fadd float %183, %185, !dbg !30
  %187 = bitcast float %186 to i32, !dbg !26
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !26
  %189 = bitcast i32 %188 to float, !dbg !26
  %190 = fadd float %186, %189, !dbg !30
  %191 = bitcast float %190 to i32, !dbg !26
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !26
  %193 = bitcast i32 %192 to float, !dbg !26
  %194 = fadd float %190, %193, !dbg !30
  %195 = and i32 %10, 7, !dbg !26
  %196 = icmp eq i32 %195, 0, !dbg !26
  %197 = and i1 %180, %196, !dbg !26
  %198 = bitcast float %194 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %198, i1 %197) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !26
  %200 = load float, ptr addrspace(3) %199, align 16, !dbg !26
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float 6.400000e+01) #5, !dbg !32
  %202 = fsub float %158, %201, !dbg !33
  %203 = fsub float %159, %201, !dbg !33
  %204 = fsub float %160, %201, !dbg !33
  %205 = fsub float %161, %201, !dbg !33
  %206 = fsub float %162, %201, !dbg !33
  %207 = fsub float %163, %201, !dbg !33
  %208 = fsub float %164, %201, !dbg !33
  %209 = fsub float %165, %201, !dbg !33
  %210 = fmul float %202, %202, !dbg !34
  %211 = fmul float %203, %203, !dbg !34
  %212 = fmul float %204, %204, !dbg !34
  %213 = fmul float %205, %205, !dbg !34
  %214 = fmul float %206, %206, !dbg !34
  %215 = fmul float %207, %207, !dbg !34
  %216 = fmul float %208, %208, !dbg !34
  %217 = fmul float %209, %209, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %218 = fadd float %210, %211, !dbg !37
  %219 = fadd float %212, %218, !dbg !37
  %220 = fadd float %213, %219, !dbg !37
  %221 = fadd float %214, %220, !dbg !37
  %222 = fadd float %215, %221, !dbg !37
  %223 = fadd float %216, %222, !dbg !37
  %224 = fadd float %217, %223, !dbg !37
  %225 = bitcast float %224 to i32, !dbg !35
  %226 = select i1 %24, i32 %225, i32 0, !dbg !37
  %227 = insertelement <1 x i32> poison, i32 %226, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %227, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %181, i1 %180) #5, !dbg !35
  %229 = bitcast i32 %228 to float, !dbg !35
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !35
  %231 = bitcast i32 %230 to float, !dbg !35
  %232 = fadd float %229, %231, !dbg !37
  %233 = bitcast float %232 to i32, !dbg !35
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !35
  %235 = bitcast i32 %234 to float, !dbg !35
  %236 = fadd float %232, %235, !dbg !37
  %237 = bitcast float %236 to i32, !dbg !35
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !35
  %239 = bitcast i32 %238 to float, !dbg !35
  %240 = fadd float %236, %239, !dbg !37
  %241 = bitcast float %240 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %241, i1 %197) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %242 = load float, ptr addrspace(3) %199, align 16, !dbg !35
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 6.400000e+01) #5, !dbg !38
  %244 = fadd float %243, 0x3EE4F8B580000000, !dbg !39
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %245, 0, !dbg !40
  br i1 %.not.i, label %248, label %246, !dbg !40

246:                                              ; preds = %7
  %247 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %244), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

248:                                              ; preds = %7
  %249 = tail call float @llvm.nvvm.rsqrt.approx.f(float %244), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %246, %248
  %.0.i = phi float [ %247, %246 ], [ %249, %248 ], !dbg !40
  %.lobit2 = lshr exact i32 %13, 5, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %250 = shl i32 %10, 6, !dbg !41
  %251 = and i32 %250, 1984, !dbg !41
  %252 = and i32 %11, 6, !dbg !41
  %253 = or disjoint i32 %.lobit2, %252, !dbg !41
  %254 = or disjoint i32 %253, %251, !dbg !41
  %255 = and i32 %27, 1020, !dbg !41
  %256 = lshr exact i32 %251, 2, !dbg !41
  %257 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !41
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !41
  %259 = bitcast float %158 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #5, !dbg !41
  %260 = or disjoint i32 %254, 8, !dbg !41
  %261 = getelementptr float, ptr addrspace(3) %257, i32 %260, !dbg !41
  %262 = bitcast float %159 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #5, !dbg !41
  %263 = or disjoint i32 %254, 16, !dbg !41
  %264 = getelementptr float, ptr addrspace(3) %257, i32 %263, !dbg !41
  %265 = bitcast float %160 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #5, !dbg !41
  %266 = or disjoint i32 %254, 24, !dbg !41
  %267 = getelementptr float, ptr addrspace(3) %257, i32 %266, !dbg !41
  %268 = bitcast float %161 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #5, !dbg !41
  %269 = or disjoint i32 %254, 32, !dbg !41
  %270 = getelementptr float, ptr addrspace(3) %257, i32 %269, !dbg !41
  %271 = bitcast float %162 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #5, !dbg !41
  %272 = or disjoint i32 %254, 40, !dbg !41
  %273 = getelementptr float, ptr addrspace(3) %257, i32 %272, !dbg !41
  %274 = bitcast float %163 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #5, !dbg !41
  %275 = or disjoint i32 %254, 48, !dbg !41
  %276 = getelementptr float, ptr addrspace(3) %257, i32 %275, !dbg !41
  %277 = bitcast float %164 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #5, !dbg !41
  %278 = or disjoint i32 %254, 56, !dbg !41
  %279 = getelementptr float, ptr addrspace(3) %257, i32 %278, !dbg !41
  %280 = bitcast float %165 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %281 = lshr i32 %27, 4, !dbg !41
  %282 = and i32 %281, 60, !dbg !41
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !41
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %255, !dbg !41
  %285 = or disjoint i32 %255, 1024, !dbg !41
  %286 = lshr i32 %285, 4, !dbg !41
  %287 = and i32 %286, 124, !dbg !41
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !41
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %285, !dbg !41
  %290 = load <4 x i32>, ptr addrspace(3) %289, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %284, align 16, !dbg !41
  %291 = getelementptr inbounds i8, ptr addrspace(3) %284, i32 4, !dbg !41
  %.extract11 = load i32, ptr addrspace(3) %291, align 4, !dbg !41
  %292 = getelementptr inbounds i8, ptr addrspace(3) %284, i32 8, !dbg !41
  %.extract12 = load i32, ptr addrspace(3) %292, align 8, !dbg !41
  %293 = getelementptr inbounds i8, ptr addrspace(3) %284, i32 12, !dbg !41
  %.extract13 = load i32, ptr addrspace(3) %293, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %35, i1 %25) #5, !dbg !41
  %.extract14 = extractelement <4 x i32> %290, i64 0, !dbg !41
  %.extract15 = extractelement <4 x i32> %290, i64 1, !dbg !41
  %.extract16 = extractelement <4 x i32> %290, i64 2, !dbg !41
  %.extract17 = extractelement <4 x i32> %290, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %37, i1 %26) #5, !dbg !41
  %294 = sext i32 %23 to i64, !dbg !42
  %295 = getelementptr float, ptr addrspace(1) %4, i64 %294, !dbg !42
  %296 = icmp eq i32 %173, 0, !dbg !43
  %297 = bitcast float %.0.i to i32, !dbg !43
  %298 = and i1 %296, %24, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %297, ptr addrspace(1) %295, i1 %298) #5, !dbg !43
  %299 = getelementptr float, ptr addrspace(1) %2, i64 %294, !dbg !44
  %300 = bitcast float %201 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %299, i1 %298) #5, !dbg !45
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %294, !dbg !46
  %302 = bitcast float %242 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %302, ptr addrspace(1) %301, i1 %298) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfgwodrczjtkt6ozwusst6lk2ym33u3ruljnr6onqxbkcoozlrz7.py", directory: "inductor_cache/fg")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 42, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 47, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
