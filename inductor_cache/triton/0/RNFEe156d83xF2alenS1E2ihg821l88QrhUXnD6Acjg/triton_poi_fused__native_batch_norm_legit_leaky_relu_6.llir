; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %11 = shl i32 %10, 10, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = shl i32 %12, 2, !dbg !13
  %14 = and i32 %13, 508, !dbg !13
  %15 = or disjoint i32 %11, %14, !dbg !14
  %16 = or disjoint i32 %15, 512, !dbg !14
  %17 = icmp slt i32 %15, 1024, !dbg !15
  %18 = icmp slt i32 %16, 1024, !dbg !15
  %19 = shl i32 %9, 8, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %20 = sdiv i32 %.frozen, 256, !dbg !17
  %21 = sdiv i32 %16, 256, !dbg !17
  %22 = shl i32 %20, 20, !dbg !18
  %23 = shl i32 %21, 20, !dbg !18
  %24 = mul i32 %20, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = add i32 %.decomposed, %19, !dbg !20
  %26 = add i32 %25, %22, !dbg !21
  %27 = add i32 %23, %.decomposed, !dbg !20
  %28 = add i32 %27, %19, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #4, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #4, !dbg !23
  %35 = sext i32 %15 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = sext i32 %16 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #4, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #4, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #4, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %17) #4, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %18) #4, !dbg !29
  %65 = sext i32 %.decomposed to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #4, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %18) #4, !dbg !31
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 4.096000e+03) #4, !dbg !32
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 4.096000e+03) #4, !dbg !32
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 4.096000e+03) #4, !dbg !32
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 4.096000e+03) #4, !dbg !32
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 4.096000e+03) #4, !dbg !32
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 4.096000e+03) #4, !dbg !32
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 4.096000e+03) #4, !dbg !32
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 4.096000e+03) #4, !dbg !32
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !33
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !33
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !33
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !33
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !33
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !33
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !33
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %85, 0, !dbg !34
  br i1 %.not.i, label %88, label %86, !dbg !34

86:                                               ; preds = %8
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %77), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

88:                                               ; preds = %8
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %77), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %86, %88
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], !dbg !34
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i1 = icmp eq i32 %90, 0, !dbg !34
  br i1 %.not.i1, label %93, label %91, !dbg !34

91:                                               ; preds = %__nv_rsqrtf.exit
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

__nv_rsqrtf.exit3:                                ; preds = %91, %93
  %.0.i2 = phi float [ %92, %91 ], [ %94, %93 ], !dbg !34
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i4 = icmp eq i32 %95, 0, !dbg !34
  br i1 %.not.i4, label %98, label %96, !dbg !34

96:                                               ; preds = %__nv_rsqrtf.exit3
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !34
  br label %__nv_rsqrtf.exit6, !dbg !34

98:                                               ; preds = %__nv_rsqrtf.exit3
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !34
  br label %__nv_rsqrtf.exit6, !dbg !34

__nv_rsqrtf.exit6:                                ; preds = %96, %98
  %.0.i5 = phi float [ %97, %96 ], [ %99, %98 ], !dbg !34
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i7 = icmp eq i32 %100, 0, !dbg !34
  br i1 %.not.i7, label %103, label %101, !dbg !34

101:                                              ; preds = %__nv_rsqrtf.exit6
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !34
  br label %__nv_rsqrtf.exit9, !dbg !34

103:                                              ; preds = %__nv_rsqrtf.exit6
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !34
  br label %__nv_rsqrtf.exit9, !dbg !34

__nv_rsqrtf.exit9:                                ; preds = %101, %103
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], !dbg !34
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i10 = icmp eq i32 %105, 0, !dbg !34
  br i1 %.not.i10, label %108, label %106, !dbg !34

106:                                              ; preds = %__nv_rsqrtf.exit9
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !34
  br label %__nv_rsqrtf.exit12, !dbg !34

108:                                              ; preds = %__nv_rsqrtf.exit9
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !34
  br label %__nv_rsqrtf.exit12, !dbg !34

__nv_rsqrtf.exit12:                               ; preds = %106, %108
  %.0.i11 = phi float [ %107, %106 ], [ %109, %108 ], !dbg !34
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i13 = icmp eq i32 %110, 0, !dbg !34
  br i1 %.not.i13, label %113, label %111, !dbg !34

111:                                              ; preds = %__nv_rsqrtf.exit12
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !34
  br label %__nv_rsqrtf.exit15, !dbg !34

113:                                              ; preds = %__nv_rsqrtf.exit12
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !34
  br label %__nv_rsqrtf.exit15, !dbg !34

__nv_rsqrtf.exit15:                               ; preds = %111, %113
  %.0.i14 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !34
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i16 = icmp eq i32 %115, 0, !dbg !34
  br i1 %.not.i16, label %118, label %116, !dbg !34

116:                                              ; preds = %__nv_rsqrtf.exit15
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !34
  br label %__nv_rsqrtf.exit18, !dbg !34

118:                                              ; preds = %__nv_rsqrtf.exit15
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !34
  br label %__nv_rsqrtf.exit18, !dbg !34

__nv_rsqrtf.exit18:                               ; preds = %116, %118
  %.0.i17 = phi float [ %117, %116 ], [ %119, %118 ], !dbg !34
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i19 = icmp eq i32 %120, 0, !dbg !34
  br i1 %.not.i19, label %123, label %121, !dbg !34

121:                                              ; preds = %__nv_rsqrtf.exit18
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !34
  br label %__nv_rsqrtf.exit21, !dbg !34

123:                                              ; preds = %__nv_rsqrtf.exit18
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !34
  br label %__nv_rsqrtf.exit21, !dbg !34

__nv_rsqrtf.exit21:                               ; preds = %121, %123
  %.0.i20 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %126 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %128 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %130 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %132 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %134 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %136 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %138 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %140 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !29
  %154 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !29
  %157 = and i32 %12, 127, !dbg !13
  %158 = or disjoint i32 %157, %11, !dbg !14
  %159 = or disjoint i32 %158, 896, !dbg !14
  %160 = icmp slt i32 %159, 1024, !dbg !15
  %161 = or disjoint i32 %158, 768, !dbg !14
  %162 = icmp slt i32 %161, 1024, !dbg !15
  %163 = or disjoint i32 %158, 640, !dbg !14
  %164 = icmp slt i32 %163, 1024, !dbg !15
  %165 = or disjoint i32 %158, 512, !dbg !14
  %166 = icmp slt i32 %165, 1024, !dbg !15
  %167 = or disjoint i32 %157, 384, !dbg !13
  %168 = or disjoint i32 %11, %167, !dbg !14
  %169 = icmp slt i32 %168, 1024, !dbg !15
  %170 = or disjoint i32 %157, 256, !dbg !13
  %171 = or disjoint i32 %11, %170, !dbg !14
  %172 = icmp slt i32 %171, 1024, !dbg !15
  %173 = or disjoint i32 %157, 128, !dbg !13
  %174 = or disjoint i32 %11, %173, !dbg !14
  %175 = icmp slt i32 %174, 1024, !dbg !15
  %176 = icmp slt i32 %158, 1024, !dbg !15
  %177 = insertelement <8 x i32> poison, i32 %125, i64 0, !dbg !23
  %178 = insertelement <8 x i32> %177, i32 %127, i64 1, !dbg !23
  %179 = insertelement <8 x i32> %178, i32 %129, i64 2, !dbg !23
  %180 = insertelement <8 x i32> %179, i32 %131, i64 3, !dbg !23
  %181 = insertelement <8 x i32> %180, i32 %133, i64 4, !dbg !23
  %182 = insertelement <8 x i32> %181, i32 %135, i64 5, !dbg !23
  %183 = insertelement <8 x i32> %182, i32 %137, i64 6, !dbg !23
  %184 = insertelement <8 x i32> %183, i32 %139, i64 7, !dbg !23
  %185 = bitcast <8 x i32> %184 to <8 x float>, !dbg !23
  %186 = insertelement <8 x i32> poison, i32 %126, i64 0, !dbg !25
  %187 = insertelement <8 x i32> %186, i32 %128, i64 1, !dbg !25
  %188 = insertelement <8 x i32> %187, i32 %130, i64 2, !dbg !25
  %189 = insertelement <8 x i32> %188, i32 %132, i64 3, !dbg !25
  %190 = insertelement <8 x i32> %189, i32 %134, i64 4, !dbg !25
  %191 = insertelement <8 x i32> %190, i32 %136, i64 5, !dbg !25
  %192 = insertelement <8 x i32> %191, i32 %138, i64 6, !dbg !25
  %193 = insertelement <8 x i32> %192, i32 %140, i64 7, !dbg !25
  %194 = bitcast <8 x i32> %193 to <8 x float>, !dbg !25
  %195 = fsub <8 x float> %185, %194, !dbg !35
  %196 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !31
  %197 = insertelement <8 x i32> %196, i32 %142, i64 1, !dbg !31
  %198 = insertelement <8 x i32> %197, i32 %143, i64 2, !dbg !31
  %199 = insertelement <8 x i32> %198, i32 %144, i64 3, !dbg !31
  %200 = insertelement <8 x i32> %199, i32 %145, i64 4, !dbg !31
  %201 = insertelement <8 x i32> %200, i32 %146, i64 5, !dbg !31
  %202 = insertelement <8 x i32> %201, i32 %147, i64 6, !dbg !31
  %203 = insertelement <8 x i32> %202, i32 %148, i64 7, !dbg !31
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !31
  %205 = insertelement <8 x i32> poison, i32 %149, i64 0, !dbg !29
  %206 = insertelement <8 x i32> %205, i32 %150, i64 1, !dbg !29
  %207 = insertelement <8 x i32> %206, i32 %151, i64 2, !dbg !29
  %208 = insertelement <8 x i32> %207, i32 %152, i64 3, !dbg !29
  %209 = insertelement <8 x i32> %208, i32 %153, i64 4, !dbg !29
  %210 = insertelement <8 x i32> %209, i32 %154, i64 5, !dbg !29
  %211 = insertelement <8 x i32> %210, i32 %155, i64 6, !dbg !29
  %212 = insertelement <8 x i32> %211, i32 %156, i64 7, !dbg !29
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !29
  %214 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !36
  %215 = insertelement <8 x float> %214, float %.0.i17, i64 1, !dbg !36
  %216 = insertelement <8 x float> %215, float %.0.i14, i64 2, !dbg !36
  %217 = insertelement <8 x float> %216, float %.0.i11, i64 3, !dbg !36
  %218 = insertelement <8 x float> %217, float %.0.i8, i64 4, !dbg !36
  %219 = insertelement <8 x float> %218, float %.0.i5, i64 5, !dbg !36
  %220 = insertelement <8 x float> %219, float %.0.i2, i64 6, !dbg !36
  %221 = insertelement <8 x float> %220, float %.0.i, i64 7, !dbg !36
  %222 = fmul <8 x float> %195, %221, !dbg !36
  %223 = fmul <8 x float> %222, %213, !dbg !37
  %224 = fadd <8 x float> %223, %204, !dbg !38
  %225 = fcmp ogt <8 x float> %224, zeroinitializer, !dbg !39
  %226 = extractelement <8 x float> %224, i64 7, !dbg !40
  %227 = fmul float %226, 0x3FC99999A0000000, !dbg !41
  %228 = extractelement <8 x float> %224, i64 6, !dbg !40
  %229 = fmul float %228, 0x3FC99999A0000000, !dbg !41
  %230 = extractelement <8 x float> %224, i64 5, !dbg !40
  %231 = fmul float %230, 0x3FC99999A0000000, !dbg !41
  %232 = extractelement <8 x float> %224, i64 4, !dbg !40
  %233 = fmul float %232, 0x3FC99999A0000000, !dbg !41
  %234 = extractelement <8 x float> %224, i64 3, !dbg !40
  %235 = fmul float %234, 0x3FC99999A0000000, !dbg !41
  %236 = extractelement <8 x float> %224, i64 2, !dbg !40
  %237 = fmul float %236, 0x3FC99999A0000000, !dbg !41
  %238 = extractelement <8 x float> %224, i64 1, !dbg !40
  %239 = fmul float %238, 0x3FC99999A0000000, !dbg !41
  %240 = extractelement <8 x float> %224, i64 0, !dbg !40
  %241 = fmul float %240, 0x3FC99999A0000000, !dbg !41
  %242 = extractelement <8 x i1> %225, i64 7, !dbg !40
  %243 = select i1 %242, float %226, float %227, !dbg !40
  %244 = extractelement <8 x i1> %225, i64 6, !dbg !40
  %245 = select i1 %244, float %228, float %229, !dbg !40
  %246 = extractelement <8 x i1> %225, i64 5, !dbg !40
  %247 = select i1 %246, float %230, float %231, !dbg !40
  %248 = extractelement <8 x i1> %225, i64 4, !dbg !40
  %249 = select i1 %248, float %232, float %233, !dbg !40
  %250 = extractelement <8 x i1> %225, i64 3, !dbg !40
  %251 = select i1 %250, float %234, float %235, !dbg !40
  %252 = extractelement <8 x i1> %225, i64 2, !dbg !40
  %253 = select i1 %252, float %236, float %237, !dbg !40
  %254 = extractelement <8 x i1> %225, i64 1, !dbg !40
  %255 = select i1 %254, float %238, float %239, !dbg !40
  %256 = extractelement <8 x i1> %225, i64 0, !dbg !40
  %257 = select i1 %256, float %240, float %241, !dbg !40
  %258 = shl i32 %158, 12, !dbg !42
  %259 = shl i32 %174, 12, !dbg !42
  %260 = shl i32 %171, 12, !dbg !42
  %261 = shl i32 %168, 12, !dbg !42
  %262 = shl i32 %165, 12, !dbg !42
  %263 = shl i32 %163, 12, !dbg !42
  %264 = shl i32 %161, 12, !dbg !42
  %265 = shl i32 %159, 12, !dbg !42
  %266 = add i32 %258, %9, !dbg !43
  %267 = add i32 %259, %9, !dbg !43
  %268 = add i32 %260, %9, !dbg !43
  %269 = add i32 %261, %9, !dbg !43
  %270 = add i32 %262, %9, !dbg !43
  %271 = add i32 %263, %9, !dbg !43
  %272 = add i32 %264, %9, !dbg !43
  %273 = add i32 %265, %9, !dbg !43
  %274 = sext i32 %266 to i64, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !44
  %276 = sext i32 %267 to i64, !dbg !44
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !44
  %278 = sext i32 %268 to i64, !dbg !44
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !44
  %280 = sext i32 %269 to i64, !dbg !44
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !44
  %282 = sext i32 %270 to i64, !dbg !44
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !44
  %284 = sext i32 %271 to i64, !dbg !44
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !44
  %286 = sext i32 %272 to i64, !dbg !44
  %287 = getelementptr float, ptr addrspace(1) %5, i64 %286, !dbg !44
  %288 = sext i32 %273 to i64, !dbg !44
  %289 = getelementptr float, ptr addrspace(1) %5, i64 %288, !dbg !44
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  %291 = bitcast float %243 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !45
  %292 = or disjoint i32 %14, 1, !dbg !45
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !45
  %294 = bitcast float %245 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !45
  %295 = or disjoint i32 %14, 2, !dbg !45
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !45
  %297 = bitcast float %247 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !45
  %298 = or disjoint i32 %14, 3, !dbg !45
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !45
  %300 = bitcast float %249 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !45
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !45
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !45
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !45
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !45
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !45
  %308 = load i32, ptr addrspace(3) %307, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %309 = bitcast float %251 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %309, i1 true) #4, !dbg !45
  %310 = bitcast float %253 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %310, i1 true) #4, !dbg !45
  %311 = bitcast float %255 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %311, i1 true) #4, !dbg !45
  %312 = bitcast float %257 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %312, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %313 = load i32, ptr addrspace(3) %301, align 4, !dbg !45
  %314 = load i32, ptr addrspace(3) %303, align 4, !dbg !45
  %315 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %316 = load i32, ptr addrspace(3) %307, align 4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %302, ptr addrspace(1) %275, i1 %176) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %277, i1 %175) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %279, i1 %172) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %281, i1 %169) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %313, ptr addrspace(1) %283, i1 %166) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %285, i1 %164) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %315, ptr addrspace(1) %287, i1 %162) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %316, ptr addrspace(1) %289, i1 %160) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cprduu3f6mqvfz7gdkm6ygqiplkacwvy27gxmwu5x3razqnzazjz.py", directory: "inductor_cache/pr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 34, scope: !7)
!17 = !DILocation(line: 30, column: 54, scope: !7)
!18 = !DILocation(line: 30, column: 48, scope: !7)
!19 = !DILocation(line: 30, column: 68, scope: !7)
!20 = !DILocation(line: 30, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 63, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 76, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 32, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 27, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 35, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 49, column: 30, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 47, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
