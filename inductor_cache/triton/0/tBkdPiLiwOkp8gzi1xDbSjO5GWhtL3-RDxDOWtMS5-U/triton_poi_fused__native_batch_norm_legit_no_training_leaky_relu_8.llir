; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = and i32 %14, 28, !dbg !17
  %20 = or disjoint i32 %18, %19, !dbg !18
  %21 = icmp slt i32 %20, 32, !dbg !19
  %22 = shl i32 %15, 5, !dbg !20
  %23 = add i32 %20, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = and i1 %16, %21, !dbg !23
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #4, !dbg !24
  %28 = sext i32 %20 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !25
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !27
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %21) #4, !dbg !28
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !28
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !28
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !28
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !28
  %37 = bitcast i32 %33 to float, !dbg !28
  %38 = bitcast i32 %34 to float, !dbg !28
  %39 = bitcast i32 %35 to float, !dbg !28
  %40 = bitcast i32 %36 to float, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !32
  %45 = fadd float %37, 0x3F50624DE0000000, !dbg !33
  %46 = fadd float %38, 0x3F50624DE0000000, !dbg !33
  %47 = fadd float %39, 0x3F50624DE0000000, !dbg !33
  %48 = fadd float %40, 0x3F50624DE0000000, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %49, 0, !dbg !34
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %50, 0, !dbg !34
  br i1 %.not.i, label %56, label %51, !dbg !34

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !34

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !34

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !34
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i10 = icmp eq i32 %61, 0, !dbg !34
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i13 = icmp eq i32 %62, 0, !dbg !34
  br i1 %.not.i10, label %68, label %63, !dbg !34

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %66, label %64, !dbg !34

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %71, label %69, !dbg !34

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

__nv_sqrtf.exit14:                                ; preds = %64, %66, %69, %71
  %.0.i12 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !34
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i15 = icmp eq i32 %73, 0, !dbg !34
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i18 = icmp eq i32 %74, 0, !dbg !34
  br i1 %.not.i15, label %80, label %75, !dbg !34

75:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %78, label %76, !dbg !34

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

80:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %83, label %81, !dbg !34

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

__nv_sqrtf.exit19:                                ; preds = %76, %78, %81, %83
  %.0.i17 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i20 = icmp eq i32 %85, 0, !dbg !34
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i23 = icmp eq i32 %86, 0, !dbg !34
  br i1 %.not.i20, label %92, label %87, !dbg !34

87:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %90, label %88, !dbg !34

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

92:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %95, label %93, !dbg !34

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

__nv_sqrtf.exit24:                                ; preds = %88, %90, %93, %95
  %.0.i22 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !24
  %100 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %106 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %113 = lshr i32 %11, 2, !dbg !17
  %114 = and i32 %113, 31, !dbg !17
  %115 = or disjoint i32 %18, %114, !dbg !18
  %116 = icmp slt i32 %115, 32, !dbg !19
  %117 = and i32 %14, 12, !dbg !12
  %118 = or disjoint i32 %10, %117, !dbg !13
  %119 = icmp slt i32 %118, 16, !dbg !14
  %120 = and i1 %119, %116, !dbg !23
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !35
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !35
  %125 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !24
  %126 = insertelement <4 x i32> %125, i32 %99, i64 1, !dbg !24
  %127 = insertelement <4 x i32> %126, i32 %101, i64 2, !dbg !24
  %128 = insertelement <4 x i32> %127, i32 %103, i64 3, !dbg !24
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !24
  %130 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !26
  %131 = insertelement <4 x i32> %130, i32 %100, i64 1, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %102, i64 2, !dbg !26
  %133 = insertelement <4 x i32> %132, i32 %104, i64 3, !dbg !26
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !26
  %135 = fsub <4 x float> %129, %134, !dbg !36
  %136 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !32
  %137 = insertelement <4 x i32> %136, i32 %106, i64 1, !dbg !32
  %138 = insertelement <4 x i32> %137, i32 %107, i64 2, !dbg !32
  %139 = insertelement <4 x i32> %138, i32 %108, i64 3, !dbg !32
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !32
  %141 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !30
  %142 = insertelement <4 x i32> %141, i32 %110, i64 1, !dbg !30
  %143 = insertelement <4 x i32> %142, i32 %111, i64 2, !dbg !30
  %144 = insertelement <4 x i32> %143, i32 %112, i64 3, !dbg !30
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !30
  %146 = insertelement <4 x float> poison, float %124, i64 0, !dbg !37
  %147 = insertelement <4 x float> %146, float %123, i64 1, !dbg !37
  %148 = insertelement <4 x float> %147, float %122, i64 2, !dbg !37
  %149 = insertelement <4 x float> %148, float %121, i64 3, !dbg !37
  %150 = fmul <4 x float> %135, %149, !dbg !37
  %151 = fmul <4 x float> %150, %145, !dbg !38
  %152 = fadd <4 x float> %151, %140, !dbg !39
  %153 = fcmp ogt <4 x float> %152, zeroinitializer, !dbg !40
  %154 = extractelement <4 x float> %152, i64 3, !dbg !41
  %155 = fmul float %154, 0x3FB99999A0000000, !dbg !42
  %156 = extractelement <4 x float> %152, i64 2, !dbg !41
  %157 = fmul float %156, 0x3FB99999A0000000, !dbg !42
  %158 = extractelement <4 x float> %152, i64 1, !dbg !41
  %159 = fmul float %158, 0x3FB99999A0000000, !dbg !42
  %160 = extractelement <4 x float> %152, i64 0, !dbg !41
  %161 = fmul float %160, 0x3FB99999A0000000, !dbg !42
  %162 = extractelement <4 x i1> %153, i64 3, !dbg !41
  %163 = select i1 %162, float %154, float %155, !dbg !41
  %164 = extractelement <4 x i1> %153, i64 2, !dbg !41
  %165 = select i1 %164, float %156, float %157, !dbg !41
  %166 = extractelement <4 x i1> %153, i64 1, !dbg !41
  %167 = select i1 %166, float %158, float %159, !dbg !41
  %168 = extractelement <4 x i1> %153, i64 0, !dbg !41
  %169 = select i1 %168, float %160, float %161, !dbg !41
  %170 = shl i32 %115, 2, !dbg !43
  %171 = shl i32 %118, 5, !dbg !44
  %172 = add i32 %170, %171, !dbg !45
  %173 = sext i32 %172 to i64, !dbg !46
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %173, !dbg !46
  %175 = shl i32 %11, 6, !dbg !47
  %176 = and i32 %175, 448, !dbg !47
  %177 = or disjoint i32 %176, %13, !dbg !47
  %178 = and i32 %14, 508, !dbg !47
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %176, !dbg !47
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !47
  %181 = bitcast float %163 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !47
  %182 = or disjoint i32 %177, 16, !dbg !47
  %183 = lshr i32 %182, 2, !dbg !47
  %184 = and i32 %183, 116, !dbg !47
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !47
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %182, !dbg !47
  %187 = bitcast float %165 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #4, !dbg !47
  %188 = or disjoint i32 %177, 32, !dbg !47
  %189 = lshr i32 %188, 2, !dbg !47
  %190 = and i32 %189, 120, !dbg !47
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !47
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %188, !dbg !47
  %193 = bitcast float %167 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #4, !dbg !47
  %194 = or disjoint i32 %177, 48, !dbg !47
  %195 = lshr i32 %194, 2, !dbg !47
  %196 = and i32 %195, 124, !dbg !47
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !47
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %194, !dbg !47
  %199 = bitcast float %169 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %200 = and i32 %11, 124, !dbg !47
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !47
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %178, !dbg !47
  %.extract = load i32, ptr addrspace(3) %202, align 16, !dbg !47
  %203 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 4, !dbg !47
  %.extract7 = load i32, ptr addrspace(3) %203, align 4, !dbg !47
  %204 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 8, !dbg !47
  %.extract8 = load i32, ptr addrspace(3) %204, align 8, !dbg !47
  %205 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 12, !dbg !47
  %.extract9 = load i32, ptr addrspace(3) %205, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %174, i1 %120) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpk7z75a6l5z36f3t3euzxe3pn5ldamircyxrlcrr6ojrxovq54z.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 32, scope: !7)
!44 = !DILocation(line: 53, column: 41, scope: !7)
!45 = !DILocation(line: 53, column: 37, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 53, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
