; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %22 = sdiv i32 %.frozen, 16, !dbg !14
  %23 = mul i32 %22, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %23, !dbg !15
  %24 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %25 = insertelement <2 x i32> %24, i32 %21, i64 1, !dbg !16
  %26 = srem <2 x i32> %25, splat (i32 16), !dbg !16
  %27 = sdiv i32 %20, 256, !dbg !17
  %28 = srem i32 %27, 64, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %49 = bitcast i32 %48 to float, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %58 = extractelement <2 x i32> %26, i64 0, !dbg !35
  %59 = icmp sgt i32 %58, 0, !dbg !36
  %60 = shl nsw i32 %.decomposed, 1, !dbg !37
  %61 = extractelement <2 x i32> %26, i64 1, !dbg !35
  %62 = shl nsw i32 %61, 1, !dbg !37
  %63 = icmp sgt i32 %.decomposed, 0, !dbg !38
  %64 = icmp sgt i32 %61, 0, !dbg !38
  %65 = and i1 %63, %59, !dbg !39
  %66 = and i1 %64, %59, !dbg !39
  %67 = shl i32 %22, 6, !dbg !40
  %68 = add i32 %67, %60, !dbg !41
  %69 = add i32 %68, -33, !dbg !42
  %70 = add i32 %67, %62, !dbg !41
  %71 = add i32 %70, -33, !dbg !42
  %72 = sext i32 %69 to i64, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !43
  %74 = sext i32 %71 to i64, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %65, i32 -8388608, i1 %65) #3, !dbg !44
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %66, i32 -8388608, i1 %66) #3, !dbg !44
  %78 = icmp sgt i32 %.decomposed, -1, !dbg !45
  %79 = icmp sgt i32 %61, -1, !dbg !45
  %80 = and i1 %78, %59, !dbg !46
  %81 = and i1 %79, %59, !dbg !46
  %82 = add i32 %68, -32, !dbg !47
  %83 = add i32 %70, -32, !dbg !47
  %84 = sext i32 %82 to i64, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !48
  %86 = sext i32 %83 to i64, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !48
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %80, i32 -8388608, i1 %80) #3, !dbg !49
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %81, i32 -8388608, i1 %81) #3, !dbg !49
  %90 = add i32 %68, -31, !dbg !50
  %91 = add i32 %70, -31, !dbg !50
  %92 = sext i32 %90 to i64, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !51
  %94 = sext i32 %91 to i64, !dbg !51
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !51
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %80, i32 -8388608, i1 %80) #3, !dbg !52
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %81, i32 -8388608, i1 %81) #3, !dbg !52
  %98 = icmp sgt i32 %58, -1, !dbg !53
  %99 = and i1 %63, %98, !dbg !54
  %100 = and i1 %64, %98, !dbg !54
  %101 = add i32 %68, -1, !dbg !55
  %102 = sext i32 %101 to i64, !dbg !56
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !56
  %104 = sext i32 %70 to i64, !dbg !56
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !56
  %106 = getelementptr i8, ptr addrspace(1) %105, i64 -4, !dbg !56
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %99, i32 -8388608, i1 %99) #3, !dbg !57
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %100, i32 -8388608, i1 %100) #3, !dbg !57
  %109 = or i32 %58, %.decomposed, !dbg !35
  %110 = icmp sgt i32 %109, -1, !dbg !35
  %111 = or i32 %58, %61, !dbg !35
  %112 = icmp sgt i32 %111, -1, !dbg !35
  %113 = sext i32 %68 to i64, !dbg !58
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !58
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %110, i32 -8388608, i1 %110) #3, !dbg !59
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %112, i32 -8388608, i1 %112) #3, !dbg !59
  %117 = or disjoint i32 %68, 1, !dbg !60
  %118 = or disjoint i32 %70, 1, !dbg !60
  %119 = sext i32 %117 to i64, !dbg !61
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !61
  %121 = sext i32 %118 to i64, !dbg !61
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !61
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %110, i32 -8388608, i1 %110) #3, !dbg !62
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %112, i32 -8388608, i1 %112) #3, !dbg !62
  %125 = add i32 %68, 31, !dbg !63
  %126 = add i32 %70, 31, !dbg !63
  %127 = sext i32 %125 to i64, !dbg !64
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !64
  %129 = sext i32 %126 to i64, !dbg !64
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !64
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %99, i32 -8388608, i1 %99) #3, !dbg !65
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %100, i32 -8388608, i1 %100) #3, !dbg !65
  %133 = add i32 %68, 32, !dbg !66
  %134 = add i32 %70, 32, !dbg !66
  %135 = sext i32 %133 to i64, !dbg !67
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !67
  %137 = sext i32 %134 to i64, !dbg !67
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !67
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %110, i32 -8388608, i1 %110) #3, !dbg !68
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %112, i32 -8388608, i1 %112) #3, !dbg !68
  %141 = add i32 %68, 33, !dbg !69
  %142 = add i32 %70, 33, !dbg !69
  %143 = sext i32 %141 to i64, !dbg !70
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !70
  %145 = sext i32 %142 to i64, !dbg !70
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !70
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %110, i32 -8388608, i1 %110) #3, !dbg !71
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %112, i32 -8388608, i1 %112) #3, !dbg !71
  %149 = fadd float %35, 0x3F50624DE0000000, !dbg !72
  %150 = fadd float %37, 0x3F50624DE0000000, !dbg !72
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i = icmp eq i32 %151, 0, !dbg !73
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i = icmp eq i32 %152, 0, !dbg !73
  br i1 %.not.i, label %158, label %153, !dbg !73

153:                                              ; preds = %14
  br i1 %.not1.i, label %156, label %154, !dbg !73

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

158:                                              ; preds = %14
  br i1 %.not1.i, label %161, label %159, !dbg !73

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

__nv_sqrtf.exit:                                  ; preds = %154, %156, %159, %161
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !73
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i1 = icmp eq i32 %163, 0, !dbg !73
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i4 = icmp eq i32 %164, 0, !dbg !73
  br i1 %.not.i1, label %170, label %165, !dbg !73

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %168, label %166, !dbg !73

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %173, label %171, !dbg !73

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !73
  br label %__nv_sqrtf.exit5, !dbg !73

__nv_sqrtf.exit5:                                 ; preds = %166, %168, %171, %173
  %.0.i3 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !73
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !74
  %177 = fadd float %49, 0x3F50624DE0000000, !dbg !75
  %178 = fadd float %51, 0x3F50624DE0000000, !dbg !75
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i6 = icmp eq i32 %179, 0, !dbg !76
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i9 = icmp eq i32 %180, 0, !dbg !76
  br i1 %.not.i6, label %186, label %181, !dbg !76

181:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %184, label %182, !dbg !76

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

186:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %189, label %187, !dbg !76

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

__nv_sqrtf.exit10:                                ; preds = %182, %184, %187, %189
  %.0.i8 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !76
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i11 = icmp eq i32 %191, 0, !dbg !76
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i14 = icmp eq i32 %192, 0, !dbg !76
  br i1 %.not.i11, label %198, label %193, !dbg !76

193:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %196, label %194, !dbg !76

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

198:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %201, label %199, !dbg !76

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

__nv_sqrtf.exit15:                                ; preds = %194, %196, %199, %201
  %.0.i13 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !76
  %203 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !49
  %204 = insertelement <2 x i32> %203, i32 %89, i64 1, !dbg !49
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !49
  %206 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !44
  %207 = insertelement <2 x i32> %206, i32 %77, i64 1, !dbg !44
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !44
  %209 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !52
  %210 = insertelement <2 x i32> %209, i32 %97, i64 1, !dbg !52
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !52
  %212 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !57
  %213 = insertelement <2 x i32> %212, i32 %108, i64 1, !dbg !57
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !57
  %215 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !59
  %216 = insertelement <2 x i32> %215, i32 %116, i64 1, !dbg !59
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !59
  %218 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !62
  %219 = insertelement <2 x i32> %218, i32 %124, i64 1, !dbg !62
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !62
  %221 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !65
  %222 = insertelement <2 x i32> %221, i32 %132, i64 1, !dbg !65
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !65
  %224 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !68
  %225 = insertelement <2 x i32> %224, i32 %140, i64 1, !dbg !68
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !68
  %227 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !71
  %228 = insertelement <2 x i32> %227, i32 %148, i64 1, !dbg !71
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !71
  %230 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !28
  %231 = insertelement <4 x i32> %230, i32 %45, i64 1, !dbg !28
  %232 = insertelement <4 x i32> %231, i32 %31, i64 2, !dbg !28
  %233 = insertelement <4 x i32> %232, i32 %32, i64 3, !dbg !28
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !28
  %235 = fcmp uno <2 x float> %217, zeroinitializer, !dbg !77
  %236 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !32
  %237 = insertelement <4 x i32> %236, i32 %53, i64 1, !dbg !32
  %238 = insertelement <4 x i32> %237, i32 %39, i64 2, !dbg !32
  %239 = insertelement <4 x i32> %238, i32 %40, i64 3, !dbg !32
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !32
  %241 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !34
  %242 = insertelement <4 x i32> %241, i32 %56, i64 1, !dbg !34
  %243 = insertelement <4 x i32> %242, i32 %42, i64 2, !dbg !34
  %244 = insertelement <4 x i32> %243, i32 %43, i64 3, !dbg !34
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !34
  %246 = fcmp ogt <2 x float> %205, %208, !dbg !81
  %247 = fcmp uno <2 x float> %205, zeroinitializer, !dbg !83
  %248 = or <2 x i1> %246, %247, !dbg !84
  %.v = select <2 x i1> %248, <2 x i32> %204, <2 x i32> %207, !dbg !85
  %249 = bitcast <2 x i32> %.v to <2 x float>, !dbg !85
  %250 = fcmp olt <2 x float> %249, %211, !dbg !86
  %251 = fcmp uno <2 x float> %211, zeroinitializer, !dbg !88
  %252 = or <2 x i1> %251, %250, !dbg !89
  %.v16 = select <2 x i1> %252, <2 x i32> %210, <2 x i32> %.v, !dbg !90
  %253 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !90
  %254 = fcmp olt <2 x float> %253, %214, !dbg !91
  %255 = fcmp uno <2 x float> %214, zeroinitializer, !dbg !93
  %256 = or <2 x i1> %255, %254, !dbg !94
  %.v17 = select <2 x i1> %256, <2 x i32> %213, <2 x i32> %.v16, !dbg !95
  %257 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !95
  %258 = fcmp olt <2 x float> %257, %217, !dbg !96
  %259 = or <2 x i1> %235, %258, !dbg !97
  %.v18 = select <2 x i1> %259, <2 x i32> %216, <2 x i32> %.v17, !dbg !98
  %260 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !98
  %261 = fcmp olt <2 x float> %260, %220, !dbg !99
  %262 = fcmp uno <2 x float> %220, zeroinitializer, !dbg !101
  %263 = or <2 x i1> %262, %261, !dbg !102
  %.v19 = select <2 x i1> %263, <2 x i32> %219, <2 x i32> %.v18, !dbg !103
  %264 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !103
  %265 = fcmp olt <2 x float> %264, %223, !dbg !104
  %266 = fcmp uno <2 x float> %223, zeroinitializer, !dbg !106
  %267 = or <2 x i1> %266, %265, !dbg !107
  %.v20 = select <2 x i1> %267, <2 x i32> %222, <2 x i32> %.v19, !dbg !108
  %268 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !108
  %269 = fcmp olt <2 x float> %268, %226, !dbg !109
  %270 = fcmp uno <2 x float> %226, zeroinitializer, !dbg !111
  %271 = or <2 x i1> %270, %269, !dbg !112
  %.v21 = select <2 x i1> %271, <2 x i32> %225, <2 x i32> %.v20, !dbg !113
  %272 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !113
  %273 = fcmp olt <2 x float> %272, %229, !dbg !114
  %274 = zext <2 x i1> %246 to <2 x i8>, !dbg !116
  %275 = select <2 x i1> %250, <2 x i8> splat (i8 2), <2 x i8> %274, !dbg !117
  %276 = select <2 x i1> %254, <2 x i8> splat (i8 3), <2 x i8> %275, !dbg !118
  %277 = select <2 x i1> %258, <2 x i8> splat (i8 4), <2 x i8> %276, !dbg !119
  %278 = select <2 x i1> %261, <2 x i8> splat (i8 5), <2 x i8> %277, !dbg !120
  %279 = select <2 x i1> %265, <2 x i8> splat (i8 6), <2 x i8> %278, !dbg !121
  %280 = select <2 x i1> %269, <2 x i8> splat (i8 7), <2 x i8> %279, !dbg !122
  %281 = select <2 x i1> %273, <2 x i8> splat (i8 8), <2 x i8> %280, !dbg !123
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !124
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !124
  %284 = fcmp uno <2 x float> %229, zeroinitializer, !dbg !125
  %285 = or <2 x i1> %284, %273, !dbg !126
  %.v22 = select <2 x i1> %285, <2 x i32> %228, <2 x i32> %.v21, !dbg !127
  %286 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !127
  %287 = shufflevector <2 x float> %286, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 0, i32 1>, !dbg !127
  %288 = fsub <4 x float> %287, %234, !dbg !128
  %289 = insertelement <4 x float> poison, float %283, i64 0, !dbg !129
  %290 = insertelement <4 x float> %289, float %282, i64 1, !dbg !129
  %291 = insertelement <4 x float> %290, float %175, i64 2, !dbg !129
  %292 = insertelement <4 x float> %291, float %176, i64 3, !dbg !129
  %293 = fmul <4 x float> %288, %292, !dbg !129
  %294 = fmul <4 x float> %293, %240, !dbg !130
  %295 = fadd <4 x float> %294, %245, !dbg !131
  %296 = fcmp olt <4 x float> %295, zeroinitializer, !dbg !132
  %297 = extractelement <4 x i1> %296, i64 3, !dbg !134
  %298 = extractelement <4 x i1> %296, i64 2, !dbg !134
  %299 = extractelement <4 x i1> %296, i64 1, !dbg !136
  %300 = extractelement <4 x i1> %296, i64 0, !dbg !136
  %301 = sext i32 %20 to i64, !dbg !137
  %302 = getelementptr float, ptr addrspace(1) %9, i64 %301, !dbg !137
  %303 = extractelement <2 x i32> %.v22, i64 0, !dbg !138
  %304 = extractelement <2 x i32> %.v22, i64 1, !dbg !138
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %303, i32 %304, ptr addrspace(1) %302, i1 true) #3, !dbg !138
  %305 = getelementptr i8, ptr addrspace(1) %10, i64 %301, !dbg !139
  %306 = bitcast <2 x i8> %281 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %306, ptr addrspace(1) %305, i1 true) #3, !dbg !140
  %307 = getelementptr float, ptr addrspace(1) %11, i64 %301, !dbg !141
  %bc = bitcast <4 x float> %295 to <4 x i32>, !dbg !142
  %308 = extractelement <4 x i32> %bc, i64 2, !dbg !142
  %309 = select i1 %298, i32 0, i32 %308, !dbg !134
  %bc23 = bitcast <4 x float> %295 to <4 x i32>, !dbg !142
  %310 = extractelement <4 x i32> %bc23, i64 3, !dbg !142
  %311 = select i1 %297, i32 0, i32 %310, !dbg !134
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %309, i32 %311, ptr addrspace(1) %307, i1 true) #3, !dbg !142
  %312 = getelementptr float, ptr addrspace(1) %12, i64 %301, !dbg !143
  %bc24 = bitcast <4 x float> %295 to <4 x i32>, !dbg !144
  %313 = extractelement <4 x i32> %bc24, i64 1, !dbg !144
  %314 = select i1 %299, i32 0, i32 %313, !dbg !136
  %bc25 = bitcast <4 x float> %295 to <4 x i32>, !dbg !144
  %315 = extractelement <4 x i32> %bc25, i64 0, !dbg !144
  %316 = select i1 %300, i32 0, i32 %315, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %314, i32 %316, ptr addrspace(1) %312, i1 true) #3, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjk7cijecz4qsjo7e44q6mozuyy64643ugcn3xjvntpz245t4lca.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 32, scope: !7)
!32 = !DILocation(line: 35, column: 37, scope: !7)
!33 = !DILocation(line: 36, column: 32, scope: !7)
!34 = !DILocation(line: 36, column: 37, scope: !7)
!35 = !DILocation(line: 70, column: 20, scope: !7)
!36 = !DILocation(line: 39, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 19, scope: !7)
!40 = !DILocation(line: 48, column: 49, scope: !7)
!41 = !DILocation(line: 48, column: 39, scope: !7)
!42 = !DILocation(line: 48, column: 46, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 54, scope: !7)
!45 = !DILocation(line: 50, column: 21, scope: !7)
!46 = !DILocation(line: 53, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 46, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 54, scope: !7)
!50 = !DILocation(line: 61, column: 46, scope: !7)
!51 = !DILocation(line: 61, column: 31, scope: !7)
!52 = !DILocation(line: 61, column: 54, scope: !7)
!53 = !DILocation(line: 64, column: 21, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 45, scope: !7)
!56 = !DILocation(line: 68, column: 31, scope: !7)
!57 = !DILocation(line: 68, column: 53, scope: !7)
!58 = !DILocation(line: 71, column: 31, scope: !7)
!59 = !DILocation(line: 71, column: 46, scope: !7)
!60 = !DILocation(line: 74, column: 42, scope: !7)
!61 = !DILocation(line: 74, column: 31, scope: !7)
!62 = !DILocation(line: 74, column: 50, scope: !7)
!63 = !DILocation(line: 81, column: 43, scope: !7)
!64 = !DILocation(line: 81, column: 31, scope: !7)
!65 = !DILocation(line: 81, column: 51, scope: !7)
!66 = !DILocation(line: 84, column: 43, scope: !7)
!67 = !DILocation(line: 84, column: 31, scope: !7)
!68 = !DILocation(line: 84, column: 51, scope: !7)
!69 = !DILocation(line: 87, column: 43, scope: !7)
!70 = !DILocation(line: 87, column: 31, scope: !7)
!71 = !DILocation(line: 87, column: 51, scope: !7)
!72 = !DILocation(line: 116, column: 20, scope: !7)
!73 = !DILocation(line: 117, column: 27, scope: !7)
!74 = !DILocation(line: 119, column: 20, scope: !7)
!75 = !DILocation(line: 128, column: 20, scope: !7)
!76 = !DILocation(line: 129, column: 27, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 72, column: 42, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !82)
!82 = !DILocation(line: 55, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !87)
!87 = !DILocation(line: 62, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !92)
!92 = !DILocation(line: 69, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 75, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 82, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 85, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 88, column: 42, scope: !7)
!116 = !DILocation(line: 92, column: 35, scope: !7)
!117 = !DILocation(line: 95, column: 35, scope: !7)
!118 = !DILocation(line: 98, column: 35, scope: !7)
!119 = !DILocation(line: 101, column: 35, scope: !7)
!120 = !DILocation(line: 104, column: 35, scope: !7)
!121 = !DILocation(line: 107, column: 35, scope: !7)
!122 = !DILocation(line: 110, column: 35, scope: !7)
!123 = !DILocation(line: 113, column: 35, scope: !7)
!124 = !DILocation(line: 130, column: 20, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!126 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!127 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!128 = !DILocation(line: 127, column: 20, scope: !7)
!129 = !DILocation(line: 132, column: 21, scope: !7)
!130 = !DILocation(line: 133, column: 22, scope: !7)
!131 = !DILocation(line: 134, column: 22, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !133)
!133 = !DILocation(line: 135, column: 43, scope: !7)
!134 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !135)
!135 = !DILocation(line: 126, column: 42, scope: !7)
!136 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !133)
!137 = !DILocation(line: 136, column: 25, scope: !7)
!138 = !DILocation(line: 136, column: 37, scope: !7)
!139 = !DILocation(line: 137, column: 25, scope: !7)
!140 = !DILocation(line: 137, column: 37, scope: !7)
!141 = !DILocation(line: 138, column: 25, scope: !7)
!142 = !DILocation(line: 138, column: 37, scope: !7)
!143 = !DILocation(line: 139, column: 25, scope: !7)
!144 = !DILocation(line: 139, column: 38, scope: !7)
!145 = !DILocation(line: 139, column: 4, scope: !7)
