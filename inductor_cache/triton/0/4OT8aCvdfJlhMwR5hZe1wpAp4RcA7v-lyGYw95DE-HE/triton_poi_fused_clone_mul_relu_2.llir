; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_mul_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = shl nuw nsw i32 %9, 1, !dbg !12
  %.lobit1 = lshr i32 %8, 3, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 4, !dbg !14
  %15 = icmp slt i32 %13, 4, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = lshr i32 %8, 1, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = shl i32 %8, 1, !dbg !17
  %21 = and i32 %20, 14, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %17, %21, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !19
  %25 = icmp slt i32 %23, 16, !dbg !19
  %26 = srem i32 %22, 4, !dbg !20
  %27 = shl i32 %22, 2, !dbg !21
  %28 = add i32 %27, %12, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = and i1 %14, %24, !dbg !24
  %32 = and i1 %15, %25, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = sext i32 %26 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #2, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #2, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = fadd float %36, %42, !dbg !28
  %44 = fadd float %37, %42, !dbg !28
  %45 = fcmp olt float %43, 0.000000e+00, !dbg !29
  %46 = fcmp olt float %44, 0.000000e+00, !dbg !29
  %47 = select i1 %45, float 0.000000e+00, float %43, !dbg !33
  %48 = select i1 %46, float 0.000000e+00, float %44, !dbg !33
  %49 = shl i32 %13, 4, !dbg !34
  %50 = add i32 %23, %49, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !36
  %53 = shl nuw nsw i32 %9, 5, !dbg !37
  %54 = or disjoint i32 %53, %19, !dbg !37
  %55 = and i32 %20, 62, !dbg !37
  %56 = add nuw nsw i32 %54, %10, !dbg !37
  %57 = zext nneg i32 %56 to i64, !dbg !37
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %57, !dbg !37
  %59 = bitcast float %47 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #2, !dbg !37
  %60 = or disjoint i32 %54, 16, !dbg !37
  %61 = lshr i32 %60, 4, !dbg !37
  %62 = add nuw nsw i32 %61, %60, !dbg !37
  %63 = zext nneg i32 %62 to i64, !dbg !37
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63, !dbg !37
  %65 = bitcast float %48 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %66 = lshr i32 %55, 4, !dbg !37
  %67 = add nuw nsw i32 %66, %55, !dbg !37
  %68 = zext nneg i32 %67 to i64, !dbg !37
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !37
  %70 = load i32, ptr addrspace(3) %69, align 4, !dbg !37
  %71 = or disjoint i32 %55, 1, !dbg !37
  %72 = add nuw nsw i32 %71, %66, !dbg !37
  %73 = zext nneg i32 %72 to i64, !dbg !37
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %73, !dbg !37
  %75 = load i32, ptr addrspace(3) %74, align 4, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %75, ptr addrspace(1) %52, i1 %32) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5vaukwyprhdnxps76u7uvonwxkzrqt6d4yuatx4ofg5vplafwvk.py", directory: "inductor_cache/5v")
!4 = !{ptr @triton_poi_fused_clone_mul_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_mul_relu_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_mul_relu_2", linkageName: "triton_poi_fused_clone_mul_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 37, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 50, scope: !7)
!25 = !DILocation(line: 31, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 38, column: 33, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 44, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
