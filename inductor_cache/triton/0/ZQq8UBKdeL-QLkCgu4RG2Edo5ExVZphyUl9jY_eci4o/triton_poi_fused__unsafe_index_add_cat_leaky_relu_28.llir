; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 32, !dbg !14
  %14 = srem i32 %13, 32, !dbg !15
  %15 = mul i32 %13, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen2 = freeze i32 %12, !dbg !17
  %16 = sdiv i32 %.frozen2, 1024, !dbg !17
  %17 = srem i32 %16, 64, !dbg !18
  %.frozen4 = freeze i32 %12, !dbg !19
  %18 = sdiv i32 %.frozen4, 65536, !dbg !19
  %19 = mul i32 %16, 1024, !dbg !20
  %.decomposed3 = sub i32 %.frozen2, %19, !dbg !20
  %20 = sext i32 %14 to i64, !dbg !21
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !22
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !22
  %24 = sext i32 %.decomposed to i64, !dbg !23
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !24
  %27 = extractvalue { i64, i64 } %26, 0, !dbg !24
  %28 = extractvalue { i64, i64 } %26, 1, !dbg !24
  %29 = lshr i64 %22, 59, !dbg !25
  %30 = and i64 %29, 16, !dbg !25
  %31 = add i64 %30, %22, !dbg !25
  %32 = lshr i64 %27, 59, !dbg !26
  %33 = and i64 %32, 16, !dbg !26
  %34 = lshr i64 %28, 59, !dbg !26
  %35 = and i64 %34, 16, !dbg !26
  %36 = shl i64 %31, 4, !dbg !27
  %37 = shl nsw i32 %16, 8, !dbg !28
  %38 = sext i32 %37 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %39, i64 %33, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %40, i64 %36, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %41, i64 %38, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %35, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %36, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %45, i64 %38, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = fcmp ogt float %48, 0.000000e+00, !dbg !32
  %52 = fcmp ogt float %50, 0.000000e+00, !dbg !32
  %53 = fmul float %48, 0x3FC99999A0000000, !dbg !33
  %54 = fmul float %50, 0x3FC99999A0000000, !dbg !33
  %55 = select i1 %51, float %48, float %53, !dbg !34
  %56 = select i1 %52, float %50, float %54, !dbg !34
  %57 = icmp slt i32 %17, 48, !dbg !35
  %58 = mul i32 %18, 65536, !dbg !36
  %srem.decomposed = sub i32 %.frozen4, %58, !dbg !36
  %59 = mul nsw i32 %18, 49152, !dbg !37
  %60 = add nsw i32 %59, %srem.decomposed, !dbg !38
  %61 = sext i32 %60 to i64, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !39
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #1, !dbg !40
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !40
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !40
  %66 = icmp sgt i32 %17, 47, !dbg !41
  %67 = shl nsw i32 %17, 10, !dbg !42
  %68 = shl nsw i32 %18, 14, !dbg !43
  %69 = add nsw i32 %.decomposed3, -49152, !dbg !42
  %70 = add nsw i32 %69, %68, !dbg !44
  %71 = add nsw i32 %70, %67, !dbg !45
  %72 = sext i32 %71 to i64, !dbg !46
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !46
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !47
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !47
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !47
  %.v = select i1 %57, i32 %64, i32 %75, !dbg !48
  %77 = bitcast i32 %.v to float, !dbg !48
  %.v1 = select i1 %57, i32 %65, i32 %76, !dbg !48
  %78 = bitcast i32 %.v1 to float, !dbg !48
  %79 = fadd float %55, %77, !dbg !49
  %80 = fadd float %56, %78, !dbg !49
  %81 = sext i32 %12 to i64, !dbg !50
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !50
  %83 = bitcast float %79 to i32, !dbg !51
  %84 = bitcast float %80 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %84, ptr addrspace(1) %82, i1 true) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsk6swswzs3rixnaowgnd6c6xnvdkkugnznf63dqr2rklrjbup3.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_28", linkageName: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 32, scope: !7)
!26 = !DILocation(line: 39, column: 32, scope: !7)
!27 = !DILocation(line: 40, column: 40, scope: !7)
!28 = !DILocation(line: 40, column: 51, scope: !7)
!29 = !DILocation(line: 40, column: 47, scope: !7)
!30 = !DILocation(line: 40, column: 30, scope: !7)
!31 = !DILocation(line: 40, column: 56, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 34, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 36, scope: !7)
!37 = !DILocation(line: 51, column: 54, scope: !7)
!38 = !DILocation(line: 51, column: 48, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 59, scope: !7)
!41 = !DILocation(line: 52, column: 21, scope: !7)
!42 = !DILocation(line: 55, column: 42, scope: !7)
!43 = !DILocation(line: 55, column: 62, scope: !7)
!44 = !DILocation(line: 55, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 56, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 67, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
