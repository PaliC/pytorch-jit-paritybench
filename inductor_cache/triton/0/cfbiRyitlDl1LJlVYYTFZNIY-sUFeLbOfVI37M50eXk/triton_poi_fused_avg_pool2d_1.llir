; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 3072, !dbg !14
  %12 = sdiv i32 %9, 16, !dbg !15
  %13 = srem i32 %10, 16, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %14 = sdiv i32 %.frozen, 768, !dbg !17
  %15 = srem i32 %12, 48, !dbg !18
  %16 = mul i32 %14, 768, !dbg !19
  %.decomposed = sub i32 %.frozen, %16, !dbg !19
  %17 = shl nsw i32 %13, 1, !dbg !20
  %18 = icmp sgt i32 %13, 0, !dbg !21
  %19 = shl nsw i32 %15, 6, !dbg !22
  %20 = mul i32 %14, 19456, !dbg !23
  %21 = add i32 %19, %20, !dbg !24
  %22 = add i32 %21, -33, !dbg !25
  %23 = add i32 %22, %17, !dbg !26
  %24 = sext i32 %23 to i64, !dbg !27
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !27
  %26 = icmp sgt i32 %13, -1, !dbg !28
  %27 = add i32 %21, -32, !dbg !29
  %28 = add i32 %27, %17, !dbg !30
  %29 = sext i32 %28 to i64, !dbg !31
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !31
  %31 = add i32 %21, -31, !dbg !32
  %32 = add i32 %31, %17, !dbg !33
  %33 = sext i32 %32 to i64, !dbg !34
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !34
  %35 = add i32 %21, -1, !dbg !35
  %36 = add i32 %35, %17, !dbg !36
  %37 = sext i32 %36 to i64, !dbg !37
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !37
  %39 = add i32 %21, %17, !dbg !38
  %40 = sext i32 %39 to i64, !dbg !39
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !39
  %42 = or disjoint i32 %21, 1, !dbg !40
  %43 = add i32 %42, %17, !dbg !41
  %44 = sext i32 %43 to i64, !dbg !42
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !42
  %46 = or disjoint i32 %21, 31, !dbg !43
  %47 = add i32 %46, %17, !dbg !44
  %48 = sext i32 %47 to i64, !dbg !45
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !45
  %50 = or disjoint i32 %21, 32, !dbg !46
  %51 = add i32 %50, %17, !dbg !47
  %52 = sext i32 %51 to i64, !dbg !48
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !48
  %54 = or disjoint i32 %21, 33, !dbg !49
  %55 = add i32 %54, %17, !dbg !50
  %56 = sext i32 %55 to i64, !dbg !51
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !51
  %58 = mul nsw i32 %13, -2, !dbg !52
  %59 = add nsw i32 %17, 2, !dbg !53
  %60 = shl nsw i32 %13, 2, !dbg !54
  %61 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %62 = insertelement <2 x i32> %61, i32 %12, i64 1, !dbg !16
  %63 = srem <2 x i32> %62, splat (i32 16), !dbg !16
  %64 = extractelement <2 x i32> %63, i64 1, !dbg !55
  %65 = shl nsw i32 %64, 1, !dbg !56
  %66 = icmp sgt i32 %64, 0, !dbg !57
  %67 = extractelement <2 x i32> %63, i64 0, !dbg !54
  %68 = shl nsw i32 %67, 1, !dbg !20
  %69 = icmp sgt i32 %67, 0, !dbg !21
  %70 = and i1 %69, %66, !dbg !58
  %71 = and i1 %18, %66, !dbg !58
  %72 = add i32 %22, %68, !dbg !26
  %73 = sext i32 %72 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !27
  %75 = and i1 %11, %70, !dbg !59
  %76 = and i1 %11, %71, !dbg !59
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #1, !dbg !60
  %78 = bitcast i32 %77 to float, !dbg !60
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %76, i32 0, i1 %76) #1, !dbg !60
  %80 = bitcast i32 %79 to float, !dbg !60
  %81 = icmp sgt i32 %67, -1, !dbg !28
  %82 = and i1 %81, %66, !dbg !61
  %83 = and i1 %26, %66, !dbg !61
  %84 = add i32 %27, %68, !dbg !30
  %85 = sext i32 %84 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = and i1 %11, %82, !dbg !62
  %88 = and i1 %11, %83, !dbg !62
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %87, i32 0, i1 %87) #1, !dbg !63
  %90 = bitcast i32 %89 to float, !dbg !63
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %88, i32 0, i1 %88) #1, !dbg !63
  %92 = bitcast i32 %91 to float, !dbg !63
  %93 = fadd float %78, %90, !dbg !64
  %94 = fadd float %80, %92, !dbg !64
  %95 = add i32 %31, %68, !dbg !33
  %96 = sext i32 %95 to i64, !dbg !34
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %87, i32 0, i1 %87) #1, !dbg !65
  %99 = bitcast i32 %98 to float, !dbg !65
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %88, i32 0, i1 %88) #1, !dbg !65
  %101 = bitcast i32 %100 to float, !dbg !65
  %102 = fadd float %93, %99, !dbg !66
  %103 = fadd float %94, %101, !dbg !66
  %104 = icmp sgt i32 %64, -1, !dbg !67
  %105 = and i1 %69, %104, !dbg !68
  %106 = and i1 %18, %104, !dbg !68
  %107 = add i32 %35, %68, !dbg !36
  %108 = sext i32 %107 to i64, !dbg !37
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !37
  %110 = and i1 %11, %105, !dbg !69
  %111 = and i1 %11, %106, !dbg !69
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %110, i32 0, i1 %110) #1, !dbg !70
  %113 = bitcast i32 %112 to float, !dbg !70
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %111, i32 0, i1 %111) #1, !dbg !70
  %115 = bitcast i32 %114 to float, !dbg !70
  %116 = fadd float %102, %113, !dbg !71
  %117 = fadd float %103, %115, !dbg !71
  %118 = or i32 %64, %67, !dbg !55
  %119 = icmp sgt i32 %118, -1, !dbg !55
  %120 = or i32 %64, %13, !dbg !55
  %121 = icmp sgt i32 %120, -1, !dbg !55
  %122 = add i32 %21, %68, !dbg !38
  %123 = sext i32 %122 to i64, !dbg !39
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !39
  %125 = and i1 %11, %119, !dbg !72
  %126 = and i1 %11, %121, !dbg !72
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %125, i32 0, i1 %125) #1, !dbg !73
  %128 = bitcast i32 %127 to float, !dbg !73
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %126, i32 0, i1 %126) #1, !dbg !73
  %130 = bitcast i32 %129 to float, !dbg !73
  %131 = fadd float %116, %128, !dbg !74
  %132 = fadd float %117, %130, !dbg !74
  %133 = add i32 %42, %68, !dbg !41
  %134 = sext i32 %133 to i64, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !42
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %125, i32 0, i1 %125) #1, !dbg !75
  %137 = bitcast i32 %136 to float, !dbg !75
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %126, i32 0, i1 %126) #1, !dbg !75
  %139 = bitcast i32 %138 to float, !dbg !75
  %140 = fadd float %131, %137, !dbg !76
  %141 = fadd float %132, %139, !dbg !76
  %142 = add i32 %46, %68, !dbg !44
  %143 = sext i32 %142 to i64, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !45
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %110, i32 0, i1 %110) #1, !dbg !77
  %146 = bitcast i32 %145 to float, !dbg !77
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %111, i32 0, i1 %111) #1, !dbg !77
  %148 = bitcast i32 %147 to float, !dbg !77
  %149 = fadd float %140, %146, !dbg !78
  %150 = fadd float %141, %148, !dbg !78
  %151 = add i32 %50, %68, !dbg !47
  %152 = sext i32 %151 to i64, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !48
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %125, i32 0, i1 %125) #1, !dbg !79
  %155 = bitcast i32 %154 to float, !dbg !79
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %126, i32 0, i1 %126) #1, !dbg !79
  %157 = bitcast i32 %156 to float, !dbg !79
  %158 = fadd float %149, %155, !dbg !80
  %159 = fadd float %150, %157, !dbg !80
  %160 = add i32 %54, %68, !dbg !50
  %161 = sext i32 %160 to i64, !dbg !51
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !51
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %125, i32 0, i1 %125) #1, !dbg !81
  %164 = bitcast i32 %163 to float, !dbg !81
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %126, i32 0, i1 %126) #1, !dbg !81
  %166 = bitcast i32 %165 to float, !dbg !81
  %167 = fadd float %158, %164, !dbg !82
  %168 = fadd float %159, %166, !dbg !82
  %169 = mul nsw i32 %64, -2, !dbg !83
  %170 = or disjoint i32 %68, 2, !dbg !53
  %171 = add nsw i32 %65, 2, !dbg !84
  %172 = mul nsw i32 %169, %170, !dbg !85
  %173 = mul nsw i32 %169, %59, !dbg !85
  %174 = shl nsw i32 %67, 2, !dbg !54
  %175 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %174, i64 1, !dbg !52
  %176 = mul nsw <2 x i32> %175, %63, !dbg !52
  %177 = mul nsw i32 %60, %64, !dbg !86
  %178 = extractelement <2 x i32> %176, i64 0, !dbg !87
  %reass.add = add nsw i32 %170, %178
  %reass.mul = mul nsw i32 %reass.add, %171
  %179 = add nsw i32 %171, %169, !dbg !88
  %180 = or disjoint i32 %179, 1, !dbg !89
  %181 = add nsw i32 %180, %178, !dbg !87
  %182 = extractelement <2 x i32> %176, i64 1, !dbg !90
  %183 = add nsw i32 %181, %182, !dbg !90
  %184 = add i32 %183, %170, !dbg !91
  %185 = add i32 %184, %172, !dbg !92
  %186 = add i32 %185, %reass.mul, !dbg !93
  %reass.add1 = add nsw i32 %59, %58
  %reass.mul2 = mul nsw i32 %171, %reass.add1
  %187 = add nsw i32 %180, %58, !dbg !87
  %188 = add nsw i32 %187, %59, !dbg !90
  %189 = add i32 %188, %177, !dbg !91
  %190 = add i32 %189, %173, !dbg !92
  %191 = add i32 %190, %reass.mul2, !dbg !93
  %192 = sitofp i32 %186 to float, !dbg !94
  %193 = sitofp i32 %191 to float, !dbg !94
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %192) #1, !dbg !94
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %193) #1, !dbg !94
  %196 = mul i32 %14, 33536, !dbg !95
  %197 = add i32 %196, %.decomposed, !dbg !96
  %198 = sext i32 %197 to i64, !dbg !97
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !97
  %200 = bitcast float %194 to i32, !dbg !98
  %201 = bitcast float %195 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %201, ptr addrspace(1) %199, i1 %11) #1, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgag2skrvc6xuwirx6h2powgrwvulv4vesfx72fbe7l5qjhfzise.py", directory: "inductor_cache/ga")
!4 = !{ptr @triton_poi_fused_avg_pool2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_1", linkageName: "triton_poi_fused_avg_pool2d_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 20, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 49, scope: !7)
!23 = !DILocation(line: 40, column: 60, scope: !7)
!24 = !DILocation(line: 40, column: 39, scope: !7)
!25 = !DILocation(line: 40, column: 46, scope: !7)
!26 = !DILocation(line: 40, column: 54, scope: !7)
!27 = !DILocation(line: 40, column: 31, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 46, column: 46, scope: !7)
!30 = !DILocation(line: 46, column: 54, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 53, column: 46, scope: !7)
!33 = !DILocation(line: 53, column: 54, scope: !7)
!34 = !DILocation(line: 53, column: 31, scope: !7)
!35 = !DILocation(line: 60, column: 45, scope: !7)
!36 = !DILocation(line: 60, column: 53, scope: !7)
!37 = !DILocation(line: 60, column: 31, scope: !7)
!38 = !DILocation(line: 63, column: 46, scope: !7)
!39 = !DILocation(line: 63, column: 31, scope: !7)
!40 = !DILocation(line: 66, column: 42, scope: !7)
!41 = !DILocation(line: 66, column: 50, scope: !7)
!42 = !DILocation(line: 66, column: 31, scope: !7)
!43 = !DILocation(line: 73, column: 43, scope: !7)
!44 = !DILocation(line: 73, column: 51, scope: !7)
!45 = !DILocation(line: 73, column: 31, scope: !7)
!46 = !DILocation(line: 76, column: 43, scope: !7)
!47 = !DILocation(line: 76, column: 51, scope: !7)
!48 = !DILocation(line: 76, column: 31, scope: !7)
!49 = !DILocation(line: 79, column: 43, scope: !7)
!50 = !DILocation(line: 79, column: 51, scope: !7)
!51 = !DILocation(line: 79, column: 31, scope: !7)
!52 = !DILocation(line: 81, column: 22, scope: !7)
!53 = !DILocation(line: 81, column: 62, scope: !7)
!54 = !DILocation(line: 81, column: 328, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 29, column: 20, scope: !7)
!57 = !DILocation(line: 31, column: 19, scope: !7)
!58 = !DILocation(line: 39, column: 19, scope: !7)
!59 = !DILocation(line: 40, column: 73, scope: !7)
!60 = !DILocation(line: 40, column: 65, scope: !7)
!61 = !DILocation(line: 45, column: 19, scope: !7)
!62 = !DILocation(line: 46, column: 73, scope: !7)
!63 = !DILocation(line: 46, column: 65, scope: !7)
!64 = !DILocation(line: 47, column: 20, scope: !7)
!65 = !DILocation(line: 53, column: 65, scope: !7)
!66 = !DILocation(line: 54, column: 20, scope: !7)
!67 = !DILocation(line: 56, column: 21, scope: !7)
!68 = !DILocation(line: 59, column: 20, scope: !7)
!69 = !DILocation(line: 60, column: 72, scope: !7)
!70 = !DILocation(line: 60, column: 64, scope: !7)
!71 = !DILocation(line: 61, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 65, scope: !7)
!73 = !DILocation(line: 63, column: 57, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 66, column: 61, scope: !7)
!76 = !DILocation(line: 67, column: 20, scope: !7)
!77 = !DILocation(line: 73, column: 62, scope: !7)
!78 = !DILocation(line: 74, column: 20, scope: !7)
!79 = !DILocation(line: 76, column: 62, scope: !7)
!80 = !DILocation(line: 77, column: 20, scope: !7)
!81 = !DILocation(line: 79, column: 62, scope: !7)
!82 = !DILocation(line: 80, column: 20, scope: !7)
!83 = !DILocation(line: 81, column: 34, scope: !7)
!84 = !DILocation(line: 81, column: 127, scope: !7)
!85 = !DILocation(line: 81, column: 259, scope: !7)
!86 = !DILocation(line: 81, column: 331, scope: !7)
!87 = !DILocation(line: 81, column: 173, scope: !7)
!88 = !DILocation(line: 81, column: 29, scope: !7)
!89 = !DILocation(line: 81, column: 40, scope: !7)
!90 = !DILocation(line: 81, column: 250, scope: !7)
!91 = !DILocation(line: 81, column: 326, scope: !7)
!92 = !DILocation(line: 81, column: 337, scope: !7)
!93 = !DILocation(line: 81, column: 404, scope: !7)
!94 = !DILocation(line: 82, column: 20, scope: !7)
!95 = !DILocation(line: 83, column: 36, scope: !7)
!96 = !DILocation(line: 83, column: 30, scope: !7)
!97 = !DILocation(line: 83, column: 25, scope: !7)
!98 = !DILocation(line: 83, column: 48, scope: !7)
!99 = !DILocation(line: 83, column: 4, scope: !7)
