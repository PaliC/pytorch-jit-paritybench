; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 28, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = lshr i32 %8, 3, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = or disjoint i32 %19, %10, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !19
  %25 = icmp slt i32 %23, 16, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %26 = sdiv i32 %.frozen, 16, !dbg !20
  %27 = mul i32 %26, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = sdiv i32 %15, 16, !dbg !20
  %29 = shl i32 %22, 4, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = shl i32 %26, 8, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %16, %24, !dbg !27
  %36 = and i1 %17, %25, !dbg !27
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !28
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !28
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !28
  %42 = bitcast i32 %38 to float, !dbg !28
  %43 = bitcast i32 %39 to float, !dbg !28
  %44 = bitcast i32 %40 to float, !dbg !28
  %45 = bitcast i32 %41 to float, !dbg !28
  %46 = shl nsw i32 %28, 4, !dbg !29
  %47 = add i32 %46, %23, !dbg !30
  %48 = sext i32 %47 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !31
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %36) #2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !32
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !32
  %55 = bitcast i32 %51 to float, !dbg !32
  %56 = bitcast i32 %52 to float, !dbg !32
  %57 = bitcast i32 %53 to float, !dbg !32
  %58 = bitcast i32 %54 to float, !dbg !32
  %59 = fcmp olt float %42, 0.000000e+00, !dbg !33
  %60 = fcmp olt float %43, 0.000000e+00, !dbg !33
  %61 = fcmp olt float %44, 0.000000e+00, !dbg !33
  %62 = fcmp olt float %45, 0.000000e+00, !dbg !33
  %63 = select i1 %59, float 0.000000e+00, float %42, !dbg !37
  %64 = select i1 %60, float 0.000000e+00, float %43, !dbg !37
  %65 = select i1 %61, float 0.000000e+00, float %44, !dbg !37
  %66 = select i1 %62, float 0.000000e+00, float %45, !dbg !37
  %67 = fadd float %63, 0x3F50624DE0000000, !dbg !38
  %68 = fadd float %64, 0x3F50624DE0000000, !dbg !38
  %69 = fadd float %65, 0x3F50624DE0000000, !dbg !38
  %70 = fadd float %66, 0x3F50624DE0000000, !dbg !38
  %71 = shl i32 %8, 6, !dbg !38
  %72 = and i32 %71, 448, !dbg !38
  %73 = or disjoint i32 %72, %21, !dbg !38
  %74 = and i32 %9, 508, !dbg !38
  %75 = lshr exact i32 %72, 2, !dbg !38
  %76 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %75, !dbg !38
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %73, !dbg !38
  %78 = bitcast float %67 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !38
  %79 = or disjoint i32 %73, 16, !dbg !38
  %80 = lshr i32 %79, 4, !dbg !38
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !38
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !38
  %83 = bitcast float %68 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !38
  %84 = or disjoint i32 %73, 32, !dbg !38
  %85 = lshr i32 %84, 4, !dbg !38
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !38
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !38
  %88 = bitcast float %69 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !38
  %89 = or disjoint i32 %73, 48, !dbg !38
  %90 = lshr i32 %89, 4, !dbg !38
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !38
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !38
  %93 = bitcast float %70 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %94 = lshr i32 %74, 4, !dbg !38
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !38
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %74, !dbg !38
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !38
  %98 = or disjoint i32 %74, 1, !dbg !38
  %99 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %98, !dbg !38
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !38
  %101 = or disjoint i32 %74, 2, !dbg !38
  %102 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %101, !dbg !38
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !38
  %104 = or disjoint i32 %74, 3, !dbg !38
  %105 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %104, !dbg !38
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !38
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %55) #2, !dbg !39
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %56) #2, !dbg !39
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %57) #2, !dbg !39
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %58) #2, !dbg !39
  %111 = shl i32 %15, 4, !dbg !40
  %112 = add i32 %23, %111, !dbg !41
  %113 = sext i32 %112 to i64, !dbg !42
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !42
  %115 = bitcast float %107 to i32, !dbg !43
  %116 = bitcast float %108 to i32, !dbg !43
  %117 = bitcast float %109 to i32, !dbg !43
  %118 = bitcast float %110 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %114, i1 %36) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ecwei2rataoseyblexmybp46ybodalvyngfnstjm27fe34lihf.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_add_div_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_relu_3", linkageName: "triton_poi_fused_add_div_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 35, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 33, scope: !7)
!41 = !DILocation(line: 39, column: 30, scope: !7)
!42 = !DILocation(line: 39, column: 25, scope: !7)
!43 = !DILocation(line: 39, column: 44, scope: !7)
!44 = !DILocation(line: 39, column: 4, scope: !7)
