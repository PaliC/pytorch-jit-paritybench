; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = srem i32 %12, 8, !dbg !14
  %14 = sdiv i32 %12, 512, !dbg !15
  %15 = srem i32 %14, 16, !dbg !16
  %16 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !17
  %17 = shufflevector <2 x i32> %16, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %18 = sdiv <2 x i32> %17, <i32 8, i32 64>, !dbg !17
  %19 = srem <2 x i32> %18, splat (i32 8), !dbg !18
  %20 = add nsw <2 x i32> %19, splat (i32 -2), !dbg !19
  %21 = add nsw i32 %13, -2, !dbg !20
  %22 = extractelement <2 x i32> %20, i64 0, !dbg !19
  %23 = or i32 %22, %21, !dbg !19
  %24 = extractelement <2 x i32> %20, i64 1, !dbg !20
  %25 = or i32 %23, %24, !dbg !20
  %26 = icmp ult i32 %25, 4, !dbg !20
  %27 = add nsw i32 %13, -42, !dbg !21
  %28 = extractelement <2 x i32> %19, i64 0, !dbg !22
  %29 = shl nsw i32 %28, 2, !dbg !22
  %30 = extractelement <2 x i32> %19, i64 1, !dbg !23
  %31 = shl nsw i32 %30, 4, !dbg !23
  %32 = shl nsw i32 %14, 6, !dbg !24
  %33 = add nsw i32 %27, %32, !dbg !25
  %34 = add nsw i32 %33, %29, !dbg !26
  %35 = add nsw i32 %34, %31, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %26, i32 0, i1 %26) #3, !dbg !29
  %39 = sext i32 %15 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %26, i32 0, i1 %26) #3, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %26, i32 0, i1 %26) #3, !dbg !33
  %44 = bitcast i32 %43 to float, !dbg !33
  %45 = fadd float %44, 0x3EE4F8B580000000, !dbg !34
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %46, 0, !dbg !35
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %47, 0, !dbg !35
  br i1 %.not.i, label %53, label %48, !dbg !35

48:                                               ; preds = %7
  br i1 %.not1.i, label %51, label %49, !dbg !35

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

53:                                               ; preds = %7
  br i1 %.not1.i, label %56, label %54, !dbg !35

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !35
  %58 = bitcast i32 %38 to float, !dbg !29
  %59 = bitcast i32 %41 to float, !dbg !31
  %60 = fsub float %58, %59, !dbg !36
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %62 = fmul float %60, %61, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %26, i32 0, i1 %26) #3, !dbg !40
  %65 = bitcast i32 %64 to float, !dbg !40
  %66 = fmul float %62, %65, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !42
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %26, i32 0, i1 %26) #3, !dbg !43
  %69 = bitcast i32 %68 to float, !dbg !43
  %70 = fadd float %66, %69, !dbg !44
  %71 = fcmp olt float %70, 0.000000e+00, !dbg !45
  %72 = select i1 %71, float 0.000000e+00, float %70, !dbg !49
  %73 = sext i32 %12 to i64, !dbg !50
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !50
  %75 = bitcast float %72 to i32, !dbg !51
  %76 = select i1 %26, i32 %75, i32 0, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %76, ptr addrspace(1) %74, i1 true) #3, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfu27phsscfi2uuhlupnwkzbim6akwnvzhkaa5lg3a6qaxmfoqq2.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 26, scope: !7)
!19 = !DILocation(line: 43, column: 20, scope: !7)
!20 = !DILocation(line: 45, column: 20, scope: !7)
!21 = !DILocation(line: 46, column: 39, scope: !7)
!22 = !DILocation(line: 46, column: 46, scope: !7)
!23 = !DILocation(line: 46, column: 54, scope: !7)
!24 = !DILocation(line: 46, column: 62, scope: !7)
!25 = !DILocation(line: 46, column: 44, scope: !7)
!26 = !DILocation(line: 46, column: 51, scope: !7)
!27 = !DILocation(line: 46, column: 59, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 67, scope: !7)
!30 = !DILocation(line: 47, column: 31, scope: !7)
!31 = !DILocation(line: 47, column: 36, scope: !7)
!32 = !DILocation(line: 49, column: 31, scope: !7)
!33 = !DILocation(line: 49, column: 36, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 27, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 31, scope: !7)
!40 = !DILocation(line: 58, column: 36, scope: !7)
!41 = !DILocation(line: 59, column: 20, scope: !7)
!42 = !DILocation(line: 60, column: 31, scope: !7)
!43 = !DILocation(line: 60, column: 36, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 63, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 66, column: 25, scope: !7)
!51 = !DILocation(line: 66, column: 37, scope: !7)
!52 = !DILocation(line: 65, column: 35, scope: !7)
!53 = !DILocation(line: 66, column: 4, scope: !7)
