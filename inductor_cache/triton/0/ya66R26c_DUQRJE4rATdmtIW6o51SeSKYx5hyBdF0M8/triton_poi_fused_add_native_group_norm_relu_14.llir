; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 8, !dbg !15
  %22 = and i32 %15, 252, !dbg !16
  %23 = and i32 %12, 255, !dbg !16
  %24 = or disjoint i32 %21, %22, !dbg !17
  %25 = or disjoint i32 %21, %23, !dbg !17
  %26 = icmp slt i32 %24, 256, !dbg !18
  %27 = icmp slt i32 %25, 256, !dbg !18
  %28 = sdiv i32 %16, 256, !dbg !19
  %29 = sdiv i32 %17, 256, !dbg !19
  %30 = sdiv i32 %18, 256, !dbg !19
  %31 = sdiv i32 %19, 256, !dbg !19
  %32 = shl i32 %16, 8, !dbg !20
  %33 = shl i32 %17, 8, !dbg !20
  %34 = shl i32 %18, 8, !dbg !20
  %35 = shl i32 %19, 8, !dbg !20
  %36 = add i32 %24, %32, !dbg !21
  %37 = add i32 %24, %33, !dbg !21
  %38 = add i32 %24, %34, !dbg !21
  %39 = add i32 %24, %35, !dbg !21
  %40 = sext i32 %36 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %37 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %38 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #4, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #4, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %26) #4, !dbg !23
  %52 = shl nsw i32 %28, 5, !dbg !24
  %53 = shl nsw i32 %29, 5, !dbg !24
  %54 = shl nsw i32 %30, 5, !dbg !24
  %55 = shl nsw i32 %31, 5, !dbg !24
  %56 = sdiv i32 %24, 8, !dbg !25
  %57 = add nsw i32 %52, %56, !dbg !26
  %58 = add nsw i32 %56, %53, !dbg !26
  %59 = add nsw i32 %56, %54, !dbg !26
  %60 = add nsw i32 %56, %55, !dbg !26
  %61 = sext i32 %57 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %63 = sext i32 %58 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !27
  %65 = sext i32 %59 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !27
  %67 = sext i32 %60 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #4, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #4, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #4, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #4, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #4, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #4, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %26) #4, !dbg !30
  %90 = bitcast i32 %89 to float, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %26) #4, !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %26) #4, !dbg !30
  %94 = bitcast i32 %93 to float, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %26) #4, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %26) #4, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %26) #4, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %26) #4, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %26) #4, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %26) #4, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %26) #4, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %26) #4, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %26) #4, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #4, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #4, !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #4, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %26) #4, !dbg !30
  %120 = bitcast i32 %119 to float, !dbg !30
  %121 = sext i32 %25 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %27) #4, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !33
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %27) #4, !dbg !34
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !35
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !35
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %26) #4, !dbg !36
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %26) #4, !dbg !36
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %26) #4, !dbg !36
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %26) #4, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 2.048000e+03) #4, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 2.048000e+03) #4, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 2.048000e+03) #4, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 2.048000e+03) #4, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 2.048000e+03) #4, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 2.048000e+03) #4, !dbg !37
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 2.048000e+03) #4, !dbg !37
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 2.048000e+03) #4, !dbg !37
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 2.048000e+03) #4, !dbg !37
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 2.048000e+03) #4, !dbg !37
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 2.048000e+03) #4, !dbg !37
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 2.048000e+03) #4, !dbg !37
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 2.048000e+03) #4, !dbg !37
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 2.048000e+03) #4, !dbg !37
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 2.048000e+03) #4, !dbg !37
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 2.048000e+03) #4, !dbg !37
  %150 = fadd float %134, 0x3EE4F8B580000000, !dbg !38
  %151 = fadd float %135, 0x3EE4F8B580000000, !dbg !38
  %152 = fadd float %136, 0x3EE4F8B580000000, !dbg !38
  %153 = fadd float %137, 0x3EE4F8B580000000, !dbg !38
  %154 = fadd float %138, 0x3EE4F8B580000000, !dbg !38
  %155 = fadd float %139, 0x3EE4F8B580000000, !dbg !38
  %156 = fadd float %140, 0x3EE4F8B580000000, !dbg !38
  %157 = fadd float %141, 0x3EE4F8B580000000, !dbg !38
  %158 = fadd float %142, 0x3EE4F8B580000000, !dbg !38
  %159 = fadd float %143, 0x3EE4F8B580000000, !dbg !38
  %160 = fadd float %144, 0x3EE4F8B580000000, !dbg !38
  %161 = fadd float %145, 0x3EE4F8B580000000, !dbg !38
  %162 = fadd float %146, 0x3EE4F8B580000000, !dbg !38
  %163 = fadd float %147, 0x3EE4F8B580000000, !dbg !38
  %164 = fadd float %148, 0x3EE4F8B580000000, !dbg !38
  %165 = fadd float %149, 0x3EE4F8B580000000, !dbg !38
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %166, 0, !dbg !39
  br i1 %.not.i, label %169, label %167, !dbg !39

167:                                              ; preds = %9
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

169:                                              ; preds = %9
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %167, %169
  %.0.i = phi float [ %168, %167 ], [ %170, %169 ], !dbg !39
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i35 = icmp eq i32 %171, 0, !dbg !39
  br i1 %.not.i35, label %174, label %172, !dbg !39

172:                                              ; preds = %__nv_rsqrtf.exit
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !39
  br label %__nv_rsqrtf.exit37, !dbg !39

174:                                              ; preds = %__nv_rsqrtf.exit
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !39
  br label %__nv_rsqrtf.exit37, !dbg !39

__nv_rsqrtf.exit37:                               ; preds = %172, %174
  %.0.i36 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !39
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i38 = icmp eq i32 %176, 0, !dbg !39
  br i1 %.not.i38, label %179, label %177, !dbg !39

177:                                              ; preds = %__nv_rsqrtf.exit37
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !39
  br label %__nv_rsqrtf.exit40, !dbg !39

179:                                              ; preds = %__nv_rsqrtf.exit37
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !39
  br label %__nv_rsqrtf.exit40, !dbg !39

__nv_rsqrtf.exit40:                               ; preds = %177, %179
  %.0.i39 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !39
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i41 = icmp eq i32 %181, 0, !dbg !39
  br i1 %.not.i41, label %184, label %182, !dbg !39

182:                                              ; preds = %__nv_rsqrtf.exit40
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !39
  br label %__nv_rsqrtf.exit43, !dbg !39

184:                                              ; preds = %__nv_rsqrtf.exit40
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !39
  br label %__nv_rsqrtf.exit43, !dbg !39

__nv_rsqrtf.exit43:                               ; preds = %182, %184
  %.0.i42 = phi float [ %183, %182 ], [ %185, %184 ], !dbg !39
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i44 = icmp eq i32 %186, 0, !dbg !39
  br i1 %.not.i44, label %189, label %187, !dbg !39

187:                                              ; preds = %__nv_rsqrtf.exit43
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !39
  br label %__nv_rsqrtf.exit46, !dbg !39

189:                                              ; preds = %__nv_rsqrtf.exit43
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !39
  br label %__nv_rsqrtf.exit46, !dbg !39

__nv_rsqrtf.exit46:                               ; preds = %187, %189
  %.0.i45 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !39
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i47 = icmp eq i32 %191, 0, !dbg !39
  br i1 %.not.i47, label %194, label %192, !dbg !39

192:                                              ; preds = %__nv_rsqrtf.exit46
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !39
  br label %__nv_rsqrtf.exit49, !dbg !39

194:                                              ; preds = %__nv_rsqrtf.exit46
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !39
  br label %__nv_rsqrtf.exit49, !dbg !39

__nv_rsqrtf.exit49:                               ; preds = %192, %194
  %.0.i48 = phi float [ %193, %192 ], [ %195, %194 ], !dbg !39
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i50 = icmp eq i32 %196, 0, !dbg !39
  br i1 %.not.i50, label %199, label %197, !dbg !39

197:                                              ; preds = %__nv_rsqrtf.exit49
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !39
  br label %__nv_rsqrtf.exit52, !dbg !39

199:                                              ; preds = %__nv_rsqrtf.exit49
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !39
  br label %__nv_rsqrtf.exit52, !dbg !39

__nv_rsqrtf.exit52:                               ; preds = %197, %199
  %.0.i51 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !39
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i53 = icmp eq i32 %201, 0, !dbg !39
  br i1 %.not.i53, label %204, label %202, !dbg !39

202:                                              ; preds = %__nv_rsqrtf.exit52
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !39
  br label %__nv_rsqrtf.exit55, !dbg !39

204:                                              ; preds = %__nv_rsqrtf.exit52
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !39
  br label %__nv_rsqrtf.exit55, !dbg !39

__nv_rsqrtf.exit55:                               ; preds = %202, %204
  %.0.i54 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !39
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i56 = icmp eq i32 %206, 0, !dbg !39
  br i1 %.not.i56, label %209, label %207, !dbg !39

207:                                              ; preds = %__nv_rsqrtf.exit55
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %158), !dbg !39
  br label %__nv_rsqrtf.exit58, !dbg !39

209:                                              ; preds = %__nv_rsqrtf.exit55
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %158), !dbg !39
  br label %__nv_rsqrtf.exit58, !dbg !39

__nv_rsqrtf.exit58:                               ; preds = %207, %209
  %.0.i57 = phi float [ %208, %207 ], [ %210, %209 ], !dbg !39
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i59 = icmp eq i32 %211, 0, !dbg !39
  br i1 %.not.i59, label %214, label %212, !dbg !39

212:                                              ; preds = %__nv_rsqrtf.exit58
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !39
  br label %__nv_rsqrtf.exit61, !dbg !39

214:                                              ; preds = %__nv_rsqrtf.exit58
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !39
  br label %__nv_rsqrtf.exit61, !dbg !39

__nv_rsqrtf.exit61:                               ; preds = %212, %214
  %.0.i60 = phi float [ %213, %212 ], [ %215, %214 ], !dbg !39
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i62 = icmp eq i32 %216, 0, !dbg !39
  br i1 %.not.i62, label %219, label %217, !dbg !39

217:                                              ; preds = %__nv_rsqrtf.exit61
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %160), !dbg !39
  br label %__nv_rsqrtf.exit64, !dbg !39

219:                                              ; preds = %__nv_rsqrtf.exit61
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %160), !dbg !39
  br label %__nv_rsqrtf.exit64, !dbg !39

__nv_rsqrtf.exit64:                               ; preds = %217, %219
  %.0.i63 = phi float [ %218, %217 ], [ %220, %219 ], !dbg !39
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i65 = icmp eq i32 %221, 0, !dbg !39
  br i1 %.not.i65, label %224, label %222, !dbg !39

222:                                              ; preds = %__nv_rsqrtf.exit64
  %223 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !39
  br label %__nv_rsqrtf.exit67, !dbg !39

224:                                              ; preds = %__nv_rsqrtf.exit64
  %225 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !39
  br label %__nv_rsqrtf.exit67, !dbg !39

__nv_rsqrtf.exit67:                               ; preds = %222, %224
  %.0.i66 = phi float [ %223, %222 ], [ %225, %224 ], !dbg !39
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i68 = icmp eq i32 %226, 0, !dbg !39
  br i1 %.not.i68, label %229, label %227, !dbg !39

227:                                              ; preds = %__nv_rsqrtf.exit67
  %228 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !39
  br label %__nv_rsqrtf.exit70, !dbg !39

229:                                              ; preds = %__nv_rsqrtf.exit67
  %230 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !39
  br label %__nv_rsqrtf.exit70, !dbg !39

__nv_rsqrtf.exit70:                               ; preds = %227, %229
  %.0.i69 = phi float [ %228, %227 ], [ %230, %229 ], !dbg !39
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i71 = icmp eq i32 %231, 0, !dbg !39
  br i1 %.not.i71, label %234, label %232, !dbg !39

232:                                              ; preds = %__nv_rsqrtf.exit70
  %233 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !39
  br label %__nv_rsqrtf.exit73, !dbg !39

234:                                              ; preds = %__nv_rsqrtf.exit70
  %235 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !39
  br label %__nv_rsqrtf.exit73, !dbg !39

__nv_rsqrtf.exit73:                               ; preds = %232, %234
  %.0.i72 = phi float [ %233, %232 ], [ %235, %234 ], !dbg !39
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i74 = icmp eq i32 %236, 0, !dbg !39
  br i1 %.not.i74, label %239, label %237, !dbg !39

237:                                              ; preds = %__nv_rsqrtf.exit73
  %238 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !39
  br label %__nv_rsqrtf.exit76, !dbg !39

239:                                              ; preds = %__nv_rsqrtf.exit73
  %240 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !39
  br label %__nv_rsqrtf.exit76, !dbg !39

__nv_rsqrtf.exit76:                               ; preds = %237, %239
  %.0.i75 = phi float [ %238, %237 ], [ %240, %239 ], !dbg !39
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i77 = icmp eq i32 %241, 0, !dbg !39
  br i1 %.not.i77, label %244, label %242, !dbg !39

242:                                              ; preds = %__nv_rsqrtf.exit76
  %243 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !39
  br label %__nv_rsqrtf.exit79, !dbg !39

244:                                              ; preds = %__nv_rsqrtf.exit76
  %245 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !39
  br label %__nv_rsqrtf.exit79, !dbg !39

__nv_rsqrtf.exit79:                               ; preds = %242, %244
  %.0.i78 = phi float [ %243, %242 ], [ %245, %244 ], !dbg !39
  %246 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %247 = bitcast i32 %246 to float, !dbg !23
  %248 = bitcast i32 %84 to float, !dbg !28
  %249 = fsub float %247, %248, !dbg !40
  %250 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %251 = bitcast i32 %250 to float, !dbg !23
  %252 = bitcast i32 %83 to float, !dbg !28
  %253 = fsub float %251, %252, !dbg !40
  %254 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %255 = bitcast i32 %254 to float, !dbg !23
  %256 = bitcast i32 %82 to float, !dbg !28
  %257 = fsub float %255, %256, !dbg !40
  %258 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %259 = bitcast i32 %258 to float, !dbg !23
  %260 = bitcast i32 %81 to float, !dbg !28
  %261 = fsub float %259, %260, !dbg !40
  %262 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %263 = bitcast i32 %262 to float, !dbg !23
  %264 = bitcast i32 %80 to float, !dbg !28
  %265 = fsub float %263, %264, !dbg !40
  %266 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %267 = bitcast i32 %266 to float, !dbg !23
  %268 = bitcast i32 %79 to float, !dbg !28
  %269 = fsub float %267, %268, !dbg !40
  %270 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %271 = bitcast i32 %270 to float, !dbg !23
  %272 = bitcast i32 %78 to float, !dbg !28
  %273 = fsub float %271, %272, !dbg !40
  %274 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %275 = bitcast i32 %274 to float, !dbg !23
  %276 = bitcast i32 %77 to float, !dbg !28
  %277 = fsub float %275, %276, !dbg !40
  %278 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %279 = bitcast i32 %278 to float, !dbg !23
  %280 = bitcast i32 %76 to float, !dbg !28
  %281 = fsub float %279, %280, !dbg !40
  %282 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %283 = bitcast i32 %282 to float, !dbg !23
  %284 = bitcast i32 %75 to float, !dbg !28
  %285 = fsub float %283, %284, !dbg !40
  %286 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %287 = bitcast i32 %286 to float, !dbg !23
  %288 = bitcast i32 %74 to float, !dbg !28
  %289 = fsub float %287, %288, !dbg !40
  %290 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %291 = bitcast i32 %290 to float, !dbg !23
  %292 = bitcast i32 %73 to float, !dbg !28
  %293 = fsub float %291, %292, !dbg !40
  %294 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %295 = bitcast i32 %294 to float, !dbg !23
  %296 = bitcast i32 %72 to float, !dbg !28
  %297 = fsub float %295, %296, !dbg !40
  %298 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %299 = bitcast i32 %298 to float, !dbg !23
  %300 = bitcast i32 %71 to float, !dbg !28
  %301 = fsub float %299, %300, !dbg !40
  %302 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %303 = bitcast i32 %302 to float, !dbg !23
  %304 = bitcast i32 %70 to float, !dbg !28
  %305 = fsub float %303, %304, !dbg !40
  %306 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %307 = bitcast i32 %306 to float, !dbg !23
  %308 = bitcast i32 %69 to float, !dbg !28
  %309 = fsub float %307, %308, !dbg !40
  %310 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !36
  %314 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !36
  %315 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !36
  %316 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !36
  %322 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !36
  %323 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !36
  %324 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !36
  %326 = bitcast i32 %125 to float, !dbg !34
  %327 = bitcast i32 %123 to float, !dbg !32
  %328 = and i32 %15, 12, !dbg !12
  %329 = or disjoint i32 %11, %328, !dbg !13
  %.frozen = freeze i32 %329, !dbg !19
  %330 = sdiv i32 %.frozen, 256, !dbg !19
  %331 = mul i32 %330, 256, !dbg !41
  %.decomposed = sub i32 %.frozen, %331, !dbg !41
  %332 = lshr i32 %12, 2, !dbg !16
  %333 = and i32 %332, 63, !dbg !16
  %334 = or disjoint i32 %333, %21, !dbg !17
  %335 = or disjoint i32 %334, 192, !dbg !17
  %336 = icmp slt i32 %335, 256, !dbg !18
  %337 = or disjoint i32 %334, 128, !dbg !17
  %338 = icmp slt i32 %337, 256, !dbg !18
  %339 = or disjoint i32 %334, 64, !dbg !17
  %340 = icmp slt i32 %339, 256, !dbg !18
  %341 = icmp slt i32 %334, 256, !dbg !18
  %342 = fmul float %309, %.0.i, !dbg !42
  %343 = fmul float %305, %.0.i36, !dbg !42
  %344 = fmul float %301, %.0.i39, !dbg !42
  %345 = fmul float %297, %.0.i42, !dbg !42
  %346 = fmul float %293, %.0.i45, !dbg !42
  %347 = fmul float %289, %.0.i48, !dbg !42
  %348 = fmul float %285, %.0.i51, !dbg !42
  %349 = fmul float %281, %.0.i54, !dbg !42
  %350 = fmul float %277, %.0.i57, !dbg !42
  %351 = fmul float %273, %.0.i60, !dbg !42
  %352 = fmul float %269, %.0.i63, !dbg !42
  %353 = fmul float %265, %.0.i66, !dbg !42
  %354 = fmul float %261, %.0.i69, !dbg !42
  %355 = fmul float %257, %.0.i72, !dbg !42
  %356 = fmul float %253, %.0.i75, !dbg !42
  %357 = fmul float %249, %.0.i78, !dbg !42
  %358 = and i32 %15, 1020, !dbg !42
  %359 = lshr i32 %358, 8, !dbg !42
  %360 = or disjoint i32 %359, %358, !dbg !42
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !42
  %362 = bitcast float %342 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !42
  %363 = or disjoint i32 %358, 1, !dbg !42
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !42
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %363, !dbg !42
  %366 = bitcast float %343 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !42
  %367 = or disjoint i32 %358, 2, !dbg !42
  %368 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %367, !dbg !42
  %369 = bitcast float %344 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !42
  %370 = or disjoint i32 %358, 3, !dbg !42
  %371 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %370, !dbg !42
  %372 = bitcast float %345 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !42
  %374 = load float, ptr addrspace(3) %373, align 4, !dbg !42
  %375 = getelementptr inbounds i8, ptr addrspace(3) %373, i32 1028, !dbg !42
  %376 = load float, ptr addrspace(3) %375, align 4, !dbg !42
  %377 = getelementptr inbounds i8, ptr addrspace(3) %373, i32 2056, !dbg !42
  %378 = load float, ptr addrspace(3) %377, align 4, !dbg !42
  %379 = getelementptr inbounds i8, ptr addrspace(3) %373, i32 3084, !dbg !42
  %380 = load float, ptr addrspace(3) %379, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %381 = bitcast float %346 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %381, i1 true) #4, !dbg !42
  %382 = bitcast float %347 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %382, i1 true) #4, !dbg !42
  %383 = bitcast float %348 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %383, i1 true) #4, !dbg !42
  %384 = bitcast float %349 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %384, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %385 = load float, ptr addrspace(3) %373, align 4, !dbg !42
  %386 = load float, ptr addrspace(3) %375, align 4, !dbg !42
  %387 = load float, ptr addrspace(3) %377, align 4, !dbg !42
  %388 = load float, ptr addrspace(3) %379, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %389 = bitcast float %350 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %389, i1 true) #4, !dbg !42
  %390 = bitcast float %351 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %390, i1 true) #4, !dbg !42
  %391 = bitcast float %352 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %391, i1 true) #4, !dbg !42
  %392 = bitcast float %353 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %392, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %393 = load float, ptr addrspace(3) %373, align 4, !dbg !42
  %394 = load float, ptr addrspace(3) %375, align 4, !dbg !42
  %395 = load float, ptr addrspace(3) %377, align 4, !dbg !42
  %396 = load float, ptr addrspace(3) %379, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %397 = bitcast float %354 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %397, i1 true) #4, !dbg !42
  %398 = bitcast float %355 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %398, i1 true) #4, !dbg !42
  %399 = bitcast float %356 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %399, i1 true) #4, !dbg !42
  %400 = bitcast float %357 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %400, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %401 = load float, ptr addrspace(3) %373, align 4, !dbg !42
  %402 = load float, ptr addrspace(3) %375, align 4, !dbg !42
  %403 = load float, ptr addrspace(3) %377, align 4, !dbg !42
  %404 = load float, ptr addrspace(3) %379, align 4, !dbg !42
  %405 = fmul float %374, %327, !dbg !43
  %406 = fmul float %376, %327, !dbg !43
  %407 = fmul float %378, %327, !dbg !43
  %408 = fmul float %380, %327, !dbg !43
  %409 = fmul float %385, %327, !dbg !43
  %410 = fmul float %386, %327, !dbg !43
  %411 = fmul float %387, %327, !dbg !43
  %412 = fmul float %388, %327, !dbg !43
  %413 = fmul float %393, %327, !dbg !43
  %414 = fmul float %394, %327, !dbg !43
  %415 = fmul float %395, %327, !dbg !43
  %416 = fmul float %396, %327, !dbg !43
  %417 = fmul float %401, %327, !dbg !43
  %418 = fmul float %402, %327, !dbg !43
  %419 = fmul float %403, %327, !dbg !43
  %420 = fmul float %404, %327, !dbg !43
  %421 = fadd float %405, %326, !dbg !44
  %422 = fadd float %406, %326, !dbg !44
  %423 = fadd float %407, %326, !dbg !44
  %424 = fadd float %408, %326, !dbg !44
  %425 = fadd float %409, %326, !dbg !44
  %426 = fadd float %410, %326, !dbg !44
  %427 = fadd float %411, %326, !dbg !44
  %428 = fadd float %412, %326, !dbg !44
  %429 = fadd float %413, %326, !dbg !44
  %430 = fadd float %414, %326, !dbg !44
  %431 = fadd float %415, %326, !dbg !44
  %432 = fadd float %416, %326, !dbg !44
  %433 = fadd float %417, %326, !dbg !44
  %434 = fadd float %418, %326, !dbg !44
  %435 = fadd float %419, %326, !dbg !44
  %436 = fadd float %420, %326, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %437 = bitcast float %421 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %437, i1 true) #4, !dbg !44
  %438 = bitcast float %422 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %438, i1 true) #4, !dbg !44
  %439 = bitcast float %423 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %439, i1 true) #4, !dbg !44
  %440 = bitcast float %424 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %440, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %441 = bitcast float %425 to <1 x i32>, !dbg !44
  %442 = bitcast float %426 to <1 x i32>, !dbg !44
  %443 = bitcast float %427 to <1 x i32>, !dbg !44
  %444 = bitcast float %428 to <1 x i32>, !dbg !44
  %445 = bitcast float %429 to <1 x i32>, !dbg !44
  %446 = bitcast float %430 to <1 x i32>, !dbg !44
  %447 = bitcast float %431 to <1 x i32>, !dbg !44
  %448 = bitcast float %432 to <1 x i32>, !dbg !44
  %449 = bitcast float %433 to <1 x i32>, !dbg !44
  %450 = bitcast float %434 to <1 x i32>, !dbg !44
  %451 = bitcast float %435 to <1 x i32>, !dbg !44
  %452 = bitcast float %436 to <1 x i32>, !dbg !44
  %453 = insertelement <16 x i32> poison, i32 %310, i64 0, !dbg !36
  %454 = insertelement <16 x i32> %453, i32 %311, i64 1, !dbg !36
  %455 = insertelement <16 x i32> %454, i32 %312, i64 2, !dbg !36
  %456 = insertelement <16 x i32> %455, i32 %313, i64 3, !dbg !36
  %457 = insertelement <16 x i32> %456, i32 %314, i64 4, !dbg !36
  %458 = insertelement <16 x i32> %457, i32 %315, i64 5, !dbg !36
  %459 = insertelement <16 x i32> %458, i32 %316, i64 6, !dbg !36
  %460 = insertelement <16 x i32> %459, i32 %317, i64 7, !dbg !36
  %461 = insertelement <16 x i32> %460, i32 %318, i64 8, !dbg !36
  %462 = insertelement <16 x i32> %461, i32 %319, i64 9, !dbg !36
  %463 = insertelement <16 x i32> %462, i32 %320, i64 10, !dbg !36
  %464 = insertelement <16 x i32> %463, i32 %321, i64 11, !dbg !36
  %465 = insertelement <16 x i32> %464, i32 %322, i64 12, !dbg !36
  %466 = insertelement <16 x i32> %465, i32 %323, i64 13, !dbg !36
  %467 = insertelement <16 x i32> %466, i32 %324, i64 14, !dbg !36
  %468 = insertelement <16 x i32> %467, i32 %325, i64 15, !dbg !36
  %469 = bitcast <16 x i32> %468 to <16 x float>, !dbg !36
  %470 = load <4 x float>, ptr addrspace(3) %361, align 4, !dbg !44
  %471 = shufflevector <4 x float> %470, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %441, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %442, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %443, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %444, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %472 = load <4 x float>, ptr addrspace(3) %361, align 4, !dbg !44
  %473 = shufflevector <4 x float> %472, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %445, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %446, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %447, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %448, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %474 = load <4 x float>, ptr addrspace(3) %361, align 4, !dbg !44
  %475 = shufflevector <4 x float> %474, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %449, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %450, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %451, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %452, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %476 = load <4 x float>, ptr addrspace(3) %361, align 4, !dbg !44
  %477 = shufflevector <4 x float> %476, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !44
  %478 = shufflevector <4 x float> %477, <4 x float> %475, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %479 = shufflevector <4 x float> %473, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %480 = shufflevector <16 x float> %478, <16 x float> %479, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %481 = shufflevector <4 x float> %471, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %482 = shufflevector <16 x float> %480, <16 x float> %481, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !45
  %483 = fadd <16 x float> %482, %469, !dbg !45
  %484 = fcmp olt <16 x float> %483, zeroinitializer, !dbg !46
  %485 = extractelement <16 x i1> %484, i64 15, !dbg !50
  %486 = extractelement <16 x float> %483, i64 15, !dbg !50
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !50
  %488 = extractelement <16 x i1> %484, i64 14, !dbg !50
  %489 = extractelement <16 x float> %483, i64 14, !dbg !50
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !50
  %491 = extractelement <16 x i1> %484, i64 13, !dbg !50
  %492 = extractelement <16 x float> %483, i64 13, !dbg !50
  %493 = select i1 %491, float 0.000000e+00, float %492, !dbg !50
  %494 = extractelement <16 x i1> %484, i64 12, !dbg !50
  %495 = extractelement <16 x float> %483, i64 12, !dbg !50
  %496 = select i1 %494, float 0.000000e+00, float %495, !dbg !50
  %497 = extractelement <16 x i1> %484, i64 11, !dbg !50
  %498 = extractelement <16 x float> %483, i64 11, !dbg !50
  %499 = select i1 %497, float 0.000000e+00, float %498, !dbg !50
  %500 = extractelement <16 x i1> %484, i64 10, !dbg !50
  %501 = extractelement <16 x float> %483, i64 10, !dbg !50
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !50
  %503 = extractelement <16 x i1> %484, i64 9, !dbg !50
  %504 = extractelement <16 x float> %483, i64 9, !dbg !50
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !50
  %506 = extractelement <16 x i1> %484, i64 8, !dbg !50
  %507 = extractelement <16 x float> %483, i64 8, !dbg !50
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !50
  %509 = extractelement <16 x i1> %484, i64 7, !dbg !50
  %510 = extractelement <16 x float> %483, i64 7, !dbg !50
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !50
  %512 = extractelement <16 x i1> %484, i64 6, !dbg !50
  %513 = extractelement <16 x float> %483, i64 6, !dbg !50
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !50
  %515 = extractelement <16 x i1> %484, i64 5, !dbg !50
  %516 = extractelement <16 x float> %483, i64 5, !dbg !50
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !50
  %518 = extractelement <16 x i1> %484, i64 4, !dbg !50
  %519 = extractelement <16 x float> %483, i64 4, !dbg !50
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !50
  %521 = extractelement <16 x i1> %484, i64 3, !dbg !50
  %522 = extractelement <16 x float> %483, i64 3, !dbg !50
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !50
  %524 = extractelement <16 x i1> %484, i64 2, !dbg !50
  %525 = extractelement <16 x float> %483, i64 2, !dbg !50
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !50
  %527 = extractelement <16 x i1> %484, i64 1, !dbg !50
  %528 = extractelement <16 x float> %483, i64 1, !dbg !50
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !50
  %530 = extractelement <16 x i1> %484, i64 0, !dbg !50
  %531 = extractelement <16 x float> %483, i64 0, !dbg !50
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !50
  %533 = shl i32 %334, 8, !dbg !51
  %534 = shl i32 %339, 8, !dbg !51
  %535 = shl i32 %337, 8, !dbg !51
  %536 = shl i32 %335, 8, !dbg !51
  %537 = shl i32 %330, 16, !dbg !52
  %538 = add i32 %537, %.decomposed, !dbg !53
  %539 = add i32 %538, %533, !dbg !54
  %540 = add i32 %538, %534, !dbg !54
  %541 = add i32 %538, %535, !dbg !54
  %542 = add i32 %538, %536, !dbg !54
  %543 = sext i32 %539 to i64, !dbg !55
  %544 = getelementptr float, ptr addrspace(1) %6, i64 %543, !dbg !55
  %545 = sext i32 %540 to i64, !dbg !55
  %546 = getelementptr float, ptr addrspace(1) %6, i64 %545, !dbg !55
  %547 = sext i32 %541 to i64, !dbg !55
  %548 = getelementptr float, ptr addrspace(1) %6, i64 %547, !dbg !55
  %549 = sext i32 %542 to i64, !dbg !55
  %550 = getelementptr float, ptr addrspace(1) %6, i64 %549, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %551 = shl i32 %12, 6, !dbg !56
  %552 = and i32 %551, 4032, !dbg !56
  %553 = or disjoint i32 %552, %14, !dbg !56
  %554 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %552, !dbg !56
  %555 = getelementptr float, ptr addrspace(3) %554, i32 %553, !dbg !56
  %556 = bitcast float %487 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #4, !dbg !56
  %557 = or disjoint i32 %553, 16, !dbg !56
  %558 = lshr i32 %557, 2, !dbg !56
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i32 %558, !dbg !56
  %560 = getelementptr float, ptr addrspace(3) %559, i32 %557, !dbg !56
  %561 = bitcast float %490 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %561, i1 true) #4, !dbg !56
  %562 = or disjoint i32 %553, 32, !dbg !56
  %563 = lshr i32 %562, 2, !dbg !56
  %564 = getelementptr float, ptr addrspace(3) @global_smem, i32 %563, !dbg !56
  %565 = getelementptr float, ptr addrspace(3) %564, i32 %562, !dbg !56
  %566 = bitcast float %493 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %565, <1 x i32> %566, i1 true) #4, !dbg !56
  %567 = or disjoint i32 %553, 48, !dbg !56
  %568 = lshr i32 %567, 2, !dbg !56
  %569 = getelementptr float, ptr addrspace(3) @global_smem, i32 %568, !dbg !56
  %570 = getelementptr float, ptr addrspace(3) %569, i32 %567, !dbg !56
  %571 = bitcast float %496 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 true) #4, !dbg !56
  %572 = or disjoint i32 %553, 4, !dbg !56
  %573 = getelementptr float, ptr addrspace(3) %554, i32 %572, !dbg !56
  %574 = bitcast float %499 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #4, !dbg !56
  %575 = or disjoint i32 %553, 20, !dbg !56
  %576 = lshr i32 %575, 2, !dbg !56
  %577 = and i32 %576, 1012, !dbg !56
  %578 = getelementptr float, ptr addrspace(3) @global_smem, i32 %577, !dbg !56
  %579 = getelementptr float, ptr addrspace(3) %578, i32 %575, !dbg !56
  %580 = bitcast float %502 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #4, !dbg !56
  %581 = or disjoint i32 %553, 36, !dbg !56
  %582 = lshr i32 %581, 2, !dbg !56
  %583 = and i32 %582, 1016, !dbg !56
  %584 = getelementptr float, ptr addrspace(3) @global_smem, i32 %583, !dbg !56
  %585 = getelementptr float, ptr addrspace(3) %584, i32 %581, !dbg !56
  %586 = bitcast float %505 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %586, i1 true) #4, !dbg !56
  %587 = or disjoint i32 %553, 52, !dbg !56
  %588 = lshr i32 %587, 2, !dbg !56
  %589 = and i32 %588, 1020, !dbg !56
  %590 = getelementptr float, ptr addrspace(3) @global_smem, i32 %589, !dbg !56
  %591 = getelementptr float, ptr addrspace(3) %590, i32 %587, !dbg !56
  %592 = bitcast float %508 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %591, <1 x i32> %592, i1 true) #4, !dbg !56
  %593 = or disjoint i32 %553, 8, !dbg !56
  %594 = getelementptr float, ptr addrspace(3) %554, i32 %593, !dbg !56
  %595 = bitcast float %511 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %594, <1 x i32> %595, i1 true) #4, !dbg !56
  %596 = or disjoint i32 %553, 24, !dbg !56
  %597 = lshr i32 %596, 2, !dbg !56
  %598 = and i32 %597, 1012, !dbg !56
  %599 = getelementptr float, ptr addrspace(3) @global_smem, i32 %598, !dbg !56
  %600 = getelementptr float, ptr addrspace(3) %599, i32 %596, !dbg !56
  %601 = bitcast float %514 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %600, <1 x i32> %601, i1 true) #4, !dbg !56
  %602 = or disjoint i32 %553, 40, !dbg !56
  %603 = lshr i32 %602, 2, !dbg !56
  %604 = and i32 %603, 1016, !dbg !56
  %605 = getelementptr float, ptr addrspace(3) @global_smem, i32 %604, !dbg !56
  %606 = getelementptr float, ptr addrspace(3) %605, i32 %602, !dbg !56
  %607 = bitcast float %517 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %607, i1 true) #4, !dbg !56
  %608 = or disjoint i32 %553, 56, !dbg !56
  %609 = lshr i32 %608, 2, !dbg !56
  %610 = and i32 %609, 1020, !dbg !56
  %611 = getelementptr float, ptr addrspace(3) @global_smem, i32 %610, !dbg !56
  %612 = getelementptr float, ptr addrspace(3) %611, i32 %608, !dbg !56
  %613 = bitcast float %520 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %613, i1 true) #4, !dbg !56
  %614 = or disjoint i32 %553, 12, !dbg !56
  %615 = getelementptr float, ptr addrspace(3) %554, i32 %614, !dbg !56
  %616 = bitcast float %523 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %616, i1 true) #4, !dbg !56
  %617 = or disjoint i32 %553, 28, !dbg !56
  %618 = lshr i32 %617, 2, !dbg !56
  %619 = and i32 %618, 1012, !dbg !56
  %620 = getelementptr float, ptr addrspace(3) @global_smem, i32 %619, !dbg !56
  %621 = getelementptr float, ptr addrspace(3) %620, i32 %617, !dbg !56
  %622 = bitcast float %526 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %621, <1 x i32> %622, i1 true) #4, !dbg !56
  %623 = or disjoint i32 %553, 44, !dbg !56
  %624 = lshr i32 %623, 2, !dbg !56
  %625 = and i32 %624, 1016, !dbg !56
  %626 = getelementptr float, ptr addrspace(3) @global_smem, i32 %625, !dbg !56
  %627 = getelementptr float, ptr addrspace(3) %626, i32 %623, !dbg !56
  %628 = bitcast float %529 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %628, i1 true) #4, !dbg !56
  %629 = or disjoint i32 %553, 60, !dbg !56
  %630 = lshr i32 %629, 2, !dbg !56
  %631 = and i32 %630, 1020, !dbg !56
  %632 = getelementptr float, ptr addrspace(3) @global_smem, i32 %631, !dbg !56
  %633 = getelementptr float, ptr addrspace(3) %632, i32 %629, !dbg !56
  %634 = bitcast float %532 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %633, <1 x i32> %634, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %635 = and i32 %12, 252, !dbg !56
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !56
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %358, !dbg !56
  %638 = or disjoint i32 %358, 1024, !dbg !56
  %639 = lshr exact i32 %638, 2, !dbg !56
  %640 = and i32 %639, 508, !dbg !56
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !56
  %642 = getelementptr inbounds float, ptr addrspace(3) %641, i32 %638, !dbg !56
  %643 = load <4 x i32>, ptr addrspace(3) %642, align 16, !dbg !56
  %644 = or disjoint i32 %358, 2048, !dbg !56
  %645 = lshr exact i32 %644, 2, !dbg !56
  %646 = and i32 %645, 764, !dbg !56
  %647 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %646, !dbg !56
  %648 = getelementptr inbounds float, ptr addrspace(3) %647, i32 %644, !dbg !56
  %649 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !56
  %650 = or disjoint i32 %358, 3072, !dbg !56
  %651 = lshr exact i32 %650, 2, !dbg !56
  %652 = and i32 %651, 1020, !dbg !56
  %653 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %652, !dbg !56
  %654 = getelementptr inbounds float, ptr addrspace(3) %653, i32 %650, !dbg !56
  %655 = load <4 x i32>, ptr addrspace(3) %654, align 16, !dbg !56
  %.extract = load i32, ptr addrspace(3) %637, align 16, !dbg !56
  %656 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 4, !dbg !56
  %.extract20 = load i32, ptr addrspace(3) %656, align 4, !dbg !56
  %657 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 8, !dbg !56
  %.extract21 = load i32, ptr addrspace(3) %657, align 8, !dbg !56
  %658 = getelementptr inbounds i8, ptr addrspace(3) %637, i32 12, !dbg !56
  %.extract22 = load i32, ptr addrspace(3) %658, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %544, i1 %341) #4, !dbg !56
  %.extract23 = extractelement <4 x i32> %643, i64 0, !dbg !56
  %.extract24 = extractelement <4 x i32> %643, i64 1, !dbg !56
  %.extract25 = extractelement <4 x i32> %643, i64 2, !dbg !56
  %.extract26 = extractelement <4 x i32> %643, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %546, i1 %340) #4, !dbg !56
  %.extract27 = extractelement <4 x i32> %649, i64 0, !dbg !56
  %.extract28 = extractelement <4 x i32> %649, i64 1, !dbg !56
  %.extract29 = extractelement <4 x i32> %649, i64 2, !dbg !56
  %.extract30 = extractelement <4 x i32> %649, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %548, i1 %338) #4, !dbg !56
  %.extract31 = extractelement <4 x i32> %655, i64 0, !dbg !56
  %.extract32 = extractelement <4 x i32> %655, i64 1, !dbg !56
  %.extract33 = extractelement <4 x i32> %655, i64 2, !dbg !56
  %.extract34 = extractelement <4 x i32> %655, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %550, i1 %336) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chpkzmamrinkofmye3hsfimvddb7xudxygedx6ls64oqmoqmbf2p.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_14", linkageName: "triton_poi_fused_add_native_group_norm_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 33, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 45, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 27, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 50, column: 34, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 50, column: 30, scope: !7)
!54 = !DILocation(line: 50, column: 39, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 57, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
