; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 9, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 2, !dbg !12
  %23 = and i32 %22, 508, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = srem i32 %24, 64, !dbg !14
  %26 = sext i32 %24 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %29 = sext i32 %25 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !29
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %56 = bitcast i32 %52 to float, !dbg !30
  %57 = bitcast i32 %53 to float, !dbg !30
  %58 = bitcast i32 %54 to float, !dbg !30
  %59 = bitcast i32 %55 to float, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !35
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !37
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !38
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !38
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !38
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !38
  %72 = bitcast i32 %68 to float, !dbg !38
  %73 = bitcast i32 %69 to float, !dbg !38
  %74 = bitcast i32 %70 to float, !dbg !38
  %75 = bitcast i32 %71 to float, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !39
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !41
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !42
  %80 = fadd float %38, 0x3EE4F8B580000000, !dbg !43
  %81 = fadd float %39, 0x3EE4F8B580000000, !dbg !43
  %82 = fadd float %40, 0x3EE4F8B580000000, !dbg !43
  %83 = fadd float %41, 0x3EE4F8B580000000, !dbg !43
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %84, 0, !dbg !44
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %85, 0, !dbg !44
  br i1 %.not.i, label %91, label %86, !dbg !44

86:                                               ; preds = %18
  br i1 %.not1.i, label %89, label %87, !dbg !44

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

91:                                               ; preds = %18
  br i1 %.not1.i, label %94, label %92, !dbg !44

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !44
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %96, 0, !dbg !44
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !44
  br i1 %.not.i1, label %103, label %98, !dbg !44

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !44

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !44

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !44
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %108, 0, !dbg !44
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %109, 0, !dbg !44
  br i1 %.not.i6, label %115, label %110, !dbg !44

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !44

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !44

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %111, %113, %116, %118
  %.0.i8 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !44
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %120, 0, !dbg !44
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %121, 0, !dbg !44
  br i1 %.not.i11, label %127, label %122, !dbg !44

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !44

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !44

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %123, %125, %128, %130
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !44
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %136 = fadd float %56, 0x3EE4F8B580000000, !dbg !46
  %137 = fadd float %57, 0x3EE4F8B580000000, !dbg !46
  %138 = fadd float %58, 0x3EE4F8B580000000, !dbg !46
  %139 = fadd float %59, 0x3EE4F8B580000000, !dbg !46
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i16 = icmp eq i32 %140, 0, !dbg !47
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i19 = icmp eq i32 %141, 0, !dbg !47
  br i1 %.not.i16, label %147, label %142, !dbg !47

142:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %145, label %143, !dbg !47

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

147:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %150, label %148, !dbg !47

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

__nv_sqrtf.exit20:                                ; preds = %143, %145, %148, %150
  %.0.i18 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !47
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i21 = icmp eq i32 %152, 0, !dbg !47
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i24 = icmp eq i32 %153, 0, !dbg !47
  br i1 %.not.i21, label %159, label %154, !dbg !47

154:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %157, label %155, !dbg !47

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

159:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %162, label %160, !dbg !47

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

__nv_sqrtf.exit25:                                ; preds = %155, %157, %160, %162
  %.0.i23 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !47
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i26 = icmp eq i32 %164, 0, !dbg !47
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i29 = icmp eq i32 %165, 0, !dbg !47
  br i1 %.not.i26, label %171, label %166, !dbg !47

166:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %169, label %167, !dbg !47

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

171:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %174, label %172, !dbg !47

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

__nv_sqrtf.exit30:                                ; preds = %167, %169, %172, %174
  %.0.i28 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !47
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i31 = icmp eq i32 %176, 0, !dbg !47
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i34 = icmp eq i32 %177, 0, !dbg !47
  br i1 %.not.i31, label %183, label %178, !dbg !47

178:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %181, label %179, !dbg !47

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

183:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %186, label %184, !dbg !47

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

__nv_sqrtf.exit35:                                ; preds = %179, %181, %184, %186
  %.0.i33 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !47
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !48
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !48
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !48
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !48
  %192 = fadd float %72, 0x3EE4F8B580000000, !dbg !49
  %193 = fadd float %73, 0x3EE4F8B580000000, !dbg !49
  %194 = fadd float %74, 0x3EE4F8B580000000, !dbg !49
  %195 = fadd float %75, 0x3EE4F8B580000000, !dbg !49
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i36 = icmp eq i32 %196, 0, !dbg !50
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i39 = icmp eq i32 %197, 0, !dbg !50
  br i1 %.not.i36, label %203, label %198, !dbg !50

198:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %201, label %199, !dbg !50

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

203:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %206, label %204, !dbg !50

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

__nv_sqrtf.exit40:                                ; preds = %199, %201, %204, %206
  %.0.i38 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !50
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i41 = icmp eq i32 %208, 0, !dbg !50
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i44 = icmp eq i32 %209, 0, !dbg !50
  br i1 %.not.i41, label %215, label %210, !dbg !50

210:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %213, label %211, !dbg !50

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

215:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %218, label %216, !dbg !50

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

__nv_sqrtf.exit45:                                ; preds = %211, %213, %216, %218
  %.0.i43 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !50
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i46 = icmp eq i32 %220, 0, !dbg !50
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i49 = icmp eq i32 %221, 0, !dbg !50
  br i1 %.not.i46, label %227, label %222, !dbg !50

222:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %225, label %223, !dbg !50

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

227:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %230, label %228, !dbg !50

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

__nv_sqrtf.exit50:                                ; preds = %223, %225, %228, %230
  %.0.i48 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !50
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i51 = icmp eq i32 %232, 0, !dbg !50
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i54 = icmp eq i32 %233, 0, !dbg !50
  br i1 %.not.i51, label %239, label %234, !dbg !50

234:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %237, label %235, !dbg !50

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

239:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %242, label %240, !dbg !50

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

__nv_sqrtf.exit55:                                ; preds = %235, %237, %240, %242
  %.0.i53 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !50
  %244 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %245 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %246 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %247 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %248 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %250 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !32
  %251 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !34
  %252 = insertelement <2 x i32> poison, i32 %244, i64 0, !dbg !16
  %253 = insertelement <2 x i32> %252, i32 %248, i64 1, !dbg !16
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !16
  %255 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !18
  %256 = insertelement <2 x i32> %255, i32 %249, i64 1, !dbg !18
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !18
  %258 = fsub <2 x float> %254, %257, !dbg !51
  %259 = insertelement <2 x float> poison, float %135, i64 0, !dbg !52
  %260 = insertelement <2 x float> %259, float %191, i64 1, !dbg !52
  %261 = fmul <2 x float> %258, %260, !dbg !52
  %262 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !22
  %263 = insertelement <2 x i32> %262, i32 %250, i64 1, !dbg !22
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !22
  %265 = fmul <2 x float> %261, %264, !dbg !53
  %266 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !24
  %267 = insertelement <2 x i32> %266, i32 %251, i64 1, !dbg !24
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !24
  %269 = fadd <2 x float> %265, %268, !dbg !54
  %shift = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %270 = fadd <2 x float> %269, %shift, !dbg !55
  %271 = extractelement <2 x float> %270, i64 0, !dbg !55
  %272 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !36
  %273 = bitcast i32 %272 to float, !dbg !36
  %274 = fsub float %271, %273, !dbg !56
  %275 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %276 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %277 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %278 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %279 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %280 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %281 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !32
  %282 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !34
  %283 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !16
  %284 = insertelement <2 x i32> %283, i32 %279, i64 1, !dbg !16
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !16
  %286 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !18
  %287 = insertelement <2 x i32> %286, i32 %280, i64 1, !dbg !18
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !18
  %289 = fsub <2 x float> %285, %288, !dbg !51
  %290 = insertelement <2 x float> poison, float %134, i64 0, !dbg !52
  %291 = insertelement <2 x float> %290, float %190, i64 1, !dbg !52
  %292 = fmul <2 x float> %289, %291, !dbg !52
  %293 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !22
  %294 = insertelement <2 x i32> %293, i32 %281, i64 1, !dbg !22
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !22
  %296 = fmul <2 x float> %292, %295, !dbg !53
  %297 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !24
  %298 = insertelement <2 x i32> %297, i32 %282, i64 1, !dbg !24
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !24
  %300 = fadd <2 x float> %296, %299, !dbg !54
  %shift56 = shufflevector <2 x float> %300, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %301 = fadd <2 x float> %300, %shift56, !dbg !55
  %302 = extractelement <2 x float> %301, i64 0, !dbg !55
  %303 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !36
  %304 = bitcast i32 %303 to float, !dbg !36
  %305 = fsub float %302, %304, !dbg !56
  %306 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %307 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %308 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %309 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %310 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %311 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %312 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !32
  %313 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !34
  %314 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !16
  %315 = insertelement <2 x i32> %314, i32 %310, i64 1, !dbg !16
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !16
  %317 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !18
  %318 = insertelement <2 x i32> %317, i32 %311, i64 1, !dbg !18
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !18
  %320 = fsub <2 x float> %316, %319, !dbg !51
  %321 = insertelement <2 x float> poison, float %133, i64 0, !dbg !52
  %322 = insertelement <2 x float> %321, float %189, i64 1, !dbg !52
  %323 = fmul <2 x float> %320, %322, !dbg !52
  %324 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !22
  %325 = insertelement <2 x i32> %324, i32 %312, i64 1, !dbg !22
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !22
  %327 = fmul <2 x float> %323, %326, !dbg !53
  %328 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !24
  %329 = insertelement <2 x i32> %328, i32 %313, i64 1, !dbg !24
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !24
  %331 = fadd <2 x float> %327, %330, !dbg !54
  %shift57 = shufflevector <2 x float> %331, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %332 = fadd <2 x float> %331, %shift57, !dbg !55
  %333 = extractelement <2 x float> %332, i64 0, !dbg !55
  %334 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !36
  %335 = bitcast i32 %334 to float, !dbg !36
  %336 = fsub float %333, %335, !dbg !56
  %337 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %338 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %339 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %340 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %341 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %342 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %343 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !32
  %344 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !34
  %345 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !16
  %346 = insertelement <2 x i32> %345, i32 %341, i64 1, !dbg !16
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !16
  %348 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !18
  %349 = insertelement <2 x i32> %348, i32 %342, i64 1, !dbg !18
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !18
  %351 = fsub <2 x float> %347, %350, !dbg !51
  %352 = insertelement <2 x float> poison, float %132, i64 0, !dbg !52
  %353 = insertelement <2 x float> %352, float %188, i64 1, !dbg !52
  %354 = fmul <2 x float> %351, %353, !dbg !52
  %355 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !22
  %356 = insertelement <2 x i32> %355, i32 %343, i64 1, !dbg !22
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !22
  %358 = fmul <2 x float> %354, %357, !dbg !53
  %359 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !24
  %360 = insertelement <2 x i32> %359, i32 %344, i64 1, !dbg !24
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !24
  %362 = fadd <2 x float> %358, %361, !dbg !54
  %shift58 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %363 = fadd <2 x float> %362, %shift58, !dbg !55
  %364 = extractelement <2 x float> %363, i64 0, !dbg !55
  %365 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !36
  %366 = bitcast i32 %365 to float, !dbg !36
  %367 = fsub float %364, %366, !dbg !56
  %368 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !42
  %369 = bitcast i32 %368 to float, !dbg !42
  %370 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !42
  %371 = bitcast i32 %370 to float, !dbg !42
  %372 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !42
  %373 = bitcast i32 %372 to float, !dbg !42
  %374 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !42
  %375 = bitcast i32 %374 to float, !dbg !42
  %376 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !40
  %377 = bitcast i32 %376 to float, !dbg !40
  %378 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !40
  %379 = bitcast i32 %378 to float, !dbg !40
  %380 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !40
  %381 = bitcast i32 %380 to float, !dbg !40
  %382 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !40
  %383 = bitcast i32 %382 to float, !dbg !40
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !57
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !57
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !57
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !57
  %388 = fmul float %367, %384, !dbg !58
  %389 = fmul float %336, %385, !dbg !58
  %390 = fmul float %305, %386, !dbg !58
  %391 = fmul float %274, %387, !dbg !58
  %392 = fmul float %388, %383, !dbg !59
  %393 = fmul float %389, %381, !dbg !59
  %394 = fmul float %390, %379, !dbg !59
  %395 = fmul float %391, %377, !dbg !59
  %396 = fadd float %392, %375, !dbg !60
  %397 = fadd float %393, %373, !dbg !60
  %398 = fadd float %394, %371, !dbg !60
  %399 = fadd float %395, %369, !dbg !60
  %400 = getelementptr float, ptr addrspace(1) %14, i64 %26, !dbg !61
  %401 = bitcast float %364 to i32, !dbg !62
  %402 = bitcast float %333 to i32, !dbg !62
  %403 = bitcast float %302 to i32, !dbg !62
  %404 = bitcast float %271 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %401, i32 %402, i32 %403, i32 %404, ptr addrspace(1) %400, i1 true) #3, !dbg !62
  %405 = getelementptr i8, ptr addrspace(1) %15, i64 %26, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 0, ptr addrspace(1) %405, i1 true) #3, !dbg !64
  %406 = getelementptr float, ptr addrspace(1) %16, i64 %26, !dbg !65
  %407 = bitcast float %396 to i32, !dbg !66
  %408 = bitcast float %397 to i32, !dbg !66
  %409 = bitcast float %398 to i32, !dbg !66
  %410 = bitcast float %399 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %407, i32 %408, i32 %409, i32 %410, ptr addrspace(1) %406, i1 true) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqgqraygtuueugltdbvv4te7xmm3jqiqqs5e6qgsxjuyv5t3ethm.py", directory: "inductor_cache/qg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 27, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 48, column: 19, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 19, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 37, scope: !7)
!63 = !DILocation(line: 70, column: 25, scope: !7)
!64 = !DILocation(line: 70, column: 37, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 37, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
