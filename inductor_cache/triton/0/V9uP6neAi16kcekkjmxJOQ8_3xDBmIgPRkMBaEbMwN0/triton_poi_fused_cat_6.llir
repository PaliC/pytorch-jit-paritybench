; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 4096, !dbg !14
  %19 = srem i32 %18, 128, !dbg !15
  %20 = mul i32 %18, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 4096, !dbg !16
  %22 = sdiv i32 %16, 524288, !dbg !17
  %23 = icmp slt i32 %19, 32, !dbg !18
  %24 = shl nsw i32 %.decomposed, 5, !dbg !19
  %25 = shl nsw i32 %21, 5, !dbg !19
  %26 = shl nsw i32 %22, 17, !dbg !20
  %27 = add nsw i32 %24, %26, !dbg !21
  %28 = add nsw i32 %26, %25, !dbg !21
  %29 = add nsw i32 %27, %19, !dbg !22
  %30 = add nsw i32 %28, %19, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = sext i32 %19 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %23, i32 0, i1 %23) #1, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %23, i32 0, i1 %23) #1, !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = fadd float %36, %42, !dbg !27
  %46 = fadd float %38, %44, !dbg !27
  %47 = and i32 %19, -32, !dbg !28
  %48 = icmp eq i32 %47, 32, !dbg !28
  %49 = add nsw i32 %19, -32, !dbg !29
  %50 = add nsw i32 %27, %49, !dbg !30
  %51 = add nsw i32 %28, %49, !dbg !30
  %52 = sext i32 %50 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !31
  %54 = sext i32 %51 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %48, i32 0, i1 %48) #1, !dbg !32
  %57 = bitcast i32 %56 to float, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %48, i32 0, i1 %48) #1, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = sext i32 %49 to i64, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %48, i32 0, i1 %48) #1, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %48, i32 0, i1 %48) #1, !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %57, %63, !dbg !35
  %67 = fadd float %59, %65, !dbg !35
  %68 = icmp eq i32 %47, 64, !dbg !36
  %69 = add nsw i32 %19, -64, !dbg !37
  %70 = add nsw i32 %27, %69, !dbg !38
  %71 = add nsw i32 %28, %69, !dbg !38
  %72 = sext i32 %70 to i64, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !39
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %68, i32 0, i1 %68) #1, !dbg !40
  %77 = bitcast i32 %76 to float, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68) #1, !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = sext i32 %69 to i64, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %68, i32 0, i1 %68) #1, !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %68, i32 0, i1 %68) #1, !dbg !42
  %85 = bitcast i32 %84 to float, !dbg !42
  %86 = fadd float %77, %83, !dbg !43
  %87 = fadd float %79, %85, !dbg !43
  %88 = icmp sgt i32 %19, 95, !dbg !44
  %89 = add nsw i32 %19, -96, !dbg !45
  %90 = add nsw i32 %27, %89, !dbg !46
  %91 = add nsw i32 %28, %89, !dbg !46
  %92 = sext i32 %90 to i64, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !47
  %94 = sext i32 %91 to i64, !dbg !47
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %94, !dbg !47
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %88, i32 0, i1 %88) #1, !dbg !48
  %97 = bitcast i32 %96 to float, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %88, i32 0, i1 %88) #1, !dbg !48
  %99 = bitcast i32 %98 to float, !dbg !48
  %100 = sext i32 %89 to i64, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %7, i64 %100, !dbg !49
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %88, i32 0, i1 %88) #1, !dbg !50
  %103 = bitcast i32 %102 to float, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %88, i32 0, i1 %88) #1, !dbg !50
  %105 = bitcast i32 %104 to float, !dbg !50
  %106 = fadd float %97, %103, !dbg !51
  %107 = fadd float %99, %105, !dbg !51
  %108 = select i1 %88, float %106, float 0.000000e+00, !dbg !52
  %109 = select i1 %88, float %107, float 0.000000e+00, !dbg !52
  %110 = select i1 %68, float %86, float %108, !dbg !53
  %111 = select i1 %68, float %87, float %109, !dbg !53
  %112 = select i1 %48, float %66, float %110, !dbg !53
  %113 = select i1 %48, float %67, float %111, !dbg !53
  %114 = select i1 %23, float %45, float %112, !dbg !53
  %115 = select i1 %23, float %46, float %113, !dbg !53
  %116 = sext i32 %16 to i64, !dbg !54
  %117 = getelementptr float, ptr addrspace(1) %8, i64 %116, !dbg !54
  %118 = bitcast float %114 to i32, !dbg !55
  %119 = bitcast float %115 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cueikcedk7dy3ek4nqlv5kfkmcwbvzcft4qgo7vswuy44zno62j7.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 33, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 42, column: 60, scope: !7)
!30 = !DILocation(line: 42, column: 52, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 66, scope: !7)
!33 = !DILocation(line: 43, column: 31, scope: !7)
!34 = !DILocation(line: 43, column: 44, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 60, scope: !7)
!38 = !DILocation(line: 51, column: 52, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 66, scope: !7)
!41 = !DILocation(line: 52, column: 31, scope: !7)
!42 = !DILocation(line: 52, column: 44, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 60, scope: !7)
!46 = !DILocation(line: 59, column: 52, scope: !7)
!47 = !DILocation(line: 59, column: 31, scope: !7)
!48 = !DILocation(line: 59, column: 66, scope: !7)
!49 = !DILocation(line: 60, column: 31, scope: !7)
!50 = !DILocation(line: 60, column: 44, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 35, scope: !7)
!53 = !DILocation(line: 0, scope: !7)
!54 = !DILocation(line: 67, column: 25, scope: !7)
!55 = !DILocation(line: 67, column: 37, scope: !7)
!56 = !DILocation(line: 67, column: 4, scope: !7)
