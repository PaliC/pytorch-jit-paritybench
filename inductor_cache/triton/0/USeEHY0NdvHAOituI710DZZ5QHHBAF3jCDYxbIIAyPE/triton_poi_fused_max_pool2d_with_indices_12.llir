; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %.lobit12 = lshr i32 %8, 6, !dbg !17
  %26 = and i32 %.lobit12, 3, !dbg !17
  %27 = or disjoint i32 %25, %12, !dbg !18
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %28, 4, !dbg !18
  %30 = or disjoint i32 %28, 8, !dbg !18
  %31 = or disjoint i32 %28, 12, !dbg !18
  %32 = icmp slt i32 %27, 196, !dbg !19
  %33 = icmp slt i32 %28, 196, !dbg !19
  %34 = icmp slt i32 %29, 196, !dbg !19
  %35 = icmp slt i32 %30, 196, !dbg !19
  %36 = icmp slt i32 %31, 196, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %37 = sdiv i32 %.frozen, 8, !dbg !20
  %38 = mul i32 %37, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = sdiv i32 %15, 8, !dbg !20
  %40 = sdiv i32 %16, 8, !dbg !20
  %41 = sdiv i32 %17, 8, !dbg !20
  %.frozen40 = freeze i32 %18, !dbg !22
  %42 = sdiv i32 %.frozen40, 64, !dbg !22
  %43 = mul i32 %42, 64, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %43, !dbg !23
  %44 = mul nsw i32 %.decomposed, 392, !dbg !24
  %45 = mul i32 %37, 6272, !dbg !25
  %46 = mul i32 %39, 6272, !dbg !25
  %47 = mul i32 %40, 6272, !dbg !25
  %48 = mul i32 %41, 6272, !dbg !25
  %49 = add i32 %45, %44, !dbg !26
  %50 = add i32 %49, %27, !dbg !27
  %51 = add i32 %46, %44, !dbg !26
  %52 = add i32 %51, %27, !dbg !27
  %53 = add i32 %47, %44, !dbg !26
  %54 = add i32 %53, %27, !dbg !27
  %55 = add i32 %48, %44, !dbg !26
  %56 = add i32 %55, %27, !dbg !27
  %57 = sext i32 %50 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %52 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = sext i32 %54 to i64, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !28
  %63 = sext i32 %56 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %65 = and i1 %19, %32, !dbg !29
  %66 = and i1 %20, %32, !dbg !29
  %67 = and i1 %21, %32, !dbg !29
  %68 = and i1 %22, %32, !dbg !29
  %69 = and i1 %23, %33, !dbg !29
  %70 = and i1 %34, %23, !dbg !29
  %71 = and i1 %35, %23, !dbg !29
  %72 = and i1 %36, %23, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %65) #2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %66) #2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %67) #2, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %68) #2, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !30
  %93 = add i32 %27, 196, !dbg !31
  %94 = add i32 %49, %93, !dbg !32
  %95 = add i32 %51, %93, !dbg !32
  %96 = add i32 %53, %93, !dbg !32
  %97 = add i32 %55, %93, !dbg !32
  %98 = sext i32 %94 to i64, !dbg !33
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !33
  %100 = sext i32 %95 to i64, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !33
  %102 = sext i32 %96 to i64, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !33
  %104 = sext i32 %97 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !33
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %65) #2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !34
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %66) #2, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !34
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %67) #2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %68) #2, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !34
  %126 = add i32 %27, 3136, !dbg !35
  %127 = add i32 %49, %126, !dbg !36
  %128 = add i32 %51, %126, !dbg !36
  %129 = add i32 %53, %126, !dbg !36
  %130 = add i32 %55, %126, !dbg !36
  %131 = sext i32 %127 to i64, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !37
  %133 = sext i32 %128 to i64, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !37
  %135 = sext i32 %129 to i64, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !37
  %137 = sext i32 %130 to i64, !dbg !37
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !37
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %65) #2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !38
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %66) #2, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !38
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %67) #2, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !38
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !38
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %68) #2, !dbg !38
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !38
  %159 = add i32 %27, 3332, !dbg !39
  %160 = add i32 %49, %159, !dbg !40
  %161 = add i32 %51, %159, !dbg !40
  %162 = add i32 %53, %159, !dbg !40
  %163 = add i32 %55, %159, !dbg !40
  %164 = sext i32 %160 to i64, !dbg !41
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !41
  %166 = sext i32 %161 to i64, !dbg !41
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !41
  %168 = sext i32 %162 to i64, !dbg !41
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !41
  %170 = sext i32 %163 to i64, !dbg !41
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !41
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %65) #2, !dbg !42
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !42
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !42
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !42
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !42
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %66) #2, !dbg !42
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !42
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !42
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !42
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !42
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %67) #2, !dbg !42
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !42
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !42
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !42
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !42
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %68) #2, !dbg !42
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !42
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !42
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !42
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !42
  %192 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !30
  %193 = insertelement <4 x i32> %192, i32 %75, i64 1, !dbg !30
  %194 = insertelement <4 x i32> %193, i32 %76, i64 2, !dbg !30
  %195 = insertelement <4 x i32> %194, i32 %77, i64 3, !dbg !30
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !30
  %197 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !34
  %198 = insertelement <4 x i32> %197, i32 %108, i64 1, !dbg !34
  %199 = insertelement <4 x i32> %198, i32 %109, i64 2, !dbg !34
  %200 = insertelement <4 x i32> %199, i32 %110, i64 3, !dbg !34
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !34
  %202 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !38
  %203 = insertelement <4 x i32> %202, i32 %141, i64 1, !dbg !38
  %204 = insertelement <4 x i32> %203, i32 %142, i64 2, !dbg !38
  %205 = insertelement <4 x i32> %204, i32 %143, i64 3, !dbg !38
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !38
  %207 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !42
  %208 = insertelement <4 x i32> %207, i32 %174, i64 1, !dbg !42
  %209 = insertelement <4 x i32> %208, i32 %175, i64 2, !dbg !42
  %210 = insertelement <4 x i32> %209, i32 %176, i64 3, !dbg !42
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !42
  %212 = fcmp ogt <4 x float> %201, %196, !dbg !43
  %213 = zext <4 x i1> %212 to <4 x i8>, !dbg !44
  %214 = fcmp uno <4 x float> %201, zeroinitializer, !dbg !45
  %215 = or <4 x i1> %212, %214, !dbg !49
  %.v = select <4 x i1> %215, <4 x i32> %200, <4 x i32> %195, !dbg !50
  %216 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %217 = fcmp olt <4 x float> %216, %206, !dbg !51
  %218 = select <4 x i1> %217, <4 x i8> splat (i8 2), <4 x i8> %213, !dbg !52
  %219 = fcmp uno <4 x float> %206, zeroinitializer, !dbg !53
  %220 = or <4 x i1> %217, %219, !dbg !55
  %.v33 = select <4 x i1> %220, <4 x i32> %205, <4 x i32> %.v, !dbg !56
  %221 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !56
  %222 = fcmp olt <4 x float> %221, %211, !dbg !57
  %223 = select <4 x i1> %222, <4 x i8> splat (i8 3), <4 x i8> %218, !dbg !58
  %224 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !30
  %225 = insertelement <4 x i32> %224, i32 %80, i64 1, !dbg !30
  %226 = insertelement <4 x i32> %225, i32 %81, i64 2, !dbg !30
  %227 = insertelement <4 x i32> %226, i32 %82, i64 3, !dbg !30
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !30
  %229 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !34
  %230 = insertelement <4 x i32> %229, i32 %113, i64 1, !dbg !34
  %231 = insertelement <4 x i32> %230, i32 %114, i64 2, !dbg !34
  %232 = insertelement <4 x i32> %231, i32 %115, i64 3, !dbg !34
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !34
  %234 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !38
  %235 = insertelement <4 x i32> %234, i32 %146, i64 1, !dbg !38
  %236 = insertelement <4 x i32> %235, i32 %147, i64 2, !dbg !38
  %237 = insertelement <4 x i32> %236, i32 %148, i64 3, !dbg !38
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !38
  %239 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !42
  %240 = insertelement <4 x i32> %239, i32 %179, i64 1, !dbg !42
  %241 = insertelement <4 x i32> %240, i32 %180, i64 2, !dbg !42
  %242 = insertelement <4 x i32> %241, i32 %181, i64 3, !dbg !42
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !42
  %244 = fcmp ogt <4 x float> %233, %228, !dbg !43
  %245 = zext <4 x i1> %244 to <4 x i8>, !dbg !44
  %246 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !45
  %247 = or <4 x i1> %244, %246, !dbg !49
  %.v34 = select <4 x i1> %247, <4 x i32> %232, <4 x i32> %227, !dbg !50
  %248 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !50
  %249 = fcmp olt <4 x float> %248, %238, !dbg !51
  %250 = select <4 x i1> %249, <4 x i8> splat (i8 2), <4 x i8> %245, !dbg !52
  %251 = fcmp uno <4 x float> %238, zeroinitializer, !dbg !53
  %252 = or <4 x i1> %249, %251, !dbg !55
  %.v35 = select <4 x i1> %252, <4 x i32> %237, <4 x i32> %.v34, !dbg !56
  %253 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !56
  %254 = fcmp olt <4 x float> %253, %243, !dbg !57
  %255 = select <4 x i1> %254, <4 x i8> splat (i8 3), <4 x i8> %250, !dbg !58
  %256 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !30
  %257 = insertelement <4 x i32> %256, i32 %85, i64 1, !dbg !30
  %258 = insertelement <4 x i32> %257, i32 %86, i64 2, !dbg !30
  %259 = insertelement <4 x i32> %258, i32 %87, i64 3, !dbg !30
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !30
  %261 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !34
  %262 = insertelement <4 x i32> %261, i32 %118, i64 1, !dbg !34
  %263 = insertelement <4 x i32> %262, i32 %119, i64 2, !dbg !34
  %264 = insertelement <4 x i32> %263, i32 %120, i64 3, !dbg !34
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !34
  %266 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !38
  %267 = insertelement <4 x i32> %266, i32 %151, i64 1, !dbg !38
  %268 = insertelement <4 x i32> %267, i32 %152, i64 2, !dbg !38
  %269 = insertelement <4 x i32> %268, i32 %153, i64 3, !dbg !38
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !38
  %271 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !42
  %272 = insertelement <4 x i32> %271, i32 %184, i64 1, !dbg !42
  %273 = insertelement <4 x i32> %272, i32 %185, i64 2, !dbg !42
  %274 = insertelement <4 x i32> %273, i32 %186, i64 3, !dbg !42
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !42
  %276 = fcmp ogt <4 x float> %265, %260, !dbg !43
  %277 = zext <4 x i1> %276 to <4 x i8>, !dbg !44
  %278 = fcmp uno <4 x float> %265, zeroinitializer, !dbg !45
  %279 = or <4 x i1> %276, %278, !dbg !49
  %.v36 = select <4 x i1> %279, <4 x i32> %264, <4 x i32> %259, !dbg !50
  %280 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !50
  %281 = fcmp olt <4 x float> %280, %270, !dbg !51
  %282 = select <4 x i1> %281, <4 x i8> splat (i8 2), <4 x i8> %277, !dbg !52
  %283 = fcmp uno <4 x float> %270, zeroinitializer, !dbg !53
  %284 = or <4 x i1> %281, %283, !dbg !55
  %.v37 = select <4 x i1> %284, <4 x i32> %269, <4 x i32> %.v36, !dbg !56
  %285 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !56
  %286 = fcmp olt <4 x float> %285, %275, !dbg !57
  %287 = select <4 x i1> %286, <4 x i8> splat (i8 3), <4 x i8> %282, !dbg !58
  %288 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !30
  %289 = insertelement <4 x i32> %288, i32 %90, i64 1, !dbg !30
  %290 = insertelement <4 x i32> %289, i32 %91, i64 2, !dbg !30
  %291 = insertelement <4 x i32> %290, i32 %92, i64 3, !dbg !30
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !30
  %293 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !34
  %294 = insertelement <4 x i32> %293, i32 %123, i64 1, !dbg !34
  %295 = insertelement <4 x i32> %294, i32 %124, i64 2, !dbg !34
  %296 = insertelement <4 x i32> %295, i32 %125, i64 3, !dbg !34
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !34
  %298 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !38
  %299 = insertelement <4 x i32> %298, i32 %156, i64 1, !dbg !38
  %300 = insertelement <4 x i32> %299, i32 %157, i64 2, !dbg !38
  %301 = insertelement <4 x i32> %300, i32 %158, i64 3, !dbg !38
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !38
  %303 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !42
  %304 = insertelement <4 x i32> %303, i32 %189, i64 1, !dbg !42
  %305 = insertelement <4 x i32> %304, i32 %190, i64 2, !dbg !42
  %306 = insertelement <4 x i32> %305, i32 %191, i64 3, !dbg !42
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !42
  %308 = fcmp ogt <4 x float> %297, %292, !dbg !43
  %309 = zext <4 x i1> %308 to <4 x i8>, !dbg !44
  %310 = fcmp uno <4 x float> %297, zeroinitializer, !dbg !45
  %311 = or <4 x i1> %308, %310, !dbg !49
  %.v38 = select <4 x i1> %311, <4 x i32> %296, <4 x i32> %291, !dbg !50
  %312 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !50
  %313 = fcmp olt <4 x float> %312, %302, !dbg !51
  %314 = select <4 x i1> %313, <4 x i8> splat (i8 2), <4 x i8> %309, !dbg !52
  %315 = fcmp uno <4 x float> %302, zeroinitializer, !dbg !53
  %316 = or <4 x i1> %313, %315, !dbg !55
  %.v39 = select <4 x i1> %316, <4 x i32> %301, <4 x i32> %.v38, !dbg !56
  %317 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !56
  %318 = fcmp olt <4 x float> %317, %307, !dbg !57
  %319 = select <4 x i1> %318, <4 x i8> splat (i8 3), <4 x i8> %314, !dbg !58
  %320 = bitcast i32 %173 to float, !dbg !59
  %321 = fcmp uno float %320, 0.000000e+00, !dbg !59
  %322 = bitcast i32 %174 to float, !dbg !59
  %323 = fcmp uno float %322, 0.000000e+00, !dbg !59
  %324 = bitcast i32 %175 to float, !dbg !59
  %325 = fcmp uno float %324, 0.000000e+00, !dbg !59
  %326 = bitcast i32 %176 to float, !dbg !59
  %327 = fcmp uno float %326, 0.000000e+00, !dbg !59
  %328 = bitcast i32 %178 to float, !dbg !59
  %329 = fcmp uno float %328, 0.000000e+00, !dbg !59
  %330 = bitcast i32 %179 to float, !dbg !59
  %331 = fcmp uno float %330, 0.000000e+00, !dbg !59
  %332 = bitcast i32 %180 to float, !dbg !59
  %333 = fcmp uno float %332, 0.000000e+00, !dbg !59
  %334 = bitcast i32 %181 to float, !dbg !59
  %335 = fcmp uno float %334, 0.000000e+00, !dbg !59
  %336 = bitcast i32 %183 to float, !dbg !59
  %337 = fcmp uno float %336, 0.000000e+00, !dbg !59
  %338 = bitcast i32 %184 to float, !dbg !59
  %339 = fcmp uno float %338, 0.000000e+00, !dbg !59
  %340 = bitcast i32 %185 to float, !dbg !59
  %341 = fcmp uno float %340, 0.000000e+00, !dbg !59
  %342 = bitcast i32 %186 to float, !dbg !59
  %343 = fcmp uno float %342, 0.000000e+00, !dbg !59
  %344 = bitcast i32 %188 to float, !dbg !59
  %345 = fcmp uno float %344, 0.000000e+00, !dbg !59
  %346 = bitcast i32 %189 to float, !dbg !59
  %347 = fcmp uno float %346, 0.000000e+00, !dbg !59
  %348 = bitcast i32 %190 to float, !dbg !59
  %349 = fcmp uno float %348, 0.000000e+00, !dbg !59
  %350 = bitcast i32 %191 to float, !dbg !59
  %351 = fcmp uno float %350, 0.000000e+00, !dbg !59
  %352 = extractelement <4 x i1> %222, i64 0, !dbg !61
  %353 = or i1 %352, %321, !dbg !61
  %354 = extractelement <4 x i1> %222, i64 1, !dbg !61
  %355 = or i1 %354, %323, !dbg !61
  %356 = extractelement <4 x i1> %222, i64 2, !dbg !61
  %357 = or i1 %356, %325, !dbg !61
  %358 = extractelement <4 x i1> %222, i64 3, !dbg !61
  %359 = or i1 %358, %327, !dbg !61
  %360 = extractelement <4 x i1> %254, i64 0, !dbg !61
  %361 = or i1 %360, %329, !dbg !61
  %362 = extractelement <4 x i1> %254, i64 1, !dbg !61
  %363 = or i1 %362, %331, !dbg !61
  %364 = extractelement <4 x i1> %254, i64 2, !dbg !61
  %365 = or i1 %364, %333, !dbg !61
  %366 = extractelement <4 x i1> %254, i64 3, !dbg !61
  %367 = or i1 %366, %335, !dbg !61
  %368 = extractelement <4 x i1> %286, i64 0, !dbg !61
  %369 = or i1 %368, %337, !dbg !61
  %370 = extractelement <4 x i1> %286, i64 1, !dbg !61
  %371 = or i1 %370, %339, !dbg !61
  %372 = extractelement <4 x i1> %286, i64 2, !dbg !61
  %373 = or i1 %372, %341, !dbg !61
  %374 = extractelement <4 x i1> %286, i64 3, !dbg !61
  %375 = or i1 %374, %343, !dbg !61
  %376 = extractelement <4 x i1> %318, i64 0, !dbg !61
  %377 = or i1 %376, %345, !dbg !61
  %378 = extractelement <4 x i1> %318, i64 1, !dbg !61
  %379 = or i1 %378, %347, !dbg !61
  %380 = extractelement <4 x i1> %318, i64 2, !dbg !61
  %381 = or i1 %380, %349, !dbg !61
  %382 = extractelement <4 x i1> %318, i64 3, !dbg !61
  %383 = or i1 %382, %351, !dbg !61
  %384 = mul i32 %14, 196, !dbg !62
  %385 = mul i32 %15, 196, !dbg !62
  %386 = mul i32 %16, 196, !dbg !62
  %387 = mul i32 %17, 196, !dbg !62
  %388 = add i32 %27, %384, !dbg !63
  %389 = add i32 %27, %385, !dbg !63
  %390 = add i32 %27, %386, !dbg !63
  %391 = add i32 %27, %387, !dbg !63
  %392 = sext i32 %388 to i64, !dbg !64
  %393 = getelementptr i8, ptr addrspace(1) %1, i64 %392, !dbg !64
  %394 = sext i32 %389 to i64, !dbg !64
  %395 = getelementptr i8, ptr addrspace(1) %1, i64 %394, !dbg !64
  %396 = sext i32 %390 to i64, !dbg !64
  %397 = getelementptr i8, ptr addrspace(1) %1, i64 %396, !dbg !64
  %398 = sext i32 %391 to i64, !dbg !64
  %399 = getelementptr i8, ptr addrspace(1) %1, i64 %398, !dbg !64
  %400 = bitcast <4 x i8> %223 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %393, i1 %65) #2, !dbg !65
  %401 = bitcast <4 x i8> %255 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %395, i1 %66) #2, !dbg !65
  %402 = bitcast <4 x i8> %287 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %397, i1 %67) #2, !dbg !65
  %403 = bitcast <4 x i8> %319 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %403, ptr addrspace(1) %399, i1 %68) #2, !dbg !65
  %404 = shl i32 %28, 6, !dbg !66
  %405 = shl i32 %29, 6, !dbg !66
  %406 = shl i32 %30, 6, !dbg !66
  %407 = shl i32 %31, 6, !dbg !66
  %408 = mul i32 %42, 12544, !dbg !67
  %409 = add i32 %408, %.decomposed41, !dbg !68
  %410 = add i32 %409, %404, !dbg !69
  %411 = add i32 %409, %405, !dbg !69
  %412 = add i32 %409, %406, !dbg !69
  %413 = add i32 %409, %407, !dbg !69
  %414 = sext i32 %410 to i64, !dbg !70
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %414, !dbg !70
  %416 = sext i32 %411 to i64, !dbg !70
  %417 = getelementptr float, ptr addrspace(1) %2, i64 %416, !dbg !70
  %418 = sext i32 %412 to i64, !dbg !70
  %419 = getelementptr float, ptr addrspace(1) %2, i64 %418, !dbg !70
  %420 = sext i32 %413 to i64, !dbg !70
  %421 = getelementptr float, ptr addrspace(1) %2, i64 %420, !dbg !70
  %422 = shl i32 %8, 10, !dbg !71
  %423 = and i32 %422, 3072, !dbg !71
  %424 = or disjoint i32 %423, %10, !dbg !71
  %425 = and i32 %11, 1020, !dbg !71
  %426 = lshr exact i32 %423, 4, !dbg !71
  %427 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %426, !dbg !71
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !71
  %429 = extractelement <4 x i32> %.v33, i64 0, !dbg !71
  %430 = select i1 %353, i32 %173, i32 %429, !dbg !72
  %431 = insertelement <1 x i32> poison, i32 %430, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %431, i1 true) #2, !dbg !71
  %432 = or disjoint i32 %424, 256, !dbg !71
  %433 = lshr i32 %432, 6, !dbg !71
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !71
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %432, !dbg !71
  %436 = extractelement <4 x i32> %.v33, i64 1, !dbg !71
  %437 = select i1 %355, i32 %174, i32 %436, !dbg !72
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %438, i1 true) #2, !dbg !71
  %439 = or disjoint i32 %424, 512, !dbg !71
  %440 = lshr i32 %439, 6, !dbg !71
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !71
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !71
  %443 = extractelement <4 x i32> %.v33, i64 2, !dbg !71
  %444 = select i1 %357, i32 %175, i32 %443, !dbg !72
  %445 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %445, i1 true) #2, !dbg !71
  %446 = or disjoint i32 %424, 768, !dbg !71
  %447 = lshr i32 %446, 6, !dbg !71
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !71
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %446, !dbg !71
  %450 = extractelement <4 x i32> %.v33, i64 3, !dbg !71
  %451 = select i1 %359, i32 %176, i32 %450, !dbg !72
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %452, i1 true) #2, !dbg !71
  %453 = or disjoint i32 %424, 64, !dbg !71
  %454 = getelementptr float, ptr addrspace(3) %427, i32 %453, !dbg !71
  %455 = extractelement <4 x i32> %.v35, i64 0, !dbg !71
  %456 = select i1 %361, i32 %178, i32 %455, !dbg !72
  %457 = insertelement <1 x i32> poison, i32 %456, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %457, i1 true) #2, !dbg !71
  %458 = or disjoint i32 %424, 320, !dbg !71
  %459 = lshr i32 %458, 6, !dbg !71
  %460 = and i32 %459, 52, !dbg !71
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !71
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %458, !dbg !71
  %463 = extractelement <4 x i32> %.v35, i64 1, !dbg !71
  %464 = select i1 %363, i32 %179, i32 %463, !dbg !72
  %465 = insertelement <1 x i32> poison, i32 %464, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %465, i1 true) #2, !dbg !71
  %466 = or disjoint i32 %424, 576, !dbg !71
  %467 = lshr i32 %466, 6, !dbg !71
  %468 = and i32 %467, 56, !dbg !71
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !71
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %466, !dbg !71
  %471 = extractelement <4 x i32> %.v35, i64 2, !dbg !71
  %472 = select i1 %365, i32 %180, i32 %471, !dbg !72
  %473 = insertelement <1 x i32> poison, i32 %472, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %473, i1 true) #2, !dbg !71
  %474 = or disjoint i32 %424, 832, !dbg !71
  %475 = lshr i32 %474, 6, !dbg !71
  %476 = and i32 %475, 60, !dbg !71
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !71
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %474, !dbg !71
  %479 = extractelement <4 x i32> %.v35, i64 3, !dbg !71
  %480 = select i1 %367, i32 %181, i32 %479, !dbg !72
  %481 = insertelement <1 x i32> poison, i32 %480, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %481, i1 true) #2, !dbg !71
  %482 = or disjoint i32 %424, 128, !dbg !71
  %483 = getelementptr float, ptr addrspace(3) %427, i32 %482, !dbg !71
  %484 = extractelement <4 x i32> %.v37, i64 0, !dbg !71
  %485 = select i1 %369, i32 %183, i32 %484, !dbg !72
  %486 = insertelement <1 x i32> poison, i32 %485, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %486, i1 true) #2, !dbg !71
  %487 = or disjoint i32 %424, 384, !dbg !71
  %488 = lshr i32 %487, 6, !dbg !71
  %489 = and i32 %488, 52, !dbg !71
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !71
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %487, !dbg !71
  %492 = extractelement <4 x i32> %.v37, i64 1, !dbg !71
  %493 = select i1 %371, i32 %184, i32 %492, !dbg !72
  %494 = insertelement <1 x i32> poison, i32 %493, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %494, i1 true) #2, !dbg !71
  %495 = or disjoint i32 %424, 640, !dbg !71
  %496 = lshr i32 %495, 6, !dbg !71
  %497 = and i32 %496, 56, !dbg !71
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !71
  %499 = getelementptr float, ptr addrspace(3) %498, i32 %495, !dbg !71
  %500 = extractelement <4 x i32> %.v37, i64 2, !dbg !71
  %501 = select i1 %373, i32 %185, i32 %500, !dbg !72
  %502 = insertelement <1 x i32> poison, i32 %501, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %502, i1 true) #2, !dbg !71
  %503 = or disjoint i32 %424, 896, !dbg !71
  %504 = lshr i32 %503, 6, !dbg !71
  %505 = and i32 %504, 60, !dbg !71
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !71
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %503, !dbg !71
  %508 = extractelement <4 x i32> %.v37, i64 3, !dbg !71
  %509 = select i1 %375, i32 %186, i32 %508, !dbg !72
  %510 = insertelement <1 x i32> poison, i32 %509, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %510, i1 true) #2, !dbg !71
  %511 = or disjoint i32 %424, 192, !dbg !71
  %512 = getelementptr float, ptr addrspace(3) %427, i32 %511, !dbg !71
  %513 = extractelement <4 x i32> %.v39, i64 0, !dbg !71
  %514 = select i1 %377, i32 %188, i32 %513, !dbg !72
  %515 = insertelement <1 x i32> poison, i32 %514, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %512, <1 x i32> %515, i1 true) #2, !dbg !71
  %516 = or disjoint i32 %424, 448, !dbg !71
  %517 = lshr i32 %516, 6, !dbg !71
  %518 = and i32 %517, 52, !dbg !71
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i32 %518, !dbg !71
  %520 = getelementptr float, ptr addrspace(3) %519, i32 %516, !dbg !71
  %521 = extractelement <4 x i32> %.v39, i64 1, !dbg !71
  %522 = select i1 %379, i32 %189, i32 %521, !dbg !72
  %523 = insertelement <1 x i32> poison, i32 %522, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %520, <1 x i32> %523, i1 true) #2, !dbg !71
  %524 = or disjoint i32 %424, 704, !dbg !71
  %525 = lshr i32 %524, 6, !dbg !71
  %526 = and i32 %525, 56, !dbg !71
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i32 %526, !dbg !71
  %528 = getelementptr float, ptr addrspace(3) %527, i32 %524, !dbg !71
  %529 = extractelement <4 x i32> %.v39, i64 2, !dbg !71
  %530 = select i1 %381, i32 %190, i32 %529, !dbg !72
  %531 = insertelement <1 x i32> poison, i32 %530, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %531, i1 true) #2, !dbg !71
  %532 = or disjoint i32 %424, 960, !dbg !71
  %533 = lshr i32 %532, 6, !dbg !71
  %534 = and i32 %533, 60, !dbg !71
  %535 = getelementptr float, ptr addrspace(3) @global_smem, i32 %534, !dbg !71
  %536 = getelementptr float, ptr addrspace(3) %535, i32 %532, !dbg !71
  %537 = extractelement <4 x i32> %.v39, i64 3, !dbg !71
  %538 = select i1 %383, i32 %191, i32 %537, !dbg !72
  %539 = insertelement <1 x i32> poison, i32 %538, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, <1 x i32> %539, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %540 = lshr i32 %11, 6, !dbg !71
  %541 = and i32 %540, 12, !dbg !71
  %542 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %541, !dbg !71
  %543 = getelementptr inbounds float, ptr addrspace(3) %542, i32 %425, !dbg !71
  %544 = or disjoint i32 %425, 1024, !dbg !71
  %545 = lshr i32 %544, 6, !dbg !71
  %546 = and i32 %545, 28, !dbg !71
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %546, !dbg !71
  %548 = getelementptr inbounds float, ptr addrspace(3) %547, i32 %544, !dbg !71
  %549 = load <4 x i32>, ptr addrspace(3) %548, align 16, !dbg !71
  %550 = or disjoint i32 %425, 2048, !dbg !71
  %551 = lshr i32 %550, 6, !dbg !71
  %552 = and i32 %551, 44, !dbg !71
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !71
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %550, !dbg !71
  %555 = load <4 x i32>, ptr addrspace(3) %554, align 16, !dbg !71
  %556 = or disjoint i32 %425, 3072, !dbg !71
  %557 = lshr i32 %556, 6, !dbg !71
  %558 = and i32 %557, 60, !dbg !71
  %559 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %558, !dbg !71
  %560 = getelementptr inbounds float, ptr addrspace(3) %559, i32 %556, !dbg !71
  %561 = load <4 x i32>, ptr addrspace(3) %560, align 16, !dbg !71
  %.extract = load i32, ptr addrspace(3) %543, align 16, !dbg !71
  %562 = getelementptr inbounds i8, ptr addrspace(3) %543, i32 4, !dbg !71
  %.extract18 = load i32, ptr addrspace(3) %562, align 4, !dbg !71
  %563 = getelementptr inbounds i8, ptr addrspace(3) %543, i32 8, !dbg !71
  %.extract19 = load i32, ptr addrspace(3) %563, align 8, !dbg !71
  %564 = getelementptr inbounds i8, ptr addrspace(3) %543, i32 12, !dbg !71
  %.extract20 = load i32, ptr addrspace(3) %564, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %415, i1 %69) #2, !dbg !71
  %.extract21 = extractelement <4 x i32> %549, i64 0, !dbg !71
  %.extract22 = extractelement <4 x i32> %549, i64 1, !dbg !71
  %.extract23 = extractelement <4 x i32> %549, i64 2, !dbg !71
  %.extract24 = extractelement <4 x i32> %549, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %417, i1 %70) #2, !dbg !71
  %.extract25 = extractelement <4 x i32> %555, i64 0, !dbg !71
  %.extract26 = extractelement <4 x i32> %555, i64 1, !dbg !71
  %.extract27 = extractelement <4 x i32> %555, i64 2, !dbg !71
  %.extract28 = extractelement <4 x i32> %555, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %419, i1 %71) #2, !dbg !71
  %.extract29 = extractelement <4 x i32> %561, i64 0, !dbg !71
  %.extract30 = extractelement <4 x i32> %561, i64 1, !dbg !71
  %.extract31 = extractelement <4 x i32> %561, i64 2, !dbg !71
  %.extract32 = extractelement <4 x i32> %561, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %421, i1 %72) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 38, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 44, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 38, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 56, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
