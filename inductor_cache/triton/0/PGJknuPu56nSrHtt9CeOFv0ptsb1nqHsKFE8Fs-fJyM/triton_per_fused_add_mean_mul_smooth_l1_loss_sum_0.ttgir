#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0)
#loc1 = loc(unknown)
#loc77 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":86:26)
#loc111 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":123:26)
#loc121 = loc(callsite(#loc1 at #loc77))
#loc124 = loc(callsite(#loc1 at #loc111))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<48> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.addi %2, %4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %11 = tt.load %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = arith.addi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = arith.addi %12, %4 : tensor<1x64xi32, #blocked> loc(#loc12)
    %14 = tt.addptr %6, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = tt.load %16 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %2, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = arith.addi %18, %4 : tensor<1x64xi32, #blocked> loc(#loc18)
    %20 = tt.addptr %6, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = tt.addptr %9, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = tt.load %22 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc23)
    %25 = arith.addi %24, %4 : tensor<1x64xi32, #blocked> loc(#loc24)
    %26 = tt.addptr %6, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc25)
    %27 = tt.load %26 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %28 = tt.addptr %9, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %29 = tt.load %28 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc29)
    %31 = tt.addptr %30, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc29)
    %32 = tt.load %31 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc30)
    %33 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc31)
    %34 = tt.addptr %33, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc31)
    %35 = tt.load %34 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc32)
    %36 = tt.addptr %30, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc33)
    %37 = tt.load %36 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc34)
    %38 = tt.addptr %33, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc35)
    %39 = tt.load %38 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %40 = tt.addptr %30, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc37)
    %41 = tt.load %40 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc38)
    %42 = tt.addptr %33, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc39)
    %43 = tt.load %42 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    %44 = tt.addptr %30, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc41)
    %45 = tt.load %44 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc42)
    %46 = tt.addptr %33, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc43)
    %47 = tt.load %46 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc44)
    %48 = arith.subf %8, %11 : tensor<1x64xf32, #blocked> loc(#loc45)
    %49 = math.absf %48 : tensor<1x64xf32, #blocked> loc(#loc46)
    %50 = arith.cmpf olt, %49, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc47)
    %51 = arith.mulf %49, %49 : tensor<1x64xf32, #blocked> loc(#loc48)
    %52 = arith.mulf %51, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc49)
    %53 = arith.subf %49, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc50)
    %54 = arith.select %50, %52, %53 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc51)
    %55 = arith.subf %15, %17 : tensor<1x64xf32, #blocked> loc(#loc52)
    %56 = math.absf %55 : tensor<1x64xf32, #blocked> loc(#loc53)
    %57 = arith.cmpf olt, %56, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc54)
    %58 = arith.mulf %56, %56 : tensor<1x64xf32, #blocked> loc(#loc55)
    %59 = arith.mulf %58, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc56)
    %60 = arith.subf %56, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc57)
    %61 = arith.select %57, %59, %60 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc58)
    %62 = arith.addf %54, %61 : tensor<1x64xf32, #blocked> loc(#loc59)
    %63 = arith.subf %21, %23 : tensor<1x64xf32, #blocked> loc(#loc60)
    %64 = math.absf %63 : tensor<1x64xf32, #blocked> loc(#loc61)
    %65 = arith.cmpf olt, %64, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc62)
    %66 = arith.mulf %64, %64 : tensor<1x64xf32, #blocked> loc(#loc63)
    %67 = arith.mulf %66, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc64)
    %68 = arith.subf %64, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc65)
    %69 = arith.select %65, %67, %68 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc66)
    %70 = arith.addf %62, %69 : tensor<1x64xf32, #blocked> loc(#loc67)
    %71 = arith.subf %27, %29 : tensor<1x64xf32, #blocked> loc(#loc68)
    %72 = math.absf %71 : tensor<1x64xf32, #blocked> loc(#loc69)
    %73 = arith.cmpf olt, %72, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc70)
    %74 = arith.mulf %72, %72 : tensor<1x64xf32, #blocked> loc(#loc71)
    %75 = arith.mulf %74, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc72)
    %76 = arith.subf %72, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc73)
    %77 = arith.select %73, %75, %76 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc74)
    %78 = arith.addf %70, %77 : tensor<1x64xf32, #blocked> loc(#loc75)
    %79 = "tt.reduce"(%78) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc77)), %arg7: f32 loc(callsite(#loc1 at #loc77))):
      %120 = arith.addf %arg6, %arg7 : f32 loc(#loc125)
      tt.reduce.return %120 : f32 loc(#loc120)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc120)
    %80 = tt.expand_dims %79 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc79)
    %81 = arith.subf %32, %35 : tensor<1x64xf32, #blocked> loc(#loc80)
    %82 = math.absf %81 : tensor<1x64xf32, #blocked> loc(#loc81)
    %83 = arith.cmpf olt, %82, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc82)
    %84 = arith.mulf %82, %82 : tensor<1x64xf32, #blocked> loc(#loc83)
    %85 = arith.mulf %84, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc84)
    %86 = arith.subf %82, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc85)
    %87 = arith.select %83, %85, %86 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc86)
    %88 = arith.subf %37, %39 : tensor<1x64xf32, #blocked> loc(#loc87)
    %89 = math.absf %88 : tensor<1x64xf32, #blocked> loc(#loc88)
    %90 = arith.cmpf olt, %89, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc89)
    %91 = arith.mulf %89, %89 : tensor<1x64xf32, #blocked> loc(#loc90)
    %92 = arith.mulf %91, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc91)
    %93 = arith.subf %89, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc92)
    %94 = arith.select %90, %92, %93 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc93)
    %95 = arith.addf %87, %94 : tensor<1x64xf32, #blocked> loc(#loc94)
    %96 = arith.subf %41, %43 : tensor<1x64xf32, #blocked> loc(#loc95)
    %97 = math.absf %96 : tensor<1x64xf32, #blocked> loc(#loc96)
    %98 = arith.cmpf olt, %97, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc97)
    %99 = arith.mulf %97, %97 : tensor<1x64xf32, #blocked> loc(#loc98)
    %100 = arith.mulf %99, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc99)
    %101 = arith.subf %97, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc100)
    %102 = arith.select %98, %100, %101 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc101)
    %103 = arith.addf %95, %102 : tensor<1x64xf32, #blocked> loc(#loc102)
    %104 = arith.subf %45, %47 : tensor<1x64xf32, #blocked> loc(#loc103)
    %105 = math.absf %104 : tensor<1x64xf32, #blocked> loc(#loc104)
    %106 = arith.cmpf olt, %105, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc105)
    %107 = arith.mulf %105, %105 : tensor<1x64xf32, #blocked> loc(#loc106)
    %108 = arith.mulf %107, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc107)
    %109 = arith.subf %105, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc108)
    %110 = arith.select %106, %108, %109 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc109)
    %111 = arith.addf %103, %110 : tensor<1x64xf32, #blocked> loc(#loc110)
    %112 = "tt.reduce"(%111) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc111)), %arg7: f32 loc(callsite(#loc1 at #loc111))):
      %120 = arith.addf %arg6, %arg7 : f32 loc(#loc126)
      tt.reduce.return %120 : f32 loc(#loc123)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc123)
    %113 = tt.expand_dims %112 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc112)
    %114 = arith.divf %80, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc113)
    %115 = arith.divf %113, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc114)
    %116 = arith.addf %114, %115 : tensor<1x1xf32, #blocked> loc(#loc115)
    gpu.barrier loc(#loc116)
    %117 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc117)
    %118 = tt.splat %117 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc118)
    %119 = triton_gpu.convert_layout %116 : tensor<1x1xf32, #blocked> -> tensor<1x1xf32, #blocked1> loc(#loc118)
    tt.store %118, %119 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc118)
    tt.return loc(#loc119)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":26:34)
#loc3 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":29:19)
#loc4 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":30:19)
#loc5 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":32:38)
#loc6 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":32:35)
#loc7 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":32:30)
#loc8 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":32:43)
#loc9 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":33:30)
#loc10 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":33:43)
#loc11 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":34:36)
#loc12 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":34:41)
#loc13 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":34:31)
#loc14 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":34:49)
#loc15 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":35:31)
#loc16 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":35:49)
#loc17 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":36:36)
#loc18 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":36:41)
#loc19 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":36:31)
#loc20 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":36:49)
#loc21 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":37:31)
#loc22 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":37:49)
#loc23 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":38:36)
#loc24 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":38:41)
#loc25 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":38:31)
#loc26 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":38:49)
#loc27 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":39:31)
#loc28 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":39:49)
#loc29 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":40:31)
#loc30 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":40:44)
#loc31 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":41:31)
#loc32 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":41:44)
#loc33 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":42:31)
#loc34 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":42:49)
#loc35 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":43:31)
#loc36 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":43:49)
#loc37 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":44:31)
#loc38 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":44:49)
#loc39 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":45:31)
#loc40 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":45:49)
#loc41 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":46:31)
#loc42 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":46:49)
#loc43 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":47:31)
#loc44 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":47:49)
#loc45 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":48:18)
#loc46 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":49:23)
#loc47 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":51:18)
#loc48 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":52:18)
#loc49 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":54:18)
#loc50 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":56:19)
#loc51 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":57:33)
#loc52 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":58:20)
#loc53 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":59:24)
#loc54 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":60:20)
#loc55 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":61:20)
#loc56 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":62:20)
#loc57 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":64:20)
#loc58 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":65:35)
#loc59 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":66:20)
#loc60 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":67:20)
#loc61 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":68:24)
#loc62 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":69:20)
#loc63 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":70:20)
#loc64 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":71:20)
#loc65 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":73:20)
#loc66 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":74:35)
#loc67 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":75:20)
#loc68 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":76:20)
#loc69 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":77:24)
#loc70 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":78:20)
#loc71 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":79:20)
#loc72 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":80:20)
#loc73 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":82:20)
#loc74 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":83:35)
#loc75 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":84:20)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc79 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":86:29)
#loc80 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":87:20)
#loc81 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":88:24)
#loc82 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":89:20)
#loc83 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":90:20)
#loc84 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":91:20)
#loc85 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":93:20)
#loc86 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":94:35)
#loc87 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":95:20)
#loc88 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":96:24)
#loc89 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":97:20)
#loc90 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":98:20)
#loc91 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":99:20)
#loc92 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":101:20)
#loc93 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":102:35)
#loc94 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":103:20)
#loc95 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":104:20)
#loc96 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":105:24)
#loc97 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":106:20)
#loc98 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":107:20)
#loc99 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":108:20)
#loc100 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":110:20)
#loc101 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":111:35)
#loc102 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":112:20)
#loc103 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":113:20)
#loc104 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":114:24)
#loc105 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":115:20)
#loc106 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":116:20)
#loc107 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":117:20)
#loc108 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":119:20)
#loc109 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":120:35)
#loc110 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":121:20)
#loc112 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":123:29)
#loc113 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":125:20)
#loc114 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":127:20)
#loc115 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":129:20)
#loc116 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":130:4)
#loc117 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":131:28)
#loc118 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":131:71)
#loc119 = loc("inductor_cache/c7/cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py":131:4)
#loc120 = loc(callsite(#loc76 at #loc77))
#loc122 = loc(callsite(#loc78 at #loc76))
#loc123 = loc(callsite(#loc76 at #loc111))
#loc125 = loc(callsite(#loc122 at #loc77))
#loc126 = loc(callsite(#loc122 at #loc111))
