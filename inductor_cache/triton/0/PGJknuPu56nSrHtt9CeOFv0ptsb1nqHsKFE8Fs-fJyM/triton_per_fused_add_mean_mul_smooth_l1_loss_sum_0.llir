; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %7, 15, !dbg !11
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 192, !dbg !12
  %13 = or disjoint i32 %12, %10, !dbg !13
  %14 = zext nneg i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !17
  %19 = or disjoint i32 %13, 16, !dbg !18
  %20 = zext nneg i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !22
  %25 = or disjoint i32 %13, 32, !dbg !23
  %26 = zext nneg i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !27
  %31 = or disjoint i32 %13, 48, !dbg !28
  %32 = zext nneg i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !31
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !35
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !37
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !38
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !39
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !40
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !41
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !42
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !43
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !44
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !45
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !46
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !47
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !48
  %53 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %54 = insertelement <2 x i32> %53, i32 %22, i64 1, !dbg !15
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !15
  %56 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !17
  %57 = insertelement <2 x i32> %56, i32 %24, i64 1, !dbg !17
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !17
  %59 = fsub <2 x float> %55, %58, !dbg !49
  %60 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %59), !dbg !50
  %61 = fcmp olt <2 x float> %60, splat (float 1.000000e+00), !dbg !51
  %62 = fmul <2 x float> %59, %59, !dbg !52
  %63 = fmul <2 x float> %62, splat (float 5.000000e-01), !dbg !53
  %64 = fadd <2 x float> %60, splat (float -5.000000e-01), !dbg !54
  %65 = select <2 x i1> %61, <2 x float> %63, <2 x float> %64, !dbg !55
  %shift = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %66 = fadd <2 x float> %65, %shift, !dbg !56
  %67 = extractelement <2 x float> %66, i64 0, !dbg !56
  %68 = icmp eq i32 %8, 0, !dbg !57
  %69 = and i32 %9, 1, !dbg !57
  %70 = zext nneg i32 %69 to i64, !dbg !57
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !57
  %72 = icmp slt i32 %7, 2, !dbg !57
  %73 = sext i32 %7 to i64, !dbg !57
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !57
  %75 = and i32 %7, 1, !dbg !57
  %76 = icmp eq i32 %75, 0, !dbg !57
  %77 = and i1 %72, %76, !dbg !57
  %78 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !34
  %79 = insertelement <2 x i32> %78, i32 %42, i64 1, !dbg !34
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !34
  %81 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !36
  %82 = insertelement <2 x i32> %81, i32 %44, i64 1, !dbg !36
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !36
  %84 = fsub <2 x float> %80, %83, !dbg !61
  %85 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %84), !dbg !62
  %86 = fcmp olt <2 x float> %85, splat (float 1.000000e+00), !dbg !63
  %87 = fmul <2 x float> %84, %84, !dbg !64
  %88 = fmul <2 x float> %87, splat (float 5.000000e-01), !dbg !65
  %89 = fadd <2 x float> %85, splat (float -5.000000e-01), !dbg !66
  %90 = select <2 x i1> %86, <2 x float> %88, <2 x float> %89, !dbg !67
  %shift1 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !68
  %91 = fadd <2 x float> %90, %shift1, !dbg !68
  %92 = extractelement <2 x float> %91, i64 0, !dbg !68
  %93 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !46
  %94 = insertelement <4 x i32> %93, i32 %46, i64 1, !dbg !46
  %95 = insertelement <4 x i32> %94, i32 %34, i64 2, !dbg !46
  %96 = insertelement <4 x i32> %95, i32 %28, i64 3, !dbg !46
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !46
  %98 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !48
  %99 = insertelement <4 x i32> %98, i32 %48, i64 1, !dbg !48
  %100 = insertelement <4 x i32> %99, i32 %36, i64 2, !dbg !48
  %101 = insertelement <4 x i32> %100, i32 %30, i64 3, !dbg !48
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !48
  %103 = fsub <4 x float> %97, %102, !dbg !69
  %104 = fmul <4 x float> %103, %103, !dbg !70
  %105 = extractelement <4 x float> %104, i64 3, !dbg !70
  %106 = fmul float %105, 5.000000e-01, !dbg !71
  %107 = tail call <4 x float> @llvm.fabs.v4f32(<4 x float> %103), !dbg !72
  %108 = extractelement <4 x float> %107, i64 3, !dbg !73
  %109 = fadd float %108, -5.000000e-01, !dbg !73
  %110 = fcmp olt <4 x float> %107, splat (float 1.000000e+00), !dbg !74
  %111 = extractelement <4 x i1> %110, i64 3, !dbg !75
  %112 = select i1 %111, float %106, float %109, !dbg !75
  %113 = fadd float %67, %112, !dbg !76
  %114 = fmul <4 x float> %103, %103, !dbg !77
  %115 = extractelement <4 x float> %114, i64 2, !dbg !77
  %116 = fmul float %115, 5.000000e-01, !dbg !78
  %117 = extractelement <4 x float> %107, i64 2, !dbg !79
  %118 = fadd float %117, -5.000000e-01, !dbg !79
  %119 = extractelement <4 x i1> %110, i64 2, !dbg !80
  %120 = select i1 %119, float %116, float %118, !dbg !80
  %121 = fadd float %113, %120, !dbg !81
  %122 = bitcast float %121 to i32, !dbg !57
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !57
  %124 = bitcast i32 %123 to float, !dbg !57
  %125 = fadd float %121, %124, !dbg !82
  %126 = bitcast float %125 to i32, !dbg !57
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !57
  %128 = bitcast i32 %127 to float, !dbg !57
  %129 = fadd float %125, %128, !dbg !82
  %130 = bitcast float %129 to i32, !dbg !57
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !57
  %132 = bitcast i32 %131 to float, !dbg !57
  %133 = fadd float %129, %132, !dbg !82
  %134 = bitcast float %133 to i32, !dbg !57
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !57
  %136 = bitcast i32 %135 to float, !dbg !57
  %137 = fadd float %133, %136, !dbg !82
  %138 = bitcast float %137 to i32, !dbg !57
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !57
  %140 = bitcast i32 %139 to float, !dbg !57
  %141 = fadd float %137, %140, !dbg !82
  %142 = bitcast float %141 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %142, i1 %68) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %143 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %72) #4, !dbg !57
  %144 = bitcast i32 %143 to float, !dbg !57
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !57
  %146 = bitcast i32 %145 to float, !dbg !57
  %147 = fadd float %144, %146, !dbg !82
  %148 = bitcast float %147 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %148, i1 %77) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %149 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !57
  %150 = fmul <4 x float> %103, %103, !dbg !84
  %151 = extractelement <4 x float> %150, i64 1, !dbg !84
  %152 = fmul float %151, 5.000000e-01, !dbg !85
  %153 = extractelement <4 x float> %107, i64 1, !dbg !86
  %154 = fadd float %153, -5.000000e-01, !dbg !86
  %155 = extractelement <4 x i1> %110, i64 1, !dbg !87
  %156 = select i1 %155, float %152, float %154, !dbg !87
  %157 = fadd float %92, %156, !dbg !88
  %158 = fmul <4 x float> %103, %103, !dbg !89
  %159 = extractelement <4 x float> %158, i64 0, !dbg !89
  %160 = fmul float %159, 5.000000e-01, !dbg !90
  %161 = extractelement <4 x float> %107, i64 0, !dbg !91
  %162 = fadd float %161, -5.000000e-01, !dbg !91
  %163 = extractelement <4 x i1> %110, i64 0, !dbg !92
  %164 = select i1 %163, float %160, float %162, !dbg !92
  %165 = fadd float %157, %164, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %166 = bitcast float %165 to i32, !dbg !94
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !94
  %168 = bitcast i32 %167 to float, !dbg !94
  %169 = fadd float %165, %168, !dbg !96
  %170 = bitcast float %169 to i32, !dbg !94
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !94
  %172 = bitcast i32 %171 to float, !dbg !94
  %173 = fadd float %169, %172, !dbg !96
  %174 = bitcast float %173 to i32, !dbg !94
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !94
  %176 = bitcast i32 %175 to float, !dbg !94
  %177 = fadd float %173, %176, !dbg !96
  %178 = bitcast float %177 to i32, !dbg !94
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !94
  %180 = bitcast i32 %179 to float, !dbg !94
  %181 = fadd float %177, %180, !dbg !96
  %182 = bitcast float %181 to i32, !dbg !94
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !94
  %184 = bitcast i32 %183 to float, !dbg !94
  %185 = fadd float %181, %184, !dbg !96
  %186 = bitcast float %185 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %186, i1 %68) #4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %72) #4, !dbg !94
  %188 = bitcast i32 %187 to float, !dbg !94
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !94
  %190 = bitcast i32 %189 to float, !dbg !94
  %191 = fadd float %188, %190, !dbg !96
  %192 = bitcast float %191 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %192, i1 %77) #4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %193 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !94
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 6.400000e+01) #4, !dbg !97
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float 6.400000e+01) #4, !dbg !98
  %196 = fadd float %194, %195, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %urem = and i32 %7, 63, !dbg !101
  %197 = icmp eq i32 %urem, 0, !dbg !101
  %198 = bitcast float %196 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %0, i1 %197) #4, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7ksp4yhbvdm4p4mndjlbhmwxkzcq3oaw4wswxdu676e3bxxrfz.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0", linkageName: "triton_per_fused_add_mean_mul_smooth_l1_loss_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 34, column: 41, scope: !7)
!19 = !DILocation(line: 34, column: 31, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 49, scope: !7)
!23 = !DILocation(line: 36, column: 41, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 41, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 49, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 49, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 49, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 49, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 49, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 49, scope: !7)
!49 = !DILocation(line: 48, column: 18, scope: !7)
!50 = !DILocation(line: 49, column: 23, scope: !7)
!51 = !DILocation(line: 51, column: 18, scope: !7)
!52 = !DILocation(line: 52, column: 18, scope: !7)
!53 = !DILocation(line: 54, column: 18, scope: !7)
!54 = !DILocation(line: 56, column: 19, scope: !7)
!55 = !DILocation(line: 57, column: 33, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!60 = !DILocation(line: 86, column: 26, scope: !7)
!61 = !DILocation(line: 87, column: 20, scope: !7)
!62 = !DILocation(line: 88, column: 24, scope: !7)
!63 = !DILocation(line: 89, column: 20, scope: !7)
!64 = !DILocation(line: 90, column: 20, scope: !7)
!65 = !DILocation(line: 91, column: 20, scope: !7)
!66 = !DILocation(line: 93, column: 20, scope: !7)
!67 = !DILocation(line: 94, column: 35, scope: !7)
!68 = !DILocation(line: 103, column: 20, scope: !7)
!69 = !DILocation(line: 113, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 114, column: 24, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 115, column: 20, scope: !7)
!75 = !DILocation(line: 74, column: 35, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 20, scope: !7)
!80 = !DILocation(line: 83, column: 35, scope: !7)
!81 = !DILocation(line: 84, column: 20, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !83, inlinedAt: !60)
!83 = distinct !DILexicalBlockFile(scope: !58, file: !59, discriminator: 0)
!84 = !DILocation(line: 107, column: 20, scope: !7)
!85 = !DILocation(line: 108, column: 20, scope: !7)
!86 = !DILocation(line: 110, column: 20, scope: !7)
!87 = !DILocation(line: 111, column: 35, scope: !7)
!88 = !DILocation(line: 112, column: 20, scope: !7)
!89 = !DILocation(line: 116, column: 20, scope: !7)
!90 = !DILocation(line: 117, column: 20, scope: !7)
!91 = !DILocation(line: 119, column: 20, scope: !7)
!92 = !DILocation(line: 120, column: 35, scope: !7)
!93 = !DILocation(line: 121, column: 20, scope: !7)
!94 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !95)
!95 = !DILocation(line: 123, column: 26, scope: !7)
!96 = !DILocation(line: 256, column: 15, scope: !83, inlinedAt: !95)
!97 = !DILocation(line: 125, column: 20, scope: !7)
!98 = !DILocation(line: 127, column: 20, scope: !7)
!99 = !DILocation(line: 129, column: 20, scope: !7)
!100 = !DILocation(line: 130, column: 4, scope: !7)
!101 = !DILocation(line: 131, column: 71, scope: !7)
!102 = !DILocation(line: 131, column: 4, scope: !7)
