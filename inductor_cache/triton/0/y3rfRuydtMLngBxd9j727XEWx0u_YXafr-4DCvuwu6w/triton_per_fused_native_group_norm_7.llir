; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = and i32 %11, 7, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 32, !dbg !14
  %19 = icmp slt i32 %17, 32, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 8, !dbg !16
  %22 = mul i32 %21, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = and i32 %13, 504, !dbg !18
  %24 = add nsw i32 %.decomposed, %23, !dbg !19
  %25 = shl i32 %21, 9, !dbg !20
  %26 = add i32 %24, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = bitcast i32 %50 to float, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = select i1 %18, float %34, float 0.000000e+00, !dbg !28
  %59 = select i1 %18, float %35, float 0.000000e+00, !dbg !28
  %60 = select i1 %18, float %36, float 0.000000e+00, !dbg !28
  %61 = select i1 %18, float %37, float 0.000000e+00, !dbg !28
  %62 = select i1 %18, float %44, float 0.000000e+00, !dbg !29
  %63 = select i1 %18, float %45, float 0.000000e+00, !dbg !29
  %64 = select i1 %18, float %46, float 0.000000e+00, !dbg !29
  %65 = select i1 %18, float %47, float 0.000000e+00, !dbg !29
  %66 = select i1 %18, float %54, float 0.000000e+00, !dbg !30
  %67 = select i1 %18, float %55, float 0.000000e+00, !dbg !30
  %68 = select i1 %18, float %56, float 0.000000e+00, !dbg !30
  %69 = select i1 %18, float %57, float 0.000000e+00, !dbg !30
  %70 = bitcast float %58 to i32, !dbg !31
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = bitcast float %62 to i32, !dbg !31
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = bitcast float %66 to i32, !dbg !31
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = fsub float %72, %58, !dbg !35
  %80 = fadd float %66, %78, !dbg !37
  %81 = fcmp oeq float %80, 0.000000e+00, !dbg !38
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %80) #3, !dbg !39
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !40
  %84 = fmul float %79, %83, !dbg !41
  %85 = fadd float %58, %84, !dbg !42
  %86 = fadd float %62, %75, !dbg !43
  %87 = fmul float %79, %79, !dbg !44
  %88 = fmul float %66, %87, !dbg !45
  %89 = fmul float %88, %83, !dbg !46
  %90 = fadd float %86, %89, !dbg !47
  %91 = bitcast float %85 to i32, !dbg !31
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = bitcast float %90 to i32, !dbg !31
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = bitcast float %80 to i32, !dbg !31
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = fsub float %93, %85, !dbg !35
  %101 = fadd float %80, %99, !dbg !37
  %102 = fcmp oeq float %101, 0.000000e+00, !dbg !38
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %101) #3, !dbg !39
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !40
  %105 = fmul float %100, %104, !dbg !41
  %106 = fadd float %85, %105, !dbg !42
  %107 = fadd float %90, %96, !dbg !43
  %108 = fmul float %100, %100, !dbg !44
  %109 = fmul float %80, %108, !dbg !45
  %110 = fmul float %104, %109, !dbg !46
  %111 = fadd float %107, %110, !dbg !47
  %112 = bitcast float %106 to i32, !dbg !31
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = bitcast float %111 to i32, !dbg !31
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !31
  %117 = bitcast i32 %116 to float, !dbg !31
  %118 = bitcast float %101 to i32, !dbg !31
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = fsub float %114, %106, !dbg !35
  %122 = fadd float %101, %120, !dbg !37
  %123 = fcmp oeq float %122, 0.000000e+00, !dbg !38
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %122) #3, !dbg !39
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !40
  %126 = fmul float %121, %125, !dbg !41
  %127 = fadd float %106, %126, !dbg !42
  %128 = fadd float %111, %117, !dbg !43
  %129 = fmul float %121, %121, !dbg !44
  %130 = fmul float %101, %129, !dbg !45
  %131 = fmul float %125, %130, !dbg !46
  %132 = fadd float %128, %131, !dbg !47
  %133 = bitcast float %127 to i32, !dbg !31
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = bitcast float %132 to i32, !dbg !31
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !31
  %138 = bitcast i32 %137 to float, !dbg !31
  %139 = bitcast float %122 to i32, !dbg !31
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = fsub float %135, %127, !dbg !35
  %143 = fadd float %122, %141, !dbg !37
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !38
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %143) #3, !dbg !39
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !40
  %147 = fmul float %142, %146, !dbg !41
  %148 = fadd float %127, %147, !dbg !42
  %149 = fadd float %132, %138, !dbg !43
  %150 = fmul float %142, %142, !dbg !44
  %151 = fmul float %122, %150, !dbg !45
  %152 = fmul float %146, %151, !dbg !46
  %153 = fadd float %149, %152, !dbg !47
  %154 = bitcast float %59 to i32, !dbg !31
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !31
  %156 = bitcast i32 %155 to float, !dbg !31
  %157 = bitcast float %63 to i32, !dbg !31
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 16, i32 31), !dbg !31
  %159 = bitcast i32 %158 to float, !dbg !31
  %160 = bitcast float %67 to i32, !dbg !31
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !31
  %162 = bitcast i32 %161 to float, !dbg !31
  %163 = fsub float %156, %59, !dbg !35
  %164 = fadd float %67, %162, !dbg !37
  %165 = fcmp oeq float %164, 0.000000e+00, !dbg !38
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %164) #3, !dbg !39
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !40
  %168 = fmul float %163, %167, !dbg !41
  %169 = fadd float %59, %168, !dbg !42
  %170 = fadd float %63, %159, !dbg !43
  %171 = fmul float %163, %163, !dbg !44
  %172 = fmul float %67, %171, !dbg !45
  %173 = fmul float %172, %167, !dbg !46
  %174 = fadd float %170, %173, !dbg !47
  %175 = bitcast float %169 to i32, !dbg !31
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 8, i32 31), !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = bitcast float %174 to i32, !dbg !31
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 8, i32 31), !dbg !31
  %180 = bitcast i32 %179 to float, !dbg !31
  %181 = bitcast float %164 to i32, !dbg !31
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = fsub float %177, %169, !dbg !35
  %185 = fadd float %164, %183, !dbg !37
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !38
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %185) #3, !dbg !39
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !40
  %189 = fmul float %184, %188, !dbg !41
  %190 = fadd float %169, %189, !dbg !42
  %191 = fadd float %174, %180, !dbg !43
  %192 = fmul float %184, %184, !dbg !44
  %193 = fmul float %164, %192, !dbg !45
  %194 = fmul float %188, %193, !dbg !46
  %195 = fadd float %191, %194, !dbg !47
  %196 = bitcast float %190 to i32, !dbg !31
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !31
  %198 = bitcast i32 %197 to float, !dbg !31
  %199 = bitcast float %195 to i32, !dbg !31
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 4, i32 31), !dbg !31
  %201 = bitcast i32 %200 to float, !dbg !31
  %202 = bitcast float %185 to i32, !dbg !31
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !31
  %204 = bitcast i32 %203 to float, !dbg !31
  %205 = fsub float %198, %190, !dbg !35
  %206 = fadd float %185, %204, !dbg !37
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !38
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %206) #3, !dbg !39
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !40
  %210 = fmul float %205, %209, !dbg !41
  %211 = fadd float %190, %210, !dbg !42
  %212 = fadd float %195, %201, !dbg !43
  %213 = fmul float %205, %205, !dbg !44
  %214 = fmul float %185, %213, !dbg !45
  %215 = fmul float %209, %214, !dbg !46
  %216 = fadd float %212, %215, !dbg !47
  %217 = bitcast float %211 to i32, !dbg !31
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !31
  %219 = bitcast i32 %218 to float, !dbg !31
  %220 = bitcast float %216 to i32, !dbg !31
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !31
  %222 = bitcast i32 %221 to float, !dbg !31
  %223 = bitcast float %206 to i32, !dbg !31
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 2, i32 31), !dbg !31
  %225 = bitcast i32 %224 to float, !dbg !31
  %226 = fsub float %219, %211, !dbg !35
  %227 = fadd float %206, %225, !dbg !37
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !38
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %227) #3, !dbg !39
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !40
  %231 = fmul float %226, %230, !dbg !41
  %232 = fadd float %211, %231, !dbg !42
  %233 = fadd float %216, %222, !dbg !43
  %234 = fmul float %226, %226, !dbg !44
  %235 = fmul float %206, %234, !dbg !45
  %236 = fmul float %230, %235, !dbg !46
  %237 = fadd float %233, %236, !dbg !47
  %238 = bitcast float %60 to i32, !dbg !31
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !31
  %240 = bitcast i32 %239 to float, !dbg !31
  %241 = bitcast float %64 to i32, !dbg !31
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !31
  %243 = bitcast i32 %242 to float, !dbg !31
  %244 = bitcast float %68 to i32, !dbg !31
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !31
  %246 = bitcast i32 %245 to float, !dbg !31
  %247 = fsub float %240, %60, !dbg !35
  %248 = fadd float %68, %246, !dbg !37
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !38
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #3, !dbg !39
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !40
  %252 = fmul float %247, %251, !dbg !41
  %253 = fadd float %60, %252, !dbg !42
  %254 = fadd float %64, %243, !dbg !43
  %255 = fmul float %247, %247, !dbg !44
  %256 = fmul float %68, %255, !dbg !45
  %257 = fmul float %256, %251, !dbg !46
  %258 = fadd float %254, %257, !dbg !47
  %259 = bitcast float %253 to i32, !dbg !31
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !31
  %261 = bitcast i32 %260 to float, !dbg !31
  %262 = bitcast float %258 to i32, !dbg !31
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !31
  %264 = bitcast i32 %263 to float, !dbg !31
  %265 = bitcast float %248 to i32, !dbg !31
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !31
  %267 = bitcast i32 %266 to float, !dbg !31
  %268 = fsub float %261, %253, !dbg !35
  %269 = fadd float %248, %267, !dbg !37
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !38
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #3, !dbg !39
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !40
  %273 = fmul float %268, %272, !dbg !41
  %274 = fadd float %253, %273, !dbg !42
  %275 = fadd float %258, %264, !dbg !43
  %276 = fmul float %268, %268, !dbg !44
  %277 = fmul float %248, %276, !dbg !45
  %278 = fmul float %272, %277, !dbg !46
  %279 = fadd float %275, %278, !dbg !47
  %280 = bitcast float %274 to i32, !dbg !31
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !31
  %282 = bitcast i32 %281 to float, !dbg !31
  %283 = bitcast float %279 to i32, !dbg !31
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !31
  %285 = bitcast i32 %284 to float, !dbg !31
  %286 = bitcast float %269 to i32, !dbg !31
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !31
  %288 = bitcast i32 %287 to float, !dbg !31
  %289 = fsub float %282, %274, !dbg !35
  %290 = fadd float %269, %288, !dbg !37
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !38
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #3, !dbg !39
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !40
  %294 = fmul float %289, %293, !dbg !41
  %295 = fadd float %274, %294, !dbg !42
  %296 = fadd float %279, %285, !dbg !43
  %297 = fmul float %289, %289, !dbg !44
  %298 = fmul float %269, %297, !dbg !45
  %299 = fmul float %293, %298, !dbg !46
  %300 = fadd float %296, %299, !dbg !47
  %301 = bitcast float %295 to i32, !dbg !31
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !31
  %303 = bitcast i32 %302 to float, !dbg !31
  %304 = bitcast float %300 to i32, !dbg !31
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !31
  %306 = bitcast i32 %305 to float, !dbg !31
  %307 = bitcast float %290 to i32, !dbg !31
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !31
  %309 = bitcast i32 %308 to float, !dbg !31
  %310 = fsub float %303, %295, !dbg !35
  %311 = fadd float %290, %309, !dbg !37
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !38
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #3, !dbg !39
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !40
  %315 = fmul float %310, %314, !dbg !41
  %316 = fadd float %295, %315, !dbg !42
  %317 = fadd float %300, %306, !dbg !43
  %318 = fmul float %310, %310, !dbg !44
  %319 = fmul float %290, %318, !dbg !45
  %320 = fmul float %314, %319, !dbg !46
  %321 = fadd float %317, %320, !dbg !47
  %322 = bitcast float %61 to i32, !dbg !31
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 16, i32 31), !dbg !31
  %324 = bitcast i32 %323 to float, !dbg !31
  %325 = bitcast float %65 to i32, !dbg !31
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 16, i32 31), !dbg !31
  %327 = bitcast i32 %326 to float, !dbg !31
  %328 = bitcast float %69 to i32, !dbg !31
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 16, i32 31), !dbg !31
  %330 = bitcast i32 %329 to float, !dbg !31
  %331 = fsub float %324, %61, !dbg !35
  %332 = fadd float %69, %330, !dbg !37
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !38
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #3, !dbg !39
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !40
  %336 = fmul float %331, %335, !dbg !41
  %337 = fadd float %61, %336, !dbg !42
  %338 = fadd float %65, %327, !dbg !43
  %339 = fmul float %331, %331, !dbg !44
  %340 = fmul float %69, %339, !dbg !45
  %341 = fmul float %340, %335, !dbg !46
  %342 = fadd float %338, %341, !dbg !47
  %343 = bitcast float %337 to i32, !dbg !31
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 8, i32 31), !dbg !31
  %345 = bitcast i32 %344 to float, !dbg !31
  %346 = bitcast float %342 to i32, !dbg !31
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !31
  %348 = bitcast i32 %347 to float, !dbg !31
  %349 = bitcast float %332 to i32, !dbg !31
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !31
  %351 = bitcast i32 %350 to float, !dbg !31
  %352 = fsub float %345, %337, !dbg !35
  %353 = fadd float %332, %351, !dbg !37
  %354 = fcmp oeq float %353, 0.000000e+00, !dbg !38
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %353) #3, !dbg !39
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !40
  %357 = fmul float %352, %356, !dbg !41
  %358 = fadd float %337, %357, !dbg !42
  %359 = fadd float %342, %348, !dbg !43
  %360 = fmul float %352, %352, !dbg !44
  %361 = fmul float %332, %360, !dbg !45
  %362 = fmul float %356, %361, !dbg !46
  %363 = fadd float %359, %362, !dbg !47
  %364 = bitcast float %358 to i32, !dbg !31
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !31
  %366 = bitcast i32 %365 to float, !dbg !31
  %367 = bitcast float %363 to i32, !dbg !31
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !31
  %369 = bitcast i32 %368 to float, !dbg !31
  %370 = bitcast float %353 to i32, !dbg !31
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !31
  %372 = bitcast i32 %371 to float, !dbg !31
  %373 = fsub float %366, %358, !dbg !35
  %374 = fadd float %353, %372, !dbg !37
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !38
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %374) #3, !dbg !39
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !40
  %378 = fmul float %373, %377, !dbg !41
  %379 = fadd float %358, %378, !dbg !42
  %380 = fadd float %363, %369, !dbg !43
  %381 = fmul float %373, %373, !dbg !44
  %382 = fmul float %353, %381, !dbg !45
  %383 = fmul float %377, %382, !dbg !46
  %384 = fadd float %380, %383, !dbg !47
  %385 = bitcast float %379 to i32, !dbg !31
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !31
  %387 = bitcast i32 %386 to float, !dbg !31
  %388 = bitcast float %384 to i32, !dbg !31
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !31
  %390 = bitcast i32 %389 to float, !dbg !31
  %391 = bitcast float %374 to i32, !dbg !31
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !31
  %393 = bitcast i32 %392 to float, !dbg !31
  %394 = fsub float %387, %379, !dbg !35
  %395 = fadd float %374, %393, !dbg !37
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !38
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %395) #3, !dbg !39
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !40
  %399 = fmul float %394, %398, !dbg !41
  %400 = fadd float %379, %399, !dbg !42
  %401 = fadd float %384, %390, !dbg !43
  %402 = fmul float %394, %394, !dbg !44
  %403 = fmul float %374, %402, !dbg !45
  %404 = fmul float %398, %403, !dbg !46
  %405 = fadd float %401, %404, !dbg !47
  %406 = icmp samesign ult i32 %12, 2, !dbg !31
  %407 = and i32 %20, 3, !dbg !31
  %408 = shl nuw nsw i32 %14, 2, !dbg !31
  %409 = or disjoint i32 %408, %407, !dbg !31
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !31
  %411 = bitcast float %148 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 %406) #3, !dbg !31
  %412 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %409, !dbg !31
  %413 = bitcast float %153 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 %406) #3, !dbg !31
  %414 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %409, !dbg !31
  %415 = bitcast float %143 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 %406) #3, !dbg !31
  %416 = or disjoint i32 %408, 4, !dbg !31
  %417 = or disjoint i32 %416, %407, !dbg !31
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !31
  %419 = bitcast float %232 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 %406) #3, !dbg !31
  %420 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %417, !dbg !31
  %421 = bitcast float %237 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 %406) #3, !dbg !31
  %422 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %417, !dbg !31
  %423 = bitcast float %227 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 %406) #3, !dbg !31
  %424 = or disjoint i32 %408, 8, !dbg !31
  %425 = or disjoint i32 %424, %407, !dbg !31
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !31
  %427 = bitcast float %316 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 %406) #3, !dbg !31
  %428 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %425, !dbg !31
  %429 = bitcast float %321 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 %406) #3, !dbg !31
  %430 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %425, !dbg !31
  %431 = bitcast float %311 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 %406) #3, !dbg !31
  %432 = or disjoint i32 %408, 12, !dbg !31
  %433 = or disjoint i32 %432, %407, !dbg !31
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !31
  %435 = bitcast float %400 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 %406) #3, !dbg !31
  %436 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %433, !dbg !31
  %437 = bitcast float %405 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 %406) #3, !dbg !31
  %438 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %433, !dbg !31
  %439 = bitcast float %395 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 %406) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %440 = icmp slt i32 %11, 32, !dbg !31
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %440) #3, !dbg !31
  %443 = bitcast i32 %442 to float, !dbg !31
  %444 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !31
  %445 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %440) #3, !dbg !31
  %446 = bitcast i32 %445 to float, !dbg !31
  %447 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %11, !dbg !31
  %448 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %440) #3, !dbg !31
  %449 = bitcast i32 %448 to float, !dbg !31
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 2, i32 31), !dbg !31
  %451 = bitcast i32 %450 to float, !dbg !31
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !31
  %453 = bitcast i32 %452 to float, !dbg !31
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !31
  %455 = bitcast i32 %454 to float, !dbg !31
  %456 = fsub float %451, %443, !dbg !35
  %457 = fadd float %449, %455, !dbg !37
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !38
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %457) #3, !dbg !39
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !40
  %461 = fmul float %456, %460, !dbg !41
  %462 = fadd float %461, %443, !dbg !42
  %463 = fadd float %446, %453, !dbg !43
  %464 = fmul float %456, %456, !dbg !44
  %465 = fmul float %464, %449, !dbg !45
  %466 = fmul float %465, %460, !dbg !46
  %467 = fadd float %463, %466, !dbg !47
  %468 = bitcast float %462 to i32, !dbg !31
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 1, i32 31), !dbg !31
  %470 = bitcast i32 %469 to float, !dbg !31
  %471 = bitcast float %467 to i32, !dbg !31
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 1, i32 31), !dbg !31
  %473 = bitcast i32 %472 to float, !dbg !31
  %474 = bitcast float %457 to i32, !dbg !31
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 1, i32 31), !dbg !31
  %476 = bitcast i32 %475 to float, !dbg !31
  %477 = fsub float %470, %462, !dbg !35
  %478 = fadd float %457, %476, !dbg !37
  %479 = fcmp oeq float %478, 0.000000e+00, !dbg !38
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %478) #3, !dbg !39
  %481 = select i1 %479, float 0.000000e+00, float %480, !dbg !40
  %482 = fmul float %477, %481, !dbg !41
  %483 = fadd float %462, %482, !dbg !42
  %484 = fadd float %467, %473, !dbg !43
  %485 = fmul float %477, %477, !dbg !44
  %486 = fmul float %457, %485, !dbg !45
  %487 = fmul float %481, %486, !dbg !46
  %488 = fadd float %484, %487, !dbg !47
  %489 = and i32 %11, 3, !dbg !31
  %490 = icmp eq i32 %489, 0, !dbg !31
  %491 = and i1 %440, %490, !dbg !31
  %492 = bitcast float %483 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %492, i1 %491) #3, !dbg !31
  %493 = bitcast float %488 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %493, i1 %491) #3, !dbg !31
  %494 = bitcast float %478 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %494, i1 %491) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !31
  %496 = load i32, ptr addrspace(3) %495, align 16, !dbg !31
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !31
  %498 = load i32, ptr addrspace(3) %497, align 16, !dbg !31
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %424, !dbg !31
  %500 = load i32, ptr addrspace(3) %499, align 16, !dbg !31
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !31
  %502 = load i32, ptr addrspace(3) %501, align 16, !dbg !31
  %503 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %408, !dbg !31
  %504 = load i32, ptr addrspace(3) %503, align 16, !dbg !31
  %505 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %416, !dbg !31
  %506 = load i32, ptr addrspace(3) %505, align 16, !dbg !31
  %507 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %424, !dbg !31
  %508 = load i32, ptr addrspace(3) %507, align 16, !dbg !31
  %509 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %432, !dbg !31
  %510 = load i32, ptr addrspace(3) %509, align 16, !dbg !31
  %511 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %408, !dbg !31
  %512 = load i32, ptr addrspace(3) %511, align 16, !dbg !31
  %513 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %416, !dbg !31
  %514 = load i32, ptr addrspace(3) %513, align 16, !dbg !31
  %515 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %424, !dbg !31
  %516 = load i32, ptr addrspace(3) %515, align 16, !dbg !31
  %517 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %432, !dbg !31
  %518 = load i32, ptr addrspace(3) %517, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %519, i32 %496, i32 %498, i32 %500, i32 %502, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %521 = load i32, ptr addrspace(3) %520, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %519, i32 %504, i32 %506, i32 %508, i32 %510, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %522 = load i32, ptr addrspace(3) %520, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %519, i32 %512, i32 %514, i32 %516, i32 %518, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %523 = load i32, ptr addrspace(3) %520, align 4, !dbg !50
  %524 = sext i32 %17 to i64, !dbg !51
  %525 = getelementptr float, ptr addrspace(1) %3, i64 %524, !dbg !51
  %526 = lshr i32 %12, 3, !dbg !52
  %527 = shl nuw nsw i32 %407, 2, !dbg !52
  %528 = or disjoint i32 %527, %526, !dbg !52
  %529 = icmp eq i32 %528, 0, !dbg !52
  %530 = and i1 %529, %19, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %525, i1 %530) #3, !dbg !52
  %531 = getelementptr float, ptr addrspace(1) %4, i64 %524, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %522, ptr addrspace(1) %531, i1 %530) #3, !dbg !54
  %532 = getelementptr float, ptr addrspace(1) %5, i64 %524, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %523, ptr addrspace(1) %532, i1 %530) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czket54n5uttlvazwantofmsggkqk6f2i3pzuzn6wvt77fq4u5rg.py", directory: "inductor_cache/zk")
!4 = !{ptr @triton_per_fused_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_7", linkageName: "triton_per_fused_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 37, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 51, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 51, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 42, column: 67, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 43, column: 18, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 18, scope: !7)
!51 = !DILocation(line: 46, column: 25, scope: !7)
!52 = !DILocation(line: 46, column: 37, scope: !7)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 25, scope: !7)
!56 = !DILocation(line: 48, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 4, scope: !7)
