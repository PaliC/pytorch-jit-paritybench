; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 128, !dbg !14
  %12 = mul i32 %11, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = sdiv i32 %10, 128, !dbg !14
  %14 = srem i32 %11, 16, !dbg !16
  %15 = srem i32 %13, 16, !dbg !16
  %16 = sdiv i32 %9, 2048, !dbg !17
  %17 = sdiv i32 %10, 2048, !dbg !17
  %18 = shl nsw i32 %14, 8, !dbg !18
  %19 = shl nsw i32 %15, 8, !dbg !18
  %20 = shl i32 %16, 13, !dbg !19
  %21 = shl i32 %17, 13, !dbg !19
  %22 = add i32 %20, %.decomposed, !dbg !20
  %23 = add i32 %22, %18, !dbg !21
  %24 = add i32 %21, %.decomposed, !dbg !20
  %25 = add i32 %24, %19, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = add i32 %22, 128, !dbg !24
  %49 = add i32 %48, %18, !dbg !25
  %50 = add i32 %24, 128, !dbg !24
  %51 = add i32 %50, %19, !dbg !25
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %51 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = add i32 %22, 4096, !dbg !28
  %75 = add i32 %74, %18, !dbg !29
  %76 = add i32 %24, 4096, !dbg !28
  %77 = add i32 %76, %19, !dbg !29
  %78 = sext i32 %75 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %77 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !31
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !31
  %87 = bitcast i32 %83 to float, !dbg !31
  %88 = bitcast i32 %84 to float, !dbg !31
  %89 = bitcast i32 %85 to float, !dbg !31
  %90 = bitcast i32 %86 to float, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %96 = bitcast i32 %92 to float, !dbg !31
  %97 = bitcast i32 %93 to float, !dbg !31
  %98 = bitcast i32 %94 to float, !dbg !31
  %99 = bitcast i32 %95 to float, !dbg !31
  %100 = add i32 %22, 4224, !dbg !32
  %101 = add i32 %100, %18, !dbg !33
  %102 = add i32 %24, 4224, !dbg !32
  %103 = add i32 %102, %19, !dbg !33
  %104 = sext i32 %101 to i64, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !34
  %106 = sext i32 %103 to i64, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !35
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !35
  %113 = bitcast i32 %109 to float, !dbg !35
  %114 = bitcast i32 %110 to float, !dbg !35
  %115 = bitcast i32 %111 to float, !dbg !35
  %116 = bitcast i32 %112 to float, !dbg !35
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !35
  %122 = bitcast i32 %118 to float, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = bitcast i32 %120 to float, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = fcmp ogt float %61, %35, !dbg !36
  %127 = fcmp ogt float %62, %36, !dbg !36
  %128 = fcmp ogt float %63, %37, !dbg !36
  %129 = fcmp ogt float %64, %38, !dbg !36
  %130 = fcmp ogt float %70, %44, !dbg !36
  %131 = fcmp ogt float %71, %45, !dbg !36
  %132 = fcmp ogt float %72, %46, !dbg !36
  %133 = fcmp ogt float %73, %47, !dbg !36
  %134 = fcmp uno float %61, 0.000000e+00, !dbg !40
  %135 = fcmp uno float %62, 0.000000e+00, !dbg !40
  %136 = fcmp uno float %63, 0.000000e+00, !dbg !40
  %137 = fcmp uno float %64, 0.000000e+00, !dbg !40
  %138 = fcmp uno float %70, 0.000000e+00, !dbg !40
  %139 = fcmp uno float %71, 0.000000e+00, !dbg !40
  %140 = fcmp uno float %72, 0.000000e+00, !dbg !40
  %141 = fcmp uno float %73, 0.000000e+00, !dbg !40
  %142 = or i1 %126, %134, !dbg !41
  %143 = or i1 %127, %135, !dbg !41
  %144 = or i1 %128, %136, !dbg !41
  %145 = or i1 %129, %137, !dbg !41
  %146 = or i1 %130, %138, !dbg !41
  %147 = or i1 %131, %139, !dbg !41
  %148 = or i1 %132, %140, !dbg !41
  %149 = or i1 %133, %141, !dbg !41
  %150 = select i1 %142, float %61, float %35, !dbg !42
  %151 = select i1 %143, float %62, float %36, !dbg !42
  %152 = select i1 %144, float %63, float %37, !dbg !42
  %153 = select i1 %145, float %64, float %38, !dbg !42
  %154 = select i1 %146, float %70, float %44, !dbg !42
  %155 = select i1 %147, float %71, float %45, !dbg !42
  %156 = select i1 %148, float %72, float %46, !dbg !42
  %157 = select i1 %149, float %73, float %47, !dbg !42
  %158 = fcmp olt float %150, %87, !dbg !43
  %159 = fcmp olt float %151, %88, !dbg !43
  %160 = fcmp olt float %152, %89, !dbg !43
  %161 = fcmp olt float %153, %90, !dbg !43
  %162 = fcmp olt float %154, %96, !dbg !43
  %163 = fcmp olt float %155, %97, !dbg !43
  %164 = fcmp olt float %156, %98, !dbg !43
  %165 = fcmp olt float %157, %99, !dbg !43
  %166 = fcmp uno float %87, 0.000000e+00, !dbg !45
  %167 = fcmp uno float %88, 0.000000e+00, !dbg !45
  %168 = fcmp uno float %89, 0.000000e+00, !dbg !45
  %169 = fcmp uno float %90, 0.000000e+00, !dbg !45
  %170 = fcmp uno float %96, 0.000000e+00, !dbg !45
  %171 = fcmp uno float %97, 0.000000e+00, !dbg !45
  %172 = fcmp uno float %98, 0.000000e+00, !dbg !45
  %173 = fcmp uno float %99, 0.000000e+00, !dbg !45
  %174 = or i1 %166, %158, !dbg !46
  %175 = or i1 %167, %159, !dbg !46
  %176 = or i1 %168, %160, !dbg !46
  %177 = or i1 %169, %161, !dbg !46
  %178 = or i1 %170, %162, !dbg !46
  %179 = or i1 %171, %163, !dbg !46
  %180 = or i1 %172, %164, !dbg !46
  %181 = or i1 %173, %165, !dbg !46
  %182 = select i1 %174, float %87, float %150, !dbg !47
  %183 = select i1 %175, float %88, float %151, !dbg !47
  %184 = select i1 %176, float %89, float %152, !dbg !47
  %185 = select i1 %177, float %90, float %153, !dbg !47
  %186 = select i1 %178, float %96, float %154, !dbg !47
  %187 = select i1 %179, float %97, float %155, !dbg !47
  %188 = select i1 %180, float %98, float %156, !dbg !47
  %189 = select i1 %181, float %99, float %157, !dbg !47
  %190 = fcmp olt float %182, %113, !dbg !48
  %191 = fcmp olt float %183, %114, !dbg !48
  %192 = fcmp olt float %184, %115, !dbg !48
  %193 = fcmp olt float %185, %116, !dbg !48
  %194 = fcmp olt float %186, %122, !dbg !48
  %195 = fcmp olt float %187, %123, !dbg !48
  %196 = fcmp olt float %188, %124, !dbg !48
  %197 = fcmp olt float %189, %125, !dbg !48
  %198 = fcmp uno float %113, 0.000000e+00, !dbg !50
  %199 = fcmp uno float %114, 0.000000e+00, !dbg !50
  %200 = fcmp uno float %115, 0.000000e+00, !dbg !50
  %201 = fcmp uno float %116, 0.000000e+00, !dbg !50
  %202 = fcmp uno float %122, 0.000000e+00, !dbg !50
  %203 = fcmp uno float %123, 0.000000e+00, !dbg !50
  %204 = fcmp uno float %124, 0.000000e+00, !dbg !50
  %205 = fcmp uno float %125, 0.000000e+00, !dbg !50
  %206 = or i1 %198, %190, !dbg !51
  %207 = or i1 %199, %191, !dbg !51
  %208 = or i1 %200, %192, !dbg !51
  %209 = or i1 %201, %193, !dbg !51
  %210 = or i1 %202, %194, !dbg !51
  %211 = or i1 %203, %195, !dbg !51
  %212 = or i1 %204, %196, !dbg !51
  %213 = or i1 %205, %197, !dbg !51
  %214 = sext i32 %9 to i64, !dbg !52
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !52
  %216 = sext i32 %10 to i64, !dbg !52
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !52
  %218 = bitcast float %182 to i32, !dbg !53
  %219 = select i1 %206, i32 %109, i32 %218, !dbg !54
  %220 = bitcast float %183 to i32, !dbg !53
  %221 = select i1 %207, i32 %110, i32 %220, !dbg !54
  %222 = bitcast float %184 to i32, !dbg !53
  %223 = select i1 %208, i32 %111, i32 %222, !dbg !54
  %224 = bitcast float %185 to i32, !dbg !53
  %225 = select i1 %209, i32 %112, i32 %224, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %221, i32 %223, i32 %225, ptr addrspace(1) %215, i1 true) #1, !dbg !53
  %226 = bitcast float %186 to i32, !dbg !53
  %227 = select i1 %210, i32 %118, i32 %226, !dbg !54
  %228 = bitcast float %187 to i32, !dbg !53
  %229 = select i1 %211, i32 %119, i32 %228, !dbg !54
  %230 = bitcast float %188 to i32, !dbg !53
  %231 = select i1 %212, i32 %120, i32 %230, !dbg !54
  %232 = bitcast float %189 to i32, !dbg !53
  %233 = select i1 %213, i32 %121, i32 %232, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %229, i32 %231, i32 %233, ptr addrspace(1) %217, i1 true) #1, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c26y7sa7wu7sgeqvdfdwaqlujenlx62sb52qsmsanxpiqx73ohnq.py", directory: "inductor_cache/26")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 32, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 33, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !49)
!49 = !DILocation(line: 34, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !49)
!52 = !DILocation(line: 35, column: 25, scope: !7)
!53 = !DILocation(line: 35, column: 36, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !49)
!55 = !DILocation(line: 35, column: 4, scope: !7)
