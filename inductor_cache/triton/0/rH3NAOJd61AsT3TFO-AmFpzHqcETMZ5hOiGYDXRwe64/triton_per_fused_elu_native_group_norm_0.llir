; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_elu_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 63, !dbg !12
  %15 = lshr i32 %14, 4, !dbg !13
  %16 = shl i32 %9, 6, !dbg !14
  %17 = or disjoint i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = zext nneg i32 %15 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = select i1 %10, float %21, float 0.000000e+00, !dbg !22
  %30 = bitcast float %29 to i32, !dbg !23
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 16, i32 31), !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = fadd float %29, %32, !dbg !27
  %34 = bitcast float %33 to i32, !dbg !23
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = fadd float %33, %36, !dbg !27
  %38 = bitcast float %37 to i32, !dbg !23
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = fadd float %37, %40, !dbg !27
  %42 = bitcast float %41 to i32, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fadd float %41, %44, !dbg !27
  %46 = bitcast float %45 to i32, !dbg !23
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = fadd float %45, %48, !dbg !27
  %50 = icmp eq i32 %12, 0, !dbg !23
  %51 = and i32 %13, 1, !dbg !23
  %52 = zext nneg i32 %51 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52, !dbg !23
  %54 = bitcast float %49 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 %50) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %55 = icmp slt i32 %11, 2, !dbg !23
  %56 = sext i32 %11 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !23
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %55) #5, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = fadd float %59, %61, !dbg !27
  %63 = and i32 %11, 1, !dbg !23
  %64 = icmp eq i32 %63, 0, !dbg !23
  %65 = and i1 %55, %64, !dbg !23
  %66 = bitcast float %62 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %67 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float 6.400000e+01) #5, !dbg !29
  %69 = fsub float %21, %68, !dbg !30
  %70 = fmul float %69, %69, !dbg !31
  %71 = select i1 %10, float %70, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %72 = bitcast float %71 to i32, !dbg !33
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = fadd float %71, %74, !dbg !35
  %76 = bitcast float %75 to i32, !dbg !33
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = fadd float %75, %78, !dbg !35
  %80 = bitcast float %79 to i32, !dbg !33
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = fadd float %79, %82, !dbg !35
  %84 = bitcast float %83 to i32, !dbg !33
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = fadd float %83, %86, !dbg !35
  %88 = bitcast float %87 to i32, !dbg !33
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !33
  %90 = bitcast i32 %89 to float, !dbg !33
  %91 = fadd float %87, %90, !dbg !35
  %92 = bitcast float %91 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %92, i1 %50) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %93 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %55) #5, !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !33
  %96 = bitcast i32 %95 to float, !dbg !33
  %97 = fadd float %94, %96, !dbg !35
  %98 = bitcast float %97 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %98, i1 %65) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %99 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 6.400000e+01) #5, !dbg !36
  %101 = fadd float %100, 0x3EE4F8B580000000, !dbg !37
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %102, 0, !dbg !38
  br i1 %.not.i, label %105, label %103, !dbg !38

103:                                              ; preds = %8
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

105:                                              ; preds = %8
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !38
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i1 = icmp eq i32 %107, 0, !dbg !38
  br i1 %.not.i1, label %110, label %108, !dbg !38

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !38
  %112 = fmul float %69, %.0.i2, !dbg !39
  %113 = fmul float %112, %25, !dbg !40
  %114 = fadd float %113, %28, !dbg !41
  %115 = fmul float %114, 0x3FF7154760000000, !dbg !42
  %116 = tail call float @llvm.nvvm.round.f(float %115) #5, !dbg !42
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i4 = icmp eq i32 %117, 0, !dbg !42
  %118 = tail call float @llvm.nvvm.fabs.ftz.f(float %114) #5, !dbg !42
  %119 = tail call float @llvm.nvvm.fabs.f(float %114) #5, !dbg !42
  %.03.i = select i1 %.not.i4, float %119, float %118, !dbg !42
  %120 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !42
  %t.0.i = select i1 %120, float 0.000000e+00, float %116, !dbg !42
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %123 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !42
  %j.0.i = select i1 %123, float 1.270000e+02, float %t.0.i, !dbg !42
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not8.i = icmp eq i32 %129, 0, !dbg !42
  br i1 %.not8.i, label %132, label %130, !dbg !42

130:                                              ; preds = %__nv_rsqrtf.exit3
  %131 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #5, !dbg !42
  br label %__nv_expm1f.exit, !dbg !42

132:                                              ; preds = %__nv_rsqrtf.exit3
  %133 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #5, !dbg !42
  br label %__nv_expm1f.exit, !dbg !42

__nv_expm1f.exit:                                 ; preds = %130, %132
  %.0.i5 = phi float [ %131, %130 ], [ %133, %132 ], !dbg !42
  %134 = fcmp ogt float %114, 0.000000e+00, !dbg !43
  %.not7.i = icmp eq i32 %128, 0, !dbg !42
  %.not6.i = icmp eq i32 %127, 0, !dbg !42
  %.not5.i = icmp eq i32 %126, 0, !dbg !42
  %.not4.i = icmp eq i32 %125, 0, !dbg !42
  %.not3.i = icmp eq i32 %124, 0, !dbg !42
  %.not2.i = icmp eq i32 %122, 0, !dbg !42
  %135 = fneg float %t.0.i, !dbg !42
  %.not1.i = icmp eq i32 %121, 0, !dbg !42
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %135, float 0x3FE62E4000000000, float %114) #5, !dbg !42
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %135, float 0x3FE62E4000000000, float %114) #5, !dbg !42
  %.04.i = select i1 %.not1.i, float %136, float %137, !dbg !42
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %135, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !42
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %135, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !42
  %.05.i = select i1 %.not2.i, float %138, float %139, !dbg !42
  %140 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !42
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !42
  %.07.i = select i1 %.not3.i, float %140, float %141, !dbg !42
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !42
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !42
  %.08.i = select i1 %.not4.i, float %142, float %143, !dbg !42
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !42
  %145 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !42
  %.09.i = select i1 %.not5.i, float %144, float %145, !dbg !42
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !42
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !42
  %.06.i = select i1 %.not6.i, float %146, float %147, !dbg !42
  %148 = fmul float %.05.i, %.06.i, !dbg !42
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %148, float %.05.i, float %.05.i) #5, !dbg !42
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float %.05.i, float %.05.i) #5, !dbg !42
  %.01.i = select i1 %.not7.i, float %149, float %150, !dbg !42
  %151 = fadd float %.0.i5, -1.000000e+00, !dbg !42
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not9.i = icmp eq i32 %152, 0, !dbg !42
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i5, float %151) #5, !dbg !42
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i5, float %151) #5, !dbg !42
  %.02.i = select i1 %.not9.i, float %154, float %153, !dbg !42
  %155 = fadd float %.02.i, %.02.i, !dbg !42
  %u.0.i = select i1 %123, float %155, float %.02.i, !dbg !42
  %156 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !42
  %u.1.i = select i1 %156, float 0x7FF0000000000000, float %u.0.i, !dbg !42
  %157 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !42
  %u.2.i = select i1 %157, float -1.000000e+00, float %u.1.i, !dbg !42
  %158 = fcmp oeq float %114, 0.000000e+00, !dbg !42
  %159 = fadd float %114, %114, !dbg !42
  %u.3.i = select i1 %158, float %159, float %u.2.i, !dbg !42
  %160 = select i1 %134, float %114, float %u.3.i, !dbg !44
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !45
  %162 = bitcast float %160 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %161, i1 %10) #5, !dbg !46
  %163 = sext i32 %9 to i64, !dbg !47
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !47
  %165 = icmp eq i32 %14, 0, !dbg !48
  %166 = bitcast float %.0.i to i32, !dbg !48
  %167 = and i1 %165, %10, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %164, i1 %167) #5, !dbg !48
  %168 = getelementptr float, ptr addrspace(1) %4, i64 %163, !dbg !49
  %169 = bitcast float %68 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %168, i1 %167) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cshbna67llj4n2in5m6nwdruj2afsz4pna7ebv635wtmulp6qqri.py", directory: "inductor_cache/sh")
!4 = !{ptr @triton_per_fused_elu_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_elu_native_group_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_elu_native_group_norm_0", linkageName: "triton_per_fused_elu_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 38, column: 33, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 39, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 42, column: 19, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 35, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !34)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 28, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 61, column: 28, scope: !7)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 63, column: 35, scope: !7)
!45 = !DILocation(line: 64, column: 28, scope: !7)
!46 = !DILocation(line: 64, column: 48, scope: !7)
!47 = !DILocation(line: 65, column: 25, scope: !7)
!48 = !DILocation(line: 65, column: 37, scope: !7)
!49 = !DILocation(line: 66, column: 25, scope: !7)
!50 = !DILocation(line: 66, column: 37, scope: !7)
!51 = !DILocation(line: 66, column: 4, scope: !7)
