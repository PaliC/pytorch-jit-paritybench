; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = shl i32 %7, 12, !dbg !13
  %13 = or disjoint i32 %12, %11
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = bitcast i32 %20 to float, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %29 = bitcast i32 %27 to float, !dbg !18
  %30 = bitcast i32 %28 to float, !dbg !18
  %31 = fadd float %21, %29, !dbg !19
  %32 = fadd float %22, %30, !dbg !19
  %33 = fadd float %31, 0.000000e+00, !dbg !20
  %34 = fadd float %32, 0.000000e+00, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !21
  %36 = bitcast float %31 to i32, !dbg !22
  %37 = bitcast float %32 to i32, !dbg !22
  %38 = or disjoint i64 %14, 2048, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !15
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !17
  %41 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !16
  %42 = insertelement <2 x i32> %41, i32 %18, i64 1, !dbg !16
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !16
  %44 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %45 = insertelement <2 x i32> %44, i32 %26, i64 1, !dbg !18
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !18
  %47 = fadd <2 x float> %43, %46, !dbg !19
  %48 = fadd <2 x float> %47, zeroinitializer, !dbg !20
  %bc = bitcast <2 x float> %47 to <2 x i32>, !dbg !22
  %49 = extractelement <2 x i32> %bc, i64 0, !dbg !22
  %bc4 = bitcast <2 x float> %47 to <2 x i32>, !dbg !22
  %50 = extractelement <2 x i32> %bc4, i64 1, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %49, i32 %50, i32 %36, i32 %37, ptr addrspace(1) %35, i1 %8) #3, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !16
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !16
  %56 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !16
  %57 = insertelement <2 x i32> %56, i32 %53, i64 1, !dbg !16
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !16
  %59 = bitcast i32 %54 to float, !dbg !16
  %60 = bitcast i32 %55 to float, !dbg !16
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !18
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !18
  %66 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !18
  %67 = insertelement <2 x i32> %66, i32 %63, i64 1, !dbg !18
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !18
  %69 = bitcast i32 %64 to float, !dbg !18
  %70 = bitcast i32 %65 to float, !dbg !18
  %71 = fadd <2 x float> %58, %68, !dbg !19
  %72 = fadd float %59, %69, !dbg !19
  %73 = fadd float %60, %70, !dbg !19
  %74 = fadd <2 x float> %48, %71, !dbg !20
  %75 = fadd float %33, %72, !dbg !20
  %76 = fadd float %34, %73, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !21
  %bc5 = bitcast <2 x float> %71 to <2 x i32>, !dbg !22
  %78 = extractelement <2 x i32> %bc5, i64 0, !dbg !22
  %bc6 = bitcast <2 x float> %71 to <2 x i32>, !dbg !22
  %79 = extractelement <2 x i32> %bc6, i64 1, !dbg !22
  %80 = bitcast float %72 to i32, !dbg !22
  %81 = bitcast float %73 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %78, i32 %79, i32 %80, i32 %81, ptr addrspace(1) %77, i1 %8) #3, !dbg !22
  %82 = lshr i32 %9, 5, !dbg !12
  %83 = and i32 %9, 31, !dbg !12
  %shift = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %84 = fadd <2 x float> %74, %shift, !dbg !24
  %85 = extractelement <2 x float> %84, i64 0, !dbg !24
  %86 = fadd float %75, %85, !dbg !24
  %87 = fadd float %76, %86, !dbg !24
  %88 = select i1 %8, float %87, float 0.000000e+00, !dbg !24
  %89 = bitcast float %88 to i32, !dbg !29
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %88, %91, !dbg !24
  %93 = bitcast float %92 to i32, !dbg !29
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = fadd float %92, %95, !dbg !24
  %97 = bitcast float %96 to i32, !dbg !29
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !29
  %99 = bitcast i32 %98 to float, !dbg !29
  %100 = fadd float %96, %99, !dbg !24
  %101 = bitcast float %100 to i32, !dbg !29
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = fadd float %100, %103, !dbg !24
  %105 = bitcast float %104 to i32, !dbg !29
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fadd float %104, %107, !dbg !24
  %109 = icmp eq i32 %83, 0, !dbg !29
  %110 = and i32 %82, 15, !dbg !29
  %111 = zext nneg i32 %110 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !29
  %113 = bitcast float %108 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %109) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %114 = icmp slt i32 %9, 16, !dbg !29
  %115 = sext i32 %9 to i64, !dbg !29
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i64 %115, !dbg !29
  %117 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %116, i1 %114) #3, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %118, %120, !dbg !24
  %122 = bitcast float %121 to i32, !dbg !29
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fadd float %121, %124, !dbg !24
  %126 = bitcast float %125 to i32, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %125, %128, !dbg !24
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fadd float %129, %132, !dbg !24
  %134 = and i32 %9, 15, !dbg !29
  %135 = icmp eq i32 %134, 0, !dbg !29
  %136 = and i1 %114, %135, !dbg !29
  %137 = bitcast float %133 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %137, i1 %136) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %138 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 4.096000e+03) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %140 = sext i32 %7 to i64, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !32
  %urem = and i32 %9, 511, !dbg !33
  %142 = icmp eq i32 %urem, 0, !dbg !33
  %143 = bitcast float %139 to i32, !dbg !33
  %144 = and i1 %142, %8, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %141, i1 %144) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxl24k2cdfc76aluvnrcrwayoxh4b3aymxysqgcv2burytxe3j3c.py", directory: "inductor_cache/xl")
!4 = !{ptr @triton_red_fused_add_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mean_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mean_0", linkageName: "triton_red_fused_add_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 34, column: 22, scope: !7)
!20 = !DILocation(line: 36, column: 23, scope: !7)
!21 = !DILocation(line: 38, column: 29, scope: !7)
!22 = !DILocation(line: 38, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 25, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
!32 = !DILocation(line: 43, column: 28, scope: !7)
!33 = !DILocation(line: 43, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 4, scope: !7)
