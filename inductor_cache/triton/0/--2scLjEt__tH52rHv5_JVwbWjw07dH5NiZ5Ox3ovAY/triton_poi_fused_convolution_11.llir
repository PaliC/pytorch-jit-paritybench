; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = and i32 %8, 60, !dbg !12
  %11 = lshr i32 %7, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %12, 32, !dbg !12
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = or disjoint i32 %6, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %19 = lshr i32 %7, 4, !dbg !16
  %20 = and i32 %19, 7, !dbg !16
  %21 = or disjoint i32 %18, %20, !dbg !17
  %22 = or disjoint i32 %21, 8, !dbg !17
  %23 = or disjoint i32 %18, %9, !dbg !17
  %24 = icmp slt i32 %21, 16, !dbg !18
  %25 = icmp slt i32 %22, 16, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %27 = sdiv i32 %.frozen, 512, !dbg !19
  %28 = mul i32 %27, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %21, 9, !dbg !21
  %30 = shl i32 %22, 9, !dbg !21
  %31 = shl i32 %27, 13, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %29, !dbg !24
  %34 = add i32 %32, %30, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #2, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %25) #2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = shl i32 %15, 4, !dbg !27
  %50 = shl i32 %16, 4, !dbg !27
  %51 = add i32 %23, %49, !dbg !28
  %52 = add i32 %23, %50, !dbg !28
  %53 = sext i32 %51 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = sext i32 %52 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = shl i32 %7, 6, !dbg !30
  %58 = and i32 %57, 960, !dbg !30
  %59 = or disjoint i32 %58, %20, !dbg !30
  %60 = and i32 %8, 508, !dbg !30
  %61 = lshr exact i32 %58, 2, !dbg !30
  %62 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !30
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %59, !dbg !30
  %64 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !30
  %65 = or disjoint i32 %59, 16, !dbg !30
  %66 = lshr i32 %65, 4, !dbg !30
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !30
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !30
  %69 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !30
  %70 = or disjoint i32 %59, 32, !dbg !30
  %71 = lshr i32 %70, 4, !dbg !30
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !30
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %70, !dbg !30
  %74 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !30
  %75 = or disjoint i32 %59, 48, !dbg !30
  %76 = lshr i32 %75, 4, !dbg !30
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !30
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !30
  %79 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !30
  %80 = or disjoint i32 %59, 8, !dbg !30
  %81 = getelementptr float, ptr addrspace(3) %62, i32 %80, !dbg !30
  %82 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !30
  %83 = or disjoint i32 %59, 24, !dbg !30
  %84 = lshr i32 %83, 4, !dbg !30
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !30
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !30
  %87 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !30
  %88 = or disjoint i32 %59, 40, !dbg !30
  %89 = lshr i32 %88, 4, !dbg !30
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !30
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !30
  %92 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !30
  %93 = or disjoint i32 %59, 56, !dbg !30
  %94 = lshr i32 %93, 4, !dbg !30
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !30
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !30
  %97 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %98 = lshr i32 %60, 4, !dbg !30
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !30
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %60, !dbg !30
  %101 = load i32, ptr addrspace(3) %100, align 4, !dbg !30
  %102 = or disjoint i32 %60, 1, !dbg !30
  %103 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %102, !dbg !30
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !30
  %105 = or disjoint i32 %60, 2, !dbg !30
  %106 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %105, !dbg !30
  %107 = load i32, ptr addrspace(3) %106, align 4, !dbg !30
  %108 = or disjoint i32 %60, 3, !dbg !30
  %109 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %108, !dbg !30
  %110 = load i32, ptr addrspace(3) %109, align 4, !dbg !30
  %111 = or disjoint i32 %60, 512, !dbg !30
  %112 = lshr i32 %111, 4, !dbg !30
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !30
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %111, !dbg !30
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !30
  %116 = or disjoint i32 %60, 513, !dbg !30
  %117 = lshr i32 %116, 4, !dbg !30
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !30
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !30
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !30
  %121 = or disjoint i32 %60, 514, !dbg !30
  %122 = lshr i32 %121, 4, !dbg !30
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !30
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !30
  %126 = or disjoint i32 %60, 515, !dbg !30
  %127 = lshr i32 %126, 4, !dbg !30
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !30
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !30
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %104, i32 %107, i32 %110, ptr addrspace(1) %54, i1 %26) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %120, i32 %125, i32 %130, ptr addrspace(1) %56, i1 %26) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp6ebhv4hoch73xbxgcmfxuorxjt27risxlqclkqsslwlh2anrx6.py", directory: "inductor_cache/p6")
!4 = !{ptr @triton_poi_fused_convolution_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_11", linkageName: "triton_poi_fused_convolution_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
