; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 256, !dbg !14
  %17 = sdiv i32 %15, 256, !dbg !14
  %18 = srem i32 %16, 512, !dbg !15
  %19 = srem i32 %17, 512, !dbg !15
  %20 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen44 = freeze i32 %14, !dbg !17
  %21 = sdiv i32 %.frozen44, 131072, !dbg !17
  %.frozen45 = freeze i32 %15, !dbg !17
  %22 = sdiv i32 %.frozen45, 131072, !dbg !17
  %23 = icmp slt i32 %18, 256, !dbg !18
  %24 = icmp slt i32 %19, 256, !dbg !18
  %25 = mul i32 %21, 131072, !dbg !19
  %srem.decomposed = sub i32 %.frozen44, %25, !dbg !19
  %26 = mul i32 %22, 131072, !dbg !19
  %srem1.decomposed = sub i32 %.frozen45, %26, !dbg !19
  %27 = shl nsw i32 %21, 16, !dbg !20
  %28 = shl nsw i32 %22, 16, !dbg !20
  %29 = add nsw i32 %27, %srem.decomposed, !dbg !21
  %30 = add nsw i32 %28, %srem1.decomposed, !dbg !21
  %31 = sext i32 %29 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !23
  %37 = icmp sgt i32 %18, 255, !dbg !24
  %38 = icmp sgt i32 %19, 255, !dbg !24
  %39 = add nsw i32 %18, -256, !dbg !25
  %40 = add nsw i32 %19, -256, !dbg !25
  %41 = shl nsw i32 %39, 8, !dbg !26
  %42 = shl nsw i32 %40, 8, !dbg !26
  %43 = add nsw i32 %27, %.decomposed, !dbg !27
  %44 = add nsw i32 %43, %41, !dbg !28
  %45 = add nsw i32 %28, %.decomposed, !dbg !27
  %46 = add nsw i32 %45, %42, !dbg !28
  %47 = sext i32 %44 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !29
  %49 = sext i32 %46 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !29
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %53 = sext i32 %39 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %55 = sext i32 %40 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !33
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %76 = bitcast i32 %75 to float, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %80 = bitcast i32 %79 to float, !dbg !34
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = fadd float %68, 0x3EE4F8B580000000, !dbg !35
  %84 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %85 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %86 = fadd float %74, 0x3EE4F8B580000000, !dbg !35
  %87 = fadd float %76, 0x3EE4F8B580000000, !dbg !35
  %88 = fadd float %78, 0x3EE4F8B580000000, !dbg !35
  %89 = fadd float %80, 0x3EE4F8B580000000, !dbg !35
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %91, 0, !dbg !36
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %92, 0, !dbg !36
  br i1 %.not.i, label %98, label %93, !dbg !36

93:                                               ; preds = %8
  br i1 %.not1.i, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

98:                                               ; preds = %8
  br i1 %.not1.i, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %94, %96, %99, %101
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !36
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i2 = icmp eq i32 %103, 0, !dbg !36
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i5 = icmp eq i32 %104, 0, !dbg !36
  br i1 %.not.i2, label %110, label %105, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

__nv_sqrtf.exit6:                                 ; preds = %106, %108, %111, %113
  %.0.i4 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !36
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i7 = icmp eq i32 %115, 0, !dbg !36
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i10 = icmp eq i32 %116, 0, !dbg !36
  br i1 %.not.i7, label %122, label %117, !dbg !36

117:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %120, label %118, !dbg !36

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

__nv_sqrtf.exit11:                                ; preds = %118, %120, %123, %125
  %.0.i9 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i12 = icmp eq i32 %127, 0, !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i15 = icmp eq i32 %128, 0, !dbg !36
  br i1 %.not.i12, label %134, label %129, !dbg !36

129:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %132, label %130, !dbg !36

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

__nv_sqrtf.exit16:                                ; preds = %130, %132, %135, %137
  %.0.i14 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i17 = icmp eq i32 %139, 0, !dbg !36
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i20 = icmp eq i32 %140, 0, !dbg !36
  br i1 %.not.i17, label %146, label %141, !dbg !36

141:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %144, label %142, !dbg !36

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

__nv_sqrtf.exit21:                                ; preds = %142, %144, %147, %149
  %.0.i19 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !36
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i22 = icmp eq i32 %151, 0, !dbg !36
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i25 = icmp eq i32 %152, 0, !dbg !36
  br i1 %.not.i22, label %158, label %153, !dbg !36

153:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %156, label %154, !dbg !36

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

__nv_sqrtf.exit26:                                ; preds = %154, %156, %159, %161
  %.0.i24 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !36
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i27 = icmp eq i32 %163, 0, !dbg !36
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i30 = icmp eq i32 %164, 0, !dbg !36
  br i1 %.not.i27, label %170, label %165, !dbg !36

165:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %168, label %166, !dbg !36

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

__nv_sqrtf.exit31:                                ; preds = %166, %168, %171, %173
  %.0.i29 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !36
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i32 = icmp eq i32 %175, 0, !dbg !36
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i35 = icmp eq i32 %176, 0, !dbg !36
  br i1 %.not.i32, label %182, label %177, !dbg !36

177:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %180, label %178, !dbg !36

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

182:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %185, label %183, !dbg !36

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

__nv_sqrtf.exit36:                                ; preds = %178, %180, %183, %185
  %.0.i34 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !30
  %188 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !32
  %189 = insertelement <8 x i32> %188, i32 %63, i64 1, !dbg !32
  %190 = insertelement <8 x i32> %189, i32 %62, i64 2, !dbg !32
  %191 = insertelement <8 x i32> %190, i32 %61, i64 3, !dbg !32
  %192 = insertelement <8 x i32> %191, i32 %60, i64 4, !dbg !32
  %193 = insertelement <8 x i32> %192, i32 %59, i64 5, !dbg !32
  %194 = insertelement <8 x i32> %193, i32 %58, i64 6, !dbg !32
  %195 = insertelement <8 x i32> %194, i32 %57, i64 7, !dbg !32
  %196 = bitcast <8 x i32> %195 to <8 x float>, !dbg !32
  %197 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %201 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %202 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %205 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %206 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %207 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %208 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %209 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %210 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %211 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !37
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !37
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !37
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !37
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !37
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !37
  %220 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !38
  %221 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !38
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %37, i32 0, i1 %37) #3, !dbg !39
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %37, i32 0, i1 %37) #3, !dbg !39
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %37, i32 0, i1 %37) #3, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %37, i32 0, i1 %37) #3, !dbg !39
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %230 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !40
  %231 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !40
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %37, i32 0, i1 %37) #3, !dbg !41
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %37, i32 0, i1 %37) #3, !dbg !41
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %37, i32 0, i1 %37) #3, !dbg !41
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %37, i32 0, i1 %37) #3, !dbg !41
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %240 = insertelement <8 x i32> poison, i32 %187, i64 0, !dbg !30
  %241 = insertelement <8 x i32> %240, i32 %197, i64 1, !dbg !30
  %242 = insertelement <8 x i32> %241, i32 %198, i64 2, !dbg !30
  %243 = insertelement <8 x i32> %242, i32 %199, i64 3, !dbg !30
  %244 = insertelement <8 x i32> %243, i32 %200, i64 4, !dbg !30
  %245 = insertelement <8 x i32> %244, i32 %201, i64 5, !dbg !30
  %246 = insertelement <8 x i32> %245, i32 %202, i64 6, !dbg !30
  %247 = insertelement <8 x i32> %246, i32 %203, i64 7, !dbg !30
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !30
  %249 = fsub <8 x float> %248, %196, !dbg !42
  %250 = insertelement <8 x float> poison, float %219, i64 0, !dbg !43
  %251 = insertelement <8 x float> %250, float %218, i64 1, !dbg !43
  %252 = insertelement <8 x float> %251, float %217, i64 2, !dbg !43
  %253 = insertelement <8 x float> %252, float %216, i64 3, !dbg !43
  %254 = insertelement <8 x float> %253, float %215, i64 4, !dbg !43
  %255 = insertelement <8 x float> %254, float %214, i64 5, !dbg !43
  %256 = insertelement <8 x float> %255, float %213, i64 6, !dbg !43
  %257 = insertelement <8 x float> %256, float %212, i64 7, !dbg !43
  %258 = fmul <8 x float> %249, %257, !dbg !43
  %259 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !39
  %260 = insertelement <8 x i32> %259, i32 %228, i64 1, !dbg !39
  %261 = insertelement <8 x i32> %260, i32 %227, i64 2, !dbg !39
  %262 = insertelement <8 x i32> %261, i32 %226, i64 3, !dbg !39
  %263 = insertelement <8 x i32> %262, i32 %225, i64 4, !dbg !39
  %264 = insertelement <8 x i32> %263, i32 %224, i64 5, !dbg !39
  %265 = insertelement <8 x i32> %264, i32 %223, i64 6, !dbg !39
  %266 = insertelement <8 x i32> %265, i32 %222, i64 7, !dbg !39
  %267 = bitcast <8 x i32> %266 to <8 x float>, !dbg !39
  %268 = fmul <8 x float> %258, %267, !dbg !44
  %269 = insertelement <8 x i32> poison, i32 %239, i64 0, !dbg !41
  %270 = insertelement <8 x i32> %269, i32 %238, i64 1, !dbg !41
  %271 = insertelement <8 x i32> %270, i32 %237, i64 2, !dbg !41
  %272 = insertelement <8 x i32> %271, i32 %236, i64 3, !dbg !41
  %273 = insertelement <8 x i32> %272, i32 %235, i64 4, !dbg !41
  %274 = insertelement <8 x i32> %273, i32 %234, i64 5, !dbg !41
  %275 = insertelement <8 x i32> %274, i32 %233, i64 6, !dbg !41
  %276 = insertelement <8 x i32> %275, i32 %232, i64 7, !dbg !41
  %277 = bitcast <8 x i32> %276 to <8 x float>, !dbg !41
  %278 = fadd <8 x float> %268, %277, !dbg !45
  %279 = fcmp olt <8 x float> %278, zeroinitializer, !dbg !46
  %280 = extractelement <8 x i1> %279, i64 7, !dbg !50
  %281 = extractelement <8 x i1> %279, i64 6, !dbg !50
  %282 = extractelement <8 x i1> %279, i64 5, !dbg !50
  %283 = extractelement <8 x i1> %279, i64 4, !dbg !50
  %284 = extractelement <8 x i1> %279, i64 3, !dbg !50
  %285 = extractelement <8 x i1> %279, i64 2, !dbg !50
  %286 = extractelement <8 x i1> %279, i64 1, !dbg !50
  %287 = extractelement <8 x i1> %279, i64 0, !dbg !50
  %288 = sext i32 %14 to i64, !dbg !51
  %289 = getelementptr float, ptr addrspace(1) %6, i64 %288, !dbg !51
  %290 = sext i32 %15 to i64, !dbg !51
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %290, !dbg !51
  %bc = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %292 = extractelement <8 x i32> %bc, i64 7, !dbg !52
  %293 = select i1 %280, i32 0, i32 %292, !dbg !50
  %294 = select i1 %23, i32 %211, i32 %293, !dbg !53
  %bc37 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %295 = extractelement <8 x i32> %bc37, i64 6, !dbg !52
  %296 = select i1 %281, i32 0, i32 %295, !dbg !50
  %297 = select i1 %23, i32 %210, i32 %296, !dbg !53
  %bc38 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %298 = extractelement <8 x i32> %bc38, i64 5, !dbg !52
  %299 = select i1 %282, i32 0, i32 %298, !dbg !50
  %300 = select i1 %23, i32 %209, i32 %299, !dbg !53
  %bc39 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %301 = extractelement <8 x i32> %bc39, i64 4, !dbg !52
  %302 = select i1 %283, i32 0, i32 %301, !dbg !50
  %303 = select i1 %23, i32 %208, i32 %302, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %297, i32 %300, i32 %303, ptr addrspace(1) %289, i1 true) #3, !dbg !52
  %bc40 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %304 = extractelement <8 x i32> %bc40, i64 3, !dbg !52
  %305 = select i1 %284, i32 0, i32 %304, !dbg !50
  %306 = select i1 %24, i32 %207, i32 %305, !dbg !53
  %bc41 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %307 = extractelement <8 x i32> %bc41, i64 2, !dbg !52
  %308 = select i1 %285, i32 0, i32 %307, !dbg !50
  %309 = select i1 %24, i32 %206, i32 %308, !dbg !53
  %bc42 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %310 = extractelement <8 x i32> %bc42, i64 1, !dbg !52
  %311 = select i1 %286, i32 0, i32 %310, !dbg !50
  %312 = select i1 %24, i32 %205, i32 %311, !dbg !53
  %bc43 = bitcast <8 x float> %278 to <8 x i32>, !dbg !52
  %313 = extractelement <8 x i32> %bc43, i64 0, !dbg !52
  %314 = select i1 %287, i32 0, i32 %313, !dbg !50
  %315 = select i1 %24, i32 %204, i32 %314, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %309, i32 %312, i32 %315, ptr addrspace(1) %291, i1 true) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ncajbuj26omfuusgiyrwz4gz27ekbujg4cy4fwfjqy34rmht2x.py", directory: "inductor_cache/7n")
!4 = !{ptr @triton_poi_fused_cat_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_31", linkageName: "triton_poi_fused_cat_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 40, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 55, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 66, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 27, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 45, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 37, scope: !7)
!53 = !DILocation(line: 57, column: 33, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
