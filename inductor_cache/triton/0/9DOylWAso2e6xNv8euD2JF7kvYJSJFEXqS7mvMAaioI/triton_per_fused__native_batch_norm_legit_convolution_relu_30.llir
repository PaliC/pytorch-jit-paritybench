; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %10, 31, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = icmp slt i32 %14, 2048, !dbg !14
  %16 = shl i32 %10, 2, !dbg !15
  %17 = and i32 %16, 12, !dbg !15
  %18 = srem i32 %14, 512, !dbg !16
  %19 = shl i32 %14, 4, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = sext i32 %18 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #5, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #5, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #5, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #5, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = fadd float %28, %38, !dbg !23
  %40 = fadd float %29, %38, !dbg !23
  %41 = fadd float %30, %38, !dbg !23
  %42 = fadd float %31, %38, !dbg !23
  %43 = fadd float %39, %40, !dbg !24
  %44 = fadd float %41, %43, !dbg !24
  %45 = fadd float %42, %44, !dbg !24
  %46 = select i1 %15, float %45, float 0.000000e+00, !dbg !24
  %47 = bitcast float %46 to i32, !dbg !29
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = fadd float %46, %49, !dbg !24
  %51 = bitcast float %50 to i32, !dbg !29
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = fadd float %50, %53, !dbg !24
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %56 = bitcast float %54 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !30
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 1.600000e+01) #5, !dbg !30
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.600000e+01) #5, !dbg !30
  %61 = fsub float %39, %60, !dbg !31
  %62 = fsub float %40, %60, !dbg !31
  %63 = fsub float %41, %60, !dbg !31
  %64 = fsub float %42, %60, !dbg !31
  %65 = fmul float %61, %61, !dbg !32
  %66 = fmul float %62, %62, !dbg !32
  %67 = fmul float %63, %63, !dbg !32
  %68 = fmul float %64, %64, !dbg !32
  %69 = fadd float %65, %66, !dbg !33
  %70 = fadd float %67, %69, !dbg !33
  %71 = fadd float %68, %70, !dbg !33
  %72 = select i1 %15, float %71, float 0.000000e+00, !dbg !33
  %73 = bitcast float %72 to i32, !dbg !35
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !35
  %75 = bitcast i32 %74 to float, !dbg !35
  %76 = fadd float %72, %75, !dbg !33
  %77 = bitcast float %76 to i32, !dbg !35
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = fadd float %76, %79, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %81 = bitcast float %80 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %81, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %82 = load float, ptr addrspace(3) %57, align 4, !dbg !36
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.600000e+01) #5, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.600000e+01) #5, !dbg !37
  %85 = fadd float %83, 0x3EE4F8B580000000, !dbg !38
  %86 = fadd float %84, 0x3EE4F8B580000000, !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i, label %90, label %88, !dbg !36

88:                                               ; preds = %7
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

90:                                               ; preds = %7
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %88, %90
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], !dbg !36
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i12 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i12, label %98, label %96, !dbg !36

96:                                               ; preds = %__nv_rsqrtf.exit
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !36
  br label %__nv_rsqrtf.exit14, !dbg !36

98:                                               ; preds = %__nv_rsqrtf.exit
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !36
  br label %__nv_rsqrtf.exit14, !dbg !36

__nv_rsqrtf.exit14:                               ; preds = %96, %98
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = or disjoint i32 %9, %13, !dbg !13
  %101 = icmp slt i32 %100, 2048, !dbg !14
  %102 = fmul float %61, %.0.i13, !dbg !39
  %103 = fmul float %62, %.0.i13, !dbg !39
  %104 = fmul float %63, %.0.i13, !dbg !39
  %105 = fmul float %64, %.0.i13, !dbg !39
  %106 = fcmp olt float %102, 0.000000e+00, !dbg !40
  %107 = fcmp olt float %103, 0.000000e+00, !dbg !40
  %108 = fcmp olt float %104, 0.000000e+00, !dbg !40
  %109 = fcmp olt float %105, 0.000000e+00, !dbg !40
  %110 = select i1 %106, float 0.000000e+00, float %102, !dbg !44
  %111 = select i1 %107, float 0.000000e+00, float %103, !dbg !44
  %112 = select i1 %108, float 0.000000e+00, float %104, !dbg !44
  %113 = select i1 %109, float 0.000000e+00, float %105, !dbg !44
  %114 = bitcast float %39 to i32, !dbg !45
  %115 = bitcast float %40 to i32, !dbg !45
  %116 = bitcast float %41 to i32, !dbg !45
  %117 = bitcast float %42 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %22, i1 %15) #5, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !46
  %119 = bitcast float %110 to i32, !dbg !47
  %120 = bitcast float %111 to i32, !dbg !47
  %121 = bitcast float %112 to i32, !dbg !47
  %122 = bitcast float %113 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %120, i32 %121, i32 %122, ptr addrspace(1) %118, i1 %15) #5, !dbg !47
  %123 = sext i32 %100 to i64, !dbg !48
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !48
  %125 = and i32 %10, 96, !dbg !49
  %126 = icmp eq i32 %125, 0, !dbg !49
  %127 = bitcast float %.0.i to i32, !dbg !49
  %128 = and i1 %126, %101, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %124, i1 %128) #5, !dbg !49
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !50
  %130 = bitcast float %59 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %129, i1 %128) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caqberhap6sagvcjxoflfuns7l3u2lfyy52beevckee55igfro5f.py", directory: "inductor_cache/aq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_relu_30", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 53, column: 28, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 56, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 47, scope: !7)
!46 = !DILocation(line: 58, column: 25, scope: !7)
!47 = !DILocation(line: 58, column: 45, scope: !7)
!48 = !DILocation(line: 59, column: 25, scope: !7)
!49 = !DILocation(line: 59, column: 37, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
