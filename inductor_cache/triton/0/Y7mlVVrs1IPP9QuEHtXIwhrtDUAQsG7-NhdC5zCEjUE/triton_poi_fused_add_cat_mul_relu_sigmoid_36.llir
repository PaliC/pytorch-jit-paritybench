; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_mul_relu_sigmoid_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 16, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 16384, !dbg !15
  %17 = mul i32 %16, 16384, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sext i32 %14 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %25 = sext i32 %15 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = fsub float 0.000000e+00, %38, !dbg !27
  %52 = fsub float 0.000000e+00, %40, !dbg !27
  %53 = fsub float 0.000000e+00, %42, !dbg !27
  %54 = fsub float 0.000000e+00, %44, !dbg !27
  %55 = fmul float %51, 0x3FF7154760000000, !dbg !31
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #1, !dbg !31
  %57 = fmul float %52, 0x3FF7154760000000, !dbg !31
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #1, !dbg !31
  %59 = fmul float %53, 0x3FF7154760000000, !dbg !31
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !31
  %61 = fmul float %54, 0x3FF7154760000000, !dbg !31
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !31
  %63 = fadd float %56, 1.000000e+00, !dbg !32
  %64 = fadd float %58, 1.000000e+00, !dbg !32
  %65 = fadd float %60, 1.000000e+00, !dbg !32
  %66 = fadd float %62, 1.000000e+00, !dbg !32
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %63) #1, !dbg !33
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %64) #1, !dbg !33
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #1, !dbg !33
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %66) #1, !dbg !33
  %71 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !18
  %72 = insertelement <4 x i32> %71, i32 %23, i64 1, !dbg !18
  %73 = insertelement <4 x i32> %72, i32 %22, i64 2, !dbg !18
  %74 = insertelement <4 x i32> %73, i32 %21, i64 3, !dbg !18
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !18
  %76 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !20
  %77 = insertelement <4 x i32> %76, i32 %29, i64 1, !dbg !20
  %78 = insertelement <4 x i32> %77, i32 %28, i64 2, !dbg !20
  %79 = insertelement <4 x i32> %78, i32 %27, i64 3, !dbg !20
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !20
  %81 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !22
  %82 = insertelement <4 x i32> %81, i32 %34, i64 1, !dbg !22
  %83 = insertelement <4 x i32> %82, i32 %33, i64 2, !dbg !22
  %84 = insertelement <4 x i32> %83, i32 %32, i64 3, !dbg !22
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !22
  %86 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !26
  %87 = insertelement <4 x i32> %86, i32 %49, i64 1, !dbg !26
  %88 = insertelement <4 x i32> %87, i32 %48, i64 2, !dbg !26
  %89 = insertelement <4 x i32> %88, i32 %47, i64 3, !dbg !26
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !26
  %91 = fsub <4 x float> %75, %80, !dbg !34
  %92 = fmul <4 x float> %91, %85, !dbg !35
  %93 = insertelement <4 x float> poison, float %70, i64 0, !dbg !36
  %94 = insertelement <4 x float> %93, float %69, i64 1, !dbg !36
  %95 = insertelement <4 x float> %94, float %68, i64 2, !dbg !36
  %96 = insertelement <4 x float> %95, float %67, i64 3, !dbg !36
  %97 = fmul <4 x float> %92, %96, !dbg !36
  %98 = fadd <4 x float> %97, %90, !dbg !37
  %99 = fcmp olt <4 x float> %98, zeroinitializer, !dbg !38
  %100 = extractelement <4 x i1> %99, i64 3, !dbg !42
  %101 = extractelement <4 x i1> %99, i64 2, !dbg !42
  %102 = extractelement <4 x i1> %99, i64 1, !dbg !42
  %103 = extractelement <4 x i1> %99, i64 0, !dbg !42
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !43
  %bc = bitcast <4 x float> %98 to <4 x i32>, !dbg !44
  %105 = extractelement <4 x i32> %bc, i64 3, !dbg !44
  %106 = select i1 %100, i32 0, i32 %105, !dbg !42
  %bc1 = bitcast <4 x float> %98 to <4 x i32>, !dbg !44
  %107 = extractelement <4 x i32> %bc1, i64 2, !dbg !44
  %108 = select i1 %101, i32 0, i32 %107, !dbg !42
  %bc2 = bitcast <4 x float> %98 to <4 x i32>, !dbg !44
  %109 = extractelement <4 x i32> %bc2, i64 1, !dbg !44
  %110 = select i1 %102, i32 0, i32 %109, !dbg !42
  %bc3 = bitcast <4 x float> %98 to <4 x i32>, !dbg !44
  %111 = extractelement <4 x i32> %bc3, i64 0, !dbg !44
  %112 = select i1 %103, i32 0, i32 %111, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %108, i32 %110, i32 %112, ptr addrspace(1) %104, i1 true) #1, !dbg !44
  %113 = mul i32 %16, 17408, !dbg !45
  %114 = add i32 %113, %.decomposed, !dbg !46
  %115 = sext i32 %114 to i64, !dbg !47
  %116 = getelementptr float, ptr addrspace(1) %6, i64 %115, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %108, i32 %110, i32 %112, ptr addrspace(1) %116, i1 true) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciseefciiwvvtdggnmxcpnjz6w24rnwt4pp4tlm4k2spihowy2vq.py", directory: "inductor_cache/is")
!4 = !{ptr @triton_poi_fused_add_cat_mul_relu_sigmoid_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_mul_relu_sigmoid_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_mul_relu_sigmoid_36", linkageName: "triton_poi_fused_add_cat_mul_relu_sigmoid_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 35, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 39, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 40, column: 25, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 41, column: 36, scope: !7)
!46 = !DILocation(line: 41, column: 30, scope: !7)
!47 = !DILocation(line: 41, column: 25, scope: !7)
!48 = !DILocation(line: 41, column: 48, scope: !7)
!49 = !DILocation(line: 41, column: 4, scope: !7)
