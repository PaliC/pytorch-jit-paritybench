; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = icmp slt i32 %13, 508032, !dbg !14
  %22 = icmp slt i32 %17, 508032, !dbg !14
  %23 = sdiv i32 %13, 3969, !dbg !15
  %24 = sdiv i32 %14, 3969, !dbg !15
  %25 = sdiv i32 %15, 3969, !dbg !15
  %26 = sdiv i32 %16, 3969, !dbg !15
  %27 = sdiv i32 %17, 3969, !dbg !15
  %28 = sdiv i32 %18, 3969, !dbg !15
  %29 = sdiv i32 %19, 3969, !dbg !15
  %30 = sdiv i32 %20, 3969, !dbg !15
  %31 = srem i32 %23, 32, !dbg !16
  %32 = srem i32 %24, 32, !dbg !16
  %33 = srem i32 %25, 32, !dbg !16
  %34 = srem i32 %26, 32, !dbg !16
  %35 = srem i32 %27, 32, !dbg !16
  %36 = srem i32 %28, 32, !dbg !16
  %37 = srem i32 %29, 32, !dbg !16
  %38 = srem i32 %30, 32, !dbg !16
  %39 = sext i32 %13 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = sext i32 %17 to i64, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #3, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #3, !dbg !18
  %45 = sext i32 %31 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !19
  %47 = sext i32 %32 to i64, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !19
  %49 = sext i32 %33 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !19
  %51 = sext i32 %34 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !19
  %53 = sext i32 %35 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !19
  %55 = sext i32 %36 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !19
  %57 = sext i32 %37 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !19
  %59 = sext i32 %38 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %21) #3, !dbg !20
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #3, !dbg !20
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %21) #3, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #3, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %22) #3, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %22) #3, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !21
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !21
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !21
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %21) #3, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #3, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #3, !dbg !22
  %82 = bitcast i32 %81 to float, !dbg !22
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #3, !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %22) #3, !dbg !22
  %86 = bitcast i32 %85 to float, !dbg !22
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %22) #3, !dbg !22
  %88 = bitcast i32 %87 to float, !dbg !22
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %22) #3, !dbg !22
  %90 = bitcast i32 %89 to float, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %22) #3, !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !23
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !23
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %21) #3, !dbg !24
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %21) #3, !dbg !24
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #3, !dbg !24
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %21) #3, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %22) #3, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %22) #3, !dbg !24
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %22) #3, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %22) #3, !dbg !24
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !25
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !25
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %21) #3, !dbg !26
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %21) #3, !dbg !26
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %21) #3, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %21) #3, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %22) #3, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %22) #3, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %22) #3, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %22) #3, !dbg !26
  %125 = fadd float %78, 0x3EE4F8B580000000, !dbg !27
  %126 = fadd float %80, 0x3EE4F8B580000000, !dbg !27
  %127 = fadd float %82, 0x3EE4F8B580000000, !dbg !27
  %128 = fadd float %84, 0x3EE4F8B580000000, !dbg !27
  %129 = fadd float %86, 0x3EE4F8B580000000, !dbg !27
  %130 = fadd float %88, 0x3EE4F8B580000000, !dbg !27
  %131 = fadd float %90, 0x3EE4F8B580000000, !dbg !27
  %132 = fadd float %92, 0x3EE4F8B580000000, !dbg !27
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %133, 0, !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %134, 0, !dbg !28
  br i1 %.not.i, label %140, label %135, !dbg !28

135:                                              ; preds = %7
  br i1 %.not1.i, label %138, label %136, !dbg !28

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

140:                                              ; preds = %7
  br i1 %.not1.i, label %143, label %141, !dbg !28

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !28
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %145, 0, !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %146, 0, !dbg !28
  br i1 %.not.i1, label %152, label %147, !dbg !28

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !28

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %155, label %153, !dbg !28

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %148, %150, %153, %155
  %.0.i3 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %157, 0, !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %158, 0, !dbg !28
  br i1 %.not.i6, label %164, label %159, !dbg !28

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !28

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

164:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %167, label %165, !dbg !28

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %160, %162, %165, %167
  %.0.i8 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !28
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %169, 0, !dbg !28
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %170, 0, !dbg !28
  br i1 %.not.i11, label %176, label %171, !dbg !28

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !28

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

176:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %179, label %177, !dbg !28

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %172, %174, %177, %179
  %.0.i13 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !28
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %181, 0, !dbg !28
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %182, 0, !dbg !28
  br i1 %.not.i16, label %188, label %183, !dbg !28

183:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %186, label %184, !dbg !28

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

188:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %191, label %189, !dbg !28

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %184, %186, %189, %191
  %.0.i18 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !28
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %193, 0, !dbg !28
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %194, 0, !dbg !28
  br i1 %.not.i21, label %200, label %195, !dbg !28

195:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %198, label %196, !dbg !28

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

200:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %203, label %201, !dbg !28

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %196, %198, %201, %203
  %.0.i23 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !28
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %205, 0, !dbg !28
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %206, 0, !dbg !28
  br i1 %.not.i26, label %212, label %207, !dbg !28

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !28

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

212:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %215, label %213, !dbg !28

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %208, %210, %213, %215
  %.0.i28 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !28
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %217, 0, !dbg !28
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %218, 0, !dbg !28
  br i1 %.not.i31, label %224, label %219, !dbg !28

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !28

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

224:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %227, label %225, !dbg !28

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %220, %222, %225, %227
  %.0.i33 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !28
  %229 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !18
  %230 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !20
  %231 = insertelement <8 x i32> %230, i32 %67, i64 1, !dbg !20
  %232 = insertelement <8 x i32> %231, i32 %66, i64 2, !dbg !20
  %233 = insertelement <8 x i32> %232, i32 %65, i64 3, !dbg !20
  %234 = insertelement <8 x i32> %233, i32 %64, i64 4, !dbg !20
  %235 = insertelement <8 x i32> %234, i32 %63, i64 5, !dbg !20
  %236 = insertelement <8 x i32> %235, i32 %62, i64 6, !dbg !20
  %237 = insertelement <8 x i32> %236, i32 %61, i64 7, !dbg !20
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !20
  %239 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !18
  %240 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !18
  %241 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !18
  %242 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !18
  %243 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !18
  %244 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !18
  %245 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !18
  %246 = insertelement <8 x i32> poison, i32 %124, i64 0, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %123, i64 1, !dbg !26
  %248 = insertelement <8 x i32> %247, i32 %122, i64 2, !dbg !26
  %249 = insertelement <8 x i32> %248, i32 %121, i64 3, !dbg !26
  %250 = insertelement <8 x i32> %249, i32 %120, i64 4, !dbg !26
  %251 = insertelement <8 x i32> %250, i32 %119, i64 5, !dbg !26
  %252 = insertelement <8 x i32> %251, i32 %118, i64 6, !dbg !26
  %253 = insertelement <8 x i32> %252, i32 %117, i64 7, !dbg !26
  %254 = bitcast <8 x i32> %253 to <8 x float>, !dbg !26
  %255 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !24
  %256 = insertelement <8 x i32> %255, i32 %107, i64 1, !dbg !24
  %257 = insertelement <8 x i32> %256, i32 %106, i64 2, !dbg !24
  %258 = insertelement <8 x i32> %257, i32 %105, i64 3, !dbg !24
  %259 = insertelement <8 x i32> %258, i32 %104, i64 4, !dbg !24
  %260 = insertelement <8 x i32> %259, i32 %103, i64 5, !dbg !24
  %261 = insertelement <8 x i32> %260, i32 %102, i64 6, !dbg !24
  %262 = insertelement <8 x i32> %261, i32 %101, i64 7, !dbg !24
  %263 = bitcast <8 x i32> %262 to <8 x float>, !dbg !24
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %272 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !18
  %273 = insertelement <8 x i32> %272, i32 %239, i64 1, !dbg !18
  %274 = insertelement <8 x i32> %273, i32 %240, i64 2, !dbg !18
  %275 = insertelement <8 x i32> %274, i32 %241, i64 3, !dbg !18
  %276 = insertelement <8 x i32> %275, i32 %242, i64 4, !dbg !18
  %277 = insertelement <8 x i32> %276, i32 %243, i64 5, !dbg !18
  %278 = insertelement <8 x i32> %277, i32 %244, i64 6, !dbg !18
  %279 = insertelement <8 x i32> %278, i32 %245, i64 7, !dbg !18
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !18
  %281 = fsub <8 x float> %280, %238, !dbg !30
  %282 = insertelement <8 x float> poison, float %271, i64 0, !dbg !31
  %283 = insertelement <8 x float> %282, float %270, i64 1, !dbg !31
  %284 = insertelement <8 x float> %283, float %269, i64 2, !dbg !31
  %285 = insertelement <8 x float> %284, float %268, i64 3, !dbg !31
  %286 = insertelement <8 x float> %285, float %267, i64 4, !dbg !31
  %287 = insertelement <8 x float> %286, float %266, i64 5, !dbg !31
  %288 = insertelement <8 x float> %287, float %265, i64 6, !dbg !31
  %289 = insertelement <8 x float> %288, float %264, i64 7, !dbg !31
  %290 = fmul <8 x float> %281, %289, !dbg !31
  %291 = fmul <8 x float> %290, %263, !dbg !32
  %292 = fadd <8 x float> %291, %254, !dbg !33
  %293 = fcmp olt <8 x float> %292, zeroinitializer, !dbg !34
  %294 = extractelement <8 x i1> %293, i64 7, !dbg !38
  %295 = extractelement <8 x i1> %293, i64 6, !dbg !38
  %296 = extractelement <8 x i1> %293, i64 5, !dbg !38
  %297 = extractelement <8 x i1> %293, i64 4, !dbg !38
  %298 = extractelement <8 x i1> %293, i64 3, !dbg !38
  %299 = extractelement <8 x i1> %293, i64 2, !dbg !38
  %300 = extractelement <8 x i1> %293, i64 1, !dbg !38
  %301 = extractelement <8 x i1> %293, i64 0, !dbg !38
  %302 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !39
  %303 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !39
  %bc = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %304 = extractelement <8 x i32> %bc, i64 7, !dbg !40
  %305 = select i1 %294, i32 0, i32 %304, !dbg !38
  %bc36 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %306 = extractelement <8 x i32> %bc36, i64 6, !dbg !40
  %307 = select i1 %295, i32 0, i32 %306, !dbg !38
  %bc37 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %308 = extractelement <8 x i32> %bc37, i64 5, !dbg !40
  %309 = select i1 %296, i32 0, i32 %308, !dbg !38
  %bc38 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %310 = extractelement <8 x i32> %bc38, i64 4, !dbg !40
  %311 = select i1 %297, i32 0, i32 %310, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %307, i32 %309, i32 %311, ptr addrspace(1) %302, i1 %21) #3, !dbg !40
  %bc39 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %312 = extractelement <8 x i32> %bc39, i64 3, !dbg !40
  %313 = select i1 %298, i32 0, i32 %312, !dbg !38
  %bc40 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %314 = extractelement <8 x i32> %bc40, i64 2, !dbg !40
  %315 = select i1 %299, i32 0, i32 %314, !dbg !38
  %bc41 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %316 = extractelement <8 x i32> %bc41, i64 1, !dbg !40
  %317 = select i1 %300, i32 0, i32 %316, !dbg !38
  %bc42 = bitcast <8 x float> %292 to <8 x i32>, !dbg !40
  %318 = extractelement <8 x i32> %bc42, i64 0, !dbg !40
  %319 = select i1 %301, i32 0, i32 %318, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %315, i32 %317, i32 %319, ptr addrspace(1) %303, i1 %22) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c44m7jvhapjzdmbm3wukuqmcbkvmlngsbwo6l2gldyf6ye3hhxln.py", directory: "inductor_cache/44")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 43, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 44, column: 37, scope: !7)
!41 = !DILocation(line: 44, column: 4, scope: !7)
