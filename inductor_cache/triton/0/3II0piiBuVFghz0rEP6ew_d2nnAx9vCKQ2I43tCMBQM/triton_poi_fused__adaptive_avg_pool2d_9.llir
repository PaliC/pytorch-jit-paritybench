; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 256, !dbg !14
  %10 = sdiv i32 %8, 4, !dbg !15
  %11 = sdiv i32 %8, 16, !dbg !16
  %.frozen = freeze i32 %8, !dbg !17
  %12 = sdiv i32 %.frozen, 64, !dbg !17
  %13 = mul i32 %12, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %13, !dbg !18
  %14 = mul i32 %11, 36, !dbg !19
  %15 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !20
  %16 = insertelement <2 x i32> %15, i32 %10, i64 1, !dbg !20
  %17 = srem <2 x i32> %16, splat (i32 4), !dbg !20
  %18 = trunc nsw <2 x i32> %17 to <2 x i8>, !dbg !21
  %19 = mul nsw <2 x i8> %18, splat (i8 3), !dbg !21
  %20 = sdiv <2 x i8> %19, splat (i8 2), !dbg !21
  %21 = mul nsw <2 x i8> %18, splat (i8 6), !dbg !22
  %22 = add nsw <2 x i8> %21, splat (i8 9), !dbg !22
  %23 = sdiv <2 x i8> %22, splat (i8 4), !dbg !22
  %24 = sext <2 x i8> %20 to <2 x i32>, !dbg !21
  %25 = icmp slt <2 x i8> %20, %23, !dbg !23
  %26 = extractelement <2 x i1> %25, i64 0, !dbg !24
  %27 = extractelement <2 x i1> %25, i64 1, !dbg !24
  %28 = and i1 %26, %27, !dbg !24
  %29 = extractelement <2 x i32> %24, i64 1, !dbg !25
  %30 = mul nsw i32 %29, 6, !dbg !25
  %31 = extractelement <2 x i32> %24, i64 0, !dbg !26
  %32 = add i32 %14, %31, !dbg !26
  %33 = add i32 %32, %30, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = and i1 %9, %28, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36) #1, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = add i32 %32, 1, !dbg !31
  %40 = add i32 %39, %30, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !33
  %43 = add nsw <2 x i32> %24, splat (i32 2), !dbg !34
  %44 = sext <2 x i8> %23 to <2 x i32>, !dbg !35
  %45 = icmp slt <2 x i32> %43, %44, !dbg !35
  %46 = extractelement <2 x i1> %45, i64 0, !dbg !36
  %47 = and i1 %27, %46, !dbg !37
  %48 = add i32 %32, 2, !dbg !38
  %49 = add i32 %48, %30, !dbg !39
  %50 = sext i32 %49 to i64, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !40
  %52 = and i1 %9, %47, !dbg !41
  %53 = add nsw <2 x i32> %24, splat (i32 1), !dbg !42
  %54 = sext <2 x i8> %23 to <2 x i32>, !dbg !43
  %55 = icmp slt <2 x i32> %53, %54, !dbg !43
  %56 = extractelement <2 x i1> %55, i64 0, !dbg !44
  %57 = and i1 %27, %56, !dbg !45
  %58 = and i1 %9, %57, !dbg !46
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %58, i32 0, i1 %58) #1, !dbg !47
  %60 = bitcast i32 %59 to float, !dbg !47
  %61 = fadd float %38, %60, !dbg !48
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52) #1, !dbg !49
  %63 = bitcast i32 %62 to float, !dbg !49
  %64 = fadd float %61, %63, !dbg !50
  %65 = extractelement <2 x i1> %55, i64 1, !dbg !51
  %66 = and i1 %26, %65, !dbg !52
  %67 = add i32 %32, 6, !dbg !53
  %68 = add i32 %67, %30, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !55
  %71 = and i1 %9, %66, !dbg !56
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71) #1, !dbg !57
  %73 = bitcast i32 %72 to float, !dbg !57
  %74 = fadd float %64, %73, !dbg !58
  %75 = and i1 %56, %65, !dbg !59
  %76 = add i32 %32, 7, !dbg !60
  %77 = add i32 %76, %30, !dbg !61
  %78 = sext i32 %77 to i64, !dbg !62
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !62
  %80 = and i1 %9, %75, !dbg !63
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80) #1, !dbg !64
  %82 = bitcast i32 %81 to float, !dbg !64
  %83 = fadd float %74, %82, !dbg !65
  %84 = and i1 %46, %65, !dbg !51
  %85 = add i32 %32, 8, !dbg !66
  %86 = add i32 %85, %30, !dbg !67
  %87 = sext i32 %86 to i64, !dbg !68
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !68
  %89 = and i1 %9, %84, !dbg !69
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %89, i32 0, i1 %89) #1, !dbg !70
  %91 = bitcast i32 %90 to float, !dbg !70
  %92 = fadd float %83, %91, !dbg !71
  %93 = extractelement <2 x i1> %45, i64 1, !dbg !36
  %94 = and i1 %26, %93, !dbg !72
  %95 = add i32 %32, 12, !dbg !73
  %96 = add i32 %95, %30, !dbg !74
  %97 = sext i32 %96 to i64, !dbg !75
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !75
  %99 = and i1 %9, %94, !dbg !76
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %99, i32 0, i1 %99) #1, !dbg !77
  %101 = bitcast i32 %100 to float, !dbg !77
  %102 = fadd float %92, %101, !dbg !78
  %103 = and i1 %56, %93, !dbg !44
  %104 = add i32 %32, 13, !dbg !79
  %105 = add i32 %104, %30, !dbg !80
  %106 = sext i32 %105 to i64, !dbg !81
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !81
  %108 = and i1 %9, %103, !dbg !82
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %108, i32 0, i1 %108) #1, !dbg !83
  %110 = bitcast i32 %109 to float, !dbg !83
  %111 = fadd float %102, %110, !dbg !84
  %112 = and i1 %46, %93, !dbg !36
  %113 = add i32 %32, 14, !dbg !85
  %114 = add i32 %113, %30, !dbg !86
  %115 = sext i32 %114 to i64, !dbg !87
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !87
  %117 = and i1 %9, %112, !dbg !88
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %117, i32 0, i1 %117) #1, !dbg !89
  %119 = bitcast i32 %118 to float, !dbg !89
  %120 = fadd float %111, %119, !dbg !90
  %121 = select i1 %28, float 1.000000e+00, float 0.000000e+00, !dbg !91
  %122 = select i1 %57, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %123 = fadd float %122, %121, !dbg !93
  %124 = select i1 %47, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %125 = fadd float %124, %123, !dbg !95
  %126 = select i1 %66, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %127 = fadd float %126, %125, !dbg !97
  %128 = select i1 %75, float 1.000000e+00, float 0.000000e+00, !dbg !98
  %129 = fadd float %128, %127, !dbg !99
  %130 = select i1 %84, float 1.000000e+00, float 0.000000e+00, !dbg !100
  %131 = fadd float %130, %129, !dbg !101
  %132 = select i1 %94, float 1.000000e+00, float 0.000000e+00, !dbg !102
  %133 = fadd float %132, %131, !dbg !103
  %134 = select i1 %103, float 1.000000e+00, float 0.000000e+00, !dbg !104
  %135 = fadd float %134, %133, !dbg !105
  %136 = select i1 %112, float 1.000000e+00, float 0.000000e+00, !dbg !106
  %137 = fadd float %136, %135, !dbg !107
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %137) #1, !dbg !108
  %139 = mul i32 %12, 320, !dbg !109
  %140 = add i32 %139, %.decomposed, !dbg !110
  %141 = sext i32 %140 to i64, !dbg !111
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !111
  %143 = bitcast float %138 to i32, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %142, i1 %9) #1, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqvh3uavrlydus3acwwfsylziklboslpy3l2fyrmsgdt2xljxy2y.py", directory: "inductor_cache/qv")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_9", linkageName: "triton_poi_fused__adaptive_avg_pool2d_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 51, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 21, scope: !7)
!22 = !DILocation(line: 33, column: 25, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 33, scope: !7)
!26 = !DILocation(line: 36, column: 48, scope: !7)
!27 = !DILocation(line: 36, column: 57, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 79, scope: !7)
!30 = !DILocation(line: 36, column: 72, scope: !7)
!31 = !DILocation(line: 40, column: 53, scope: !7)
!32 = !DILocation(line: 40, column: 62, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 17, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 66, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 53, scope: !7)
!39 = !DILocation(line: 45, column: 62, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 85, scope: !7)
!42 = !DILocation(line: 37, column: 16, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 85, scope: !7)
!47 = !DILocation(line: 40, column: 77, scope: !7)
!48 = !DILocation(line: 41, column: 20, scope: !7)
!49 = !DILocation(line: 45, column: 77, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 53, scope: !7)
!54 = !DILocation(line: 50, column: 62, scope: !7)
!55 = !DILocation(line: 50, column: 31, scope: !7)
!56 = !DILocation(line: 50, column: 85, scope: !7)
!57 = !DILocation(line: 50, column: 77, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 53, column: 53, scope: !7)
!61 = !DILocation(line: 53, column: 62, scope: !7)
!62 = !DILocation(line: 53, column: 31, scope: !7)
!63 = !DILocation(line: 53, column: 85, scope: !7)
!64 = !DILocation(line: 53, column: 77, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 56, column: 53, scope: !7)
!67 = !DILocation(line: 56, column: 62, scope: !7)
!68 = !DILocation(line: 56, column: 31, scope: !7)
!69 = !DILocation(line: 56, column: 85, scope: !7)
!70 = !DILocation(line: 56, column: 77, scope: !7)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 60, column: 20, scope: !7)
!73 = !DILocation(line: 61, column: 54, scope: !7)
!74 = !DILocation(line: 61, column: 63, scope: !7)
!75 = !DILocation(line: 61, column: 31, scope: !7)
!76 = !DILocation(line: 61, column: 86, scope: !7)
!77 = !DILocation(line: 61, column: 78, scope: !7)
!78 = !DILocation(line: 62, column: 20, scope: !7)
!79 = !DILocation(line: 64, column: 54, scope: !7)
!80 = !DILocation(line: 64, column: 63, scope: !7)
!81 = !DILocation(line: 64, column: 31, scope: !7)
!82 = !DILocation(line: 64, column: 86, scope: !7)
!83 = !DILocation(line: 64, column: 78, scope: !7)
!84 = !DILocation(line: 65, column: 20, scope: !7)
!85 = !DILocation(line: 67, column: 54, scope: !7)
!86 = !DILocation(line: 67, column: 63, scope: !7)
!87 = !DILocation(line: 67, column: 31, scope: !7)
!88 = !DILocation(line: 67, column: 86, scope: !7)
!89 = !DILocation(line: 67, column: 78, scope: !7)
!90 = !DILocation(line: 68, column: 20, scope: !7)
!91 = !DILocation(line: 71, column: 34, scope: !7)
!92 = !DILocation(line: 74, column: 35, scope: !7)
!93 = !DILocation(line: 75, column: 20, scope: !7)
!94 = !DILocation(line: 78, column: 35, scope: !7)
!95 = !DILocation(line: 79, column: 20, scope: !7)
!96 = !DILocation(line: 82, column: 35, scope: !7)
!97 = !DILocation(line: 83, column: 20, scope: !7)
!98 = !DILocation(line: 86, column: 35, scope: !7)
!99 = !DILocation(line: 87, column: 20, scope: !7)
!100 = !DILocation(line: 90, column: 35, scope: !7)
!101 = !DILocation(line: 91, column: 20, scope: !7)
!102 = !DILocation(line: 94, column: 35, scope: !7)
!103 = !DILocation(line: 95, column: 20, scope: !7)
!104 = !DILocation(line: 98, column: 35, scope: !7)
!105 = !DILocation(line: 99, column: 20, scope: !7)
!106 = !DILocation(line: 102, column: 35, scope: !7)
!107 = !DILocation(line: 103, column: 20, scope: !7)
!108 = !DILocation(line: 104, column: 20, scope: !7)
!109 = !DILocation(line: 105, column: 34, scope: !7)
!110 = !DILocation(line: 105, column: 30, scope: !7)
!111 = !DILocation(line: 105, column: 25, scope: !7)
!112 = !DILocation(line: 105, column: 46, scope: !7)
!113 = !DILocation(line: 105, column: 4, scope: !7)
