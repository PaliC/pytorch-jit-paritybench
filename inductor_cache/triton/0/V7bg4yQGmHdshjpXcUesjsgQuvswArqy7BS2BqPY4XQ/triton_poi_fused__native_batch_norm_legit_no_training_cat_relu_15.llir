; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 10, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %23 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %24 = insertelement <2 x i32> %23, i32 %21, i64 1, !dbg !14
  %25 = sdiv <2 x i32> %24, splat (i32 64), !dbg !14
  %26 = srem <2 x i32> %25, splat (i32 704), !dbg !15
  %27 = srem i32 %21, 64, !dbg !16
  %.frozen = freeze i32 %21, !dbg !17
  %28 = sdiv i32 %.frozen, 45056, !dbg !17
  %.frozen109 = freeze i32 %22, !dbg !17
  %29 = sdiv i32 %.frozen109, 45056, !dbg !17
  %30 = extractelement <2 x i32> %26, i64 1, !dbg !18
  %31 = sext i32 %30 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !19
  %33 = extractelement <2 x i32> %26, i64 0, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !30
  %95 = bitcast i32 %94 to float, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !30
  %97 = bitcast i32 %96 to float, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !30
  %103 = bitcast i32 %102 to float, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !30
  %107 = bitcast i32 %106 to float, !dbg !30
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !33
  %121 = getelementptr float, ptr addrspace(1) %10, i64 %34, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !34
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !34
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !34
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !34
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !34
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !34
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !34
  %130 = icmp slt <2 x i32> %26, splat (i32 512), !dbg !35
  %131 = mul i32 %28, 45056, !dbg !36
  %srem.decomposed = sub i32 %.frozen, %131, !dbg !36
  %132 = mul i32 %29, 45056, !dbg !36
  %srem1.decomposed = sub i32 %.frozen109, %132, !dbg !36
  %133 = mul nsw i32 %28, 43008, !dbg !37
  %134 = mul nsw i32 %29, 43008, !dbg !37
  %135 = add nsw i32 %133, %srem.decomposed, !dbg !38
  %136 = add nsw i32 %134, %srem1.decomposed, !dbg !38
  %137 = sext i32 %135 to i64, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !39
  %139 = sext i32 %136 to i64, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !39
  %141 = extractelement <2 x i1> %130, i64 1, !dbg !40
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !40
  %143 = extractelement <2 x i1> %130, i64 0, !dbg !40
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !40
  %145 = mul nsw i32 %28, 34816, !dbg !41
  %146 = mul nsw i32 %29, 34816, !dbg !41
  %147 = add nsw i32 %145, %srem.decomposed, !dbg !42
  %148 = add nsw i32 %146, %srem1.decomposed, !dbg !42
  %149 = sext i32 %147 to i64, !dbg !43
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !43
  %151 = sext i32 %148 to i64, !dbg !43
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !43
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !44
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !44
  %155 = add nsw i32 %30, -512, !dbg !45
  %156 = icmp ult i32 %155, 160, !dbg !45
  %157 = add nsw i32 %33, -512, !dbg !45
  %158 = icmp ult i32 %157, 160, !dbg !45
  %159 = shl nsw i32 %30, 6, !dbg !18
  %160 = shl nsw i32 %33, 6, !dbg !18
  %161 = add nsw i32 %27, -32768, !dbg !18
  %162 = add nsw i32 %161, %133, !dbg !46
  %163 = add nsw i32 %162, %159, !dbg !47
  %164 = add nsw i32 %161, %134, !dbg !46
  %165 = add nsw i32 %164, %160, !dbg !47
  %166 = sext i32 %163 to i64, !dbg !48
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !48
  %168 = sext i32 %165 to i64, !dbg !48
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !48
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #3, !dbg !49
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #3, !dbg !49
  %172 = icmp sgt i32 %30, 671, !dbg !50
  %173 = icmp sgt i32 %33, 671, !dbg !50
  %174 = sext i32 %147 to i64, !dbg !51
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !51
  %176 = getelementptr i8, ptr addrspace(1) %175, i64 -40960, !dbg !51
  %177 = sext i32 %148 to i64, !dbg !51
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !51
  %179 = getelementptr i8, ptr addrspace(1) %178, i64 -40960, !dbg !51
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #3, !dbg !52
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173) #3, !dbg !52
  %182 = fadd float %47, 0x3F50624DE0000000, !dbg !53
  %183 = fadd float %49, 0x3F50624DE0000000, !dbg !53
  %184 = fadd float %51, 0x3F50624DE0000000, !dbg !53
  %185 = fadd float %53, 0x3F50624DE0000000, !dbg !53
  %186 = fadd float %55, 0x3F50624DE0000000, !dbg !53
  %187 = fadd float %57, 0x3F50624DE0000000, !dbg !53
  %188 = fadd float %59, 0x3F50624DE0000000, !dbg !53
  %189 = fadd float %61, 0x3F50624DE0000000, !dbg !53
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %190, 0, !dbg !54
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %191, 0, !dbg !54
  br i1 %.not.i, label %197, label %192, !dbg !54

192:                                              ; preds = %15
  br i1 %.not1.i, label %195, label %193, !dbg !54

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

197:                                              ; preds = %15
  br i1 %.not1.i, label %200, label %198, !dbg !54

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %193, %195, %198, %200
  %.0.i = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !54
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i11 = icmp eq i32 %202, 0, !dbg !54
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i14 = icmp eq i32 %203, 0, !dbg !54
  br i1 %.not.i11, label %209, label %204, !dbg !54

204:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %207, label %205, !dbg !54

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %183) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %183) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

209:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %212, label %210, !dbg !54

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %183) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %183) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

__nv_sqrtf.exit15:                                ; preds = %205, %207, %210, %212
  %.0.i13 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !54
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i16 = icmp eq i32 %214, 0, !dbg !54
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i19 = icmp eq i32 %215, 0, !dbg !54
  br i1 %.not.i16, label %221, label %216, !dbg !54

216:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %219, label %217, !dbg !54

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

221:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %224, label %222, !dbg !54

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

__nv_sqrtf.exit20:                                ; preds = %217, %219, %222, %224
  %.0.i18 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !54
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i21 = icmp eq i32 %226, 0, !dbg !54
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i24 = icmp eq i32 %227, 0, !dbg !54
  br i1 %.not.i21, label %233, label %228, !dbg !54

228:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %231, label %229, !dbg !54

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

233:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %236, label %234, !dbg !54

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

__nv_sqrtf.exit25:                                ; preds = %229, %231, %234, %236
  %.0.i23 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !54
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i26 = icmp eq i32 %238, 0, !dbg !54
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i29 = icmp eq i32 %239, 0, !dbg !54
  br i1 %.not.i26, label %245, label %240, !dbg !54

240:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %243, label %241, !dbg !54

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #3, !dbg !54
  br label %__nv_sqrtf.exit30, !dbg !54

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #3, !dbg !54
  br label %__nv_sqrtf.exit30, !dbg !54

245:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %248, label %246, !dbg !54

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #3, !dbg !54
  br label %__nv_sqrtf.exit30, !dbg !54

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #3, !dbg !54
  br label %__nv_sqrtf.exit30, !dbg !54

__nv_sqrtf.exit30:                                ; preds = %241, %243, %246, %248
  %.0.i28 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !54
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i31 = icmp eq i32 %250, 0, !dbg !54
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i34 = icmp eq i32 %251, 0, !dbg !54
  br i1 %.not.i31, label %257, label %252, !dbg !54

252:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %255, label %253, !dbg !54

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !54
  br label %__nv_sqrtf.exit35, !dbg !54

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !54
  br label %__nv_sqrtf.exit35, !dbg !54

257:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %260, label %258, !dbg !54

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !54
  br label %__nv_sqrtf.exit35, !dbg !54

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !54
  br label %__nv_sqrtf.exit35, !dbg !54

__nv_sqrtf.exit35:                                ; preds = %253, %255, %258, %260
  %.0.i33 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !54
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i36 = icmp eq i32 %262, 0, !dbg !54
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i39 = icmp eq i32 %263, 0, !dbg !54
  br i1 %.not.i36, label %269, label %264, !dbg !54

264:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %267, label %265, !dbg !54

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %188) #3, !dbg !54
  br label %__nv_sqrtf.exit40, !dbg !54

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %188) #3, !dbg !54
  br label %__nv_sqrtf.exit40, !dbg !54

269:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %272, label %270, !dbg !54

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %188) #3, !dbg !54
  br label %__nv_sqrtf.exit40, !dbg !54

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %188) #3, !dbg !54
  br label %__nv_sqrtf.exit40, !dbg !54

__nv_sqrtf.exit40:                                ; preds = %265, %267, %270, %272
  %.0.i38 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !54
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i41 = icmp eq i32 %274, 0, !dbg !54
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i44 = icmp eq i32 %275, 0, !dbg !54
  br i1 %.not.i41, label %281, label %276, !dbg !54

276:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %279, label %277, !dbg !54

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !54
  br label %__nv_sqrtf.exit45, !dbg !54

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !54
  br label %__nv_sqrtf.exit45, !dbg !54

281:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %284, label %282, !dbg !54

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !54
  br label %__nv_sqrtf.exit45, !dbg !54

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !54
  br label %__nv_sqrtf.exit45, !dbg !54

__nv_sqrtf.exit45:                                ; preds = %277, %279, %282, %284
  %.0.i43 = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !54
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !55
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !55
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !55
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !55
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !55
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !55
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !55
  %294 = fadd float %95, 0x3F50624DE0000000, !dbg !56
  %295 = fadd float %97, 0x3F50624DE0000000, !dbg !56
  %296 = fadd float %99, 0x3F50624DE0000000, !dbg !56
  %297 = fadd float %101, 0x3F50624DE0000000, !dbg !56
  %298 = fadd float %103, 0x3F50624DE0000000, !dbg !56
  %299 = fadd float %105, 0x3F50624DE0000000, !dbg !56
  %300 = fadd float %107, 0x3F50624DE0000000, !dbg !56
  %301 = fadd float %109, 0x3F50624DE0000000, !dbg !56
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i46 = icmp eq i32 %302, 0, !dbg !57
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i49 = icmp eq i32 %303, 0, !dbg !57
  br i1 %.not.i46, label %309, label %304, !dbg !57

304:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %307, label %305, !dbg !57

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %294) #3, !dbg !57
  br label %__nv_sqrtf.exit50, !dbg !57

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %294) #3, !dbg !57
  br label %__nv_sqrtf.exit50, !dbg !57

309:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %312, label %310, !dbg !57

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.f(float %294) #3, !dbg !57
  br label %__nv_sqrtf.exit50, !dbg !57

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.f(float %294) #3, !dbg !57
  br label %__nv_sqrtf.exit50, !dbg !57

__nv_sqrtf.exit50:                                ; preds = %305, %307, %310, %312
  %.0.i48 = phi float [ %306, %305 ], [ %308, %307 ], [ %311, %310 ], [ %313, %312 ], !dbg !57
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i51 = icmp eq i32 %314, 0, !dbg !57
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i54 = icmp eq i32 %315, 0, !dbg !57
  br i1 %.not.i51, label %321, label %316, !dbg !57

316:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %319, label %317, !dbg !57

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #3, !dbg !57
  br label %__nv_sqrtf.exit55, !dbg !57

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #3, !dbg !57
  br label %__nv_sqrtf.exit55, !dbg !57

321:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %324, label %322, !dbg !57

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #3, !dbg !57
  br label %__nv_sqrtf.exit55, !dbg !57

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #3, !dbg !57
  br label %__nv_sqrtf.exit55, !dbg !57

__nv_sqrtf.exit55:                                ; preds = %317, %319, %322, %324
  %.0.i53 = phi float [ %318, %317 ], [ %320, %319 ], [ %323, %322 ], [ %325, %324 ], !dbg !57
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i56 = icmp eq i32 %326, 0, !dbg !57
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i59 = icmp eq i32 %327, 0, !dbg !57
  br i1 %.not.i56, label %333, label %328, !dbg !57

328:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %331, label %329, !dbg !57

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #3, !dbg !57
  br label %__nv_sqrtf.exit60, !dbg !57

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #3, !dbg !57
  br label %__nv_sqrtf.exit60, !dbg !57

333:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %336, label %334, !dbg !57

334:                                              ; preds = %333
  %335 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #3, !dbg !57
  br label %__nv_sqrtf.exit60, !dbg !57

336:                                              ; preds = %333
  %337 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #3, !dbg !57
  br label %__nv_sqrtf.exit60, !dbg !57

__nv_sqrtf.exit60:                                ; preds = %329, %331, %334, %336
  %.0.i58 = phi float [ %330, %329 ], [ %332, %331 ], [ %335, %334 ], [ %337, %336 ], !dbg !57
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i61 = icmp eq i32 %338, 0, !dbg !57
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i64 = icmp eq i32 %339, 0, !dbg !57
  br i1 %.not.i61, label %345, label %340, !dbg !57

340:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %343, label %341, !dbg !57

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #3, !dbg !57
  br label %__nv_sqrtf.exit65, !dbg !57

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #3, !dbg !57
  br label %__nv_sqrtf.exit65, !dbg !57

345:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %348, label %346, !dbg !57

346:                                              ; preds = %345
  %347 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #3, !dbg !57
  br label %__nv_sqrtf.exit65, !dbg !57

348:                                              ; preds = %345
  %349 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #3, !dbg !57
  br label %__nv_sqrtf.exit65, !dbg !57

__nv_sqrtf.exit65:                                ; preds = %341, %343, %346, %348
  %.0.i63 = phi float [ %342, %341 ], [ %344, %343 ], [ %347, %346 ], [ %349, %348 ], !dbg !57
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i66 = icmp eq i32 %350, 0, !dbg !57
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i69 = icmp eq i32 %351, 0, !dbg !57
  br i1 %.not.i66, label %357, label %352, !dbg !57

352:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %355, label %353, !dbg !57

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %298) #3, !dbg !57
  br label %__nv_sqrtf.exit70, !dbg !57

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %298) #3, !dbg !57
  br label %__nv_sqrtf.exit70, !dbg !57

357:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %360, label %358, !dbg !57

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.f(float %298) #3, !dbg !57
  br label %__nv_sqrtf.exit70, !dbg !57

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.f(float %298) #3, !dbg !57
  br label %__nv_sqrtf.exit70, !dbg !57

__nv_sqrtf.exit70:                                ; preds = %353, %355, %358, %360
  %.0.i68 = phi float [ %354, %353 ], [ %356, %355 ], [ %359, %358 ], [ %361, %360 ], !dbg !57
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i71 = icmp eq i32 %362, 0, !dbg !57
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i74 = icmp eq i32 %363, 0, !dbg !57
  br i1 %.not.i71, label %369, label %364, !dbg !57

364:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %367, label %365, !dbg !57

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %299) #3, !dbg !57
  br label %__nv_sqrtf.exit75, !dbg !57

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %299) #3, !dbg !57
  br label %__nv_sqrtf.exit75, !dbg !57

369:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %372, label %370, !dbg !57

370:                                              ; preds = %369
  %371 = tail call float @llvm.nvvm.sqrt.rn.f(float %299) #3, !dbg !57
  br label %__nv_sqrtf.exit75, !dbg !57

372:                                              ; preds = %369
  %373 = tail call float @llvm.nvvm.sqrt.approx.f(float %299) #3, !dbg !57
  br label %__nv_sqrtf.exit75, !dbg !57

__nv_sqrtf.exit75:                                ; preds = %365, %367, %370, %372
  %.0.i73 = phi float [ %366, %365 ], [ %368, %367 ], [ %371, %370 ], [ %373, %372 ], !dbg !57
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i76 = icmp eq i32 %374, 0, !dbg !57
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i79 = icmp eq i32 %375, 0, !dbg !57
  br i1 %.not.i76, label %381, label %376, !dbg !57

376:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %379, label %377, !dbg !57

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #3, !dbg !57
  br label %__nv_sqrtf.exit80, !dbg !57

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #3, !dbg !57
  br label %__nv_sqrtf.exit80, !dbg !57

381:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %384, label %382, !dbg !57

382:                                              ; preds = %381
  %383 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #3, !dbg !57
  br label %__nv_sqrtf.exit80, !dbg !57

384:                                              ; preds = %381
  %385 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #3, !dbg !57
  br label %__nv_sqrtf.exit80, !dbg !57

__nv_sqrtf.exit80:                                ; preds = %377, %379, %382, %384
  %.0.i78 = phi float [ %378, %377 ], [ %380, %379 ], [ %383, %382 ], [ %385, %384 ], !dbg !57
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i81 = icmp eq i32 %386, 0, !dbg !57
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i84 = icmp eq i32 %387, 0, !dbg !57
  br i1 %.not.i81, label %393, label %388, !dbg !57

388:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %391, label %389, !dbg !57

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #3, !dbg !57
  br label %__nv_sqrtf.exit85, !dbg !57

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #3, !dbg !57
  br label %__nv_sqrtf.exit85, !dbg !57

393:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %396, label %394, !dbg !57

394:                                              ; preds = %393
  %395 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #3, !dbg !57
  br label %__nv_sqrtf.exit85, !dbg !57

396:                                              ; preds = %393
  %397 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #3, !dbg !57
  br label %__nv_sqrtf.exit85, !dbg !57

__nv_sqrtf.exit85:                                ; preds = %389, %391, %394, %396
  %.0.i83 = phi float [ %390, %389 ], [ %392, %391 ], [ %395, %394 ], [ %397, %396 ], !dbg !57
  %398 = shufflevector <2 x i1> %130, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %399 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !40
  %400 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !44
  %401 = icmp slt <2 x i32> %26, splat (i32 672), !dbg !58
  %402 = shufflevector <2 x i1> %401, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !58
  %403 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !49
  %404 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !52
  %405 = insertelement <16 x i32> poison, i32 %91, i64 0, !dbg !28
  %406 = insertelement <16 x i32> %405, i32 %90, i64 1, !dbg !28
  %407 = insertelement <16 x i32> %406, i32 %89, i64 2, !dbg !28
  %408 = insertelement <16 x i32> %407, i32 %88, i64 3, !dbg !28
  %409 = insertelement <16 x i32> %408, i32 %87, i64 4, !dbg !28
  %410 = insertelement <16 x i32> %409, i32 %86, i64 5, !dbg !28
  %411 = insertelement <16 x i32> %410, i32 %85, i64 6, !dbg !28
  %412 = insertelement <16 x i32> %411, i32 %84, i64 7, !dbg !28
  %413 = insertelement <16 x i32> %412, i32 %43, i64 8, !dbg !28
  %414 = insertelement <16 x i32> %413, i32 %42, i64 9, !dbg !28
  %415 = insertelement <16 x i32> %414, i32 %41, i64 10, !dbg !28
  %416 = insertelement <16 x i32> %415, i32 %40, i64 11, !dbg !28
  %417 = insertelement <16 x i32> %416, i32 %39, i64 12, !dbg !28
  %418 = insertelement <16 x i32> %417, i32 %38, i64 13, !dbg !28
  %419 = insertelement <16 x i32> %418, i32 %37, i64 14, !dbg !28
  %420 = insertelement <16 x i32> %419, i32 %36, i64 15, !dbg !28
  %421 = bitcast <16 x i32> %420 to <16 x float>, !dbg !28
  %422 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !40
  %423 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !44
  %424 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !49
  %425 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !52
  %426 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !40
  %427 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !44
  %428 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !49
  %429 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !52
  %430 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !40
  %431 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !44
  %432 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !49
  %433 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !52
  %434 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !40
  %435 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !44
  %436 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !49
  %437 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !52
  %438 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !40
  %439 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !44
  %440 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !49
  %441 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !52
  %442 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !40
  %443 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !44
  %444 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !49
  %445 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !52
  %446 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !40
  %447 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !44
  %448 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !49
  %449 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !52
  %450 = insertelement <16 x i32> poison, i32 %119, i64 0, !dbg !32
  %451 = insertelement <16 x i32> %450, i32 %118, i64 1, !dbg !32
  %452 = insertelement <16 x i32> %451, i32 %117, i64 2, !dbg !32
  %453 = insertelement <16 x i32> %452, i32 %116, i64 3, !dbg !32
  %454 = insertelement <16 x i32> %453, i32 %115, i64 4, !dbg !32
  %455 = insertelement <16 x i32> %454, i32 %114, i64 5, !dbg !32
  %456 = insertelement <16 x i32> %455, i32 %113, i64 6, !dbg !32
  %457 = insertelement <16 x i32> %456, i32 %112, i64 7, !dbg !32
  %458 = insertelement <16 x i32> %457, i32 %71, i64 8, !dbg !32
  %459 = insertelement <16 x i32> %458, i32 %70, i64 9, !dbg !32
  %460 = insertelement <16 x i32> %459, i32 %69, i64 10, !dbg !32
  %461 = insertelement <16 x i32> %460, i32 %68, i64 11, !dbg !32
  %462 = insertelement <16 x i32> %461, i32 %67, i64 12, !dbg !32
  %463 = insertelement <16 x i32> %462, i32 %66, i64 13, !dbg !32
  %464 = insertelement <16 x i32> %463, i32 %65, i64 14, !dbg !32
  %465 = insertelement <16 x i32> %464, i32 %64, i64 15, !dbg !32
  %466 = bitcast <16 x i32> %465 to <16 x float>, !dbg !32
  %467 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !34
  %468 = insertelement <16 x i32> %467, i32 %128, i64 1, !dbg !34
  %469 = insertelement <16 x i32> %468, i32 %127, i64 2, !dbg !34
  %470 = insertelement <16 x i32> %469, i32 %126, i64 3, !dbg !34
  %471 = insertelement <16 x i32> %470, i32 %125, i64 4, !dbg !34
  %472 = insertelement <16 x i32> %471, i32 %124, i64 5, !dbg !34
  %473 = insertelement <16 x i32> %472, i32 %123, i64 6, !dbg !34
  %474 = insertelement <16 x i32> %473, i32 %122, i64 7, !dbg !34
  %475 = insertelement <16 x i32> %474, i32 %81, i64 8, !dbg !34
  %476 = insertelement <16 x i32> %475, i32 %80, i64 9, !dbg !34
  %477 = insertelement <16 x i32> %476, i32 %79, i64 10, !dbg !34
  %478 = insertelement <16 x i32> %477, i32 %78, i64 11, !dbg !34
  %479 = insertelement <16 x i32> %478, i32 %77, i64 12, !dbg !34
  %480 = insertelement <16 x i32> %479, i32 %76, i64 13, !dbg !34
  %481 = insertelement <16 x i32> %480, i32 %75, i64 14, !dbg !34
  %482 = insertelement <16 x i32> %481, i32 %74, i64 15, !dbg !34
  %483 = bitcast <16 x i32> %482 to <16 x float>, !dbg !34
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !59
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !59
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !59
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !59
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !59
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !59
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #3, !dbg !59
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #3, !dbg !59
  %492 = insertelement <8 x i32> poison, i32 %399, i64 0, !dbg !40
  %493 = insertelement <8 x i32> %492, i32 %422, i64 1, !dbg !40
  %494 = insertelement <8 x i32> %493, i32 %426, i64 2, !dbg !40
  %495 = insertelement <8 x i32> %494, i32 %430, i64 3, !dbg !40
  %496 = insertelement <8 x i32> %495, i32 %434, i64 4, !dbg !40
  %497 = insertelement <8 x i32> %496, i32 %438, i64 5, !dbg !40
  %498 = insertelement <8 x i32> %497, i32 %442, i64 6, !dbg !40
  %499 = insertelement <8 x i32> %498, i32 %446, i64 7, !dbg !40
  %500 = bitcast <8 x i32> %499 to <8 x float>, !dbg !40
  %501 = insertelement <8 x i32> poison, i32 %400, i64 0, !dbg !44
  %502 = insertelement <8 x i32> %501, i32 %423, i64 1, !dbg !44
  %503 = insertelement <8 x i32> %502, i32 %427, i64 2, !dbg !44
  %504 = insertelement <8 x i32> %503, i32 %431, i64 3, !dbg !44
  %505 = insertelement <8 x i32> %504, i32 %435, i64 4, !dbg !44
  %506 = insertelement <8 x i32> %505, i32 %439, i64 5, !dbg !44
  %507 = insertelement <8 x i32> %506, i32 %443, i64 6, !dbg !44
  %508 = insertelement <8 x i32> %507, i32 %447, i64 7, !dbg !44
  %509 = bitcast <8 x i32> %508 to <8 x float>, !dbg !44
  %510 = fadd <8 x float> %500, %509, !dbg !60
  %511 = insertelement <8 x i32> poison, i32 %403, i64 0, !dbg !61
  %512 = insertelement <8 x i32> %511, i32 %424, i64 1, !dbg !61
  %513 = insertelement <8 x i32> %512, i32 %428, i64 2, !dbg !61
  %514 = insertelement <8 x i32> %513, i32 %432, i64 3, !dbg !61
  %515 = insertelement <8 x i32> %514, i32 %436, i64 4, !dbg !61
  %516 = insertelement <8 x i32> %515, i32 %440, i64 5, !dbg !61
  %517 = insertelement <8 x i32> %516, i32 %444, i64 6, !dbg !61
  %518 = insertelement <8 x i32> %517, i32 %448, i64 7, !dbg !61
  %519 = insertelement <8 x i32> poison, i32 %404, i64 0, !dbg !61
  %520 = insertelement <8 x i32> %519, i32 %425, i64 1, !dbg !61
  %521 = insertelement <8 x i32> %520, i32 %429, i64 2, !dbg !61
  %522 = insertelement <8 x i32> %521, i32 %433, i64 3, !dbg !61
  %523 = insertelement <8 x i32> %522, i32 %437, i64 4, !dbg !61
  %524 = insertelement <8 x i32> %523, i32 %441, i64 5, !dbg !61
  %525 = insertelement <8 x i32> %524, i32 %445, i64 6, !dbg !61
  %526 = insertelement <8 x i32> %525, i32 %449, i64 7, !dbg !61
  %527 = select <8 x i1> %402, <8 x i32> %518, <8 x i32> %526, !dbg !61
  %528 = bitcast <8 x i32> %527 to <8 x float>, !dbg !61
  %529 = select <8 x i1> %398, <8 x float> %510, <8 x float> %528, !dbg !62
  %530 = shufflevector <8 x float> %529, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !62
  %531 = fsub <16 x float> %530, %421, !dbg !63
  %532 = insertelement <16 x float> poison, float %491, i64 0, !dbg !64
  %533 = insertelement <16 x float> %532, float %490, i64 1, !dbg !64
  %534 = insertelement <16 x float> %533, float %489, i64 2, !dbg !64
  %535 = insertelement <16 x float> %534, float %488, i64 3, !dbg !64
  %536 = insertelement <16 x float> %535, float %487, i64 4, !dbg !64
  %537 = insertelement <16 x float> %536, float %486, i64 5, !dbg !64
  %538 = insertelement <16 x float> %537, float %485, i64 6, !dbg !64
  %539 = insertelement <16 x float> %538, float %484, i64 7, !dbg !64
  %540 = insertelement <16 x float> %539, float %293, i64 8, !dbg !64
  %541 = insertelement <16 x float> %540, float %292, i64 9, !dbg !64
  %542 = insertelement <16 x float> %541, float %291, i64 10, !dbg !64
  %543 = insertelement <16 x float> %542, float %290, i64 11, !dbg !64
  %544 = insertelement <16 x float> %543, float %289, i64 12, !dbg !64
  %545 = insertelement <16 x float> %544, float %288, i64 13, !dbg !64
  %546 = insertelement <16 x float> %545, float %287, i64 14, !dbg !64
  %547 = insertelement <16 x float> %546, float %286, i64 15, !dbg !64
  %548 = fmul <16 x float> %531, %547, !dbg !64
  %549 = fmul <16 x float> %548, %466, !dbg !65
  %550 = fadd <16 x float> %549, %483, !dbg !66
  %551 = fcmp olt <16 x float> %550, zeroinitializer, !dbg !67
  %552 = extractelement <16 x i1> %551, i64 8, !dbg !71
  %553 = extractelement <16 x i1> %551, i64 9, !dbg !71
  %554 = extractelement <16 x i1> %551, i64 10, !dbg !71
  %555 = extractelement <16 x i1> %551, i64 11, !dbg !71
  %556 = extractelement <16 x i1> %551, i64 12, !dbg !71
  %557 = extractelement <16 x i1> %551, i64 13, !dbg !71
  %558 = extractelement <16 x i1> %551, i64 14, !dbg !71
  %559 = extractelement <16 x i1> %551, i64 15, !dbg !71
  %560 = extractelement <16 x i1> %551, i64 7, !dbg !73
  %561 = extractelement <16 x i1> %551, i64 6, !dbg !73
  %562 = extractelement <16 x i1> %551, i64 5, !dbg !73
  %563 = extractelement <16 x i1> %551, i64 4, !dbg !73
  %564 = extractelement <16 x i1> %551, i64 3, !dbg !73
  %565 = extractelement <16 x i1> %551, i64 2, !dbg !73
  %566 = extractelement <16 x i1> %551, i64 1, !dbg !73
  %567 = extractelement <16 x i1> %551, i64 0, !dbg !73
  %568 = sext i32 %21 to i64, !dbg !74
  %569 = getelementptr float, ptr addrspace(1) %11, i64 %568, !dbg !74
  %570 = sext i32 %22 to i64, !dbg !74
  %571 = getelementptr float, ptr addrspace(1) %11, i64 %570, !dbg !74
  %bc = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %572 = extractelement <8 x i32> %bc, i64 7, !dbg !75
  %bc86 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %573 = extractelement <8 x i32> %bc86, i64 6, !dbg !75
  %bc87 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %574 = extractelement <8 x i32> %bc87, i64 5, !dbg !75
  %bc88 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %575 = extractelement <8 x i32> %bc88, i64 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %572, i32 %573, i32 %574, i32 %575, ptr addrspace(1) %569, i1 true) #3, !dbg !75
  %bc89 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %576 = extractelement <8 x i32> %bc89, i64 3, !dbg !75
  %bc90 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %577 = extractelement <8 x i32> %bc90, i64 2, !dbg !75
  %bc91 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %578 = extractelement <8 x i32> %bc91, i64 1, !dbg !75
  %bc92 = bitcast <8 x float> %529 to <8 x i32>, !dbg !75
  %579 = extractelement <8 x i32> %bc92, i64 0, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %576, i32 %577, i32 %578, i32 %579, ptr addrspace(1) %571, i1 true) #3, !dbg !75
  %580 = getelementptr float, ptr addrspace(1) %12, i64 %568, !dbg !76
  %581 = getelementptr float, ptr addrspace(1) %12, i64 %570, !dbg !76
  %bc93 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %582 = extractelement <16 x i32> %bc93, i64 15, !dbg !77
  %583 = select i1 %559, i32 0, i32 %582, !dbg !71
  %bc94 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %584 = extractelement <16 x i32> %bc94, i64 14, !dbg !77
  %585 = select i1 %558, i32 0, i32 %584, !dbg !71
  %bc95 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %586 = extractelement <16 x i32> %bc95, i64 13, !dbg !77
  %587 = select i1 %557, i32 0, i32 %586, !dbg !71
  %bc96 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %588 = extractelement <16 x i32> %bc96, i64 12, !dbg !77
  %589 = select i1 %556, i32 0, i32 %588, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %583, i32 %585, i32 %587, i32 %589, ptr addrspace(1) %580, i1 true) #3, !dbg !77
  %bc97 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %590 = extractelement <16 x i32> %bc97, i64 11, !dbg !77
  %591 = select i1 %555, i32 0, i32 %590, !dbg !71
  %bc98 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %592 = extractelement <16 x i32> %bc98, i64 10, !dbg !77
  %593 = select i1 %554, i32 0, i32 %592, !dbg !71
  %bc99 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %594 = extractelement <16 x i32> %bc99, i64 9, !dbg !77
  %595 = select i1 %553, i32 0, i32 %594, !dbg !71
  %bc100 = bitcast <16 x float> %550 to <16 x i32>, !dbg !77
  %596 = extractelement <16 x i32> %bc100, i64 8, !dbg !77
  %597 = select i1 %552, i32 0, i32 %596, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %591, i32 %593, i32 %595, i32 %597, ptr addrspace(1) %581, i1 true) #3, !dbg !77
  %598 = getelementptr float, ptr addrspace(1) %13, i64 %568, !dbg !78
  %599 = getelementptr float, ptr addrspace(1) %13, i64 %570, !dbg !78
  %bc101 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %600 = extractelement <16 x i32> %bc101, i64 7, !dbg !79
  %601 = select i1 %560, i32 0, i32 %600, !dbg !73
  %bc102 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %602 = extractelement <16 x i32> %bc102, i64 6, !dbg !79
  %603 = select i1 %561, i32 0, i32 %602, !dbg !73
  %bc103 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %604 = extractelement <16 x i32> %bc103, i64 5, !dbg !79
  %605 = select i1 %562, i32 0, i32 %604, !dbg !73
  %bc104 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %606 = extractelement <16 x i32> %bc104, i64 4, !dbg !79
  %607 = select i1 %563, i32 0, i32 %606, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %603, i32 %605, i32 %607, ptr addrspace(1) %598, i1 true) #3, !dbg !79
  %bc105 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %608 = extractelement <16 x i32> %bc105, i64 3, !dbg !79
  %609 = select i1 %564, i32 0, i32 %608, !dbg !73
  %bc106 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %610 = extractelement <16 x i32> %bc106, i64 2, !dbg !79
  %611 = select i1 %565, i32 0, i32 %610, !dbg !73
  %bc107 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %612 = extractelement <16 x i32> %bc107, i64 1, !dbg !79
  %613 = select i1 %566, i32 0, i32 %612, !dbg !73
  %bc108 = bitcast <16 x float> %550 to <16 x i32>, !dbg !79
  %614 = extractelement <16 x i32> %bc108, i64 0, !dbg !79
  %615 = select i1 %567, i32 0, i32 %614, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %609, i32 %611, i32 %613, i32 %615, ptr addrspace(1) %599, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnauqvhdxeuj3fq5dhpejkea2xgqh3qyic4oilnhzbjimnkrjwxk.py", directory: "inductor_cache/na")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 55, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 41, column: 51, scope: !7)
!38 = !DILocation(line: 41, column: 45, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 56, scope: !7)
!41 = !DILocation(line: 42, column: 51, scope: !7)
!42 = !DILocation(line: 42, column: 45, scope: !7)
!43 = !DILocation(line: 42, column: 30, scope: !7)
!44 = !DILocation(line: 42, column: 56, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 36, scope: !7)
!47 = !DILocation(line: 55, column: 55, scope: !7)
!48 = !DILocation(line: 55, column: 31, scope: !7)
!49 = !DILocation(line: 55, column: 66, scope: !7)
!50 = !DILocation(line: 56, column: 21, scope: !7)
!51 = !DILocation(line: 60, column: 31, scope: !7)
!52 = !DILocation(line: 60, column: 85, scope: !7)
!53 = !DILocation(line: 67, column: 20, scope: !7)
!54 = !DILocation(line: 68, column: 27, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 79, column: 20, scope: !7)
!57 = !DILocation(line: 80, column: 27, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 81, column: 20, scope: !7)
!60 = !DILocation(line: 43, column: 18, scope: !7)
!61 = !DILocation(line: 61, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 83, column: 20, scope: !7)
!65 = !DILocation(line: 84, column: 20, scope: !7)
!66 = !DILocation(line: 85, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 86, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !72)
!72 = !DILocation(line: 77, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 87, column: 25, scope: !7)
!75 = !DILocation(line: 87, column: 37, scope: !7)
!76 = !DILocation(line: 88, column: 25, scope: !7)
!77 = !DILocation(line: 88, column: 37, scope: !7)
!78 = !DILocation(line: 89, column: 25, scope: !7)
!79 = !DILocation(line: 89, column: 37, scope: !7)
!80 = !DILocation(line: 89, column: 4, scope: !7)
