; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %8, %10, !dbg !13
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %12, 256, !dbg !14
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = icmp slt i32 %16, 128, !dbg !16
  %18 = sdiv i32 %12, 64, !dbg !17
  %19 = sdiv i32 %13, 64, !dbg !17
  %20 = shl i32 %12, 7, !dbg !18
  %21 = shl i32 %13, 7, !dbg !18
  %22 = add i32 %20, %16, !dbg !19
  %23 = add i32 %21, %16, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = and i1 %17, %14, !dbg !21
  %29 = and i1 %17, %15, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %28) #4, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %29) #4, !dbg !22
  %32 = shl i32 %18, 7, !dbg !23
  %33 = shl i32 %19, 7, !dbg !23
  %34 = add i32 %32, %16, !dbg !24
  %35 = add i32 %33, %16, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #4, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %29) #4, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %28) #4, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %29) #4, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 6.400000e+01) #4, !dbg !29
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 6.400000e+01) #4, !dbg !29
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !30
  %51 = fadd float %49, 0x3EE4F8B580000000, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %52, 0, !dbg !31
  br i1 %.not.i, label %55, label %53, !dbg !31

53:                                               ; preds = %6
  %54 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %50), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

55:                                               ; preds = %6
  %56 = tail call float @llvm.nvvm.rsqrt.approx.f(float %50), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %53, %55
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], !dbg !31
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i3 = icmp eq i32 %57, 0, !dbg !31
  br i1 %.not.i3, label %60, label %58, !dbg !31

58:                                               ; preds = %__nv_rsqrtf.exit
  %59 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %51), !dbg !31
  br label %__nv_rsqrtf.exit5, !dbg !31

60:                                               ; preds = %__nv_rsqrtf.exit
  %61 = tail call float @llvm.nvvm.rsqrt.approx.f(float %51), !dbg !31
  br label %__nv_rsqrtf.exit5, !dbg !31

__nv_rsqrtf.exit5:                                ; preds = %58, %60
  %.0.i4 = phi float [ %59, %58 ], [ %61, %60 ], !dbg !31
  %62 = bitcast i32 %31 to float, !dbg !22
  %63 = bitcast i32 %41 to float, !dbg !26
  %64 = fsub float %62, %63, !dbg !32
  %65 = bitcast i32 %30 to float, !dbg !22
  %66 = bitcast i32 %40 to float, !dbg !26
  %67 = fsub float %65, %66, !dbg !32
  %68 = shl i32 %9, 1, !dbg !12
  %69 = and i32 %68, 254, !dbg !12
  %70 = or disjoint i32 %8, %69, !dbg !13
  %71 = icmp slt i32 %70, 256, !dbg !14
  %72 = and i1 %17, %71, !dbg !21
  %.frozen = freeze i32 %70, !dbg !17
  %73 = sdiv i32 %.frozen, 64, !dbg !17
  %74 = mul i32 %73, 64, !dbg !33
  %.decomposed = sub i32 %.frozen, %74, !dbg !33
  %75 = fmul float %67, %.0.i, !dbg !34
  %76 = fmul float %64, %.0.i4, !dbg !34
  %77 = fcmp ogt float %75, 0.000000e+00, !dbg !35
  %78 = fcmp ogt float %76, 0.000000e+00, !dbg !35
  %79 = fmul float %75, 0x3FB99999A0000000, !dbg !36
  %80 = fmul float %76, 0x3FB99999A0000000, !dbg !36
  %81 = select i1 %77, float %75, float %79, !dbg !37
  %82 = select i1 %78, float %76, float %80, !dbg !37
  %83 = shl i32 %16, 6, !dbg !38
  %84 = add i32 %.decomposed, %83, !dbg !39
  %85 = shl i32 %73, 13, !dbg !40
  %86 = add i32 %84, %85, !dbg !41
  %87 = sext i32 %86 to i64, !dbg !42
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !42
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  %90 = bitcast float %81 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #4, !dbg !43
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !43
  %92 = bitcast float %82 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !43
  %.extract = load i32, ptr addrspace(3) %93, align 8, !dbg !43
  %94 = getelementptr inbounds i8, ptr addrspace(3) %93, i32 4, !dbg !43
  %.extract2 = load i32, ptr addrspace(3) %94, align 4, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %88, i1 %72) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrxbn4xxha4twhnxcpiypq3pnhagv3odimmpfdk5txco6gqif5b.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_poi_fused_leaky_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_16", linkageName: "triton_poi_fused_leaky_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 47, column: 33, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !7)
!40 = !DILocation(line: 47, column: 43, scope: !7)
!41 = !DILocation(line: 47, column: 38, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 55, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
