; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = icmp slt i32 %18, 128, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %16, !dbg !17
  %23 = or disjoint i32 %21, %17, !dbg !17
  %24 = icmp slt i32 %22, 256, !dbg !18
  %25 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %26 = sdiv i32 %.frozen, 32, !dbg !19
  %27 = mul i32 %26, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %22, 5, !dbg !21
  %29 = shl i32 %23, 5, !dbg !21
  %30 = shl i32 %26, 13, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = and i1 %19, %24, !dbg !26
  %39 = and i1 %19, %25, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #4, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #4, !dbg !27
  %42 = sext i32 %.decomposed to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #4, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !30
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #4, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = bitcast i32 %50 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %19) #4, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %19) #4, !dbg !35
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %62 = fadd float %54, 0x3EE4F8B580000000, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %63, 0, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %64, 0, !dbg !37
  br i1 %.not.i, label %70, label %65, !dbg !37

65:                                               ; preds = %9
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !37

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %75, 0, !dbg !37
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !37
  br i1 %.not.i1, label %82, label %77, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %87, 0, !dbg !37
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !37
  br i1 %.not.i6, label %94, label %89, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !37

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %99, 0, !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !37
  br i1 %.not.i11, label %106, label %101, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !37

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !35
  %126 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !35
  %127 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %131 = or disjoint i32 %21, %14, !dbg !17
  %132 = icmp slt i32 %131, 256, !dbg !18
  %133 = or disjoint i32 %11, %17, !dbg !13
  %134 = icmp slt i32 %133, 128, !dbg !14
  %135 = and i1 %134, %132, !dbg !26
  %136 = or disjoint i32 %11, %16, !dbg !13
  %137 = icmp slt i32 %136, 128, !dbg !14
  %138 = and i1 %137, %132, !dbg !26
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !38
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !38
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !38
  %143 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !29
  %144 = insertelement <4 x i32> %143, i32 %114, i64 1, !dbg !29
  %145 = insertelement <4 x i32> %144, i32 %116, i64 2, !dbg !29
  %146 = insertelement <4 x i32> %145, i32 %118, i64 3, !dbg !29
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !29
  %148 = shufflevector <4 x float> %147, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %149 = insertelement <8 x i32> poison, i32 %111, i64 0, !dbg !27
  %150 = insertelement <8 x i32> %149, i32 %113, i64 1, !dbg !27
  %151 = insertelement <8 x i32> %150, i32 %115, i64 2, !dbg !27
  %152 = insertelement <8 x i32> %151, i32 %117, i64 3, !dbg !27
  %153 = insertelement <8 x i32> %152, i32 %119, i64 4, !dbg !27
  %154 = insertelement <8 x i32> %153, i32 %120, i64 5, !dbg !27
  %155 = insertelement <8 x i32> %154, i32 %121, i64 6, !dbg !27
  %156 = insertelement <8 x i32> %155, i32 %122, i64 7, !dbg !27
  %157 = bitcast <8 x i32> %156 to <8 x float>, !dbg !27
  %158 = fsub <8 x float> %157, %148, !dbg !39
  %159 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !35
  %160 = insertelement <4 x i32> %159, i32 %124, i64 1, !dbg !35
  %161 = insertelement <4 x i32> %160, i32 %125, i64 2, !dbg !35
  %162 = insertelement <4 x i32> %161, i32 %126, i64 3, !dbg !35
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !35
  %164 = shufflevector <4 x float> %163, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %165 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !33
  %166 = insertelement <4 x i32> %165, i32 %128, i64 1, !dbg !33
  %167 = insertelement <4 x i32> %166, i32 %129, i64 2, !dbg !33
  %168 = insertelement <4 x i32> %167, i32 %130, i64 3, !dbg !33
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !33
  %170 = shufflevector <4 x float> %169, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %171 = insertelement <8 x float> poison, float %142, i64 0, !dbg !40
  %172 = insertelement <8 x float> %171, float %141, i64 1, !dbg !40
  %173 = insertelement <8 x float> %172, float %140, i64 2, !dbg !40
  %174 = insertelement <8 x float> %173, float %139, i64 3, !dbg !40
  %175 = shufflevector <8 x float> %174, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %176 = fmul <8 x float> %158, %175, !dbg !40
  %177 = fmul <8 x float> %176, %170, !dbg !41
  %178 = fadd <8 x float> %177, %164, !dbg !42
  %179 = fcmp olt <8 x float> %178, zeroinitializer, !dbg !43
  %180 = extractelement <8 x i1> %179, i64 7, !dbg !47
  %181 = extractelement <8 x float> %178, i64 7, !dbg !47
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !47
  %183 = extractelement <8 x i1> %179, i64 6, !dbg !47
  %184 = extractelement <8 x float> %178, i64 6, !dbg !47
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !47
  %186 = extractelement <8 x i1> %179, i64 5, !dbg !47
  %187 = extractelement <8 x float> %178, i64 5, !dbg !47
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !47
  %189 = extractelement <8 x i1> %179, i64 4, !dbg !47
  %190 = extractelement <8 x float> %178, i64 4, !dbg !47
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !47
  %192 = extractelement <8 x i1> %179, i64 3, !dbg !47
  %193 = extractelement <8 x float> %178, i64 3, !dbg !47
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !47
  %195 = extractelement <8 x i1> %179, i64 2, !dbg !47
  %196 = extractelement <8 x float> %178, i64 2, !dbg !47
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !47
  %198 = extractelement <8 x i1> %179, i64 1, !dbg !47
  %199 = extractelement <8 x float> %178, i64 1, !dbg !47
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !47
  %201 = extractelement <8 x i1> %179, i64 0, !dbg !47
  %202 = extractelement <8 x float> %178, i64 0, !dbg !47
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !47
  %204 = shl i32 %136, 8, !dbg !48
  %205 = shl i32 %133, 8, !dbg !48
  %206 = add i32 %131, %204, !dbg !49
  %207 = add i32 %131, %205, !dbg !49
  %208 = sext i32 %206 to i64, !dbg !50
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !50
  %210 = sext i32 %207 to i64, !dbg !50
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !50
  %212 = shl i32 %12, 7, !dbg !51
  %213 = and i32 %212, 896, !dbg !51
  %214 = or disjoint i32 %213, %16, !dbg !51
  %215 = and i32 %13, 508, !dbg !51
  %216 = lshr exact i32 %213, 3, !dbg !51
  %217 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !51
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %214, !dbg !51
  %219 = bitcast float %182 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !51
  %220 = or disjoint i32 %214, 32, !dbg !51
  %221 = lshr i32 %220, 5, !dbg !51
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !51
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !51
  %224 = bitcast float %185 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !51
  %225 = or disjoint i32 %214, 64, !dbg !51
  %226 = lshr i32 %225, 5, !dbg !51
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !51
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !51
  %229 = bitcast float %188 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !51
  %230 = or disjoint i32 %214, 96, !dbg !51
  %231 = lshr i32 %230, 5, !dbg !51
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !51
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !51
  %234 = bitcast float %191 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !51
  %235 = or disjoint i32 %214, 16, !dbg !51
  %236 = getelementptr float, ptr addrspace(3) %217, i32 %235, !dbg !51
  %237 = bitcast float %194 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !51
  %238 = or disjoint i32 %214, 48, !dbg !51
  %239 = lshr i32 %238, 5, !dbg !51
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !51
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !51
  %242 = bitcast float %197 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !51
  %243 = or disjoint i32 %214, 80, !dbg !51
  %244 = lshr i32 %243, 5, !dbg !51
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !51
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !51
  %247 = bitcast float %200 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !51
  %248 = or disjoint i32 %214, 112, !dbg !51
  %249 = lshr i32 %248, 5, !dbg !51
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !51
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !51
  %252 = bitcast float %203 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %253 = lshr i32 %215, 5, !dbg !51
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !51
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %215, !dbg !51
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !51
  %257 = or disjoint i32 %215, 1, !dbg !51
  %258 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %257, !dbg !51
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !51
  %260 = or disjoint i32 %215, 2, !dbg !51
  %261 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %260, !dbg !51
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !51
  %263 = or disjoint i32 %215, 3, !dbg !51
  %264 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %263, !dbg !51
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !51
  %266 = or disjoint i32 %215, 512, !dbg !51
  %267 = lshr i32 %266, 5, !dbg !51
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !51
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !51
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !51
  %271 = or disjoint i32 %215, 513, !dbg !51
  %272 = lshr i32 %271, 5, !dbg !51
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !51
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !51
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !51
  %276 = or disjoint i32 %215, 514, !dbg !51
  %277 = lshr i32 %276, 5, !dbg !51
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !51
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !51
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !51
  %281 = or disjoint i32 %215, 515, !dbg !51
  %282 = lshr i32 %281, 5, !dbg !51
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !51
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !51
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %259, i32 %262, i32 %265, ptr addrspace(1) %209, i1 %138) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %275, i32 %280, i32 %285, ptr addrspace(1) %211, i1 %135) #4, !dbg !51
  %286 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !52
  %287 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !52
  %288 = bitcast float %182 to i32, !dbg !53
  %289 = bitcast float %185 to i32, !dbg !53
  %290 = bitcast float %188 to i32, !dbg !53
  %291 = bitcast float %191 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %286, i1 %38) #4, !dbg !53
  %292 = bitcast float %194 to i32, !dbg !53
  %293 = bitcast float %197 to i32, !dbg !53
  %294 = bitcast float %200 to i32, !dbg !53
  %295 = bitcast float %203 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %287, i1 %39) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crz5iqcytsaetffnnuajrettrt3fm6jdvqeh6jotzdlttohjdpjg.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 46, scope: !7)
!52 = !DILocation(line: 51, column: 25, scope: !7)
!53 = !DILocation(line: 51, column: 55, scope: !7)
!54 = !DILocation(line: 51, column: 4, scope: !7)
