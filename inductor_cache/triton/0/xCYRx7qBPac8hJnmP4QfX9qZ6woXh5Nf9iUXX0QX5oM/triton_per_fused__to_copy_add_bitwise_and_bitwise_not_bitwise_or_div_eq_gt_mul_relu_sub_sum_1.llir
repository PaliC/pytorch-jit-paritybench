; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 12, !dbg !10
  %10 = lshr i32 %8, 4, !dbg !11
  %11 = and i32 %10, 12, !dbg !11
  %12 = and i32 %5, 15, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !13
  %15 = zext nneg i32 %9 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = zext nneg i32 %12 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !15
  %19 = insertelement <2 x i32> poison, i32 %5, i64 0, !dbg !10
  %20 = insertelement <2 x i32> %19, i32 %8, i64 1, !dbg !10
  %21 = and <2 x i32> %20, <i32 3, i32 48>, !dbg !10
  %22 = extractelement <2 x i32> %21, i64 1, !dbg !16
  %23 = lshr exact i32 %22, 4, !dbg !17
  %24 = lshr exact i32 %22, 2, !dbg !16
  %25 = zext nneg i32 %24 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %33 = insertelement <2 x i32> %32, i32 %31, i64 1, !dbg !19
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #4, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !20
  %41 = insertelement <2 x i32> %40, i32 %39, i64 1, !dbg !20
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %48 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !21
  %49 = insertelement <2 x i32> %48, i32 %47, i64 1, !dbg !21
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !22
  %55 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !22
  %56 = insertelement <2 x i32> %55, i32 %54, i64 1, !dbg !22
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %64 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !24
  %65 = insertelement <2 x i32> %64, i32 %63, i64 1, !dbg !24
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !24
  %67 = extractelement <2 x i32> %21, i64 0, !dbg !25
  %68 = icmp ne i32 %23, %67, !dbg !25
  %69 = icmp ne <2 x i32> %21, <i32 2, i32 48>, !dbg !26
  %70 = icmp ne <2 x i32> %21, <i32 3, i32 32>, !dbg !27
  %71 = shufflevector <2 x i1> %70, <2 x i1> poison, <2 x i32> <i32 1, i32 0>, !dbg !27
  %72 = and <2 x i1> %69, %71, !dbg !28
  %73 = fcmp oeq <2 x float> %34, %42, !dbg !29
  %74 = fcmp une <2 x float> %50, %42, !dbg !30
  %75 = and <2 x i1> %73, %74, !dbg !31
  %76 = and <2 x i1> %72, %75, !dbg !32
  %77 = fcmp ult <2 x float> %42, splat (float -1.000000e+00), !dbg !33
  %78 = fcmp ult <2 x float> %34, splat (float -1.000000e+00), !dbg !34
  %79 = and <2 x i1> %78, %77, !dbg !35
  %80 = fadd <2 x float> %42, splat (float -1.000000e+00), !dbg !36
  %81 = fcmp oeq <2 x float> %80, %50, !dbg !37
  %82 = fcmp ult <2 x float> %50, splat (float -1.000000e+00), !dbg !38
  %83 = or <2 x i1> %81, %82, !dbg !39
  %84 = and <2 x i1> %79, %83, !dbg !40
  %85 = and <2 x i1> %76, %84, !dbg !41
  %86 = insertelement <2 x i1> poison, i1 %68, i64 0, !dbg !41
  %87 = shufflevector <2 x i1> %86, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %88 = and <2 x i1> %87, %85, !dbg !41
  %89 = fsub <2 x float> splat (float 1.000000e+00), %57, !dbg !42
  %90 = fadd <2 x float> %66, splat (float -1.000000e+00), !dbg !43
  %91 = fadd <2 x float> %89, %90, !dbg !43
  %92 = fadd <2 x float> %91, splat (float 0x3FD3333340000000), !dbg !44
  %93 = fcmp olt <2 x float> %92, zeroinitializer, !dbg !45
  %94 = select <2 x i1> %93, <2 x float> zeroinitializer, <2 x float> %92, !dbg !49
  %95 = uitofp <2 x i1> %88 to <2 x float>, !dbg !50
  %96 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %97 = insertelement <2 x i32> %96, i32 %29, i64 1, !dbg !19
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !19
  %99 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %100 = insertelement <2 x i32> %99, i32 %37, i64 1, !dbg !20
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !20
  %102 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !21
  %103 = insertelement <2 x i32> %102, i32 %45, i64 1, !dbg !21
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !21
  %105 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !22
  %106 = insertelement <2 x i32> %105, i32 %52, i64 1, !dbg !22
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !22
  %108 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !24
  %109 = insertelement <2 x i32> %108, i32 %61, i64 1, !dbg !24
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !24
  %111 = icmp ne <2 x i32> %21, <i32 0, i32 16>, !dbg !27
  %112 = icmp ne <2 x i32> %21, <i32 1, i32 0>, !dbg !26
  %113 = shufflevector <2 x i1> %112, <2 x i1> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %114 = and <2 x i1> %113, %111, !dbg !28
  %115 = fcmp oeq <2 x float> %98, %101, !dbg !29
  %116 = fcmp une <2 x float> %104, %101, !dbg !30
  %117 = and <2 x i1> %115, %116, !dbg !31
  %118 = and <2 x i1> %114, %117, !dbg !32
  %119 = fcmp ult <2 x float> %101, splat (float -1.000000e+00), !dbg !33
  %120 = fcmp ult <2 x float> %98, splat (float -1.000000e+00), !dbg !34
  %121 = and <2 x i1> %120, %119, !dbg !35
  %122 = fadd <2 x float> %101, splat (float -1.000000e+00), !dbg !36
  %123 = fcmp oeq <2 x float> %122, %104, !dbg !37
  %124 = fcmp ult <2 x float> %104, splat (float -1.000000e+00), !dbg !38
  %125 = or <2 x i1> %123, %124, !dbg !39
  %126 = and <2 x i1> %121, %125, !dbg !40
  %127 = and <2 x i1> %118, %126, !dbg !41
  %128 = and <2 x i1> %87, %127, !dbg !41
  %129 = fsub <2 x float> splat (float 1.000000e+00), %107, !dbg !42
  %130 = fadd <2 x float> %110, splat (float -1.000000e+00), !dbg !43
  %131 = fadd <2 x float> %129, %130, !dbg !43
  %132 = fadd <2 x float> %131, splat (float 0x3FD3333340000000), !dbg !44
  %133 = fcmp olt <2 x float> %132, zeroinitializer, !dbg !45
  %134 = select <2 x i1> %133, <2 x float> zeroinitializer, <2 x float> %132, !dbg !49
  %135 = uitofp <2 x i1> %128 to <2 x float>, !dbg !50
  %136 = fmul <2 x float> %134, %135, !dbg !51
  %137 = fmul <2 x float> %94, %95, !dbg !51
  %shift = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %138 = fadd <2 x float> %136, %shift, !dbg !52
  %139 = fadd <2 x float> %137, %138, !dbg !52
  %shift5 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %140 = fadd <2 x float> %shift5, %139, !dbg !52
  %141 = extractelement <2 x float> %140, i64 0, !dbg !52
  %142 = bitcast float %141 to i32, !dbg !57
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !57
  %144 = bitcast i32 %143 to float, !dbg !57
  %145 = fadd float %141, %144, !dbg !52
  %146 = bitcast float %145 to i32, !dbg !57
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !57
  %148 = bitcast i32 %147 to float, !dbg !57
  %149 = fadd float %145, %148, !dbg !52
  %150 = bitcast float %149 to i32, !dbg !57
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !57
  %152 = bitcast i32 %151 to float, !dbg !57
  %153 = fadd float %149, %152, !dbg !52
  %154 = bitcast float %153 to i32, !dbg !57
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !57
  %156 = bitcast i32 %155 to float, !dbg !57
  %157 = fadd float %153, %156, !dbg !52
  %158 = bitcast float %157 to i32, !dbg !57
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !57
  %160 = bitcast i32 %159 to float, !dbg !57
  %161 = fadd float %157, %160, !dbg !52
  %162 = icmp eq i32 %6, 0, !dbg !57
  %163 = and i32 %7, 1, !dbg !57
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !57
  %165 = bitcast float %161 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 %162) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %166 = icmp slt i32 %5, 2, !dbg !57
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !57
  %168 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %167, i1 %166) #4, !dbg !57
  %169 = bitcast i32 %168 to float, !dbg !57
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !57
  %171 = bitcast i32 %170 to float, !dbg !57
  %172 = fadd float %169, %171, !dbg !52
  %173 = and i32 %5, 1, !dbg !57
  %174 = icmp eq i32 %173, 0, !dbg !57
  %175 = and i1 %166, %174, !dbg !57
  %176 = bitcast float %172 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %176, i1 %175) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %177 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !57
  %178 = fadd float %177, 0.000000e+00, !dbg !58
  %179 = shufflevector <2 x float> %136, <2 x float> %137, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !60
  %180 = fcmp ogt <4 x float> %179, splat (float 0x3E45798EE0000000), !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %181 = bitcast <4 x i1> %180 to i4, !dbg !63
  %182 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %181), !dbg !63
  %183 = zext nneg i4 %182 to i64, !dbg !63
  %184 = zext nneg i4 %182 to i32, !dbg !61
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !61
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !61
  %187 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !61
  %188 = insertelement <2 x i32> %187, i32 %186, i64 1, !dbg !61
  %189 = bitcast <2 x i32> %188 to i64, !dbg !61
  %190 = add i64 %183, %189, !dbg !63
  %extelt.offset = lshr i64 %190, 32, !dbg !61
  %191 = trunc nuw i64 %extelt.offset to i32, !dbg !61
  %192 = trunc i64 %190 to i32, !dbg !61
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !61
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !61
  %195 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !61
  %196 = insertelement <2 x i32> %195, i32 %194, i64 1, !dbg !61
  %197 = bitcast <2 x i32> %196 to i64, !dbg !61
  %198 = add i64 %190, %197, !dbg !63
  %extelt.offset1 = lshr i64 %198, 32, !dbg !61
  %199 = trunc nuw i64 %extelt.offset1 to i32, !dbg !61
  %200 = trunc i64 %198 to i32, !dbg !61
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !61
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 4, i32 31), !dbg !61
  %203 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !61
  %204 = insertelement <2 x i32> %203, i32 %202, i64 1, !dbg !61
  %205 = bitcast <2 x i32> %204 to i64, !dbg !61
  %206 = add i64 %198, %205, !dbg !63
  %extelt.offset2 = lshr i64 %206, 32, !dbg !61
  %207 = trunc nuw i64 %extelt.offset2 to i32, !dbg !61
  %208 = trunc i64 %206 to i32, !dbg !61
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !61
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !61
  %211 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !61
  %212 = insertelement <2 x i32> %211, i32 %210, i64 1, !dbg !61
  %213 = bitcast <2 x i32> %212 to i64, !dbg !61
  %214 = add i64 %206, %213, !dbg !63
  %extelt.offset3 = lshr i64 %214, 32, !dbg !61
  %215 = trunc nuw i64 %extelt.offset3 to i32, !dbg !61
  %216 = trunc i64 %214 to i32, !dbg !61
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !61
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !61
  %219 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !61
  %220 = insertelement <2 x i32> %219, i32 %218, i64 1, !dbg !61
  %221 = bitcast <2 x i32> %220 to i64, !dbg !61
  %222 = add i64 %214, %221, !dbg !63
  %223 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %163, !dbg !61
  %224 = insertelement <1 x i64> poison, i64 %222, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %223, <1 x i64> %224, i1 %162) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %225 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %5, !dbg !61
  %226 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %225, i1 %166) #4, !dbg !61
  %extelt.offset4 = lshr i64 %226, 32, !dbg !61
  %227 = trunc nuw i64 %extelt.offset4 to i32, !dbg !61
  %228 = trunc i64 %226 to i32, !dbg !61
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !61
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !61
  %231 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !61
  %232 = insertelement <2 x i32> %231, i32 %230, i64 1, !dbg !61
  %233 = bitcast <2 x i32> %232 to i64, !dbg !61
  %234 = add i64 %226, %233, !dbg !63
  %235 = insertelement <1 x i64> poison, i64 %234, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %225, <1 x i64> %235, i1 %175) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %236 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %237 = sitofp i64 %236 to float, !dbg !64
  %238 = fadd float %237, 0x3E45798EE0000000, !dbg !65
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %238) #4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %urem = and i32 %5, 63, !dbg !68
  %240 = icmp eq i32 %urem, 0, !dbg !68
  %241 = bitcast float %239 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %0, i1 %240) #4, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py", directory: "inductor_cache/34")
!4 = !{ptr @triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1", linkageName: "triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 33, column: 19, scope: !7)
!12 = !DILocation(line: 36, column: 26, scope: !7)
!13 = !DILocation(line: 38, column: 31, scope: !7)
!14 = !DILocation(line: 39, column: 31, scope: !7)
!15 = !DILocation(line: 40, column: 31, scope: !7)
!16 = !DILocation(line: 37, column: 38, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 37, column: 31, scope: !7)
!19 = !DILocation(line: 37, column: 43, scope: !7)
!20 = !DILocation(line: 38, column: 43, scope: !7)
!21 = !DILocation(line: 39, column: 36, scope: !7)
!22 = !DILocation(line: 40, column: 36, scope: !7)
!23 = !DILocation(line: 41, column: 31, scope: !7)
!24 = !DILocation(line: 41, column: 43, scope: !7)
!25 = !DILocation(line: 44, column: 19, scope: !7)
!26 = !DILocation(line: 51, column: 19, scope: !7)
!27 = !DILocation(line: 56, column: 20, scope: !7)
!28 = !DILocation(line: 60, column: 20, scope: !7)
!29 = !DILocation(line: 61, column: 21, scope: !7)
!30 = !DILocation(line: 62, column: 21, scope: !7)
!31 = !DILocation(line: 64, column: 20, scope: !7)
!32 = !DILocation(line: 65, column: 20, scope: !7)
!33 = !DILocation(line: 67, column: 21, scope: !7)
!34 = !DILocation(line: 69, column: 21, scope: !7)
!35 = !DILocation(line: 71, column: 20, scope: !7)
!36 = !DILocation(line: 72, column: 20, scope: !7)
!37 = !DILocation(line: 73, column: 21, scope: !7)
!38 = !DILocation(line: 74, column: 21, scope: !7)
!39 = !DILocation(line: 76, column: 20, scope: !7)
!40 = !DILocation(line: 77, column: 20, scope: !7)
!41 = !DILocation(line: 78, column: 20, scope: !7)
!42 = !DILocation(line: 79, column: 19, scope: !7)
!43 = !DILocation(line: 81, column: 20, scope: !7)
!44 = !DILocation(line: 83, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 85, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 86, column: 21, scope: !7)
!51 = !DILocation(line: 87, column: 20, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !56)
!53 = distinct !DILexicalBlockFile(scope: !55, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!55 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!56 = !DILocation(line: 89, column: 59, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 73, column: 15, scope: !46, inlinedAt: !59)
!59 = !DILocation(line: 89, column: 45, scope: !7)
!60 = !DILocation(line: 91, column: 20, scope: !7)
!61 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 94, column: 59, scope: !7)
!63 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !62)
!64 = !DILocation(line: 95, column: 21, scope: !7)
!65 = !DILocation(line: 96, column: 20, scope: !7)
!66 = !DILocation(line: 97, column: 20, scope: !7)
!67 = !DILocation(line: 98, column: 4, scope: !7)
!68 = !DILocation(line: 99, column: 63, scope: !7)
!69 = !DILocation(line: 99, column: 4, scope: !7)
