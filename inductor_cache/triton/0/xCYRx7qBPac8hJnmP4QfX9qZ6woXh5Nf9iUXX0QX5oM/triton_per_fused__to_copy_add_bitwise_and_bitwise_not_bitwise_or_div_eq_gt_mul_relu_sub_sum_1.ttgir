#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":19:0)
#loc1 = loc(unknown)
#loc66 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":89:59)
#loc72 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":94:59)
#loc83 = loc(callsite(#loc1 at #loc66))
#loc87 = loc(callsite(#loc1 at #loc72))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_add_bitwise_and_bitwise_not_bitwise_or_div_eq_gt_mul_relu_sub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3.000000e-01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999993E-9> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_6 = arith.constant 9.99999993E-9 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = arith.divsi %0, %cst_7 : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.remsi %1, %cst_8 : tensor<256xi32, #blocked> loc(#loc4)
    %3 = arith.divsi %0, %cst_8 : tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.remsi %3, %cst_8 : tensor<256xi32, #blocked> loc(#loc6)
    %5 = arith.remsi %0, %cst_8 : tensor<256xi32, #blocked> loc(#loc7)
    %6 = arith.divsi %0, %cst_9 : tensor<256xi32, #blocked> loc(#loc8)
    %7 = arith.remsi %0, %cst_7 : tensor<256xi32, #blocked> loc(#loc9)
    %8 = arith.remsi %3, %cst_7 : tensor<256xi32, #blocked> loc(#loc10)
    %9 = arith.muli %2, %cst_8 : tensor<256xi32, #blocked> loc(#loc11)
    %10 = arith.addi %5, %9 : tensor<256xi32, #blocked> loc(#loc12)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %12 = tt.addptr %11, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc13)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %14 = arith.muli %6, %cst_8 : tensor<256xi32, #blocked> loc(#loc15)
    %15 = arith.addi %5, %14 : tensor<256xi32, #blocked> loc(#loc16)
    %16 = tt.addptr %11, %15 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc17)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %18 = tt.addptr %11, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc19)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %21 = tt.addptr %20, %8 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc21)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %23 = tt.addptr %20, %10 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc23)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %25 = arith.cmpi eq, %2, %4 : tensor<256xi32, #blocked> loc(#loc25)
    %26 = arith.select %25, %cst, %cst_0 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc26)
    %27 = arith.cmpf une, %26, %cst_0 : tensor<256xf32, #blocked> loc(#loc27)
    %28 = arith.extui %27 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc28)
    %29 = arith.cmpi eq, %28, %cst_1 : tensor<256xi32, #blocked> loc(#loc28)
    %30 = arith.cmpi eq, %2, %5 : tensor<256xi32, #blocked> loc(#loc29)
    %31 = arith.select %30, %cst, %cst_0 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc30)
    %32 = arith.cmpf une, %31, %cst_0 : tensor<256xf32, #blocked> loc(#loc31)
    %33 = arith.extui %32 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc32)
    %34 = arith.cmpi eq, %33, %cst_1 : tensor<256xi32, #blocked> loc(#loc32)
    %35 = arith.andi %29, %34 : tensor<256xi1, #blocked> loc(#loc33)
    %36 = arith.cmpi eq, %4, %5 : tensor<256xi32, #blocked> loc(#loc34)
    %37 = arith.select %36, %cst, %cst_0 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc35)
    %38 = arith.cmpf une, %37, %cst_0 : tensor<256xf32, #blocked> loc(#loc36)
    %39 = arith.extui %38 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc37)
    %40 = arith.cmpi eq, %39, %cst_1 : tensor<256xi32, #blocked> loc(#loc37)
    %41 = arith.andi %35, %40 : tensor<256xi1, #blocked> loc(#loc38)
    %42 = arith.cmpf oeq, %13, %17 : tensor<256xf32, #blocked> loc(#loc39)
    %43 = arith.cmpf oeq, %19, %17 : tensor<256xf32, #blocked> loc(#loc40)
    %44 = arith.extui %43 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc41)
    %45 = arith.cmpi eq, %44, %cst_1 : tensor<256xi32, #blocked> loc(#loc41)
    %46 = arith.andi %42, %45 : tensor<256xi1, #blocked> loc(#loc42)
    %47 = arith.andi %41, %46 : tensor<256xi1, #blocked> loc(#loc43)
    %48 = arith.cmpf oge, %17, %cst_2 : tensor<256xf32, #blocked> loc(#loc44)
    %49 = arith.extui %48 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc45)
    %50 = arith.cmpi eq, %49, %cst_1 : tensor<256xi32, #blocked> loc(#loc45)
    %51 = arith.cmpf oge, %13, %cst_2 : tensor<256xf32, #blocked> loc(#loc46)
    %52 = arith.extui %51 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc47)
    %53 = arith.cmpi eq, %52, %cst_1 : tensor<256xi32, #blocked> loc(#loc47)
    %54 = arith.andi %50, %53 : tensor<256xi1, #blocked> loc(#loc48)
    %55 = arith.addf %17, %cst_2 : tensor<256xf32, #blocked> loc(#loc49)
    %56 = arith.cmpf oeq, %55, %19 : tensor<256xf32, #blocked> loc(#loc50)
    %57 = arith.cmpf oge, %19, %cst_2 : tensor<256xf32, #blocked> loc(#loc51)
    %58 = arith.extui %57 : tensor<256xi1, #blocked> to tensor<256xi32, #blocked> loc(#loc52)
    %59 = arith.cmpi eq, %58, %cst_1 : tensor<256xi32, #blocked> loc(#loc52)
    %60 = arith.ori %56, %59 : tensor<256xi1, #blocked> loc(#loc53)
    %61 = arith.andi %54, %60 : tensor<256xi1, #blocked> loc(#loc54)
    %62 = arith.andi %47, %61 : tensor<256xi1, #blocked> loc(#loc55)
    %63 = arith.subf %cst, %22 : tensor<256xf32, #blocked> loc(#loc56)
    %64 = arith.subf %cst, %24 : tensor<256xf32, #blocked> loc(#loc57)
    %65 = arith.subf %63, %64 : tensor<256xf32, #blocked> loc(#loc58)
    %66 = arith.addf %65, %cst_3 : tensor<256xf32, #blocked> loc(#loc59)
    %67 = arith.cmpf ogt, %cst_0, %66 : tensor<256xf32, #blocked> loc(#loc80)
    %68 = arith.select %67, %cst_0, %66 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc81)
    %69 = arith.uitofp %62 : tensor<256xi1, #blocked> to tensor<256xf32, #blocked> loc(#loc63)
    %70 = arith.mulf %68, %69 : tensor<256xf32, #blocked> loc(#loc64)
    %71 = "tt.reduce"(%70) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc66)), %arg5: f32 loc(callsite(#loc1 at #loc66))):
      %82 = arith.addf %arg4, %arg5 : f32 loc(#loc88)
      tt.reduce.return %82 : f32 loc(#loc82)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc82)
    %72 = arith.addf %71, %cst_5 : f32 loc(#loc85)
    %73 = arith.cmpf ogt, %70, %cst_4 : tensor<256xf32, #blocked> loc(#loc70)
    %74 = arith.extui %73 : tensor<256xi1, #blocked> to tensor<256xi64, #blocked> loc(#loc71)
    %75 = "tt.reduce"(%74) <{axis = 0 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc72)), %arg5: i64 loc(callsite(#loc1 at #loc72))):
      %82 = arith.addi %arg4, %arg5 : i64 loc(#loc89)
      tt.reduce.return %82 : i64 loc(#loc86)
    }) : (tensor<256xi64, #blocked>) -> i64 loc(#loc86)
    %76 = arith.sitofp %75 : i64 to f32 loc(#loc73)
    %77 = arith.addf %76, %cst_6 : f32 loc(#loc74)
    %78 = arith.divf %72, %77 : f32 loc(#loc75)
    %79 = tt.splat %78 : f32 -> tensor<1xf32, #blocked1> loc(#loc75)
    gpu.barrier loc(#loc76)
    %80 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc77)
    %81 = tt.splat %80 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc77)
    tt.store %81, %79 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc78)
    tt.return loc(#loc79)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":27:26)
#loc3 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":30:21)
#loc4 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":30:27)
#loc5 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":31:21)
#loc6 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":31:26)
#loc7 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":32:19)
#loc8 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":33:19)
#loc9 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":34:19)
#loc10 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":36:26)
#loc11 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":37:38)
#loc12 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":37:36)
#loc13 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":37:31)
#loc14 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":37:43)
#loc15 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":38:38)
#loc16 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":38:36)
#loc17 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":38:31)
#loc18 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":38:43)
#loc19 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":39:31)
#loc20 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":39:36)
#loc21 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":40:31)
#loc22 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":40:36)
#loc23 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":41:31)
#loc24 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":41:43)
#loc25 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":44:19)
#loc26 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":47:32)
#loc27 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":48:20)
#loc28 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":49:19)
#loc29 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":51:19)
#loc30 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":52:33)
#loc31 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":53:22)
#loc32 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":54:21)
#loc33 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":55:19)
#loc34 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":56:20)
#loc35 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":57:34)
#loc36 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":58:22)
#loc37 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":59:21)
#loc38 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":60:20)
#loc39 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":61:21)
#loc40 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":62:21)
#loc41 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":63:21)
#loc42 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":64:20)
#loc43 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":65:20)
#loc44 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":67:21)
#loc45 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":68:21)
#loc46 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":69:21)
#loc47 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":70:21)
#loc48 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":71:20)
#loc49 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":72:20)
#loc50 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":73:21)
#loc51 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":74:21)
#loc52 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":75:21)
#loc53 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":76:20)
#loc54 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":77:20)
#loc55 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":78:20)
#loc56 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":79:19)
#loc57 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":80:19)
#loc58 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":81:20)
#loc59 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":83:20)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc61 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":85:42)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc63 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":86:21)
#loc64 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":87:20)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc69 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":89:45)
#loc70 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":91:20)
#loc71 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":92:21)
#loc73 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":95:21)
#loc74 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":96:20)
#loc75 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":97:20)
#loc76 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":98:4)
#loc77 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":99:28)
#loc78 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":99:63)
#loc79 = loc("inductor_cache/34/c34vuv7mfuvsyntfjq2tmhuoupad5zofrt6vlkmsbxojxasnr5u7.py":99:4)
#loc80 = loc(callsite(#loc60 at #loc61))
#loc81 = loc(callsite(#loc62 at #loc61))
#loc82 = loc(callsite(#loc65 at #loc66))
#loc84 = loc(callsite(#loc67 at #loc65))
#loc85 = loc(callsite(#loc68 at #loc69))
#loc86 = loc(callsite(#loc65 at #loc72))
#loc88 = loc(callsite(#loc84 at #loc66))
#loc89 = loc(callsite(#loc84 at #loc72))
