; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 1, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = and i32 %12, 32, !dbg !12
  %16 = lshr exact i32 %15, 1, !dbg !12
  %17 = and i32 %12, 64, !dbg !12
  %18 = lshr exact i32 %17, 1, !dbg !12
  %19 = and i32 %12, 1, !dbg !12
  %20 = shl nuw nsw i32 %19, 1, !dbg !12
  %21 = shl i32 %12, 1, !dbg !12
  %22 = and i32 %21, 62, !dbg !12
  %23 = or disjoint i32 %16, %14, !dbg !12
  %24 = or disjoint i32 %23, %18, !dbg !12
  %25 = or disjoint i32 %24, %11, !dbg !13
  %26 = or disjoint i32 %11, %22, !dbg !13
  %27 = icmp slt i32 %25, 64, !dbg !14
  %28 = icmp slt i32 %26, 64, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 2, !dbg !16
  %.lobit1 = lshr exact i32 %15, 5, !dbg !17
  %31 = lshr exact i32 %17, 5, !dbg !17
  %32 = or disjoint i32 %.lobit1, %31, !dbg !17
  %33 = or disjoint i32 %30, %20, !dbg !18
  %34 = or disjoint i32 %32, %30, !dbg !18
  %35 = icmp slt i32 %33, 16, !dbg !19
  %36 = icmp slt i32 %34, 16, !dbg !19
  %.frozen = freeze i32 %26, !dbg !20
  %37 = sdiv i32 %.frozen, 16, !dbg !20
  %38 = mul i32 %37, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = shl i32 %25, 4, !dbg !22
  %40 = add i32 %33, %39, !dbg !23
  %41 = sext i32 %40 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = and i1 %27, %35, !dbg !25
  %44 = and i1 %28, %36, !dbg !25
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %43) #4, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #4, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #4, !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #4, !dbg !30
  %51 = shl i32 %34, 4, !dbg !31
  %52 = add i32 %51, %.decomposed, !dbg !32
  %53 = shl i32 %37, 8, !dbg !33
  %54 = add i32 %52, %53, !dbg !34
  %55 = sext i32 %54 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %44) #4, !dbg !36
  %58 = fadd float %48, 0x3EE4F8B580000000, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %59, 0, !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %60, 0, !dbg !38
  br i1 %.not.i, label %66, label %61, !dbg !38

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !38

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !38
  %71 = extractvalue { i32, i32 } %45, 1, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = bitcast i32 %46 to float, !dbg !27
  %74 = fsub float %72, %73, !dbg !39
  %75 = extractvalue { i32, i32 } %45, 0, !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = fsub float %76, %73, !dbg !39
  %78 = extractvalue { i32, i32 } %57, 1, !dbg !36
  %79 = bitcast i32 %78 to float, !dbg !36
  %80 = extractvalue { i32, i32 } %57, 0, !dbg !36
  %81 = bitcast i32 %80 to float, !dbg !36
  %82 = bitcast i32 %50 to float, !dbg !30
  %83 = bitcast i32 %49 to float, !dbg !29
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %85 = fmul float %77, %84, !dbg !41
  %86 = fmul float %74, %84, !dbg !41
  %87 = fmul float %85, %83, !dbg !42
  %88 = fmul float %86, %83, !dbg !42
  %89 = fadd float %87, %82, !dbg !43
  %90 = fadd float %88, %82, !dbg !43
  %91 = shl nuw nsw i32 %19, 7, !dbg !43
  %92 = or disjoint i32 %91, %14, !dbg !43
  %93 = or disjoint i32 %92, %16, !dbg !43
  %94 = or disjoint i32 %93, %18, !dbg !43
  %95 = and i32 %21, 254, !dbg !43
  %.idx = shl nuw nsw i32 %19, 4, !dbg !43
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !43
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !43
  %98 = bitcast float %89 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !43
  %99 = or disjoint i32 %94, 64, !dbg !43
  %100 = lshr i32 %99, 5, !dbg !43
  %101 = and i32 %100, 134217726, !dbg !43
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !43
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !43
  %104 = bitcast float %90 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %105 = lshr i32 %21, 5, !dbg !43
  %106 = and i32 %105, 6, !dbg !43
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !43
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %95, !dbg !43
  %109 = load float, ptr addrspace(3) %108, align 8, !dbg !43
  %110 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 4, !dbg !43
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !43
  %112 = fsub float %81, %73, !dbg !44
  %113 = fsub float %79, %73, !dbg !44
  %114 = fmul float %112, %84, !dbg !45
  %115 = fmul float %113, %84, !dbg !45
  %116 = fmul float %114, %83, !dbg !46
  %117 = fmul float %115, %83, !dbg !46
  %118 = fadd float %116, %82, !dbg !47
  %119 = fadd float %117, %82, !dbg !47
  %120 = fadd float %118, %109, !dbg !48
  %121 = fadd float %119, %111, !dbg !48
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %123 = shl i32 %12, 3, !dbg !50
  %124 = and i32 %123, 248, !dbg !50
  %125 = or disjoint i32 %124, %.lobit1, !dbg !50
  %126 = or disjoint i32 %125, %31, !dbg !50
  %127 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !50
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %126, !dbg !50
  %129 = bitcast float %120 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !50
  %130 = or disjoint i32 %126, 4, !dbg !50
  %131 = lshr i32 %130, 2, !dbg !50
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !50
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %130, !dbg !50
  %134 = bitcast float %121 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %135 = lshr i32 %95, 2, !dbg !50
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !50
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %95, !dbg !50
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !50
  %139 = or disjoint i32 %95, 1, !dbg !50
  %140 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %139, !dbg !50
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %141, ptr addrspace(1) %122, i1 %43) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdtli7kggothntk2ytjn77zsyeyfz2rwbazvudzvsofqezaum7et.py", directory: "inductor_cache/dt")
!4 = !{ptr @triton_poi_fused_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_6", linkageName: "triton_poi_fused_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 19, scope: !7)
!28 = !DILocation(line: 35, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 20, scope: !7)
!30 = !DILocation(line: 39, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 36, scope: !7)
!33 = !DILocation(line: 41, column: 48, scope: !7)
!34 = !DILocation(line: 41, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 53, scope: !7)
!37 = !DILocation(line: 44, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 19, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 25, scope: !7)
!50 = !DILocation(line: 58, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
