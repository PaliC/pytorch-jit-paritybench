; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 256, !dbg !14
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = sdiv i32 %12, 4, !dbg !15
  %19 = add i32 %12, -6, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %23 = insertelement <2 x i32> %22, i32 %18, i64 1, !dbg !18
  %24 = srem <2 x i32> %23, splat (i32 4), !dbg !18
  %25 = extractelement <2 x i32> %24, i64 1, !dbg !19
  %26 = icmp sgt i32 %25, 1, !dbg !19
  %27 = extractelement <2 x i32> %24, i64 0, !dbg !20
  %28 = add nsw i32 %27, 2, !dbg !20
  %29 = icmp ult i32 %28, 4, !dbg !20
  %30 = and i1 %26, %29, !dbg !20
  %31 = and i1 %15, %30, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %31, i32 -971227136, i1 %31, i32 -971227136, i1 %31) #2, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = icmp sgt <2 x i32> %24, <i32 1, i32 0>, !dbg !23
  %shift = shufflevector <2 x i1> %35, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %36 = and <2 x i1> %35, %shift, !dbg !24
  %37 = extractelement <2 x i1> %36, i64 0, !dbg !24
  %38 = and i1 %15, %37, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %38, i32 -971227136, i1 %38, i32 -971227136, i1 %38) #2, !dbg !26
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %42 = mul i32 %13, 25, !dbg !27
  %43 = mul i32 %14, 25, !dbg !27
  %44 = sext i32 %42 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !28
  %46 = sext i32 %43 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !28
  %48 = zext nneg i32 %9 to i64, !dbg !29
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48, !dbg !29
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %49, i32 %33, i32 %34, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %50 = zext nneg i32 %10 to i64, !dbg !29
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50, !dbg !29
  %52 = load i32, ptr addrspace(3) %51, align 4, !dbg !29
  %53 = zext nneg i32 %11 to i64, !dbg !29
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !29
  %55 = load i32, ptr addrspace(3) %54, align 4, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %52, ptr addrspace(1) %45, i1 %16) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %55, ptr addrspace(1) %47, i1 %17) #2, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %49, i32 %40, i32 %41, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %58 = load i32, ptr addrspace(3) %51, align 4, !dbg !31
  %59 = load i32, ptr addrspace(3) %54, align 4, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %58, ptr addrspace(1) %56, i1 %16) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %59, ptr addrspace(1) %57, i1 %17) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmlmc5ircmkostmhqoeozhxyu7lqfzo2d4sd2tdjpdqsvc4dx34m.py", directory: "inductor_cache/ml")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 38, column: 38, scope: !7)
!17 = !DILocation(line: 38, column: 31, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 37, column: 19, scope: !7)
!21 = !DILocation(line: 38, column: 51, scope: !7)
!22 = !DILocation(line: 38, column: 43, scope: !7)
!23 = !DILocation(line: 43, column: 21, scope: !7)
!24 = !DILocation(line: 46, column: 20, scope: !7)
!25 = !DILocation(line: 48, column: 51, scope: !7)
!26 = !DILocation(line: 48, column: 43, scope: !7)
!27 = !DILocation(line: 49, column: 28, scope: !7)
!28 = !DILocation(line: 49, column: 25, scope: !7)
!29 = !DILocation(line: 49, column: 40, scope: !7)
!30 = !DILocation(line: 50, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 4, scope: !7)
