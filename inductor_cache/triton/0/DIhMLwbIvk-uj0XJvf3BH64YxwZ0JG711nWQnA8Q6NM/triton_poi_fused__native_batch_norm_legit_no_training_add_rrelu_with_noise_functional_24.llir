; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 1, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %.lobit = and i32 %14, 1, !dbg !12
  %15 = or disjoint i32 %12, %.lobit, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = icmp slt i32 %12, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %13, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = and i32 %13, 127, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = or disjoint i32 %19, %22, !dbg !18
  %25 = or disjoint i32 %24, 128, !dbg !18
  %26 = icmp slt i32 %23, 256, !dbg !19
  %27 = icmp slt i32 %24, 256, !dbg !19
  %28 = icmp slt i32 %25, 256, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %29 = sdiv i32 %.frozen, 64, !dbg !20
  %30 = mul i32 %29, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %15, 8, !dbg !22
  %32 = add i32 %23, %31, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %16, %26, !dbg !25
  %36 = and i1 %17, %27, !dbg !25
  %37 = and i1 %28, %17, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = shl i32 %13, 3, !dbg !26
  %44 = and i32 %43, 504, !dbg !26
  %45 = or disjoint i32 %44, %.lobit, !dbg !26
  %46 = shl i32 %13, 1, !dbg !26
  %47 = and i32 %46, 254, !dbg !26
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !26
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %45, !dbg !26
  %50 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !26
  %51 = or disjoint i32 %45, 2, !dbg !26
  %52 = or disjoint i32 %44, 2, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) %53, i32 %51, !dbg !26
  %55 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #4, !dbg !26
  %56 = or disjoint i32 %45, 4, !dbg !26
  %57 = or disjoint i32 %44, 4, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !26
  %59 = getelementptr inbounds float, ptr addrspace(3) %58, i32 %56, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !26
  %61 = or disjoint i32 %45, 6, !dbg !26
  %62 = or disjoint i32 %44, 6, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !26
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %61, !dbg !26
  %65 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %47, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %47, !dbg !26
  %68 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !26
  %69 = or disjoint i32 %47, 256, !dbg !26
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %69, !dbg !26
  %72 = load <2 x float>, ptr addrspace(3) %71, align 8, !dbg !26
  %73 = shl i32 %24, 6, !dbg !27
  %74 = shl i32 %25, 6, !dbg !27
  %75 = shl i32 %29, 14, !dbg !28
  %76 = add i32 %75, %.decomposed, !dbg !29
  %77 = add i32 %76, %73, !dbg !30
  %78 = add i32 %76, %74, !dbg !30
  %79 = sext i32 %77 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !31
  %81 = sext i32 %78 to i64, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !31
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %36) #4, !dbg !32
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %37) #4, !dbg !32
  %85 = sext i32 %.decomposed to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !33
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %17) #4, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !35
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 %17) #4, !dbg !36
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !36
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !36
  %92 = bitcast i32 %90 to float, !dbg !36
  %93 = bitcast i32 %91 to float, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !37
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %94, i1 %17) #4, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !39
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %96, i1 %17) #4, !dbg !40
  %98 = fadd float %92, 0x3EE4F8B580000000, !dbg !41
  %99 = fadd float %93, 0x3EE4F8B580000000, !dbg !41
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %100, 0, !dbg !42
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %101, 0, !dbg !42
  br i1 %.not.i, label %107, label %102, !dbg !42

102:                                              ; preds = %10
  br i1 %.not1.i, label %105, label %103, !dbg !42

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

107:                                              ; preds = %10
  br i1 %.not1.i, label %110, label %108, !dbg !42

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !42
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i5 = icmp eq i32 %112, 0, !dbg !42
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i8 = icmp eq i32 %113, 0, !dbg !42
  br i1 %.not.i5, label %119, label %114, !dbg !42

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %117, label %115, !dbg !42

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %122, label %120, !dbg !42

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

__nv_sqrtf.exit9:                                 ; preds = %115, %117, %120, %122
  %.0.i7 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !42
  %124 = extractvalue { i32, i32 } %84, 1, !dbg !32
  %125 = extractvalue { i32, i32 } %87, 1, !dbg !34
  %126 = extractvalue { i32, i32 } %84, 0, !dbg !32
  %127 = extractvalue { i32, i32 } %87, 0, !dbg !34
  %128 = extractvalue { i32, i32 } %83, 1, !dbg !32
  %129 = extractvalue { i32, i32 } %83, 0, !dbg !32
  %130 = extractvalue { i32, i32 } %97, 1, !dbg !40
  %131 = extractvalue { i32, i32 } %97, 0, !dbg !40
  %132 = extractvalue { i32, i32 } %95, 1, !dbg !38
  %133 = extractvalue { i32, i32 } %95, 0, !dbg !38
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !43
  %136 = getelementptr i1, ptr addrspace(1) %6, i64 %79, !dbg !44
  %137 = getelementptr i1, ptr addrspace(1) %6, i64 %81, !dbg !44
  %138 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !34
  %139 = insertelement <2 x i32> %138, i32 %125, i64 1, !dbg !34
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !34
  %141 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !32
  %142 = insertelement <2 x i32> %141, i32 %128, i64 1, !dbg !32
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !32
  %144 = fsub <2 x float> %143, %140, !dbg !45
  %145 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !40
  %146 = insertelement <2 x i32> %145, i32 %130, i64 1, !dbg !40
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !40
  %148 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !38
  %149 = insertelement <2 x i32> %148, i32 %132, i64 1, !dbg !38
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !38
  %151 = insertelement <2 x float> poison, float %134, i64 0, !dbg !46
  %152 = insertelement <2 x float> %151, float %135, i64 1, !dbg !46
  %153 = fmul <2 x float> %144, %152, !dbg !46
  %154 = fmul <2 x float> %153, %150, !dbg !47
  %155 = fadd <2 x float> %154, %147, !dbg !48
  %156 = fadd <2 x float> %68, %155, !dbg !49
  %157 = fcmp ogt <2 x float> %156, zeroinitializer, !dbg !50
  %158 = extractelement <2 x float> %156, i64 0, !dbg !51
  %159 = fmul float %158, 0x3FCD555560000000, !dbg !52
  %160 = extractelement <2 x float> %156, i64 1, !dbg !51
  %161 = fmul float %160, 0x3FCD555560000000, !dbg !52
  %162 = extractelement <2 x i1> %157, i64 0, !dbg !51
  %163 = select i1 %162, float %158, float %159, !dbg !51
  %164 = extractelement <2 x i1> %157, i64 1, !dbg !51
  %165 = select i1 %164, float %160, float %161, !dbg !51
  %166 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !32
  %167 = insertelement <2 x i32> %166, i32 %124, i64 1, !dbg !32
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !32
  %169 = fsub <2 x float> %168, %140, !dbg !45
  %170 = fmul <2 x float> %169, %152, !dbg !46
  %171 = fmul <2 x float> %170, %150, !dbg !47
  %172 = fadd <2 x float> %171, %147, !dbg !48
  %173 = fadd <2 x float> %72, %172, !dbg !49
  %174 = fcmp ogt <2 x float> %173, zeroinitializer, !dbg !50
  %175 = extractelement <2 x float> %173, i64 0, !dbg !51
  %176 = fmul float %175, 0x3FCD555560000000, !dbg !52
  %177 = extractelement <2 x float> %173, i64 1, !dbg !51
  %178 = fmul float %177, 0x3FCD555560000000, !dbg !52
  %179 = extractelement <2 x i1> %174, i64 0, !dbg !51
  %180 = select i1 %179, float %175, float %176, !dbg !51
  %181 = extractelement <2 x i1> %174, i64 1, !dbg !51
  %182 = select i1 %181, float %177, float %178, !dbg !51
  %183 = zext <2 x i1> %157 to <2 x i8>, !dbg !53
  %184 = bitcast <2 x i8> %183 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %184, ptr addrspace(1) %136, i1 %36) #4, !dbg !53
  %185 = zext <2 x i1> %174 to <2 x i8>, !dbg !53
  %186 = bitcast <2 x i8> %185 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %186, ptr addrspace(1) %137, i1 %37) #4, !dbg !53
  %187 = getelementptr float, ptr addrspace(1) %7, i64 %79, !dbg !54
  %188 = getelementptr float, ptr addrspace(1) %7, i64 %81, !dbg !54
  %189 = bitcast float %163 to i32, !dbg !55
  %190 = bitcast float %165 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %189, i32 %190, ptr addrspace(1) %187, i1 %36) #4, !dbg !55
  %191 = bitcast float %180 to i32, !dbg !55
  %192 = bitcast float %182 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %191, i32 %192, ptr addrspace(1) %188, i1 %37) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4huljedcbbnwcyftnr7a5vqbtraeeg5nqflqc6jyzr5emvn3gt.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 49, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 54, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 55, column: 25, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 56, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
