; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_abs_add_maximum_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = srem i32 %10, 4, !dbg !13
  %15 = shl i32 %10, 4, !dbg !14
  %16 = or disjoint i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = sext i32 %14 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #5, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #5, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #5, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #5, !dbg !25
  %35 = fmul float %20, %20, !dbg !26
  %36 = fmul float %22, %22, !dbg !26
  %37 = select i1 %11, float %35, float 0.000000e+00, !dbg !27
  %38 = select i1 %11, float %36, float 0.000000e+00, !dbg !27
  %39 = bitcast float %37 to i32, !dbg !28
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = fadd float %37, %41, !dbg !32
  %43 = bitcast float %42 to i32, !dbg !28
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = fadd float %42, %45, !dbg !32
  %47 = bitcast float %46 to i32, !dbg !28
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = fadd float %46, %49, !dbg !32
  %51 = bitcast float %50 to i32, !dbg !28
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = fadd float %50, %53, !dbg !32
  %55 = bitcast float %38 to i32, !dbg !28
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = fadd float %38, %57, !dbg !32
  %59 = bitcast float %58 to i32, !dbg !28
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !28
  %61 = bitcast i32 %60 to float, !dbg !28
  %62 = fadd float %58, %61, !dbg !32
  %63 = bitcast float %62 to i32, !dbg !28
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = fadd float %62, %65, !dbg !32
  %67 = bitcast float %66 to i32, !dbg !28
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %66, %69, !dbg !32
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.600000e+01) #5, !dbg !34
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.600000e+01) #5, !dbg !34
  %73 = tail call float @llvm.fabs.f32(float %26), !dbg !35
  %74 = tail call float @llvm.fabs.f32(float %28), !dbg !35
  %75 = fadd float %73, %71, !dbg !36
  %76 = fadd float %74, %72, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %77, 0, !dbg !37
  br i1 %.not.i, label %80, label %78, !dbg !37

78:                                               ; preds = %9
  %79 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %75), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

80:                                               ; preds = %9
  %81 = tail call float @llvm.nvvm.rsqrt.approx.f(float %75), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %78, %80
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i1 = icmp eq i32 %82, 0, !dbg !37
  br i1 %.not.i1, label %85, label %83, !dbg !37

83:                                               ; preds = %__nv_rsqrtf.exit
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %76), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

85:                                               ; preds = %__nv_rsqrtf.exit
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %76), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

__nv_rsqrtf.exit3:                                ; preds = %83, %85
  %.0.i2 = phi float [ %84, %83 ], [ %86, %85 ], !dbg !37
  %87 = bitcast i32 %34 to float, !dbg !25
  %88 = bitcast i32 %32 to float, !dbg !23
  %89 = bitcast i32 %30 to float, !dbg !21
  %90 = fmul float %.0.i, %20, !dbg !38
  %91 = fmul float %90, %89, !dbg !39
  %92 = fadd float %91, %88, !dbg !40
  %93 = fcmp ogt float %92, %87, !dbg !41
  %94 = fcmp uno float %92, 0.000000e+00, !dbg !45
  %95 = or i1 %93, %94, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %96 = sext i32 %10 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !48
  %urem = and i32 %12, 63, !dbg !49
  %98 = icmp eq i32 %urem, 0, !dbg !49
  %99 = bitcast float %.0.i2 to i32, !dbg !49
  %100 = and i1 %98, %11, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %97, i1 %100) #5, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !50
  %102 = and i32 %12, 48, !dbg !51
  %103 = icmp eq i32 %102, 0, !dbg !51
  %104 = bitcast float %92 to i32, !dbg !51
  %105 = select i1 %95, i32 %104, i32 %34, !dbg !52
  %106 = and i1 %103, %11, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %101, i1 %106) #5, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citqu52g5xcodehbtkicindzj5qdrjehfijiwha44y3g7i3qtsto.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_per_fused_abs_add_maximum_mean_mul_pow_rsqrt_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_maximum_mean_mul_pow_rsqrt_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_maximum_mean_mul_pow_rsqrt_0", linkageName: "triton_per_fused_abs_add_maximum_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 40, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 23, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 28, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 50, column: 4, scope: !7)
!48 = !DILocation(line: 51, column: 28, scope: !7)
!49 = !DILocation(line: 51, column: 40, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 45, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!53 = !DILocation(line: 52, column: 4, scope: !7)
