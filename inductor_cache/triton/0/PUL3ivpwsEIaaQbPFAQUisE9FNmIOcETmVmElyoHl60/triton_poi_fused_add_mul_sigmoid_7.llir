; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = or disjoint i32 %11, 128, !dbg !12
  %14 = or disjoint i32 %11, 192, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = and i32 %15, 252, !dbg !12
  %18 = and i32 %9, 255, !dbg !12
  %19 = or disjoint i32 %8, %11, !dbg !13
  %20 = or disjoint i32 %8, %12, !dbg !13
  %21 = or disjoint i32 %8, %13, !dbg !13
  %22 = or disjoint i32 %8, %14, !dbg !13
  %23 = or disjoint i32 %8, %17, !dbg !13
  %24 = or disjoint i32 %8, %18, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %26 = shl i32 %25, 4, !dbg !15
  %.lobit23 = lshr i32 %9, 6, !dbg !16
  %27 = and i32 %.lobit23, 3, !dbg !16
  %28 = or disjoint i32 %26, %16, !dbg !17
  %29 = or disjoint i32 %26, %27, !dbg !17
  %30 = or disjoint i32 %29, 4, !dbg !17
  %31 = or disjoint i32 %29, 8, !dbg !17
  %32 = or disjoint i32 %29, 12, !dbg !17
  %33 = icmp slt i32 %28, 512, !dbg !18
  %34 = icmp slt i32 %29, 512, !dbg !18
  %35 = icmp slt i32 %30, 512, !dbg !18
  %36 = icmp slt i32 %31, 512, !dbg !18
  %37 = icmp slt i32 %32, 512, !dbg !18
  %38 = sdiv i32 %19, 4096, !dbg !19
  %39 = sdiv i32 %20, 4096, !dbg !19
  %40 = sdiv i32 %21, 4096, !dbg !19
  %41 = sdiv i32 %22, 4096, !dbg !19
  %.frozen = freeze i32 %23, !dbg !19
  %42 = sdiv i32 %.frozen, 4096, !dbg !19
  %43 = mul i32 %42, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %43, !dbg !20
  %44 = sext i32 %24 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = shl i32 %19, 9, !dbg !23
  %49 = shl i32 %20, 9, !dbg !23
  %50 = shl i32 %21, 9, !dbg !23
  %51 = shl i32 %22, 9, !dbg !23
  %52 = add i32 %28, %48, !dbg !24
  %53 = add i32 %28, %49, !dbg !24
  %54 = add i32 %28, %50, !dbg !24
  %55 = add i32 %28, %51, !dbg !24
  %56 = sext i32 %52 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !25
  %58 = sext i32 %53 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !25
  %60 = sext i32 %54 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %33) #2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %33) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %33) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %33) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = shl nsw i32 %38, 9, !dbg !27
  %101 = shl nsw i32 %39, 9, !dbg !27
  %102 = shl nsw i32 %40, 9, !dbg !27
  %103 = shl nsw i32 %41, 9, !dbg !27
  %104 = add i32 %100, %28, !dbg !28
  %105 = add i32 %101, %28, !dbg !28
  %106 = add i32 %102, %28, !dbg !28
  %107 = add i32 %103, %28, !dbg !28
  %108 = sext i32 %104 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !29
  %110 = sext i32 %105 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !29
  %112 = sext i32 %106 to i64, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !29
  %114 = sext i32 %107 to i64, !dbg !29
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !29
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %33) #2, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !30
  %121 = bitcast i32 %117 to float, !dbg !30
  %122 = bitcast i32 %118 to float, !dbg !30
  %123 = bitcast i32 %119 to float, !dbg !30
  %124 = bitcast i32 %120 to float, !dbg !30
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %33) #2, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !30
  %130 = bitcast i32 %126 to float, !dbg !30
  %131 = bitcast i32 %127 to float, !dbg !30
  %132 = bitcast i32 %128 to float, !dbg !30
  %133 = bitcast i32 %129 to float, !dbg !30
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %33) #2, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !30
  %139 = bitcast i32 %135 to float, !dbg !30
  %140 = bitcast i32 %136 to float, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = bitcast i32 %138 to float, !dbg !30
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %33) #2, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = bitcast i32 %147 to float, !dbg !30
  %152 = fsub float 0.000000e+00, %47, !dbg !31
  %153 = fmul float %152, 0x3FF7154760000000, !dbg !35
  %154 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %153) #2, !dbg !35
  %155 = fadd float %154, 1.000000e+00, !dbg !36
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %155) #2, !dbg !37
  %.idx = shl nuw nsw i32 %18, 3, !dbg !38
  %157 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %158 = bitcast float %156 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx4 = shl nuw nsw i32 %11, 3, !dbg !38
  %159 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !38
  %160 = load float, ptr addrspace(3) %159, align 8, !dbg !38
  %.idx5 = shl nuw nsw i32 %12, 3, !dbg !38
  %161 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !38
  %162 = load float, ptr addrspace(3) %161, align 8, !dbg !38
  %.idx6 = shl nuw nsw i32 %13, 3, !dbg !38
  %163 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !38
  %164 = load float, ptr addrspace(3) %163, align 8, !dbg !38
  %.idx7 = shl nuw nsw i32 %14, 3, !dbg !38
  %165 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !38
  %166 = load float, ptr addrspace(3) %165, align 8, !dbg !38
  %167 = fmul float %160, %69, !dbg !38
  %168 = fmul float %160, %70, !dbg !38
  %169 = fmul float %160, %71, !dbg !38
  %170 = fmul float %160, %72, !dbg !38
  %171 = fmul float %162, %78, !dbg !38
  %172 = fmul float %162, %79, !dbg !38
  %173 = fmul float %162, %80, !dbg !38
  %174 = fmul float %162, %81, !dbg !38
  %175 = fmul float %164, %87, !dbg !38
  %176 = fmul float %164, %88, !dbg !38
  %177 = fmul float %164, %89, !dbg !38
  %178 = fmul float %164, %90, !dbg !38
  %179 = fmul float %166, %96, !dbg !38
  %180 = fmul float %166, %97, !dbg !38
  %181 = fmul float %166, %98, !dbg !38
  %182 = fmul float %166, %99, !dbg !38
  %183 = fmul float %69, %121, !dbg !39
  %184 = fmul float %70, %122, !dbg !39
  %185 = fmul float %71, %123, !dbg !39
  %186 = fmul float %72, %124, !dbg !39
  %187 = fmul float %78, %130, !dbg !39
  %188 = fmul float %79, %131, !dbg !39
  %189 = fmul float %80, %132, !dbg !39
  %190 = fmul float %81, %133, !dbg !39
  %191 = fmul float %87, %139, !dbg !39
  %192 = fmul float %88, %140, !dbg !39
  %193 = fmul float %89, %141, !dbg !39
  %194 = fmul float %90, %142, !dbg !39
  %195 = fmul float %96, %148, !dbg !39
  %196 = fmul float %97, %149, !dbg !39
  %197 = fmul float %98, %150, !dbg !39
  %198 = fmul float %99, %151, !dbg !39
  %199 = fadd float %183, %167, !dbg !40
  %200 = fadd float %184, %168, !dbg !40
  %201 = fadd float %185, %169, !dbg !40
  %202 = fadd float %186, %170, !dbg !40
  %203 = fadd float %187, %171, !dbg !40
  %204 = fadd float %188, %172, !dbg !40
  %205 = fadd float %189, %173, !dbg !40
  %206 = fadd float %190, %174, !dbg !40
  %207 = fadd float %191, %175, !dbg !40
  %208 = fadd float %192, %176, !dbg !40
  %209 = fadd float %193, %177, !dbg !40
  %210 = fadd float %194, %178, !dbg !40
  %211 = fadd float %195, %179, !dbg !40
  %212 = fadd float %196, %180, !dbg !40
  %213 = fadd float %197, %181, !dbg !40
  %214 = fadd float %198, %182, !dbg !40
  %215 = shl i32 %29, 12, !dbg !41
  %216 = shl i32 %30, 12, !dbg !41
  %217 = shl i32 %31, 12, !dbg !41
  %218 = shl i32 %32, 12, !dbg !41
  %219 = shl i32 %42, 21, !dbg !42
  %220 = add i32 %219, %.decomposed, !dbg !43
  %221 = add i32 %220, %215, !dbg !44
  %222 = add i32 %220, %216, !dbg !44
  %223 = add i32 %220, %217, !dbg !44
  %224 = add i32 %220, %218, !dbg !44
  %225 = sext i32 %221 to i64, !dbg !45
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %225, !dbg !45
  %227 = sext i32 %222 to i64, !dbg !45
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %227, !dbg !45
  %229 = sext i32 %223 to i64, !dbg !45
  %230 = getelementptr float, ptr addrspace(1) %3, i64 %229, !dbg !45
  %231 = sext i32 %224 to i64, !dbg !45
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %231, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %233 = shl i32 %9, 10, !dbg !46
  %234 = and i32 %233, 3072, !dbg !46
  %235 = or disjoint i32 %234, %11, !dbg !46
  %236 = and i32 %15, 1020, !dbg !46
  %237 = lshr exact i32 %234, 4, !dbg !46
  %238 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %237, !dbg !46
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %235, !dbg !46
  %240 = bitcast float %199 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !46
  %241 = or disjoint i32 %235, 256, !dbg !46
  %242 = lshr i32 %241, 6, !dbg !46
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !46
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !46
  %245 = bitcast float %200 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !46
  %246 = or disjoint i32 %235, 512, !dbg !46
  %247 = lshr i32 %246, 6, !dbg !46
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !46
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !46
  %250 = bitcast float %201 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !46
  %251 = or disjoint i32 %235, 768, !dbg !46
  %252 = lshr i32 %251, 6, !dbg !46
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !46
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !46
  %255 = bitcast float %202 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !46
  %256 = or disjoint i32 %235, 64, !dbg !46
  %257 = getelementptr float, ptr addrspace(3) %238, i32 %256, !dbg !46
  %258 = bitcast float %203 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !46
  %259 = or disjoint i32 %235, 320, !dbg !46
  %260 = lshr i32 %259, 6, !dbg !46
  %261 = and i32 %260, 52, !dbg !46
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !46
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %259, !dbg !46
  %264 = bitcast float %204 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !46
  %265 = or disjoint i32 %235, 576, !dbg !46
  %266 = lshr i32 %265, 6, !dbg !46
  %267 = and i32 %266, 56, !dbg !46
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !46
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %265, !dbg !46
  %270 = bitcast float %205 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !46
  %271 = or disjoint i32 %235, 832, !dbg !46
  %272 = lshr i32 %271, 6, !dbg !46
  %273 = and i32 %272, 60, !dbg !46
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !46
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !46
  %276 = bitcast float %206 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #2, !dbg !46
  %277 = or disjoint i32 %235, 128, !dbg !46
  %278 = getelementptr float, ptr addrspace(3) %238, i32 %277, !dbg !46
  %279 = bitcast float %207 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !46
  %280 = or disjoint i32 %235, 384, !dbg !46
  %281 = lshr i32 %280, 6, !dbg !46
  %282 = and i32 %281, 52, !dbg !46
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !46
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %280, !dbg !46
  %285 = bitcast float %208 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !46
  %286 = or disjoint i32 %235, 640, !dbg !46
  %287 = lshr i32 %286, 6, !dbg !46
  %288 = and i32 %287, 56, !dbg !46
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !46
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %286, !dbg !46
  %291 = bitcast float %209 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !46
  %292 = or disjoint i32 %235, 896, !dbg !46
  %293 = lshr i32 %292, 6, !dbg !46
  %294 = and i32 %293, 60, !dbg !46
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !46
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %292, !dbg !46
  %297 = bitcast float %210 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !46
  %298 = or disjoint i32 %235, 192, !dbg !46
  %299 = getelementptr float, ptr addrspace(3) %238, i32 %298, !dbg !46
  %300 = bitcast float %211 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !46
  %301 = or disjoint i32 %235, 448, !dbg !46
  %302 = lshr i32 %301, 6, !dbg !46
  %303 = and i32 %302, 52, !dbg !46
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %303, !dbg !46
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %301, !dbg !46
  %306 = bitcast float %212 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !46
  %307 = or disjoint i32 %235, 704, !dbg !46
  %308 = lshr i32 %307, 6, !dbg !46
  %309 = and i32 %308, 56, !dbg !46
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !46
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %307, !dbg !46
  %312 = bitcast float %213 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !46
  %313 = or disjoint i32 %235, 960, !dbg !46
  %314 = lshr i32 %313, 6, !dbg !46
  %315 = and i32 %314, 60, !dbg !46
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !46
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %313, !dbg !46
  %318 = bitcast float %214 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %319 = lshr i32 %15, 6, !dbg !46
  %320 = and i32 %319, 12, !dbg !46
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !46
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %236, !dbg !46
  %323 = or disjoint i32 %236, 1024, !dbg !46
  %324 = lshr i32 %323, 6, !dbg !46
  %325 = and i32 %324, 28, !dbg !46
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !46
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %323, !dbg !46
  %328 = load <4 x i32>, ptr addrspace(3) %327, align 16, !dbg !46
  %329 = or disjoint i32 %236, 2048, !dbg !46
  %330 = lshr i32 %329, 6, !dbg !46
  %331 = and i32 %330, 44, !dbg !46
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !46
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %329, !dbg !46
  %334 = load <4 x i32>, ptr addrspace(3) %333, align 16, !dbg !46
  %335 = or disjoint i32 %236, 3072, !dbg !46
  %336 = lshr i32 %335, 6, !dbg !46
  %337 = and i32 %336, 60, !dbg !46
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !46
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %335, !dbg !46
  %340 = load <4 x i32>, ptr addrspace(3) %339, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %322, align 16, !dbg !46
  %341 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 4, !dbg !46
  %.extract23 = load i32, ptr addrspace(3) %341, align 4, !dbg !46
  %342 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 8, !dbg !46
  %.extract24 = load i32, ptr addrspace(3) %342, align 8, !dbg !46
  %343 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 12, !dbg !46
  %.extract25 = load i32, ptr addrspace(3) %343, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %226, i1 %34) #2, !dbg !46
  %.extract26 = extractelement <4 x i32> %328, i64 0, !dbg !46
  %.extract27 = extractelement <4 x i32> %328, i64 1, !dbg !46
  %.extract28 = extractelement <4 x i32> %328, i64 2, !dbg !46
  %.extract29 = extractelement <4 x i32> %328, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %228, i1 %35) #2, !dbg !46
  %.extract30 = extractelement <4 x i32> %334, i64 0, !dbg !46
  %.extract31 = extractelement <4 x i32> %334, i64 1, !dbg !46
  %.extract32 = extractelement <4 x i32> %334, i64 2, !dbg !46
  %.extract33 = extractelement <4 x i32> %334, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %230, i1 %36) #2, !dbg !46
  %.extract34 = extractelement <4 x i32> %340, i64 0, !dbg !46
  %.extract35 = extractelement <4 x i32> %340, i64 1, !dbg !46
  %.extract36 = extractelement <4 x i32> %340, i64 2, !dbg !46
  %.extract37 = extractelement <4 x i32> %340, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %232, i1 %37) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 39, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 35, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 35, scope: !7)
!42 = !DILocation(line: 39, column: 48, scope: !7)
!43 = !DILocation(line: 39, column: 30, scope: !7)
!44 = !DILocation(line: 39, column: 40, scope: !7)
!45 = !DILocation(line: 39, column: 25, scope: !7)
!46 = !DILocation(line: 39, column: 59, scope: !7)
!47 = !DILocation(line: 39, column: 4, scope: !7)
