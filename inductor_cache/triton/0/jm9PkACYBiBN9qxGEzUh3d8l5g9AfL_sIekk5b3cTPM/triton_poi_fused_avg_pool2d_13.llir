; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 26624, !dbg !14
  %12 = sdiv i32 %9, 16, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %14 = insertelement <2 x i32> %13, i32 %12, i64 1, !dbg !16
  %15 = srem <2 x i32> %14, splat (i32 16), !dbg !16
  %16 = srem i32 %10, 16, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %17 = sdiv i32 %.frozen, 6656, !dbg !17
  %18 = mul i32 %17, 6656, !dbg !18
  %.decomposed = sub i32 %.frozen, %18, !dbg !18
  %19 = srem i32 %10, 6656, !dbg !18
  %20 = extractelement <2 x i32> %15, i64 1, !dbg !19
  %21 = icmp sgt i32 %20, 0, !dbg !20
  %22 = extractelement <2 x i32> %15, i64 0, !dbg !21
  %23 = icmp sgt i32 %22, 0, !dbg !22
  %24 = icmp sgt i32 %16, 0, !dbg !22
  %25 = and i1 %23, %21, !dbg !23
  %26 = and i1 %24, %21, !dbg !23
  %27 = mul i32 %17, 26624, !dbg !24
  %28 = add i32 %27, %.decomposed, !dbg !25
  %29 = add i32 %28, 19951, !dbg !26
  %30 = add i32 %27, %19, !dbg !25
  %31 = add i32 %30, 19951, !dbg !26
  %32 = sext i32 %29 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !27
  %34 = sext i32 %31 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = and i1 %11, %25, !dbg !28
  %37 = and i1 %11, %26, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36) #1, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37) #1, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = icmp sgt i32 %22, -1, !dbg !30
  %43 = and i1 %42, %21, !dbg !31
  %44 = add i32 %28, 19952, !dbg !32
  %45 = sext i32 %44 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !33
  %47 = and i1 %11, %43, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %51 = bitcast i32 %49 to float, !dbg !35
  %52 = bitcast i32 %50 to float, !dbg !35
  %53 = fadd float %39, %51, !dbg !36
  %54 = fadd float %41, %52, !dbg !36
  %55 = icmp ult i32 %22, 16, !dbg !37
  %56 = add nsw i32 %16, 1, !dbg !37
  %57 = icmp ult i32 %56, 16, !dbg !37
  %58 = and i1 %55, %21, !dbg !38
  %59 = and i1 %57, %21, !dbg !38
  %60 = add i32 %28, 19953, !dbg !39
  %61 = add i32 %30, 19953, !dbg !39
  %62 = sext i32 %60 to i64, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !40
  %64 = sext i32 %61 to i64, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !40
  %66 = and i1 %11, %58, !dbg !41
  %67 = and i1 %11, %59, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %66, i32 0, i1 %66) #1, !dbg !42
  %69 = bitcast i32 %68 to float, !dbg !42
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %67, i32 0, i1 %67) #1, !dbg !42
  %71 = bitcast i32 %70 to float, !dbg !42
  %72 = fadd float %53, %69, !dbg !43
  %73 = fadd float %54, %71, !dbg !43
  %74 = icmp sgt i32 %20, -1, !dbg !44
  %75 = and i1 %23, %74, !dbg !45
  %76 = and i1 %24, %74, !dbg !45
  %77 = add i32 %28, 19967, !dbg !46
  %78 = add i32 %30, 19967, !dbg !46
  %79 = sext i32 %77 to i64, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !47
  %81 = sext i32 %78 to i64, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !47
  %83 = and i1 %11, %75, !dbg !48
  %84 = and i1 %11, %76, !dbg !48
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %83, i32 0, i1 %83) #1, !dbg !49
  %86 = bitcast i32 %85 to float, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %84, i32 0, i1 %84) #1, !dbg !49
  %88 = bitcast i32 %87 to float, !dbg !49
  %89 = fadd float %72, %86, !dbg !50
  %90 = fadd float %73, %88, !dbg !50
  %91 = or i32 %20, %22, !dbg !51
  %92 = icmp sgt i32 %91, -1, !dbg !51
  %93 = add i32 %28, 19968, !dbg !52
  %94 = sext i32 %93 to i64, !dbg !53
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !53
  %96 = and i1 %11, %92, !dbg !54
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96, i32 0, i1 %96) #1, !dbg !55
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !55
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !55
  %100 = bitcast i32 %98 to float, !dbg !55
  %101 = bitcast i32 %99 to float, !dbg !55
  %102 = fadd float %89, %100, !dbg !56
  %103 = fadd float %90, %101, !dbg !56
  %104 = and i1 %55, %74, !dbg !57
  %105 = and i1 %57, %74, !dbg !57
  %106 = add i32 %28, 19969, !dbg !58
  %107 = add i32 %30, 19969, !dbg !58
  %108 = sext i32 %106 to i64, !dbg !59
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !59
  %110 = sext i32 %107 to i64, !dbg !59
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !59
  %112 = and i1 %11, %104, !dbg !60
  %113 = and i1 %11, %105, !dbg !60
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112) #1, !dbg !61
  %115 = bitcast i32 %114 to float, !dbg !61
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %113, i32 0, i1 %113) #1, !dbg !61
  %117 = bitcast i32 %116 to float, !dbg !61
  %118 = fadd float %102, %115, !dbg !62
  %119 = fadd float %103, %117, !dbg !62
  %120 = add nsw i32 %20, 1, !dbg !63
  %121 = icmp ult i32 %120, 16, !dbg !63
  %122 = and i1 %23, %121, !dbg !64
  %123 = and i1 %24, %121, !dbg !64
  %124 = add i32 %28, 19983, !dbg !65
  %125 = add i32 %30, 19983, !dbg !65
  %126 = sext i32 %124 to i64, !dbg !66
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !66
  %128 = sext i32 %125 to i64, !dbg !66
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !66
  %130 = and i1 %11, %122, !dbg !67
  %131 = and i1 %11, %123, !dbg !67
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %130, i32 0, i1 %130) #1, !dbg !68
  %133 = bitcast i32 %132 to float, !dbg !68
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %131, i32 0, i1 %131) #1, !dbg !68
  %135 = bitcast i32 %134 to float, !dbg !68
  %136 = fadd float %118, %133, !dbg !69
  %137 = fadd float %119, %135, !dbg !69
  %138 = and i1 %42, %121, !dbg !70
  %139 = add i32 %28, 19984, !dbg !71
  %140 = sext i32 %139 to i64, !dbg !72
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !72
  %142 = and i1 %11, %138, !dbg !73
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %141, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #1, !dbg !74
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !74
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !74
  %146 = bitcast i32 %144 to float, !dbg !74
  %147 = bitcast i32 %145 to float, !dbg !74
  %148 = fadd float %136, %146, !dbg !75
  %149 = fadd float %137, %147, !dbg !75
  %150 = or i32 %120, %22, !dbg !76
  %151 = icmp ult i32 %150, 16, !dbg !76
  %152 = or i32 %120, %56, !dbg !76
  %153 = icmp ult i32 %152, 16, !dbg !76
  %154 = add i32 %28, 19985, !dbg !77
  %155 = add i32 %30, 19985, !dbg !77
  %156 = sext i32 %154 to i64, !dbg !78
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !78
  %158 = sext i32 %155 to i64, !dbg !78
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !78
  %160 = and i1 %11, %151, !dbg !79
  %161 = and i1 %11, %153, !dbg !79
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %160, i32 0, i1 %160) #1, !dbg !80
  %163 = bitcast i32 %162 to float, !dbg !80
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %161, i32 0, i1 %161) #1, !dbg !80
  %165 = bitcast i32 %164 to float, !dbg !80
  %166 = fadd float %148, %163, !dbg !81
  %167 = fadd float %149, %165, !dbg !81
  %168 = add nsw i32 %22, 2, !dbg !82
  %169 = add nsw i32 %16, 2, !dbg !82
  %170 = icmp sgt i32 %22, 14, !dbg !83
  %171 = icmp sgt i32 %16, 14, !dbg !83
  %172 = select i1 %170, i32 17, i32 0, !dbg !84
  %173 = select i1 %171, i32 17, i32 0, !dbg !84
  %174 = icmp slt i32 %22, 15, !dbg !85
  %175 = icmp slt i32 %16, 15, !dbg !85
  %176 = select i1 %174, i32 %168, i32 0, !dbg !86
  %177 = select i1 %175, i32 %169, i32 0, !dbg !86
  %178 = add nsw i32 %172, %176, !dbg !87
  %179 = add nsw i32 %173, %177, !dbg !87
  %180 = add nsw i32 %20, 2, !dbg !88
  %181 = icmp sgt i32 %20, 14, !dbg !89
  %182 = select i1 %181, i32 17, i32 0, !dbg !90
  %183 = icmp slt i32 %20, 15, !dbg !91
  %184 = select i1 %183, i32 %180, i32 0, !dbg !92
  %185 = add nsw i32 %182, %184, !dbg !93
  %reass.add = sub nsw i32 %185, %20
  %reass.mul = mul nsw i32 %reass.add, %178
  %reass.add9 = sub nsw i32 %20, %185
  %reass.mul10 = mul nsw i32 %reass.add9, %22
  %186 = add nsw i32 %22, %20, !dbg !21
  %reass.sub = sub nsw i32 %178, %186, !dbg !19
  %187 = add nsw i32 %reass.sub, 1, !dbg !19
  %188 = add nsw i32 %187, %185, !dbg !94
  %189 = add nsw i32 %188, %reass.mul, !dbg !95
  %190 = add nsw i32 %189, %reass.mul10, !dbg !96
  %reass.mul8 = mul nsw i32 %reass.add, %179
  %reass.mul12 = mul nsw i32 %reass.add9, %16
  %191 = add nsw i32 %179, 1, !dbg !19
  %192 = add nsw i32 %16, %20, !dbg !19
  %193 = sub nsw i32 %191, %192, !dbg !19
  %194 = add nsw i32 %193, %185, !dbg !94
  %195 = add nsw i32 %194, %reass.mul8, !dbg !95
  %196 = add nsw i32 %195, %reass.mul12, !dbg !96
  %197 = sitofp i32 %190 to float, !dbg !97
  %198 = sitofp i32 %196 to float, !dbg !97
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %197) #1, !dbg !97
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %198) #1, !dbg !97
  %201 = sext i32 %28 to i64, !dbg !98
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !98
  %203 = bitcast float %199 to i32, !dbg !99
  %204 = bitcast float %200 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %203, i32 %204, ptr addrspace(1) %202, i1 %11) #1, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chyhxfvt7f5h377hvjektrpuzljso6nrvv2sggmnl7xjbcyiqz7j.py", directory: "inductor_cache/hy")
!4 = !{ptr @triton_poi_fused_avg_pool2d_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_13", linkageName: "triton_poi_fused_avg_pool2d_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 80, column: 169, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 80, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 38, column: 19, scope: !7)
!24 = !DILocation(line: 39, column: 50, scope: !7)
!25 = !DILocation(line: 39, column: 39, scope: !7)
!26 = !DILocation(line: 39, column: 44, scope: !7)
!27 = !DILocation(line: 39, column: 31, scope: !7)
!28 = !DILocation(line: 39, column: 63, scope: !7)
!29 = !DILocation(line: 39, column: 55, scope: !7)
!30 = !DILocation(line: 41, column: 21, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 44, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 63, scope: !7)
!35 = !DILocation(line: 45, column: 55, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 19, scope: !7)
!39 = !DILocation(line: 52, column: 44, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 63, scope: !7)
!42 = !DILocation(line: 52, column: 55, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 21, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 44, scope: !7)
!47 = !DILocation(line: 59, column: 31, scope: !7)
!48 = !DILocation(line: 59, column: 63, scope: !7)
!49 = !DILocation(line: 59, column: 55, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 44, scope: !7)
!53 = !DILocation(line: 62, column: 31, scope: !7)
!54 = !DILocation(line: 62, column: 63, scope: !7)
!55 = !DILocation(line: 62, column: 55, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 44, scope: !7)
!59 = !DILocation(line: 65, column: 31, scope: !7)
!60 = !DILocation(line: 65, column: 63, scope: !7)
!61 = !DILocation(line: 65, column: 55, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 44, scope: !7)
!66 = !DILocation(line: 72, column: 31, scope: !7)
!67 = !DILocation(line: 72, column: 63, scope: !7)
!68 = !DILocation(line: 72, column: 55, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 44, scope: !7)
!72 = !DILocation(line: 75, column: 31, scope: !7)
!73 = !DILocation(line: 75, column: 63, scope: !7)
!74 = !DILocation(line: 75, column: 55, scope: !7)
!75 = !DILocation(line: 76, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 20, scope: !7)
!77 = !DILocation(line: 78, column: 44, scope: !7)
!78 = !DILocation(line: 78, column: 31, scope: !7)
!79 = !DILocation(line: 78, column: 63, scope: !7)
!80 = !DILocation(line: 78, column: 55, scope: !7)
!81 = !DILocation(line: 79, column: 20, scope: !7)
!82 = !DILocation(line: 80, column: 70, scope: !7)
!83 = !DILocation(line: 80, column: 66, scope: !7)
!84 = !DILocation(line: 80, column: 57, scope: !7)
!85 = !DILocation(line: 80, column: 101, scope: !7)
!86 = !DILocation(line: 80, column: 89, scope: !7)
!87 = !DILocation(line: 80, column: 77, scope: !7)
!88 = !DILocation(line: 80, column: 129, scope: !7)
!89 = !DILocation(line: 80, column: 125, scope: !7)
!90 = !DILocation(line: 80, column: 116, scope: !7)
!91 = !DILocation(line: 80, column: 160, scope: !7)
!92 = !DILocation(line: 80, column: 148, scope: !7)
!93 = !DILocation(line: 80, column: 136, scope: !7)
!94 = !DILocation(line: 80, column: 240, scope: !7)
!95 = !DILocation(line: 80, column: 311, scope: !7)
!96 = !DILocation(line: 80, column: 372, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 82, column: 25, scope: !7)
!99 = !DILocation(line: 82, column: 48, scope: !7)
!100 = !DILocation(line: 82, column: 4, scope: !7)
