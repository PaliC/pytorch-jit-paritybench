; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %16, !dbg !16
  %22 = icmp slt i32 %21, 64, !dbg !17
  %23 = shl i32 %17, 6, !dbg !18
  %24 = shl i32 %18, 6, !dbg !18
  %25 = add i32 %21, %23, !dbg !19
  %26 = add i32 %21, %24, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %22) #4, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %22) #4, !dbg !21
  %33 = sext i32 %21 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #4, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #4, !dbg !29
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !30
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !30
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !30
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %54, 0, !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %55, 0, !dbg !31
  br i1 %.not.i, label %61, label %56, !dbg !31

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !31

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !31

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !31
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i15 = icmp eq i32 %66, 0, !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i18 = icmp eq i32 %67, 0, !dbg !31
  br i1 %.not.i15, label %73, label %68, !dbg !31

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

__nv_sqrtf.exit19:                                ; preds = %69, %71, %74, %76
  %.0.i17 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i20 = icmp eq i32 %78, 0, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i23 = icmp eq i32 %79, 0, !dbg !31
  br i1 %.not.i20, label %85, label %80, !dbg !31

80:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %83, label %81, !dbg !31

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

__nv_sqrtf.exit24:                                ; preds = %81, %83, %86, %88
  %.0.i22 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i25 = icmp eq i32 %90, 0, !dbg !31
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i28 = icmp eq i32 %91, 0, !dbg !31
  br i1 %.not.i25, label %97, label %92, !dbg !31

92:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %95, label %93, !dbg !31

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

97:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %100, label %98, !dbg !31

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

__nv_sqrtf.exit29:                                ; preds = %93, %95, %98, %100
  %.0.i27 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %103 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %104 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %105 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %106 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %107 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %108 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %109 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %111 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %112 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %113 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %122 = or disjoint i32 %10, %16, !dbg !13
  %.frozen = freeze i32 %122, !dbg !32
  %123 = sdiv i32 %.frozen, 256, !dbg !32
  %124 = mul i32 %123, 256, !dbg !33
  %.decomposed = sub i32 %.frozen, %124, !dbg !33
  %125 = or disjoint i32 %20, %14, !dbg !16
  %126 = icmp slt i32 %125, 64, !dbg !17
  %127 = or disjoint i32 %20, %13, !dbg !16
  %128 = icmp slt i32 %127, 64, !dbg !17
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %133 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !23
  %134 = insertelement <4 x i32> %133, i32 %105, i64 1, !dbg !23
  %135 = insertelement <4 x i32> %134, i32 %107, i64 2, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %109, i64 3, !dbg !23
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !23
  %138 = shufflevector <4 x float> %137, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %139 = insertelement <8 x i32> poison, i32 %102, i64 0, !dbg !21
  %140 = insertelement <8 x i32> %139, i32 %104, i64 1, !dbg !21
  %141 = insertelement <8 x i32> %140, i32 %106, i64 2, !dbg !21
  %142 = insertelement <8 x i32> %141, i32 %108, i64 3, !dbg !21
  %143 = insertelement <8 x i32> %142, i32 %110, i64 4, !dbg !21
  %144 = insertelement <8 x i32> %143, i32 %111, i64 5, !dbg !21
  %145 = insertelement <8 x i32> %144, i32 %112, i64 6, !dbg !21
  %146 = insertelement <8 x i32> %145, i32 %113, i64 7, !dbg !21
  %147 = bitcast <8 x i32> %146 to <8 x float>, !dbg !21
  %148 = fsub <8 x float> %147, %138, !dbg !35
  %149 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !29
  %150 = insertelement <4 x i32> %149, i32 %115, i64 1, !dbg !29
  %151 = insertelement <4 x i32> %150, i32 %116, i64 2, !dbg !29
  %152 = insertelement <4 x i32> %151, i32 %117, i64 3, !dbg !29
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !29
  %154 = shufflevector <4 x float> %153, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %155 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !27
  %156 = insertelement <4 x i32> %155, i32 %119, i64 1, !dbg !27
  %157 = insertelement <4 x i32> %156, i32 %120, i64 2, !dbg !27
  %158 = insertelement <4 x i32> %157, i32 %121, i64 3, !dbg !27
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !27
  %160 = shufflevector <4 x float> %159, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %161 = insertelement <8 x float> poison, float %132, i64 0, !dbg !36
  %162 = insertelement <8 x float> %161, float %131, i64 1, !dbg !36
  %163 = insertelement <8 x float> %162, float %130, i64 2, !dbg !36
  %164 = insertelement <8 x float> %163, float %129, i64 3, !dbg !36
  %165 = shufflevector <8 x float> %164, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %166 = fmul <8 x float> %148, %165, !dbg !36
  %167 = fmul <8 x float> %166, %160, !dbg !37
  %168 = fadd <8 x float> %167, %154, !dbg !38
  %169 = fcmp ogt <8 x float> %168, zeroinitializer, !dbg !39
  %170 = extractelement <8 x float> %168, i64 7, !dbg !40
  %171 = fmul float %170, 0x3FB99999A0000000, !dbg !41
  %172 = extractelement <8 x float> %168, i64 6, !dbg !40
  %173 = fmul float %172, 0x3FB99999A0000000, !dbg !41
  %174 = extractelement <8 x float> %168, i64 5, !dbg !40
  %175 = fmul float %174, 0x3FB99999A0000000, !dbg !41
  %176 = extractelement <8 x float> %168, i64 4, !dbg !40
  %177 = fmul float %176, 0x3FB99999A0000000, !dbg !41
  %178 = extractelement <8 x float> %168, i64 3, !dbg !40
  %179 = fmul float %178, 0x3FB99999A0000000, !dbg !41
  %180 = extractelement <8 x float> %168, i64 2, !dbg !40
  %181 = fmul float %180, 0x3FB99999A0000000, !dbg !41
  %182 = extractelement <8 x float> %168, i64 1, !dbg !40
  %183 = fmul float %182, 0x3FB99999A0000000, !dbg !41
  %184 = extractelement <8 x float> %168, i64 0, !dbg !40
  %185 = fmul float %184, 0x3FB99999A0000000, !dbg !41
  %186 = extractelement <8 x i1> %169, i64 7, !dbg !40
  %187 = select i1 %186, float %170, float %171, !dbg !40
  %188 = extractelement <8 x i1> %169, i64 6, !dbg !40
  %189 = select i1 %188, float %172, float %173, !dbg !40
  %190 = extractelement <8 x i1> %169, i64 5, !dbg !40
  %191 = select i1 %190, float %174, float %175, !dbg !40
  %192 = extractelement <8 x i1> %169, i64 4, !dbg !40
  %193 = select i1 %192, float %176, float %177, !dbg !40
  %194 = extractelement <8 x i1> %169, i64 3, !dbg !40
  %195 = select i1 %194, float %178, float %179, !dbg !40
  %196 = extractelement <8 x i1> %169, i64 2, !dbg !40
  %197 = select i1 %196, float %180, float %181, !dbg !40
  %198 = extractelement <8 x i1> %169, i64 1, !dbg !40
  %199 = select i1 %198, float %182, float %183, !dbg !40
  %200 = extractelement <8 x i1> %169, i64 0, !dbg !40
  %201 = select i1 %200, float %184, float %185, !dbg !40
  %202 = shl i32 %127, 8, !dbg !42
  %203 = shl i32 %125, 8, !dbg !42
  %204 = shl i32 %123, 14, !dbg !43
  %205 = add i32 %204, %.decomposed, !dbg !44
  %206 = add i32 %205, %202, !dbg !45
  %207 = add i32 %205, %203, !dbg !45
  %208 = sext i32 %206 to i64, !dbg !46
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !46
  %210 = sext i32 %207 to i64, !dbg !46
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !46
  %212 = shl i32 %11, 7, !dbg !47
  %213 = and i32 %212, 896, !dbg !47
  %214 = or disjoint i32 %213, %13, !dbg !47
  %215 = and i32 %15, 508, !dbg !47
  %216 = lshr exact i32 %213, 3, !dbg !47
  %217 = or disjoint i32 %216, %214, !dbg !47
  %218 = zext nneg i32 %217 to i64, !dbg !47
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %218, !dbg !47
  %220 = bitcast float %187 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !47
  %221 = or disjoint i32 %214, 32, !dbg !47
  %222 = lshr i32 %221, 3, !dbg !47
  %223 = and i32 %222, 116, !dbg !47
  %224 = add nuw nsw i32 %223, %221, !dbg !47
  %225 = zext nneg i32 %224 to i64, !dbg !47
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %225, !dbg !47
  %227 = bitcast float %189 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !47
  %228 = or disjoint i32 %214, 64, !dbg !47
  %229 = lshr i32 %228, 3, !dbg !47
  %230 = and i32 %229, 120, !dbg !47
  %231 = add nuw nsw i32 %230, %228, !dbg !47
  %232 = zext nneg i32 %231 to i64, !dbg !47
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %232, !dbg !47
  %234 = bitcast float %191 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !47
  %235 = or disjoint i32 %214, 96, !dbg !47
  %236 = lshr i32 %235, 3, !dbg !47
  %237 = and i32 %236, 124, !dbg !47
  %238 = add nuw nsw i32 %237, %235, !dbg !47
  %239 = zext nneg i32 %238 to i64, !dbg !47
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !47
  %241 = bitcast float %193 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !47
  %242 = or disjoint i32 %214, 16, !dbg !47
  %243 = add nuw nsw i32 %242, %216, !dbg !47
  %244 = zext nneg i32 %243 to i64, !dbg !47
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !47
  %246 = bitcast float %195 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !47
  %247 = or disjoint i32 %214, 48, !dbg !47
  %248 = lshr i32 %247, 3, !dbg !47
  %249 = and i32 %248, 116, !dbg !47
  %250 = add nuw nsw i32 %249, %247, !dbg !47
  %251 = zext nneg i32 %250 to i64, !dbg !47
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !47
  %253 = bitcast float %197 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !47
  %254 = or disjoint i32 %214, 80, !dbg !47
  %255 = lshr i32 %254, 3, !dbg !47
  %256 = and i32 %255, 120, !dbg !47
  %257 = add nuw nsw i32 %256, %254, !dbg !47
  %258 = zext nneg i32 %257 to i64, !dbg !47
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %258, !dbg !47
  %260 = bitcast float %199 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !47
  %261 = or disjoint i32 %214, 112, !dbg !47
  %262 = lshr i32 %261, 3, !dbg !47
  %263 = and i32 %262, 124, !dbg !47
  %264 = add nuw nsw i32 %263, %261, !dbg !47
  %265 = zext nneg i32 %264 to i64, !dbg !47
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %265, !dbg !47
  %267 = bitcast float %201 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %268 = lshr i32 %15, 3, !dbg !47
  %269 = and i32 %268, 60, !dbg !47
  %270 = add nuw nsw i32 %269, %215, !dbg !47
  %271 = zext nneg i32 %270 to i64, !dbg !47
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %271, !dbg !47
  %273 = or disjoint i32 %215, 512, !dbg !47
  %274 = lshr i32 %273, 3, !dbg !47
  %275 = and i32 %274, 124, !dbg !47
  %276 = add nuw nsw i32 %275, %273, !dbg !47
  %277 = zext nneg i32 %276 to i64, !dbg !47
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %277, !dbg !47
  %279 = load <4 x i32>, ptr addrspace(3) %278, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %272, align 16, !dbg !47
  %280 = getelementptr inbounds i8, ptr addrspace(3) %272, i64 4, !dbg !47
  %.extract8 = load i32, ptr addrspace(3) %280, align 4, !dbg !47
  %281 = getelementptr inbounds i8, ptr addrspace(3) %272, i64 8, !dbg !47
  %.extract9 = load i32, ptr addrspace(3) %281, align 8, !dbg !47
  %282 = getelementptr inbounds i8, ptr addrspace(3) %272, i64 12, !dbg !47
  %.extract10 = load i32, ptr addrspace(3) %282, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %209, i1 %128) #4, !dbg !47
  %.extract11 = extractelement <4 x i32> %279, i64 0, !dbg !47
  %.extract12 = extractelement <4 x i32> %279, i64 1, !dbg !47
  %.extract13 = extractelement <4 x i32> %279, i64 2, !dbg !47
  %.extract14 = extractelement <4 x i32> %279, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %211, i1 %126) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coiqsjkr3vv6zlidd3p4joffdnxcfoqpuqfnkfkao4nilx26n7dy.py", directory: "inductor_cache/oi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 26, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 30, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 34, scope: !7)
!43 = !DILocation(line: 53, column: 45, scope: !7)
!44 = !DILocation(line: 53, column: 30, scope: !7)
!45 = !DILocation(line: 53, column: 39, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 57, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
