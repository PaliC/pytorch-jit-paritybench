; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = shl i32 %11, 1, !dbg !15
  %20 = and i32 %19, 14, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 4, !dbg !16
  %22 = srem i32 %21, 4, !dbg !17
  %23 = mul i32 %21, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = sext i32 %15 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !20
  %28 = shl nsw i32 %22, 4, !dbg !21
  %29 = or disjoint i32 %28, %20, !dbg !22
  %30 = sext i32 %29 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !24
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !24
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !26
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %39 = shl nsw i32 %.decomposed, 4, !dbg !27
  %40 = or disjoint i32 %39, %20, !dbg !28
  %41 = sext i32 %40 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !30
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !30
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !32
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %50 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !24
  %51 = insertelement <2 x i32> %50, i32 %34, i64 1, !dbg !24
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !24
  %53 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !26
  %54 = insertelement <2 x i32> %53, i32 %38, i64 1, !dbg !26
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !26
  %56 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %57 = insertelement <2 x i32> %56, i32 %45, i64 1, !dbg !30
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !30
  %59 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !32
  %60 = insertelement <2 x i32> %59, i32 %49, i64 1, !dbg !32
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !32
  %62 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !33
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !33
  %64 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !33
  %65 = fmul <2 x float> %64, %52, !dbg !33
  %66 = fadd <2 x float> %65, %55, !dbg !34
  %67 = fmul <2 x float> %64, %58, !dbg !35
  %68 = fadd <2 x float> %67, %61, !dbg !36
  %69 = fadd <2 x float> %66, %68, !dbg !37
  %shift = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %70 = fadd <2 x float> %69, %shift, !dbg !38
  %71 = extractelement <2 x float> %70, i64 0, !dbg !38
  %72 = select i1 %17, float %71, float 0.000000e+00, !dbg !38
  %73 = bitcast float %72 to i32, !dbg !43
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !43
  %75 = bitcast i32 %74 to float, !dbg !43
  %76 = fadd float %72, %75, !dbg !38
  %77 = bitcast float %76 to i32, !dbg !43
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !43
  %79 = bitcast i32 %78 to float, !dbg !43
  %80 = fadd float %76, %79, !dbg !38
  %81 = bitcast float %80 to i32, !dbg !43
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !43
  %83 = bitcast i32 %82 to float, !dbg !43
  %84 = fadd float %80, %83, !dbg !38
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !44
  %86 = bitcast float %84 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %88 = load i32, ptr addrspace(3) %87, align 4, !dbg !44
  %89 = sext i32 %16 to i64, !dbg !45
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !45
  %91 = and i32 %11, 56, !dbg !46
  %92 = icmp eq i32 %91, 0, !dbg !46
  %93 = and i1 %92, %18, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %90, i1 %93) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctguaylae3qpfq555rk5rmbrpwhakucc62ulc54snlfu2mkfjauf.py", directory: "inductor_cache/tg")
!4 = !{ptr @triton_per_fused_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sum_0", linkageName: "triton_per_fused_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 38, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 43, scope: !7)
!27 = !DILocation(line: 36, column: 38, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 43, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 45, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 45, column: 29, scope: !7)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 37, scope: !7)
!47 = !DILocation(line: 46, column: 4, scope: !7)
