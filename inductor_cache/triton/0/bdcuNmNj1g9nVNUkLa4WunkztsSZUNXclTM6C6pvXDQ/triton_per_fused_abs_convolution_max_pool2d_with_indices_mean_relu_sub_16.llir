; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %13 = sdiv i32 %.frozen, 64, !dbg !13
  %14 = mul i32 %13, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = shl nuw nsw i32 %12, 9, !dbg !15
  %16 = shl nsw i32 %.decomposed, 7, !dbg !16
  %17 = or disjoint i32 %16, %12, !dbg !17
  %18 = or disjoint i32 %17, 64, !dbg !17
  %19 = shl i32 %13, 13, !dbg !18
  %20 = add i32 %17, %19, !dbg !19
  %21 = add i32 %18, %19, !dbg !19
  %22 = sdiv i32 %20, 32768, !dbg !20
  %23 = sdiv i32 %21, 32768, !dbg !20
  %24 = shl nsw i32 %22, 15, !dbg !21
  %25 = shl nsw i32 %23, 15, !dbg !21
  %26 = or disjoint i32 %24, %15, !dbg !22
  %27 = or disjoint i32 %25, %15, !dbg !22
  %28 = sdiv i32 %20, 64, !dbg !23
  %29 = sdiv i32 %21, 64, !dbg !23
  %30 = srem i32 %28, 512, !dbg !24
  %31 = srem i32 %29, 512, !dbg !24
  %32 = add i32 %26, %30, !dbg !25
  %33 = add i32 %27, %31, !dbg !25
  %34 = sext i32 %32 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %8, i32 0, i1 %8) #4, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %8, i32 0, i1 %8) #4, !dbg !27
  %40 = sext i32 %30 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = sext i32 %31 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %8, i32 0, i1 %8) #4, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %8, i32 0, i1 %8) #4, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %8, i32 0, i1 %8) #4, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %8, i32 0, i1 %8) #4, !dbg !31
  %50 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !27
  %51 = insertelement <2 x i32> %50, i32 %39, i64 1, !dbg !27
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !27
  %53 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !29
  %54 = insertelement <2 x i32> %53, i32 %45, i64 1, !dbg !29
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !29
  %56 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !31
  %57 = insertelement <2 x i32> %56, i32 %49, i64 1, !dbg !31
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !31
  %59 = fadd <2 x float> %52, %55, !dbg !32
  %60 = fcmp olt <2 x float> %59, zeroinitializer, !dbg !33
  %61 = select <2 x i1> %60, <2 x float> zeroinitializer, <2 x float> %59, !dbg !37
  %62 = fadd <2 x float> %55, %58, !dbg !38
  %63 = fcmp olt <2 x float> %62, zeroinitializer, !dbg !39
  %64 = select <2 x i1> %63, <2 x float> zeroinitializer, <2 x float> %62, !dbg !41
  %65 = fsub <2 x float> %61, %64, !dbg !42
  %66 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %65), !dbg !43
  %shift = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %67 = fadd <2 x float> %66, %shift, !dbg !44
  %68 = extractelement <2 x float> %67, i64 0, !dbg !44
  %69 = select i1 %8, float %68, float 0.000000e+00, !dbg !44
  %70 = bitcast float %69 to i32, !dbg !49
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !49
  %72 = bitcast i32 %71 to float, !dbg !49
  %73 = fadd float %69, %72, !dbg !44
  %74 = bitcast float %73 to i32, !dbg !49
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !49
  %76 = bitcast i32 %75 to float, !dbg !49
  %77 = fadd float %73, %76, !dbg !44
  %78 = bitcast float %77 to i32, !dbg !49
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !49
  %80 = bitcast i32 %79 to float, !dbg !49
  %81 = fadd float %77, %80, !dbg !44
  %82 = bitcast float %81 to i32, !dbg !49
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !49
  %84 = bitcast i32 %83 to float, !dbg !49
  %85 = fadd float %81, %84, !dbg !44
  %86 = bitcast float %85 to i32, !dbg !49
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !49
  %88 = bitcast i32 %87 to float, !dbg !49
  %89 = fadd float %85, %88, !dbg !44
  %90 = icmp eq i32 %10, 0, !dbg !49
  %91 = and i32 %11, 1, !dbg !49
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !49
  %93 = bitcast float %89 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %90) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %94 = icmp slt i32 %9, 2, !dbg !49
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !49
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %94) #4, !dbg !49
  %97 = bitcast i32 %96 to float, !dbg !49
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !49
  %99 = bitcast i32 %98 to float, !dbg !49
  %100 = fadd float %97, %99, !dbg !44
  %101 = and i32 %9, 1, !dbg !49
  %102 = icmp eq i32 %101, 0, !dbg !49
  %103 = and i1 %94, %102, !dbg !49
  %104 = bitcast float %100 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %104, i1 %103) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %105 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %106 = sext i32 %7 to i64, !dbg !50
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !50
  %108 = icmp eq i32 %12, 0, !dbg !51
  %109 = and i1 %108, %8, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %107, i1 %109) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cneu5soynpjk6yfdqityslk3vvqs7wrydajkf7757ee3o3fgh4wj.py", directory: "inductor_cache/ne")
!4 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", linkageName: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 65, scope: !7)
!17 = !DILocation(line: 33, column: 61, scope: !7)
!18 = !DILocation(line: 33, column: 75, scope: !7)
!19 = !DILocation(line: 33, column: 70, scope: !7)
!20 = !DILocation(line: 33, column: 82, scope: !7)
!21 = !DILocation(line: 33, column: 55, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 121, scope: !7)
!24 = !DILocation(line: 33, column: 127, scope: !7)
!25 = !DILocation(line: 33, column: 93, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 135, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 72, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 135, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 38, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !40)
!40 = !DILocation(line: 40, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !40)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 23, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 45, column: 26, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 46, column: 4, scope: !7)
