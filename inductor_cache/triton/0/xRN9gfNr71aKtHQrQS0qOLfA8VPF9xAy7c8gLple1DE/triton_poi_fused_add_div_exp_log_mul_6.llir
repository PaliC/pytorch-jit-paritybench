; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_div_exp_log_mul_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 4, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = icmp slt i32 %17, 16, !dbg !14
  %19 = srem i32 %17, 4, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %18) #2, !dbg !17
  %23 = bitcast i32 %22 to float, !dbg !17
  %24 = mul nsw i32 %19, 7, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %18) #2, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #2, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #2, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = add nsw i32 %24, 1, !dbg !25
  %34 = sext i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #2, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #2, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #2, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = add nsw i32 %24, 2, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !33
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #2, !dbg !34
  %46 = bitcast i32 %45 to float, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #2, !dbg !36
  %49 = bitcast i32 %48 to float, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #2, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = add nsw i32 %24, 3, !dbg !39
  %54 = sext i32 %53 to i64, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !40
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %18) #2, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !42
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !44
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #2, !dbg !45
  %61 = bitcast i32 %60 to float, !dbg !45
  %62 = add nsw i32 %24, 4, !dbg !46
  %63 = sext i32 %62 to i64, !dbg !47
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !47
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #2, !dbg !48
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !49
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %18) #2, !dbg !50
  %68 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !51
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #2, !dbg !52
  %70 = bitcast i32 %69 to float, !dbg !52
  %71 = add nsw i32 %24, 5, !dbg !53
  %72 = sext i32 %71 to i64, !dbg !54
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !54
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #2, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !56
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %18) #2, !dbg !57
  %77 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !58
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %18) #2, !dbg !59
  %79 = bitcast i32 %78 to float, !dbg !59
  %80 = add nsw i32 %24, 6, !dbg !60
  %81 = sext i32 %80 to i64, !dbg !61
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !61
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %18) #2, !dbg !62
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !63
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %18) #2, !dbg !64
  %86 = fmul float %23, 1.000000e+01, !dbg !65
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !66
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #2, !dbg !66
  %89 = fmul float %32, 1.000000e+01, !dbg !67
  %90 = fmul float %89, 0x3FF7154760000000, !dbg !68
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #2, !dbg !68
  %92 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %93 = insertelement <2 x i32> %92, i32 %36, i64 1, !dbg !20
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !20
  %95 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %96 = insertelement <2 x i32> %95, i32 %38, i64 1, !dbg !22
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !22
  %98 = fmul <2 x float> %94, zeroinitializer, !dbg !69
  %99 = fadd <2 x float> %98, %97, !dbg !70
  %100 = insertelement <2 x float> poison, float %88, i64 0, !dbg !71
  %101 = insertelement <2 x float> %100, float %91, i64 1, !dbg !71
  %102 = fmul <2 x float> %99, %101, !dbg !71
  %shift = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %103 = fadd <2 x float> %102, %shift, !dbg !72
  %104 = extractelement <2 x float> %103, i64 0, !dbg !72
  %105 = fmul float %41, 1.000000e+01, !dbg !73
  %106 = fmul float %105, 0x3FF7154760000000, !dbg !74
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #2, !dbg !74
  %108 = fmul float %46, 0.000000e+00, !dbg !75
  %109 = fadd float %108, %49, !dbg !76
  %110 = fmul float %109, %107, !dbg !77
  %111 = fadd float %104, %110, !dbg !78
  %112 = fmul float %52, 1.000000e+01, !dbg !79
  %113 = fmul float %112, 0x3FF7154760000000, !dbg !80
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #2, !dbg !80
  %115 = fmul float %61, 1.000000e+01, !dbg !81
  %116 = fmul float %115, 0x3FF7154760000000, !dbg !82
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #2, !dbg !82
  %118 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !41
  %119 = insertelement <2 x i32> %118, i32 %65, i64 1, !dbg !41
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !41
  %121 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !43
  %122 = insertelement <2 x i32> %121, i32 %67, i64 1, !dbg !43
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !43
  %124 = fmul <2 x float> %120, zeroinitializer, !dbg !83
  %125 = fadd <2 x float> %124, %123, !dbg !84
  %126 = insertelement <2 x float> poison, float %114, i64 0, !dbg !85
  %127 = insertelement <2 x float> %126, float %117, i64 1, !dbg !85
  %128 = fmul <2 x float> %125, %127, !dbg !85
  %129 = extractelement <2 x float> %128, i64 0, !dbg !86
  %130 = fadd float %111, %129, !dbg !86
  %131 = extractelement <2 x float> %128, i64 1, !dbg !87
  %132 = fadd float %130, %131, !dbg !87
  %133 = fmul float %70, 1.000000e+01, !dbg !88
  %134 = fmul float %133, 0x3FF7154760000000, !dbg !89
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #2, !dbg !89
  %136 = fmul float %79, 1.000000e+01, !dbg !90
  %137 = fmul float %136, 0x3FF7154760000000, !dbg !91
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #2, !dbg !91
  %139 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !55
  %140 = insertelement <2 x i32> %139, i32 %83, i64 1, !dbg !55
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !55
  %142 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !57
  %143 = insertelement <2 x i32> %142, i32 %85, i64 1, !dbg !57
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !57
  %145 = fmul <2 x float> %141, zeroinitializer, !dbg !92
  %146 = fadd <2 x float> %145, %144, !dbg !93
  %147 = insertelement <2 x float> poison, float %135, i64 0, !dbg !94
  %148 = insertelement <2 x float> %147, float %138, i64 1, !dbg !94
  %149 = fmul <2 x float> %146, %148, !dbg !94
  %150 = extractelement <2 x float> %149, i64 0, !dbg !95
  %151 = fadd float %132, %150, !dbg !95
  %152 = extractelement <2 x float> %149, i64 1, !dbg !96
  %153 = fadd float %151, %152, !dbg !96
  %154 = fcmp olt float %153, 0x3810000000000000, !dbg !97
  %155 = fmul float %153, 0x4160000000000000, !dbg !97
  %.02.i = select i1 %154, float %155, float %153, !dbg !97
  %i.i.0.i = select i1 %154, float -2.300000e+01, float 0.000000e+00, !dbg !97
  %156 = bitcast float %.02.i to i32, !dbg !97
  %157 = add i32 %156, -1059760811, !dbg !97
  %158 = and i32 %157, -8388608, !dbg !97
  %159 = sub i32 %156, %158, !dbg !97
  %160 = bitcast i32 %159 to float, !dbg !97
  %161 = sitofp i32 %158 to float, !dbg !97
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not.i = icmp eq i32 %162, 0, !dbg !97
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %161, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !97
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %161, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !97
  %.08.i = select i1 %.not.i, float %164, float %163, !dbg !97
  %165 = fadd float %160, -1.000000e+00, !dbg !97
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not1.i = icmp eq i32 %166, 0, !dbg !97
  %167 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %165, float 0x3FC2073EC0000000) #2, !dbg !97
  %168 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %165, float 0x3FC2073EC0000000) #2, !dbg !97
  %.010.i = select i1 %.not1.i, float %168, float %167, !dbg !97
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not2.i = icmp eq i32 %169, 0, !dbg !97
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %165, float 0xBFBF19B980000000) #2, !dbg !97
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %165, float 0xBFBF19B980000000) #2, !dbg !97
  %.011.i = select i1 %.not2.i, float %171, float %170, !dbg !97
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not3.i = icmp eq i32 %172, 0, !dbg !97
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %165, float 0x3FC1E52AA0000000) #2, !dbg !97
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %165, float 0x3FC1E52AA0000000) #2, !dbg !97
  %.012.i = select i1 %.not3.i, float %174, float %173, !dbg !97
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not4.i = icmp eq i32 %175, 0, !dbg !97
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %165, float 0xBFC55B1720000000) #2, !dbg !97
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %165, float 0xBFC55B1720000000) #2, !dbg !97
  %.09.i = select i1 %.not4.i, float %177, float %176, !dbg !97
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not5.i = icmp eq i32 %178, 0, !dbg !97
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %165, float 0x3FC99DA160000000) #2, !dbg !97
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %165, float 0x3FC99DA160000000) #2, !dbg !97
  %.05.i = select i1 %.not5.i, float %180, float %179, !dbg !97
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not6.i = icmp eq i32 %181, 0, !dbg !97
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %165, float 0xBFCFFFE440000000) #2, !dbg !97
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %165, float 0xBFCFFFE440000000) #2, !dbg !97
  %.01.i = select i1 %.not6.i, float %183, float %182, !dbg !97
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not7.i = icmp eq i32 %184, 0, !dbg !97
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %165, float 0x3FD5554F00000000) #2, !dbg !97
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %165, float 0x3FD5554F00000000) #2, !dbg !97
  %.0.i = select i1 %.not7.i, float %186, float %185, !dbg !97
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not8.i = icmp eq i32 %187, 0, !dbg !97
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %165, float -5.000000e-01) #2, !dbg !97
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %165, float -5.000000e-01) #2, !dbg !97
  %.07.i = select i1 %.not8.i, float %189, float %188, !dbg !97
  %190 = fmul float %165, %.07.i, !dbg !97
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not9.i = icmp eq i32 %191, 0, !dbg !97
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %190, float %165, float %165) #2, !dbg !97
  %193 = tail call float @llvm.nvvm.fma.rn.f(float %190, float %165, float %165) #2, !dbg !97
  %.06.i = select i1 %.not9.i, float %193, float %192, !dbg !97
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not10.i = icmp eq i32 %194, 0, !dbg !97
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !97
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !97
  %.04.i = select i1 %.not10.i, float %196, float %195, !dbg !97
  %197 = icmp ugt i32 %156, 2139095039, !dbg !97
  br i1 %197, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !97

__nv_fmaf_rn.exit.i.i:                            ; preds = %12
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !97
  %.not11.i = icmp eq i32 %198, 0, !dbg !97
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !97
  %200 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !97
  %.03.i = select i1 %.not11.i, float %200, float %199, !dbg !97
  br label %__nv_logf.exit, !dbg !97

__nv_logf.exit:                                   ; preds = %12, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %12 ], !dbg !97
  %201 = and i32 %15, 16, !dbg !12
  %202 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !97
  %r.i.1.i = select i1 %202, float 0xFFF0000000000000, float %r.i.0.i, !dbg !97
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !98
  %204 = icmp eq i32 %201, 0, !dbg !99
  %205 = bitcast float %153 to i32, !dbg !99
  %206 = and i1 %204, %18, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %203, i1 %206) #2, !dbg !99
  %207 = getelementptr float, ptr addrspace(1) %10, i64 %20, !dbg !100
  %208 = bitcast float %r.i.1.i to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %207, i1 %206) #2, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coeeinna74zkaakmhqfuvfuyid7c7fb2zdhcda2mm6pict23yc2v.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_add_div_exp_log_mul_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_exp_log_mul_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_exp_log_mul_6", linkageName: "triton_poi_fused_add_div_exp_log_mul_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 32, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 35, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 38, column: 31, scope: !7)
!45 = !DILocation(line: 38, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 35, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 42, scope: !7)
!49 = !DILocation(line: 40, column: 31, scope: !7)
!50 = !DILocation(line: 40, column: 42, scope: !7)
!51 = !DILocation(line: 41, column: 31, scope: !7)
!52 = !DILocation(line: 41, column: 36, scope: !7)
!53 = !DILocation(line: 42, column: 35, scope: !7)
!54 = !DILocation(line: 42, column: 31, scope: !7)
!55 = !DILocation(line: 42, column: 42, scope: !7)
!56 = !DILocation(line: 43, column: 31, scope: !7)
!57 = !DILocation(line: 43, column: 42, scope: !7)
!58 = !DILocation(line: 44, column: 31, scope: !7)
!59 = !DILocation(line: 44, column: 36, scope: !7)
!60 = !DILocation(line: 45, column: 35, scope: !7)
!61 = !DILocation(line: 45, column: 31, scope: !7)
!62 = !DILocation(line: 45, column: 42, scope: !7)
!63 = !DILocation(line: 46, column: 31, scope: !7)
!64 = !DILocation(line: 46, column: 42, scope: !7)
!65 = !DILocation(line: 48, column: 18, scope: !7)
!66 = !DILocation(line: 49, column: 23, scope: !7)
!67 = !DILocation(line: 56, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 24, scope: !7)
!69 = !DILocation(line: 51, column: 18, scope: !7)
!70 = !DILocation(line: 54, column: 19, scope: !7)
!71 = !DILocation(line: 55, column: 19, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 24, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 67, column: 20, scope: !7)
!77 = !DILocation(line: 68, column: 20, scope: !7)
!78 = !DILocation(line: 69, column: 20, scope: !7)
!79 = !DILocation(line: 70, column: 20, scope: !7)
!80 = !DILocation(line: 71, column: 24, scope: !7)
!81 = !DILocation(line: 77, column: 20, scope: !7)
!82 = !DILocation(line: 78, column: 24, scope: !7)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 74, column: 20, scope: !7)
!85 = !DILocation(line: 75, column: 20, scope: !7)
!86 = !DILocation(line: 76, column: 20, scope: !7)
!87 = !DILocation(line: 83, column: 20, scope: !7)
!88 = !DILocation(line: 84, column: 20, scope: !7)
!89 = !DILocation(line: 85, column: 24, scope: !7)
!90 = !DILocation(line: 91, column: 20, scope: !7)
!91 = !DILocation(line: 92, column: 24, scope: !7)
!92 = !DILocation(line: 86, column: 20, scope: !7)
!93 = !DILocation(line: 88, column: 20, scope: !7)
!94 = !DILocation(line: 89, column: 20, scope: !7)
!95 = !DILocation(line: 90, column: 20, scope: !7)
!96 = !DILocation(line: 97, column: 20, scope: !7)
!97 = !DILocation(line: 98, column: 24, scope: !7)
!98 = !DILocation(line: 99, column: 28, scope: !7)
!99 = !DILocation(line: 99, column: 40, scope: !7)
!100 = !DILocation(line: 100, column: 25, scope: !7)
!101 = !DILocation(line: 100, column: 37, scope: !7)
!102 = !DILocation(line: 100, column: 4, scope: !7)
