; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mse_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %10 = and i32 %9, 31, !dbg !10
  %11 = lshr i32 %9, 5, !dbg !10
  %12 = shl i32 %9, 2, !dbg !10
  %13 = and i32 %12, 252, !dbg !10
  %14 = zext nneg i32 %13 to i64, !dbg !11
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !11
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !12
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %14, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %14, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !12
  %52 = insertelement <2 x i32> %51, i32 %18, i64 1, !dbg !12
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !12
  %54 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !14
  %55 = insertelement <2 x i32> %54, i32 %24, i64 1, !dbg !14
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !14
  %57 = fsub <2 x float> %53, %56, !dbg !23
  %58 = fmul <2 x float> %57, %57, !dbg !24
  %59 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !12
  %60 = insertelement <2 x i32> %59, i32 %19, i64 1, !dbg !12
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !12
  %62 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !14
  %63 = insertelement <2 x i32> %62, i32 %25, i64 1, !dbg !14
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !14
  %65 = fsub <2 x float> %61, %64, !dbg !23
  %66 = fmul <2 x float> %65, %65, !dbg !24
  %shift = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %67 = fadd <2 x float> %58, %shift, !dbg !25
  %shift1 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %68 = fadd <2 x float> %shift1, %67, !dbg !25
  %69 = fadd <2 x float> %66, %68, !dbg !25
  %70 = extractelement <2 x float> %69, i64 0, !dbg !25
  %71 = bitcast float %70 to i32, !dbg !30
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = fadd float %70, %73, !dbg !25
  %75 = bitcast float %74 to i32, !dbg !30
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = fadd float %74, %77, !dbg !25
  %79 = bitcast float %78 to i32, !dbg !30
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = fadd float %78, %81, !dbg !25
  %83 = bitcast float %82 to i32, !dbg !30
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = fadd float %82, %85, !dbg !25
  %87 = bitcast float %86 to i32, !dbg !30
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = fadd float %86, %89, !dbg !25
  %91 = icmp eq i32 %10, 0, !dbg !30
  %92 = and i32 %11, 1, !dbg !30
  %93 = zext nneg i32 %92 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !30
  %95 = bitcast float %90 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %91) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %96 = icmp slt i32 %9, 2, !dbg !30
  %97 = sext i32 %9 to i64, !dbg !30
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97, !dbg !30
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #3, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = fadd float %100, %102, !dbg !25
  %104 = and i32 %9, 1, !dbg !30
  %105 = icmp eq i32 %104, 0, !dbg !30
  %106 = and i1 %96, %105, !dbg !30
  %107 = bitcast float %103 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %107, i1 %106) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %108 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %109 = fadd float %108, 0.000000e+00, !dbg !31
  %110 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %111 = insertelement <2 x i32> %110, i32 %30, i64 1, !dbg !16
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !16
  %113 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !18
  %114 = insertelement <2 x i32> %113, i32 %36, i64 1, !dbg !18
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !18
  %116 = fsub <2 x float> %112, %115, !dbg !35
  %117 = fmul <2 x float> %116, %116, !dbg !36
  %118 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %119 = insertelement <2 x i32> %118, i32 %31, i64 1, !dbg !16
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !16
  %121 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !18
  %122 = insertelement <2 x i32> %121, i32 %37, i64 1, !dbg !18
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !18
  %124 = fsub <2 x float> %120, %123, !dbg !35
  %125 = fmul <2 x float> %124, %124, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %shift2 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %126 = fadd <2 x float> %117, %shift2, !dbg !39
  %shift3 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %127 = fadd <2 x float> %shift3, %126, !dbg !39
  %128 = fadd <2 x float> %125, %127, !dbg !39
  %129 = extractelement <2 x float> %128, i64 0, !dbg !39
  %130 = bitcast float %129 to i32, !dbg !37
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !37
  %132 = bitcast i32 %131 to float, !dbg !37
  %133 = fadd float %129, %132, !dbg !39
  %134 = bitcast float %133 to i32, !dbg !37
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = fadd float %133, %136, !dbg !39
  %138 = bitcast float %137 to i32, !dbg !37
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !37
  %140 = bitcast i32 %139 to float, !dbg !37
  %141 = fadd float %137, %140, !dbg !39
  %142 = bitcast float %141 to i32, !dbg !37
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !37
  %144 = bitcast i32 %143 to float, !dbg !37
  %145 = fadd float %141, %144, !dbg !39
  %146 = bitcast float %145 to i32, !dbg !37
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !37
  %148 = bitcast i32 %147 to float, !dbg !37
  %149 = fadd float %145, %148, !dbg !39
  %150 = bitcast float %149 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %150, i1 %91) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %151 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #3, !dbg !37
  %152 = bitcast i32 %151 to float, !dbg !37
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !37
  %154 = bitcast i32 %153 to float, !dbg !37
  %155 = fadd float %152, %154, !dbg !39
  %156 = bitcast float %155 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %156, i1 %106) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %157 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %158 = fadd float %157, 0.000000e+00, !dbg !40
  %159 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %160 = insertelement <2 x i32> %159, i32 %42, i64 1, !dbg !20
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !20
  %162 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !22
  %163 = insertelement <2 x i32> %162, i32 %48, i64 1, !dbg !22
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !22
  %165 = fsub <2 x float> %161, %164, !dbg !42
  %166 = fmul <2 x float> %165, %165, !dbg !43
  %167 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !20
  %168 = insertelement <2 x i32> %167, i32 %43, i64 1, !dbg !20
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !20
  %170 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !22
  %171 = insertelement <2 x i32> %170, i32 %49, i64 1, !dbg !22
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !22
  %173 = fsub <2 x float> %169, %172, !dbg !42
  %174 = fmul <2 x float> %173, %173, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %shift4 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %175 = fadd <2 x float> %166, %shift4, !dbg !46
  %shift5 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %176 = fadd <2 x float> %shift5, %175, !dbg !46
  %177 = fadd <2 x float> %174, %176, !dbg !46
  %178 = extractelement <2 x float> %177, i64 0, !dbg !46
  %179 = bitcast float %178 to i32, !dbg !44
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !44
  %181 = bitcast i32 %180 to float, !dbg !44
  %182 = fadd float %178, %181, !dbg !46
  %183 = bitcast float %182 to i32, !dbg !44
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !44
  %185 = bitcast i32 %184 to float, !dbg !44
  %186 = fadd float %182, %185, !dbg !46
  %187 = bitcast float %186 to i32, !dbg !44
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !44
  %189 = bitcast i32 %188 to float, !dbg !44
  %190 = fadd float %186, %189, !dbg !46
  %191 = bitcast float %190 to i32, !dbg !44
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !44
  %193 = bitcast i32 %192 to float, !dbg !44
  %194 = fadd float %190, %193, !dbg !46
  %195 = bitcast float %194 to i32, !dbg !44
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !44
  %197 = bitcast i32 %196 to float, !dbg !44
  %198 = fadd float %194, %197, !dbg !46
  %199 = bitcast float %198 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %199, i1 %91) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %200 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %96) #3, !dbg !44
  %201 = bitcast i32 %200 to float, !dbg !44
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !44
  %203 = bitcast i32 %202 to float, !dbg !44
  %204 = fadd float %201, %203, !dbg !46
  %205 = bitcast float %204 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %205, i1 %106) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %206 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %207 = fadd float %206, 0.000000e+00, !dbg !47
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 2.560000e+02) #3, !dbg !49
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 2.560000e+02) #3, !dbg !50
  %210 = fadd float %208, %209, !dbg !51
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 2.560000e+02) #3, !dbg !52
  %212 = fadd float %210, %211, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %urem = and i32 %9, 63, !dbg !55
  %213 = icmp eq i32 %urem, 0, !dbg !55
  %214 = bitcast float %212 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %0, i1 %213) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czeg7kmvr4tfjez4ogpsw32e2nd5mmsc325lvxc3vinruqgjyn6v.py", directory: "inductor_cache/ze")
!4 = !{ptr @triton_per_fused_add_mse_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_0", linkageName: "triton_per_fused_add_mse_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 40, column: 57, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 73, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 59, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !38)
!40 = !DILocation(line: 73, column: 15, scope: !32, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 45, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !45)
!45 = !DILocation(line: 48, column: 59, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !45)
!47 = !DILocation(line: 73, column: 15, scope: !32, inlinedAt: !48)
!48 = !DILocation(line: 48, column: 45, scope: !7)
!49 = !DILocation(line: 50, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 20, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
!55 = !DILocation(line: 56, column: 63, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
