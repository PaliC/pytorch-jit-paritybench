; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %.lobit, 2, !dbg !12
  %15 = or disjoint i32 %11, %.lobit, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 8, !dbg !15
  %19 = shl i32 %12, 2, !dbg !16
  %20 = and i32 %19, 252, !dbg !16
  %21 = shl i32 %12, 1, !dbg !16
  %22 = and i32 %21, 254, !dbg !16
  %23 = or disjoint i32 %18, %20, !dbg !17
  %24 = or disjoint i32 %18, %22, !dbg !17
  %25 = icmp slt i32 %23, 256, !dbg !18
  %26 = icmp slt i32 %24, 256, !dbg !18
  %27 = shl i32 %15, 8, !dbg !19
  %28 = shl i32 %16, 8, !dbg !19
  %29 = add i32 %23, %27, !dbg !20
  %30 = add i32 %23, %28, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %25) #4, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = and i32 %19, 508, !dbg !22
  %46 = lshr i32 %45, 8, !dbg !22
  %47 = or disjoint i32 %46, %45, !dbg !22
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !22
  %49 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #4, !dbg !22
  %50 = or disjoint i32 %45, 1, !dbg !22
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !22
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %50, !dbg !22
  %53 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !22
  %54 = or disjoint i32 %47, 2, !dbg !22
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !22
  %57 = or disjoint i32 %45, 3, !dbg !22
  %58 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %57, !dbg !22
  %59 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !22
  %61 = load float, ptr addrspace(3) %60, align 8, !dbg !22
  %62 = or disjoint i32 %22, 1, !dbg !22
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !22
  %64 = load float, ptr addrspace(3) %63, align 4, !dbg !22
  %65 = or disjoint i32 %22, 257, !dbg !22
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !22
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  %68 = getelementptr inbounds i8, ptr addrspace(3) %60, i32 1032, !dbg !22
  %69 = load float, ptr addrspace(3) %68, align 8, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %70, i1 true) #4, !dbg !22
  %71 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %71, i1 true) #4, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %72, i1 true) #4, !dbg !22
  %73 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %73, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %74 = load float, ptr addrspace(3) %60, align 8, !dbg !22
  %75 = load float, ptr addrspace(3) %63, align 4, !dbg !22
  %76 = load float, ptr addrspace(3) %66, align 4, !dbg !22
  %77 = load float, ptr addrspace(3) %68, align 8, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !23
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %25) #4, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !24
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %25) #4, !dbg !24
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %90 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %90, i1 true) #4, !dbg !24
  %91 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %91, i1 true) #4, !dbg !24
  %92 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %92, i1 true) #4, !dbg !24
  %93 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %93, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %94 = load float, ptr addrspace(3) %60, align 8, !dbg !24
  %95 = load float, ptr addrspace(3) %63, align 4, !dbg !24
  %96 = load float, ptr addrspace(3) %66, align 4, !dbg !24
  %97 = load float, ptr addrspace(3) %68, align 8, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %98, i1 true) #4, !dbg !24
  %99 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %99, i1 true) #4, !dbg !24
  %100 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %100, i1 true) #4, !dbg !24
  %101 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %101, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %102 = load float, ptr addrspace(3) %60, align 8, !dbg !24
  %103 = load float, ptr addrspace(3) %63, align 4, !dbg !24
  %104 = load float, ptr addrspace(3) %66, align 4, !dbg !24
  %105 = load float, ptr addrspace(3) %68, align 8, !dbg !24
  %106 = sext i32 %24 to i64, !dbg !25
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !25
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %107, i1 %26) #4, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !27
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %109, i1 %26) #4, !dbg !28
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !28
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !28
  %113 = bitcast i32 %111 to float, !dbg !28
  %114 = bitcast i32 %112 to float, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !29
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %115, i1 %26) #4, !dbg !30
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !31
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %117, i1 %26) #4, !dbg !32
  %119 = fadd float %113, 0x3EE4F8B580000000, !dbg !33
  %120 = fadd float %114, 0x3EE4F8B580000000, !dbg !33
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %121, 0, !dbg !34
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %122, 0, !dbg !34
  br i1 %.not.i, label %128, label %123, !dbg !34

123:                                              ; preds = %9
  br i1 %.not1.i, label %126, label %124, !dbg !34

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

128:                                              ; preds = %9
  br i1 %.not1.i, label %131, label %129, !dbg !34

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %124, %126, %129, %131
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i16 = icmp eq i32 %133, 0, !dbg !34
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i19 = icmp eq i32 %134, 0, !dbg !34
  br i1 %.not.i16, label %140, label %135, !dbg !34

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %138, label %136, !dbg !34

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %143, label %141, !dbg !34

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

__nv_sqrtf.exit20:                                ; preds = %136, %138, %141, %143
  %.0.i18 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !34
  %145 = extractvalue { i32, i32 } %108, 1, !dbg !26
  %146 = bitcast i32 %145 to float, !dbg !26
  %147 = fsub float %105, %146, !dbg !35
  %148 = extractvalue { i32, i32 } %108, 0, !dbg !26
  %149 = bitcast i32 %148 to float, !dbg !26
  %150 = fsub float %104, %149, !dbg !35
  %151 = fsub float %103, %146, !dbg !35
  %152 = fsub float %102, %149, !dbg !35
  %153 = fsub float %97, %146, !dbg !35
  %154 = fsub float %96, %149, !dbg !35
  %155 = fsub float %95, %146, !dbg !35
  %156 = fsub float %94, %149, !dbg !35
  %157 = extractvalue { i32, i32 } %118, 1, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = extractvalue { i32, i32 } %118, 0, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = extractvalue { i32, i32 } %116, 1, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = extractvalue { i32, i32 } %116, 0, !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %.frozen = freeze i32 %11, !dbg !36
  %165 = sdiv i32 %.frozen, 256, !dbg !36
  %166 = mul i32 %165, 256, !dbg !37
  %.decomposed = sub i32 %.frozen, %166, !dbg !37
  %167 = and i32 %12, 127, !dbg !16
  %168 = or disjoint i32 %167, %18, !dbg !17
  %169 = or disjoint i32 %168, 128, !dbg !17
  %170 = icmp slt i32 %169, 256, !dbg !18
  %171 = icmp slt i32 %168, 256, !dbg !18
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !38
  %174 = fmul float %156, %172, !dbg !39
  %175 = fmul float %155, %173, !dbg !39
  %176 = fmul float %154, %172, !dbg !39
  %177 = fmul float %153, %173, !dbg !39
  %178 = fmul float %152, %172, !dbg !39
  %179 = fmul float %151, %173, !dbg !39
  %180 = fmul float %150, %172, !dbg !39
  %181 = fmul float %147, %173, !dbg !39
  %182 = fmul float %174, %164, !dbg !40
  %183 = fmul float %175, %162, !dbg !40
  %184 = fmul float %176, %164, !dbg !40
  %185 = fmul float %177, %162, !dbg !40
  %186 = fmul float %178, %164, !dbg !40
  %187 = fmul float %179, %162, !dbg !40
  %188 = fmul float %180, %164, !dbg !40
  %189 = fmul float %181, %162, !dbg !40
  %190 = fadd float %182, %160, !dbg !41
  %191 = fadd float %183, %158, !dbg !41
  %192 = fadd float %184, %160, !dbg !41
  %193 = fadd float %185, %158, !dbg !41
  %194 = fadd float %186, %160, !dbg !41
  %195 = fadd float %187, %158, !dbg !41
  %196 = fadd float %188, %160, !dbg !41
  %197 = fadd float %189, %158, !dbg !41
  %198 = fadd float %61, %190, !dbg !42
  %199 = fadd float %64, %191, !dbg !42
  %200 = fadd float %67, %192, !dbg !42
  %201 = fadd float %69, %193, !dbg !42
  %202 = fadd float %74, %194, !dbg !42
  %203 = fadd float %75, %195, !dbg !42
  %204 = fadd float %76, %196, !dbg !42
  %205 = fadd float %77, %197, !dbg !42
  %206 = shl i32 %168, 8, !dbg !43
  %207 = shl i32 %169, 8, !dbg !43
  %208 = shl i32 %165, 16, !dbg !44
  %209 = add i32 %208, %.decomposed, !dbg !45
  %210 = add i32 %209, %206, !dbg !46
  %211 = add i32 %209, %207, !dbg !46
  %212 = sext i32 %210 to i64, !dbg !47
  %213 = getelementptr float, ptr addrspace(1) %6, i64 %212, !dbg !47
  %214 = sext i32 %211 to i64, !dbg !47
  %215 = getelementptr float, ptr addrspace(1) %6, i64 %214, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %216 = shl i32 %12, 3, !dbg !48
  %217 = and i32 %216, 1016, !dbg !48
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !48
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %217, !dbg !48
  %220 = bitcast float %198 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !48
  %221 = or disjoint i32 %217, 4, !dbg !48
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !48
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %221, !dbg !48
  %224 = bitcast float %199 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !48
  %225 = or disjoint i32 %217, 1, !dbg !48
  %226 = getelementptr float, ptr addrspace(3) %218, i32 %225, !dbg !48
  %227 = bitcast float %200 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !48
  %228 = or disjoint i32 %217, 5, !dbg !48
  %229 = getelementptr float, ptr addrspace(3) %222, i32 %228, !dbg !48
  %230 = bitcast float %201 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !48
  %231 = or disjoint i32 %217, 2, !dbg !48
  %232 = getelementptr float, ptr addrspace(3) %218, i32 %231, !dbg !48
  %233 = bitcast float %202 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !48
  %234 = or disjoint i32 %217, 6, !dbg !48
  %235 = getelementptr float, ptr addrspace(3) %222, i32 %234, !dbg !48
  %236 = bitcast float %203 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !48
  %237 = or disjoint i32 %217, 3, !dbg !48
  %238 = getelementptr float, ptr addrspace(3) %218, i32 %237, !dbg !48
  %239 = bitcast float %204 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !48
  %240 = or disjoint i32 %217, 7, !dbg !48
  %241 = getelementptr float, ptr addrspace(3) %222, i32 %240, !dbg !48
  %242 = bitcast float %205 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.idx = shl nuw nsw i32 %45, 3, !dbg !48
  %243 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !48
  %244 = shl nuw nsw i32 %45, 1, !dbg !48
  %245 = or disjoint i32 %244, 1024, !dbg !48
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !48
  %247 = load <4 x i32>, ptr addrspace(3) %246, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %243, align 16, !dbg !48
  %248 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 4, !dbg !48
  %.extract9 = load i32, ptr addrspace(3) %248, align 4, !dbg !48
  %249 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 8, !dbg !48
  %.extract10 = load i32, ptr addrspace(3) %249, align 8, !dbg !48
  %250 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 12, !dbg !48
  %.extract11 = load i32, ptr addrspace(3) %250, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %213, i1 %171) #4, !dbg !48
  %.extract12 = extractelement <4 x i32> %247, i64 0, !dbg !48
  %.extract13 = extractelement <4 x i32> %247, i64 1, !dbg !48
  %.extract14 = extractelement <4 x i32> %247, i64 2, !dbg !48
  %.extract15 = extractelement <4 x i32> %247, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %215, i1 %170) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4frxsey4iwjr5trqs6hk72r677jec4bfclxen7aaofznvaj5xvl.py", directory: "inductor_cache/4f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 44, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 34, scope: !7)
!44 = !DILocation(line: 50, column: 45, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 39, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 57, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
