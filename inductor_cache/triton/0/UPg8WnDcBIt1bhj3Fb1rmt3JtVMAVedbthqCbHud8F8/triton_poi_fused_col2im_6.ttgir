#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_col2im_6(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<6> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<true> : tensor<128xi1, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<144> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<36> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<576> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<192> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<12> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<48> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<2304> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_12 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_11 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_10 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_9 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.remsi %8, %cst_10 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %4, %cst_9 : tensor<128xi32, #blocked> loc(#loc11)
    %11 = arith.remsi %8, %cst_9 : tensor<128xi32, #blocked> loc(#loc12)
    %12 = arith.divsi %4, %cst_8 : tensor<128xi32, #blocked> loc(#loc13)
    %13 = arith.remsi %12, %cst_7 : tensor<128xi32, #blocked> loc(#loc14)
    %14 = arith.remsi %6, %cst_9 : tensor<128xi32, #blocked> loc(#loc15)
    %15 = arith.divsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc16)
    %16 = arith.remsi %15, %cst_7 : tensor<128xi32, #blocked> loc(#loc17)
    %17 = arith.divsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc18)
    %18 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>, #blocked> loc(#loc19)
    %19 = tt.addptr %18, %7 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc19)
    %20 = tt.load %19, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc20)
    %21 = tt.addptr %18, %9 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc21)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc22)
    %23 = arith.muli %13, %cst_9 : tensor<128xi32, #blocked> loc(#loc23)
    %24 = arith.addi %10, %23 : tensor<128xi32, #blocked> loc(#loc24)
    %25 = arith.muli %16, %cst_10 : tensor<128xi32, #blocked> loc(#loc25)
    %26 = arith.addi %24, %25 : tensor<128xi32, #blocked> loc(#loc26)
    %27 = arith.muli %11, %cst_4 : tensor<128xi32, #blocked> loc(#loc27)
    %28 = arith.addi %26, %27 : tensor<128xi32, #blocked> loc(#loc28)
    %29 = arith.muli %14, %cst_3 : tensor<128xi32, #blocked> loc(#loc29)
    %30 = arith.addi %28, %29 : tensor<128xi32, #blocked> loc(#loc30)
    %31 = arith.muli %17, %cst_5 : tensor<128xi32, #blocked> loc(#loc31)
    %32 = arith.addi %30, %31 : tensor<128xi32, #blocked> loc(#loc32)
    %33 = arith.muli %16, %cst_7 : tensor<128xi32, #blocked> loc(#loc33)
    %34 = arith.addi %13, %33 : tensor<128xi32, #blocked> loc(#loc34)
    %35 = arith.divsi %34, %cst_2 : tensor<128xi32, #blocked> loc(#loc35)
    %36 = arith.addi %32, %35 : tensor<128xi32, #blocked> loc(#loc36)
    %37 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc37)
    %38 = tt.addptr %37, %36 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc37)
    %39 = tt.load %38, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc38)
    %40 = arith.addi %20, %cst_0 : tensor<128xi64, #blocked> loc(#loc39)
    %41 = arith.cmpi slt, %20, %cst : tensor<128xi64, #blocked> loc(#loc40)
    %42 = arith.select %41, %40, %20 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc41)
    %43 = arith.cmpi sge, %42, %cst : tensor<128xi64, #blocked> loc(#loc42)
    %44 = arith.cmpi slt, %42, %cst_0 : tensor<128xi64, #blocked> loc(#loc43)
    %45 = arith.andi %43, %44 : tensor<128xi1, #blocked> loc(#loc44)
    %46 = arith.xori %5, %cst_1 : tensor<128xi1, #blocked> loc(#loc45)
    %47 = arith.ori %45, %46 : tensor<128xi1, #blocked> loc(#loc46)
    tt.assert %47, "index out of bounds: 0 <= tmp4 < 6" : tensor<128xi1, #blocked> loc(#loc47)
    %48 = arith.addi %22, %cst_0 : tensor<128xi64, #blocked> loc(#loc48)
    %49 = arith.cmpi slt, %22, %cst : tensor<128xi64, #blocked> loc(#loc49)
    %50 = arith.select %49, %48, %22 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc50)
    %51 = arith.cmpi sge, %50, %cst : tensor<128xi64, #blocked> loc(#loc51)
    %52 = arith.cmpi slt, %50, %cst_0 : tensor<128xi64, #blocked> loc(#loc52)
    %53 = arith.andi %51, %52 : tensor<128xi1, #blocked> loc(#loc53)
    %54 = arith.ori %53, %46 : tensor<128xi1, #blocked> loc(#loc54)
    tt.assert %54, "index out of bounds: 0 <= tmp9 < 6" : tensor<128xi1, #blocked> loc(#loc55)
    %55 = arith.muli %42, %cst_0 : tensor<128xi64, #blocked> loc(#loc56)
    %56 = arith.addi %50, %55 : tensor<128xi64, #blocked> loc(#loc57)
    %57 = arith.muli %10, %cst_4 : tensor<128xi32, #blocked> loc(#loc58)
    %58 = arith.extsi %57 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc59)
    %59 = arith.addi %56, %58 : tensor<128xi64, #blocked> loc(#loc59)
    %60 = arith.muli %17, %cst_3 : tensor<128xi32, #blocked> loc(#loc60)
    %61 = arith.extsi %60 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc61)
    %62 = arith.addi %59, %61 : tensor<128xi64, #blocked> loc(#loc61)
    %63 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc62)
    %64 = tt.addptr %63, %62 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi64, #blocked> loc(#loc62)
    %65 = tt.atomic_rmw fadd, relaxed, gpu, %64, %39, %5 : (tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xf32, #blocked>, tensor<128xi1, #blocked>) -> tensor<128xf32, #blocked> loc(#loc63)
    tt.return loc(#loc64)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":21:28)
#loc3 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":21:33)
#loc4 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":22:36)
#loc5 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":22:23)
#loc6 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":23:21)
#loc7 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":24:21)
#loc8 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":24:27)
#loc9 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":25:21)
#loc10 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":25:26)
#loc11 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":26:19)
#loc12 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":27:26)
#loc13 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":28:21)
#loc14 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":28:27)
#loc15 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":29:27)
#loc16 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":30:21)
#loc17 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":30:28)
#loc18 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":31:19)
#loc19 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":32:30)
#loc20 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":32:35)
#loc21 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":33:30)
#loc22 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":33:35)
#loc23 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:38)
#loc24 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:36)
#loc25 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:46)
#loc26 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:43)
#loc27 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:54)
#loc28 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:51)
#loc29 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:63)
#loc30 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:59)
#loc31 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:72)
#loc32 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:68)
#loc33 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:86)
#loc34 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:84)
#loc35 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:93)
#loc36 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:78)
#loc37 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:31)
#loc38 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":34:98)
#loc39 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":36:18)
#loc40 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":37:18)
#loc41 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":38:32)
#loc42 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:28)
#loc43 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:44)
#loc44 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:37)
#loc45 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:52)
#loc46 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:50)
#loc47 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":39:60)
#loc48 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":40:18)
#loc49 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":41:18)
#loc50 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":42:32)
#loc51 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":43:28)
#loc52 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":43:44)
#loc53 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":43:37)
#loc54 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":43:50)
#loc55 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":43:60)
#loc56 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:39)
#loc57 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:37)
#loc58 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:49)
#loc59 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:46)
#loc60 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:58)
#loc61 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:54)
#loc62 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:30)
#loc63 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:70)
#loc64 = loc("inductor_cache/qb/cqb5qojiul5so5loidpfalofztnfrpy4n74vsyw7lrsm52iskxlh.py":44:4)
