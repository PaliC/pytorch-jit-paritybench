; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 1, !dbg !12
  %11 = and i32 %10, 6, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %16 = shl i32 %8, 6, !dbg !16
  %17 = and i32 %16, 3840, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 256, !dbg !17
  %19 = shl i32 %18, 12, !dbg !18
  %20 = mul i32 %18, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %20, !dbg !19
  %21 = add nsw i32 %.decomposed, %17, !dbg !20
  %22 = add i32 %21, %19, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = select i1 %14, float %28, float 0.000000e+00, !dbg !24
  %31 = select i1 %14, float %29, float 0.000000e+00, !dbg !24
  %32 = bitcast float %30 to i32, !dbg !25
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = fadd float %30, %34, !dbg !29
  %36 = bitcast float %35 to i32, !dbg !25
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = fadd float %35, %38, !dbg !29
  %40 = bitcast float %39 to i32, !dbg !25
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = fadd float %39, %42, !dbg !29
  %44 = bitcast float %31 to i32, !dbg !25
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !25
  %46 = bitcast i32 %45 to float, !dbg !25
  %47 = fadd float %31, %46, !dbg !29
  %48 = bitcast float %47 to i32, !dbg !25
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !25
  %50 = bitcast i32 %49 to float, !dbg !25
  %51 = fadd float %47, %50, !dbg !29
  %52 = bitcast float %51 to i32, !dbg !25
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = fadd float %51, %54, !dbg !29
  %56 = icmp samesign ult i32 %9, 4, !dbg !25
  %57 = and i32 %15, 1, !dbg !25
  %58 = shl nuw nsw i32 %11, 1, !dbg !25
  %59 = or disjoint i32 %58, %57, !dbg !25
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !25
  %61 = bitcast float %43 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %56) #5, !dbg !25
  %62 = or disjoint i32 %58, 2, !dbg !25
  %63 = or disjoint i32 %62, %57, !dbg !25
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !25
  %65 = bitcast float %55 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %56) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %66 = icmp slt i32 %8, 16, !dbg !25
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = fadd float %69, %71, !dbg !29
  %73 = and i32 %8, 1, !dbg !25
  %74 = icmp eq i32 %73, 0, !dbg !25
  %75 = and i1 %66, %74, !dbg !25
  %76 = bitcast float %72 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %76, i1 %75) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !25
  %78 = load float, ptr addrspace(3) %77, align 16, !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !25
  %80 = load float, ptr addrspace(3) %79, align 8, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %82 = bitcast float %78 to i32, !dbg !31
  %83 = bitcast float %80 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %81, i32 %82, i32 %83, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !31
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.600000e+01) #5, !dbg !31
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 1.600000e+01) #5, !dbg !31
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.600000e+01) #5, !dbg !31
  %89 = fsub float %28, %87, !dbg !32
  %90 = fsub float %29, %88, !dbg !32
  %91 = fmul float %89, %89, !dbg !33
  %92 = fmul float %90, %90, !dbg !33
  %93 = select i1 %14, float %91, float 0.000000e+00, !dbg !34
  %94 = select i1 %14, float %92, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %95 = bitcast float %93 to i32, !dbg !35
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !35
  %97 = bitcast i32 %96 to float, !dbg !35
  %98 = fadd float %93, %97, !dbg !37
  %99 = bitcast float %98 to i32, !dbg !35
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !35
  %101 = bitcast i32 %100 to float, !dbg !35
  %102 = fadd float %98, %101, !dbg !37
  %103 = bitcast float %102 to i32, !dbg !35
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !35
  %105 = bitcast i32 %104 to float, !dbg !35
  %106 = fadd float %102, %105, !dbg !37
  %107 = bitcast float %94 to i32, !dbg !35
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !35
  %109 = bitcast i32 %108 to float, !dbg !35
  %110 = fadd float %94, %109, !dbg !37
  %111 = bitcast float %110 to i32, !dbg !35
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = fadd float %110, %113, !dbg !37
  %115 = bitcast float %114 to i32, !dbg !35
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = fadd float %114, %117, !dbg !37
  %119 = bitcast float %106 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %119, i1 %56) #5, !dbg !35
  %120 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %120, i1 %56) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !35
  %122 = bitcast i32 %121 to float, !dbg !35
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !35
  %124 = bitcast i32 %123 to float, !dbg !35
  %125 = fadd float %122, %124, !dbg !37
  %126 = bitcast float %125 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %126, i1 %75) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %127 = load i32, ptr addrspace(3) %77, align 16, !dbg !35
  %128 = load i32, ptr addrspace(3) %79, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %81, i32 %127, i32 %128, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %129 = load float, ptr addrspace(3) %84, align 4, !dbg !38
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 1.600000e+01) #5, !dbg !39
  %131 = fadd float %130, 0x3EE4F8B580000000, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %132, 0, !dbg !38
  br i1 %.not.i, label %135, label %133, !dbg !38

133:                                              ; preds = %5
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

135:                                              ; preds = %5
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %133, %135
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], !dbg !38
  %137 = or disjoint i32 %7, %12, !dbg !13
  %138 = icmp slt i32 %137, 1024, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %139 = sext i32 %137 to i64, !dbg !42
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !42
  %141 = lshr i32 %9, 3, !dbg !43
  %142 = shl nuw nsw i32 %57, 2, !dbg !43
  %143 = or disjoint i32 %142, %141, !dbg !43
  %144 = icmp eq i32 %143, 0, !dbg !43
  %145 = bitcast float %.0.i to i32, !dbg !43
  %146 = and i1 %144, %138, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %140, i1 %146) #5, !dbg !43
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !44
  %148 = bitcast float %86 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %147, i1 %146) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cocdebynjg2fhwqbg5wvm67ychr2g25o4a6sp6caryy2ukorxbm3.py", directory: "inductor_cache/oc")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_24, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_24, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_24", linkageName: "triton_per_fused__native_batch_norm_legit_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 4, scope: !7)
!42 = !DILocation(line: 51, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
