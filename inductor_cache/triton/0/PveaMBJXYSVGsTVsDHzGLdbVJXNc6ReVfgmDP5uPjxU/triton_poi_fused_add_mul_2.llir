; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 2, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit4 = lshr i32 %14, 5, !dbg !12
  %15 = and i32 %.lobit4, 3, !dbg !12
  %16 = and i32 %14, 3, !dbg !12
  %17 = or disjoint i32 %15, %13, !dbg !13
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = icmp slt i32 %17, 4, !dbg !14
  %20 = icmp slt i32 %18, 4, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = and i32 %14, 31, !dbg !17
  %24 = lshr i32 %14, 2, !dbg !17
  %25 = and i32 %24, 7, !dbg !17
  %26 = lshr i32 %14, 2, !dbg !17
  %27 = and i32 %26, 8, !dbg !17
  %28 = lshr i32 %14, 2, !dbg !17
  %29 = and i32 %28, 16, !dbg !17
  %30 = or disjoint i32 %22, %23, !dbg !18
  %31 = or disjoint i32 %27, %25, !dbg !17
  %32 = or disjoint i32 %31, %29, !dbg !17
  %33 = or disjoint i32 %32, %22, !dbg !18
  %34 = icmp slt i32 %30, 36, !dbg !19
  %35 = icmp slt i32 %33, 36, !dbg !19
  %.frozen = freeze i32 %30, !dbg !20
  %36 = sdiv i32 %.frozen, 9, !dbg !20
  %37 = mul i32 %36, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = mul i32 %17, 36, !dbg !22
  %39 = add i32 %30, %38, !dbg !23
  %40 = sext i32 %39 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !24
  %42 = and i1 %19, %34, !dbg !25
  %43 = and i1 %20, %35, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %42) #2, !dbg !26
  %45 = sext i32 %17 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #2, !dbg !28
  %48 = shl i32 %17, 2, !dbg !29
  %49 = add i32 %36, %48, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %42) #2, !dbg !32
  %53 = bitcast i32 %52 to float, !dbg !32
  %54 = sext i32 %.decomposed to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = add i32 %17, 4, !dbg !35
  %59 = sext i32 %58 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #2, !dbg !37
  %62 = bitcast i32 %61 to float, !dbg !37
  %63 = mul i32 %17, 9, !dbg !38
  %64 = add i32 %.decomposed, %63, !dbg !39
  %65 = mul i32 %36, 36, !dbg !40
  %66 = add i32 %64, %65, !dbg !41
  %67 = sext i32 %66 to i64, !dbg !42
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %42) #2, !dbg !43
  %70 = add i32 %17, 12, !dbg !44
  %71 = sext i32 %70 to i64, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !45
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %19) #2, !dbg !46
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !47
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %42) #2, !dbg !48
  %76 = bitcast i32 %75 to float, !dbg !48
  %77 = sext i32 %64 to i64, !dbg !49
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %77, !dbg !49
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %42) #2, !dbg !50
  %80 = bitcast i32 %79 to float, !dbg !50
  %81 = add i32 %17, 8, !dbg !51
  %82 = sext i32 %81 to i64, !dbg !52
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !52
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #2, !dbg !53
  %85 = bitcast i32 %84 to float, !dbg !53
  %86 = shl i32 %33, 2, !dbg !54
  %87 = add i32 %86, %18, !dbg !55
  %88 = sext i32 %87 to i64, !dbg !56
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %88, !dbg !56
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %43) #2, !dbg !57
  %91 = bitcast i32 %90 to float, !dbg !57
  %92 = add i32 %18, 16, !dbg !58
  %93 = sext i32 %92 to i64, !dbg !59
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !59
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #2, !dbg !60
  %96 = bitcast i32 %95 to float, !dbg !60
  %97 = fmul float %53, %57, !dbg !61
  %98 = fmul float %97, %62, !dbg !62
  %99 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %100 = insertelement <2 x i32> %99, i32 %69, i64 1, !dbg !26
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !26
  %102 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !28
  %103 = insertelement <2 x i32> %102, i32 %73, i64 1, !dbg !28
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !28
  %105 = fmul <2 x float> %101, %104, !dbg !63
  %106 = extractelement <2 x float> %105, i64 0, !dbg !64
  %107 = fadd float %106, %98, !dbg !64
  %108 = extractelement <2 x float> %105, i64 1, !dbg !65
  %109 = fadd float %107, %108, !dbg !65
  %110 = fmul float %76, %80, !dbg !66
  %111 = fmul float %110, %85, !dbg !67
  %112 = fadd float %109, %111, !dbg !68
  %113 = shl i32 %14, 2, !dbg !68
  %114 = and i32 %113, 124, !dbg !68
  %115 = or disjoint i32 %15, %114, !dbg !68
  %116 = and i32 %14, 127, !dbg !68
  %117 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !68
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !68
  %119 = bitcast float %112 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %120 = lshr i32 %116, 2, !dbg !68
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !68
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %116, !dbg !68
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !68
  %124 = fmul float %91, %96, !dbg !69
  %125 = fadd float %124, %123, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !72
  %127 = shl i32 %14, 5, !dbg !73
  %128 = and i32 %127, 96, !dbg !73
  %129 = or disjoint i32 %32, %128, !dbg !73
  %130 = lshr exact i32 %128, 3, !dbg !73
  %131 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %130, !dbg !73
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !73
  %133 = bitcast float %125 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %134 = lshr i32 %116, 5, !dbg !73
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !73
  %136 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %116, !dbg !73
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %126, i1 %42) #2, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca54oo7hq6llhgwkmfk3vfcyeurtjctvmqtxpvhgney6n7x3nlmy.py", directory: "inductor_cache/a5")
!4 = !{ptr @triton_poi_fused_add_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_2", linkageName: "triton_poi_fused_add_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 34, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 39, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 50, scope: !7)
!44 = !DILocation(line: 38, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 41, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 43, scope: !7)
!49 = !DILocation(line: 40, column: 31, scope: !7)
!50 = !DILocation(line: 40, column: 43, scope: !7)
!51 = !DILocation(line: 41, column: 35, scope: !7)
!52 = !DILocation(line: 41, column: 31, scope: !7)
!53 = !DILocation(line: 41, column: 40, scope: !7)
!54 = !DILocation(line: 42, column: 38, scope: !7)
!55 = !DILocation(line: 42, column: 36, scope: !7)
!56 = !DILocation(line: 42, column: 31, scope: !7)
!57 = !DILocation(line: 42, column: 43, scope: !7)
!58 = !DILocation(line: 43, column: 36, scope: !7)
!59 = !DILocation(line: 43, column: 31, scope: !7)
!60 = !DILocation(line: 43, column: 41, scope: !7)
!61 = !DILocation(line: 45, column: 18, scope: !7)
!62 = !DILocation(line: 46, column: 18, scope: !7)
!63 = !DILocation(line: 44, column: 18, scope: !7)
!64 = !DILocation(line: 47, column: 18, scope: !7)
!65 = !DILocation(line: 49, column: 19, scope: !7)
!66 = !DILocation(line: 50, column: 20, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 52, column: 20, scope: !7)
!69 = !DILocation(line: 53, column: 20, scope: !7)
!70 = !DILocation(line: 54, column: 20, scope: !7)
!71 = !DILocation(line: 55, column: 4, scope: !7)
!72 = !DILocation(line: 56, column: 28, scope: !7)
!73 = !DILocation(line: 56, column: 48, scope: !7)
!74 = !DILocation(line: 56, column: 4, scope: !7)
