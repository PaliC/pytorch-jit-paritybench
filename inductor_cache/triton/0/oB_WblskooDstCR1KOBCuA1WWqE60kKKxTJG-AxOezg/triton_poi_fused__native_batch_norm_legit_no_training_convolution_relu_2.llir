; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %17 = or disjoint i32 %14, 514, !dbg !13
  %18 = icmp slt i32 %14, 110323200, !dbg !14
  %19 = icmp slt i32 %16, 110323200, !dbg !14
  %20 = sdiv i32 %14, 143650, !dbg !15
  %21 = sdiv i32 %15, 143650, !dbg !15
  %22 = sdiv i32 %16, 143650, !dbg !15
  %23 = sdiv i32 %17, 143650, !dbg !15
  %.lhs.trunc = trunc nsw i32 %20 to i16, !dbg !16
  %24 = srem i16 %.lhs.trunc, 192, !dbg !16
  %.lhs.trunc36 = trunc nsw i32 %21 to i16, !dbg !16
  %25 = srem i16 %.lhs.trunc36, 192, !dbg !16
  %.lhs.trunc38 = trunc nsw i32 %22 to i16, !dbg !16
  %26 = srem i16 %.lhs.trunc38, 192, !dbg !16
  %.lhs.trunc40 = trunc nsw i32 %23 to i16, !dbg !16
  %27 = srem i16 %.lhs.trunc40, 192, !dbg !16
  %28 = sext i32 %14 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !17
  %30 = sext i32 %16 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %18) #4, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %19) #4, !dbg !18
  %34 = sext i16 %24 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = sext i16 %25 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !19
  %38 = sext i16 %26 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !19
  %40 = sext i16 %27 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #4, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #4, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #4, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #4, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #4, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #4, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #4, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #4, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #4, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #4, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #4, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #4, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #4, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #4, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #4, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #4, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #4, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #4, !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #4, !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #4, !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !24
  %77 = bitcast i32 %76 to float, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %18) #4, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %18) #4, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %18) #4, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %18) #4, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %19) #4, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %19) #4, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #4, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #4, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !27
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %18) #4, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %18) #4, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #4, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #4, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %19) #4, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %19) #4, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %19) #4, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %19) #4, !dbg !28
  %106 = fadd float %67, 0x3EE4F8B580000000, !dbg !29
  %107 = fadd float %69, 0x3EE4F8B580000000, !dbg !29
  %108 = fadd float %71, 0x3EE4F8B580000000, !dbg !29
  %109 = fadd float %73, 0x3EE4F8B580000000, !dbg !29
  %110 = fadd float %75, 0x3EE4F8B580000000, !dbg !29
  %111 = fadd float %77, 0x3EE4F8B580000000, !dbg !29
  %112 = fadd float %79, 0x3EE4F8B580000000, !dbg !29
  %113 = fadd float %81, 0x3EE4F8B580000000, !dbg !29
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %114, 0, !dbg !30
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %115, 0, !dbg !30
  br i1 %.not.i, label %121, label %116, !dbg !30

116:                                              ; preds = %8
  br i1 %.not1.i, label %119, label %117, !dbg !30

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

121:                                              ; preds = %8
  br i1 %.not1.i, label %124, label %122, !dbg !30

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %117, %119, %122, %124
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !30
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i1 = icmp eq i32 %126, 0, !dbg !30
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i4 = icmp eq i32 %127, 0, !dbg !30
  br i1 %.not.i1, label %133, label %128, !dbg !30

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

133:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %136, label %134, !dbg !30

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %129, %131, %134, %136
  %.0.i3 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i6 = icmp eq i32 %138, 0, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i9 = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i6, label %145, label %140, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #4, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #4, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

145:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #4, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #4, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %141, %143, %146, %148
  %.0.i8 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i11 = icmp eq i32 %150, 0, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i14 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i11, label %157, label %152, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %153, %155, %158, %160
  %.0.i13 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !30
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i16 = icmp eq i32 %162, 0, !dbg !30
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i19 = icmp eq i32 %163, 0, !dbg !30
  br i1 %.not.i16, label %169, label %164, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %165, %167, %170, %172
  %.0.i18 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i21 = icmp eq i32 %174, 0, !dbg !30
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i24 = icmp eq i32 %175, 0, !dbg !30
  br i1 %.not.i21, label %181, label %176, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

181:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %184, label %182, !dbg !30

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %177, %179, %182, %184
  %.0.i23 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !30
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i26 = icmp eq i32 %186, 0, !dbg !30
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i29 = icmp eq i32 %187, 0, !dbg !30
  br i1 %.not.i26, label %193, label %188, !dbg !30

188:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %191, label %189, !dbg !30

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

193:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %196, label %194, !dbg !30

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %189, %191, %194, %196
  %.0.i28 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !30
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i31 = icmp eq i32 %198, 0, !dbg !30
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i34 = icmp eq i32 %199, 0, !dbg !30
  br i1 %.not.i31, label %205, label %200, !dbg !30

200:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %203, label %201, !dbg !30

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

205:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %208, label %206, !dbg !30

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %201, %203, %206, %208
  %.0.i33 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %211 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !20
  %212 = insertelement <8 x i32> %211, i32 %48, i64 1, !dbg !20
  %213 = insertelement <8 x i32> %212, i32 %47, i64 2, !dbg !20
  %214 = insertelement <8 x i32> %213, i32 %46, i64 3, !dbg !20
  %215 = insertelement <8 x i32> %214, i32 %45, i64 4, !dbg !20
  %216 = insertelement <8 x i32> %215, i32 %44, i64 5, !dbg !20
  %217 = insertelement <8 x i32> %216, i32 %43, i64 6, !dbg !20
  %218 = insertelement <8 x i32> %217, i32 %42, i64 7, !dbg !20
  %219 = bitcast <8 x i32> %218 to <8 x float>, !dbg !20
  %220 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !22
  %221 = insertelement <8 x i32> %220, i32 %60, i64 1, !dbg !22
  %222 = insertelement <8 x i32> %221, i32 %59, i64 2, !dbg !22
  %223 = insertelement <8 x i32> %222, i32 %58, i64 3, !dbg !22
  %224 = insertelement <8 x i32> %223, i32 %57, i64 4, !dbg !22
  %225 = insertelement <8 x i32> %224, i32 %56, i64 5, !dbg !22
  %226 = insertelement <8 x i32> %225, i32 %55, i64 6, !dbg !22
  %227 = insertelement <8 x i32> %226, i32 %54, i64 7, !dbg !22
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !22
  %229 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %230 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %231 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %232 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %233 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %234 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %235 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %236 = insertelement <8 x i32> poison, i32 %105, i64 0, !dbg !28
  %237 = insertelement <8 x i32> %236, i32 %104, i64 1, !dbg !28
  %238 = insertelement <8 x i32> %237, i32 %103, i64 2, !dbg !28
  %239 = insertelement <8 x i32> %238, i32 %102, i64 3, !dbg !28
  %240 = insertelement <8 x i32> %239, i32 %101, i64 4, !dbg !28
  %241 = insertelement <8 x i32> %240, i32 %100, i64 5, !dbg !28
  %242 = insertelement <8 x i32> %241, i32 %99, i64 6, !dbg !28
  %243 = insertelement <8 x i32> %242, i32 %98, i64 7, !dbg !28
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !28
  %245 = insertelement <8 x i32> poison, i32 %93, i64 0, !dbg !26
  %246 = insertelement <8 x i32> %245, i32 %92, i64 1, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %91, i64 2, !dbg !26
  %248 = insertelement <8 x i32> %247, i32 %90, i64 3, !dbg !26
  %249 = insertelement <8 x i32> %248, i32 %89, i64 4, !dbg !26
  %250 = insertelement <8 x i32> %249, i32 %88, i64 5, !dbg !26
  %251 = insertelement <8 x i32> %250, i32 %87, i64 6, !dbg !26
  %252 = insertelement <8 x i32> %251, i32 %86, i64 7, !dbg !26
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !26
  %254 = and i32 %11, 127, !dbg !12
  %255 = or disjoint i32 %254, %10, !dbg !13
  %256 = or disjoint i32 %255, 896, !dbg !13
  %.frozen = freeze i32 %256, !dbg !31
  %257 = sdiv i32 %.frozen, 4225, !dbg !31
  %258 = or disjoint i32 %255, 768, !dbg !13
  %.frozen57 = freeze i32 %258, !dbg !31
  %259 = sdiv i32 %.frozen57, 4225, !dbg !31
  %260 = or disjoint i32 %255, 640, !dbg !13
  %.frozen59 = freeze i32 %260, !dbg !31
  %261 = sdiv i32 %.frozen59, 4225, !dbg !31
  %262 = or disjoint i32 %255, 512, !dbg !13
  %.frozen61 = freeze i32 %262, !dbg !31
  %263 = sdiv i32 %.frozen61, 4225, !dbg !31
  %264 = or disjoint i32 %254, 384, !dbg !12
  %265 = or disjoint i32 %10, %264, !dbg !13
  %.frozen63 = freeze i32 %265, !dbg !31
  %266 = sdiv i32 %.frozen63, 4225, !dbg !31
  %267 = or disjoint i32 %254, 256, !dbg !12
  %268 = or disjoint i32 %10, %267, !dbg !13
  %.frozen65 = freeze i32 %268, !dbg !31
  %269 = sdiv i32 %.frozen65, 4225, !dbg !31
  %270 = or disjoint i32 %254, 128, !dbg !12
  %271 = or disjoint i32 %10, %270, !dbg !13
  %.frozen67 = freeze i32 %271, !dbg !31
  %272 = sdiv i32 %.frozen67, 4225, !dbg !31
  %.frozen69 = freeze i32 %255, !dbg !31
  %273 = sdiv i32 %.frozen69, 4225, !dbg !31
  %274 = mul i32 %257, 4225, !dbg !32
  %.decomposed = sub i32 %.frozen, %274, !dbg !32
  %275 = mul i32 %259, 4225, !dbg !32
  %.decomposed58 = sub i32 %.frozen57, %275, !dbg !32
  %276 = mul i32 %261, 4225, !dbg !32
  %.decomposed60 = sub i32 %.frozen59, %276, !dbg !32
  %277 = mul i32 %263, 4225, !dbg !32
  %.decomposed62 = sub i32 %.frozen61, %277, !dbg !32
  %278 = mul i32 %266, 4225, !dbg !32
  %.decomposed64 = sub i32 %.frozen63, %278, !dbg !32
  %279 = mul i32 %269, 4225, !dbg !32
  %.decomposed66 = sub i32 %.frozen65, %279, !dbg !32
  %280 = mul i32 %272, 4225, !dbg !32
  %.decomposed68 = sub i32 %.frozen67, %280, !dbg !32
  %281 = mul i32 %273, 4225, !dbg !32
  %.decomposed70 = sub i32 %.frozen69, %281, !dbg !32
  %282 = icmp slt i32 %256, 110323200, !dbg !14
  %283 = icmp slt i32 %258, 110323200, !dbg !14
  %284 = icmp slt i32 %260, 110323200, !dbg !14
  %285 = icmp slt i32 %262, 110323200, !dbg !14
  %286 = icmp slt i32 %265, 110323200, !dbg !14
  %287 = icmp slt i32 %268, 110323200, !dbg !14
  %288 = icmp slt i32 %271, 110323200, !dbg !14
  %289 = icmp slt i32 %255, 110323200, !dbg !14
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !33
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !33
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !33
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !33
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !33
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !33
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !33
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !33
  %298 = insertelement <8 x i32> poison, i32 %210, i64 0, !dbg !18
  %299 = insertelement <8 x i32> %298, i32 %229, i64 1, !dbg !18
  %300 = insertelement <8 x i32> %299, i32 %230, i64 2, !dbg !18
  %301 = insertelement <8 x i32> %300, i32 %231, i64 3, !dbg !18
  %302 = insertelement <8 x i32> %301, i32 %232, i64 4, !dbg !18
  %303 = insertelement <8 x i32> %302, i32 %233, i64 5, !dbg !18
  %304 = insertelement <8 x i32> %303, i32 %234, i64 6, !dbg !18
  %305 = insertelement <8 x i32> %304, i32 %235, i64 7, !dbg !18
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !18
  %307 = fadd <8 x float> %306, %219, !dbg !34
  %308 = fsub <8 x float> %307, %228, !dbg !35
  %309 = insertelement <8 x float> poison, float %297, i64 0, !dbg !36
  %310 = insertelement <8 x float> %309, float %296, i64 1, !dbg !36
  %311 = insertelement <8 x float> %310, float %295, i64 2, !dbg !36
  %312 = insertelement <8 x float> %311, float %294, i64 3, !dbg !36
  %313 = insertelement <8 x float> %312, float %293, i64 4, !dbg !36
  %314 = insertelement <8 x float> %313, float %292, i64 5, !dbg !36
  %315 = insertelement <8 x float> %314, float %291, i64 6, !dbg !36
  %316 = insertelement <8 x float> %315, float %290, i64 7, !dbg !36
  %317 = fmul <8 x float> %308, %316, !dbg !36
  %318 = fmul <8 x float> %317, %253, !dbg !37
  %319 = fadd <8 x float> %318, %244, !dbg !38
  %320 = fcmp olt <8 x float> %319, zeroinitializer, !dbg !39
  %321 = extractelement <8 x i1> %320, i64 7, !dbg !43
  %322 = extractelement <8 x i1> %320, i64 6, !dbg !43
  %323 = extractelement <8 x i1> %320, i64 5, !dbg !43
  %324 = extractelement <8 x i1> %320, i64 4, !dbg !43
  %325 = extractelement <8 x i1> %320, i64 3, !dbg !43
  %326 = extractelement <8 x i1> %320, i64 2, !dbg !43
  %327 = extractelement <8 x i1> %320, i64 1, !dbg !43
  %328 = extractelement <8 x i1> %320, i64 0, !dbg !43
  %bc = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %329 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %bc42 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %330 = extractelement <8 x i32> %bc42, i64 6, !dbg !44
  %bc43 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %331 = extractelement <8 x i32> %bc43, i64 5, !dbg !44
  %bc44 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %332 = extractelement <8 x i32> %bc44, i64 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %29, i1 %18) #4, !dbg !44
  %bc45 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %333 = extractelement <8 x i32> %bc45, i64 3, !dbg !44
  %bc46 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %334 = extractelement <8 x i32> %bc46, i64 2, !dbg !44
  %bc47 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %335 = extractelement <8 x i32> %bc47, i64 1, !dbg !44
  %bc48 = bitcast <8 x float> %307 to <8 x i32>, !dbg !44
  %336 = extractelement <8 x i32> %bc48, i64 0, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %31, i1 %19) #4, !dbg !44
  %337 = mul i32 %273, 4256, !dbg !45
  %338 = mul i32 %272, 4256, !dbg !45
  %339 = mul i32 %269, 4256, !dbg !45
  %340 = mul i32 %266, 4256, !dbg !45
  %341 = mul i32 %263, 4256, !dbg !45
  %342 = mul i32 %261, 4256, !dbg !45
  %343 = mul i32 %259, 4256, !dbg !45
  %344 = mul i32 %257, 4256, !dbg !45
  %345 = add i32 %337, %.decomposed70, !dbg !46
  %346 = add i32 %338, %.decomposed68, !dbg !46
  %347 = add i32 %339, %.decomposed66, !dbg !46
  %348 = add i32 %340, %.decomposed64, !dbg !46
  %349 = add i32 %341, %.decomposed62, !dbg !46
  %350 = add i32 %342, %.decomposed60, !dbg !46
  %351 = add i32 %343, %.decomposed58, !dbg !46
  %352 = add i32 %344, %.decomposed, !dbg !46
  %353 = sext i32 %345 to i64, !dbg !47
  %354 = getelementptr float, ptr addrspace(1) %6, i64 %353, !dbg !47
  %355 = sext i32 %346 to i64, !dbg !47
  %356 = getelementptr float, ptr addrspace(1) %6, i64 %355, !dbg !47
  %357 = sext i32 %347 to i64, !dbg !47
  %358 = getelementptr float, ptr addrspace(1) %6, i64 %357, !dbg !47
  %359 = sext i32 %348 to i64, !dbg !47
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !47
  %361 = sext i32 %349 to i64, !dbg !47
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %361, !dbg !47
  %363 = sext i32 %350 to i64, !dbg !47
  %364 = getelementptr float, ptr addrspace(1) %6, i64 %363, !dbg !47
  %365 = sext i32 %351 to i64, !dbg !47
  %366 = getelementptr float, ptr addrspace(1) %6, i64 %365, !dbg !47
  %367 = sext i32 %352 to i64, !dbg !47
  %368 = getelementptr float, ptr addrspace(1) %6, i64 %367, !dbg !47
  %369 = zext nneg i32 %13 to i64, !dbg !48
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %369, !dbg !48
  %bc49 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %371 = extractelement <8 x i32> %bc49, i64 7, !dbg !48
  %372 = select i1 %321, i32 0, i32 %371, !dbg !43
  %bc50 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %373 = extractelement <8 x i32> %bc50, i64 6, !dbg !48
  %374 = select i1 %322, i32 0, i32 %373, !dbg !43
  %bc51 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %375 = extractelement <8 x i32> %bc51, i64 5, !dbg !48
  %376 = select i1 %323, i32 0, i32 %375, !dbg !43
  %bc52 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %377 = extractelement <8 x i32> %bc52, i64 4, !dbg !48
  %378 = select i1 %324, i32 0, i32 %377, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %370, i32 %372, i32 %374, i32 %376, i32 %378, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %379 = zext nneg i32 %254 to i64, !dbg !48
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %379, !dbg !48
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !48
  %382 = zext nneg i32 %270 to i64, !dbg !48
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %382, !dbg !48
  %384 = load i32, ptr addrspace(3) %383, align 4, !dbg !48
  %385 = zext nneg i32 %267 to i64, !dbg !48
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %385, !dbg !48
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !48
  %388 = zext nneg i32 %264 to i64, !dbg !48
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %388, !dbg !48
  %390 = load i32, ptr addrspace(3) %389, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc53 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %391 = extractelement <8 x i32> %bc53, i64 3, !dbg !48
  %392 = select i1 %325, i32 0, i32 %391, !dbg !43
  %bc54 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %393 = extractelement <8 x i32> %bc54, i64 2, !dbg !48
  %394 = select i1 %326, i32 0, i32 %393, !dbg !43
  %bc55 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %395 = extractelement <8 x i32> %bc55, i64 1, !dbg !48
  %396 = select i1 %327, i32 0, i32 %395, !dbg !43
  %bc56 = bitcast <8 x float> %319 to <8 x i32>, !dbg !48
  %397 = extractelement <8 x i32> %bc56, i64 0, !dbg !48
  %398 = select i1 %328, i32 0, i32 %397, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %370, i32 %392, i32 %394, i32 %396, i32 %398, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %399 = load i32, ptr addrspace(3) %380, align 4, !dbg !48
  %400 = load i32, ptr addrspace(3) %383, align 4, !dbg !48
  %401 = load i32, ptr addrspace(3) %386, align 4, !dbg !48
  %402 = load i32, ptr addrspace(3) %389, align 4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %354, i1 %289) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %356, i1 %288) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %358, i1 %287) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %390, ptr addrspace(1) %360, i1 %286) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %362, i1 %285) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %364, i1 %284) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %366, i1 %283) #4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %368, i1 %282) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cev5rh47nsyt76hcjumtfektp6d6zggq5q466a4p7t6vyz7bklpg.py", directory: "inductor_cache/ev")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 31, scope: !7)
!17 = !DILocation(line: 28, column: 34, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 26, scope: !7)
!31 = !DILocation(line: 27, column: 19, scope: !7)
!32 = !DILocation(line: 26, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 47, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
