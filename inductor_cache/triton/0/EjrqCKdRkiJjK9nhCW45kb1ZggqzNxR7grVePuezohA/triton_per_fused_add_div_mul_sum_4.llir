; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mul_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = and i32 %11, 31, !dbg !10
  %13 = lshr i32 %11, 5, !dbg !10
  %14 = and i32 %11, 63, !dbg !10
  %15 = and i32 %11, 15, !dbg !11
  %16 = zext nneg i32 %14 to i64, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !12
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !13
  %19 = bitcast i32 %18 to float, !dbg !13
  %20 = zext nneg i32 %15 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !15
  %23 = bitcast i32 %22 to float, !dbg !15
  %24 = or disjoint i32 %15, 16, !dbg !16
  %25 = zext nneg i32 %24 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = or disjoint i32 %15, 32, !dbg !19
  %30 = zext nneg i32 %29 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = or disjoint i32 %15, 48, !dbg !22
  %35 = zext nneg i32 %34 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !36
  %56 = bitcast i32 %55 to float, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !38
  %59 = bitcast i32 %58 to float, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !39
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !40
  %62 = bitcast i32 %61 to float, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !42
  %65 = bitcast i32 %64 to float, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !43
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !44
  %68 = bitcast i32 %67 to float, !dbg !44
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !45
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !46
  %71 = bitcast i32 %70 to float, !dbg !46
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !47
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !48
  %74 = bitcast i32 %73 to float, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !49
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !50
  %77 = bitcast i32 %76 to float, !dbg !50
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %16, !dbg !51
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !52
  %80 = bitcast i32 %79 to float, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !53
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !54
  %83 = bitcast i32 %82 to float, !dbg !54
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !55
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !56
  %86 = bitcast i32 %85 to float, !dbg !56
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !57
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !58
  %89 = bitcast i32 %88 to float, !dbg !58
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !59
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !60
  %92 = bitcast i32 %91 to float, !dbg !60
  %93 = getelementptr float, ptr addrspace(1) %8, i64 %16, !dbg !61
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !62
  %95 = bitcast i32 %94 to float, !dbg !62
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %19) #3, !dbg !63
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %23, float %23) #3, !dbg !64
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %28) #3, !dbg !65
  %99 = fadd float %97, %98, !dbg !66
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %33) #3, !dbg !67
  %101 = fadd float %99, %100, !dbg !68
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %38) #3, !dbg !69
  %103 = fadd float %101, %102, !dbg !70
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %103) #3, !dbg !71
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %104) #3, !dbg !72
  %106 = fmul float %105, %41, !dbg !73
  %107 = bitcast float %106 to i32, !dbg !74
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !74
  %109 = bitcast i32 %108 to float, !dbg !74
  %110 = fadd float %106, %109, !dbg !78
  %111 = bitcast float %110 to i32, !dbg !74
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !74
  %113 = bitcast i32 %112 to float, !dbg !74
  %114 = fadd float %110, %113, !dbg !78
  %115 = bitcast float %114 to i32, !dbg !74
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !74
  %117 = bitcast i32 %116 to float, !dbg !74
  %118 = fadd float %114, %117, !dbg !78
  %119 = bitcast float %118 to i32, !dbg !74
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !74
  %121 = bitcast i32 %120 to float, !dbg !74
  %122 = fadd float %118, %121, !dbg !78
  %123 = bitcast float %122 to i32, !dbg !74
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !74
  %125 = bitcast i32 %124 to float, !dbg !74
  %126 = fadd float %122, %125, !dbg !78
  %127 = icmp eq i32 %12, 0, !dbg !74
  %128 = and i32 %13, 1, !dbg !74
  %129 = zext nneg i32 %128 to i64, !dbg !74
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !74
  %131 = bitcast float %126 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %127) #3, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %132 = icmp slt i32 %11, 2, !dbg !74
  %133 = sext i32 %11 to i64, !dbg !74
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !74
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !74
  %136 = bitcast i32 %135 to float, !dbg !74
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !74
  %138 = bitcast i32 %137 to float, !dbg !74
  %139 = fadd float %136, %138, !dbg !78
  %140 = and i32 %11, 1, !dbg !74
  %141 = icmp eq i32 %140, 0, !dbg !74
  %142 = and i1 %132, %141, !dbg !74
  %143 = bitcast float %139 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %143, i1 %142) #3, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %144 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !74
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %44) #3, !dbg !80
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %47) #3, !dbg !81
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %50) #3, !dbg !82
  %148 = fadd float %146, %147, !dbg !83
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %53) #3, !dbg !84
  %150 = fadd float %148, %149, !dbg !85
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %56) #3, !dbg !86
  %152 = fadd float %150, %151, !dbg !87
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %152) #3, !dbg !88
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %153) #3, !dbg !89
  %155 = fmul float %154, %59, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %156 = bitcast float %155 to i32, !dbg !91
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !91
  %158 = bitcast i32 %157 to float, !dbg !91
  %159 = fadd float %155, %158, !dbg !93
  %160 = bitcast float %159 to i32, !dbg !91
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !91
  %162 = bitcast i32 %161 to float, !dbg !91
  %163 = fadd float %159, %162, !dbg !93
  %164 = bitcast float %163 to i32, !dbg !91
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !91
  %166 = bitcast i32 %165 to float, !dbg !91
  %167 = fadd float %163, %166, !dbg !93
  %168 = bitcast float %167 to i32, !dbg !91
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !91
  %170 = bitcast i32 %169 to float, !dbg !91
  %171 = fadd float %167, %170, !dbg !93
  %172 = bitcast float %171 to i32, !dbg !91
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !91
  %174 = bitcast i32 %173 to float, !dbg !91
  %175 = fadd float %171, %174, !dbg !93
  %176 = bitcast float %175 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %176, i1 %127) #3, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %177 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !91
  %178 = bitcast i32 %177 to float, !dbg !91
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 1, i32 31), !dbg !91
  %180 = bitcast i32 %179 to float, !dbg !91
  %181 = fadd float %178, %180, !dbg !93
  %182 = bitcast float %181 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %182, i1 %142) #3, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %183 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %62) #3, !dbg !94
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %65) #3, !dbg !95
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %68) #3, !dbg !96
  %187 = fadd float %185, %186, !dbg !97
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %71) #3, !dbg !98
  %189 = fadd float %187, %188, !dbg !99
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %74) #3, !dbg !100
  %191 = fadd float %189, %190, !dbg !101
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %191) #3, !dbg !102
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %192) #3, !dbg !103
  %194 = fmul float %193, %77, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %195 = bitcast float %194 to i32, !dbg !105
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !105
  %197 = bitcast i32 %196 to float, !dbg !105
  %198 = fadd float %194, %197, !dbg !107
  %199 = bitcast float %198 to i32, !dbg !105
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !105
  %201 = bitcast i32 %200 to float, !dbg !105
  %202 = fadd float %198, %201, !dbg !107
  %203 = bitcast float %202 to i32, !dbg !105
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !105
  %205 = bitcast i32 %204 to float, !dbg !105
  %206 = fadd float %202, %205, !dbg !107
  %207 = bitcast float %206 to i32, !dbg !105
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !105
  %209 = bitcast i32 %208 to float, !dbg !105
  %210 = fadd float %206, %209, !dbg !107
  %211 = bitcast float %210 to i32, !dbg !105
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !105
  %213 = bitcast i32 %212 to float, !dbg !105
  %214 = fadd float %210, %213, !dbg !107
  %215 = bitcast float %214 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %215, i1 %127) #3, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %216 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !105
  %217 = bitcast i32 %216 to float, !dbg !105
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !105
  %219 = bitcast i32 %218 to float, !dbg !105
  %220 = fadd float %217, %219, !dbg !107
  %221 = bitcast float %220 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %221, i1 %142) #3, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %222 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !105
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %80) #3, !dbg !108
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %83) #3, !dbg !109
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %86) #3, !dbg !110
  %226 = fadd float %224, %225, !dbg !111
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %89) #3, !dbg !112
  %228 = fadd float %226, %227, !dbg !113
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %92) #3, !dbg !114
  %230 = fadd float %228, %229, !dbg !115
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %230) #3, !dbg !116
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %231) #3, !dbg !117
  %233 = fmul float %232, %95, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %234 = bitcast float %233 to i32, !dbg !119
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 16, i32 31), !dbg !119
  %236 = bitcast i32 %235 to float, !dbg !119
  %237 = fadd float %233, %236, !dbg !121
  %238 = bitcast float %237 to i32, !dbg !119
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !119
  %240 = bitcast i32 %239 to float, !dbg !119
  %241 = fadd float %237, %240, !dbg !121
  %242 = bitcast float %241 to i32, !dbg !119
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !119
  %244 = bitcast i32 %243 to float, !dbg !119
  %245 = fadd float %241, %244, !dbg !121
  %246 = bitcast float %245 to i32, !dbg !119
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !119
  %248 = bitcast i32 %247 to float, !dbg !119
  %249 = fadd float %245, %248, !dbg !121
  %250 = bitcast float %249 to i32, !dbg !119
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !119
  %252 = bitcast i32 %251 to float, !dbg !119
  %253 = fadd float %249, %252, !dbg !121
  %254 = bitcast float %253 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %254, i1 %127) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %255 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !119
  %256 = bitcast i32 %255 to float, !dbg !119
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !119
  %258 = bitcast i32 %257 to float, !dbg !119
  %259 = fadd float %256, %258, !dbg !121
  %260 = bitcast float %259 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %260, i1 %142) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %261 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !119
  %262 = fadd float %144, 0.000000e+00, !dbg !122
  %263 = fadd float %262, %183, !dbg !123
  %264 = fadd float %263, %222, !dbg !124
  %265 = fadd float %264, %261, !dbg !125
  %266 = fmul float %265, 0x3F50624DE0000000, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %267 = icmp eq i32 %14, 0, !dbg !128
  %268 = bitcast float %266 to i32, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %0, i1 %267) #3, !dbg !128
  ret void, !dbg !129
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg2xkp7dj4jmjerzslaxrqpq7ob4lsoeks6rghab2jx3hkodm76f.py", directory: "inductor_cache/g2")
!4 = !{ptr @triton_per_fused_add_div_mul_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mul_sum_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mul_sum_4", linkageName: "triton_per_fused_add_div_mul_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 30, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 41, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 41, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 41, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 36, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 41, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 41, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 41, scope: !7)
!49 = !DILocation(line: 48, column: 31, scope: !7)
!50 = !DILocation(line: 48, column: 36, scope: !7)
!51 = !DILocation(line: 49, column: 31, scope: !7)
!52 = !DILocation(line: 49, column: 36, scope: !7)
!53 = !DILocation(line: 50, column: 31, scope: !7)
!54 = !DILocation(line: 50, column: 36, scope: !7)
!55 = !DILocation(line: 51, column: 31, scope: !7)
!56 = !DILocation(line: 51, column: 41, scope: !7)
!57 = !DILocation(line: 52, column: 31, scope: !7)
!58 = !DILocation(line: 52, column: 41, scope: !7)
!59 = !DILocation(line: 53, column: 31, scope: !7)
!60 = !DILocation(line: 53, column: 41, scope: !7)
!61 = !DILocation(line: 54, column: 31, scope: !7)
!62 = !DILocation(line: 54, column: 36, scope: !7)
!63 = !DILocation(line: 55, column: 18, scope: !7)
!64 = !DILocation(line: 56, column: 18, scope: !7)
!65 = !DILocation(line: 57, column: 18, scope: !7)
!66 = !DILocation(line: 58, column: 18, scope: !7)
!67 = !DILocation(line: 59, column: 18, scope: !7)
!68 = !DILocation(line: 60, column: 18, scope: !7)
!69 = !DILocation(line: 61, column: 20, scope: !7)
!70 = !DILocation(line: 62, column: 19, scope: !7)
!71 = !DILocation(line: 63, column: 19, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 20, scope: !7)
!74 = !DILocation(line: 267, column: 36, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!77 = !DILocation(line: 67, column: 26, scope: !7)
!78 = !DILocation(line: 256, column: 15, scope: !79, inlinedAt: !77)
!79 = distinct !DILexicalBlockFile(scope: !75, file: !76, discriminator: 0)
!80 = !DILocation(line: 68, column: 20, scope: !7)
!81 = !DILocation(line: 69, column: 20, scope: !7)
!82 = !DILocation(line: 70, column: 20, scope: !7)
!83 = !DILocation(line: 71, column: 20, scope: !7)
!84 = !DILocation(line: 72, column: 20, scope: !7)
!85 = !DILocation(line: 73, column: 20, scope: !7)
!86 = !DILocation(line: 74, column: 20, scope: !7)
!87 = !DILocation(line: 75, column: 20, scope: !7)
!88 = !DILocation(line: 76, column: 20, scope: !7)
!89 = !DILocation(line: 77, column: 20, scope: !7)
!90 = !DILocation(line: 78, column: 20, scope: !7)
!91 = !DILocation(line: 267, column: 36, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 80, column: 26, scope: !7)
!93 = !DILocation(line: 256, column: 15, scope: !79, inlinedAt: !92)
!94 = !DILocation(line: 81, column: 20, scope: !7)
!95 = !DILocation(line: 82, column: 20, scope: !7)
!96 = !DILocation(line: 83, column: 20, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 85, column: 20, scope: !7)
!99 = !DILocation(line: 86, column: 20, scope: !7)
!100 = !DILocation(line: 87, column: 20, scope: !7)
!101 = !DILocation(line: 88, column: 20, scope: !7)
!102 = !DILocation(line: 89, column: 20, scope: !7)
!103 = !DILocation(line: 90, column: 20, scope: !7)
!104 = !DILocation(line: 91, column: 20, scope: !7)
!105 = !DILocation(line: 267, column: 36, scope: !75, inlinedAt: !106)
!106 = !DILocation(line: 93, column: 26, scope: !7)
!107 = !DILocation(line: 256, column: 15, scope: !79, inlinedAt: !106)
!108 = !DILocation(line: 94, column: 20, scope: !7)
!109 = !DILocation(line: 95, column: 20, scope: !7)
!110 = !DILocation(line: 96, column: 20, scope: !7)
!111 = !DILocation(line: 97, column: 20, scope: !7)
!112 = !DILocation(line: 98, column: 20, scope: !7)
!113 = !DILocation(line: 99, column: 20, scope: !7)
!114 = !DILocation(line: 100, column: 20, scope: !7)
!115 = !DILocation(line: 101, column: 20, scope: !7)
!116 = !DILocation(line: 102, column: 20, scope: !7)
!117 = !DILocation(line: 103, column: 20, scope: !7)
!118 = !DILocation(line: 104, column: 20, scope: !7)
!119 = !DILocation(line: 267, column: 36, scope: !75, inlinedAt: !120)
!120 = !DILocation(line: 106, column: 26, scope: !7)
!121 = !DILocation(line: 256, column: 15, scope: !79, inlinedAt: !120)
!122 = !DILocation(line: 108, column: 20, scope: !7)
!123 = !DILocation(line: 109, column: 20, scope: !7)
!124 = !DILocation(line: 110, column: 20, scope: !7)
!125 = !DILocation(line: 111, column: 20, scope: !7)
!126 = !DILocation(line: 113, column: 20, scope: !7)
!127 = !DILocation(line: 114, column: 4, scope: !7)
!128 = !DILocation(line: 115, column: 71, scope: !7)
!129 = !DILocation(line: 115, column: 4, scope: !7)
