; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = icmp slt i32 %17, 80896, !dbg !14
  %20 = icmp slt i32 %18, 80896, !dbg !14
  %21 = srem i32 %17, 16, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen, 20224, !dbg !16
  %.frozen59 = freeze i32 %18, !dbg !16
  %23 = sdiv i32 %.frozen59, 20224, !dbg !16
  %24 = mul i32 %22, 20224, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = mul i32 %23, 20224, !dbg !17
  %srem1.decomposed = sub i32 %.frozen59, %25, !dbg !17
  %26 = mul nsw i32 %22, 19456, !dbg !18
  %27 = mul nsw i32 %23, 19456, !dbg !18
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !19
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !19
  %30 = sext i32 %28 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = mul nsw i32 %22, 16768, !dbg !21
  %35 = mul nsw i32 %23, 16768, !dbg !21
  %36 = add nsw i32 %34, %srem.decomposed, !dbg !22
  %37 = add nsw i32 %35, %srem1.decomposed, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !23
  %40 = sext i32 %37 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !24
  %44 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !25
  %45 = insertelement <2 x i32> %44, i32 %17, i64 1, !dbg !25
  %46 = sdiv <2 x i32> %45, splat (i32 16), !dbg !25
  %47 = srem <2 x i32> %46, splat (i32 1264), !dbg !26
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !27
  %49 = sext i32 %48 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !28
  %51 = extractelement <2 x i32> %47, i64 0, !dbg !27
  %52 = sext i32 %51 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %19) #3, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %19) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %19) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %19) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %19) #3, !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %19) #3, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %19) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %19) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #3, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #3, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %49, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %52, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %19) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %20) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %20) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %20) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %20) #3, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !34
  %91 = getelementptr float, ptr addrspace(1) %7, i64 %52, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %19) #3, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %19) #3, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %19) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %19) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %20) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %20) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %20) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %20) #3, !dbg !35
  %100 = icmp slt <2 x i32> %47, splat (i32 1024), !dbg !36
  %101 = extractelement <2 x i1> %100, i64 1, !dbg !37
  %102 = and i1 %19, %101, !dbg !37
  %103 = extractelement <2 x i1> %100, i64 0, !dbg !37
  %104 = and i1 %20, %103, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !38
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !39
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !39
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !40
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !40
  %111 = add nsw <2 x i32> %47, splat (i32 -1024), !dbg !41
  %112 = extractelement <2 x i32> %111, i64 1, !dbg !42
  %113 = icmp ult i32 %112, 192, !dbg !42
  %114 = extractelement <2 x i32> %111, i64 0, !dbg !42
  %115 = icmp ult i32 %114, 192, !dbg !42
  %116 = shl nsw i32 %48, 4, !dbg !27
  %117 = shl nsw i32 %51, 4, !dbg !27
  %118 = add nsw i32 %21, -16384, !dbg !27
  %119 = add nsw i32 %118, %26, !dbg !43
  %120 = add nsw i32 %119, %116, !dbg !44
  %121 = add nsw i32 %118, %27, !dbg !43
  %122 = add nsw i32 %121, %117, !dbg !44
  %123 = sext i32 %120 to i64, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !45
  %125 = sext i32 %122 to i64, !dbg !45
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !45
  %127 = and i1 %19, %113, !dbg !46
  %128 = and i1 %20, %115, !dbg !46
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #3, !dbg !47
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !47
  %131 = add nsw i32 %48, -1216, !dbg !48
  %132 = icmp ult i32 %131, 24, !dbg !48
  %133 = add nsw i32 %51, -1216, !dbg !48
  %134 = icmp ult i32 %133, 24, !dbg !48
  %135 = add nsw i32 %21, 16384, !dbg !49
  %136 = add nsw i32 %34, %135, !dbg !50
  %137 = add nsw i32 %136, -19456, !dbg !51
  %138 = add nsw i32 %137, %116, !dbg !52
  %139 = add nsw i32 %35, %135, !dbg !50
  %140 = add nsw i32 %139, -19456, !dbg !51
  %141 = add nsw i32 %140, %117, !dbg !52
  %142 = sext i32 %138 to i64, !dbg !53
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !53
  %144 = sext i32 %141 to i64, !dbg !53
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !53
  %146 = and i1 %19, %132, !dbg !54
  %147 = and i1 %20, %134, !dbg !54
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146) #3, !dbg !55
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #3, !dbg !55
  %150 = icmp sgt i32 %48, 1239, !dbg !56
  %151 = icmp sgt i32 %51, 1239, !dbg !56
  %152 = add nsw i32 %136, -19840, !dbg !57
  %153 = add nsw i32 %152, %116, !dbg !58
  %154 = add nsw i32 %139, -19840, !dbg !57
  %155 = add nsw i32 %154, %117, !dbg !58
  %156 = sext i32 %153 to i64, !dbg !59
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !59
  %158 = sext i32 %155 to i64, !dbg !59
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !59
  %160 = and i1 %19, %150, !dbg !60
  %161 = and i1 %20, %151, !dbg !60
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #3, !dbg !61
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #3, !dbg !61
  %164 = fadd float %65, 0x3F50624DE0000000, !dbg !62
  %165 = fadd float %67, 0x3F50624DE0000000, !dbg !62
  %166 = fadd float %69, 0x3F50624DE0000000, !dbg !62
  %167 = fadd float %71, 0x3F50624DE0000000, !dbg !62
  %168 = fadd float %73, 0x3F50624DE0000000, !dbg !62
  %169 = fadd float %75, 0x3F50624DE0000000, !dbg !62
  %170 = fadd float %77, 0x3F50624DE0000000, !dbg !62
  %171 = fadd float %79, 0x3F50624DE0000000, !dbg !62
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i = icmp eq i32 %172, 0, !dbg !63
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i = icmp eq i32 %173, 0, !dbg !63
  br i1 %.not.i, label %179, label %174, !dbg !63

174:                                              ; preds = %11
  br i1 %.not1.i, label %177, label %175, !dbg !63

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

179:                                              ; preds = %11
  br i1 %.not1.i, label %182, label %180, !dbg !63

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

__nv_sqrtf.exit:                                  ; preds = %175, %177, %180, %182
  %.0.i = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !63
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i9 = icmp eq i32 %184, 0, !dbg !63
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i12 = icmp eq i32 %185, 0, !dbg !63
  br i1 %.not.i9, label %191, label %186, !dbg !63

186:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %189, label %187, !dbg !63

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !63
  br label %__nv_sqrtf.exit13, !dbg !63

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !63
  br label %__nv_sqrtf.exit13, !dbg !63

191:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %194, label %192, !dbg !63

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !63
  br label %__nv_sqrtf.exit13, !dbg !63

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !63
  br label %__nv_sqrtf.exit13, !dbg !63

__nv_sqrtf.exit13:                                ; preds = %187, %189, %192, %194
  %.0.i11 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !63
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i14 = icmp eq i32 %196, 0, !dbg !63
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i17 = icmp eq i32 %197, 0, !dbg !63
  br i1 %.not.i14, label %203, label %198, !dbg !63

198:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %201, label %199, !dbg !63

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !63
  br label %__nv_sqrtf.exit18, !dbg !63

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !63
  br label %__nv_sqrtf.exit18, !dbg !63

203:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %206, label %204, !dbg !63

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !63
  br label %__nv_sqrtf.exit18, !dbg !63

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !63
  br label %__nv_sqrtf.exit18, !dbg !63

__nv_sqrtf.exit18:                                ; preds = %199, %201, %204, %206
  %.0.i16 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !63
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i19 = icmp eq i32 %208, 0, !dbg !63
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i22 = icmp eq i32 %209, 0, !dbg !63
  br i1 %.not.i19, label %215, label %210, !dbg !63

210:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %213, label %211, !dbg !63

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !63
  br label %__nv_sqrtf.exit23, !dbg !63

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !63
  br label %__nv_sqrtf.exit23, !dbg !63

215:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %218, label %216, !dbg !63

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !63
  br label %__nv_sqrtf.exit23, !dbg !63

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !63
  br label %__nv_sqrtf.exit23, !dbg !63

__nv_sqrtf.exit23:                                ; preds = %211, %213, %216, %218
  %.0.i21 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !63
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i24 = icmp eq i32 %220, 0, !dbg !63
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i27 = icmp eq i32 %221, 0, !dbg !63
  br i1 %.not.i24, label %227, label %222, !dbg !63

222:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %225, label %223, !dbg !63

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !63
  br label %__nv_sqrtf.exit28, !dbg !63

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !63
  br label %__nv_sqrtf.exit28, !dbg !63

227:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %230, label %228, !dbg !63

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !63
  br label %__nv_sqrtf.exit28, !dbg !63

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !63
  br label %__nv_sqrtf.exit28, !dbg !63

__nv_sqrtf.exit28:                                ; preds = %223, %225, %228, %230
  %.0.i26 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !63
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i29 = icmp eq i32 %232, 0, !dbg !63
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i32 = icmp eq i32 %233, 0, !dbg !63
  br i1 %.not.i29, label %239, label %234, !dbg !63

234:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %237, label %235, !dbg !63

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit33, !dbg !63

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit33, !dbg !63

239:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %242, label %240, !dbg !63

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit33, !dbg !63

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit33, !dbg !63

__nv_sqrtf.exit33:                                ; preds = %235, %237, %240, %242
  %.0.i31 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !63
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i34 = icmp eq i32 %244, 0, !dbg !63
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i37 = icmp eq i32 %245, 0, !dbg !63
  br i1 %.not.i34, label %251, label %246, !dbg !63

246:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %249, label %247, !dbg !63

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit38, !dbg !63

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit38, !dbg !63

251:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %254, label %252, !dbg !63

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit38, !dbg !63

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit38, !dbg !63

__nv_sqrtf.exit38:                                ; preds = %247, %249, %252, %254
  %.0.i36 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !63
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i39 = icmp eq i32 %256, 0, !dbg !63
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i42 = icmp eq i32 %257, 0, !dbg !63
  br i1 %.not.i39, label %263, label %258, !dbg !63

258:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %261, label %259, !dbg !63

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !63
  br label %__nv_sqrtf.exit43, !dbg !63

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !63
  br label %__nv_sqrtf.exit43, !dbg !63

263:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %266, label %264, !dbg !63

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !63
  br label %__nv_sqrtf.exit43, !dbg !63

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !63
  br label %__nv_sqrtf.exit43, !dbg !63

__nv_sqrtf.exit43:                                ; preds = %259, %261, %264, %266
  %.0.i41 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !63
  %268 = shufflevector <2 x i1> %100, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !40
  %272 = icmp slt <2 x i32> %47, splat (i32 1240), !dbg !64
  %273 = shufflevector <2 x i1> %272, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !64
  %274 = icmp ult <2 x i32> %111, splat (i32 216), !dbg !41
  %275 = shufflevector <2 x i1> %274, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %276 = icmp slt <2 x i32> %47, splat (i32 1216), !dbg !65
  %277 = shufflevector <2 x i1> %276, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !65
  %278 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !47
  %279 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !55
  %280 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !61
  %281 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !29
  %282 = insertelement <8 x i32> %281, i32 %60, i64 1, !dbg !29
  %283 = insertelement <8 x i32> %282, i32 %59, i64 2, !dbg !29
  %284 = insertelement <8 x i32> %283, i32 %58, i64 3, !dbg !29
  %285 = insertelement <8 x i32> %284, i32 %57, i64 4, !dbg !29
  %286 = insertelement <8 x i32> %285, i32 %56, i64 5, !dbg !29
  %287 = insertelement <8 x i32> %286, i32 %55, i64 6, !dbg !29
  %288 = insertelement <8 x i32> %287, i32 %54, i64 7, !dbg !29
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !29
  %290 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %291 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !39
  %292 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !40
  %293 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !47
  %294 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !55
  %295 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !61
  %296 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !40
  %299 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !47
  %300 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !55
  %301 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !61
  %302 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %303 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !40
  %305 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !47
  %306 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !55
  %307 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !61
  %308 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %309 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !39
  %310 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !40
  %311 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !47
  %312 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !55
  %313 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !61
  %314 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %315 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !39
  %316 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !40
  %317 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !47
  %318 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !55
  %319 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !61
  %320 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %321 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !39
  %322 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !40
  %323 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !47
  %324 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !55
  %325 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !61
  %326 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %327 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !39
  %328 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !40
  %329 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !47
  %330 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !55
  %331 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !61
  %332 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !35
  %333 = insertelement <8 x i32> %332, i32 %98, i64 1, !dbg !35
  %334 = insertelement <8 x i32> %333, i32 %97, i64 2, !dbg !35
  %335 = insertelement <8 x i32> %334, i32 %96, i64 3, !dbg !35
  %336 = insertelement <8 x i32> %335, i32 %95, i64 4, !dbg !35
  %337 = insertelement <8 x i32> %336, i32 %94, i64 5, !dbg !35
  %338 = insertelement <8 x i32> %337, i32 %93, i64 6, !dbg !35
  %339 = insertelement <8 x i32> %338, i32 %92, i64 7, !dbg !35
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !35
  %341 = insertelement <8 x i32> poison, i32 %89, i64 0, !dbg !33
  %342 = insertelement <8 x i32> %341, i32 %88, i64 1, !dbg !33
  %343 = insertelement <8 x i32> %342, i32 %87, i64 2, !dbg !33
  %344 = insertelement <8 x i32> %343, i32 %86, i64 3, !dbg !33
  %345 = insertelement <8 x i32> %344, i32 %85, i64 4, !dbg !33
  %346 = insertelement <8 x i32> %345, i32 %84, i64 5, !dbg !33
  %347 = insertelement <8 x i32> %346, i32 %83, i64 6, !dbg !33
  %348 = insertelement <8 x i32> %347, i32 %82, i64 7, !dbg !33
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !33
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !66
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !66
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !66
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !66
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !66
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !66
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #3, !dbg !66
  %358 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !38
  %359 = insertelement <8 x i32> %358, i32 %290, i64 1, !dbg !38
  %360 = insertelement <8 x i32> %359, i32 %296, i64 2, !dbg !38
  %361 = insertelement <8 x i32> %360, i32 %302, i64 3, !dbg !38
  %362 = insertelement <8 x i32> %361, i32 %308, i64 4, !dbg !38
  %363 = insertelement <8 x i32> %362, i32 %314, i64 5, !dbg !38
  %364 = insertelement <8 x i32> %363, i32 %320, i64 6, !dbg !38
  %365 = insertelement <8 x i32> %364, i32 %326, i64 7, !dbg !38
  %366 = bitcast <8 x i32> %365 to <8 x float>, !dbg !38
  %367 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !39
  %368 = insertelement <8 x i32> %367, i32 %291, i64 1, !dbg !39
  %369 = insertelement <8 x i32> %368, i32 %297, i64 2, !dbg !39
  %370 = insertelement <8 x i32> %369, i32 %303, i64 3, !dbg !39
  %371 = insertelement <8 x i32> %370, i32 %309, i64 4, !dbg !39
  %372 = insertelement <8 x i32> %371, i32 %315, i64 5, !dbg !39
  %373 = insertelement <8 x i32> %372, i32 %321, i64 6, !dbg !39
  %374 = insertelement <8 x i32> %373, i32 %327, i64 7, !dbg !39
  %375 = bitcast <8 x i32> %374 to <8 x float>, !dbg !39
  %376 = fadd <8 x float> %366, %375, !dbg !67
  %377 = insertelement <8 x i32> poison, i32 %271, i64 0, !dbg !40
  %378 = insertelement <8 x i32> %377, i32 %292, i64 1, !dbg !40
  %379 = insertelement <8 x i32> %378, i32 %298, i64 2, !dbg !40
  %380 = insertelement <8 x i32> %379, i32 %304, i64 3, !dbg !40
  %381 = insertelement <8 x i32> %380, i32 %310, i64 4, !dbg !40
  %382 = insertelement <8 x i32> %381, i32 %316, i64 5, !dbg !40
  %383 = insertelement <8 x i32> %382, i32 %322, i64 6, !dbg !40
  %384 = insertelement <8 x i32> %383, i32 %328, i64 7, !dbg !40
  %385 = bitcast <8 x i32> %384 to <8 x float>, !dbg !40
  %386 = fadd <8 x float> %376, %385, !dbg !68
  %387 = insertelement <8 x i32> poison, i32 %278, i64 0, !dbg !69
  %388 = insertelement <8 x i32> %387, i32 %293, i64 1, !dbg !69
  %389 = insertelement <8 x i32> %388, i32 %299, i64 2, !dbg !69
  %390 = insertelement <8 x i32> %389, i32 %305, i64 3, !dbg !69
  %391 = insertelement <8 x i32> %390, i32 %311, i64 4, !dbg !69
  %392 = insertelement <8 x i32> %391, i32 %317, i64 5, !dbg !69
  %393 = insertelement <8 x i32> %392, i32 %323, i64 6, !dbg !69
  %394 = insertelement <8 x i32> %393, i32 %329, i64 7, !dbg !69
  %395 = insertelement <8 x i32> poison, i32 %279, i64 0, !dbg !69
  %396 = insertelement <8 x i32> %395, i32 %294, i64 1, !dbg !69
  %397 = insertelement <8 x i32> %396, i32 %300, i64 2, !dbg !69
  %398 = insertelement <8 x i32> %397, i32 %306, i64 3, !dbg !69
  %399 = insertelement <8 x i32> %398, i32 %312, i64 4, !dbg !69
  %400 = insertelement <8 x i32> %399, i32 %318, i64 5, !dbg !69
  %401 = insertelement <8 x i32> %400, i32 %324, i64 6, !dbg !69
  %402 = insertelement <8 x i32> %401, i32 %330, i64 7, !dbg !69
  %403 = select <8 x i1> %277, <8 x i32> %394, <8 x i32> %402, !dbg !69
  %404 = bitcast <8 x i32> %403 to <8 x float>, !dbg !69
  %405 = select <8 x i1> %275, <8 x float> %404, <8 x float> zeroinitializer, !dbg !70
  %406 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !61
  %407 = insertelement <8 x i32> %406, i32 %295, i64 1, !dbg !61
  %408 = insertelement <8 x i32> %407, i32 %301, i64 2, !dbg !61
  %409 = insertelement <8 x i32> %408, i32 %307, i64 3, !dbg !61
  %410 = insertelement <8 x i32> %409, i32 %313, i64 4, !dbg !61
  %411 = insertelement <8 x i32> %410, i32 %319, i64 5, !dbg !61
  %412 = insertelement <8 x i32> %411, i32 %325, i64 6, !dbg !61
  %413 = insertelement <8 x i32> %412, i32 %331, i64 7, !dbg !61
  %414 = bitcast <8 x i32> %413 to <8 x float>, !dbg !61
  %415 = select <8 x i1> %273, <8 x float> %405, <8 x float> %414, !dbg !71
  %416 = select <8 x i1> %268, <8 x float> %386, <8 x float> %415, !dbg !72
  %417 = fsub <8 x float> %416, %289, !dbg !73
  %418 = insertelement <8 x float> poison, float %357, i64 0, !dbg !74
  %419 = insertelement <8 x float> %418, float %356, i64 1, !dbg !74
  %420 = insertelement <8 x float> %419, float %355, i64 2, !dbg !74
  %421 = insertelement <8 x float> %420, float %354, i64 3, !dbg !74
  %422 = insertelement <8 x float> %421, float %353, i64 4, !dbg !74
  %423 = insertelement <8 x float> %422, float %352, i64 5, !dbg !74
  %424 = insertelement <8 x float> %423, float %351, i64 6, !dbg !74
  %425 = insertelement <8 x float> %424, float %350, i64 7, !dbg !74
  %426 = fmul <8 x float> %417, %425, !dbg !74
  %427 = fmul <8 x float> %426, %349, !dbg !75
  %428 = fadd <8 x float> %427, %340, !dbg !76
  %429 = fcmp olt <8 x float> %428, zeroinitializer, !dbg !77
  %430 = extractelement <8 x i1> %429, i64 7, !dbg !81
  %431 = extractelement <8 x i1> %429, i64 6, !dbg !81
  %432 = extractelement <8 x i1> %429, i64 5, !dbg !81
  %433 = extractelement <8 x i1> %429, i64 4, !dbg !81
  %434 = extractelement <8 x i1> %429, i64 3, !dbg !81
  %435 = extractelement <8 x i1> %429, i64 2, !dbg !81
  %436 = extractelement <8 x i1> %429, i64 1, !dbg !81
  %437 = extractelement <8 x i1> %429, i64 0, !dbg !81
  %438 = sext i32 %17 to i64, !dbg !82
  %439 = getelementptr float, ptr addrspace(1) %8, i64 %438, !dbg !82
  %440 = sext i32 %18 to i64, !dbg !82
  %441 = getelementptr float, ptr addrspace(1) %8, i64 %440, !dbg !82
  %bc = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %442 = extractelement <8 x i32> %bc, i64 7, !dbg !83
  %bc44 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %443 = extractelement <8 x i32> %bc44, i64 6, !dbg !83
  %bc45 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %444 = extractelement <8 x i32> %bc45, i64 5, !dbg !83
  %bc46 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %445 = extractelement <8 x i32> %bc46, i64 4, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %439, i1 %19) #3, !dbg !83
  %bc47 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %446 = extractelement <8 x i32> %bc47, i64 3, !dbg !83
  %bc48 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %447 = extractelement <8 x i32> %bc48, i64 2, !dbg !83
  %bc49 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %448 = extractelement <8 x i32> %bc49, i64 1, !dbg !83
  %bc50 = bitcast <8 x float> %416 to <8 x i32>, !dbg !83
  %449 = extractelement <8 x i32> %bc50, i64 0, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %441, i1 %20) #3, !dbg !83
  %450 = getelementptr float, ptr addrspace(1) %9, i64 %438, !dbg !84
  %451 = getelementptr float, ptr addrspace(1) %9, i64 %440, !dbg !84
  %bc51 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %452 = extractelement <8 x i32> %bc51, i64 7, !dbg !85
  %453 = select i1 %430, i32 0, i32 %452, !dbg !81
  %bc52 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %454 = extractelement <8 x i32> %bc52, i64 6, !dbg !85
  %455 = select i1 %431, i32 0, i32 %454, !dbg !81
  %bc53 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %456 = extractelement <8 x i32> %bc53, i64 5, !dbg !85
  %457 = select i1 %432, i32 0, i32 %456, !dbg !81
  %bc54 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %458 = extractelement <8 x i32> %bc54, i64 4, !dbg !85
  %459 = select i1 %433, i32 0, i32 %458, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %455, i32 %457, i32 %459, ptr addrspace(1) %450, i1 %19) #3, !dbg !85
  %bc55 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %460 = extractelement <8 x i32> %bc55, i64 3, !dbg !85
  %461 = select i1 %434, i32 0, i32 %460, !dbg !81
  %bc56 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %462 = extractelement <8 x i32> %bc56, i64 2, !dbg !85
  %463 = select i1 %435, i32 0, i32 %462, !dbg !81
  %bc57 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %464 = extractelement <8 x i32> %bc57, i64 1, !dbg !85
  %465 = select i1 %436, i32 0, i32 %464, !dbg !81
  %bc58 = bitcast <8 x float> %428 to <8 x i32>, !dbg !85
  %466 = extractelement <8 x i32> %bc58, i64 0, !dbg !85
  %467 = select i1 %437, i32 0, i32 %466, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %463, i32 %465, i32 %467, ptr addrspace(1) %451, i1 %20) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvhbe63h7o6gtuulnhd4ruaylqicarvbdgah53rudk4lkwliyc7.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 51, scope: !7)
!19 = !DILocation(line: 37, column: 45, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 51, scope: !7)
!22 = !DILocation(line: 38, column: 45, scope: !7)
!23 = !DILocation(line: 38, column: 30, scope: !7)
!24 = !DILocation(line: 40, column: 30, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 27, scope: !7)
!27 = !DILocation(line: 59, column: 40, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 63, scope: !7)
!38 = !DILocation(line: 37, column: 56, scope: !7)
!39 = !DILocation(line: 38, column: 56, scope: !7)
!40 = !DILocation(line: 40, column: 56, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 58, column: 20, scope: !7)
!43 = !DILocation(line: 59, column: 36, scope: !7)
!44 = !DILocation(line: 59, column: 56, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 75, scope: !7)
!47 = !DILocation(line: 59, column: 67, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 39, scope: !7)
!50 = !DILocation(line: 64, column: 48, scope: !7)
!51 = !DILocation(line: 64, column: 44, scope: !7)
!52 = !DILocation(line: 64, column: 75, scope: !7)
!53 = !DILocation(line: 64, column: 31, scope: !7)
!54 = !DILocation(line: 64, column: 94, scope: !7)
!55 = !DILocation(line: 64, column: 86, scope: !7)
!56 = !DILocation(line: 68, column: 21, scope: !7)
!57 = !DILocation(line: 72, column: 44, scope: !7)
!58 = !DILocation(line: 72, column: 75, scope: !7)
!59 = !DILocation(line: 72, column: 31, scope: !7)
!60 = !DILocation(line: 72, column: 94, scope: !7)
!61 = !DILocation(line: 72, column: 86, scope: !7)
!62 = !DILocation(line: 79, column: 20, scope: !7)
!63 = !DILocation(line: 80, column: 27, scope: !7)
!64 = !DILocation(line: 51, column: 20, scope: !7)
!65 = !DILocation(line: 57, column: 20, scope: !7)
!66 = !DILocation(line: 82, column: 20, scope: !7)
!67 = !DILocation(line: 39, column: 18, scope: !7)
!68 = !DILocation(line: 41, column: 18, scope: !7)
!69 = !DILocation(line: 65, column: 35, scope: !7)
!70 = !DILocation(line: 67, column: 35, scope: !7)
!71 = !DILocation(line: 73, column: 35, scope: !7)
!72 = !DILocation(line: 0, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 85, column: 20, scope: !7)
!75 = !DILocation(line: 86, column: 20, scope: !7)
!76 = !DILocation(line: 87, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 89, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 90, column: 25, scope: !7)
!83 = !DILocation(line: 90, column: 37, scope: !7)
!84 = !DILocation(line: 91, column: 25, scope: !7)
!85 = !DILocation(line: 91, column: 37, scope: !7)
!86 = !DILocation(line: 91, column: 4, scope: !7)
