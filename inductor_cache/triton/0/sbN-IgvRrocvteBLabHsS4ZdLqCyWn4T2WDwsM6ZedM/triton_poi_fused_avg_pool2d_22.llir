; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 2048, !dbg !14
  %11 = mul i32 %10, 2048, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = shl i32 %10, 15, !dbg !16
  %13 = add i32 %12, %.decomposed, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !19
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !19
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !19
  %19 = bitcast i32 %17 to float, !dbg !19
  %20 = bitcast i32 %18 to float, !dbg !19
  %21 = add i32 %13, 2048, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = add i32 %13, 4096, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = add i32 %13, 6144, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = bitcast i32 %42 to float, !dbg !28
  %45 = add i32 %13, 8192, !dbg !29
  %46 = sext i32 %45 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !31
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !31
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !31
  %51 = bitcast i32 %49 to float, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = add i32 %13, 10240, !dbg !32
  %54 = sext i32 %53 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !33
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !34
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !34
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !34
  %59 = bitcast i32 %57 to float, !dbg !34
  %60 = bitcast i32 %58 to float, !dbg !34
  %61 = add i32 %13, 12288, !dbg !35
  %62 = sext i32 %61 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !37
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !37
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !37
  %67 = bitcast i32 %65 to float, !dbg !37
  %68 = bitcast i32 %66 to float, !dbg !37
  %69 = add i32 %13, 14336, !dbg !38
  %70 = sext i32 %69 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !39
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !40
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !40
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !40
  %75 = bitcast i32 %73 to float, !dbg !40
  %76 = bitcast i32 %74 to float, !dbg !40
  %77 = add i32 %13, 16384, !dbg !41
  %78 = sext i32 %77 to i64, !dbg !42
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !42
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !43
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !43
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !43
  %83 = bitcast i32 %81 to float, !dbg !43
  %84 = bitcast i32 %82 to float, !dbg !43
  %85 = add i32 %13, 18432, !dbg !44
  %86 = sext i32 %85 to i64, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !45
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !46
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !46
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !46
  %91 = bitcast i32 %89 to float, !dbg !46
  %92 = bitcast i32 %90 to float, !dbg !46
  %93 = add i32 %13, 20480, !dbg !47
  %94 = sext i32 %93 to i64, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !48
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !49
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !49
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !49
  %99 = bitcast i32 %97 to float, !dbg !49
  %100 = bitcast i32 %98 to float, !dbg !49
  %101 = add i32 %13, 22528, !dbg !50
  %102 = sext i32 %101 to i64, !dbg !51
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !51
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !52
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !52
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !52
  %107 = bitcast i32 %105 to float, !dbg !52
  %108 = bitcast i32 %106 to float, !dbg !52
  %109 = add i32 %13, 24576, !dbg !53
  %110 = sext i32 %109 to i64, !dbg !54
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !54
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !55
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !55
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !55
  %115 = bitcast i32 %113 to float, !dbg !55
  %116 = bitcast i32 %114 to float, !dbg !55
  %117 = add i32 %13, 26624, !dbg !56
  %118 = sext i32 %117 to i64, !dbg !57
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !57
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !58
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !58
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !58
  %123 = bitcast i32 %121 to float, !dbg !58
  %124 = bitcast i32 %122 to float, !dbg !58
  %125 = add i32 %13, 28672, !dbg !59
  %126 = sext i32 %125 to i64, !dbg !60
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !60
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !61
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !61
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !61
  %131 = bitcast i32 %129 to float, !dbg !61
  %132 = bitcast i32 %130 to float, !dbg !61
  %133 = add i32 %13, 30720, !dbg !62
  %134 = sext i32 %133 to i64, !dbg !63
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !63
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !64
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !64
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !64
  %139 = bitcast i32 %137 to float, !dbg !64
  %140 = bitcast i32 %138 to float, !dbg !64
  %141 = fadd float %19, %27, !dbg !65
  %142 = fadd float %20, %28, !dbg !65
  %143 = fadd float %141, %35, !dbg !66
  %144 = fadd float %142, %36, !dbg !66
  %145 = fadd float %143, %43, !dbg !67
  %146 = fadd float %144, %44, !dbg !67
  %147 = fadd float %145, %51, !dbg !68
  %148 = fadd float %146, %52, !dbg !68
  %149 = fadd float %147, %59, !dbg !69
  %150 = fadd float %148, %60, !dbg !69
  %151 = fadd float %149, %67, !dbg !70
  %152 = fadd float %150, %68, !dbg !70
  %153 = fadd float %151, %75, !dbg !71
  %154 = fadd float %152, %76, !dbg !71
  %155 = fadd float %153, %83, !dbg !72
  %156 = fadd float %154, %84, !dbg !72
  %157 = fadd float %155, %91, !dbg !73
  %158 = fadd float %156, %92, !dbg !73
  %159 = fadd float %157, %99, !dbg !74
  %160 = fadd float %158, %100, !dbg !74
  %161 = fadd float %159, %107, !dbg !75
  %162 = fadd float %160, %108, !dbg !75
  %163 = fadd float %161, %115, !dbg !76
  %164 = fadd float %162, %116, !dbg !76
  %165 = fadd float %163, %123, !dbg !77
  %166 = fadd float %164, %124, !dbg !77
  %167 = fadd float %165, %131, !dbg !78
  %168 = fadd float %166, %132, !dbg !78
  %169 = fadd float %167, %139, !dbg !79
  %170 = fadd float %168, %140, !dbg !79
  %171 = fmul float %169, 6.250000e-02, !dbg !80
  %172 = fmul float %170, 6.250000e-02, !dbg !80
  %173 = sext i32 %9 to i64, !dbg !81
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !81
  %175 = bitcast float %171 to i32, !dbg !82
  %176 = bitcast float %172 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csuufcngxh4usce2lny3merxjtwgzxrxgdwsdxefhwhaq3jqtbhn.py", directory: "inductor_cache/su")
!4 = !{ptr @triton_poi_fused_avg_pool2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_22", linkageName: "triton_poi_fused_avg_pool2d_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 41, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 42, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 42, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 53, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 53, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 53, scope: !7)
!32 = !DILocation(line: 32, column: 43, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 54, scope: !7)
!35 = !DILocation(line: 33, column: 44, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 55, scope: !7)
!38 = !DILocation(line: 34, column: 44, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 55, scope: !7)
!41 = !DILocation(line: 35, column: 44, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 55, scope: !7)
!44 = !DILocation(line: 36, column: 44, scope: !7)
!45 = !DILocation(line: 36, column: 31, scope: !7)
!46 = !DILocation(line: 36, column: 55, scope: !7)
!47 = !DILocation(line: 37, column: 44, scope: !7)
!48 = !DILocation(line: 37, column: 31, scope: !7)
!49 = !DILocation(line: 37, column: 55, scope: !7)
!50 = !DILocation(line: 38, column: 44, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 55, scope: !7)
!53 = !DILocation(line: 39, column: 44, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 55, scope: !7)
!56 = !DILocation(line: 40, column: 44, scope: !7)
!57 = !DILocation(line: 40, column: 31, scope: !7)
!58 = !DILocation(line: 40, column: 55, scope: !7)
!59 = !DILocation(line: 41, column: 44, scope: !7)
!60 = !DILocation(line: 41, column: 31, scope: !7)
!61 = !DILocation(line: 41, column: 55, scope: !7)
!62 = !DILocation(line: 42, column: 44, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 55, scope: !7)
!65 = !DILocation(line: 43, column: 18, scope: !7)
!66 = !DILocation(line: 44, column: 18, scope: !7)
!67 = !DILocation(line: 45, column: 18, scope: !7)
!68 = !DILocation(line: 46, column: 18, scope: !7)
!69 = !DILocation(line: 47, column: 19, scope: !7)
!70 = !DILocation(line: 48, column: 20, scope: !7)
!71 = !DILocation(line: 49, column: 20, scope: !7)
!72 = !DILocation(line: 50, column: 20, scope: !7)
!73 = !DILocation(line: 51, column: 20, scope: !7)
!74 = !DILocation(line: 52, column: 20, scope: !7)
!75 = !DILocation(line: 53, column: 20, scope: !7)
!76 = !DILocation(line: 54, column: 20, scope: !7)
!77 = !DILocation(line: 55, column: 20, scope: !7)
!78 = !DILocation(line: 56, column: 20, scope: !7)
!79 = !DILocation(line: 57, column: 20, scope: !7)
!80 = !DILocation(line: 59, column: 20, scope: !7)
!81 = !DILocation(line: 60, column: 25, scope: !7)
!82 = !DILocation(line: 60, column: 37, scope: !7)
!83 = !DILocation(line: 60, column: 4, scope: !7)
