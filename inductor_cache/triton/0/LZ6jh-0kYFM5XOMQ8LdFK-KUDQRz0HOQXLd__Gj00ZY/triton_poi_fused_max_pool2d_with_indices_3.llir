; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %11, 256, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %6, %11, !dbg !13
  %18 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = mul i32 %19, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %14, 16, !dbg !15
  %22 = srem i32 %15, 16, !dbg !15
  %23 = srem i32 %16, 16, !dbg !15
  %24 = srem i32 %19, 16, !dbg !16
  %25 = shl nsw i32 %.decomposed, 1, !dbg !17
  %26 = shl nsw i32 %21, 1, !dbg !17
  %27 = shl nsw i32 %22, 1, !dbg !17
  %28 = shl nsw i32 %23, 1, !dbg !17
  %29 = shl i32 %19, 6, !dbg !18
  %30 = add i32 %25, %29, !dbg !19
  %31 = add i32 %29, %26, !dbg !19
  %32 = add i32 %29, %27, !dbg !19
  %33 = add i32 %29, %28, !dbg !19
  %34 = sext i32 %30 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = sext i32 %31 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = sext i32 %32 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %33 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = or disjoint i32 %30, 1, !dbg !22
  %51 = or disjoint i32 %31, 1, !dbg !22
  %52 = or disjoint i32 %32, 1, !dbg !22
  %53 = or disjoint i32 %33, 1, !dbg !22
  %54 = sext i32 %50 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %51 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %52 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %53 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = or disjoint i32 %29, 32, !dbg !25
  %71 = add i32 %70, %25, !dbg !26
  %72 = add i32 %70, %26, !dbg !26
  %73 = add i32 %70, %27, !dbg !26
  %74 = add i32 %70, %28, !dbg !26
  %75 = sext i32 %71 to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !27
  %77 = sext i32 %72 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !27
  %79 = sext i32 %73 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !27
  %81 = sext i32 %74 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = or disjoint i32 %29, 33, !dbg !29
  %92 = add i32 %91, %25, !dbg !30
  %93 = add i32 %91, %26, !dbg !30
  %94 = add i32 %91, %27, !dbg !30
  %95 = add i32 %91, %28, !dbg !30
  %96 = sext i32 %92 to i64, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !31
  %98 = sext i32 %93 to i64, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !31
  %100 = sext i32 %94 to i64, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !31
  %102 = sext i32 %95 to i64, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #2, !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = fcmp ogt float %63, %43, !dbg !33
  %113 = fcmp ogt float %65, %45, !dbg !33
  %114 = fcmp ogt float %67, %47, !dbg !33
  %115 = fcmp ogt float %69, %49, !dbg !33
  %116 = fcmp uno float %63, 0.000000e+00, !dbg !37
  %117 = fcmp uno float %65, 0.000000e+00, !dbg !37
  %118 = fcmp uno float %67, 0.000000e+00, !dbg !37
  %119 = fcmp uno float %69, 0.000000e+00, !dbg !37
  %120 = or i1 %112, %116, !dbg !38
  %121 = or i1 %113, %117, !dbg !38
  %122 = or i1 %114, %118, !dbg !38
  %123 = or i1 %115, %119, !dbg !38
  %124 = select i1 %120, float %63, float %43, !dbg !39
  %125 = select i1 %121, float %65, float %45, !dbg !39
  %126 = select i1 %122, float %67, float %47, !dbg !39
  %127 = select i1 %123, float %69, float %49, !dbg !39
  %128 = fcmp olt float %124, %84, !dbg !40
  %129 = fcmp olt float %125, %86, !dbg !40
  %130 = fcmp olt float %126, %88, !dbg !40
  %131 = fcmp olt float %127, %90, !dbg !40
  %132 = fcmp uno float %84, 0.000000e+00, !dbg !42
  %133 = fcmp uno float %86, 0.000000e+00, !dbg !42
  %134 = fcmp uno float %88, 0.000000e+00, !dbg !42
  %135 = fcmp uno float %90, 0.000000e+00, !dbg !42
  %136 = or i1 %128, %132, !dbg !43
  %137 = or i1 %129, %133, !dbg !43
  %138 = or i1 %130, %134, !dbg !43
  %139 = or i1 %131, %135, !dbg !43
  %140 = select i1 %136, float %84, float %124, !dbg !44
  %141 = select i1 %137, float %86, float %125, !dbg !44
  %142 = select i1 %138, float %88, float %126, !dbg !44
  %143 = select i1 %139, float %90, float %127, !dbg !44
  %144 = fcmp olt float %140, %105, !dbg !45
  %145 = fcmp olt float %141, %107, !dbg !45
  %146 = fcmp olt float %142, %109, !dbg !45
  %147 = fcmp olt float %143, %111, !dbg !45
  %148 = fcmp uno float %105, 0.000000e+00, !dbg !47
  %149 = fcmp uno float %107, 0.000000e+00, !dbg !47
  %150 = fcmp uno float %109, 0.000000e+00, !dbg !47
  %151 = fcmp uno float %111, 0.000000e+00, !dbg !47
  %152 = or i1 %144, %148, !dbg !48
  %153 = or i1 %145, %149, !dbg !48
  %154 = or i1 %146, %150, !dbg !48
  %155 = or i1 %147, %151, !dbg !48
  %156 = zext i1 %112 to i32, !dbg !49
  %157 = select i1 %128, i32 2, i32 %156, !dbg !50
  %158 = select i1 %144, i32 3, i32 %157, !dbg !51
  %159 = zext i1 %113 to i32, !dbg !49
  %160 = select i1 %129, i32 2, i32 %159, !dbg !50
  %161 = select i1 %145, i32 3, i32 %160, !dbg !51
  %162 = zext i1 %114 to i32, !dbg !49
  %163 = select i1 %130, i32 2, i32 %162, !dbg !50
  %164 = select i1 %146, i32 3, i32 %163, !dbg !51
  %165 = zext i1 %115 to i32, !dbg !49
  %166 = select i1 %131, i32 2, i32 %165, !dbg !50
  %167 = select i1 %147, i32 3, i32 %166, !dbg !51
  %168 = lshr i32 %158, 1, !dbg !52
  %169 = lshr i32 %161, 1, !dbg !52
  %170 = lshr i32 %164, 1, !dbg !52
  %171 = lshr i32 %167, 1, !dbg !52
  %172 = and i32 %158, 1, !dbg !53
  %173 = and i32 %164, 1, !dbg !53
  %174 = shl nsw i32 %24, 1, !dbg !54
  %175 = or disjoint i32 %168, %174, !dbg !55
  %176 = or disjoint i32 %169, %174, !dbg !55
  %177 = or disjoint i32 %170, %174, !dbg !55
  %178 = or disjoint i32 %171, %174, !dbg !55
  %179 = or disjoint i32 %172, %25, !dbg !56
  %180 = or i32 %161, %26, !dbg !56
  %181 = or disjoint i32 %173, %27, !dbg !56
  %182 = or i32 %167, %28, !dbg !56
  %183 = sext i32 %175 to i64, !dbg !57
  %184 = sext i32 %176 to i64, !dbg !57
  %185 = sext i32 %177 to i64, !dbg !57
  %186 = sext i32 %178 to i64, !dbg !57
  %187 = shl nsw i64 %183, 5, !dbg !57
  %188 = shl nsw i64 %184, 5, !dbg !57
  %189 = shl nsw i64 %185, 5, !dbg !57
  %190 = shl nsw i64 %186, 5, !dbg !57
  %191 = sext i32 %179 to i64, !dbg !58
  %192 = sext i32 %180 to i64, !dbg !58
  %193 = sext i32 %181 to i64, !dbg !58
  %194 = sext i32 %182 to i64, !dbg !58
  %195 = add nsw i64 %187, %191, !dbg !58
  %196 = add nsw i64 %188, %192, !dbg !58
  %197 = add nsw i64 %189, %193, !dbg !58
  %198 = add nsw i64 %190, %194, !dbg !58
  %199 = sext i32 %13 to i64, !dbg !59
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !59
  %201 = bitcast float %140 to i32, !dbg !60
  %202 = select i1 %152, i32 %104, i32 %201, !dbg !61
  %203 = bitcast float %141 to i32, !dbg !60
  %204 = select i1 %153, i32 %106, i32 %203, !dbg !61
  %205 = bitcast float %142 to i32, !dbg !60
  %206 = select i1 %154, i32 %108, i32 %205, !dbg !61
  %207 = bitcast float %143 to i32, !dbg !60
  %208 = select i1 %155, i32 %110, i32 %207, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %204, i32 %206, i32 %208, ptr addrspace(1) %200, i1 true) #2, !dbg !60
  %209 = sext i32 %17 to i64, !dbg !62
  %210 = getelementptr i64, ptr addrspace(1) %2, i64 %209, !dbg !62
  %211 = sext i32 %18 to i64, !dbg !62
  %212 = getelementptr i64, ptr addrspace(1) %2, i64 %211, !dbg !62
  %213 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !63
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %213, i64 %195, i64 %196, i1 true) #2, !dbg !63
  %214 = getelementptr inbounds i8, ptr addrspace(3) %213, i32 16, !dbg !63
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %214, i64 %197, i64 %198, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %215 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %11, !dbg !63
  %216 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %12, !dbg !63
  %217 = load <2 x i64>, ptr addrspace(3) %216, align 16, !dbg !63
  %.extract = load i64, ptr addrspace(3) %215, align 16, !dbg !63
  %218 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 8, !dbg !63
  %.extract1 = load i64, ptr addrspace(3) %218, align 8, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract, i64 %.extract1, ptr addrspace(1) %210, i1 true) #2, !dbg !63
  %.extract2 = extractelement <2 x i64> %217, i64 0, !dbg !63
  %.extract3 = extractelement <2 x i64> %217, i64 1, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract2, i64 %.extract3, ptr addrspace(1) %212, i1 true) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemgeh5xarfn2mufbushu5vgsixn5lii74jzuw6jg635euwxs3wy.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 27, scope: !7)
!17 = !DILocation(line: 28, column: 32, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 29, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 49, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 50, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 50, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 32, column: 40, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!49 = !DILocation(line: 46, column: 30, scope: !7)
!50 = !DILocation(line: 41, column: 35, scope: !7)
!51 = !DILocation(line: 44, column: 35, scope: !7)
!52 = !DILocation(line: 46, column: 87, scope: !7)
!53 = !DILocation(line: 48, column: 20, scope: !7)
!54 = !DILocation(line: 49, column: 14, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 55, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 36, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 37, scope: !7)
!64 = !DILocation(line: 57, column: 4, scope: !7)
