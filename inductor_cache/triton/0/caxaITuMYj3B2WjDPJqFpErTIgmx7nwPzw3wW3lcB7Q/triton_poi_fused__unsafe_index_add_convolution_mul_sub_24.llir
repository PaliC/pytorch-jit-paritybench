; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = sdiv i32 %18, 64, !dbg !14
  %21 = srem i32 %19, 64, !dbg !15
  %22 = srem i32 %20, 64, !dbg !15
  %23 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %17, 64, !dbg !16
  %25 = sdiv i32 %16, 4096, !dbg !17
  %26 = sdiv i32 %18, 4096, !dbg !17
  %27 = srem i32 %25, 21, !dbg !18
  %28 = srem i32 %26, 21, !dbg !18
  %29 = sdiv i32 %16, 86016, !dbg !19
  %30 = sdiv i32 %18, 86016, !dbg !19
  %31 = sext i32 %21 to i64, !dbg !20
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = sext i32 %22 to i64, !dbg !20
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !21
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %43 = sext i32 %.decomposed to i64, !dbg !22
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !22
  %45 = sext i32 %24 to i64, !dbg !22
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !22
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !23
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !23
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !23
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !23
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !23
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !23
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !23
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !23
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !23
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !23
  %59 = sext i32 %27 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !24
  %61 = sext i32 %28 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %5, i64 %43, !dbg !26
  %72 = getelementptr i64, ptr addrspace(1) %5, i64 %45, !dbg !26
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !27
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !27
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %77 = extractvalue { i64, i64 } %76, 0, !dbg !27
  %78 = extractvalue { i64, i64 } %76, 1, !dbg !27
  %79 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %80 = extractvalue { i64, i64 } %79, 0, !dbg !27
  %81 = extractvalue { i64, i64 } %79, 1, !dbg !27
  %82 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %83 = extractvalue { i64, i64 } %82, 0, !dbg !27
  %84 = extractvalue { i64, i64 } %82, 1, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !28
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %7, i64 %31, !dbg !30
  %97 = getelementptr i64, ptr addrspace(1) %7, i64 %33, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !31
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !31
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !31
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !33
  %123 = bitcast i32 %122 to float, !dbg !33
  %124 = add i64 %35, 3, !dbg !34
  %125 = add i64 %39, 3, !dbg !34
  %126 = icmp slt i64 %35, 0, !dbg !35
  %127 = icmp slt i64 %39, 0, !dbg !35
  %128 = select i1 %126, i64 %124, i64 %35, !dbg !36
  %129 = select i1 %127, i64 %125, i64 %39, !dbg !36
  %130 = add i64 %48, 3, !dbg !37
  %131 = add i64 %49, 3, !dbg !37
  %132 = add i64 %51, 3, !dbg !37
  %133 = add i64 %52, 3, !dbg !37
  %134 = add i64 %54, 3, !dbg !37
  %135 = add i64 %55, 3, !dbg !37
  %136 = add i64 %57, 3, !dbg !37
  %137 = add i64 %58, 3, !dbg !37
  %138 = icmp slt i64 %48, 0, !dbg !38
  %139 = icmp slt i64 %49, 0, !dbg !38
  %140 = icmp slt i64 %51, 0, !dbg !38
  %141 = icmp slt i64 %52, 0, !dbg !38
  %142 = icmp slt i64 %54, 0, !dbg !38
  %143 = icmp slt i64 %55, 0, !dbg !38
  %144 = icmp slt i64 %57, 0, !dbg !38
  %145 = icmp slt i64 %58, 0, !dbg !38
  %146 = select i1 %138, i64 %130, i64 %48, !dbg !39
  %147 = select i1 %139, i64 %131, i64 %49, !dbg !39
  %148 = select i1 %140, i64 %132, i64 %51, !dbg !39
  %149 = select i1 %141, i64 %133, i64 %52, !dbg !39
  %150 = select i1 %142, i64 %134, i64 %54, !dbg !39
  %151 = select i1 %143, i64 %135, i64 %55, !dbg !39
  %152 = select i1 %144, i64 %136, i64 %57, !dbg !39
  %153 = select i1 %145, i64 %137, i64 %58, !dbg !39
  %154 = mul i64 %128, 63, !dbg !40
  %155 = mul i64 %129, 63, !dbg !40
  %156 = mul nsw i32 %29, 189, !dbg !41
  %157 = mul nsw i32 %30, 189, !dbg !41
  %158 = sext i32 %156 to i64, !dbg !42
  %159 = sext i32 %157 to i64, !dbg !42
  %.idx = mul i64 %146, 84, !dbg !43
  %160 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !43
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %59, !dbg !43
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %154, !dbg !43
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %158, !dbg !43
  %.idx1 = mul i64 %147, 84, !dbg !43
  %164 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !43
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %59, !dbg !43
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %154, !dbg !43
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %158, !dbg !43
  %.idx2 = mul i64 %148, 84, !dbg !43
  %168 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !43
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %59, !dbg !43
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %154, !dbg !43
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %158, !dbg !43
  %.idx3 = mul i64 %149, 84, !dbg !43
  %172 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !43
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %59, !dbg !43
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %154, !dbg !43
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %158, !dbg !43
  %.idx4 = mul i64 %150, 84, !dbg !43
  %176 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !43
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %61, !dbg !43
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %155, !dbg !43
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %159, !dbg !43
  %.idx5 = mul i64 %151, 84, !dbg !43
  %180 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !43
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %61, !dbg !43
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %155, !dbg !43
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %159, !dbg !43
  %.idx6 = mul i64 %152, 84, !dbg !43
  %184 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !43
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %61, !dbg !43
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %155, !dbg !43
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %159, !dbg !43
  %.idx7 = mul i64 %153, 84, !dbg !43
  %188 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !43
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %61, !dbg !43
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %155, !dbg !43
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %159, !dbg !43
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #1, !dbg !44
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !44
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !44
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #1, !dbg !44
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #1, !dbg !44
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #1, !dbg !44
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 true) #1, !dbg !44
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #1, !dbg !44
  %200 = add i64 %74, 3, !dbg !45
  %201 = add i64 %75, 3, !dbg !45
  %202 = add i64 %77, 3, !dbg !45
  %203 = add i64 %78, 3, !dbg !45
  %204 = add i64 %80, 3, !dbg !45
  %205 = add i64 %81, 3, !dbg !45
  %206 = add i64 %83, 3, !dbg !45
  %207 = add i64 %84, 3, !dbg !45
  %208 = icmp slt i64 %74, 0, !dbg !46
  %209 = icmp slt i64 %75, 0, !dbg !46
  %210 = icmp slt i64 %77, 0, !dbg !46
  %211 = icmp slt i64 %78, 0, !dbg !46
  %212 = icmp slt i64 %80, 0, !dbg !46
  %213 = icmp slt i64 %81, 0, !dbg !46
  %214 = icmp slt i64 %83, 0, !dbg !46
  %215 = icmp slt i64 %84, 0, !dbg !46
  %216 = select i1 %208, i64 %200, i64 %74, !dbg !47
  %217 = select i1 %209, i64 %201, i64 %75, !dbg !47
  %218 = select i1 %210, i64 %202, i64 %77, !dbg !47
  %219 = select i1 %211, i64 %203, i64 %78, !dbg !47
  %220 = select i1 %212, i64 %204, i64 %80, !dbg !47
  %221 = select i1 %213, i64 %205, i64 %81, !dbg !47
  %222 = select i1 %214, i64 %206, i64 %83, !dbg !47
  %223 = select i1 %215, i64 %207, i64 %84, !dbg !47
  %.idx8 = mul i64 %216, 84, !dbg !48
  %224 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !48
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %59, !dbg !48
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %154, !dbg !48
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %158, !dbg !48
  %.idx9 = mul i64 %217, 84, !dbg !48
  %228 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !48
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %59, !dbg !48
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %154, !dbg !48
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %158, !dbg !48
  %.idx10 = mul i64 %218, 84, !dbg !48
  %232 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !48
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %59, !dbg !48
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %154, !dbg !48
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %158, !dbg !48
  %.idx11 = mul i64 %219, 84, !dbg !48
  %236 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx11, !dbg !48
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %59, !dbg !48
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %154, !dbg !48
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %158, !dbg !48
  %.idx12 = mul i64 %220, 84, !dbg !48
  %240 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx12, !dbg !48
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %61, !dbg !48
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %155, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %159, !dbg !48
  %.idx13 = mul i64 %221, 84, !dbg !48
  %244 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx13, !dbg !48
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %61, !dbg !48
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %155, !dbg !48
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %159, !dbg !48
  %.idx14 = mul i64 %222, 84, !dbg !48
  %248 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx14, !dbg !48
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %61, !dbg !48
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %155, !dbg !48
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %159, !dbg !48
  %.idx15 = mul i64 %223, 84, !dbg !48
  %252 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx15, !dbg !48
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %61, !dbg !48
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %155, !dbg !48
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %159, !dbg !48
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !49
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #1, !dbg !49
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 true) #1, !dbg !49
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 true) #1, !dbg !49
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 true) #1, !dbg !49
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !49
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 true) #1, !dbg !49
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !49
  %264 = add i64 %98, 3, !dbg !50
  %265 = add i64 %102, 3, !dbg !50
  %266 = icmp slt i64 %98, 0, !dbg !51
  %267 = icmp slt i64 %102, 0, !dbg !51
  %268 = select i1 %266, i64 %264, i64 %98, !dbg !52
  %269 = select i1 %267, i64 %265, i64 %102, !dbg !52
  %270 = mul i64 %268, 63, !dbg !53
  %271 = mul i64 %269, 63, !dbg !53
  %272 = getelementptr float, ptr addrspace(1) %161, i64 %270, !dbg !54
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %158, !dbg !54
  %274 = getelementptr float, ptr addrspace(1) %165, i64 %270, !dbg !54
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %158, !dbg !54
  %276 = getelementptr float, ptr addrspace(1) %169, i64 %270, !dbg !54
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %158, !dbg !54
  %278 = getelementptr float, ptr addrspace(1) %173, i64 %270, !dbg !54
  %279 = getelementptr float, ptr addrspace(1) %278, i64 %158, !dbg !54
  %280 = getelementptr float, ptr addrspace(1) %177, i64 %271, !dbg !54
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %159, !dbg !54
  %282 = getelementptr float, ptr addrspace(1) %181, i64 %271, !dbg !54
  %283 = getelementptr float, ptr addrspace(1) %282, i64 %159, !dbg !54
  %284 = getelementptr float, ptr addrspace(1) %185, i64 %271, !dbg !54
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %159, !dbg !54
  %286 = getelementptr float, ptr addrspace(1) %189, i64 %271, !dbg !54
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %159, !dbg !54
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !55
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !55
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #1, !dbg !55
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !55
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 true) #1, !dbg !55
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 true) #1, !dbg !55
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !55
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !55
  %296 = getelementptr float, ptr addrspace(1) %225, i64 %270, !dbg !56
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %158, !dbg !56
  %298 = getelementptr float, ptr addrspace(1) %229, i64 %270, !dbg !56
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %158, !dbg !56
  %300 = getelementptr float, ptr addrspace(1) %233, i64 %270, !dbg !56
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %158, !dbg !56
  %302 = getelementptr float, ptr addrspace(1) %237, i64 %270, !dbg !56
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %158, !dbg !56
  %304 = getelementptr float, ptr addrspace(1) %241, i64 %271, !dbg !56
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %159, !dbg !56
  %306 = getelementptr float, ptr addrspace(1) %245, i64 %271, !dbg !56
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %159, !dbg !56
  %308 = getelementptr float, ptr addrspace(1) %249, i64 %271, !dbg !56
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %159, !dbg !56
  %310 = getelementptr float, ptr addrspace(1) %253, i64 %271, !dbg !56
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %159, !dbg !56
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #1, !dbg !57
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #1, !dbg !57
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #1, !dbg !57
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !57
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #1, !dbg !57
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #1, !dbg !57
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !57
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 true) #1, !dbg !57
  %320 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !55
  %321 = insertelement <2 x i32> %320, i32 %192, i64 1, !dbg !55
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !55
  %323 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !58
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !58
  %325 = shufflevector <2 x float> %324, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %326 = fadd <2 x float> %325, %322, !dbg !58
  %327 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !57
  %328 = insertelement <2 x i32> %327, i32 %256, i64 1, !dbg !57
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !57
  %330 = fadd <2 x float> %325, %329, !dbg !59
  %331 = fsub <2 x float> %330, %326, !dbg !60
  %332 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !61
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !61
  %334 = shufflevector <2 x float> %333, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %335 = fmul <2 x float> %331, %334, !dbg !61
  %336 = fadd <2 x float> %326, %335, !dbg !62
  %337 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !55
  %338 = insertelement <2 x i32> %337, i32 %193, i64 1, !dbg !55
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !55
  %340 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !58
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !58
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %343 = fadd <2 x float> %342, %339, !dbg !58
  %344 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !57
  %345 = insertelement <2 x i32> %344, i32 %257, i64 1, !dbg !57
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !57
  %347 = fadd <2 x float> %342, %346, !dbg !59
  %348 = fsub <2 x float> %347, %343, !dbg !60
  %349 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !61
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !61
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %352 = fmul <2 x float> %348, %351, !dbg !61
  %353 = fadd <2 x float> %343, %352, !dbg !62
  %354 = insertelement <2 x i32> poison, i32 %290, i64 0, !dbg !55
  %355 = insertelement <2 x i32> %354, i32 %194, i64 1, !dbg !55
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !55
  %357 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !58
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !58
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %360 = fadd <2 x float> %359, %356, !dbg !58
  %361 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !57
  %362 = insertelement <2 x i32> %361, i32 %258, i64 1, !dbg !57
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !57
  %364 = fadd <2 x float> %359, %363, !dbg !59
  %365 = fsub <2 x float> %364, %360, !dbg !60
  %366 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !61
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !61
  %368 = shufflevector <2 x float> %367, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %369 = fmul <2 x float> %365, %368, !dbg !61
  %370 = fadd <2 x float> %360, %369, !dbg !62
  %371 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !55
  %372 = insertelement <2 x i32> %371, i32 %195, i64 1, !dbg !55
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !55
  %374 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !58
  %375 = bitcast <2 x i32> %374 to <2 x float>, !dbg !58
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %377 = fadd <2 x float> %376, %373, !dbg !58
  %378 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !57
  %379 = insertelement <2 x i32> %378, i32 %259, i64 1, !dbg !57
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !57
  %381 = fadd <2 x float> %376, %380, !dbg !59
  %382 = fsub <2 x float> %381, %377, !dbg !60
  %383 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !61
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !61
  %385 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %386 = fmul <2 x float> %382, %385, !dbg !61
  %387 = fadd <2 x float> %377, %386, !dbg !62
  %388 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !55
  %389 = insertelement <2 x i32> %388, i32 %196, i64 1, !dbg !55
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !55
  %391 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !58
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !58
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %394 = fadd <2 x float> %393, %390, !dbg !58
  %395 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !57
  %396 = insertelement <2 x i32> %395, i32 %260, i64 1, !dbg !57
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !57
  %398 = fadd <2 x float> %393, %397, !dbg !59
  %399 = fsub <2 x float> %398, %394, !dbg !60
  %400 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !61
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !61
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %403 = fmul <2 x float> %399, %402, !dbg !61
  %404 = fadd <2 x float> %394, %403, !dbg !62
  %405 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !55
  %406 = insertelement <2 x i32> %405, i32 %197, i64 1, !dbg !55
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !55
  %408 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !58
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !58
  %410 = shufflevector <2 x float> %409, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %411 = fadd <2 x float> %410, %407, !dbg !58
  %412 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !57
  %413 = insertelement <2 x i32> %412, i32 %261, i64 1, !dbg !57
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !57
  %415 = fadd <2 x float> %410, %414, !dbg !59
  %416 = fsub <2 x float> %415, %411, !dbg !60
  %417 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !61
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !61
  %419 = shufflevector <2 x float> %418, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %420 = fmul <2 x float> %416, %419, !dbg !61
  %421 = fadd <2 x float> %411, %420, !dbg !62
  %422 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !55
  %423 = insertelement <2 x i32> %422, i32 %198, i64 1, !dbg !55
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !55
  %425 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !58
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !58
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %428 = fadd <2 x float> %427, %424, !dbg !58
  %429 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !57
  %430 = insertelement <2 x i32> %429, i32 %262, i64 1, !dbg !57
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !57
  %432 = fadd <2 x float> %427, %431, !dbg !59
  %433 = fsub <2 x float> %432, %428, !dbg !60
  %434 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !61
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !61
  %436 = shufflevector <2 x float> %435, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %437 = fmul <2 x float> %433, %436, !dbg !61
  %438 = fadd <2 x float> %428, %437, !dbg !62
  %439 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !55
  %440 = insertelement <2 x i32> %439, i32 %199, i64 1, !dbg !55
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !55
  %442 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !58
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !58
  %444 = shufflevector <2 x float> %443, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %445 = fadd <2 x float> %444, %441, !dbg !58
  %446 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !57
  %447 = insertelement <2 x i32> %446, i32 %263, i64 1, !dbg !57
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !57
  %449 = fadd <2 x float> %444, %448, !dbg !59
  %450 = fsub <2 x float> %449, %445, !dbg !60
  %451 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !61
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !61
  %453 = shufflevector <2 x float> %452, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %454 = fmul <2 x float> %450, %453, !dbg !61
  %455 = fadd <2 x float> %445, %454, !dbg !62
  %456 = extractelement <2 x float> %336, i64 0, !dbg !63
  %457 = extractelement <2 x float> %336, i64 1, !dbg !64
  %458 = fsub float %456, %457, !dbg !63
  %459 = extractelement <2 x float> %353, i64 0, !dbg !63
  %460 = extractelement <2 x float> %353, i64 1, !dbg !64
  %461 = fsub float %459, %460, !dbg !63
  %462 = extractelement <2 x float> %370, i64 0, !dbg !63
  %463 = extractelement <2 x float> %370, i64 1, !dbg !64
  %464 = fsub float %462, %463, !dbg !63
  %465 = extractelement <2 x float> %387, i64 0, !dbg !63
  %466 = extractelement <2 x float> %387, i64 1, !dbg !64
  %467 = fsub float %465, %466, !dbg !63
  %468 = extractelement <2 x float> %404, i64 0, !dbg !63
  %469 = extractelement <2 x float> %404, i64 1, !dbg !64
  %470 = fsub float %468, %469, !dbg !63
  %471 = extractelement <2 x float> %421, i64 0, !dbg !63
  %472 = extractelement <2 x float> %421, i64 1, !dbg !64
  %473 = fsub float %471, %472, !dbg !63
  %474 = extractelement <2 x float> %438, i64 0, !dbg !63
  %475 = extractelement <2 x float> %438, i64 1, !dbg !64
  %476 = fsub float %474, %475, !dbg !63
  %477 = extractelement <2 x float> %455, i64 0, !dbg !63
  %478 = extractelement <2 x float> %455, i64 1, !dbg !64
  %479 = fsub float %477, %478, !dbg !63
  %480 = fmul float %458, %109, !dbg !65
  %481 = fmul float %461, %111, !dbg !65
  %482 = fmul float %464, %113, !dbg !65
  %483 = fmul float %467, %115, !dbg !65
  %484 = fmul float %470, %117, !dbg !65
  %485 = fmul float %473, %119, !dbg !65
  %486 = fmul float %476, %121, !dbg !65
  %487 = fmul float %479, %123, !dbg !65
  %488 = fadd float %457, %480, !dbg !64
  %489 = fadd float %460, %481, !dbg !64
  %490 = fadd float %463, %482, !dbg !64
  %491 = fadd float %466, %483, !dbg !64
  %492 = fadd float %469, %484, !dbg !64
  %493 = fadd float %472, %485, !dbg !64
  %494 = fadd float %475, %486, !dbg !64
  %495 = fadd float %478, %487, !dbg !64
  %496 = sext i32 %16 to i64, !dbg !66
  %497 = getelementptr float, ptr addrspace(1) %0, i64 %496, !dbg !66
  %498 = sext i32 %18 to i64, !dbg !66
  %499 = getelementptr float, ptr addrspace(1) %0, i64 %498, !dbg !66
  %500 = bitcast float %488 to i32, !dbg !67
  %501 = bitcast float %489 to i32, !dbg !67
  %502 = bitcast float %490 to i32, !dbg !67
  %503 = bitcast float %491 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %500, i32 %501, i32 %502, i32 %503, ptr addrspace(1) %497, i1 true) #1, !dbg !67
  %504 = bitcast float %492 to i32, !dbg !67
  %505 = bitcast float %493 to i32, !dbg !67
  %506 = bitcast float %494 to i32, !dbg !67
  %507 = bitcast float %495 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %505, i32 %506, i32 %507, ptr addrspace(1) %499, i1 true) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6f4lr73iwms233w7q3zv6lan2jpasj4ky3dx6gv6zuoyxbreygj.py", directory: "inductor_cache/6f")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 32, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 43, column: 48, scope: !7)
!41 = !DILocation(line: 43, column: 59, scope: !7)
!42 = !DILocation(line: 43, column: 55, scope: !7)
!43 = !DILocation(line: 43, column: 30, scope: !7)
!44 = !DILocation(line: 43, column: 64, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 35, scope: !7)
!48 = !DILocation(line: 48, column: 31, scope: !7)
!49 = !DILocation(line: 48, column: 66, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 35, scope: !7)
!53 = !DILocation(line: 56, column: 49, scope: !7)
!54 = !DILocation(line: 56, column: 31, scope: !7)
!55 = !DILocation(line: 56, column: 66, scope: !7)
!56 = !DILocation(line: 58, column: 31, scope: !7)
!57 = !DILocation(line: 58, column: 67, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 28, scope: !7)
!67 = !DILocation(line: 66, column: 40, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
