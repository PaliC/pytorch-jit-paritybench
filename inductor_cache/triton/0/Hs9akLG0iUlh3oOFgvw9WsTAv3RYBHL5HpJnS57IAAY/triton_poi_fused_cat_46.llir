; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_46(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 4096, !dbg !14
  %.frozen2 = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen2, 4096, !dbg !14
  %15 = srem i32 %13, 128, !dbg !15
  %16 = srem i32 %14, 128, !dbg !15
  %17 = mul i32 %13, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = mul i32 %14, 4096, !dbg !16
  %.decomposed3 = sub i32 %.frozen2, %18, !dbg !16
  %.frozen4 = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen4, 524288, !dbg !17
  %.frozen5 = freeze i32 %12, !dbg !17
  %20 = sdiv i32 %.frozen5, 524288, !dbg !17
  %21 = icmp slt i32 %15, 64, !dbg !18
  %22 = icmp slt i32 %16, 64, !dbg !18
  %23 = mul i32 %19, 524288, !dbg !19
  %srem.decomposed = sub i32 %.frozen4, %23, !dbg !19
  %24 = mul i32 %20, 524288, !dbg !19
  %srem1.decomposed = sub i32 %.frozen5, %24, !dbg !19
  %25 = shl nsw i32 %19, 18, !dbg !20
  %26 = shl nsw i32 %20, 18, !dbg !20
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !21
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = shl nsw i32 %19, 12, !dbg !24
  %52 = shl nsw i32 %20, 12, !dbg !24
  %53 = add nsw i32 %51, %.decomposed, !dbg !25
  %54 = add nsw i32 %52, %.decomposed3, !dbg !25
  %55 = sext i32 %53 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %57 = sext i32 %54 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = fmul float %38, %64, !dbg !28
  %78 = fmul float %39, %65, !dbg !28
  %79 = fmul float %40, %66, !dbg !28
  %80 = fmul float %41, %67, !dbg !28
  %81 = fmul float %47, %73, !dbg !28
  %82 = fmul float %48, %74, !dbg !28
  %83 = fmul float %49, %75, !dbg !28
  %84 = fmul float %50, %76, !dbg !28
  %85 = icmp sgt i32 %15, 63, !dbg !29
  %86 = icmp sgt i32 %16, 63, !dbg !29
  %87 = shl nsw i32 %15, 12, !dbg !30
  %88 = shl nsw i32 %16, 12, !dbg !30
  %89 = add nsw i32 %.decomposed, -262144, !dbg !30
  %90 = add nsw i32 %89, %25, !dbg !31
  %91 = add nsw i32 %90, %87, !dbg !32
  %92 = add nsw i32 %.decomposed3, -262144, !dbg !30
  %93 = add nsw i32 %92, %26, !dbg !31
  %94 = add nsw i32 %93, %88, !dbg !32
  %95 = sext i32 %91 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %97 = sext i32 %94 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !33
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !34
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %109 = sext i32 %11 to i64, !dbg !35
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !35
  %111 = sext i32 %12 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !35
  %113 = bitcast float %77 to i32, !dbg !36
  %114 = select i1 %21, i32 %113, i32 %100, !dbg !37
  %115 = bitcast float %78 to i32, !dbg !36
  %116 = select i1 %21, i32 %115, i32 %101, !dbg !37
  %117 = bitcast float %79 to i32, !dbg !36
  %118 = select i1 %21, i32 %117, i32 %102, !dbg !37
  %119 = bitcast float %80 to i32, !dbg !36
  %120 = select i1 %21, i32 %119, i32 %103, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %116, i32 %118, i32 %120, ptr addrspace(1) %110, i1 true) #1, !dbg !36
  %121 = bitcast float %81 to i32, !dbg !36
  %122 = select i1 %22, i32 %121, i32 %105, !dbg !37
  %123 = bitcast float %82 to i32, !dbg !36
  %124 = select i1 %22, i32 %123, i32 %106, !dbg !37
  %125 = bitcast float %83 to i32, !dbg !36
  %126 = select i1 %22, i32 %125, i32 %107, !dbg !37
  %127 = bitcast float %84 to i32, !dbg !36
  %128 = select i1 %22, i32 %127, i32 %108, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %122, i32 %124, i32 %126, i32 %128, ptr addrspace(1) %112, i1 true) #1, !dbg !36
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbvtqtxymf5hm5wu2gl6j2xqara5xkjfrgrsj4j74xts43xaiok.py", directory: "inductor_cache/qb")
!4 = !{ptr @triton_poi_fused_cat_46, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_46, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_46", linkageName: "triton_poi_fused_cat_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 42, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 56, scope: !7)
!33 = !DILocation(line: 41, column: 31, scope: !7)
!34 = !DILocation(line: 41, column: 68, scope: !7)
!35 = !DILocation(line: 43, column: 25, scope: !7)
!36 = !DILocation(line: 43, column: 37, scope: !7)
!37 = !DILocation(line: 0, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
