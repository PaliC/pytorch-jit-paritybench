; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 124, !dbg !12
  %13 = or disjoint i32 %8, %10, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 2, !dbg !16
  %.lobit1 = lshr i32 %9, 5, !dbg !17
  %19 = and i32 %.lobit1, 3, !dbg !17
  %20 = or disjoint i32 %18, %19, !dbg !18
  %21 = icmp slt i32 %18, 4, !dbg !19
  %22 = icmp slt i32 %20, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %23 = sdiv i32 %.frozen, 64, !dbg !20
  %24 = mul i32 %23, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %25 = add i32 %13, %17, !dbg !22
  %26 = shl i32 %25, 2, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = and i1 %21, %15, !dbg !24
  %30 = and i1 %16, %22, !dbg !24
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #2, !dbg !25
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !25
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !25
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !25
  %36 = bitcast i32 %32 to float, !dbg !25
  %37 = bitcast i32 %33 to float, !dbg !25
  %38 = bitcast i32 %34 to float, !dbg !25
  %39 = bitcast i32 %35 to float, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %29) #2, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = sext i32 %18 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %21) #2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = bitcast i32 %53 to float, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = fadd float %46, %57, !dbg !30
  %62 = fadd float %47, %58, !dbg !30
  %63 = fadd float %48, %59, !dbg !30
  %64 = fadd float %49, %60, !dbg !30
  %65 = fadd float %61, %36, !dbg !31
  %66 = fadd float %62, %37, !dbg !31
  %67 = fadd float %63, %38, !dbg !31
  %68 = fadd float %64, %39, !dbg !31
  %69 = shl i32 %20, 6, !dbg !32
  %70 = add i32 %69, %.decomposed, !dbg !33
  %71 = shl i32 %23, 8, !dbg !34
  %72 = add i32 %70, %71, !dbg !35
  %73 = sext i32 %72 to i64, !dbg !36
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !36
  %75 = and i32 %11, 508, !dbg !37
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  %77 = bitcast float %65 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !37
  %78 = getelementptr inbounds i8, ptr addrspace(3) %76, i32 528, !dbg !37
  %79 = bitcast float %66 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !37
  %80 = getelementptr inbounds i8, ptr addrspace(3) %76, i32 1056, !dbg !37
  %81 = bitcast float %67 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !37
  %82 = getelementptr inbounds i8, ptr addrspace(3) %76, i32 1584, !dbg !37
  %83 = bitcast float %68 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %84 = lshr i32 %11, 5, !dbg !37
  %85 = and i32 %84, 12, !dbg !37
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !37
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %75, !dbg !37
  %.extract = load i32, ptr addrspace(3) %87, align 16, !dbg !37
  %88 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 4, !dbg !37
  %.extract5 = load i32, ptr addrspace(3) %88, align 4, !dbg !37
  %89 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 8, !dbg !37
  %.extract6 = load i32, ptr addrspace(3) %89, align 8, !dbg !37
  %90 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 12, !dbg !37
  %.extract7 = load i32, ptr addrspace(3) %90, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract6, i32 %.extract7, ptr addrspace(1) %74, i1 %30) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxsaktgl4yafrcwonfxkoakr7xyqoiuiot2ac5gbqlju4a2jsgbl.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_clone_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_12", linkageName: "triton_poi_fused_clone_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 42, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 53, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
