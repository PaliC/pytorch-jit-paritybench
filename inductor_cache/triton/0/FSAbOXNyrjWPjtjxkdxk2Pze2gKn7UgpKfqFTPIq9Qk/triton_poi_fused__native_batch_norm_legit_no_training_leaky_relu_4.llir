; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 6, !dbg !15
  %20 = and i32 %15, 60, !dbg !16
  %21 = or disjoint i32 %19, %20, !dbg !17
  %22 = icmp slt i32 %21, 64, !dbg !18
  %23 = shl i32 %16, 6, !dbg !19
  %24 = shl i32 %17, 6, !dbg !19
  %25 = add i32 %21, %23, !dbg !20
  %26 = add i32 %21, %24, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %22) #4, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %22) #4, !dbg !22
  %33 = sext i32 %21 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #4, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !29
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #4, !dbg !30
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !31
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !31
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !31
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !31
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %54, 0, !dbg !32
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %55, 0, !dbg !32
  br i1 %.not.i, label %61, label %56, !dbg !32

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !32

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !32

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !32
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i18 = icmp eq i32 %66, 0, !dbg !32
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i21 = icmp eq i32 %67, 0, !dbg !32
  br i1 %.not.i18, label %73, label %68, !dbg !32

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %71, label %69, !dbg !32

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %76, label %74, !dbg !32

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

__nv_sqrtf.exit22:                                ; preds = %69, %71, %74, %76
  %.0.i20 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !32
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i23 = icmp eq i32 %78, 0, !dbg !32
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i26 = icmp eq i32 %79, 0, !dbg !32
  br i1 %.not.i23, label %85, label %80, !dbg !32

80:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %83, label %81, !dbg !32

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

85:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %88, label %86, !dbg !32

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

__nv_sqrtf.exit27:                                ; preds = %81, %83, %86, %88
  %.0.i25 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !32
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i28 = icmp eq i32 %90, 0, !dbg !32
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i31 = icmp eq i32 %91, 0, !dbg !32
  br i1 %.not.i28, label %97, label %92, !dbg !32

92:                                               ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %95, label %93, !dbg !32

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

97:                                               ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

__nv_sqrtf.exit32:                                ; preds = %93, %95, %98, %100
  %.0.i30 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %103 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %111 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %113 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %122 = and i32 %15, 12, !dbg !12
  %123 = or disjoint i32 %10, %122, !dbg !13
  %.frozen = freeze i32 %123, !dbg !33
  %124 = sdiv i32 %.frozen, 1024, !dbg !33
  %125 = mul i32 %124, 1024, !dbg !34
  %.decomposed = sub i32 %.frozen, %125, !dbg !34
  %126 = lshr i32 %11, 2, !dbg !16
  %127 = and i32 %126, 31, !dbg !16
  %128 = or disjoint i32 %127, %19, !dbg !17
  %129 = or disjoint i32 %128, 32, !dbg !17
  %130 = icmp slt i32 %129, 64, !dbg !18
  %131 = icmp slt i32 %128, 64, !dbg !18
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !35
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !35
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !35
  %136 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !24
  %137 = insertelement <4 x i32> %136, i32 %105, i64 1, !dbg !24
  %138 = insertelement <4 x i32> %137, i32 %107, i64 2, !dbg !24
  %139 = insertelement <4 x i32> %138, i32 %109, i64 3, !dbg !24
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !24
  %141 = shufflevector <4 x float> %140, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %142 = insertelement <8 x i32> poison, i32 %102, i64 0, !dbg !22
  %143 = insertelement <8 x i32> %142, i32 %104, i64 1, !dbg !22
  %144 = insertelement <8 x i32> %143, i32 %106, i64 2, !dbg !22
  %145 = insertelement <8 x i32> %144, i32 %108, i64 3, !dbg !22
  %146 = insertelement <8 x i32> %145, i32 %110, i64 4, !dbg !22
  %147 = insertelement <8 x i32> %146, i32 %111, i64 5, !dbg !22
  %148 = insertelement <8 x i32> %147, i32 %112, i64 6, !dbg !22
  %149 = insertelement <8 x i32> %148, i32 %113, i64 7, !dbg !22
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !22
  %151 = fsub <8 x float> %150, %141, !dbg !36
  %152 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !30
  %153 = insertelement <4 x i32> %152, i32 %115, i64 1, !dbg !30
  %154 = insertelement <4 x i32> %153, i32 %116, i64 2, !dbg !30
  %155 = insertelement <4 x i32> %154, i32 %117, i64 3, !dbg !30
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !30
  %157 = shufflevector <4 x float> %156, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %158 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !28
  %159 = insertelement <4 x i32> %158, i32 %119, i64 1, !dbg !28
  %160 = insertelement <4 x i32> %159, i32 %120, i64 2, !dbg !28
  %161 = insertelement <4 x i32> %160, i32 %121, i64 3, !dbg !28
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !28
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %164 = insertelement <8 x float> poison, float %135, i64 0, !dbg !37
  %165 = insertelement <8 x float> %164, float %134, i64 1, !dbg !37
  %166 = insertelement <8 x float> %165, float %133, i64 2, !dbg !37
  %167 = insertelement <8 x float> %166, float %132, i64 3, !dbg !37
  %168 = shufflevector <8 x float> %167, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !37
  %169 = fmul <8 x float> %151, %168, !dbg !37
  %170 = fmul <8 x float> %169, %163, !dbg !38
  %171 = fadd <8 x float> %170, %157, !dbg !39
  %172 = fcmp ogt <8 x float> %171, zeroinitializer, !dbg !40
  %173 = extractelement <8 x float> %171, i64 7, !dbg !41
  %174 = fmul float %173, 0x3FC99999A0000000, !dbg !42
  %175 = extractelement <8 x float> %171, i64 6, !dbg !41
  %176 = fmul float %175, 0x3FC99999A0000000, !dbg !42
  %177 = extractelement <8 x float> %171, i64 5, !dbg !41
  %178 = fmul float %177, 0x3FC99999A0000000, !dbg !42
  %179 = extractelement <8 x float> %171, i64 4, !dbg !41
  %180 = fmul float %179, 0x3FC99999A0000000, !dbg !42
  %181 = extractelement <8 x float> %171, i64 3, !dbg !41
  %182 = fmul float %181, 0x3FC99999A0000000, !dbg !42
  %183 = extractelement <8 x float> %171, i64 2, !dbg !41
  %184 = fmul float %183, 0x3FC99999A0000000, !dbg !42
  %185 = extractelement <8 x float> %171, i64 1, !dbg !41
  %186 = fmul float %185, 0x3FC99999A0000000, !dbg !42
  %187 = extractelement <8 x float> %171, i64 0, !dbg !41
  %188 = fmul float %187, 0x3FC99999A0000000, !dbg !42
  %189 = extractelement <8 x i1> %172, i64 7, !dbg !41
  %190 = select i1 %189, float %173, float %174, !dbg !41
  %191 = extractelement <8 x i1> %172, i64 6, !dbg !41
  %192 = select i1 %191, float %175, float %176, !dbg !41
  %193 = extractelement <8 x i1> %172, i64 5, !dbg !41
  %194 = select i1 %193, float %177, float %178, !dbg !41
  %195 = extractelement <8 x i1> %172, i64 4, !dbg !41
  %196 = select i1 %195, float %179, float %180, !dbg !41
  %197 = extractelement <8 x i1> %172, i64 3, !dbg !41
  %198 = select i1 %197, float %181, float %182, !dbg !41
  %199 = extractelement <8 x i1> %172, i64 2, !dbg !41
  %200 = select i1 %199, float %183, float %184, !dbg !41
  %201 = extractelement <8 x i1> %172, i64 1, !dbg !41
  %202 = select i1 %201, float %185, float %186, !dbg !41
  %203 = extractelement <8 x i1> %172, i64 0, !dbg !41
  %204 = select i1 %203, float %187, float %188, !dbg !41
  %205 = shl i32 %128, 10, !dbg !43
  %206 = shl i32 %129, 10, !dbg !43
  %207 = shl i32 %124, 16, !dbg !44
  %208 = add i32 %207, %.decomposed, !dbg !45
  %209 = add i32 %208, %205, !dbg !46
  %210 = add i32 %208, %206, !dbg !46
  %211 = sext i32 %209 to i64, !dbg !47
  %212 = getelementptr float, ptr addrspace(1) %5, i64 %211, !dbg !47
  %213 = sext i32 %210 to i64, !dbg !47
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !47
  %215 = shl i32 %11, 6, !dbg !48
  %216 = and i32 %215, 960, !dbg !48
  %217 = or disjoint i32 %216, %13, !dbg !48
  %218 = and i32 %15, 508, !dbg !48
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !48
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !48
  %221 = bitcast float %190 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !48
  %222 = or disjoint i32 %217, 16, !dbg !48
  %223 = lshr i32 %222, 2, !dbg !48
  %224 = and i32 %223, 244, !dbg !48
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !48
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %222, !dbg !48
  %227 = bitcast float %192 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !48
  %228 = or disjoint i32 %217, 32, !dbg !48
  %229 = lshr i32 %228, 2, !dbg !48
  %230 = and i32 %229, 248, !dbg !48
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !48
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %228, !dbg !48
  %233 = bitcast float %194 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !48
  %234 = or disjoint i32 %217, 48, !dbg !48
  %235 = lshr i32 %234, 2, !dbg !48
  %236 = and i32 %235, 252, !dbg !48
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !48
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !48
  %239 = bitcast float %196 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !48
  %240 = or disjoint i32 %217, 8, !dbg !48
  %241 = getelementptr float, ptr addrspace(3) %219, i32 %240, !dbg !48
  %242 = bitcast float %198 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !48
  %243 = or disjoint i32 %217, 24, !dbg !48
  %244 = lshr i32 %243, 2, !dbg !48
  %245 = and i32 %244, 244, !dbg !48
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !48
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %243, !dbg !48
  %248 = bitcast float %200 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !48
  %249 = or disjoint i32 %217, 40, !dbg !48
  %250 = lshr i32 %249, 2, !dbg !48
  %251 = and i32 %250, 248, !dbg !48
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !48
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !48
  %254 = bitcast float %202 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !48
  %255 = or disjoint i32 %217, 56, !dbg !48
  %256 = lshr i32 %255, 2, !dbg !48
  %257 = and i32 %256, 252, !dbg !48
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !48
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %255, !dbg !48
  %260 = bitcast float %204 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %261 = and i32 %11, 124, !dbg !48
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !48
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %218, !dbg !48
  %264 = or disjoint i32 %218, 512, !dbg !48
  %265 = lshr exact i32 %264, 2, !dbg !48
  %266 = and i32 %265, 252, !dbg !48
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !48
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %264, !dbg !48
  %269 = load <4 x i32>, ptr addrspace(3) %268, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %263, align 16, !dbg !48
  %270 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 4, !dbg !48
  %.extract11 = load i32, ptr addrspace(3) %270, align 4, !dbg !48
  %271 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 8, !dbg !48
  %.extract12 = load i32, ptr addrspace(3) %271, align 8, !dbg !48
  %272 = getelementptr inbounds i8, ptr addrspace(3) %263, i32 12, !dbg !48
  %.extract13 = load i32, ptr addrspace(3) %272, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %212, i1 %131) #4, !dbg !48
  %.extract14 = extractelement <4 x i32> %269, i64 0, !dbg !48
  %.extract15 = extractelement <4 x i32> %269, i64 1, !dbg !48
  %.extract16 = extractelement <4 x i32> %269, i64 2, !dbg !48
  %.extract17 = extractelement <4 x i32> %269, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %214, i1 %130) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyufcnzadnkkmhyjttwfdkje4qmvuxag3hhhpbjlmtpt2p3g33ef.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 53, column: 46, scope: !7)
!45 = !DILocation(line: 53, column: 30, scope: !7)
!46 = !DILocation(line: 53, column: 40, scope: !7)
!47 = !DILocation(line: 53, column: 25, scope: !7)
!48 = !DILocation(line: 53, column: 58, scope: !7)
!49 = !DILocation(line: 53, column: 4, scope: !7)
