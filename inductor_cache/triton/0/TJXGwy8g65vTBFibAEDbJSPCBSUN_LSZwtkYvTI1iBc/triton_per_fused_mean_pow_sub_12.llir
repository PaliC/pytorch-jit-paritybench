; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 2048, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %15 = or disjoint i32 %13, 16, !dbg !15
  %16 = or disjoint i32 %13, 24, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %17 = sdiv i32 %.frozen, 32, !dbg !16
  %18 = mul i32 %17, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl nuw nsw i32 %13, 7, !dbg !18
  %20 = shl nuw nsw i32 %14, 7, !dbg !18
  %21 = shl nuw nsw i32 %15, 7, !dbg !18
  %22 = shl nuw nsw i32 %16, 7, !dbg !18
  %23 = shl i32 %17, 7, !dbg !19
  %24 = or disjoint i32 %23, %13, !dbg !20
  %25 = or disjoint i32 %23, %14, !dbg !20
  %26 = or disjoint i32 %23, %15, !dbg !20
  %27 = or disjoint i32 %23, %16, !dbg !20
  %28 = or disjoint i32 %24, 32, !dbg !20
  %29 = or disjoint i32 %24, 40, !dbg !20
  %30 = or disjoint i32 %24, 48, !dbg !20
  %31 = or disjoint i32 %24, 56, !dbg !20
  %32 = or disjoint i32 %24, 64, !dbg !20
  %33 = or disjoint i32 %24, 72, !dbg !20
  %34 = or disjoint i32 %24, 80, !dbg !20
  %35 = or disjoint i32 %24, 88, !dbg !20
  %36 = or disjoint i32 %24, 96, !dbg !20
  %37 = or disjoint i32 %24, 104, !dbg !20
  %38 = or disjoint i32 %24, 112, !dbg !20
  %39 = or disjoint i32 %24, 120, !dbg !20
  %40 = sdiv i32 %24, 32, !dbg !21
  %41 = sdiv i32 %25, 32, !dbg !21
  %42 = sdiv i32 %26, 32, !dbg !21
  %43 = sdiv i32 %27, 32, !dbg !21
  %44 = sdiv i32 %28, 32, !dbg !21
  %45 = sdiv i32 %29, 32, !dbg !21
  %46 = sdiv i32 %30, 32, !dbg !21
  %47 = sdiv i32 %31, 32, !dbg !21
  %48 = sdiv i32 %32, 32, !dbg !21
  %49 = sdiv i32 %33, 32, !dbg !21
  %50 = sdiv i32 %34, 32, !dbg !21
  %51 = sdiv i32 %35, 32, !dbg !21
  %52 = sdiv i32 %36, 32, !dbg !21
  %53 = sdiv i32 %37, 32, !dbg !21
  %54 = sdiv i32 %38, 32, !dbg !21
  %55 = sdiv i32 %39, 32, !dbg !21
  %56 = srem i32 %40, 32, !dbg !22
  %57 = srem i32 %41, 32, !dbg !22
  %58 = srem i32 %42, 32, !dbg !22
  %59 = srem i32 %43, 32, !dbg !22
  %60 = srem i32 %44, 32, !dbg !22
  %61 = srem i32 %45, 32, !dbg !22
  %62 = srem i32 %46, 32, !dbg !22
  %63 = srem i32 %47, 32, !dbg !22
  %64 = srem i32 %48, 32, !dbg !22
  %65 = srem i32 %49, 32, !dbg !22
  %66 = srem i32 %50, 32, !dbg !22
  %67 = srem i32 %51, 32, !dbg !22
  %68 = srem i32 %52, 32, !dbg !22
  %69 = srem i32 %53, 32, !dbg !22
  %70 = srem i32 %54, 32, !dbg !22
  %71 = srem i32 %55, 32, !dbg !22
  %72 = shl nsw i32 %56, 12, !dbg !23
  %73 = shl nsw i32 %57, 12, !dbg !23
  %74 = shl nsw i32 %58, 12, !dbg !23
  %75 = shl nsw i32 %59, 12, !dbg !23
  %76 = shl nsw i32 %60, 12, !dbg !23
  %77 = shl nsw i32 %61, 12, !dbg !23
  %78 = shl nsw i32 %62, 12, !dbg !23
  %79 = shl nsw i32 %63, 12, !dbg !23
  %80 = shl nsw i32 %64, 12, !dbg !23
  %81 = shl nsw i32 %65, 12, !dbg !23
  %82 = shl nsw i32 %66, 12, !dbg !23
  %83 = shl nsw i32 %67, 12, !dbg !23
  %84 = shl nsw i32 %68, 12, !dbg !23
  %85 = shl nsw i32 %69, 12, !dbg !23
  %86 = shl nsw i32 %70, 12, !dbg !23
  %87 = shl nsw i32 %71, 12, !dbg !23
  %88 = or disjoint i32 %19, %77, !dbg !24
  %89 = or disjoint i32 %19, %78, !dbg !24
  %90 = or disjoint i32 %19, %79, !dbg !24
  %91 = or disjoint i32 %19, %81, !dbg !24
  %92 = or disjoint i32 %19, %82, !dbg !24
  %93 = or disjoint i32 %19, %83, !dbg !24
  %94 = or disjoint i32 %19, %85, !dbg !24
  %95 = or disjoint i32 %19, %86, !dbg !24
  %96 = or disjoint i32 %19, %87, !dbg !24
  %97 = shl nsw i32 %.decomposed, 13, !dbg !25
  %98 = add i32 %24, %97, !dbg !26
  %99 = add i32 %25, %97, !dbg !26
  %100 = add i32 %26, %97, !dbg !26
  %101 = add i32 %27, %97, !dbg !26
  %102 = add i32 %28, %97, !dbg !26
  %103 = add i32 %29, %97, !dbg !26
  %104 = add i32 %30, %97, !dbg !26
  %105 = add i32 %31, %97, !dbg !26
  %106 = add i32 %32, %97, !dbg !26
  %107 = add i32 %33, %97, !dbg !26
  %108 = add i32 %34, %97, !dbg !26
  %109 = add i32 %35, %97, !dbg !26
  %110 = add i32 %36, %97, !dbg !26
  %111 = add i32 %37, %97, !dbg !26
  %112 = add i32 %38, %97, !dbg !26
  %113 = add i32 %39, %97, !dbg !26
  %114 = sdiv i32 %98, 131072, !dbg !27
  %115 = sdiv i32 %99, 131072, !dbg !27
  %116 = sdiv i32 %100, 131072, !dbg !27
  %117 = sdiv i32 %101, 131072, !dbg !27
  %118 = sdiv i32 %102, 131072, !dbg !27
  %119 = sdiv i32 %103, 131072, !dbg !27
  %120 = sdiv i32 %104, 131072, !dbg !27
  %121 = sdiv i32 %105, 131072, !dbg !27
  %122 = sdiv i32 %106, 131072, !dbg !27
  %123 = sdiv i32 %107, 131072, !dbg !27
  %124 = sdiv i32 %108, 131072, !dbg !27
  %125 = sdiv i32 %109, 131072, !dbg !27
  %126 = sdiv i32 %110, 131072, !dbg !27
  %127 = sdiv i32 %111, 131072, !dbg !27
  %128 = sdiv i32 %112, 131072, !dbg !27
  %129 = sdiv i32 %113, 131072, !dbg !27
  %130 = shl nsw i32 %114, 17, !dbg !28
  %131 = shl nsw i32 %115, 17, !dbg !28
  %132 = shl nsw i32 %116, 17, !dbg !28
  %133 = shl nsw i32 %117, 17, !dbg !28
  %134 = shl nsw i32 %118, 17, !dbg !28
  %135 = shl nsw i32 %119, 17, !dbg !28
  %136 = shl nsw i32 %120, 17, !dbg !28
  %137 = shl nsw i32 %121, 17, !dbg !28
  %138 = shl nsw i32 %122, 17, !dbg !28
  %139 = shl nsw i32 %123, 17, !dbg !28
  %140 = shl nsw i32 %124, 17, !dbg !28
  %141 = shl nsw i32 %125, 17, !dbg !28
  %142 = shl nsw i32 %126, 17, !dbg !28
  %143 = shl nsw i32 %127, 17, !dbg !28
  %144 = shl nsw i32 %128, 17, !dbg !28
  %145 = shl nsw i32 %129, 17, !dbg !28
  %146 = sdiv i32 %98, 1024, !dbg !29
  %147 = sdiv i32 %99, 1024, !dbg !29
  %148 = sdiv i32 %100, 1024, !dbg !29
  %149 = sdiv i32 %101, 1024, !dbg !29
  %150 = sdiv i32 %102, 1024, !dbg !29
  %151 = sdiv i32 %103, 1024, !dbg !29
  %152 = sdiv i32 %104, 1024, !dbg !29
  %153 = sdiv i32 %105, 1024, !dbg !29
  %154 = sdiv i32 %106, 1024, !dbg !29
  %155 = sdiv i32 %107, 1024, !dbg !29
  %156 = sdiv i32 %108, 1024, !dbg !29
  %157 = sdiv i32 %109, 1024, !dbg !29
  %158 = sdiv i32 %110, 1024, !dbg !29
  %159 = sdiv i32 %111, 1024, !dbg !29
  %160 = sdiv i32 %112, 1024, !dbg !29
  %161 = sdiv i32 %113, 1024, !dbg !29
  %162 = srem i32 %146, 128, !dbg !30
  %163 = srem i32 %147, 128, !dbg !30
  %164 = srem i32 %148, 128, !dbg !30
  %165 = srem i32 %149, 128, !dbg !30
  %166 = srem i32 %150, 128, !dbg !30
  %167 = srem i32 %151, 128, !dbg !30
  %168 = srem i32 %152, 128, !dbg !30
  %169 = srem i32 %153, 128, !dbg !30
  %170 = srem i32 %154, 128, !dbg !30
  %171 = srem i32 %155, 128, !dbg !30
  %172 = srem i32 %156, 128, !dbg !30
  %173 = srem i32 %157, 128, !dbg !30
  %174 = srem i32 %158, 128, !dbg !30
  %175 = srem i32 %159, 128, !dbg !30
  %176 = srem i32 %160, 128, !dbg !30
  %177 = srem i32 %161, 128, !dbg !30
  %178 = add i32 %162, %130, !dbg !24
  %179 = add i32 %178, %19, !dbg !31
  %180 = add i32 %179, %72, !dbg !32
  %181 = add i32 %163, %131, !dbg !24
  %182 = add i32 %181, %20, !dbg !31
  %183 = add i32 %182, %73, !dbg !32
  %184 = add i32 %164, %132, !dbg !24
  %185 = add i32 %184, %21, !dbg !31
  %186 = add i32 %185, %74, !dbg !32
  %187 = add i32 %165, %133, !dbg !24
  %188 = add i32 %187, %22, !dbg !31
  %189 = add i32 %188, %75, !dbg !32
  %190 = add i32 %166, %134, !dbg !24
  %191 = add i32 %190, %19, !dbg !31
  %192 = add i32 %191, %76, !dbg !32
  %193 = add i32 %167, %135, !dbg !24
  %194 = add i32 %193, 1024, !dbg !31
  %195 = add i32 %194, %88, !dbg !32
  %196 = add i32 %168, %136, !dbg !24
  %197 = add i32 %196, 2048, !dbg !31
  %198 = add i32 %197, %89, !dbg !32
  %199 = add i32 %169, %137, !dbg !24
  %200 = add i32 %199, 3072, !dbg !31
  %201 = add i32 %200, %90, !dbg !32
  %202 = add i32 %170, %138, !dbg !24
  %203 = add i32 %202, %19, !dbg !31
  %204 = add i32 %203, %80, !dbg !32
  %205 = add i32 %171, %139, !dbg !24
  %206 = add i32 %205, 1024, !dbg !31
  %207 = add i32 %206, %91, !dbg !32
  %208 = add i32 %172, %140, !dbg !24
  %209 = add i32 %208, 2048, !dbg !31
  %210 = add i32 %209, %92, !dbg !32
  %211 = add i32 %173, %141, !dbg !24
  %212 = add i32 %211, 3072, !dbg !31
  %213 = add i32 %212, %93, !dbg !32
  %214 = add i32 %174, %142, !dbg !24
  %215 = add i32 %214, %19, !dbg !31
  %216 = add i32 %215, %84, !dbg !32
  %217 = add i32 %175, %143, !dbg !24
  %218 = add i32 %217, 1024, !dbg !31
  %219 = add i32 %218, %94, !dbg !32
  %220 = add i32 %176, %144, !dbg !24
  %221 = add i32 %220, 2048, !dbg !31
  %222 = add i32 %221, %95, !dbg !32
  %223 = add i32 %177, %145, !dbg !24
  %224 = add i32 %223, 3072, !dbg !31
  %225 = add i32 %224, %96, !dbg !32
  %226 = sext i32 %180 to i64, !dbg !33
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !33
  %228 = sext i32 %183 to i64, !dbg !33
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !33
  %230 = sext i32 %186 to i64, !dbg !33
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !33
  %232 = sext i32 %189 to i64, !dbg !33
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !33
  %234 = sext i32 %192 to i64, !dbg !33
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !33
  %236 = sext i32 %195 to i64, !dbg !33
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !33
  %238 = sext i32 %198 to i64, !dbg !33
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !33
  %240 = sext i32 %201 to i64, !dbg !33
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !33
  %242 = sext i32 %204 to i64, !dbg !33
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !33
  %244 = sext i32 %207 to i64, !dbg !33
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !33
  %246 = sext i32 %210 to i64, !dbg !33
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !33
  %248 = sext i32 %213 to i64, !dbg !33
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !33
  %250 = sext i32 %216 to i64, !dbg !33
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !33
  %252 = sext i32 %219 to i64, !dbg !33
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !33
  %254 = sext i32 %222 to i64, !dbg !33
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !33
  %256 = sext i32 %225 to i64, !dbg !33
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !33
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %259 = bitcast i32 %258 to float, !dbg !34
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %263 = bitcast i32 %262 to float, !dbg !34
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %265 = bitcast i32 %264 to float, !dbg !34
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %267 = bitcast i32 %266 to float, !dbg !34
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %269 = bitcast i32 %268 to float, !dbg !34
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %280 = sext i32 %162 to i64, !dbg !35
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !35
  %282 = sext i32 %163 to i64, !dbg !35
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !35
  %284 = sext i32 %164 to i64, !dbg !35
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !35
  %286 = sext i32 %165 to i64, !dbg !35
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !35
  %288 = sext i32 %166 to i64, !dbg !35
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !35
  %290 = sext i32 %167 to i64, !dbg !35
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %290, !dbg !35
  %292 = sext i32 %168 to i64, !dbg !35
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %292, !dbg !35
  %294 = sext i32 %169 to i64, !dbg !35
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %294, !dbg !35
  %296 = sext i32 %170 to i64, !dbg !35
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !35
  %298 = sext i32 %171 to i64, !dbg !35
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %298, !dbg !35
  %300 = sext i32 %172 to i64, !dbg !35
  %301 = getelementptr float, ptr addrspace(1) %1, i64 %300, !dbg !35
  %302 = sext i32 %173 to i64, !dbg !35
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %302, !dbg !35
  %304 = sext i32 %174 to i64, !dbg !35
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !35
  %306 = sext i32 %175 to i64, !dbg !35
  %307 = getelementptr float, ptr addrspace(1) %1, i64 %306, !dbg !35
  %308 = sext i32 %176 to i64, !dbg !35
  %309 = getelementptr float, ptr addrspace(1) %1, i64 %308, !dbg !35
  %310 = sext i32 %177 to i64, !dbg !35
  %311 = getelementptr float, ptr addrspace(1) %1, i64 %310, !dbg !35
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %313 = bitcast i32 %312 to float, !dbg !36
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %315 = bitcast i32 %314 to float, !dbg !36
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %317 = bitcast i32 %316 to float, !dbg !36
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %319 = bitcast i32 %318 to float, !dbg !36
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %321 = bitcast i32 %320 to float, !dbg !36
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %323 = bitcast i32 %322 to float, !dbg !36
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %301, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %334 = or disjoint i32 %19, 262144, !dbg !37
  %335 = or disjoint i32 %19, 263168, !dbg !37
  %336 = or disjoint i32 %19, 264192, !dbg !37
  %337 = or disjoint i32 %19, 265216, !dbg !37
  %338 = add i32 %178, %334, !dbg !38
  %339 = add i32 %338, %72, !dbg !39
  %340 = add i32 %181, 262144, !dbg !40
  %341 = add i32 %340, %20, !dbg !38
  %342 = add i32 %341, %73, !dbg !39
  %343 = add i32 %184, 262144, !dbg !40
  %344 = add i32 %343, %21, !dbg !38
  %345 = add i32 %344, %74, !dbg !39
  %346 = add i32 %187, 262144, !dbg !40
  %347 = add i32 %346, %22, !dbg !38
  %348 = add i32 %347, %75, !dbg !39
  %349 = add i32 %190, %334, !dbg !38
  %350 = add i32 %349, %76, !dbg !39
  %351 = add i32 %193, %335, !dbg !38
  %352 = add i32 %351, %77, !dbg !39
  %353 = add i32 %196, %336, !dbg !38
  %354 = add i32 %353, %78, !dbg !39
  %355 = add i32 %199, %337, !dbg !38
  %356 = add i32 %355, %79, !dbg !39
  %357 = add i32 %202, %334, !dbg !38
  %358 = add i32 %357, %80, !dbg !39
  %359 = add i32 %205, %335, !dbg !38
  %360 = add i32 %359, %81, !dbg !39
  %361 = add i32 %208, %336, !dbg !38
  %362 = add i32 %361, %82, !dbg !39
  %363 = add i32 %211, %337, !dbg !38
  %364 = add i32 %363, %83, !dbg !39
  %365 = add i32 %214, %334, !dbg !38
  %366 = add i32 %365, %84, !dbg !39
  %367 = add i32 %217, %335, !dbg !38
  %368 = add i32 %367, %85, !dbg !39
  %369 = add i32 %220, %336, !dbg !38
  %370 = add i32 %369, %86, !dbg !39
  %371 = add i32 %223, %337, !dbg !38
  %372 = add i32 %371, %87, !dbg !39
  %373 = sext i32 %339 to i64, !dbg !41
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !41
  %375 = sext i32 %342 to i64, !dbg !41
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !41
  %377 = sext i32 %345 to i64, !dbg !41
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !41
  %379 = sext i32 %348 to i64, !dbg !41
  %380 = getelementptr float, ptr addrspace(1) %0, i64 %379, !dbg !41
  %381 = sext i32 %350 to i64, !dbg !41
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !41
  %383 = sext i32 %352 to i64, !dbg !41
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !41
  %385 = sext i32 %354 to i64, !dbg !41
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !41
  %387 = sext i32 %356 to i64, !dbg !41
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %387, !dbg !41
  %389 = sext i32 %358 to i64, !dbg !41
  %390 = getelementptr float, ptr addrspace(1) %0, i64 %389, !dbg !41
  %391 = sext i32 %360 to i64, !dbg !41
  %392 = getelementptr float, ptr addrspace(1) %0, i64 %391, !dbg !41
  %393 = sext i32 %362 to i64, !dbg !41
  %394 = getelementptr float, ptr addrspace(1) %0, i64 %393, !dbg !41
  %395 = sext i32 %364 to i64, !dbg !41
  %396 = getelementptr float, ptr addrspace(1) %0, i64 %395, !dbg !41
  %397 = sext i32 %366 to i64, !dbg !41
  %398 = getelementptr float, ptr addrspace(1) %0, i64 %397, !dbg !41
  %399 = sext i32 %368 to i64, !dbg !41
  %400 = getelementptr float, ptr addrspace(1) %0, i64 %399, !dbg !41
  %401 = sext i32 %370 to i64, !dbg !41
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !41
  %403 = sext i32 %372 to i64, !dbg !41
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !41
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %406 = bitcast i32 %405 to float, !dbg !42
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %408 = bitcast i32 %407 to float, !dbg !42
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %378, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %410 = bitcast i32 %409 to float, !dbg !42
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %412 = bitcast i32 %411 to float, !dbg !42
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %382, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %414 = bitcast i32 %413 to float, !dbg !42
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %384, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %416 = bitcast i32 %415 to float, !dbg !42
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %386, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %394, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %398, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %400, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %11, i32 0, i1 %11) #3, !dbg !42
  %427 = fadd float %259, %313, !dbg !43
  %428 = fadd float %261, %315, !dbg !43
  %429 = fadd float %263, %317, !dbg !43
  %430 = fadd float %265, %319, !dbg !43
  %431 = fadd float %267, %321, !dbg !43
  %432 = fadd float %269, %323, !dbg !43
  %433 = fadd float %313, %406, !dbg !44
  %434 = fadd float %315, %408, !dbg !44
  %435 = fadd float %317, %410, !dbg !44
  %436 = fadd float %319, %412, !dbg !44
  %437 = fadd float %321, %414, !dbg !44
  %438 = fadd float %323, %416, !dbg !44
  %439 = fsub float %427, %433, !dbg !45
  %440 = fsub float %428, %434, !dbg !45
  %441 = fsub float %429, %435, !dbg !45
  %442 = fsub float %430, %436, !dbg !45
  %443 = fsub float %431, %437, !dbg !45
  %444 = fsub float %432, %438, !dbg !45
  %445 = fmul float %439, %439, !dbg !46
  %446 = fmul float %440, %440, !dbg !46
  %447 = fmul float %441, %441, !dbg !46
  %448 = fmul float %442, %442, !dbg !46
  %449 = fmul float %443, %443, !dbg !46
  %450 = fmul float %444, %444, !dbg !46
  %451 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !34
  %452 = insertelement <2 x i32> %451, i32 %271, i64 1, !dbg !34
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !34
  %454 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !36
  %455 = insertelement <2 x i32> %454, i32 %325, i64 1, !dbg !36
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !36
  %457 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !42
  %458 = insertelement <2 x i32> %457, i32 %418, i64 1, !dbg !42
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !42
  %460 = fadd <2 x float> %453, %456, !dbg !43
  %461 = fadd <2 x float> %456, %459, !dbg !44
  %462 = fsub <2 x float> %460, %461, !dbg !45
  %463 = fmul <2 x float> %462, %462, !dbg !46
  %464 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !34
  %465 = insertelement <2 x i32> %464, i32 %273, i64 1, !dbg !34
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !34
  %467 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !36
  %468 = insertelement <2 x i32> %467, i32 %327, i64 1, !dbg !36
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !36
  %470 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !42
  %471 = insertelement <2 x i32> %470, i32 %420, i64 1, !dbg !42
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !42
  %473 = fadd <2 x float> %466, %469, !dbg !43
  %474 = fadd <2 x float> %469, %472, !dbg !44
  %475 = fsub <2 x float> %473, %474, !dbg !45
  %476 = fmul <2 x float> %475, %475, !dbg !46
  %477 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !34
  %478 = insertelement <2 x i32> %477, i32 %275, i64 1, !dbg !34
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !34
  %480 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !36
  %481 = insertelement <2 x i32> %480, i32 %329, i64 1, !dbg !36
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !36
  %483 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !42
  %484 = insertelement <2 x i32> %483, i32 %422, i64 1, !dbg !42
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !42
  %486 = fadd <2 x float> %479, %482, !dbg !43
  %487 = fadd <2 x float> %482, %485, !dbg !44
  %488 = fsub <2 x float> %486, %487, !dbg !45
  %489 = fmul <2 x float> %488, %488, !dbg !46
  %490 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !34
  %491 = insertelement <2 x i32> %490, i32 %277, i64 1, !dbg !34
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !34
  %493 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !36
  %494 = insertelement <2 x i32> %493, i32 %331, i64 1, !dbg !36
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !36
  %496 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !42
  %497 = insertelement <2 x i32> %496, i32 %424, i64 1, !dbg !42
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !42
  %499 = fadd <2 x float> %492, %495, !dbg !43
  %500 = fadd <2 x float> %495, %498, !dbg !44
  %501 = fsub <2 x float> %499, %500, !dbg !45
  %502 = fmul <2 x float> %501, %501, !dbg !46
  %503 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !34
  %504 = insertelement <2 x i32> %503, i32 %279, i64 1, !dbg !34
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !34
  %506 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !36
  %507 = insertelement <2 x i32> %506, i32 %333, i64 1, !dbg !36
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !36
  %509 = insertelement <2 x i32> poison, i32 %425, i64 0, !dbg !42
  %510 = insertelement <2 x i32> %509, i32 %426, i64 1, !dbg !42
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !42
  %512 = fadd <2 x float> %505, %508, !dbg !43
  %513 = fadd <2 x float> %508, %511, !dbg !44
  %514 = fsub <2 x float> %512, %513, !dbg !45
  %515 = fmul <2 x float> %514, %514, !dbg !46
  %516 = fadd float %445, %446, !dbg !47
  %517 = fadd float %516, %447, !dbg !47
  %518 = fadd float %517, %448, !dbg !47
  %519 = fadd float %518, %449, !dbg !47
  %520 = fadd float %519, %450, !dbg !47
  %521 = extractelement <2 x float> %463, i64 0, !dbg !47
  %522 = fadd float %520, %521, !dbg !47
  %523 = extractelement <2 x float> %463, i64 1, !dbg !47
  %524 = fadd float %522, %523, !dbg !47
  %525 = extractelement <2 x float> %476, i64 0, !dbg !47
  %526 = fadd float %524, %525, !dbg !47
  %527 = extractelement <2 x float> %476, i64 1, !dbg !47
  %528 = fadd float %526, %527, !dbg !47
  %529 = extractelement <2 x float> %489, i64 0, !dbg !47
  %530 = fadd float %528, %529, !dbg !47
  %531 = extractelement <2 x float> %489, i64 1, !dbg !47
  %532 = fadd float %530, %531, !dbg !47
  %533 = extractelement <2 x float> %502, i64 0, !dbg !47
  %534 = fadd float %532, %533, !dbg !47
  %535 = extractelement <2 x float> %502, i64 1, !dbg !47
  %536 = fadd float %534, %535, !dbg !47
  %537 = extractelement <2 x float> %515, i64 0, !dbg !47
  %538 = fadd float %536, %537, !dbg !47
  %539 = extractelement <2 x float> %515, i64 1, !dbg !47
  %540 = fadd float %538, %539, !dbg !47
  %541 = shl nuw nsw i32 %9, 3, !dbg !52
  %542 = or disjoint i32 %541, %13, !dbg !52
  %543 = getelementptr float, ptr addrspace(3) @global_smem, i32 %542, !dbg !52
  %544 = bitcast float %540 to i32, !dbg !52
  %545 = select i1 %11, i32 %544, i32 0, !dbg !47
  %546 = insertelement <1 x i32> poison, i32 %545, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %546, i1 true) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %547 = icmp slt i32 %8, 256, !dbg !52
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !52
  %549 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %548, i1 %547) #3, !dbg !52
  %550 = bitcast i32 %549 to float, !dbg !52
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 4, i32 31), !dbg !52
  %552 = bitcast i32 %551 to float, !dbg !52
  %553 = fadd float %550, %552, !dbg !47
  %554 = bitcast float %553 to i32, !dbg !52
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 2, i32 31), !dbg !52
  %556 = bitcast i32 %555 to float, !dbg !52
  %557 = fadd float %553, %556, !dbg !47
  %558 = bitcast float %557 to i32, !dbg !52
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 1, i32 31), !dbg !52
  %560 = bitcast i32 %559 to float, !dbg !52
  %561 = fadd float %557, %560, !dbg !47
  %562 = and i32 %8, 7, !dbg !52
  %563 = icmp eq i32 %562, 0, !dbg !52
  %564 = and i1 %547, %563, !dbg !52
  %565 = bitcast float %561 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %548, <1 x i32> %565, i1 %564) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %566 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !52
  %567 = load i32, ptr addrspace(3) %566, align 16, !dbg !52
  %568 = sext i32 %10 to i64, !dbg !53
  %569 = getelementptr float, ptr addrspace(1) %2, i64 %568, !dbg !53
  %570 = icmp eq i32 %13, 0, !dbg !54
  %571 = and i1 %570, %11, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %569, i1 %571) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py", directory: "inductor_cache/5r")
!4 = !{ptr @triton_per_fused_mean_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_12", linkageName: "triton_per_fused_mean_pow_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 66, scope: !7)
!20 = !DILocation(line: 33, column: 62, scope: !7)
!21 = !DILocation(line: 33, column: 73, scope: !7)
!22 = !DILocation(line: 33, column: 79, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 114, scope: !7)
!26 = !DILocation(line: 33, column: 109, scope: !7)
!27 = !DILocation(line: 33, column: 121, scope: !7)
!28 = !DILocation(line: 33, column: 94, scope: !7)
!29 = !DILocation(line: 33, column: 161, scope: !7)
!30 = !DILocation(line: 33, column: 169, scope: !7)
!31 = !DILocation(line: 33, column: 86, scope: !7)
!32 = !DILocation(line: 33, column: 133, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 177, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 74, scope: !7)
!37 = !DILocation(line: 35, column: 39, scope: !7)
!38 = !DILocation(line: 35, column: 95, scope: !7)
!39 = !DILocation(line: 35, column: 142, scope: !7)
!40 = !DILocation(line: 35, column: 57, scope: !7)
!41 = !DILocation(line: 35, column: 30, scope: !7)
!42 = !DILocation(line: 35, column: 186, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 42, column: 25, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 43, column: 25, scope: !7)
!54 = !DILocation(line: 43, column: 37, scope: !7)
!55 = !DILocation(line: 43, column: 4, scope: !7)
