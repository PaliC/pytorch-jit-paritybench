; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 512, !dbg !14
  %11 = mul i32 %10, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = srem i32 %10, 32, !dbg !16
  %13 = sdiv i32 %9, 16384, !dbg !17
  %14 = mul nsw i32 %12, 528, !dbg !18
  %15 = mul i32 %13, 17424, !dbg !19
  %16 = add i32 %15, %.decomposed, !dbg !20
  %17 = add i32 %16, %14, !dbg !21
  %18 = sext i32 %17 to i64, !dbg !22
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !22
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !23
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !23
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !23
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !23
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !23
  %25 = add i32 %16, 16, !dbg !24
  %26 = add i32 %25, %14, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !27
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !27
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !27
  %34 = add i32 %16, 528, !dbg !28
  %35 = add i32 %34, %14, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !31
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !31
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !31
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !31
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !31
  %43 = add i32 %16, 544, !dbg !32
  %44 = add i32 %43, %14, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !34
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !35
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !35
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !35
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !35
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !35
  %52 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !23
  %53 = insertelement <4 x i32> %52, i32 %22, i64 1, !dbg !23
  %54 = insertelement <4 x i32> %53, i32 %23, i64 2, !dbg !23
  %55 = insertelement <4 x i32> %54, i32 %24, i64 3, !dbg !23
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !23
  %57 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !27
  %58 = insertelement <4 x i32> %57, i32 %31, i64 1, !dbg !27
  %59 = insertelement <4 x i32> %58, i32 %32, i64 2, !dbg !27
  %60 = insertelement <4 x i32> %59, i32 %33, i64 3, !dbg !27
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !27
  %62 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !31
  %63 = insertelement <4 x i32> %62, i32 %40, i64 1, !dbg !31
  %64 = insertelement <4 x i32> %63, i32 %41, i64 2, !dbg !31
  %65 = insertelement <4 x i32> %64, i32 %42, i64 3, !dbg !31
  %66 = bitcast <4 x i32> %65 to <4 x float>, !dbg !31
  %67 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !35
  %68 = insertelement <4 x i32> %67, i32 %49, i64 1, !dbg !35
  %69 = insertelement <4 x i32> %68, i32 %50, i64 2, !dbg !35
  %70 = insertelement <4 x i32> %69, i32 %51, i64 3, !dbg !35
  %71 = bitcast <4 x i32> %70 to <4 x float>, !dbg !35
  %72 = fcmp ogt <4 x float> %61, %56, !dbg !36
  %73 = zext <4 x i1> %72 to <4 x i8>, !dbg !37
  %74 = fcmp uno <4 x float> %61, zeroinitializer, !dbg !38
  %75 = or <4 x i1> %72, %74, !dbg !42
  %.v = select <4 x i1> %75, <4 x i32> %60, <4 x i32> %55, !dbg !43
  %76 = bitcast <4 x i32> %.v to <4 x float>, !dbg !43
  %77 = fcmp olt <4 x float> %76, %66, !dbg !44
  %78 = select <4 x i1> %77, <4 x i8> splat (i8 2), <4 x i8> %73, !dbg !45
  %79 = fcmp uno <4 x float> %66, zeroinitializer, !dbg !46
  %80 = or <4 x i1> %79, %77, !dbg !48
  %.v1 = select <4 x i1> %80, <4 x i32> %65, <4 x i32> %.v, !dbg !49
  %81 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !49
  %82 = fcmp olt <4 x float> %81, %71, !dbg !50
  %83 = select <4 x i1> %82, <4 x i8> splat (i8 3), <4 x i8> %78, !dbg !51
  %84 = sext i32 %9 to i64, !dbg !52
  %85 = getelementptr i8, ptr addrspace(1) %1, i64 %84, !dbg !52
  %86 = bitcast <4 x i8> %83 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %85, i1 true) #1, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwt6aynfm6wjrahid2jra5pfcpm2mptwb44tyrh4j6ypo6ucrwwv.py", directory: "inductor_cache/wt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 62, scope: !7)
!36 = !DILocation(line: 32, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 32, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 33, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 41, scope: !7)
!48 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !47)
!49 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !47)
!50 = !DILocation(line: 41, column: 20, scope: !7)
!51 = !DILocation(line: 43, column: 35, scope: !7)
!52 = !DILocation(line: 45, column: 25, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 4, scope: !7)
