; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_relu_rsub_sigmoid_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 1, !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = lshr i32 %11, 1, !dbg !12
  %15 = and i32 %14, 4, !dbg !12
  %16 = lshr i32 %11, 1, !dbg !12
  %17 = and i32 %16, 8, !dbg !12
  %18 = and i32 %11, 1, !dbg !12
  %19 = shl nuw nsw i32 %18, 1, !dbg !12
  %20 = shl i32 %11, 1, !dbg !12
  %21 = and i32 %20, 14, !dbg !12
  %22 = or disjoint i32 %15, %13, !dbg !12
  %23 = or disjoint i32 %22, %17, !dbg !12
  %24 = or disjoint i32 %23, %10, !dbg !13
  %25 = or disjoint i32 %10, %21, !dbg !13
  %26 = icmp slt i32 %24, 16, !dbg !14
  %27 = icmp slt i32 %25, 16, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 2, !dbg !16
  %.lobit16 = lshr i32 %11, 3, !dbg !17
  %30 = and i32 %.lobit16, 3, !dbg !17
  %31 = or disjoint i32 %29, %19, !dbg !18
  %32 = or disjoint i32 %30, %29, !dbg !18
  %33 = icmp slt i32 %31, 4, !dbg !19
  %34 = icmp slt i32 %32, 4, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %35 = sdiv i32 %.frozen, 4, !dbg !20
  %36 = mul i32 %35, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = shl i32 %24, 2, !dbg !22
  %38 = add i32 %31, %37, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = and i1 %26, %33, !dbg !25
  %42 = and i1 %27, %34, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #2, !dbg !26
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %46 = bitcast i32 %44 to float, !dbg !26
  %47 = bitcast i32 %45 to float, !dbg !26
  %48 = sext i32 %31 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !27
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %33) #2, !dbg !28
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !28
  %53 = bitcast i32 %51 to float, !dbg !28
  %54 = bitcast i32 %52 to float, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !29
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %41) #2, !dbg !30
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !30
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !30
  %59 = bitcast i32 %57 to float, !dbg !30
  %60 = bitcast i32 %58 to float, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !31
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %33) #2, !dbg !32
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !32
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !32
  %65 = bitcast i32 %63 to float, !dbg !32
  %66 = bitcast i32 %64 to float, !dbg !32
  %67 = shl i32 %32, 2, !dbg !33
  %68 = add i32 %67, %.decomposed, !dbg !34
  %69 = shl i32 %35, 4, !dbg !35
  %70 = add i32 %68, %69, !dbg !36
  %71 = sext i32 %70 to i64, !dbg !37
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !37
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %42) #2, !dbg !38
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !38
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !38
  %76 = bitcast i32 %74 to float, !dbg !38
  %77 = bitcast i32 %75 to float, !dbg !38
  %78 = fadd float %46, %53, !dbg !39
  %79 = fadd float %47, %54, !dbg !39
  %80 = fsub float 0.000000e+00, %78, !dbg !40
  %81 = fsub float 0.000000e+00, %79, !dbg !40
  %82 = fmul float %80, 0x3FF7154760000000, !dbg !44
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #2, !dbg !44
  %84 = fmul float %81, 0x3FF7154760000000, !dbg !44
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #2, !dbg !44
  %86 = fadd float %83, 1.000000e+00, !dbg !45
  %87 = fadd float %85, 1.000000e+00, !dbg !45
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #2, !dbg !46
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #2, !dbg !46
  %90 = fadd float %59, %65, !dbg !47
  %91 = fadd float %60, %66, !dbg !47
  %92 = fcmp olt float %90, 0.000000e+00, !dbg !48
  %93 = fcmp olt float %91, 0.000000e+00, !dbg !48
  %94 = select i1 %92, float 0.000000e+00, float %90, !dbg !52
  %95 = select i1 %93, float 0.000000e+00, float %91, !dbg !52
  %96 = fmul float %88, %94, !dbg !53
  %97 = fmul float %89, %95, !dbg !53
  %98 = shl nuw nsw i32 %18, 5, !dbg !53
  %99 = or disjoint i32 %98, %13, !dbg !53
  %100 = or disjoint i32 %99, %15, !dbg !53
  %101 = or disjoint i32 %100, %17, !dbg !53
  %102 = and i32 %20, 62, !dbg !53
  %103 = shl nuw nsw i32 %18, 2, !dbg !53
  %104 = add nuw nsw i32 %101, %103, !dbg !53
  %105 = zext nneg i32 %104 to i64, !dbg !53
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %105, !dbg !53
  %107 = bitcast float %96 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !53
  %108 = or disjoint i32 %101, 16, !dbg !53
  %109 = lshr i32 %108, 3, !dbg !53
  %110 = and i32 %109, 536870910, !dbg !53
  %111 = add nuw nsw i32 %110, %108, !dbg !53
  %112 = zext nneg i32 %111 to i64, !dbg !53
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !53
  %114 = bitcast float %97 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %115 = lshr i32 %20, 3, !dbg !53
  %116 = and i32 %115, 6, !dbg !53
  %117 = add nuw nsw i32 %116, %102, !dbg !53
  %118 = zext nneg i32 %117 to i64, !dbg !53
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !53
  %120 = load float, ptr addrspace(3) %119, align 8, !dbg !53
  %121 = getelementptr inbounds i8, ptr addrspace(3) %119, i64 4, !dbg !53
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !53
  %123 = fsub float 1.000000e+00, %88, !dbg !54
  %124 = fsub float 1.000000e+00, %89, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %125 = bitcast float %123 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %125, i1 true) #2, !dbg !54
  %126 = bitcast float %124 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %126, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %127 = load float, ptr addrspace(3) %119, align 8, !dbg !54
  %128 = load float, ptr addrspace(3) %121, align 4, !dbg !54
  %129 = fmul float %127, %76, !dbg !55
  %130 = fmul float %128, %77, !dbg !55
  %131 = fadd float %120, %129, !dbg !56
  %132 = fadd float %122, %130, !dbg !56
  %133 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %134 = shl i32 %11, 3, !dbg !58
  %135 = and i32 %134, 56, !dbg !58
  %136 = or disjoint i32 %30, %135, !dbg !58
  %137 = lshr exact i32 %135, 2, !dbg !58
  %138 = add nuw nsw i32 %136, %137, !dbg !58
  %139 = zext nneg i32 %138 to i64, !dbg !58
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !58
  %141 = bitcast float %131 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !58
  %142 = or disjoint i32 %136, 4, !dbg !58
  %143 = lshr i32 %142, 2, !dbg !58
  %144 = add nuw nsw i32 %143, %142, !dbg !58
  %145 = zext nneg i32 %144 to i64, !dbg !58
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !58
  %147 = bitcast float %132 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %148 = lshr i32 %102, 2, !dbg !58
  %149 = add nuw nsw i32 %148, %102, !dbg !58
  %150 = zext nneg i32 %149 to i64, !dbg !58
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !58
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !58
  %153 = or disjoint i32 %102, 1, !dbg !58
  %154 = add nuw nsw i32 %153, %148, !dbg !58
  %155 = zext nneg i32 %154 to i64, !dbg !58
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %155, !dbg !58
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %157, ptr addrspace(1) %133, i1 %41) #2, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjtknelayxaqtqtpatn66ffas43iylg4rmozrwltnan77kuxry4e.py", directory: "inductor_cache/jt")
!4 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_rsub_sigmoid_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_rsub_sigmoid_5", linkageName: "triton_poi_fused_add_mul_relu_rsub_sigmoid_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 42, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 38, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 46, scope: !7)
!36 = !DILocation(line: 36, column: 43, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 38, column: 22, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 41, column: 40, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 44, column: 20, scope: !7)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 46, column: 19, scope: !7)
!57 = !DILocation(line: 47, column: 25, scope: !7)
!58 = !DILocation(line: 47, column: 44, scope: !7)
!59 = !DILocation(line: 47, column: 4, scope: !7)
