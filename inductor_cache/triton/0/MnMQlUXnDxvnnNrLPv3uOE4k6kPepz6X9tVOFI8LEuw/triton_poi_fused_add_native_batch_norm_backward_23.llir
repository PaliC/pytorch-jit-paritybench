; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_batch_norm_backward_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 640, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !16
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = bitcast i32 %20 to float, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %27 = bitcast i32 %25 to float, !dbg !18
  %28 = bitcast i32 %26 to float, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %33 = bitcast i32 %31 to float, !dbg !20
  %34 = bitcast i32 %32 to float, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !21
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !22
  %39 = bitcast i32 %37 to float, !dbg !22
  %40 = bitcast i32 %38 to float, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !23
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !24
  %45 = bitcast i32 %43 to float, !dbg !24
  %46 = bitcast i32 %44 to float, !dbg !24
  %47 = sext i32 %15 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !26
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %52 = bitcast i32 %50 to float, !dbg !26
  %53 = bitcast i32 %51 to float, !dbg !26
  %54 = fadd float %21, %27, !dbg !27
  %55 = fadd float %22, %28, !dbg !27
  %56 = fadd float %54, %33, !dbg !28
  %57 = fadd float %55, %34, !dbg !28
  %58 = fadd float %56, %39, !dbg !29
  %59 = fadd float %57, %40, !dbg !29
  %60 = fadd float %58, %45, !dbg !30
  %61 = fadd float %59, %46, !dbg !30
  %62 = fsub float %60, %52, !dbg !31
  %63 = fsub float %61, %53, !dbg !31
  %64 = bitcast float %60 to i32, !dbg !32
  %65 = bitcast float %61 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %64, i32 %65, ptr addrspace(1) %17, i1 true) #1, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !33
  %67 = bitcast float %62 to i32, !dbg !34
  %68 = bitcast float %63 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %67, i32 %68, ptr addrspace(1) %66, i1 true) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfji43ww7xwuvrqfvq7ys4f5xd54dba3s76nysjsjkbnnhq4w44r.py", directory: "inductor_cache/fj")
!4 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_batch_norm_backward_23", linkageName: "triton_poi_fused_add_native_batch_norm_backward_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 19, scope: !7)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 37, scope: !7)
!35 = !DILocation(line: 38, column: 4, scope: !7)
