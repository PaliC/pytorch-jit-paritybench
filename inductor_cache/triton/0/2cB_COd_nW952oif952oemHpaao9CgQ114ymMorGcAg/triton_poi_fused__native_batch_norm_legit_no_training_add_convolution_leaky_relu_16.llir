; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = srem i32 %16, 256, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %21 = sext i32 %17 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !21
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %42 = fadd float %32, 0x3EE4F8B580000000, !dbg !29
  %43 = fadd float %33, 0x3EE4F8B580000000, !dbg !29
  %44 = fadd float %34, 0x3EE4F8B580000000, !dbg !29
  %45 = fadd float %35, 0x3EE4F8B580000000, !dbg !29
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %46, 0, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %47, 0, !dbg !30
  br i1 %.not.i, label %53, label %48, !dbg !30

48:                                               ; preds = %10
  br i1 %.not1.i, label %51, label %49, !dbg !30

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

53:                                               ; preds = %10
  br i1 %.not1.i, label %56, label %54, !dbg !30

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %58, 0, !dbg !30
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !30
  br i1 %.not.i1, label %65, label %60, !dbg !30

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !30

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !30

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %70, 0, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %71, 0, !dbg !30
  br i1 %.not.i6, label %77, label %72, !dbg !30

72:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %75, label %73, !dbg !30

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !30

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %73, %75, %78, %80
  %.0.i8 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %82, 0, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %83, 0, !dbg !30
  br i1 %.not.i11, label %89, label %84, !dbg !30

84:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %87, label %85, !dbg !30

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !30

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %85, %87, %90, %92
  %.0.i13 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %95 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %96 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %97 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %98 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %100 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %101 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %102 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %103 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %104 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %105 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %106 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %122 = getelementptr i1, ptr addrspace(1) %8, i64 %18, !dbg !32
  %123 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !16
  %124 = insertelement <4 x i32> %123, i32 %100, i64 1, !dbg !16
  %125 = insertelement <4 x i32> %124, i32 %97, i64 2, !dbg !16
  %126 = insertelement <4 x i32> %125, i32 %94, i64 3, !dbg !16
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !16
  %128 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !18
  %129 = insertelement <4 x i32> %128, i32 %101, i64 1, !dbg !18
  %130 = insertelement <4 x i32> %129, i32 %98, i64 2, !dbg !18
  %131 = insertelement <4 x i32> %130, i32 %95, i64 3, !dbg !18
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !18
  %133 = fadd <4 x float> %127, %132, !dbg !33
  %134 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !20
  %135 = insertelement <4 x i32> %134, i32 %102, i64 1, !dbg !20
  %136 = insertelement <4 x i32> %135, i32 %99, i64 2, !dbg !20
  %137 = insertelement <4 x i32> %136, i32 %96, i64 3, !dbg !20
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !20
  %139 = fsub <4 x float> %133, %138, !dbg !34
  %140 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %108, i64 1, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %107, i64 2, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %106, i64 3, !dbg !28
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !28
  %145 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !26
  %146 = insertelement <4 x i32> %145, i32 %112, i64 1, !dbg !26
  %147 = insertelement <4 x i32> %146, i32 %111, i64 2, !dbg !26
  %148 = insertelement <4 x i32> %147, i32 %110, i64 3, !dbg !26
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !26
  %150 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !24
  %151 = insertelement <4 x i32> %150, i32 %116, i64 1, !dbg !24
  %152 = insertelement <4 x i32> %151, i32 %115, i64 2, !dbg !24
  %153 = insertelement <4 x i32> %152, i32 %114, i64 3, !dbg !24
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !24
  %155 = insertelement <4 x float> poison, float %118, i64 0, !dbg !35
  %156 = insertelement <4 x float> %155, float %119, i64 1, !dbg !35
  %157 = insertelement <4 x float> %156, float %120, i64 2, !dbg !35
  %158 = insertelement <4 x float> %157, float %121, i64 3, !dbg !35
  %159 = fmul <4 x float> %139, %158, !dbg !35
  %160 = fmul <4 x float> %159, %154, !dbg !36
  %161 = fadd <4 x float> %160, %149, !dbg !37
  %162 = fadd <4 x float> %161, %144, !dbg !38
  %163 = fcmp ogt <4 x float> %162, zeroinitializer, !dbg !39
  %164 = extractelement <4 x float> %162, i64 0, !dbg !40
  %165 = fmul float %164, 0x3F847AE140000000, !dbg !41
  %166 = extractelement <4 x float> %162, i64 1, !dbg !40
  %167 = fmul float %166, 0x3F847AE140000000, !dbg !41
  %168 = extractelement <4 x float> %162, i64 2, !dbg !40
  %169 = fmul float %168, 0x3F847AE140000000, !dbg !41
  %170 = extractelement <4 x float> %162, i64 3, !dbg !40
  %171 = fmul float %170, 0x3F847AE140000000, !dbg !41
  %172 = extractelement <4 x i1> %163, i64 0, !dbg !40
  %173 = select i1 %172, float %164, float %165, !dbg !40
  %174 = extractelement <4 x i1> %163, i64 1, !dbg !40
  %175 = select i1 %174, float %166, float %167, !dbg !40
  %176 = extractelement <4 x i1> %163, i64 2, !dbg !40
  %177 = select i1 %176, float %168, float %169, !dbg !40
  %178 = extractelement <4 x i1> %163, i64 3, !dbg !40
  %179 = select i1 %178, float %170, float %171, !dbg !40
  %bc = bitcast <4 x float> %133 to <4 x i32>, !dbg !42
  %180 = extractelement <4 x i32> %bc, i64 0, !dbg !42
  %bc16 = bitcast <4 x float> %133 to <4 x i32>, !dbg !42
  %181 = extractelement <4 x i32> %bc16, i64 1, !dbg !42
  %bc17 = bitcast <4 x float> %133 to <4 x i32>, !dbg !42
  %182 = extractelement <4 x i32> %bc17, i64 2, !dbg !42
  %bc18 = bitcast <4 x float> %133 to <4 x i32>, !dbg !42
  %183 = extractelement <4 x i32> %bc18, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %19, i1 true) #3, !dbg !42
  %184 = zext <4 x i1> %163 to <4 x i8>, !dbg !43
  %185 = bitcast <4 x i8> %184 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %122, i1 true) #3, !dbg !43
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !44
  %187 = bitcast float %173 to i32, !dbg !45
  %188 = bitcast float %175 to i32, !dbg !45
  %189 = bitcast float %177 to i32, !dbg !45
  %190 = bitcast float %179 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %186, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf5lztnmd3crg56uk2jjbjtyq7abftm42tbruhhhsstxuwxbzizu.py", directory: "inductor_cache/f5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 52, column: 25, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 39, scope: !7)
!43 = !DILocation(line: 52, column: 37, scope: !7)
!44 = !DILocation(line: 53, column: 28, scope: !7)
!45 = !DILocation(line: 53, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
