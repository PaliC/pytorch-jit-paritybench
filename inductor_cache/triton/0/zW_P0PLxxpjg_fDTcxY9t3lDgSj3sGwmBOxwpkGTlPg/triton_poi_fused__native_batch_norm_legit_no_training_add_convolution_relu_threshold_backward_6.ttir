#loc = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg12: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<256xi32> loc(#loc1)
    %cst_3 = arith.constant dense<2> : tensor<256xi32> loc(#loc1)
    %cst_4 = arith.constant dense<8> : tensor<256xi32> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<256xi32> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<256xi32> loc(#loc1)
    %cst_7 = arith.constant dense<1024> : tensor<256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_7 : tensor<256xi32> loc(#loc6)
    %6 = arith.divsi %4, %cst_6 : tensor<256xi32> loc(#loc7)
    %7 = arith.remsi %6, %cst_5 : tensor<256xi32> loc(#loc8)
    %8 = arith.remsi %4, %cst_4 : tensor<256xi32> loc(#loc9)
    %9 = arith.divsi %4, %cst_4 : tensor<256xi32> loc(#loc10)
    %10 = arith.remsi %9, %cst_4 : tensor<256xi32> loc(#loc11)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc12)
    %12 = tt.addptr %11, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc12)
    %13 = tt.load %12, %5 : tensor<256x!tt.ptr<f32>> loc(#loc13)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc14)
    %15 = tt.addptr %14, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc14)
    %16 = tt.load %15, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc15)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc16)
    %19 = tt.load %18, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc17)
    %20 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc18)
    %21 = tt.addptr %20, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc18)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc19)
    %23 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc20)
    %24 = tt.addptr %23, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc20)
    %25 = tt.load %24, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc21)
    %26 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.addptr %26, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc22)
    %28 = tt.load %27, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc23)
    %29 = arith.divsi %10, %cst_3 : tensor<256xi32> loc(#loc24)
    %30 = arith.muli %29, %cst_4 : tensor<256xi32> loc(#loc25)
    %31 = arith.addi %8, %30 : tensor<256xi32> loc(#loc26)
    %32 = arith.remsi %10, %cst_3 : tensor<256xi32> loc(#loc27)
    %33 = arith.muli %32, %cst_2 : tensor<256xi32> loc(#loc28)
    %34 = arith.addi %31, %33 : tensor<256xi32> loc(#loc29)
    %35 = arith.muli %6, %cst_6 : tensor<256xi32> loc(#loc30)
    %36 = arith.addi %34, %35 : tensor<256xi32> loc(#loc31)
    %37 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc32)
    %38 = tt.addptr %37, %36 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc32)
    %39 = tt.load %38, %5 : tensor<256x!tt.ptr<f32>> loc(#loc33)
    %40 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc34)
    %41 = tt.addptr %40, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc34)
    %42 = tt.load %41, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc35)
    %43 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc36)
    %44 = tt.addptr %43, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc36)
    %45 = tt.load %44, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc37)
    %46 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc38)
    %47 = tt.addptr %46, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc38)
    %48 = tt.load %47, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc39)
    %49 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc40)
    %50 = tt.addptr %49, %7 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc40)
    %51 = tt.load %50, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc41)
    %52 = arith.addf %13, %16 : tensor<256xf32> loc(#loc42)
    %53 = arith.subf %52, %19 : tensor<256xf32> loc(#loc43)
    %54 = arith.addf %22, %cst_1 : tensor<256xf32> loc(#loc44)
    %55 = tt.extern_elementwise %54 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc45)
    %56 = arith.divf %cst, %55 : tensor<256xf32> loc(#loc46)
    %57 = arith.mulf %53, %56 : tensor<256xf32> loc(#loc47)
    %58 = arith.mulf %57, %25 : tensor<256xf32> loc(#loc48)
    %59 = arith.addf %58, %28 : tensor<256xf32> loc(#loc49)
    %60 = arith.subf %39, %42 : tensor<256xf32> loc(#loc50)
    %61 = arith.addf %45, %cst_1 : tensor<256xf32> loc(#loc51)
    %62 = tt.extern_elementwise %61 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc52)
    %63 = arith.divf %cst, %62 : tensor<256xf32> loc(#loc53)
    %64 = arith.mulf %60, %63 : tensor<256xf32> loc(#loc54)
    %65 = arith.mulf %64, %48 : tensor<256xf32> loc(#loc55)
    %66 = arith.addf %65, %51 : tensor<256xf32> loc(#loc56)
    %67 = arith.addf %59, %66 : tensor<256xf32> loc(#loc57)
    %68 = arith.cmpf ogt, %cst_0, %67 : tensor<256xf32> loc(#loc68)
    %69 = arith.select %68, %cst_0, %67 : tensor<256xi1>, tensor<256xf32> loc(#loc69)
    %70 = arith.cmpf ole, %69, %cst_0 : tensor<256xf32> loc(#loc61)
    tt.store %12, %52, %5 : tensor<256x!tt.ptr<f32>> loc(#loc62)
    %71 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc63)
    %72 = tt.addptr %71, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc63)
    tt.store %72, %69, %5 : tensor<256x!tt.ptr<f32>> loc(#loc64)
    %73 = tt.splat %arg12 : !tt.ptr<i1> -> tensor<256x!tt.ptr<i1>> loc(#loc65)
    %74 = tt.addptr %73, %4 : tensor<256x!tt.ptr<i1>>, tensor<256xi32> loc(#loc65)
    %75 = tt.bitcast %74 : tensor<256x!tt.ptr<i1>> -> tensor<256x!tt.ptr<i8>> loc(#loc66)
    %76 = arith.extui %70 : tensor<256xi1> to tensor<256xi8> loc(#loc66)
    tt.store %75, %76, %5 : tensor<256x!tt.ptr<i8>> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":21:28)
#loc3 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":21:33)
#loc4 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":22:36)
#loc5 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":22:23)
#loc6 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":23:21)
#loc7 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":25:21)
#loc8 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":25:27)
#loc9 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":26:19)
#loc10 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":27:21)
#loc11 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":27:26)
#loc12 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":29:34)
#loc13 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":29:39)
#loc14 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":30:30)
#loc15 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":30:35)
#loc16 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":31:30)
#loc17 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":31:35)
#loc18 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":32:30)
#loc19 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":32:35)
#loc20 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":33:31)
#loc21 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":33:36)
#loc22 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":34:31)
#loc23 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":34:36)
#loc24 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:45)
#loc25 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:39)
#loc26 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:36)
#loc27 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:60)
#loc28 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:55)
#loc29 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:50)
#loc30 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:69)
#loc31 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:66)
#loc32 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:31)
#loc33 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":35:74)
#loc34 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":36:31)
#loc35 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":36:36)
#loc36 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":37:31)
#loc37 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":37:36)
#loc38 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":38:31)
#loc39 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":38:36)
#loc40 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":39:31)
#loc41 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":39:36)
#loc42 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":40:18)
#loc43 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":41:18)
#loc44 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":43:18)
#loc45 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":44:26)
#loc46 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":46:19)
#loc47 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":49:19)
#loc48 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":50:20)
#loc49 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":51:20)
#loc50 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":52:20)
#loc51 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":53:20)
#loc52 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":54:27)
#loc53 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":55:19)
#loc54 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":57:20)
#loc55 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":58:20)
#loc56 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":59:20)
#loc57 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":60:20)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc59 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":62:42)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc61 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":64:21)
#loc62 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":65:39)
#loc63 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":66:28)
#loc64 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":66:40)
#loc65 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":67:25)
#loc66 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":67:37)
#loc67 = loc("inductor_cache/rk/crk64xusrm3wzqp565fafpzvhy7qfuxt3sfpq5trqwv63gdbcez7.py":67:4)
#loc68 = loc(callsite(#loc58 at #loc59))
#loc69 = loc(callsite(#loc60 at #loc59))
