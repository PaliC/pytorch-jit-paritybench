; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 4, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = and i32 %15, 7, !dbg !12
  %19 = or disjoint i32 %14, %17, !dbg !13
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = icmp slt i32 %19, 2048, !dbg !14
  %22 = icmp slt i32 %20, 2048, !dbg !14
  %23 = shl i32 %15, 2, !dbg !15
  %24 = and i32 %23, 60, !dbg !15
  %25 = srem i32 %19, 512, !dbg !16
  %26 = srem i32 %20, 512, !dbg !16
  %27 = sext i32 %19 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = sext i32 %20 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #5, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #5, !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %22) #5, !dbg !18
  %37 = sext i32 %25 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !19
  %39 = sext i32 %26 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #5, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #5, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #5, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #5, !dbg !20
  %45 = bitcast i32 %44 to float, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %22) #5, !dbg !20
  %47 = shl i32 %19, 6, !dbg !21
  %48 = or disjoint i32 %47, %24, !dbg !22
  %49 = sext i32 %48 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #5, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #5, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #5, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #5, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #5, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #5, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #5, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #5, !dbg !32
  %73 = fadd float %35, %45, !dbg !33
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !34
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !34
  %76 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !24
  %77 = insertelement <4 x i32> %76, i32 %54, i64 1, !dbg !24
  %78 = insertelement <4 x i32> %77, i32 %53, i64 2, !dbg !24
  %79 = insertelement <4 x i32> %78, i32 %52, i64 3, !dbg !24
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !24
  %81 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !35
  %82 = bitcast <4 x i32> %81 to <4 x float>, !dbg !35
  %83 = shufflevector <4 x float> %82, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %84 = fadd <4 x float> %83, %80, !dbg !35
  %85 = extractelement <4 x float> %84, i64 2, !dbg !36
  %86 = extractelement <4 x float> %84, i64 3, !dbg !36
  %87 = fadd float %86, %85, !dbg !36
  %88 = extractelement <4 x float> %84, i64 1, !dbg !36
  %89 = fadd float %88, %87, !dbg !36
  %90 = extractelement <4 x float> %84, i64 0, !dbg !36
  %91 = fadd float %90, %89, !dbg !36
  %92 = select i1 %21, float %91, float 0.000000e+00, !dbg !36
  %93 = bitcast float %92 to i32, !dbg !41
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !41
  %95 = bitcast i32 %94 to float, !dbg !41
  %96 = fadd float %92, %95, !dbg !36
  %97 = bitcast float %96 to i32, !dbg !41
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !41
  %99 = bitcast i32 %98 to float, !dbg !41
  %100 = fadd float %96, %99, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !41
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !41
  %103 = bitcast i32 %102 to float, !dbg !41
  %104 = fadd float %100, %103, !dbg !36
  %105 = bitcast float %104 to i32, !dbg !41
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !41
  %107 = bitcast i32 %106 to float, !dbg !41
  %108 = fadd float %104, %107, !dbg !36
  %109 = bitcast float %108 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %109, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %110 = load float, ptr addrspace(3) %75, align 4, !dbg !34
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 6.400000e+01) #5, !dbg !34
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 6.400000e+01) #5, !dbg !34
  %113 = insertelement <4 x float> poison, float %112, i64 0, !dbg !42
  %114 = shufflevector <4 x float> %113, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !42
  %115 = fsub <4 x float> %84, %114, !dbg !42
  %116 = fmul <4 x float> %115, %115, !dbg !43
  %117 = fmul <4 x float> %115, %115, !dbg !43
  %118 = fmul <4 x float> %115, %115, !dbg !43
  %119 = fmul <4 x float> %115, %115, !dbg !43
  %shift = shufflevector <4 x float> %116, <4 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !44
  %120 = fadd <4 x float> %shift, %117, !dbg !44
  %shift13 = shufflevector <4 x float> %120, <4 x float> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !44
  %121 = fadd <4 x float> %118, %shift13, !dbg !44
  %shift14 = shufflevector <4 x float> %121, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !44
  %122 = fadd <4 x float> %119, %shift14, !dbg !44
  %123 = extractelement <4 x float> %122, i64 0, !dbg !44
  %124 = select i1 %21, float %123, float 0.000000e+00, !dbg !44
  %125 = bitcast float %124 to i32, !dbg !46
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !46
  %127 = bitcast i32 %126 to float, !dbg !46
  %128 = fadd float %124, %127, !dbg !44
  %129 = bitcast float %128 to i32, !dbg !46
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !46
  %131 = bitcast i32 %130 to float, !dbg !46
  %132 = fadd float %128, %131, !dbg !44
  %133 = bitcast float %132 to i32, !dbg !46
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !46
  %135 = bitcast i32 %134 to float, !dbg !46
  %136 = fadd float %132, %135, !dbg !44
  %137 = bitcast float %136 to i32, !dbg !46
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !46
  %139 = bitcast i32 %138 to float, !dbg !46
  %140 = fadd float %136, %139, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %141 = bitcast float %140 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %141, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %142 = load float, ptr addrspace(3) %75, align 4, !dbg !47
  %143 = fsub float 0.000000e+00, %73, !dbg !48
  %144 = fmul float %143, 0x3FF7154760000000, !dbg !50
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #5, !dbg !50
  %146 = fadd float %145, 1.000000e+00, !dbg !51
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %146) #5, !dbg !52
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 6.400000e+01) #5, !dbg !53
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 6.400000e+01) #5, !dbg !53
  %150 = fadd float %148, 0x3EE4F8B580000000, !dbg !54
  %151 = fadd float %149, 0x3EE4F8B580000000, !dbg !54
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %152, 0, !dbg !47
  br i1 %.not.i, label %155, label %153, !dbg !47

153:                                              ; preds = %12
  %154 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

155:                                              ; preds = %12
  %156 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %153, %155
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], !dbg !47
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i10 = icmp eq i32 %160, 0, !dbg !47
  br i1 %.not.i10, label %163, label %161, !dbg !47

161:                                              ; preds = %__nv_rsqrtf.exit
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

163:                                              ; preds = %__nv_rsqrtf.exit
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

__nv_rsqrtf.exit12:                               ; preds = %161, %163
  %.0.i11 = phi float [ %162, %161 ], [ %164, %163 ], !dbg !47
  %165 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %168 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %169 = bitcast i32 %36 to float, !dbg !18
  %170 = bitcast i32 %46 to float, !dbg !20
  %171 = fadd float %169, %170, !dbg !33
  %172 = insertelement <4 x float> poison, float %.0.i11, i64 0, !dbg !55
  %173 = shufflevector <4 x float> %172, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !55
  %174 = fmul <4 x float> %115, %173, !dbg !55
  %175 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !28
  %176 = insertelement <4 x i32> %175, i32 %166, i64 1, !dbg !28
  %177 = insertelement <4 x i32> %176, i32 %167, i64 2, !dbg !28
  %178 = insertelement <4 x i32> %177, i32 %168, i64 3, !dbg !28
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !28
  %180 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !56
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !56
  %182 = shufflevector <4 x float> %181, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %183 = fsub <4 x float> %179, %182, !dbg !56
  %184 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !57
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !57
  %186 = shufflevector <4 x float> %185, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %187 = fmul <4 x float> %183, %186, !dbg !57
  %188 = insertelement <4 x float> poison, float %147, i64 0, !dbg !58
  %189 = shufflevector <4 x float> %188, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !58
  %190 = fmul <4 x float> %187, %189, !dbg !58
  %191 = fadd <4 x float> %190, %174, !dbg !59
  %192 = fcmp olt <4 x float> %191, zeroinitializer, !dbg !60
  %193 = extractelement <4 x i1> %192, i64 3, !dbg !64
  %194 = extractelement <4 x i1> %192, i64 2, !dbg !64
  %195 = extractelement <4 x i1> %192, i64 1, !dbg !64
  %196 = extractelement <4 x i1> %192, i64 0, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %197 = and i32 %15, 120, !dbg !66
  %198 = icmp eq i32 %197, 0, !dbg !66
  %199 = bitcast float %171 to i32, !dbg !66
  %200 = and i1 %198, %22, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %30, i1 %200) #5, !dbg !66
  %201 = bitcast float %86 to i32, !dbg !67
  %202 = bitcast float %85 to i32, !dbg !67
  %203 = bitcast float %88 to i32, !dbg !67
  %204 = bitcast float %90 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %50, i1 %21) #5, !dbg !67
  %205 = getelementptr float, ptr addrspace(1) %8, i64 %49, !dbg !68
  %bc = bitcast <4 x float> %191 to <4 x i32>, !dbg !69
  %206 = extractelement <4 x i32> %bc, i64 3, !dbg !69
  %207 = select i1 %193, i32 0, i32 %206, !dbg !64
  %bc15 = bitcast <4 x float> %191 to <4 x i32>, !dbg !69
  %208 = extractelement <4 x i32> %bc15, i64 2, !dbg !69
  %209 = select i1 %194, i32 0, i32 %208, !dbg !64
  %bc16 = bitcast <4 x float> %191 to <4 x i32>, !dbg !69
  %210 = extractelement <4 x i32> %bc16, i64 1, !dbg !69
  %211 = select i1 %195, i32 0, i32 %210, !dbg !64
  %bc17 = bitcast <4 x float> %191 to <4 x i32>, !dbg !69
  %212 = extractelement <4 x i32> %bc17, i64 0, !dbg !69
  %213 = select i1 %196, i32 0, i32 %212, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %209, i32 %211, i32 %213, ptr addrspace(1) %205, i1 %21) #5, !dbg !69
  %214 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !70
  %215 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %214, i1 %200) #5, !dbg !71
  %216 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !72
  %217 = bitcast float %111 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %216, i1 %200) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv4d3gerhh3expejgexnrw23a23edwclwcq4nuuew2cyu646iixg.py", directory: "inductor_cache/v4")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !45)
!45 = !DILocation(line: 53, column: 26, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 63, column: 28, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 56, column: 23, scope: !7)
!50 = !DILocation(line: 47, column: 29, scope: !39, inlinedAt: !49)
!51 = !DILocation(line: 47, column: 20, scope: !39, inlinedAt: !49)
!52 = !DILocation(line: 47, column: 16, scope: !39, inlinedAt: !49)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 67, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 68, column: 4, scope: !7)
!66 = !DILocation(line: 69, column: 39, scope: !7)
!67 = !DILocation(line: 70, column: 47, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 71, column: 45, scope: !7)
!70 = !DILocation(line: 72, column: 25, scope: !7)
!71 = !DILocation(line: 72, column: 37, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 73, column: 4, scope: !7)
