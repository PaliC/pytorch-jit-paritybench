; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_reflection_pad2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = or disjoint i32 %9, 4, !dbg !12
  %11 = or disjoint i32 %9, 8, !dbg !12
  %12 = or disjoint i32 %9, 12, !dbg !12
  %13 = or disjoint i32 %9, 16, !dbg !12
  %14 = or disjoint i32 %9, 20, !dbg !12
  %15 = or disjoint i32 %9, 24, !dbg !12
  %16 = or disjoint i32 %9, 28, !dbg !12
  %17 = shl i32 %7, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %6, %9, !dbg !13
  %20 = or disjoint i32 %6, %10, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = or disjoint i32 %6, %13, !dbg !13
  %24 = or disjoint i32 %6, %14, !dbg !13
  %25 = or disjoint i32 %6, %15, !dbg !13
  %26 = or disjoint i32 %6, %16, !dbg !13
  %27 = or disjoint i32 %6, %18, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = shl i32 %28, 5, !dbg !15
  %30 = and i32 %7, 31, !dbg !16
  %31 = lshr i32 %7, 3, !dbg !16
  %32 = and i32 %31, 15, !dbg !16
  %33 = or disjoint i32 %29, %30, !dbg !17
  %34 = or disjoint i32 %29, %32, !dbg !17
  %35 = or disjoint i32 %34, 16, !dbg !17
  %36 = icmp slt i32 %33, 36, !dbg !18
  %37 = icmp slt i32 %34, 36, !dbg !18
  %38 = icmp slt i32 %35, 36, !dbg !18
  %.frozen = freeze i32 %33, !dbg !19
  %39 = sdiv i32 %.frozen, 6, !dbg !19
  %40 = mul i32 %39, 6, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %.frozen19 = freeze i32 %27, !dbg !21
  %41 = sdiv i32 %.frozen19, 256, !dbg !21
  %42 = mul i32 %41, 256, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %42, !dbg !22
  %43 = add nsw i32 %.decomposed, -1, !dbg !23
  %44 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !24
  %45 = add nsw i32 %44, -3, !dbg !25
  %46 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !26
  %47 = add nsw i32 %39, -1, !dbg !27
  %48 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !28
  %49 = add nsw i32 %48, -3, !dbg !29
  %50 = tail call i32 @llvm.abs.i32(i32 %49, i1 true), !dbg !30
  %51 = mul nsw i32 %50, -4, !dbg !31
  %reass.sub = sub nsw i32 %51, %46, !dbg !32
  %52 = add nsw i32 %reass.sub, 15, !dbg !32
  %53 = shl i32 %19, 4, !dbg !33
  %54 = shl i32 %20, 4, !dbg !33
  %55 = shl i32 %21, 4, !dbg !33
  %56 = shl i32 %22, 4, !dbg !33
  %57 = shl i32 %23, 4, !dbg !33
  %58 = shl i32 %24, 4, !dbg !33
  %59 = shl i32 %25, 4, !dbg !33
  %60 = shl i32 %26, 4, !dbg !33
  %61 = add i32 %52, %53, !dbg !34
  %62 = add i32 %52, %54, !dbg !34
  %63 = add i32 %52, %55, !dbg !34
  %64 = add i32 %52, %56, !dbg !34
  %65 = add i32 %52, %57, !dbg !34
  %66 = add i32 %52, %58, !dbg !34
  %67 = add i32 %52, %59, !dbg !34
  %68 = add i32 %52, %60, !dbg !34
  %69 = sext i32 %61 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !35
  %71 = sext i32 %62 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !35
  %73 = sext i32 %63 to i64, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !35
  %75 = sext i32 %64 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !35
  %77 = sext i32 %65 to i64, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !35
  %79 = sext i32 %66 to i64, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !35
  %81 = sext i32 %67 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !35
  %83 = sext i32 %68 to i64, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !35
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !36
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %36) #2, !dbg !36
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %36) #2, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %36) #2, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %36) #2, !dbg !36
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %36) #2, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %36) #2, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %36) #2, !dbg !36
  %93 = shl i32 %34, 8, !dbg !37
  %94 = shl i32 %35, 8, !dbg !37
  %95 = mul i32 %41, 9216, !dbg !38
  %96 = add i32 %95, %.decomposed20, !dbg !39
  %97 = add i32 %96, %93, !dbg !40
  %98 = add i32 %96, %94, !dbg !40
  %99 = sext i32 %97 to i64, !dbg !41
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !41
  %101 = sext i32 %98 to i64, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !41
  %103 = shl i32 %7, 5, !dbg !42
  %104 = and i32 %103, 992, !dbg !42
  %105 = or disjoint i32 %104, %9, !dbg !42
  %106 = and i32 %17, 508, !dbg !42
  %107 = lshr exact i32 %104, 3, !dbg !42
  %108 = add nuw nsw i32 %107, %105, !dbg !42
  %109 = zext nneg i32 %108 to i64, !dbg !42
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !42
  %111 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !42
  %112 = or disjoint i32 %105, 4, !dbg !42
  %113 = add nuw nsw i32 %112, %107, !dbg !42
  %114 = zext nneg i32 %113 to i64, !dbg !42
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !42
  %116 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !42
  %117 = or disjoint i32 %105, 8, !dbg !42
  %118 = add nuw nsw i32 %117, %107, !dbg !42
  %119 = zext nneg i32 %118 to i64, !dbg !42
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !42
  %121 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !42
  %122 = or disjoint i32 %105, 12, !dbg !42
  %123 = add nuw nsw i32 %122, %107, !dbg !42
  %124 = zext nneg i32 %123 to i64, !dbg !42
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !42
  %126 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !42
  %127 = or disjoint i32 %105, 16, !dbg !42
  %128 = add nuw nsw i32 %127, %107, !dbg !42
  %129 = zext nneg i32 %128 to i64, !dbg !42
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !42
  %131 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !42
  %132 = or disjoint i32 %105, 20, !dbg !42
  %133 = add nuw nsw i32 %132, %107, !dbg !42
  %134 = zext nneg i32 %133 to i64, !dbg !42
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !42
  %136 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !42
  %137 = or disjoint i32 %105, 24, !dbg !42
  %138 = add nuw nsw i32 %137, %107, !dbg !42
  %139 = zext nneg i32 %138 to i64, !dbg !42
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !42
  %141 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !42
  %142 = or disjoint i32 %105, 28, !dbg !42
  %143 = add nuw nsw i32 %142, %107, !dbg !42
  %144 = zext nneg i32 %143 to i64, !dbg !42
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !42
  %146 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %147 = lshr i32 %17, 3, !dbg !42
  %148 = and i32 %147, 60, !dbg !42
  %149 = add nuw nsw i32 %148, %106, !dbg !42
  %150 = zext nneg i32 %149 to i64, !dbg !42
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !42
  %152 = or disjoint i32 %106, 512, !dbg !42
  %153 = lshr i32 %152, 3, !dbg !42
  %154 = and i32 %153, 124, !dbg !42
  %155 = add nuw nsw i32 %154, %152, !dbg !42
  %156 = zext nneg i32 %155 to i64, !dbg !42
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !42
  %158 = load <4 x i32>, ptr addrspace(3) %157, align 16, !dbg !42
  %.extract = load i32, ptr addrspace(3) %151, align 16, !dbg !42
  %159 = getelementptr inbounds i8, ptr addrspace(3) %151, i64 4, !dbg !42
  %.extract12 = load i32, ptr addrspace(3) %159, align 4, !dbg !42
  %160 = getelementptr inbounds i8, ptr addrspace(3) %151, i64 8, !dbg !42
  %.extract13 = load i32, ptr addrspace(3) %160, align 8, !dbg !42
  %161 = getelementptr inbounds i8, ptr addrspace(3) %151, i64 12, !dbg !42
  %.extract14 = load i32, ptr addrspace(3) %161, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %100, i1 %37) #2, !dbg !42
  %.extract15 = extractelement <4 x i32> %158, i64 0, !dbg !42
  %.extract16 = extractelement <4 x i32> %158, i64 1, !dbg !42
  %.extract17 = extractelement <4 x i32> %158, i64 2, !dbg !42
  %.extract18 = extractelement <4 x i32> %158, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %102, i1 %38) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnnwfpatpz4huefkf6azyekdynrhh2ehyhqbeppjxhp6yatrysnm.py", directory: "inductor_cache/nn")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_1", linkageName: "triton_poi_fused_reflection_pad2d_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 79, scope: !7)
!24 = !DILocation(line: 34, column: 72, scope: !7)
!25 = !DILocation(line: 34, column: 60, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 131, scope: !7)
!28 = !DILocation(line: 34, column: 124, scope: !7)
!29 = !DILocation(line: 34, column: 112, scope: !7)
!30 = !DILocation(line: 34, column: 105, scope: !7)
!31 = !DILocation(line: 34, column: 93, scope: !7)
!32 = !DILocation(line: 34, column: 88, scope: !7)
!33 = !DILocation(line: 34, column: 142, scope: !7)
!34 = !DILocation(line: 34, column: 139, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 147, scope: !7)
!37 = !DILocation(line: 35, column: 34, scope: !7)
!38 = !DILocation(line: 35, column: 44, scope: !7)
!39 = !DILocation(line: 35, column: 30, scope: !7)
!40 = !DILocation(line: 35, column: 39, scope: !7)
!41 = !DILocation(line: 35, column: 25, scope: !7)
!42 = !DILocation(line: 35, column: 55, scope: !7)
!43 = !DILocation(line: 35, column: 4, scope: !7)
