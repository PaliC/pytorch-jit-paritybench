; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_leaky_relu_leaky_relu_backward_mul_sub_17(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) nocapture readnone %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) nocapture readnone %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 1024, !dbg !14
  %21 = ashr exact i32 %19, 1, !dbg !15
  %22 = srem i32 %21, 2, !dbg !16
  %23 = sdiv i32 %19, 4, !dbg !17
  %24 = srem i32 %23, 64, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #1, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #1, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = sext i32 %24 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #1, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #1, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %6, i1 %20) #1, !dbg !23
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %40 = bitcast i32 %38 to float, !dbg !23
  %41 = bitcast i32 %39 to float, !dbg !23
  %42 = sext i32 %19 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !24
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %20) #1, !dbg !25
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %20) #1, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %20) #1, !dbg !27
  %50 = sext i32 %22 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %50, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #1, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #1, !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fadd float %28, %34, !dbg !30
  %57 = fadd float %30, %36, !dbg !30
  %58 = fcmp ogt float %56, 0.000000e+00, !dbg !31
  %59 = fcmp ogt float %57, 0.000000e+00, !dbg !31
  %60 = fmul float %56, 0x3FB99999A0000000, !dbg !32
  %61 = fmul float %57, 0x3FB99999A0000000, !dbg !32
  %62 = select i1 %58, float %56, float %60, !dbg !33
  %63 = select i1 %59, float %57, float %61, !dbg !33
  %64 = fsub float %62, %62, !dbg !34
  %65 = fsub float %63, %63, !dbg !34
  %66 = fmul float %64, %40, !dbg !35
  %67 = fmul float %65, %41, !dbg !35
  %68 = fadd float %62, %66, !dbg !36
  %69 = fadd float %63, %67, !dbg !36
  %70 = fsub float %68, %68, !dbg !37
  %71 = fsub float %69, %69, !dbg !37
  %72 = fmul float %70, %53, !dbg !38
  %73 = fmul float %71, %55, !dbg !38
  %74 = fadd float %68, %72, !dbg !39
  %75 = fadd float %69, %73, !dbg !39
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !40
  %77 = getelementptr i1, ptr addrspace(1) %11, i64 %42, !dbg !41
  %78 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !25
  %79 = insertelement <2 x i32> %78, i32 %46, i64 1, !dbg !25
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !25
  %81 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !27
  %82 = insertelement <2 x i32> %81, i32 %49, i64 1, !dbg !27
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !27
  %84 = fadd <2 x float> %80, %83, !dbg !42
  %85 = fcmp ogt <2 x float> %84, zeroinitializer, !dbg !43
  %86 = fmul <2 x float> %84, splat (float 0x3FB99999A0000000), !dbg !44
  %87 = select <2 x i1> %85, <2 x float> %84, <2 x float> %86, !dbg !45
  %88 = extractelement <2 x float> %87, i64 0, !dbg !46
  %89 = fadd float %88, %74, !dbg !46
  %90 = extractelement <2 x float> %87, i64 1, !dbg !46
  %91 = fadd float %90, %75, !dbg !46
  %92 = fcmp ogt <2 x float> %87, zeroinitializer, !dbg !47
  %93 = bitcast float %89 to i32, !dbg !48
  %94 = bitcast float %91 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %76, i1 %20) #1, !dbg !48
  %95 = zext <2 x i1> %92 to <2 x i8>, !dbg !49
  %96 = bitcast <2 x i8> %95 to i16, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %96, ptr addrspace(1) %77, i1 %20) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coliq36qtw636d5ccxuyvepxt4zc2jmi4jxdupw2kmint4bwwd3x.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_leaky_relu_leaky_relu_backward_mul_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_leaky_relu_leaky_relu_backward_mul_sub_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_leaky_relu_leaky_relu_backward_mul_sub_17", linkageName: "triton_poi_fused__unsafe_index_add_convolution_leaky_relu_leaky_relu_backward_mul_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 19, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 35, scope: !7)
!34 = !DILocation(line: 55, column: 20, scope: !7)
!35 = !DILocation(line: 56, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 20, scope: !7)
!37 = !DILocation(line: 65, column: 20, scope: !7)
!38 = !DILocation(line: 66, column: 20, scope: !7)
!39 = !DILocation(line: 67, column: 20, scope: !7)
!40 = !DILocation(line: 70, column: 28, scope: !7)
!41 = !DILocation(line: 71, column: 25, scope: !7)
!42 = !DILocation(line: 58, column: 20, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 35, scope: !7)
!46 = !DILocation(line: 68, column: 20, scope: !7)
!47 = !DILocation(line: 69, column: 20, scope: !7)
!48 = !DILocation(line: 70, column: 40, scope: !7)
!49 = !DILocation(line: 71, column: 37, scope: !7)
!50 = !DILocation(line: 71, column: 4, scope: !7)
