; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 28, !dbg !14
  %13 = mul i32 %12, 28, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %.frozen8 = freeze i32 %11, !dbg !14
  %14 = sdiv i32 %.frozen8, 28, !dbg !14
  %15 = mul i32 %14, 28, !dbg !15
  %.decomposed9 = sub i32 %.frozen8, %15, !dbg !15
  %16 = sext i32 %10 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = sext i32 %11 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %30 = sext i32 %.decomposed to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %.decomposed9 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !19
  %44 = icmp slt i32 %.decomposed, 24, !dbg !20
  %45 = icmp slt i32 %.decomposed9, 24, !dbg !20
  %46 = mul nsw i32 %12, 24, !dbg !21
  %47 = mul nsw i32 %14, 24, !dbg !21
  %48 = add nsw i32 %46, %.decomposed, !dbg !22
  %49 = add nsw i32 %47, %.decomposed9, !dbg !22
  %50 = sext i32 %48 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !23
  %52 = sext i32 %49 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %64 = insertelement <8 x i32> poison, i32 %29, i64 0, !dbg !17
  %65 = insertelement <8 x i32> %64, i32 %28, i64 1, !dbg !17
  %66 = insertelement <8 x i32> %65, i32 %27, i64 2, !dbg !17
  %67 = insertelement <8 x i32> %66, i32 %26, i64 3, !dbg !17
  %68 = insertelement <8 x i32> %67, i32 %24, i64 4, !dbg !17
  %69 = insertelement <8 x i32> %68, i32 %23, i64 5, !dbg !17
  %70 = insertelement <8 x i32> %69, i32 %22, i64 6, !dbg !17
  %71 = insertelement <8 x i32> %70, i32 %21, i64 7, !dbg !17
  %72 = bitcast <8 x i32> %71 to <8 x float>, !dbg !17
  %73 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !19
  %74 = insertelement <8 x i32> %73, i32 %42, i64 1, !dbg !19
  %75 = insertelement <8 x i32> %74, i32 %41, i64 2, !dbg !19
  %76 = insertelement <8 x i32> %75, i32 %40, i64 3, !dbg !19
  %77 = insertelement <8 x i32> %76, i32 %38, i64 4, !dbg !19
  %78 = insertelement <8 x i32> %77, i32 %37, i64 5, !dbg !19
  %79 = insertelement <8 x i32> %78, i32 %36, i64 6, !dbg !19
  %80 = insertelement <8 x i32> %79, i32 %35, i64 7, !dbg !19
  %81 = bitcast <8 x i32> %80 to <8 x float>, !dbg !19
  %82 = fadd <8 x float> %72, %81, !dbg !25
  %83 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !24
  %84 = insertelement <8 x i32> %83, i32 %62, i64 1, !dbg !24
  %85 = insertelement <8 x i32> %84, i32 %61, i64 2, !dbg !24
  %86 = insertelement <8 x i32> %85, i32 %60, i64 3, !dbg !24
  %87 = insertelement <8 x i32> %86, i32 %58, i64 4, !dbg !24
  %88 = insertelement <8 x i32> %87, i32 %57, i64 5, !dbg !24
  %89 = insertelement <8 x i32> %88, i32 %56, i64 6, !dbg !24
  %90 = insertelement <8 x i32> %89, i32 %55, i64 7, !dbg !24
  %91 = bitcast <8 x i32> %90 to <8 x float>, !dbg !24
  %92 = fadd <8 x float> %82, %91, !dbg !26
  %93 = fcmp olt <8 x float> %92, zeroinitializer, !dbg !27
  %94 = extractelement <8 x i1> %93, i64 7, !dbg !31
  %95 = extractelement <8 x i1> %93, i64 6, !dbg !31
  %96 = extractelement <8 x i1> %93, i64 5, !dbg !31
  %97 = extractelement <8 x i1> %93, i64 4, !dbg !31
  %98 = extractelement <8 x i1> %93, i64 3, !dbg !31
  %99 = extractelement <8 x i1> %93, i64 2, !dbg !31
  %100 = extractelement <8 x i1> %93, i64 1, !dbg !31
  %101 = extractelement <8 x i1> %93, i64 0, !dbg !31
  %bc = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %102 = extractelement <8 x i32> %bc, i64 7, !dbg !32
  %103 = select i1 %94, i32 0, i32 %102, !dbg !31
  %bc1 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %104 = extractelement <8 x i32> %bc1, i64 6, !dbg !32
  %105 = select i1 %95, i32 0, i32 %104, !dbg !31
  %bc2 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %106 = extractelement <8 x i32> %bc2, i64 5, !dbg !32
  %107 = select i1 %96, i32 0, i32 %106, !dbg !31
  %bc3 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %108 = extractelement <8 x i32> %bc3, i64 4, !dbg !32
  %109 = select i1 %97, i32 0, i32 %108, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %103, i32 %105, i32 %107, i32 %109, ptr addrspace(1) %17, i1 true) #1, !dbg !32
  %bc4 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %110 = extractelement <8 x i32> %bc4, i64 3, !dbg !32
  %111 = select i1 %98, i32 0, i32 %110, !dbg !31
  %bc5 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %112 = extractelement <8 x i32> %bc5, i64 2, !dbg !32
  %113 = select i1 %99, i32 0, i32 %112, !dbg !31
  %bc6 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %114 = extractelement <8 x i32> %bc6, i64 1, !dbg !32
  %115 = select i1 %100, i32 0, i32 %114, !dbg !31
  %bc7 = bitcast <8 x float> %92 to <8 x i32>, !dbg !32
  %116 = extractelement <8 x i32> %bc7, i64 0, !dbg !32
  %117 = select i1 %101, i32 0, i32 %116, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %113, i32 %115, i32 %117, ptr addrspace(1) %19, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmhty62uv45lzj7wnpuggz2gignyu6f733cvne2v3vovactdncaa.py", directory: "inductor_cache/mh")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_relu_5", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 29, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 37, column: 4, scope: !7)
