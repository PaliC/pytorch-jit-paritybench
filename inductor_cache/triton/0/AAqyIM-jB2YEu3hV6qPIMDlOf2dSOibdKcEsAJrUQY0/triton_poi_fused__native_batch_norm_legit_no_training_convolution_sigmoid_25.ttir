#loc = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_convolution_sigmoid_25(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc8)
    %9 = tt.load %8 : !tt.ptr<f32> loc(#loc9)
    %10 = tt.splat %9 : f32 -> tensor<256xf32> loc(#loc10)
    %11 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc12)
    %13 = tt.splat %12 : f32 -> tensor<256xf32> loc(#loc13)
    %14 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc14)
    %15 = tt.load %14 : !tt.ptr<f32> loc(#loc15)
    %16 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc16)
    %17 = tt.load %16 : !tt.ptr<f32> loc(#loc17)
    %18 = tt.splat %17 : f32 -> tensor<256xf32> loc(#loc18)
    %19 = tt.addptr %arg5, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc19)
    %20 = tt.load %19 : !tt.ptr<f32> loc(#loc20)
    %21 = tt.splat %20 : f32 -> tensor<256xf32> loc(#loc21)
    %22 = arith.addf %7, %10 : tensor<256xf32> loc(#loc22)
    %23 = arith.subf %22, %13 : tensor<256xf32> loc(#loc23)
    %24 = arith.addf %15, %cst_0 : f32 loc(#loc24)
    %25 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc25)
    %26 = arith.divf %cst, %25 : f32 loc(#loc26)
    %27 = tt.splat %26 : f32 -> tensor<256xf32> loc(#loc26)
    %28 = arith.mulf %23, %27 : tensor<256xf32> loc(#loc27)
    %29 = arith.mulf %28, %18 : tensor<256xf32> loc(#loc28)
    %30 = arith.addf %29, %21 : tensor<256xf32> loc(#loc29)
    %31 = arith.subf %cst_1, %30 : tensor<256xf32> loc(#loc39)
    %32 = math.exp %31 : tensor<256xf32> loc(#loc40)
    %33 = arith.addf %32, %cst_2 : tensor<256xf32> loc(#loc41)
    %34 = arith.divf %cst_2, %33 : tensor<256xf32> loc(#loc42)
    tt.store %6, %22 : tensor<256x!tt.ptr<f32>> loc(#loc35)
    %35 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc36)
    %36 = tt.addptr %35, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc36)
    tt.store %36, %34 : tensor<256x!tt.ptr<f32>> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":21:28)
#loc3 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":21:33)
#loc4 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":22:36)
#loc5 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":22:23)
#loc6 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":25:34)
#loc7 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":25:39)
#loc8 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":26:30)
#loc9 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":26:19)
#loc10 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":27:33)
#loc11 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":28:30)
#loc12 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":28:19)
#loc13 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":29:33)
#loc14 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":30:30)
#loc15 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":30:19)
#loc16 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":32:31)
#loc17 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":32:20)
#loc18 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":33:35)
#loc19 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":34:31)
#loc20 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":34:20)
#loc21 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":35:35)
#loc22 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":36:18)
#loc23 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":37:18)
#loc24 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":39:19)
#loc25 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":40:27)
#loc26 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":42:20)
#loc27 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":45:19)
#loc28 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":46:20)
#loc29 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":47:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc31 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":48:23)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc35 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":49:39)
#loc36 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":50:25)
#loc37 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":50:37)
#loc38 = loc("inductor_cache/j6/cj6jdmj446hcp45f5bq6pe52lhfmhsxjz2yukfggf7rth753z7nf.py":50:4)
#loc39 = loc(callsite(#loc30 at #loc31))
#loc40 = loc(callsite(#loc32 at #loc31))
#loc41 = loc(callsite(#loc33 at #loc31))
#loc42 = loc(callsite(#loc34 at #loc31))
