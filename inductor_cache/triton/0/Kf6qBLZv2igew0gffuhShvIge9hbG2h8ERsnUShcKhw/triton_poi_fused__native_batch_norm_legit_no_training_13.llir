; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %20, 4, !dbg !17
  %22 = or disjoint i32 %20, 8, !dbg !17
  %23 = or disjoint i32 %20, 12, !dbg !17
  %24 = icmp slt i32 %20, 36, !dbg !18
  %25 = icmp slt i32 %21, 36, !dbg !18
  %26 = icmp slt i32 %22, 36, !dbg !18
  %27 = icmp slt i32 %23, 36, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %16, 256, !dbg !20
  %31 = shl i32 %20, 8, !dbg !21
  %32 = shl i32 %21, 8, !dbg !21
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %23, 8, !dbg !21
  %35 = mul i32 %28, 9216, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %36, %31, !dbg !24
  %38 = add i32 %36, %32, !dbg !24
  %39 = add i32 %36, %33, !dbg !24
  %40 = add i32 %36, %34, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = and i32 %12, 1020, !dbg !26
  %70 = lshr i32 %12, 6, !dbg !26
  %71 = and i32 %70, 12, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %69, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %50, i32 %51, i32 %52, i32 %53, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 1040, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 2080, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 3120, !dbg !26
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %55, i32 %56, i32 %57, i32 %58, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %83 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %60, i32 %61, i32 %62, i32 %63, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %86 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %87 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %65, i32 %66, i32 %67, i32 %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %91 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  %94 = sext i32 %30 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #4, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !34
  %104 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i, label %112, label %107, !dbg !36

107:                                              ; preds = %8
  br i1 %.not1.i, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

112:                                              ; preds = %8
  br i1 %.not1.i, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = bitcast i32 %96 to float, !dbg !28
  %118 = fsub float %93, %117, !dbg !37
  %119 = fsub float %92, %117, !dbg !37
  %120 = fsub float %91, %117, !dbg !37
  %121 = fsub float %90, %117, !dbg !37
  %122 = fsub float %89, %117, !dbg !37
  %123 = fsub float %88, %117, !dbg !37
  %124 = fsub float %87, %117, !dbg !37
  %125 = fsub float %86, %117, !dbg !37
  %126 = fsub float %85, %117, !dbg !37
  %127 = fsub float %84, %117, !dbg !37
  %128 = fsub float %83, %117, !dbg !37
  %129 = fsub float %82, %117, !dbg !37
  %130 = fsub float %81, %117, !dbg !37
  %131 = fsub float %79, %117, !dbg !37
  %132 = fsub float %77, %117, !dbg !37
  %133 = fsub float %75, %117, !dbg !37
  %134 = bitcast i32 %103 to float, !dbg !34
  %135 = bitcast i32 %101 to float, !dbg !32
  %136 = and i32 %12, 12, !dbg !12
  %137 = or disjoint i32 %18, %136, !dbg !17
  %138 = icmp slt i32 %137, 36, !dbg !18
  %139 = lshr i32 %11, 2, !dbg !12
  %140 = and i32 %139, 63, !dbg !12
  %141 = or disjoint i32 %140, 192, !dbg !12
  %142 = or disjoint i32 %10, %141, !dbg !13
  %143 = or disjoint i32 %140, 128, !dbg !12
  %144 = or disjoint i32 %10, %143, !dbg !13
  %145 = or disjoint i32 %140, 64, !dbg !12
  %146 = or disjoint i32 %10, %145, !dbg !13
  %147 = or disjoint i32 %10, %140, !dbg !13
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %149 = fmul float %133, %148, !dbg !39
  %150 = fmul float %132, %148, !dbg !39
  %151 = fmul float %131, %148, !dbg !39
  %152 = fmul float %130, %148, !dbg !39
  %153 = fmul float %129, %148, !dbg !39
  %154 = fmul float %128, %148, !dbg !39
  %155 = fmul float %127, %148, !dbg !39
  %156 = fmul float %126, %148, !dbg !39
  %157 = fmul float %125, %148, !dbg !39
  %158 = fmul float %124, %148, !dbg !39
  %159 = fmul float %123, %148, !dbg !39
  %160 = fmul float %122, %148, !dbg !39
  %161 = fmul float %121, %148, !dbg !39
  %162 = fmul float %120, %148, !dbg !39
  %163 = fmul float %119, %148, !dbg !39
  %164 = fmul float %118, %148, !dbg !39
  %165 = fmul float %149, %135, !dbg !40
  %166 = fmul float %150, %135, !dbg !40
  %167 = fmul float %151, %135, !dbg !40
  %168 = fmul float %152, %135, !dbg !40
  %169 = fmul float %153, %135, !dbg !40
  %170 = fmul float %154, %135, !dbg !40
  %171 = fmul float %155, %135, !dbg !40
  %172 = fmul float %156, %135, !dbg !40
  %173 = fmul float %157, %135, !dbg !40
  %174 = fmul float %158, %135, !dbg !40
  %175 = fmul float %159, %135, !dbg !40
  %176 = fmul float %160, %135, !dbg !40
  %177 = fmul float %161, %135, !dbg !40
  %178 = fmul float %162, %135, !dbg !40
  %179 = fmul float %163, %135, !dbg !40
  %180 = fmul float %164, %135, !dbg !40
  %181 = fadd float %165, %134, !dbg !41
  %182 = fadd float %166, %134, !dbg !41
  %183 = fadd float %167, %134, !dbg !41
  %184 = fadd float %168, %134, !dbg !41
  %185 = fadd float %169, %134, !dbg !41
  %186 = fadd float %170, %134, !dbg !41
  %187 = fadd float %171, %134, !dbg !41
  %188 = fadd float %172, %134, !dbg !41
  %189 = fadd float %173, %134, !dbg !41
  %190 = fadd float %174, %134, !dbg !41
  %191 = fadd float %175, %134, !dbg !41
  %192 = fadd float %176, %134, !dbg !41
  %193 = fadd float %177, %134, !dbg !41
  %194 = fadd float %178, %134, !dbg !41
  %195 = fadd float %179, %134, !dbg !41
  %196 = fadd float %180, %134, !dbg !41
  %197 = mul i32 %147, 36, !dbg !42
  %198 = mul i32 %146, 36, !dbg !42
  %199 = mul i32 %144, 36, !dbg !42
  %200 = mul i32 %142, 36, !dbg !42
  %201 = add i32 %137, %197, !dbg !43
  %202 = add i32 %137, %198, !dbg !43
  %203 = add i32 %137, %199, !dbg !43
  %204 = add i32 %137, %200, !dbg !43
  %205 = sext i32 %201 to i64, !dbg !44
  %206 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !44
  %207 = sext i32 %202 to i64, !dbg !44
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !44
  %209 = sext i32 %203 to i64, !dbg !44
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %209, !dbg !44
  %211 = sext i32 %204 to i64, !dbg !44
  %212 = getelementptr float, ptr addrspace(1) %5, i64 %211, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %213 = shl i32 %11, 4, !dbg !45
  %214 = and i32 %213, 4080, !dbg !45
  %215 = lshr exact i32 %214, 2, !dbg !45
  %216 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %215, !dbg !45
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !45
  %218 = bitcast float %181 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !45
  %219 = or disjoint i32 %214, 1, !dbg !45
  %220 = getelementptr float, ptr addrspace(3) %216, i32 %219, !dbg !45
  %221 = bitcast float %182 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !45
  %222 = or disjoint i32 %214, 2, !dbg !45
  %223 = getelementptr float, ptr addrspace(3) %216, i32 %222, !dbg !45
  %224 = bitcast float %183 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !45
  %225 = or disjoint i32 %214, 3, !dbg !45
  %226 = getelementptr float, ptr addrspace(3) %216, i32 %225, !dbg !45
  %227 = bitcast float %184 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !45
  %228 = or disjoint i32 %214, 4, !dbg !45
  %229 = getelementptr float, ptr addrspace(3) %216, i32 %228, !dbg !45
  %230 = bitcast float %185 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !45
  %231 = or disjoint i32 %214, 5, !dbg !45
  %232 = getelementptr float, ptr addrspace(3) %216, i32 %231, !dbg !45
  %233 = bitcast float %186 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !45
  %234 = or disjoint i32 %214, 6, !dbg !45
  %235 = getelementptr float, ptr addrspace(3) %216, i32 %234, !dbg !45
  %236 = bitcast float %187 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !45
  %237 = or disjoint i32 %214, 7, !dbg !45
  %238 = getelementptr float, ptr addrspace(3) %216, i32 %237, !dbg !45
  %239 = bitcast float %188 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !45
  %240 = or disjoint i32 %214, 8, !dbg !45
  %241 = getelementptr float, ptr addrspace(3) %216, i32 %240, !dbg !45
  %242 = bitcast float %189 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !45
  %243 = or disjoint i32 %214, 9, !dbg !45
  %244 = getelementptr float, ptr addrspace(3) %216, i32 %243, !dbg !45
  %245 = bitcast float %190 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !45
  %246 = or disjoint i32 %214, 10, !dbg !45
  %247 = getelementptr float, ptr addrspace(3) %216, i32 %246, !dbg !45
  %248 = bitcast float %191 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !45
  %249 = or disjoint i32 %214, 11, !dbg !45
  %250 = getelementptr float, ptr addrspace(3) %216, i32 %249, !dbg !45
  %251 = bitcast float %192 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !45
  %252 = or disjoint i32 %214, 12, !dbg !45
  %253 = getelementptr float, ptr addrspace(3) %216, i32 %252, !dbg !45
  %254 = bitcast float %193 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !45
  %255 = or disjoint i32 %214, 13, !dbg !45
  %256 = getelementptr float, ptr addrspace(3) %216, i32 %255, !dbg !45
  %257 = bitcast float %194 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !45
  %258 = or disjoint i32 %214, 14, !dbg !45
  %259 = getelementptr float, ptr addrspace(3) %216, i32 %258, !dbg !45
  %260 = bitcast float %195 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !45
  %261 = or disjoint i32 %214, 15, !dbg !45
  %262 = getelementptr float, ptr addrspace(3) %216, i32 %261, !dbg !45
  %263 = bitcast float %196 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %264 = lshr i32 %69, 4, !dbg !45
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !45
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %69, !dbg !45
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !45
  %268 = or disjoint i32 %69, 1, !dbg !45
  %269 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %268, !dbg !45
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !45
  %271 = or disjoint i32 %69, 2, !dbg !45
  %272 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %271, !dbg !45
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !45
  %274 = or disjoint i32 %69, 3, !dbg !45
  %275 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %274, !dbg !45
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !45
  %277 = or disjoint i32 %69, 1024, !dbg !45
  %278 = lshr i32 %277, 4, !dbg !45
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !45
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !45
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !45
  %282 = or disjoint i32 %69, 1025, !dbg !45
  %283 = lshr i32 %282, 4, !dbg !45
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !45
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !45
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !45
  %287 = or disjoint i32 %69, 1026, !dbg !45
  %288 = lshr i32 %287, 4, !dbg !45
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !45
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !45
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !45
  %292 = or disjoint i32 %69, 1027, !dbg !45
  %293 = lshr i32 %292, 4, !dbg !45
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !45
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !45
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !45
  %297 = or disjoint i32 %69, 2048, !dbg !45
  %298 = lshr i32 %297, 4, !dbg !45
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !45
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !45
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !45
  %302 = or disjoint i32 %69, 2049, !dbg !45
  %303 = lshr i32 %302, 4, !dbg !45
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !45
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !45
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !45
  %307 = or disjoint i32 %69, 2050, !dbg !45
  %308 = lshr i32 %307, 4, !dbg !45
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !45
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !45
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !45
  %312 = or disjoint i32 %69, 2051, !dbg !45
  %313 = lshr i32 %312, 4, !dbg !45
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !45
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !45
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !45
  %317 = or disjoint i32 %69, 3072, !dbg !45
  %318 = lshr i32 %317, 4, !dbg !45
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !45
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !45
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !45
  %322 = or disjoint i32 %69, 3073, !dbg !45
  %323 = lshr i32 %322, 4, !dbg !45
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !45
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !45
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !45
  %327 = or disjoint i32 %69, 3074, !dbg !45
  %328 = lshr i32 %327, 4, !dbg !45
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !45
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !45
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !45
  %332 = or disjoint i32 %69, 3075, !dbg !45
  %333 = lshr i32 %332, 4, !dbg !45
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !45
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !45
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %270, i32 %273, i32 %276, ptr addrspace(1) %206, i1 %138) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %286, i32 %291, i32 %296, ptr addrspace(1) %208, i1 %138) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %306, i32 %311, i32 %316, ptr addrspace(1) %210, i1 %138) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %326, i32 %331, i32 %336, ptr addrspace(1) %212, i1 %138) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cudctemwvjjsxdcrryzsv6lpashxebnoeh6swwegpy6nwluainlp.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 33, scope: !7)
!43 = !DILocation(line: 48, column: 30, scope: !7)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 45, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
