; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = and i32 %10, 7, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = lshr i32 %10, 5, !dbg !14
  %15 = lshr i32 %10, 3, !dbg !14
  %16 = and i32 %15, 31, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 64, !dbg !15
  %18 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %17, 64, !dbg !17
  %20 = sdiv i32 %13, 4096, !dbg !18
  %21 = shl nsw i32 %.decomposed, 1, !dbg !19
  %22 = shl nsw i32 %19, 7, !dbg !20
  %23 = or disjoint i32 %22, %16, !dbg !21
  %24 = or disjoint i32 %23, 32, !dbg !21
  %25 = or disjoint i32 %23, 64, !dbg !21
  %26 = or disjoint i32 %23, 96, !dbg !21
  %27 = sdiv i32 %23, 4096, !dbg !22
  %28 = mul i32 %27, 4096, !dbg !23
  %.decomposed1 = sub i32 %23, %28, !dbg !23
  %29 = sdiv i32 %24, 4096, !dbg !22
  %30 = mul i32 %29, 4096, !dbg !23
  %.decomposed2 = sub i32 %24, %30, !dbg !23
  %31 = sdiv i32 %25, 4096, !dbg !22
  %32 = mul i32 %31, 4096, !dbg !23
  %.decomposed3 = sub i32 %25, %32, !dbg !23
  %33 = sdiv i32 %26, 4096, !dbg !22
  %34 = mul i32 %33, 4096, !dbg !23
  %.decomposed4 = sub i32 %26, %34, !dbg !23
  %35 = shl nsw i32 %.decomposed1, 7, !dbg !24
  %36 = shl nsw i32 %.decomposed2, 7, !dbg !24
  %37 = shl nsw i32 %.decomposed3, 7, !dbg !24
  %38 = shl nsw i32 %.decomposed4, 7, !dbg !24
  %39 = shl i32 %20, 19, !dbg !25
  %40 = add i32 %39, %21, !dbg !26
  %41 = add i32 %40, %27, !dbg !27
  %42 = add i32 %41, %35, !dbg !28
  %43 = add i32 %40, %29, !dbg !27
  %44 = add i32 %43, %36, !dbg !28
  %45 = add i32 %40, %31, !dbg !27
  %46 = add i32 %45, %37, !dbg !28
  %47 = add i32 %40, %33, !dbg !27
  %48 = add i32 %47, %38, !dbg !28
  %49 = sext i32 %42 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !29
  %51 = sext i32 %44 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !29
  %53 = sext i32 %46 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !29
  %55 = sext i32 %48 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !32
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !32
  %69 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !30
  %70 = insertelement <2 x i32> %69, i32 %58, i64 1, !dbg !30
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !30
  %72 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !32
  %73 = insertelement <2 x i32> %72, i32 %66, i64 1, !dbg !32
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !32
  %75 = fadd <2 x float> %71, %74, !dbg !33
  %76 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !30
  %77 = insertelement <2 x i32> %76, i32 %60, i64 1, !dbg !30
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !30
  %79 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !32
  %80 = insertelement <2 x i32> %79, i32 %68, i64 1, !dbg !32
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !32
  %82 = fadd <2 x float> %78, %81, !dbg !33
  %83 = extractelement <2 x float> %75, i64 0, !dbg !34
  %84 = extractelement <2 x float> %75, i64 1, !dbg !34
  %85 = fadd float %83, %84, !dbg !35
  %86 = extractelement <2 x float> %82, i64 0, !dbg !34
  %87 = fadd float %85, %86, !dbg !35
  %88 = extractelement <2 x float> %82, i64 1, !dbg !34
  %89 = fadd float %87, %88, !dbg !35
  %90 = bitcast float %89 to i32, !dbg !40
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !40
  %92 = bitcast i32 %91 to float, !dbg !40
  %93 = fadd float %89, %92, !dbg !35
  %94 = bitcast float %93 to i32, !dbg !40
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !40
  %96 = bitcast i32 %95 to float, !dbg !40
  %97 = fadd float %93, %96, !dbg !35
  %98 = lshr i32 %11, 3, !dbg !40
  %99 = icmp samesign ult i32 %11, 8, !dbg !40
  %100 = and i32 %14, 7, !dbg !40
  %101 = shl nuw nsw i32 %12, 3, !dbg !40
  %102 = or disjoint i32 %101, %100, !dbg !40
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !40
  %104 = bitcast float %97 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %99) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %105 = icmp slt i32 %10, 64, !dbg !40
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !40
  %108 = bitcast i32 %107 to float, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %108, %110, !dbg !35
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !35
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !35
  %120 = icmp eq i32 %12, 0, !dbg !40
  %121 = and i1 %105, %120, !dbg !40
  %122 = bitcast float %119 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %122, i1 %121) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !40
  %124 = load float, ptr addrspace(3) %123, align 16, !dbg !40
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 1.280000e+02) #3, !dbg !41
  %126 = fsub float %83, %125, !dbg !34
  %127 = fsub float %84, %125, !dbg !34
  %128 = fsub float %86, %125, !dbg !34
  %129 = fsub float %88, %125, !dbg !34
  %130 = fmul float %126, %126, !dbg !42
  %131 = fmul float %127, %127, !dbg !42
  %132 = fmul float %128, %128, !dbg !42
  %133 = fmul float %129, %129, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %134 = fadd float %130, %131, !dbg !45
  %135 = fadd float %132, %134, !dbg !45
  %136 = fadd float %133, %135, !dbg !45
  %137 = bitcast float %136 to i32, !dbg !43
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !43
  %139 = bitcast i32 %138 to float, !dbg !43
  %140 = fadd float %136, %139, !dbg !45
  %141 = bitcast float %140 to i32, !dbg !43
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !43
  %143 = bitcast i32 %142 to float, !dbg !43
  %144 = fadd float %140, %143, !dbg !45
  %145 = bitcast float %144 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %145, i1 %99) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %146 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !43
  %147 = bitcast i32 %146 to float, !dbg !43
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = fadd float %147, %149, !dbg !45
  %151 = bitcast float %150 to i32, !dbg !43
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = fadd float %150, %153, !dbg !45
  %155 = bitcast float %154 to i32, !dbg !43
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = fadd float %154, %157, !dbg !45
  %159 = bitcast float %158 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %159, i1 %121) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %160 = load i32, ptr addrspace(3) %123, align 16, !dbg !43
  %161 = sext i32 %13 to i64, !dbg !46
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !46
  %163 = shl nuw nsw i32 %100, 2, !dbg !47
  %164 = or disjoint i32 %163, %98, !dbg !47
  %165 = icmp eq i32 %164, 0, !dbg !47
  %166 = bitcast float %125 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %162, i1 %165) #3, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %167, i1 %165) #3, !dbg !49
  %168 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %168, i1 %165) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvh7v2yax33nr637ackdkazcfqzmao6x3hyp6qoh77vqnp3rny6.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_per_fused_native_group_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_8", linkageName: "triton_per_fused_native_group_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 98, scope: !7)
!23 = !DILocation(line: 34, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 75, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 68, scope: !7)
!28 = !DILocation(line: 34, column: 81, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 106, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 106, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 39, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 46, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 25, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 48, column: 25, scope: !7)
!49 = !DILocation(line: 48, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
