; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 4096, !dbg !14
  %20 = srem i32 %19, 4, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !31
  %42 = bitcast i32 %41 to float, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !31
  %44 = bitcast i32 %43 to float, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !35
  %51 = fadd float %42, 0x3EE4F8B580000000, !dbg !36
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !36
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %53, 0, !dbg !37
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %54, 0, !dbg !37
  br i1 %.not.i, label %60, label %55, !dbg !37

55:                                               ; preds = %12
  br i1 %.not1.i, label %58, label %56, !dbg !37

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

60:                                               ; preds = %12
  br i1 %.not1.i, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !37
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %65, 0, !dbg !37
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !37
  br i1 %.not.i1, label %72, label %67, !dbg !37

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !37

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !37
  %77 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %78 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %79 = insertelement <2 x i32> %78, i32 %32, i64 1, !dbg !19
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !19
  %81 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %82 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !17
  %83 = insertelement <2 x i32> %82, i32 %81, i64 1, !dbg !17
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !17
  %85 = fadd <2 x float> %84, %80, !dbg !38
  %86 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = fadd float %87, %89, !dbg !39
  %91 = extractelement <2 x float> %85, i64 1, !dbg !40
  %92 = fadd float %91, %90, !dbg !40
  %93 = extractelement <2 x float> %85, i64 0, !dbg !41
  %94 = fadd float %93, %92, !dbg !41
  %95 = bitcast i32 %39 to float, !dbg !29
  %96 = fsub float %94, %95, !dbg !42
  %97 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %98 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %99 = insertelement <2 x i32> %98, i32 %31, i64 1, !dbg !19
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !19
  %101 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %102 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !17
  %103 = insertelement <2 x i32> %102, i32 %101, i64 1, !dbg !17
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !17
  %105 = fadd <2 x float> %104, %100, !dbg !38
  %106 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %107 = bitcast i32 %106 to float, !dbg !25
  %108 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = fadd float %107, %109, !dbg !39
  %111 = extractelement <2 x float> %105, i64 1, !dbg !40
  %112 = fadd float %111, %110, !dbg !40
  %113 = extractelement <2 x float> %105, i64 0, !dbg !41
  %114 = fadd float %113, %112, !dbg !41
  %115 = bitcast i32 %38 to float, !dbg !29
  %116 = fsub float %114, %115, !dbg !42
  %117 = bitcast i32 %50 to float, !dbg !35
  %118 = bitcast i32 %49 to float, !dbg !35
  %119 = bitcast i32 %47 to float, !dbg !33
  %120 = bitcast i32 %46 to float, !dbg !33
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %123 = fmul float %116, %121, !dbg !44
  %124 = fmul float %96, %122, !dbg !44
  %125 = fmul float %123, %120, !dbg !45
  %126 = fmul float %124, %119, !dbg !45
  %127 = fadd float %125, %118, !dbg !46
  %128 = fadd float %126, %117, !dbg !46
  %129 = fcmp olt float %127, 0.000000e+00, !dbg !47
  %130 = fcmp olt float %128, 0.000000e+00, !dbg !47
  %131 = select i1 %129, float 0.000000e+00, float %127, !dbg !51
  %132 = select i1 %130, float 0.000000e+00, float %128, !dbg !51
  %133 = bitcast float %114 to i32, !dbg !52
  %134 = bitcast float %94 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %22, i1 true) #3, !dbg !52
  %135 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !53
  %136 = bitcast float %131 to i32, !dbg !54
  %137 = bitcast float %132 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %135, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyyvuycre34pkdt5gqfhsyon5ntffk6grdmce45h2podeb3lrza5.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 27, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 53, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 55, column: 37, scope: !7)
!55 = !DILocation(line: 55, column: 4, scope: !7)
