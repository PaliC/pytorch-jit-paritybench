; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 64, !dbg !12
  %9 = lshr i32 %7, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %.lobit = lshr exact i32 %8, 6, !dbg !12
  %11 = or disjoint i32 %6, %10, !dbg !13
  %12 = or disjoint i32 %11, 8, !dbg !13
  %13 = or disjoint i32 %6, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = or disjoint i32 %13, 8, !dbg !13
  %18 = or disjoint i32 %13, 10, !dbg !13
  %19 = or disjoint i32 %13, 12, !dbg !13
  %20 = or disjoint i32 %13, 14, !dbg !13
  %21 = icmp slt i32 %11, 12, !dbg !14
  %22 = icmp slt i32 %12, 12, !dbg !14
  %23 = icmp slt i32 %13, 12, !dbg !14
  %24 = icmp slt i32 %14, 12, !dbg !14
  %25 = icmp slt i32 %15, 12, !dbg !14
  %26 = icmp slt i32 %16, 12, !dbg !14
  %27 = icmp slt i32 %17, 12, !dbg !14
  %28 = icmp slt i32 %18, 12, !dbg !14
  %29 = icmp slt i32 %6, 0, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 6, !dbg !16
  %32 = shl i32 %7, 2, !dbg !17
  %33 = and i32 %32, 60, !dbg !17
  %34 = and i32 %7, 63, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %31, %34, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %37 = sdiv i32 %.frozen, 3, !dbg !19
  %38 = mul i32 %37, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %.frozen3 = freeze i32 %14, !dbg !19
  %39 = sdiv i32 %.frozen3, 3, !dbg !19
  %40 = mul i32 %39, 3, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %40, !dbg !20
  %.frozen5 = freeze i32 %15, !dbg !19
  %41 = sdiv i32 %.frozen5, 3, !dbg !19
  %42 = mul i32 %41, 3, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %42, !dbg !20
  %.frozen7 = freeze i32 %16, !dbg !19
  %43 = sdiv i32 %.frozen7, 3, !dbg !19
  %44 = mul i32 %43, 3, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %44, !dbg !20
  %.frozen9 = freeze i32 %17, !dbg !19
  %45 = sdiv i32 %.frozen9, 3, !dbg !19
  %46 = mul i32 %45, 3, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %46, !dbg !20
  %.frozen11 = freeze i32 %18, !dbg !19
  %47 = sdiv i32 %.frozen11, 3, !dbg !19
  %48 = mul i32 %47, 3, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %48, !dbg !20
  %.frozen13 = freeze i32 %19, !dbg !19
  %49 = sdiv i32 %.frozen13, 3, !dbg !19
  %50 = mul i32 %49, 3, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %50, !dbg !20
  %.frozen15 = freeze i32 %20, !dbg !19
  %51 = sdiv i32 %.frozen15, 3, !dbg !19
  %52 = mul i32 %51, 3, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %52, !dbg !20
  %53 = shl i32 %11, 12, !dbg !21
  %54 = shl i32 %12, 12, !dbg !21
  %55 = add i32 %35, %53, !dbg !22
  %56 = add i32 %35, %54, !dbg !22
  %57 = sext i32 %55 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %56 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %21) #2, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %22) #2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = mul i32 %36, 3, !dbg !25
  %72 = add i32 %71, %.decomposed, !dbg !26
  %73 = mul i32 %37, 12288, !dbg !27
  %74 = mul i32 %39, 12288, !dbg !27
  %75 = mul i32 %41, 12288, !dbg !27
  %76 = mul i32 %43, 12288, !dbg !27
  %77 = mul i32 %45, 12288, !dbg !27
  %78 = mul i32 %47, 12288, !dbg !27
  %79 = mul i32 %49, 12288, !dbg !27
  %80 = mul i32 %51, 12288, !dbg !27
  %81 = add i32 %72, %73, !dbg !28
  %82 = add i32 %74, %.decomposed4, !dbg !26
  %83 = add i32 %82, %71, !dbg !28
  %84 = add i32 %75, %.decomposed6, !dbg !26
  %85 = add i32 %84, %71, !dbg !28
  %86 = add i32 %76, %.decomposed8, !dbg !26
  %87 = add i32 %86, %71, !dbg !28
  %88 = add i32 %77, %.decomposed10, !dbg !26
  %89 = add i32 %88, %71, !dbg !28
  %90 = add i32 %78, %.decomposed12, !dbg !26
  %91 = add i32 %90, %71, !dbg !28
  %92 = add i32 %79, %.decomposed14, !dbg !26
  %93 = add i32 %92, %71, !dbg !28
  %94 = add i32 %80, %.decomposed16, !dbg !26
  %95 = add i32 %94, %71, !dbg !28
  %96 = sext i32 %81 to i64, !dbg !29
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !29
  %98 = sext i32 %83 to i64, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !29
  %100 = sext i32 %85 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = sext i32 %87 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !29
  %104 = sext i32 %89 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !29
  %106 = sext i32 %91 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !29
  %108 = sext i32 %93 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !29
  %110 = sext i32 %95 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !29
  %112 = and i32 %32, 192, !dbg !30
  %113 = shl nuw nsw i32 %8, 2, !dbg !30
  %114 = or disjoint i32 %112, %113, !dbg !30
  %115 = or disjoint i32 %114, %33, !dbg !30
  %116 = and i32 %7, 127, !dbg !30
  %117 = lshr exact i32 %114, 4, !dbg !30
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %117, !dbg !30
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %115, !dbg !30
  %120 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !30
  %121 = or disjoint i32 %115, 1, !dbg !30
  %122 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %121, !dbg !30
  %123 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !30
  %124 = or disjoint i32 %115, 2, !dbg !30
  %125 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %124, !dbg !30
  %126 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !30
  %127 = or disjoint i32 %115, 3, !dbg !30
  %128 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %127, !dbg !30
  %129 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %130 = lshr i32 %116, 6, !dbg !30
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !30
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %116, !dbg !30
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !30
  %134 = or disjoint i32 %116, 128, !dbg !30
  %135 = lshr i32 %134, 6, !dbg !30
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !30
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %134, !dbg !30
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !30
  %139 = or disjoint i32 %116, 256, !dbg !30
  %140 = lshr i32 %139, 6, !dbg !30
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !30
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %139, !dbg !30
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !30
  %144 = or disjoint i32 %116, 384, !dbg !30
  %145 = lshr i32 %144, 6, !dbg !30
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !30
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !30
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %149 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %149, i1 true) #2, !dbg !30
  %150 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %150, i1 true) #2, !dbg !30
  %151 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %151, i1 true) #2, !dbg !30
  %152 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %152, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %153 = load i32, ptr addrspace(3) %132, align 4, !dbg !30
  %154 = load i32, ptr addrspace(3) %137, align 4, !dbg !30
  %155 = load i32, ptr addrspace(3) %142, align 4, !dbg !30
  %156 = load i32, ptr addrspace(3) %147, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %97, i1 %23) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %99, i1 %24) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %101, i1 %25) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %103, i1 %26) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %105, i1 %27) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %107, i1 %28) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %109, i1 %29) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %111, i1 %29) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4qgsydo5lsrlaag3dwgru3vyfaejnk5l3smicqrxjlklsdvk236.py", directory: "inductor_cache/4q")
!4 = !{ptr @triton_poi_fused_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_3", linkageName: "triton_poi_fused_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 32, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
