; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_52(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 38912, !dbg !14
  %11 = add i32 %9, -3040, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -2432, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -1824, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = add i32 %9, -608, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = sext i32 %9 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %9, 608, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = add i32 %9, 1824, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = add i32 %9, 2432, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = add i32 %9, 3040, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %39 = sdiv <2 x i32> %38, <i32 608, i32 2432>, !dbg !32
  %40 = srem <2 x i32> %39, splat (i32 4), !dbg !33
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !34
  %42 = icmp sgt i32 %41, 0, !dbg !35
  %43 = extractelement <2 x i32> %40, i64 0, !dbg !34
  %44 = icmp sgt i32 %43, 0, !dbg !36
  %45 = and i1 %42, %44, !dbg !37
  %46 = and i1 %10, %45, !dbg !38
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !39
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !39
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !39
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !39
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !39
  %52 = bitcast i32 %48 to float, !dbg !39
  %53 = bitcast i32 %49 to float, !dbg !39
  %54 = bitcast i32 %50 to float, !dbg !39
  %55 = bitcast i32 %51 to float, !dbg !39
  %56 = icmp sgt i32 %43, -1, !dbg !40
  %57 = and i1 %42, %56, !dbg !41
  %58 = and i1 %10, %57, !dbg !42
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !43
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !43
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !43
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !43
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !43
  %64 = bitcast i32 %60 to float, !dbg !43
  %65 = bitcast i32 %61 to float, !dbg !43
  %66 = bitcast i32 %62 to float, !dbg !43
  %67 = bitcast i32 %63 to float, !dbg !43
  %68 = fadd float %52, %64, !dbg !44
  %69 = fadd float %53, %65, !dbg !44
  %70 = fadd float %54, %66, !dbg !44
  %71 = fadd float %55, %67, !dbg !44
  %72 = add nsw i32 %43, 1, !dbg !45
  %73 = icmp ult i32 %72, 4, !dbg !45
  %74 = and i1 %42, %73, !dbg !46
  %75 = and i1 %10, %74, !dbg !47
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !48
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !48
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !48
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !48
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !48
  %81 = bitcast i32 %77 to float, !dbg !48
  %82 = bitcast i32 %78 to float, !dbg !48
  %83 = bitcast i32 %79 to float, !dbg !48
  %84 = bitcast i32 %80 to float, !dbg !48
  %85 = fadd float %68, %81, !dbg !49
  %86 = fadd float %69, %82, !dbg !49
  %87 = fadd float %70, %83, !dbg !49
  %88 = fadd float %71, %84, !dbg !49
  %89 = icmp sgt i32 %41, -1, !dbg !50
  %90 = and i1 %89, %44, !dbg !51
  %91 = and i1 %10, %90, !dbg !52
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !53
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !53
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !53
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !53
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !53
  %97 = bitcast i32 %93 to float, !dbg !53
  %98 = bitcast i32 %94 to float, !dbg !53
  %99 = bitcast i32 %95 to float, !dbg !53
  %100 = bitcast i32 %96 to float, !dbg !53
  %101 = fadd float %85, %97, !dbg !54
  %102 = fadd float %86, %98, !dbg !54
  %103 = fadd float %87, %99, !dbg !54
  %104 = fadd float %88, %100, !dbg !54
  %105 = or i32 %41, %43, !dbg !55
  %106 = icmp sgt i32 %105, -1, !dbg !55
  %107 = and i1 %10, %106, !dbg !56
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !57
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !57
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !57
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !57
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !57
  %113 = bitcast i32 %109 to float, !dbg !57
  %114 = bitcast i32 %110 to float, !dbg !57
  %115 = bitcast i32 %111 to float, !dbg !57
  %116 = bitcast i32 %112 to float, !dbg !57
  %117 = fadd float %101, %113, !dbg !58
  %118 = fadd float %102, %114, !dbg !58
  %119 = fadd float %103, %115, !dbg !58
  %120 = fadd float %104, %116, !dbg !58
  %121 = and i1 %89, %73, !dbg !59
  %122 = and i1 %10, %121, !dbg !60
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !61
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !61
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !61
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !61
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !61
  %128 = bitcast i32 %124 to float, !dbg !61
  %129 = bitcast i32 %125 to float, !dbg !61
  %130 = bitcast i32 %126 to float, !dbg !61
  %131 = bitcast i32 %127 to float, !dbg !61
  %132 = fadd float %117, %128, !dbg !62
  %133 = fadd float %118, %129, !dbg !62
  %134 = fadd float %119, %130, !dbg !62
  %135 = fadd float %120, %131, !dbg !62
  %136 = add nsw i32 %41, 1, !dbg !63
  %137 = icmp ult i32 %136, 4, !dbg !63
  %138 = and i1 %44, %137, !dbg !64
  %139 = and i1 %10, %138, !dbg !65
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #1, !dbg !66
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !66
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !66
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !66
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !66
  %145 = bitcast i32 %141 to float, !dbg !66
  %146 = bitcast i32 %142 to float, !dbg !66
  %147 = bitcast i32 %143 to float, !dbg !66
  %148 = bitcast i32 %144 to float, !dbg !66
  %149 = fadd float %132, %145, !dbg !67
  %150 = fadd float %133, %146, !dbg !67
  %151 = fadd float %134, %147, !dbg !67
  %152 = fadd float %135, %148, !dbg !67
  %153 = and i1 %56, %137, !dbg !68
  %154 = and i1 %10, %153, !dbg !69
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #1, !dbg !70
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !70
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !70
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !70
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !70
  %160 = bitcast i32 %156 to float, !dbg !70
  %161 = bitcast i32 %157 to float, !dbg !70
  %162 = bitcast i32 %158 to float, !dbg !70
  %163 = bitcast i32 %159 to float, !dbg !70
  %164 = fadd float %149, %160, !dbg !71
  %165 = fadd float %150, %161, !dbg !71
  %166 = fadd float %151, %162, !dbg !71
  %167 = fadd float %152, %163, !dbg !71
  %168 = or i32 %136, %72, !dbg !72
  %169 = icmp ult i32 %168, 4, !dbg !72
  %170 = and i1 %10, %169, !dbg !73
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170, i32 0, i1 %170) #1, !dbg !74
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !74
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !74
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !74
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !74
  %176 = bitcast i32 %172 to float, !dbg !74
  %177 = bitcast i32 %173 to float, !dbg !74
  %178 = bitcast i32 %174 to float, !dbg !74
  %179 = bitcast i32 %175 to float, !dbg !74
  %180 = fadd float %164, %176, !dbg !75
  %181 = fadd float %165, %177, !dbg !75
  %182 = fadd float %166, %178, !dbg !75
  %183 = fadd float %167, %179, !dbg !75
  %184 = mul nsw i32 %43, %41, !dbg !76
  %185 = add nsw <2 x i32> %40, splat (i32 2), !dbg !77
  %186 = icmp sgt <2 x i32> %40, splat (i32 2), !dbg !78
  %187 = select <2 x i1> %186, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !79
  %188 = icmp slt <2 x i32> %40, splat (i32 3), !dbg !80
  %189 = select <2 x i1> %188, <2 x i32> %185, <2 x i32> zeroinitializer, !dbg !81
  %190 = add nsw <2 x i32> %187, %189, !dbg !82
  %191 = extractelement <2 x i32> %190, i64 0, !dbg !83
  %192 = extractelement <2 x i32> %190, i64 1, !dbg !84
  %193 = mul nsw i32 %191, %192, !dbg !85
  %194 = shufflevector <2 x i32> %40, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !84
  %195 = mul nsw <2 x i32> %190, %194, !dbg !84
  %shift = shufflevector <2 x i32> %195, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %196 = add nsw <2 x i32> %shift, %195
  %reass.add = extractelement <2 x i32> %196, i64 0
  %197 = add nsw i32 %41, %43, !dbg !34
  %reass.sub6 = sub nsw i32 %184, %197, !dbg !34
  %198 = add nsw i32 %reass.sub6, 1, !dbg !34
  %199 = add nsw i32 %198, %191, !dbg !83
  %200 = add nsw i32 %199, %192, !dbg !84
  %201 = add nsw i32 %200, %193, !dbg !86
  %202 = sub nsw i32 %201, %reass.add, !dbg !87
  %203 = sitofp i32 %202 to float, !dbg !88
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %203) #1, !dbg !88
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %203) #1, !dbg !88
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %203) #1, !dbg !88
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %203) #1, !dbg !88
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !89
  %209 = bitcast float %204 to i32, !dbg !90
  %210 = bitcast float %205 to i32, !dbg !90
  %211 = bitcast float %206 to i32, !dbg !90
  %212 = bitcast float %207 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %210, i32 %211, i32 %212, ptr addrspace(1) %208, i1 %10) #1, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cce4khz2vltqp2msrzw2be2zg66ne2ivfpz2hm4mzjvg3yoc7qxk.py", directory: "inductor_cache/ce")
!4 = !{ptr @triton_poi_fused_avg_pool2d_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_52, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_52", linkageName: "triton_poi_fused_avg_pool2d_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 41, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 40, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 37, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 38, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 38, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 38, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 21, scope: !7)
!33 = !DILocation(line: 24, column: 29, scope: !7)
!34 = !DILocation(line: 79, column: 40, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 34, column: 19, scope: !7)
!37 = !DILocation(line: 37, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 54, scope: !7)
!39 = !DILocation(line: 38, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 21, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 54, scope: !7)
!43 = !DILocation(line: 44, column: 46, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 54, scope: !7)
!48 = !DILocation(line: 51, column: 46, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 21, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 53, scope: !7)
!53 = !DILocation(line: 58, column: 45, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 44, scope: !7)
!57 = !DILocation(line: 61, column: 36, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 50, scope: !7)
!61 = !DILocation(line: 64, column: 42, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 51, scope: !7)
!66 = !DILocation(line: 71, column: 43, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 51, scope: !7)
!70 = !DILocation(line: 74, column: 43, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 51, scope: !7)
!74 = !DILocation(line: 77, column: 43, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 43, scope: !7)
!77 = !DILocation(line: 79, column: 124, scope: !7)
!78 = !DILocation(line: 79, column: 120, scope: !7)
!79 = !DILocation(line: 79, column: 112, scope: !7)
!80 = !DILocation(line: 79, column: 155, scope: !7)
!81 = !DILocation(line: 79, column: 143, scope: !7)
!82 = !DILocation(line: 79, column: 131, scope: !7)
!83 = !DILocation(line: 79, column: 48, scope: !7)
!84 = !DILocation(line: 79, column: 231, scope: !7)
!85 = !DILocation(line: 79, column: 105, scope: !7)
!86 = !DILocation(line: 79, column: 299, scope: !7)
!87 = !DILocation(line: 79, column: 357, scope: !7)
!88 = !DILocation(line: 80, column: 20, scope: !7)
!89 = !DILocation(line: 81, column: 25, scope: !7)
!90 = !DILocation(line: 81, column: 37, scope: !7)
!91 = !DILocation(line: 81, column: 4, scope: !7)
