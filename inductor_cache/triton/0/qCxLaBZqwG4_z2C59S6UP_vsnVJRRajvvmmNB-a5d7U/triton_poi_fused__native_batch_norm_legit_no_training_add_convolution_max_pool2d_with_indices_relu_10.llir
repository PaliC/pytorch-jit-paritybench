; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 3, !dbg !12
  %15 = and i32 %14, 1016, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %20 = sdiv <2 x i32> %19, <i32 4096, i32 256>, !dbg !14
  %21 = srem <2 x i32> %20, splat (i32 16), !dbg !15
  %22 = srem i32 %16, 256, !dbg !16
  %23 = srem i32 %17, 256, !dbg !16
  %24 = sext i32 %16 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %17 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !18
  %30 = sext i32 %22 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !19
  %32 = sext i32 %23 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !28
  %68 = extractelement <2 x i32> %21, i64 0, !dbg !29
  %69 = icmp sgt i32 %68, 0, !dbg !30
  %70 = extractelement <2 x i32> %21, i64 1, !dbg !29
  %71 = icmp sgt i32 %70, 0, !dbg !31
  %72 = and i1 %69, %71, !dbg !32
  %73 = shl nsw i32 %70, 9, !dbg !33
  %74 = extractelement <2 x i32> %20, i64 0, !dbg !34
  %75 = shl i32 %74, 14, !dbg !34
  %76 = add i32 %73, %75, !dbg !35
  %77 = add i32 %76, -8448, !dbg !36
  %78 = add nsw i32 %77, %22, !dbg !37
  %79 = add nsw i32 %77, %23, !dbg !37
  %80 = sext i32 %78 to i64, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !38
  %82 = sext i32 %79 to i64, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !38
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #4, !dbg !39
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #4, !dbg !39
  %86 = icmp sgt i32 %70, -1, !dbg !40
  %87 = and i1 %69, %86, !dbg !41
  %88 = add i32 %76, -8192, !dbg !42
  %89 = add i32 %88, %22, !dbg !43
  %90 = add i32 %88, %23, !dbg !43
  %91 = sext i32 %89 to i64, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !44
  %93 = sext i32 %90 to i64, !dbg !44
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !44
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !45
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !45
  %97 = add i32 %76, -7936, !dbg !46
  %98 = add nsw i32 %97, %22, !dbg !47
  %99 = add nsw i32 %97, %23, !dbg !47
  %100 = sext i32 %98 to i64, !dbg !48
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !48
  %102 = sext i32 %99 to i64, !dbg !48
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !48
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !49
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !49
  %106 = icmp sgt i32 %68, -1, !dbg !50
  %107 = and i1 %106, %71, !dbg !51
  %108 = add i32 %76, -256, !dbg !52
  %109 = add nsw i32 %108, %22, !dbg !53
  %110 = add nsw i32 %108, %23, !dbg !53
  %111 = sext i32 %109 to i64, !dbg !54
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !54
  %113 = sext i32 %110 to i64, !dbg !54
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !54
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !55
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !55
  %117 = or i32 %68, %70, !dbg !29
  %118 = icmp sgt i32 %117, -1, !dbg !29
  %119 = add i32 %76, %22, !dbg !56
  %120 = add i32 %76, %23, !dbg !56
  %121 = sext i32 %119 to i64, !dbg !57
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !57
  %123 = sext i32 %120 to i64, !dbg !57
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !57
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !58
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !58
  %127 = or disjoint i32 %76, 256, !dbg !59
  %128 = add nsw i32 %127, %22, !dbg !60
  %129 = add nsw i32 %127, %23, !dbg !60
  %130 = sext i32 %128 to i64, !dbg !61
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !61
  %132 = sext i32 %129 to i64, !dbg !61
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !61
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !62
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !62
  %136 = add i32 %76, 7936, !dbg !63
  %137 = add nsw i32 %136, %22, !dbg !64
  %138 = add nsw i32 %136, %23, !dbg !64
  %139 = sext i32 %137 to i64, !dbg !65
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !65
  %141 = sext i32 %138 to i64, !dbg !65
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !65
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !66
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !66
  %145 = add i32 %76, 8192, !dbg !67
  %146 = add i32 %145, %22, !dbg !68
  %147 = add i32 %145, %23, !dbg !68
  %148 = sext i32 %146 to i64, !dbg !69
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !69
  %150 = sext i32 %147 to i64, !dbg !69
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !69
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !70
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !70
  %154 = add i32 %76, 8448, !dbg !71
  %155 = add nsw i32 %154, %22, !dbg !72
  %156 = add nsw i32 %154, %23, !dbg !72
  %157 = sext i32 %155 to i64, !dbg !73
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !73
  %159 = sext i32 %156 to i64, !dbg !73
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !73
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !74
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !74
  %163 = fadd float %47, 0x3EE4F8B580000000, !dbg !75
  %164 = fadd float %48, 0x3EE4F8B580000000, !dbg !75
  %165 = fadd float %49, 0x3EE4F8B580000000, !dbg !75
  %166 = fadd float %50, 0x3EE4F8B580000000, !dbg !75
  %167 = fadd float %56, 0x3EE4F8B580000000, !dbg !75
  %168 = fadd float %57, 0x3EE4F8B580000000, !dbg !75
  %169 = fadd float %58, 0x3EE4F8B580000000, !dbg !75
  %170 = fadd float %59, 0x3EE4F8B580000000, !dbg !75
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i = icmp eq i32 %171, 0, !dbg !76
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i = icmp eq i32 %172, 0, !dbg !76
  br i1 %.not.i, label %178, label %173, !dbg !76

173:                                              ; preds = %10
  br i1 %.not1.i, label %176, label %174, !dbg !76

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

178:                                              ; preds = %10
  br i1 %.not1.i, label %181, label %179, !dbg !76

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

__nv_sqrtf.exit:                                  ; preds = %174, %176, %179, %181
  %.0.i = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !76
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i30 = icmp eq i32 %183, 0, !dbg !76
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i33 = icmp eq i32 %184, 0, !dbg !76
  br i1 %.not.i30, label %190, label %185, !dbg !76

185:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %188, label %186, !dbg !76

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

190:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %193, label %191, !dbg !76

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

__nv_sqrtf.exit34:                                ; preds = %186, %188, %191, %193
  %.0.i32 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !76
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i35 = icmp eq i32 %195, 0, !dbg !76
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i38 = icmp eq i32 %196, 0, !dbg !76
  br i1 %.not.i35, label %202, label %197, !dbg !76

197:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %200, label %198, !dbg !76

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

202:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %205, label %203, !dbg !76

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

__nv_sqrtf.exit39:                                ; preds = %198, %200, %203, %205
  %.0.i37 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !76
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i40 = icmp eq i32 %207, 0, !dbg !76
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i43 = icmp eq i32 %208, 0, !dbg !76
  br i1 %.not.i40, label %214, label %209, !dbg !76

209:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %212, label %210, !dbg !76

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

214:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %217, label %215, !dbg !76

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

__nv_sqrtf.exit44:                                ; preds = %210, %212, %215, %217
  %.0.i42 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !76
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i45 = icmp eq i32 %219, 0, !dbg !76
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i48 = icmp eq i32 %220, 0, !dbg !76
  br i1 %.not.i45, label %226, label %221, !dbg !76

221:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %224, label %222, !dbg !76

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

226:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %229, label %227, !dbg !76

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

__nv_sqrtf.exit49:                                ; preds = %222, %224, %227, %229
  %.0.i47 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !76
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i50 = icmp eq i32 %231, 0, !dbg !76
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i53 = icmp eq i32 %232, 0, !dbg !76
  br i1 %.not.i50, label %238, label %233, !dbg !76

233:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %236, label %234, !dbg !76

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

238:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %241, label %239, !dbg !76

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

__nv_sqrtf.exit54:                                ; preds = %234, %236, %239, %241
  %.0.i52 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !76
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i55 = icmp eq i32 %243, 0, !dbg !76
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i58 = icmp eq i32 %244, 0, !dbg !76
  br i1 %.not.i55, label %250, label %245, !dbg !76

245:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %248, label %246, !dbg !76

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

250:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %253, label %251, !dbg !76

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

__nv_sqrtf.exit59:                                ; preds = %246, %248, %251, %253
  %.0.i57 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !76
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i60 = icmp eq i32 %255, 0, !dbg !76
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i63 = icmp eq i32 %256, 0, !dbg !76
  br i1 %.not.i60, label %262, label %257, !dbg !76

257:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %260, label %258, !dbg !76

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

262:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %265, label %263, !dbg !76

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

__nv_sqrtf.exit64:                                ; preds = %258, %260, %263, %265
  %.0.i62 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !76
  %267 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %268 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %269 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %270 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %271 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %272 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %273 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %274 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %275 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %276 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %277 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %278 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %279 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %280 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %281 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %282 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %283 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %284 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %285 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %286 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %287 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %288 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %289 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %290 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %291 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !45
  %292 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !39
  %293 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !49
  %294 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !55
  %295 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !58
  %296 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !62
  %297 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !66
  %298 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !70
  %299 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !74
  %300 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !45
  %301 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !39
  %302 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !49
  %303 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !55
  %304 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !58
  %305 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !62
  %306 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !66
  %307 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !70
  %308 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !74
  %309 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !45
  %310 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !39
  %311 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !49
  %312 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !55
  %313 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !58
  %314 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !62
  %315 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !66
  %316 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !70
  %317 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !74
  %318 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !45
  %319 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !39
  %320 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !49
  %321 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !55
  %322 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !58
  %323 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !62
  %324 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !66
  %325 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !70
  %326 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !74
  %327 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !45
  %328 = insertelement <4 x i32> %327, i32 %309, i64 1, !dbg !45
  %329 = insertelement <4 x i32> %328, i32 %300, i64 2, !dbg !45
  %330 = insertelement <4 x i32> %329, i32 %291, i64 3, !dbg !45
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !45
  %332 = insertelement <4 x i32> poison, i32 %319, i64 0, !dbg !39
  %333 = insertelement <4 x i32> %332, i32 %310, i64 1, !dbg !39
  %334 = insertelement <4 x i32> %333, i32 %301, i64 2, !dbg !39
  %335 = insertelement <4 x i32> %334, i32 %292, i64 3, !dbg !39
  %336 = bitcast <4 x i32> %335 to <4 x float>, !dbg !39
  %337 = fcmp ogt <4 x float> %331, %336, !dbg !77
  %338 = insertelement <4 x i32> poison, i32 %321, i64 0, !dbg !55
  %339 = insertelement <4 x i32> %338, i32 %312, i64 1, !dbg !55
  %340 = insertelement <4 x i32> %339, i32 %303, i64 2, !dbg !55
  %341 = insertelement <4 x i32> %340, i32 %294, i64 3, !dbg !55
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !55
  %343 = fcmp uno <4 x float> %331, zeroinitializer, !dbg !81
  %344 = or <4 x i1> %337, %343, !dbg !82
  %.v = select <4 x i1> %344, <4 x i32> %330, <4 x i32> %335, !dbg !83
  %345 = bitcast <4 x i32> %.v to <4 x float>, !dbg !83
  %346 = insertelement <4 x i32> poison, i32 %320, i64 0, !dbg !49
  %347 = insertelement <4 x i32> %346, i32 %311, i64 1, !dbg !49
  %348 = insertelement <4 x i32> %347, i32 %302, i64 2, !dbg !49
  %349 = insertelement <4 x i32> %348, i32 %293, i64 3, !dbg !49
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !49
  %351 = fcmp olt <4 x float> %345, %350, !dbg !84
  %352 = fcmp uno <4 x float> %350, zeroinitializer, !dbg !86
  %353 = or <4 x i1> %352, %351, !dbg !87
  %.v65 = select <4 x i1> %353, <4 x i32> %349, <4 x i32> %.v, !dbg !88
  %354 = bitcast <4 x i32> %.v65 to <4 x float>, !dbg !88
  %355 = fcmp olt <4 x float> %354, %342, !dbg !89
  %356 = insertelement <4 x i32> poison, i32 %322, i64 0, !dbg !58
  %357 = insertelement <4 x i32> %356, i32 %313, i64 1, !dbg !58
  %358 = insertelement <4 x i32> %357, i32 %304, i64 2, !dbg !58
  %359 = insertelement <4 x i32> %358, i32 %295, i64 3, !dbg !58
  %360 = bitcast <4 x i32> %359 to <4 x float>, !dbg !58
  %361 = fcmp uno <4 x float> %342, zeroinitializer, !dbg !91
  %362 = or <4 x i1> %361, %355, !dbg !92
  %.v66 = select <4 x i1> %362, <4 x i32> %341, <4 x i32> %.v65, !dbg !93
  %363 = bitcast <4 x i32> %.v66 to <4 x float>, !dbg !93
  %364 = fcmp olt <4 x float> %363, %360, !dbg !94
  %365 = fcmp uno <4 x float> %360, zeroinitializer, !dbg !96
  %366 = or <4 x i1> %365, %364, !dbg !97
  %.v67 = select <4 x i1> %366, <4 x i32> %359, <4 x i32> %.v66, !dbg !98
  %367 = bitcast <4 x i32> %.v67 to <4 x float>, !dbg !98
  %368 = insertelement <4 x i32> poison, i32 %323, i64 0, !dbg !62
  %369 = insertelement <4 x i32> %368, i32 %314, i64 1, !dbg !62
  %370 = insertelement <4 x i32> %369, i32 %305, i64 2, !dbg !62
  %371 = insertelement <4 x i32> %370, i32 %296, i64 3, !dbg !62
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !62
  %373 = fcmp olt <4 x float> %367, %372, !dbg !99
  %374 = fcmp uno <4 x float> %372, zeroinitializer, !dbg !101
  %375 = or <4 x i1> %374, %373, !dbg !102
  %.v68 = select <4 x i1> %375, <4 x i32> %371, <4 x i32> %.v67, !dbg !103
  %376 = bitcast <4 x i32> %.v68 to <4 x float>, !dbg !103
  %377 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !66
  %378 = insertelement <4 x i32> %377, i32 %315, i64 1, !dbg !66
  %379 = insertelement <4 x i32> %378, i32 %306, i64 2, !dbg !66
  %380 = insertelement <4 x i32> %379, i32 %297, i64 3, !dbg !66
  %381 = bitcast <4 x i32> %380 to <4 x float>, !dbg !66
  %382 = fcmp olt <4 x float> %376, %381, !dbg !104
  %383 = fcmp uno <4 x float> %381, zeroinitializer, !dbg !106
  %384 = or <4 x i1> %383, %382, !dbg !107
  %.v69 = select <4 x i1> %384, <4 x i32> %380, <4 x i32> %.v68, !dbg !108
  %385 = bitcast <4 x i32> %.v69 to <4 x float>, !dbg !108
  %386 = insertelement <4 x i32> poison, i32 %325, i64 0, !dbg !70
  %387 = insertelement <4 x i32> %386, i32 %316, i64 1, !dbg !70
  %388 = insertelement <4 x i32> %387, i32 %307, i64 2, !dbg !70
  %389 = insertelement <4 x i32> %388, i32 %298, i64 3, !dbg !70
  %390 = bitcast <4 x i32> %389 to <4 x float>, !dbg !70
  %391 = fcmp olt <4 x float> %385, %390, !dbg !109
  %392 = fcmp uno <4 x float> %390, zeroinitializer, !dbg !111
  %393 = or <4 x i1> %392, %391, !dbg !112
  %.v70 = select <4 x i1> %393, <4 x i32> %389, <4 x i32> %.v69, !dbg !113
  %394 = bitcast <4 x i32> %.v70 to <4 x float>, !dbg !113
  %395 = insertelement <4 x i32> poison, i32 %326, i64 0, !dbg !74
  %396 = insertelement <4 x i32> %395, i32 %317, i64 1, !dbg !74
  %397 = insertelement <4 x i32> %396, i32 %308, i64 2, !dbg !74
  %398 = insertelement <4 x i32> %397, i32 %299, i64 3, !dbg !74
  %399 = bitcast <4 x i32> %398 to <4 x float>, !dbg !74
  %400 = fcmp olt <4 x float> %394, %399, !dbg !114
  %401 = zext <4 x i1> %337 to <4 x i8>, !dbg !116
  %402 = select <4 x i1> %351, <4 x i8> splat (i8 2), <4 x i8> %401, !dbg !117
  %403 = select <4 x i1> %355, <4 x i8> splat (i8 3), <4 x i8> %402, !dbg !118
  %404 = select <4 x i1> %364, <4 x i8> splat (i8 4), <4 x i8> %403, !dbg !119
  %405 = select <4 x i1> %373, <4 x i8> splat (i8 5), <4 x i8> %404, !dbg !120
  %406 = select <4 x i1> %382, <4 x i8> splat (i8 6), <4 x i8> %405, !dbg !121
  %407 = select <4 x i1> %391, <4 x i8> splat (i8 7), <4 x i8> %406, !dbg !122
  %408 = select <4 x i1> %400, <4 x i8> splat (i8 8), <4 x i8> %407, !dbg !123
  %409 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !45
  %410 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !39
  %411 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !49
  %412 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !55
  %413 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !58
  %414 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !62
  %415 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !66
  %416 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !70
  %417 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !74
  %418 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !45
  %419 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !39
  %420 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !49
  %421 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !55
  %422 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !58
  %423 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !62
  %424 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !66
  %425 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !70
  %426 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !74
  %427 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !45
  %428 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !39
  %429 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !49
  %430 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !55
  %431 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !58
  %432 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !62
  %433 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !66
  %434 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !70
  %435 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !74
  %436 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !45
  %437 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !39
  %438 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !49
  %439 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !55
  %440 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !58
  %441 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !62
  %442 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !66
  %443 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !70
  %444 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !74
  %445 = insertelement <4 x i32> poison, i32 %436, i64 0, !dbg !45
  %446 = insertelement <4 x i32> %445, i32 %427, i64 1, !dbg !45
  %447 = insertelement <4 x i32> %446, i32 %418, i64 2, !dbg !45
  %448 = insertelement <4 x i32> %447, i32 %409, i64 3, !dbg !45
  %449 = bitcast <4 x i32> %448 to <4 x float>, !dbg !45
  %450 = insertelement <4 x i32> poison, i32 %437, i64 0, !dbg !39
  %451 = insertelement <4 x i32> %450, i32 %428, i64 1, !dbg !39
  %452 = insertelement <4 x i32> %451, i32 %419, i64 2, !dbg !39
  %453 = insertelement <4 x i32> %452, i32 %410, i64 3, !dbg !39
  %454 = bitcast <4 x i32> %453 to <4 x float>, !dbg !39
  %455 = fcmp ogt <4 x float> %449, %454, !dbg !77
  %456 = insertelement <4 x i32> poison, i32 %439, i64 0, !dbg !55
  %457 = insertelement <4 x i32> %456, i32 %430, i64 1, !dbg !55
  %458 = insertelement <4 x i32> %457, i32 %421, i64 2, !dbg !55
  %459 = insertelement <4 x i32> %458, i32 %412, i64 3, !dbg !55
  %460 = bitcast <4 x i32> %459 to <4 x float>, !dbg !55
  %461 = fcmp uno <4 x float> %449, zeroinitializer, !dbg !81
  %462 = or <4 x i1> %455, %461, !dbg !82
  %.v71 = select <4 x i1> %462, <4 x i32> %448, <4 x i32> %453, !dbg !83
  %463 = bitcast <4 x i32> %.v71 to <4 x float>, !dbg !83
  %464 = insertelement <4 x i32> poison, i32 %438, i64 0, !dbg !49
  %465 = insertelement <4 x i32> %464, i32 %429, i64 1, !dbg !49
  %466 = insertelement <4 x i32> %465, i32 %420, i64 2, !dbg !49
  %467 = insertelement <4 x i32> %466, i32 %411, i64 3, !dbg !49
  %468 = bitcast <4 x i32> %467 to <4 x float>, !dbg !49
  %469 = fcmp olt <4 x float> %463, %468, !dbg !84
  %470 = fcmp uno <4 x float> %468, zeroinitializer, !dbg !86
  %471 = or <4 x i1> %470, %469, !dbg !87
  %.v72 = select <4 x i1> %471, <4 x i32> %467, <4 x i32> %.v71, !dbg !88
  %472 = bitcast <4 x i32> %.v72 to <4 x float>, !dbg !88
  %473 = fcmp olt <4 x float> %472, %460, !dbg !89
  %474 = insertelement <4 x i32> poison, i32 %440, i64 0, !dbg !58
  %475 = insertelement <4 x i32> %474, i32 %431, i64 1, !dbg !58
  %476 = insertelement <4 x i32> %475, i32 %422, i64 2, !dbg !58
  %477 = insertelement <4 x i32> %476, i32 %413, i64 3, !dbg !58
  %478 = bitcast <4 x i32> %477 to <4 x float>, !dbg !58
  %479 = fcmp uno <4 x float> %460, zeroinitializer, !dbg !91
  %480 = or <4 x i1> %479, %473, !dbg !92
  %.v73 = select <4 x i1> %480, <4 x i32> %459, <4 x i32> %.v72, !dbg !93
  %481 = bitcast <4 x i32> %.v73 to <4 x float>, !dbg !93
  %482 = fcmp olt <4 x float> %481, %478, !dbg !94
  %483 = fcmp uno <4 x float> %478, zeroinitializer, !dbg !96
  %484 = or <4 x i1> %483, %482, !dbg !97
  %.v74 = select <4 x i1> %484, <4 x i32> %477, <4 x i32> %.v73, !dbg !98
  %485 = bitcast <4 x i32> %.v74 to <4 x float>, !dbg !98
  %486 = insertelement <4 x i32> poison, i32 %441, i64 0, !dbg !62
  %487 = insertelement <4 x i32> %486, i32 %432, i64 1, !dbg !62
  %488 = insertelement <4 x i32> %487, i32 %423, i64 2, !dbg !62
  %489 = insertelement <4 x i32> %488, i32 %414, i64 3, !dbg !62
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !62
  %491 = fcmp olt <4 x float> %485, %490, !dbg !99
  %492 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !101
  %493 = or <4 x i1> %492, %491, !dbg !102
  %.v75 = select <4 x i1> %493, <4 x i32> %489, <4 x i32> %.v74, !dbg !103
  %494 = bitcast <4 x i32> %.v75 to <4 x float>, !dbg !103
  %495 = insertelement <4 x i32> poison, i32 %442, i64 0, !dbg !66
  %496 = insertelement <4 x i32> %495, i32 %433, i64 1, !dbg !66
  %497 = insertelement <4 x i32> %496, i32 %424, i64 2, !dbg !66
  %498 = insertelement <4 x i32> %497, i32 %415, i64 3, !dbg !66
  %499 = bitcast <4 x i32> %498 to <4 x float>, !dbg !66
  %500 = fcmp olt <4 x float> %494, %499, !dbg !104
  %501 = fcmp uno <4 x float> %499, zeroinitializer, !dbg !106
  %502 = or <4 x i1> %501, %500, !dbg !107
  %.v76 = select <4 x i1> %502, <4 x i32> %498, <4 x i32> %.v75, !dbg !108
  %503 = bitcast <4 x i32> %.v76 to <4 x float>, !dbg !108
  %504 = insertelement <4 x i32> poison, i32 %443, i64 0, !dbg !70
  %505 = insertelement <4 x i32> %504, i32 %434, i64 1, !dbg !70
  %506 = insertelement <4 x i32> %505, i32 %425, i64 2, !dbg !70
  %507 = insertelement <4 x i32> %506, i32 %416, i64 3, !dbg !70
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !70
  %509 = fcmp olt <4 x float> %503, %508, !dbg !109
  %510 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !111
  %511 = or <4 x i1> %510, %509, !dbg !112
  %.v77 = select <4 x i1> %511, <4 x i32> %507, <4 x i32> %.v76, !dbg !113
  %512 = bitcast <4 x i32> %.v77 to <4 x float>, !dbg !113
  %513 = insertelement <4 x i32> poison, i32 %444, i64 0, !dbg !74
  %514 = insertelement <4 x i32> %513, i32 %435, i64 1, !dbg !74
  %515 = insertelement <4 x i32> %514, i32 %426, i64 2, !dbg !74
  %516 = insertelement <4 x i32> %515, i32 %417, i64 3, !dbg !74
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !74
  %518 = fcmp olt <4 x float> %512, %517, !dbg !114
  %519 = zext <4 x i1> %455 to <4 x i8>, !dbg !116
  %520 = select <4 x i1> %469, <4 x i8> splat (i8 2), <4 x i8> %519, !dbg !117
  %521 = select <4 x i1> %473, <4 x i8> splat (i8 3), <4 x i8> %520, !dbg !118
  %522 = select <4 x i1> %482, <4 x i8> splat (i8 4), <4 x i8> %521, !dbg !119
  %523 = select <4 x i1> %491, <4 x i8> splat (i8 5), <4 x i8> %522, !dbg !120
  %524 = select <4 x i1> %500, <4 x i8> splat (i8 6), <4 x i8> %523, !dbg !121
  %525 = select <4 x i1> %509, <4 x i8> splat (i8 7), <4 x i8> %524, !dbg !122
  %526 = select <4 x i1> %518, <4 x i8> splat (i8 8), <4 x i8> %525, !dbg !123
  %527 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %528 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %529 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %530 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %531 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %532 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %533 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %534 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %535 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %536 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %537 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %538 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %539 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %540 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %541 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %542 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %543 = shl i32 %13, 2, !dbg !12
  %544 = and i32 %543, 508, !dbg !12
  %545 = or disjoint i32 %544, 512, !dbg !12
  %546 = or disjoint i32 %12, %545, !dbg !13
  %547 = sext i32 %546 to i64, !dbg !17
  %548 = getelementptr float, ptr addrspace(1) %0, i64 %547, !dbg !17
  %549 = or disjoint i32 %12, %544, !dbg !13
  %550 = sext i32 %549 to i64, !dbg !17
  %551 = getelementptr float, ptr addrspace(1) %0, i64 %550, !dbg !17
  %552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !124
  %553 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !124
  %554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !124
  %555 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !124
  %556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !124
  %557 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !124
  %558 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !124
  %559 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !124
  %560 = insertelement <8 x i32> poison, i32 %267, i64 0, !dbg !18
  %561 = insertelement <8 x i32> %560, i32 %270, i64 1, !dbg !18
  %562 = insertelement <8 x i32> %561, i32 %273, i64 2, !dbg !18
  %563 = insertelement <8 x i32> %562, i32 %276, i64 3, !dbg !18
  %564 = insertelement <8 x i32> %563, i32 %279, i64 4, !dbg !18
  %565 = insertelement <8 x i32> %564, i32 %282, i64 5, !dbg !18
  %566 = insertelement <8 x i32> %565, i32 %285, i64 6, !dbg !18
  %567 = insertelement <8 x i32> %566, i32 %288, i64 7, !dbg !18
  %568 = bitcast <8 x i32> %567 to <8 x float>, !dbg !18
  %569 = insertelement <8 x i32> poison, i32 %268, i64 0, !dbg !20
  %570 = insertelement <8 x i32> %569, i32 %271, i64 1, !dbg !20
  %571 = insertelement <8 x i32> %570, i32 %274, i64 2, !dbg !20
  %572 = insertelement <8 x i32> %571, i32 %277, i64 3, !dbg !20
  %573 = insertelement <8 x i32> %572, i32 %280, i64 4, !dbg !20
  %574 = insertelement <8 x i32> %573, i32 %283, i64 5, !dbg !20
  %575 = insertelement <8 x i32> %574, i32 %286, i64 6, !dbg !20
  %576 = insertelement <8 x i32> %575, i32 %289, i64 7, !dbg !20
  %577 = bitcast <8 x i32> %576 to <8 x float>, !dbg !20
  %578 = fadd <8 x float> %568, %577, !dbg !125
  %579 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !22
  %580 = insertelement <8 x i32> %579, i32 %272, i64 1, !dbg !22
  %581 = insertelement <8 x i32> %580, i32 %275, i64 2, !dbg !22
  %582 = insertelement <8 x i32> %581, i32 %278, i64 3, !dbg !22
  %583 = insertelement <8 x i32> %582, i32 %281, i64 4, !dbg !22
  %584 = insertelement <8 x i32> %583, i32 %284, i64 5, !dbg !22
  %585 = insertelement <8 x i32> %584, i32 %287, i64 6, !dbg !22
  %586 = insertelement <8 x i32> %585, i32 %290, i64 7, !dbg !22
  %587 = bitcast <8 x i32> %586 to <8 x float>, !dbg !22
  %588 = fsub <8 x float> %578, %587, !dbg !126
  %589 = shufflevector <4 x float> %399, <4 x float> %517, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !127
  %590 = fcmp uno <8 x float> %589, zeroinitializer, !dbg !127
  %591 = shufflevector <4 x i1> %400, <4 x i1> %518, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !128
  %592 = or <8 x i1> %590, %591, !dbg !128
  %593 = shufflevector <4 x float> %394, <4 x float> %512, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !129
  %594 = select <8 x i1> %592, <8 x float> %589, <8 x float> %593, !dbg !129
  %595 = insertelement <8 x i32> poison, i32 %527, i64 0, !dbg !28
  %596 = insertelement <8 x i32> %595, i32 %528, i64 1, !dbg !28
  %597 = insertelement <8 x i32> %596, i32 %529, i64 2, !dbg !28
  %598 = insertelement <8 x i32> %597, i32 %530, i64 3, !dbg !28
  %599 = insertelement <8 x i32> %598, i32 %531, i64 4, !dbg !28
  %600 = insertelement <8 x i32> %599, i32 %532, i64 5, !dbg !28
  %601 = insertelement <8 x i32> %600, i32 %533, i64 6, !dbg !28
  %602 = insertelement <8 x i32> %601, i32 %534, i64 7, !dbg !28
  %603 = bitcast <8 x i32> %602 to <8 x float>, !dbg !28
  %604 = insertelement <8 x i32> poison, i32 %535, i64 0, !dbg !26
  %605 = insertelement <8 x i32> %604, i32 %536, i64 1, !dbg !26
  %606 = insertelement <8 x i32> %605, i32 %537, i64 2, !dbg !26
  %607 = insertelement <8 x i32> %606, i32 %538, i64 3, !dbg !26
  %608 = insertelement <8 x i32> %607, i32 %539, i64 4, !dbg !26
  %609 = insertelement <8 x i32> %608, i32 %540, i64 5, !dbg !26
  %610 = insertelement <8 x i32> %609, i32 %541, i64 6, !dbg !26
  %611 = insertelement <8 x i32> %610, i32 %542, i64 7, !dbg !26
  %612 = bitcast <8 x i32> %611 to <8 x float>, !dbg !26
  %613 = insertelement <8 x float> poison, float %559, i64 0, !dbg !130
  %614 = insertelement <8 x float> %613, float %558, i64 1, !dbg !130
  %615 = insertelement <8 x float> %614, float %557, i64 2, !dbg !130
  %616 = insertelement <8 x float> %615, float %556, i64 3, !dbg !130
  %617 = insertelement <8 x float> %616, float %555, i64 4, !dbg !130
  %618 = insertelement <8 x float> %617, float %554, i64 5, !dbg !130
  %619 = insertelement <8 x float> %618, float %553, i64 6, !dbg !130
  %620 = insertelement <8 x float> %619, float %552, i64 7, !dbg !130
  %621 = fmul <8 x float> %588, %620, !dbg !130
  %622 = fmul <8 x float> %621, %612, !dbg !131
  %623 = fadd <8 x float> %622, %603, !dbg !132
  %624 = fadd <8 x float> %594, %623, !dbg !133
  %625 = fcmp olt <8 x float> %624, zeroinitializer, !dbg !134
  %626 = extractelement <8 x i1> %625, i64 7, !dbg !136
  %627 = extractelement <8 x i1> %625, i64 6, !dbg !136
  %628 = extractelement <8 x i1> %625, i64 5, !dbg !136
  %629 = extractelement <8 x i1> %625, i64 4, !dbg !136
  %630 = extractelement <8 x i1> %625, i64 3, !dbg !136
  %631 = extractelement <8 x i1> %625, i64 2, !dbg !136
  %632 = extractelement <8 x i1> %625, i64 1, !dbg !136
  %633 = extractelement <8 x i1> %625, i64 0, !dbg !136
  %634 = getelementptr i8, ptr addrspace(1) %8, i64 %24, !dbg !137
  %635 = bitcast <4 x i8> %526 to i32, !dbg !138
  %636 = bitcast <4 x i8> %408 to i32, !dbg !138
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %635, i32 %636, ptr addrspace(1) %634, i1 true) #4, !dbg !138
  %637 = zext nneg i32 %15 to i64, !dbg !139
  %638 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %637, !dbg !139
  %bc = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %639 = extractelement <8 x i32> %bc, i64 7, !dbg !139
  %bc78 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %640 = extractelement <8 x i32> %bc78, i64 6, !dbg !139
  %bc79 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %641 = extractelement <8 x i32> %bc79, i64 5, !dbg !139
  %bc80 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %642 = extractelement <8 x i32> %bc80, i64 4, !dbg !139
  %bc81 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %643 = extractelement <8 x i32> %bc81, i64 3, !dbg !139
  %bc82 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %644 = extractelement <8 x i32> %bc82, i64 2, !dbg !139
  %bc83 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %645 = extractelement <8 x i32> %bc83, i64 1, !dbg !139
  %bc84 = bitcast <8 x float> %578 to <8 x i32>, !dbg !139
  %646 = extractelement <8 x i32> %bc84, i64 0, !dbg !139
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %638, i32 %639, i32 %640, i32 %641, i32 %642, i1 true) #4, !dbg !139
  %647 = getelementptr inbounds i8, ptr addrspace(3) %638, i64 16, !dbg !139
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %647, i32 %643, i32 %644, i32 %645, i32 %646, i1 true) #4, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %648 = zext nneg i32 %544 to i64, !dbg !139
  %649 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %648, !dbg !139
  %650 = zext nneg i32 %545 to i64, !dbg !139
  %651 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %650, !dbg !139
  %652 = load <4 x i32>, ptr addrspace(3) %651, align 16, !dbg !139
  %.extract = load i32, ptr addrspace(3) %649, align 16, !dbg !139
  %653 = getelementptr inbounds i8, ptr addrspace(3) %649, i64 4, !dbg !139
  %.extract8 = load i32, ptr addrspace(3) %653, align 4, !dbg !139
  %654 = getelementptr inbounds i8, ptr addrspace(3) %649, i64 8, !dbg !139
  %.extract9 = load i32, ptr addrspace(3) %654, align 8, !dbg !139
  %655 = getelementptr inbounds i8, ptr addrspace(3) %649, i64 12, !dbg !139
  %.extract10 = load i32, ptr addrspace(3) %655, align 4, !dbg !139
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %551, i1 true) #4, !dbg !139
  %.extract11 = extractelement <4 x i32> %652, i64 0, !dbg !139
  %.extract12 = extractelement <4 x i32> %652, i64 1, !dbg !139
  %.extract13 = extractelement <4 x i32> %652, i64 2, !dbg !139
  %.extract14 = extractelement <4 x i32> %652, i64 3, !dbg !139
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %548, i1 true) #4, !dbg !139
  %656 = getelementptr float, ptr addrspace(1) %1, i64 %550, !dbg !140
  %657 = getelementptr float, ptr addrspace(1) %1, i64 %547, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %bc85 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %658 = extractelement <8 x i32> %bc85, i64 7, !dbg !141
  %659 = select i1 %626, i32 0, i32 %658, !dbg !136
  %bc86 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %660 = extractelement <8 x i32> %bc86, i64 6, !dbg !141
  %661 = select i1 %627, i32 0, i32 %660, !dbg !136
  %bc87 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %662 = extractelement <8 x i32> %bc87, i64 5, !dbg !141
  %663 = select i1 %628, i32 0, i32 %662, !dbg !136
  %bc88 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %664 = extractelement <8 x i32> %bc88, i64 4, !dbg !141
  %665 = select i1 %629, i32 0, i32 %664, !dbg !136
  %bc89 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %666 = extractelement <8 x i32> %bc89, i64 3, !dbg !141
  %667 = select i1 %630, i32 0, i32 %666, !dbg !136
  %bc90 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %668 = extractelement <8 x i32> %bc90, i64 2, !dbg !141
  %669 = select i1 %631, i32 0, i32 %668, !dbg !136
  %bc91 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %670 = extractelement <8 x i32> %bc91, i64 1, !dbg !141
  %671 = select i1 %632, i32 0, i32 %670, !dbg !136
  %bc92 = bitcast <8 x float> %624 to <8 x i32>, !dbg !141
  %672 = extractelement <8 x i32> %bc92, i64 0, !dbg !141
  %673 = select i1 %633, i32 0, i32 %672, !dbg !136
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %638, i32 %659, i32 %661, i32 %663, i32 %665, i1 true) #4, !dbg !141
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %647, i32 %667, i32 %669, i32 %671, i32 %673, i1 true) #4, !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %674 = load <4 x i32>, ptr addrspace(3) %651, align 16, !dbg !141
  %.extract22 = load i32, ptr addrspace(3) %649, align 16, !dbg !141
  %.extract23 = load i32, ptr addrspace(3) %653, align 4, !dbg !141
  %.extract24 = load i32, ptr addrspace(3) %654, align 8, !dbg !141
  %.extract25 = load i32, ptr addrspace(3) %655, align 4, !dbg !141
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %656, i1 true) #4, !dbg !141
  %.extract26 = extractelement <4 x i32> %674, i64 0, !dbg !141
  %.extract27 = extractelement <4 x i32> %674, i64 1, !dbg !141
  %.extract28 = extractelement <4 x i32> %674, i64 2, !dbg !141
  %.extract29 = extractelement <4 x i32> %674, i64 3, !dbg !141
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %657, i1 true) #4, !dbg !141
  ret void, !dbg !142
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc6jfmohvzmvp75pzwq3gnumx3ve6frcqxehktapq7wrezt6halg.py", directory: "inductor_cache/c6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 68, column: 20, scope: !7)
!30 = !DILocation(line: 37, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 50, scope: !7)
!34 = !DILocation(line: 46, column: 61, scope: !7)
!35 = !DILocation(line: 46, column: 41, scope: !7)
!36 = !DILocation(line: 46, column: 46, scope: !7)
!37 = !DILocation(line: 46, column: 55, scope: !7)
!38 = !DILocation(line: 46, column: 31, scope: !7)
!39 = !DILocation(line: 46, column: 66, scope: !7)
!40 = !DILocation(line: 48, column: 21, scope: !7)
!41 = !DILocation(line: 51, column: 19, scope: !7)
!42 = !DILocation(line: 52, column: 46, scope: !7)
!43 = !DILocation(line: 52, column: 55, scope: !7)
!44 = !DILocation(line: 52, column: 31, scope: !7)
!45 = !DILocation(line: 52, column: 66, scope: !7)
!46 = !DILocation(line: 59, column: 46, scope: !7)
!47 = !DILocation(line: 59, column: 55, scope: !7)
!48 = !DILocation(line: 59, column: 31, scope: !7)
!49 = !DILocation(line: 59, column: 66, scope: !7)
!50 = !DILocation(line: 62, column: 21, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 45, scope: !7)
!53 = !DILocation(line: 66, column: 54, scope: !7)
!54 = !DILocation(line: 66, column: 31, scope: !7)
!55 = !DILocation(line: 66, column: 65, scope: !7)
!56 = !DILocation(line: 69, column: 45, scope: !7)
!57 = !DILocation(line: 69, column: 31, scope: !7)
!58 = !DILocation(line: 69, column: 56, scope: !7)
!59 = !DILocation(line: 72, column: 42, scope: !7)
!60 = !DILocation(line: 72, column: 51, scope: !7)
!61 = !DILocation(line: 72, column: 31, scope: !7)
!62 = !DILocation(line: 72, column: 62, scope: !7)
!63 = !DILocation(line: 79, column: 43, scope: !7)
!64 = !DILocation(line: 79, column: 52, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 63, scope: !7)
!67 = !DILocation(line: 82, column: 43, scope: !7)
!68 = !DILocation(line: 82, column: 52, scope: !7)
!69 = !DILocation(line: 82, column: 31, scope: !7)
!70 = !DILocation(line: 82, column: 63, scope: !7)
!71 = !DILocation(line: 85, column: 43, scope: !7)
!72 = !DILocation(line: 85, column: 52, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 63, scope: !7)
!75 = !DILocation(line: 115, column: 20, scope: !7)
!76 = !DILocation(line: 116, column: 27, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 53, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !85)
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !95)
!95 = !DILocation(line: 70, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 73, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 83, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 86, column: 42, scope: !7)
!116 = !DILocation(line: 90, column: 35, scope: !7)
!117 = !DILocation(line: 93, column: 35, scope: !7)
!118 = !DILocation(line: 96, column: 35, scope: !7)
!119 = !DILocation(line: 99, column: 35, scope: !7)
!120 = !DILocation(line: 102, column: 35, scope: !7)
!121 = !DILocation(line: 105, column: 35, scope: !7)
!122 = !DILocation(line: 108, column: 35, scope: !7)
!123 = !DILocation(line: 111, column: 35, scope: !7)
!124 = !DILocation(line: 118, column: 20, scope: !7)
!125 = !DILocation(line: 112, column: 20, scope: !7)
!126 = !DILocation(line: 113, column: 20, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!128 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!129 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!130 = !DILocation(line: 121, column: 20, scope: !7)
!131 = !DILocation(line: 122, column: 20, scope: !7)
!132 = !DILocation(line: 123, column: 20, scope: !7)
!133 = !DILocation(line: 124, column: 20, scope: !7)
!134 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !135)
!135 = !DILocation(line: 126, column: 42, scope: !7)
!136 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !135)
!137 = !DILocation(line: 127, column: 25, scope: !7)
!138 = !DILocation(line: 127, column: 37, scope: !7)
!139 = !DILocation(line: 128, column: 40, scope: !7)
!140 = !DILocation(line: 129, column: 28, scope: !7)
!141 = !DILocation(line: 129, column: 40, scope: !7)
!142 = !DILocation(line: 129, column: 4, scope: !7)
