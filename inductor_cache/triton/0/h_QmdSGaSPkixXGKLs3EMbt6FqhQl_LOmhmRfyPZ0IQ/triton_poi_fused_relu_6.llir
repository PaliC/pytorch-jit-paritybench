; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 256, !dbg !14
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %15 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = sext i32 %16 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %38 = bitcast i32 %37 to float, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %40 = bitcast i32 %39 to float, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %42 = bitcast i32 %41 to float, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %44 = bitcast i32 %43 to float, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %46 = bitcast i32 %45 to float, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %48 = bitcast i32 %47 to float, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %52 = bitcast i32 %51 to float, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !24
  %73 = fadd float %38, 0x3EE4F8B580000000, !dbg !25
  %74 = fadd float %40, 0x3EE4F8B580000000, !dbg !25
  %75 = fadd float %42, 0x3EE4F8B580000000, !dbg !25
  %76 = fadd float %44, 0x3EE4F8B580000000, !dbg !25
  %77 = fadd float %46, 0x3EE4F8B580000000, !dbg !25
  %78 = fadd float %48, 0x3EE4F8B580000000, !dbg !25
  %79 = fadd float %50, 0x3EE4F8B580000000, !dbg !25
  %80 = fadd float %52, 0x3EE4F8B580000000, !dbg !25
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %81, 0, !dbg !26
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %82, 0, !dbg !26
  br i1 %.not.i, label %88, label %83, !dbg !26

83:                                               ; preds = %7
  br i1 %.not1.i, label %86, label %84, !dbg !26

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

88:                                               ; preds = %7
  br i1 %.not1.i, label %91, label %89, !dbg !26

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !26
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %93, 0, !dbg !26
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !26
  br i1 %.not.i1, label %100, label %95, !dbg !26

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !26

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !26

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !26
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %105, 0, !dbg !26
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %106, 0, !dbg !26
  br i1 %.not.i6, label %112, label %107, !dbg !26

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !26

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !26

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %108, %110, %113, %115
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !26
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %117, 0, !dbg !26
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %118, 0, !dbg !26
  br i1 %.not.i11, label %124, label %119, !dbg !26

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !26

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

124:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %127, label %125, !dbg !26

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %120, %122, %125, %127
  %.0.i13 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !26
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %129, 0, !dbg !26
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %130, 0, !dbg !26
  br i1 %.not.i16, label %136, label %131, !dbg !26

131:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %134, label %132, !dbg !26

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

136:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %139, label %137, !dbg !26

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %132, %134, %137, %139
  %.0.i18 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !26
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %141, 0, !dbg !26
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %142, 0, !dbg !26
  br i1 %.not.i21, label %148, label %143, !dbg !26

143:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %146, label %144, !dbg !26

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

148:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %151, label %149, !dbg !26

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %144, %146, %149, %151
  %.0.i23 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !26
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %153, 0, !dbg !26
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %154, 0, !dbg !26
  br i1 %.not.i26, label %160, label %155, !dbg !26

155:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %158, label %156, !dbg !26

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

160:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %163, label %161, !dbg !26

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %156, %158, %161, %163
  %.0.i28 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !26
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %165, 0, !dbg !26
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %166, 0, !dbg !26
  br i1 %.not.i31, label %172, label %167, !dbg !26

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !26

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

172:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %175, label %173, !dbg !26

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %168, %170, %173, %175
  %.0.i33 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !26
  %177 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %178 = insertelement <8 x i32> poison, i32 %34, i64 0, !dbg !18
  %179 = insertelement <8 x i32> %178, i32 %33, i64 1, !dbg !18
  %180 = insertelement <8 x i32> %179, i32 %32, i64 2, !dbg !18
  %181 = insertelement <8 x i32> %180, i32 %31, i64 3, !dbg !18
  %182 = insertelement <8 x i32> %181, i32 %30, i64 4, !dbg !18
  %183 = insertelement <8 x i32> %182, i32 %29, i64 5, !dbg !18
  %184 = insertelement <8 x i32> %183, i32 %28, i64 6, !dbg !18
  %185 = insertelement <8 x i32> %184, i32 %27, i64 7, !dbg !18
  %186 = bitcast <8 x i32> %185 to <8 x float>, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %190 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %191 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %192 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %194 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !24
  %195 = insertelement <8 x i32> %194, i32 %71, i64 1, !dbg !24
  %196 = insertelement <8 x i32> %195, i32 %70, i64 2, !dbg !24
  %197 = insertelement <8 x i32> %196, i32 %69, i64 3, !dbg !24
  %198 = insertelement <8 x i32> %197, i32 %68, i64 4, !dbg !24
  %199 = insertelement <8 x i32> %198, i32 %67, i64 5, !dbg !24
  %200 = insertelement <8 x i32> %199, i32 %66, i64 6, !dbg !24
  %201 = insertelement <8 x i32> %200, i32 %65, i64 7, !dbg !24
  %202 = bitcast <8 x i32> %201 to <8 x float>, !dbg !24
  %203 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !22
  %204 = insertelement <8 x i32> %203, i32 %61, i64 1, !dbg !22
  %205 = insertelement <8 x i32> %204, i32 %60, i64 2, !dbg !22
  %206 = insertelement <8 x i32> %205, i32 %59, i64 3, !dbg !22
  %207 = insertelement <8 x i32> %206, i32 %58, i64 4, !dbg !22
  %208 = insertelement <8 x i32> %207, i32 %57, i64 5, !dbg !22
  %209 = insertelement <8 x i32> %208, i32 %56, i64 6, !dbg !22
  %210 = insertelement <8 x i32> %209, i32 %55, i64 7, !dbg !22
  %211 = bitcast <8 x i32> %210 to <8 x float>, !dbg !22
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !27
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !27
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !27
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !27
  %220 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !16
  %221 = insertelement <8 x i32> %220, i32 %187, i64 1, !dbg !16
  %222 = insertelement <8 x i32> %221, i32 %188, i64 2, !dbg !16
  %223 = insertelement <8 x i32> %222, i32 %189, i64 3, !dbg !16
  %224 = insertelement <8 x i32> %223, i32 %190, i64 4, !dbg !16
  %225 = insertelement <8 x i32> %224, i32 %191, i64 5, !dbg !16
  %226 = insertelement <8 x i32> %225, i32 %192, i64 6, !dbg !16
  %227 = insertelement <8 x i32> %226, i32 %193, i64 7, !dbg !16
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !16
  %229 = fsub <8 x float> %228, %186, !dbg !28
  %230 = insertelement <8 x float> poison, float %219, i64 0, !dbg !29
  %231 = insertelement <8 x float> %230, float %218, i64 1, !dbg !29
  %232 = insertelement <8 x float> %231, float %217, i64 2, !dbg !29
  %233 = insertelement <8 x float> %232, float %216, i64 3, !dbg !29
  %234 = insertelement <8 x float> %233, float %215, i64 4, !dbg !29
  %235 = insertelement <8 x float> %234, float %214, i64 5, !dbg !29
  %236 = insertelement <8 x float> %235, float %213, i64 6, !dbg !29
  %237 = insertelement <8 x float> %236, float %212, i64 7, !dbg !29
  %238 = fmul <8 x float> %229, %237, !dbg !29
  %239 = fmul <8 x float> %238, %211, !dbg !30
  %240 = fadd <8 x float> %239, %202, !dbg !31
  %241 = fcmp olt <8 x float> %240, zeroinitializer, !dbg !32
  %242 = extractelement <8 x i1> %241, i64 7, !dbg !36
  %243 = extractelement <8 x i1> %241, i64 6, !dbg !36
  %244 = extractelement <8 x i1> %241, i64 5, !dbg !36
  %245 = extractelement <8 x i1> %241, i64 4, !dbg !36
  %246 = extractelement <8 x i1> %241, i64 3, !dbg !36
  %247 = extractelement <8 x i1> %241, i64 2, !dbg !36
  %248 = extractelement <8 x i1> %241, i64 1, !dbg !36
  %249 = extractelement <8 x i1> %241, i64 0, !dbg !36
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !37
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !37
  %bc = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %252 = extractelement <8 x i32> %bc, i64 7, !dbg !38
  %253 = select i1 %242, i32 0, i32 %252, !dbg !36
  %bc36 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %254 = extractelement <8 x i32> %bc36, i64 6, !dbg !38
  %255 = select i1 %243, i32 0, i32 %254, !dbg !36
  %bc37 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %256 = extractelement <8 x i32> %bc37, i64 5, !dbg !38
  %257 = select i1 %244, i32 0, i32 %256, !dbg !36
  %bc38 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %258 = extractelement <8 x i32> %bc38, i64 4, !dbg !38
  %259 = select i1 %245, i32 0, i32 %258, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %255, i32 %257, i32 %259, ptr addrspace(1) %250, i1 true) #3, !dbg !38
  %bc39 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %260 = extractelement <8 x i32> %bc39, i64 3, !dbg !38
  %261 = select i1 %246, i32 0, i32 %260, !dbg !36
  %bc40 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %262 = extractelement <8 x i32> %bc40, i64 2, !dbg !38
  %263 = select i1 %247, i32 0, i32 %262, !dbg !36
  %bc41 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %264 = extractelement <8 x i32> %bc41, i64 1, !dbg !38
  %265 = select i1 %248, i32 0, i32 %264, !dbg !36
  %bc42 = bitcast <8 x float> %240 to <8 x i32>, !dbg !38
  %266 = extractelement <8 x i32> %bc42, i64 0, !dbg !38
  %267 = select i1 %249, i32 0, i32 %266, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %263, i32 %265, i32 %267, ptr addrspace(1) %251, i1 true) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv25jt6lonpgjempf3gvl4xlzf4sz2m4kcvfvysfoplp7vlthkb7.py", directory: "inductor_cache/v2")
!4 = !{ptr @triton_poi_fused_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_6", linkageName: "triton_poi_fused_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 43, column: 42, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 37, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
