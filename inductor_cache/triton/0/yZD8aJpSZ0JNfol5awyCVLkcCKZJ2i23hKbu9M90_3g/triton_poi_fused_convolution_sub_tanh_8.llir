; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_convolution_sub_tanh_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 16, !dbg !12
  %13 = lshr exact i32 %12, 1, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = and i32 %9, 1, !dbg !12
  %16 = and i32 %9, 15, !dbg !12
  %17 = or disjoint i32 %14, %8, !dbg !13
  %18 = or disjoint i32 %8, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 1, !dbg !16
  %.lobit2 = lshr exact i32 %12, 4, !dbg !17
  %23 = or disjoint i32 %22, %15, !dbg !18
  %24 = or disjoint i32 %22, %.lobit2, !dbg !18
  %25 = icmp slt i32 %23, 2, !dbg !19
  %26 = icmp slt i32 %24, 2, !dbg !19
  %27 = srem i32 %17, 4, !dbg !20
  %.frozen = freeze i32 %18, !dbg !21
  %28 = sdiv i32 %.frozen, 4, !dbg !21
  %29 = mul i32 %28, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %17, 1, !dbg !22
  %31 = add i32 %23, %30, !dbg !23
  %32 = sext i32 %31 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = and i1 %19, %25, !dbg !25
  %35 = and i1 %20, %26, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %34) #4, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = sext i32 %27 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #4, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = shl i32 %24, 2, !dbg !29
  %43 = add i32 %42, %.decomposed, !dbg !30
  %44 = shl i32 %28, 3, !dbg !31
  %45 = add i32 %43, %44, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %35) #4, !dbg !34
  %49 = fadd float %37, %41, !dbg !35
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %50, 0, !dbg !36
  %51 = tail call float @llvm.nvvm.fabs.ftz.f(float %49) #4, !dbg !36
  %52 = tail call float @llvm.nvvm.fabs.f(float %49) #4, !dbg !36
  %.01.i = select i1 %.not.i, float %52, float %51, !dbg !36
  %53 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !36
  br i1 %53, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !36

__internal_fmad.exit1.i:                          ; preds = %6
  %54 = fmul float %.01.i, 0x4007154760000000, !dbg !36
  %55 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %54) #4, !dbg !36
  %56 = fadd float %55, 1.000000e+00, !dbg !36
  %57 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %56) #5, !dbg !36, !srcloc !37
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not6.i = icmp eq i32 %58, 0, !dbg !36
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float -2.000000e+00, float 1.000000e+00) #4, !dbg !36
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %57, float -2.000000e+00, float 1.000000e+00) #4, !dbg !36
  %.03.i = select i1 %.not6.i, float %60, float %59, !dbg !36
  %61 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !36
  %s.0.i = select i1 %61, float 1.000000e+00, float %.03.i, !dbg !36
  %62 = bitcast float %s.0.i to i32, !dbg !36
  %63 = bitcast float %49 to i32, !dbg !36
  %64 = and i32 %63, -2147483648, !dbg !36
  %65 = or i32 %64, %62, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  br label %__nv_tanhf.exit, !dbg !36

__internal_fmad.exit3.i:                          ; preds = %6
  %67 = fmul float %49, %49, !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not1.i = icmp eq i32 %68, 0, !dbg !36
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %67, float 0xBFAAC795C0000000) #4, !dbg !36
  %70 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %67, float 0xBFAAC795C0000000) #4, !dbg !36
  %.06.i = select i1 %.not1.i, float %70, float %69, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not2.i = icmp eq i32 %71, 0, !dbg !36
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %67, float 0x3FC10B2820000000) #4, !dbg !36
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %67, float 0x3FC10B2820000000) #4, !dbg !36
  %.05.i = select i1 %.not2.i, float %73, float %72, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not3.i = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %67, float 0xBFD5553DA0000000) #4, !dbg !36
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %67, float 0xBFD5553DA0000000) #4, !dbg !36
  %.0.i = select i1 %.not3.i, float %76, float %75, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not4.i = icmp eq i32 %77, 0, !dbg !36
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %67, float 0.000000e+00) #4, !dbg !36
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %67, float 0.000000e+00) #4, !dbg !36
  %.04.i = select i1 %.not4.i, float %79, float %78, !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not5.i = icmp eq i32 %80, 0, !dbg !36
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %49, float %49) #4, !dbg !36
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %49, float %49) #4, !dbg !36
  %.02.i = select i1 %.not5.i, float %82, float %81, !dbg !36
  %.pre = bitcast float %49 to i32, !dbg !38
  br label %__nv_tanhf.exit, !dbg !36

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %.pre-phi = phi i32 [ %63, %__internal_fmad.exit1.i ], [ %.pre, %__internal_fmad.exit3.i ], !dbg !38
  %s.1.i = phi float [ %66, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !36
  %83 = bitcast i32 %48 to float, !dbg !34
  %84 = shl nuw nsw i32 %15, 4, !dbg !36
  %85 = or disjoint i32 %84, %11, !dbg !36
  %86 = or disjoint i32 %85, %13, !dbg !36
  %87 = and i32 %9, 31, !dbg !36
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !36
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !36
  %90 = bitcast float %s.1.i to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %91 = lshr i32 %87, 4, !dbg !36
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !36
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %87, !dbg !36
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !36
  %95 = fsub float %83, %94, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.pre-phi, ptr addrspace(1) %33, i1 %34) #4, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !41
  %97 = shl i32 %9, 1, !dbg !42
  %98 = and i32 %97, 30, !dbg !42
  %99 = or disjoint i32 %98, %.lobit2, !dbg !42
  %100 = lshr exact i32 %98, 1, !dbg !42
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !42
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %99, !dbg !42
  %103 = bitcast float %95 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %104 = lshr i32 %87, 1, !dbg !42
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !42
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %87, !dbg !42
  %107 = load i32, ptr addrspace(3) %106, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %96, i1 %34) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chndpzkqgyr3pnyflxn2yx42xn4agczldnhcqf53vrp7foja3kss.py", directory: "inductor_cache/hn")
!4 = !{ptr @triton_poi_fused_convolution_sub_tanh_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_sub_tanh_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_sub_tanh_8", linkageName: "triton_poi_fused_convolution_sub_tanh_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 26, scope: !7)
!37 = !{i32 21046}
!38 = !DILocation(line: 39, column: 46, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 43, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
