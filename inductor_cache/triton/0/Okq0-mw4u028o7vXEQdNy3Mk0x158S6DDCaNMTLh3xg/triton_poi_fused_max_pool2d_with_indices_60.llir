; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 33792, !dbg !14
  %12 = add i32 %10, -2640, !dbg !15
  %13 = sext i32 %12 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = add i32 %10, -2112, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = add i32 %10, -1584, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !21
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %23 = sdiv <2 x i32> %22, <i32 2112, i32 528>, !dbg !21
  %24 = srem <2 x i32> %23, splat (i32 4), !dbg !22
  %25 = extractelement <2 x i32> %24, i64 0, !dbg !23
  %26 = icmp sgt i32 %25, 0, !dbg !24
  %27 = icmp sgt <2 x i32> %24, <i32 -1, i32 0>, !dbg !25
  %28 = extractelement <2 x i1> %27, i64 1, !dbg !26
  %29 = and i1 %26, %28, !dbg !26
  %30 = and i1 %11, %29, !dbg !27
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !28
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !28
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !28
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !28
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !28
  %36 = extractelement <2 x i32> %24, i64 1, !dbg !29
  %37 = icmp sgt i32 %36, -1, !dbg !30
  %38 = and i1 %26, %37, !dbg !31
  %39 = and i1 %11, %38, !dbg !32
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %39, i32 -8388608, i1 %39, i32 -8388608, i1 %39, i32 -8388608, i1 %39, i32 -8388608, i1 %39) #1, !dbg !33
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !33
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !33
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !33
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !33
  %45 = add nsw i32 %36, 1, !dbg !34
  %46 = icmp ult i32 %45, 4, !dbg !34
  %47 = and i1 %26, %46, !dbg !35
  %48 = and i1 %11, %47, !dbg !36
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %48, i32 -8388608, i1 %48, i32 -8388608, i1 %48, i32 -8388608, i1 %48, i32 -8388608, i1 %48) #1, !dbg !37
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !37
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !37
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !37
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !37
  %54 = extractelement <2 x i1> %27, i64 0, !dbg !38
  %55 = and i1 %54, %28, !dbg !38
  %56 = add i32 %10, -528, !dbg !39
  %57 = sext i32 %56 to i64, !dbg !40
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !40
  %59 = and i1 %11, %55, !dbg !41
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59, i32 -8388608, i1 %59) #1, !dbg !42
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !42
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !42
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !42
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !42
  %65 = or i32 %25, %36, !dbg !29
  %66 = icmp sgt i32 %65, -1, !dbg !29
  %67 = sext i32 %10 to i64, !dbg !43
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !43
  %69 = and i1 %11, %66, !dbg !44
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #1, !dbg !45
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !45
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !45
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !45
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !45
  %75 = and i1 %54, %46, !dbg !46
  %76 = add i32 %10, 528, !dbg !47
  %77 = sext i32 %76 to i64, !dbg !48
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !48
  %79 = and i1 %11, %75, !dbg !49
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79) #1, !dbg !50
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !50
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !50
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !50
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !50
  %85 = add nsw i32 %25, 1, !dbg !23
  %86 = icmp ult i32 %85, 4, !dbg !23
  %87 = and i1 %28, %86, !dbg !51
  %88 = add i32 %10, 1584, !dbg !52
  %89 = sext i32 %88 to i64, !dbg !53
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !53
  %91 = and i1 %11, %87, !dbg !54
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #1, !dbg !55
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !55
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !55
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !55
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !55
  %97 = and i1 %37, %86, !dbg !56
  %98 = add i32 %10, 2112, !dbg !57
  %99 = sext i32 %98 to i64, !dbg !58
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !58
  %101 = and i1 %11, %97, !dbg !59
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %101, i32 -8388608, i1 %101, i32 -8388608, i1 %101, i32 -8388608, i1 %101, i32 -8388608, i1 %101) #1, !dbg !60
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !60
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !60
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !60
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !60
  %107 = or i32 %85, %45, !dbg !61
  %108 = icmp ult i32 %107, 4, !dbg !61
  %109 = add i32 %10, 2640, !dbg !62
  %110 = sext i32 %109 to i64, !dbg !63
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !63
  %112 = and i1 %11, %108, !dbg !64
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #1, !dbg !65
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !65
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !65
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !65
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !65
  %118 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !28
  %119 = insertelement <4 x i32> %118, i32 %33, i64 1, !dbg !28
  %120 = insertelement <4 x i32> %119, i32 %34, i64 2, !dbg !28
  %121 = insertelement <4 x i32> %120, i32 %35, i64 3, !dbg !28
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !28
  %123 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !33
  %124 = insertelement <4 x i32> %123, i32 %42, i64 1, !dbg !33
  %125 = insertelement <4 x i32> %124, i32 %43, i64 2, !dbg !33
  %126 = insertelement <4 x i32> %125, i32 %44, i64 3, !dbg !33
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !33
  %128 = fcmp ogt <4 x float> %127, %122, !dbg !66
  %129 = fcmp uno <4 x float> %127, zeroinitializer, !dbg !70
  %130 = or <4 x i1> %128, %129, !dbg !71
  %.v = select <4 x i1> %130, <4 x i32> %126, <4 x i32> %121, !dbg !72
  %131 = bitcast <4 x i32> %.v to <4 x float>, !dbg !72
  %132 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !37
  %133 = insertelement <4 x i32> %132, i32 %51, i64 1, !dbg !37
  %134 = insertelement <4 x i32> %133, i32 %52, i64 2, !dbg !37
  %135 = insertelement <4 x i32> %134, i32 %53, i64 3, !dbg !37
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !37
  %137 = fcmp olt <4 x float> %131, %136, !dbg !73
  %138 = fcmp uno <4 x float> %136, zeroinitializer, !dbg !75
  %139 = or <4 x i1> %138, %137, !dbg !76
  %.v1 = select <4 x i1> %139, <4 x i32> %135, <4 x i32> %.v, !dbg !77
  %140 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !77
  %141 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !42
  %142 = insertelement <4 x i32> %141, i32 %62, i64 1, !dbg !42
  %143 = insertelement <4 x i32> %142, i32 %63, i64 2, !dbg !42
  %144 = insertelement <4 x i32> %143, i32 %64, i64 3, !dbg !42
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !42
  %146 = fcmp olt <4 x float> %140, %145, !dbg !78
  %147 = fcmp uno <4 x float> %145, zeroinitializer, !dbg !80
  %148 = or <4 x i1> %147, %146, !dbg !81
  %.v2 = select <4 x i1> %148, <4 x i32> %144, <4 x i32> %.v1, !dbg !82
  %149 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !82
  %150 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !45
  %151 = insertelement <4 x i32> %150, i32 %72, i64 1, !dbg !45
  %152 = insertelement <4 x i32> %151, i32 %73, i64 2, !dbg !45
  %153 = insertelement <4 x i32> %152, i32 %74, i64 3, !dbg !45
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !45
  %155 = fcmp olt <4 x float> %149, %154, !dbg !83
  %156 = fcmp uno <4 x float> %154, zeroinitializer, !dbg !85
  %157 = or <4 x i1> %156, %155, !dbg !86
  %.v3 = select <4 x i1> %157, <4 x i32> %153, <4 x i32> %.v2, !dbg !87
  %158 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !87
  %159 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !50
  %160 = insertelement <4 x i32> %159, i32 %82, i64 1, !dbg !50
  %161 = insertelement <4 x i32> %160, i32 %83, i64 2, !dbg !50
  %162 = insertelement <4 x i32> %161, i32 %84, i64 3, !dbg !50
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !50
  %164 = fcmp olt <4 x float> %158, %163, !dbg !88
  %165 = fcmp uno <4 x float> %163, zeroinitializer, !dbg !90
  %166 = or <4 x i1> %165, %164, !dbg !91
  %.v4 = select <4 x i1> %166, <4 x i32> %162, <4 x i32> %.v3, !dbg !92
  %167 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !92
  %168 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !55
  %169 = insertelement <4 x i32> %168, i32 %94, i64 1, !dbg !55
  %170 = insertelement <4 x i32> %169, i32 %95, i64 2, !dbg !55
  %171 = insertelement <4 x i32> %170, i32 %96, i64 3, !dbg !55
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !55
  %173 = fcmp olt <4 x float> %167, %172, !dbg !93
  %174 = fcmp uno <4 x float> %172, zeroinitializer, !dbg !95
  %175 = or <4 x i1> %174, %173, !dbg !96
  %.v5 = select <4 x i1> %175, <4 x i32> %171, <4 x i32> %.v4, !dbg !97
  %176 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !97
  %177 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !60
  %178 = insertelement <4 x i32> %177, i32 %104, i64 1, !dbg !60
  %179 = insertelement <4 x i32> %178, i32 %105, i64 2, !dbg !60
  %180 = insertelement <4 x i32> %179, i32 %106, i64 3, !dbg !60
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !60
  %182 = fcmp olt <4 x float> %176, %181, !dbg !98
  %183 = fcmp uno <4 x float> %181, zeroinitializer, !dbg !100
  %184 = or <4 x i1> %183, %182, !dbg !101
  %.v6 = select <4 x i1> %184, <4 x i32> %180, <4 x i32> %.v5, !dbg !102
  %185 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !102
  %186 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !65
  %187 = insertelement <4 x i32> %186, i32 %115, i64 1, !dbg !65
  %188 = insertelement <4 x i32> %187, i32 %116, i64 2, !dbg !65
  %189 = insertelement <4 x i32> %188, i32 %117, i64 3, !dbg !65
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !65
  %191 = fcmp olt <4 x float> %185, %190, !dbg !103
  %192 = fcmp uno <4 x float> %190, zeroinitializer, !dbg !105
  %193 = or <4 x i1> %192, %191, !dbg !106
  %194 = extractelement <4 x i1> %193, i64 0, !dbg !106
  %195 = or <4 x i1> %192, %191, !dbg !106
  %196 = extractelement <4 x i1> %195, i64 1, !dbg !106
  %197 = or <4 x i1> %192, %191, !dbg !106
  %198 = extractelement <4 x i1> %197, i64 2, !dbg !106
  %199 = or <4 x i1> %192, %191, !dbg !106
  %200 = extractelement <4 x i1> %199, i64 3, !dbg !106
  %201 = zext <4 x i1> %128 to <4 x i8>, !dbg !107
  %202 = select <4 x i1> %137, <4 x i8> splat (i8 2), <4 x i8> %201, !dbg !108
  %203 = select <4 x i1> %146, <4 x i8> splat (i8 3), <4 x i8> %202, !dbg !109
  %204 = select <4 x i1> %155, <4 x i8> splat (i8 4), <4 x i8> %203, !dbg !110
  %205 = select <4 x i1> %164, <4 x i8> splat (i8 5), <4 x i8> %204, !dbg !111
  %206 = select <4 x i1> %173, <4 x i8> splat (i8 6), <4 x i8> %205, !dbg !112
  %207 = select <4 x i1> %182, <4 x i8> splat (i8 7), <4 x i8> %206, !dbg !113
  %208 = select <4 x i1> %191, <4 x i8> splat (i8 8), <4 x i8> %207, !dbg !114
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !115
  %210 = extractelement <4 x i32> %.v6, i64 0, !dbg !116
  %211 = select i1 %194, i32 %114, i32 %210, !dbg !117
  %212 = extractelement <4 x i32> %.v6, i64 1, !dbg !116
  %213 = select i1 %196, i32 %115, i32 %212, !dbg !117
  %214 = extractelement <4 x i32> %.v6, i64 2, !dbg !116
  %215 = select i1 %198, i32 %116, i32 %214, !dbg !117
  %216 = extractelement <4 x i32> %.v6, i64 3, !dbg !116
  %217 = select i1 %200, i32 %117, i32 %216, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %213, i32 %215, i32 %217, ptr addrspace(1) %209, i1 %11) #1, !dbg !116
  %218 = getelementptr i8, ptr addrspace(1) %2, i64 %67, !dbg !118
  %219 = bitcast <4 x i8> %208 to i32, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %218, i1 %11) #1, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cldudzssrv5s77yhmeldjaxbqhoi4wex4y65ffr43df2ju6qursl.py", directory: "inductor_cache/ld")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_60, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_60", linkageName: "triton_poi_fused_max_pool2d_with_indices_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 41, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 24, column: 21, scope: !7)
!22 = !DILocation(line: 24, column: 29, scope: !7)
!23 = !DILocation(line: 69, column: 20, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 54, column: 21, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 46, scope: !7)
!29 = !DILocation(line: 60, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 21, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 54, scope: !7)
!33 = !DILocation(line: 44, column: 46, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 19, scope: !7)
!36 = !DILocation(line: 51, column: 54, scope: !7)
!37 = !DILocation(line: 51, column: 46, scope: !7)
!38 = !DILocation(line: 57, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 40, scope: !7)
!40 = !DILocation(line: 58, column: 31, scope: !7)
!41 = !DILocation(line: 58, column: 53, scope: !7)
!42 = !DILocation(line: 58, column: 45, scope: !7)
!43 = !DILocation(line: 61, column: 31, scope: !7)
!44 = !DILocation(line: 61, column: 44, scope: !7)
!45 = !DILocation(line: 61, column: 36, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 64, column: 37, scope: !7)
!48 = !DILocation(line: 64, column: 31, scope: !7)
!49 = !DILocation(line: 64, column: 50, scope: !7)
!50 = !DILocation(line: 64, column: 42, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 38, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 51, scope: !7)
!55 = !DILocation(line: 71, column: 43, scope: !7)
!56 = !DILocation(line: 73, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 38, scope: !7)
!58 = !DILocation(line: 74, column: 31, scope: !7)
!59 = !DILocation(line: 74, column: 51, scope: !7)
!60 = !DILocation(line: 74, column: 43, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 38, scope: !7)
!63 = !DILocation(line: 77, column: 31, scope: !7)
!64 = !DILocation(line: 77, column: 51, scope: !7)
!65 = !DILocation(line: 77, column: 43, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 45, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 52, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 59, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !84)
!84 = !DILocation(line: 62, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 65, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 72, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 75, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 78, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!107 = !DILocation(line: 82, column: 35, scope: !7)
!108 = !DILocation(line: 85, column: 35, scope: !7)
!109 = !DILocation(line: 88, column: 35, scope: !7)
!110 = !DILocation(line: 91, column: 35, scope: !7)
!111 = !DILocation(line: 94, column: 35, scope: !7)
!112 = !DILocation(line: 97, column: 35, scope: !7)
!113 = !DILocation(line: 100, column: 35, scope: !7)
!114 = !DILocation(line: 103, column: 35, scope: !7)
!115 = !DILocation(line: 104, column: 25, scope: !7)
!116 = !DILocation(line: 104, column: 37, scope: !7)
!117 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!118 = !DILocation(line: 105, column: 25, scope: !7)
!119 = !DILocation(line: 105, column: 37, scope: !7)
!120 = !DILocation(line: 105, column: 4, scope: !7)
