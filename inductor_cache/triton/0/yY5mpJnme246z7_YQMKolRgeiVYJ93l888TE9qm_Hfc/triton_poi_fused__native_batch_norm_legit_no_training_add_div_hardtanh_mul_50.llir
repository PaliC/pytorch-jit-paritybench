; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_div_hardtanh_mul_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %12 = shl i32 %11, 8, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 1, !dbg !14
  %15 = and i32 %14, 254, !dbg !14
  %16 = or disjoint i32 %12, %15, !dbg !15
  %17 = icmp slt i32 %16, 1024, !dbg !16
  %18 = shl i32 %9, 10, !dbg !17
  %19 = add i32 %16, %18, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = and i1 %10, %17, !dbg !20
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %22) #4, !dbg !21
  %24 = sext i32 %16 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #4, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #4, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = bitcast i32 %29 to float, !dbg !25
  %32 = bitcast i32 %30 to float, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #4, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %17) #4, !dbg !29
  %37 = fadd float %31, 0x3EE4F8B580000000, !dbg !30
  %38 = fadd float %32, 0x3EE4F8B580000000, !dbg !30
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %39, 0, !dbg !31
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %40, 0, !dbg !31
  br i1 %.not.i, label %46, label %41, !dbg !31

41:                                               ; preds = %8
  br i1 %.not1.i, label %44, label %42, !dbg !31

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

46:                                               ; preds = %8
  br i1 %.not1.i, label %49, label %47, !dbg !31

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !31
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i2 = icmp eq i32 %51, 0, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i5 = icmp eq i32 %52, 0, !dbg !31
  br i1 %.not.i2, label %58, label %53, !dbg !31

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %56, label %54, !dbg !31

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %61, label %59, !dbg !31

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %54, %56, %59, %61
  %.0.i4 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !31
  %63 = extractvalue { i32, i32 } %23, 1, !dbg !21
  %64 = bitcast i32 %63 to float, !dbg !21
  %65 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = fsub float %64, %66, !dbg !32
  %68 = extractvalue { i32, i32 } %23, 0, !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %71 = bitcast i32 %70 to float, !dbg !23
  %72 = fsub float %69, %71, !dbg !32
  %73 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %78 = bitcast i32 %77 to float, !dbg !27
  %79 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %80 = bitcast i32 %79 to float, !dbg !27
  %81 = and i32 %13, 127, !dbg !14
  %82 = or disjoint i32 %81, 128, !dbg !14
  %83 = or disjoint i32 %12, %82, !dbg !15
  %84 = icmp slt i32 %83, 1024, !dbg !16
  %85 = and i1 %10, %84, !dbg !20
  %86 = or disjoint i32 %12, %81, !dbg !15
  %87 = icmp slt i32 %86, 1024, !dbg !16
  %88 = and i1 %10, %87, !dbg !20
  %.frozen = freeze i32 %9, !dbg !33
  %89 = sdiv i32 %.frozen, 4, !dbg !33
  %90 = mul i32 %89, 4, !dbg !34
  %.decomposed = sub i32 %.frozen, %90, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !35
  %93 = fmul float %72, %91, !dbg !36
  %94 = fmul float %67, %92, !dbg !36
  %95 = fmul float %93, %80, !dbg !37
  %96 = fmul float %94, %78, !dbg !37
  %97 = fadd float %95, %76, !dbg !38
  %98 = fadd float %96, %74, !dbg !38
  %99 = fadd float %97, 3.000000e+00, !dbg !39
  %100 = fadd float %98, 3.000000e+00, !dbg !39
  %.inv = fcmp ole float %99, 0.000000e+00, !dbg !40
  %101 = select i1 %.inv, float 0.000000e+00, float %99, !dbg !40
  %.inv1 = fcmp ole float %100, 0.000000e+00, !dbg !40
  %102 = select i1 %.inv1, float 0.000000e+00, float %100, !dbg !40
  %103 = fcmp olt float %101, 6.000000e+00, !dbg !44
  %104 = fcmp olt float %102, 6.000000e+00, !dbg !44
  %105 = fcmp uno float %101, 0.000000e+00, !dbg !46
  %106 = fcmp uno float %102, 0.000000e+00, !dbg !46
  %107 = or i1 %103, %105, !dbg !47
  %108 = or i1 %104, %106, !dbg !47
  %109 = fmul float %101, 0x3FC5555560000000, !dbg !48
  %110 = select i1 %107, float %109, float 1.000000e+00, !dbg !49
  %111 = fmul float %102, 0x3FC5555560000000, !dbg !48
  %112 = select i1 %108, float %111, float 1.000000e+00, !dbg !49
  %113 = fmul float %97, %110, !dbg !50
  %114 = fmul float %98, %112, !dbg !50
  %115 = shl i32 %86, 2, !dbg !51
  %116 = shl i32 %83, 2, !dbg !51
  %117 = shl i32 %89, 12, !dbg !52
  %118 = add i32 %117, %.decomposed, !dbg !53
  %119 = add i32 %118, %115, !dbg !54
  %120 = add i32 %118, %116, !dbg !54
  %121 = sext i32 %119 to i64, !dbg !55
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !55
  %123 = sext i32 %120 to i64, !dbg !55
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !55
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !56
  %126 = bitcast float %113 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !56
  %127 = or disjoint i32 %15, 1, !dbg !56
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !56
  %129 = bitcast float %114 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !56
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !56
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !56
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %122, i1 %88) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %124, i1 %85) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cts5pe3gnfkbz3hcj4h3c64mqpm5sxzwtnerkgktrrddr6on3agu.py", directory: "inductor_cache/ts")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_div_hardtanh_mul_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_div_hardtanh_mul_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_div_hardtanh_mul_50", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_div_hardtanh_mul_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 51, column: 42, scope: !7)
!44 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 53, column: 42, scope: !7)
!46 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !45)
!47 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !45)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !45)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 32, scope: !7)
!52 = !DILocation(line: 57, column: 42, scope: !7)
!53 = !DILocation(line: 57, column: 30, scope: !7)
!54 = !DILocation(line: 57, column: 37, scope: !7)
!55 = !DILocation(line: 57, column: 25, scope: !7)
!56 = !DILocation(line: 57, column: 54, scope: !7)
!57 = !DILocation(line: 57, column: 4, scope: !7)
