; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sigmoid_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 2048, !dbg !14
  %18 = sdiv i32 %16, 4, !dbg !15
  %19 = srem i32 %18, 128, !dbg !16
  %20 = sext i32 %16 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %17) #3, !dbg !18
  %23 = sext i32 %18 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %30 = sext i32 %19 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #3, !dbg !30
  %45 = fadd float %36, 0x3EE4F8B580000000, !dbg !31
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !31
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %47, 0, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %48, 0, !dbg !32
  br i1 %.not.i, label %54, label %49, !dbg !32

49:                                               ; preds = %10
  br i1 %.not1.i, label %52, label %50, !dbg !32

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

54:                                               ; preds = %10
  br i1 %.not1.i, label %57, label %55, !dbg !32

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %59, 0, !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !32
  br i1 %.not.i1, label %66, label %61, !dbg !32

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !32

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !32

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !32
  %71 = bitcast i32 %29 to float, !dbg !22
  %72 = bitcast i32 %33 to float, !dbg !24
  %73 = fsub float %71, %72, !dbg !33
  %74 = bitcast i32 %28 to float, !dbg !22
  %75 = bitcast i32 %32 to float, !dbg !24
  %76 = fsub float %74, %75, !dbg !33
  %77 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %78 = bitcast i32 %77 to float, !dbg !18
  %79 = bitcast i32 %26 to float, !dbg !20
  %80 = fmul float %78, %79, !dbg !34
  %81 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %82 = bitcast i32 %81 to float, !dbg !18
  %83 = bitcast i32 %25 to float, !dbg !20
  %84 = fmul float %82, %83, !dbg !34
  %85 = bitcast i32 %44 to float, !dbg !30
  %86 = bitcast i32 %43 to float, !dbg !30
  %87 = bitcast i32 %41 to float, !dbg !28
  %88 = bitcast i32 %40 to float, !dbg !28
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !35
  %91 = fmul float %76, %89, !dbg !36
  %92 = fmul float %73, %90, !dbg !36
  %93 = fmul float %91, %88, !dbg !37
  %94 = fmul float %92, %87, !dbg !37
  %95 = fadd float %93, %86, !dbg !38
  %96 = fadd float %94, %85, !dbg !38
  %97 = fcmp olt float %95, 0.000000e+00, !dbg !39
  %98 = fcmp olt float %96, 0.000000e+00, !dbg !39
  %99 = select i1 %97, float 0.000000e+00, float %95, !dbg !43
  %100 = select i1 %98, float 0.000000e+00, float %96, !dbg !43
  %101 = fadd float %84, %99, !dbg !44
  %102 = fadd float %80, %100, !dbg !44
  %103 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !45
  %104 = bitcast float %101 to i32, !dbg !46
  %105 = bitcast float %102 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %103, i1 %17) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq7s56x6s7tg4l7mpy5xolhuy3jmfokio2e3xlp5eiv5523jetpw.py", directory: "inductor_cache/q7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sigmoid_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sigmoid_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sigmoid_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sigmoid_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 26, scope: !7)
!17 = !DILocation(line: 29, column: 30, scope: !7)
!18 = !DILocation(line: 29, column: 35, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 27, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 56, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 58, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 59, column: 19, scope: !7)
!45 = !DILocation(line: 60, column: 25, scope: !7)
!46 = !DILocation(line: 60, column: 37, scope: !7)
!47 = !DILocation(line: 60, column: 4, scope: !7)
