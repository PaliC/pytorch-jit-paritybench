; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 4, !dbg !12
  %11 = and i32 %10, 48, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %17, 8, !dbg !13
  %20 = or disjoint i32 %17, 12, !dbg !13
  %21 = or disjoint i32 %8, %13, !dbg !13
  %22 = or disjoint i32 %8, %14, !dbg !13
  %23 = or disjoint i32 %8, %15, !dbg !13
  %24 = or disjoint i32 %8, %16, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %26 = shl i32 %25, 6, !dbg !15
  %27 = lshr i32 %9, 2, !dbg !16
  %28 = and i32 %27, 63, !dbg !16
  %29 = shl i32 %9, 2, !dbg !16
  %30 = and i32 %29, 60, !dbg !16
  %31 = or disjoint i32 %26, %28, !dbg !17
  %32 = or disjoint i32 %26, %30, !dbg !17
  %33 = icmp slt i32 %31, 64, !dbg !18
  %34 = icmp slt i32 %32, 64, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %35 = sdiv i32 %.frozen, 512, !dbg !19
  %36 = mul i32 %35, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = srem i32 %18, 512, !dbg !20
  %38 = srem i32 %19, 512, !dbg !20
  %39 = srem i32 %20, 512, !dbg !20
  %40 = shl i32 %31, 9, !dbg !21
  %41 = shl i32 %35, 15, !dbg !22
  %42 = add i32 %41, %40, !dbg !23
  %43 = add i32 %42, %.decomposed, !dbg !24
  %44 = add i32 %42, %37, !dbg !24
  %45 = add i32 %42, %38, !dbg !24
  %46 = add i32 %42, %39, !dbg !24
  %47 = sext i32 %43 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %44 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %45 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %33) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %33) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %33) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %33) #2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = sext i32 %.decomposed to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !27
  %77 = sext i32 %37 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !27
  %79 = sext i32 %38 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !27
  %81 = sext i32 %39 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !27
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !28
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !28
  %103 = shl i32 %21, 6, !dbg !29
  %104 = shl i32 %22, 6, !dbg !29
  %105 = shl i32 %23, 6, !dbg !29
  %106 = shl i32 %24, 6, !dbg !29
  %107 = add i32 %32, %103, !dbg !30
  %108 = add i32 %32, %104, !dbg !30
  %109 = add i32 %32, %105, !dbg !30
  %110 = add i32 %32, %106, !dbg !30
  %111 = sext i32 %107 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !31
  %113 = sext i32 %108 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !31
  %115 = sext i32 %109 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !31
  %117 = sext i32 %110 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !31
  %119 = shl i32 %9, 10, !dbg !32
  %120 = and i32 %119, 3072, !dbg !32
  %121 = or disjoint i32 %120, %28, !dbg !32
  %122 = and i32 %29, 1020, !dbg !32
  %123 = lshr exact i32 %120, 4, !dbg !32
  %124 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %123, !dbg !32
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %121, !dbg !32
  %126 = or disjoint i32 %121, 64, !dbg !32
  %127 = lshr i32 %126, 6, !dbg !32
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !32
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !32
  %130 = or disjoint i32 %121, 128, !dbg !32
  %131 = lshr i32 %130, 6, !dbg !32
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !32
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !32
  %134 = or disjoint i32 %121, 192, !dbg !32
  %135 = lshr i32 %134, 6, !dbg !32
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !32
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !32
  %138 = or disjoint i32 %121, 256, !dbg !32
  %139 = lshr i32 %138, 6, !dbg !32
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !32
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !32
  %142 = or disjoint i32 %121, 320, !dbg !32
  %143 = lshr i32 %142, 6, !dbg !32
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !32
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !32
  %146 = or disjoint i32 %121, 384, !dbg !32
  %147 = lshr i32 %146, 6, !dbg !32
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !32
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !32
  %150 = or disjoint i32 %121, 448, !dbg !32
  %151 = lshr i32 %150, 6, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !32
  %154 = or disjoint i32 %121, 512, !dbg !32
  %155 = lshr i32 %154, 6, !dbg !32
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !32
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !32
  %158 = or disjoint i32 %121, 576, !dbg !32
  %159 = lshr i32 %158, 6, !dbg !32
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !32
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !32
  %162 = or disjoint i32 %121, 640, !dbg !32
  %163 = lshr i32 %162, 6, !dbg !32
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !32
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !32
  %166 = or disjoint i32 %121, 704, !dbg !32
  %167 = lshr i32 %166, 6, !dbg !32
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !32
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !32
  %170 = or disjoint i32 %121, 768, !dbg !32
  %171 = lshr i32 %170, 6, !dbg !32
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !32
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !32
  %174 = or disjoint i32 %121, 832, !dbg !32
  %175 = lshr i32 %174, 6, !dbg !32
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !32
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %174, !dbg !32
  %178 = or disjoint i32 %121, 896, !dbg !32
  %179 = lshr i32 %178, 6, !dbg !32
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !32
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !32
  %182 = or disjoint i32 %121, 960, !dbg !32
  %183 = lshr i32 %182, 6, !dbg !32
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !32
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !32
  %186 = lshr i32 %122, 6, !dbg !32
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !32
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %122, !dbg !32
  %189 = or disjoint i32 %122, 1, !dbg !32
  %190 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %189, !dbg !32
  %191 = or disjoint i32 %122, 2, !dbg !32
  %192 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %191, !dbg !32
  %193 = or disjoint i32 %122, 3, !dbg !32
  %194 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %193, !dbg !32
  %195 = or disjoint i32 %122, 1024, !dbg !32
  %196 = lshr i32 %195, 6, !dbg !32
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !32
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !32
  %199 = or disjoint i32 %122, 1025, !dbg !32
  %200 = lshr i32 %199, 6, !dbg !32
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !32
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !32
  %203 = or disjoint i32 %122, 1026, !dbg !32
  %204 = lshr i32 %203, 6, !dbg !32
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !32
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %203, !dbg !32
  %207 = or disjoint i32 %122, 1027, !dbg !32
  %208 = lshr i32 %207, 6, !dbg !32
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !32
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !32
  %211 = or disjoint i32 %122, 2048, !dbg !32
  %212 = lshr i32 %211, 6, !dbg !32
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !32
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %211, !dbg !32
  %215 = or disjoint i32 %122, 2049, !dbg !32
  %216 = lshr i32 %215, 6, !dbg !32
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !32
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !32
  %219 = or disjoint i32 %122, 2050, !dbg !32
  %220 = lshr i32 %219, 6, !dbg !32
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !32
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !32
  %223 = or disjoint i32 %122, 2051, !dbg !32
  %224 = lshr i32 %223, 6, !dbg !32
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !32
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !32
  %227 = or disjoint i32 %122, 3072, !dbg !32
  %228 = lshr i32 %227, 6, !dbg !32
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !32
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !32
  %231 = or disjoint i32 %122, 3073, !dbg !32
  %232 = lshr i32 %231, 6, !dbg !32
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !32
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !32
  %235 = or disjoint i32 %122, 3074, !dbg !32
  %236 = lshr i32 %235, 6, !dbg !32
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !32
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !32
  %239 = or disjoint i32 %122, 3075, !dbg !32
  %240 = lshr i32 %239, 6, !dbg !32
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !32
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !32
  %243 = getelementptr i1, ptr addrspace(1) %3, i64 %47, !dbg !33
  %244 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !26
  %245 = insertelement <4 x i32> %244, i32 %57, i64 1, !dbg !26
  %246 = insertelement <4 x i32> %245, i32 %58, i64 2, !dbg !26
  %247 = insertelement <4 x i32> %246, i32 %59, i64 3, !dbg !26
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !26
  %249 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !28
  %250 = insertelement <4 x i32> %249, i32 %85, i64 1, !dbg !28
  %251 = insertelement <4 x i32> %250, i32 %86, i64 2, !dbg !28
  %252 = insertelement <4 x i32> %251, i32 %87, i64 3, !dbg !28
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !28
  %254 = fadd <4 x float> %248, %253, !dbg !34
  %255 = fcmp olt <4 x float> %254, zeroinitializer, !dbg !35
  %256 = select <4 x i1> %255, <4 x float> zeroinitializer, <4 x float> %254, !dbg !39
  %257 = fcmp ole <4 x float> %256, zeroinitializer, !dbg !40
  %258 = extractelement <4 x float> %256, i64 0, !dbg !32
  %259 = bitcast float %258 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %259, i1 true) #2, !dbg !32
  %260 = extractelement <4 x float> %256, i64 1, !dbg !32
  %261 = bitcast float %260 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %261, i1 true) #2, !dbg !32
  %262 = extractelement <4 x float> %256, i64 2, !dbg !32
  %263 = bitcast float %262 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %263, i1 true) #2, !dbg !32
  %264 = extractelement <4 x float> %256, i64 3, !dbg !32
  %265 = bitcast float %264 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %265, i1 true) #2, !dbg !32
  %266 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !26
  %267 = insertelement <4 x i32> %266, i32 %62, i64 1, !dbg !26
  %268 = insertelement <4 x i32> %267, i32 %63, i64 2, !dbg !26
  %269 = insertelement <4 x i32> %268, i32 %64, i64 3, !dbg !26
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !26
  %271 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !28
  %272 = insertelement <4 x i32> %271, i32 %90, i64 1, !dbg !28
  %273 = insertelement <4 x i32> %272, i32 %91, i64 2, !dbg !28
  %274 = insertelement <4 x i32> %273, i32 %92, i64 3, !dbg !28
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !28
  %276 = fadd <4 x float> %270, %275, !dbg !34
  %277 = fcmp olt <4 x float> %276, zeroinitializer, !dbg !35
  %278 = select <4 x i1> %277, <4 x float> zeroinitializer, <4 x float> %276, !dbg !39
  %279 = fcmp ole <4 x float> %278, zeroinitializer, !dbg !40
  %280 = extractelement <4 x float> %278, i64 0, !dbg !32
  %281 = bitcast float %280 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %281, i1 true) #2, !dbg !32
  %282 = extractelement <4 x float> %278, i64 1, !dbg !32
  %283 = bitcast float %282 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %283, i1 true) #2, !dbg !32
  %284 = extractelement <4 x float> %278, i64 2, !dbg !32
  %285 = bitcast float %284 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %285, i1 true) #2, !dbg !32
  %286 = extractelement <4 x float> %278, i64 3, !dbg !32
  %287 = bitcast float %286 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %287, i1 true) #2, !dbg !32
  %288 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !26
  %289 = insertelement <4 x i32> %288, i32 %67, i64 1, !dbg !26
  %290 = insertelement <4 x i32> %289, i32 %68, i64 2, !dbg !26
  %291 = insertelement <4 x i32> %290, i32 %69, i64 3, !dbg !26
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !26
  %293 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !28
  %294 = insertelement <4 x i32> %293, i32 %95, i64 1, !dbg !28
  %295 = insertelement <4 x i32> %294, i32 %96, i64 2, !dbg !28
  %296 = insertelement <4 x i32> %295, i32 %97, i64 3, !dbg !28
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !28
  %298 = fadd <4 x float> %292, %297, !dbg !34
  %299 = fcmp olt <4 x float> %298, zeroinitializer, !dbg !35
  %300 = select <4 x i1> %299, <4 x float> zeroinitializer, <4 x float> %298, !dbg !39
  %301 = fcmp ole <4 x float> %300, zeroinitializer, !dbg !40
  %302 = extractelement <4 x float> %300, i64 0, !dbg !32
  %303 = bitcast float %302 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %303, i1 true) #2, !dbg !32
  %304 = extractelement <4 x float> %300, i64 1, !dbg !32
  %305 = bitcast float %304 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %305, i1 true) #2, !dbg !32
  %306 = extractelement <4 x float> %300, i64 2, !dbg !32
  %307 = bitcast float %306 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %307, i1 true) #2, !dbg !32
  %308 = extractelement <4 x float> %300, i64 3, !dbg !32
  %309 = bitcast float %308 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %309, i1 true) #2, !dbg !32
  %310 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !26
  %311 = insertelement <4 x i32> %310, i32 %72, i64 1, !dbg !26
  %312 = insertelement <4 x i32> %311, i32 %73, i64 2, !dbg !26
  %313 = insertelement <4 x i32> %312, i32 %74, i64 3, !dbg !26
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !26
  %315 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !28
  %316 = insertelement <4 x i32> %315, i32 %100, i64 1, !dbg !28
  %317 = insertelement <4 x i32> %316, i32 %101, i64 2, !dbg !28
  %318 = insertelement <4 x i32> %317, i32 %102, i64 3, !dbg !28
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !28
  %320 = fadd <4 x float> %314, %319, !dbg !34
  %321 = fcmp olt <4 x float> %320, zeroinitializer, !dbg !35
  %322 = select <4 x i1> %321, <4 x float> zeroinitializer, <4 x float> %320, !dbg !39
  %323 = fcmp ole <4 x float> %322, zeroinitializer, !dbg !40
  %324 = extractelement <4 x float> %322, i64 0, !dbg !32
  %325 = bitcast float %324 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %325, i1 true) #2, !dbg !32
  %326 = extractelement <4 x float> %322, i64 1, !dbg !32
  %327 = bitcast float %326 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %327, i1 true) #2, !dbg !32
  %328 = extractelement <4 x float> %322, i64 2, !dbg !32
  %329 = bitcast float %328 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %329, i1 true) #2, !dbg !32
  %330 = extractelement <4 x float> %322, i64 3, !dbg !32
  %331 = bitcast float %330 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %331, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %332 = load i32, ptr addrspace(3) %188, align 4, !dbg !32
  %333 = load i32, ptr addrspace(3) %190, align 4, !dbg !32
  %334 = load i32, ptr addrspace(3) %192, align 4, !dbg !32
  %335 = load i32, ptr addrspace(3) %194, align 4, !dbg !32
  %336 = load i32, ptr addrspace(3) %198, align 4, !dbg !32
  %337 = load i32, ptr addrspace(3) %202, align 4, !dbg !32
  %338 = load i32, ptr addrspace(3) %206, align 4, !dbg !32
  %339 = load i32, ptr addrspace(3) %210, align 4, !dbg !32
  %340 = load i32, ptr addrspace(3) %214, align 4, !dbg !32
  %341 = load i32, ptr addrspace(3) %218, align 4, !dbg !32
  %342 = load i32, ptr addrspace(3) %222, align 4, !dbg !32
  %343 = load i32, ptr addrspace(3) %226, align 4, !dbg !32
  %344 = load i32, ptr addrspace(3) %230, align 4, !dbg !32
  %345 = load i32, ptr addrspace(3) %234, align 4, !dbg !32
  %346 = load i32, ptr addrspace(3) %238, align 4, !dbg !32
  %347 = load i32, ptr addrspace(3) %242, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %112, i1 %34) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %114, i1 %34) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %116, i1 %34) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %118, i1 %34) #2, !dbg !32
  %348 = zext <4 x i1> %257 to <4 x i8>, !dbg !41
  %349 = bitcast <4 x i8> %348 to i32, !dbg !41
  %350 = zext <4 x i1> %279 to <4 x i8>, !dbg !41
  %351 = bitcast <4 x i8> %350 to i32, !dbg !41
  %352 = zext <4 x i1> %301 to <4 x i8>, !dbg !41
  %353 = bitcast <4 x i8> %352 to i32, !dbg !41
  %354 = zext <4 x i1> %323 to <4 x i8>, !dbg !41
  %355 = bitcast <4 x i8> %354 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %351, i32 %353, i32 %355, ptr addrspace(1) %243, i1 %33) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvz2ihwpkmfrzso3ajw6rj6v44t5pxtuuxey3coliu7vwyllrtpk.py", directory: "inductor_cache/vz")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_16", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
