; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %8, 64, !dbg !12
  %12 = lshr exact i32 %11, 1, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = and i32 %8, 1, !dbg !12
  %15 = shl i32 %8, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %17, 64, !dbg !13
  %19 = or disjoint i32 %17, 128, !dbg !13
  %20 = or disjoint i32 %17, 192, !dbg !13
  %21 = or disjoint i32 %7, %16, !dbg !13
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 1, !dbg !16
  %.lobit1 = lshr exact i32 %11, 6, !dbg !17
  %29 = or disjoint i32 %28, %14, !dbg !18
  %30 = or disjoint i32 %28, %.lobit1, !dbg !18
  %31 = icmp slt i32 %29, 256, !dbg !19
  %32 = icmp slt i32 %30, 256, !dbg !19
  %.frozen = freeze i32 %29, !dbg !20
  %33 = sdiv i32 %.frozen, 16, !dbg !20
  %34 = mul i32 %33, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %.frozen9 = freeze i32 %21, !dbg !22
  %35 = sdiv i32 %.frozen9, 64, !dbg !22
  %36 = mul i32 %35, 64, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %36, !dbg !23
  %37 = shl nsw i32 %33, 1, !dbg !24
  %38 = add i32 %28, -16, !dbg !25
  %39 = icmp ult i32 %38, 256, !dbg !25
  %40 = shl nsw i32 %.decomposed, 1, !dbg !26
  %41 = icmp sgt i32 %.decomposed, 0, !dbg !27
  %42 = and i1 %39, %41, !dbg !28
  %43 = shl i32 %33, 6, !dbg !29
  %44 = add i32 %43, %40, !dbg !30
  %45 = add i32 %44, -33, !dbg !31
  %46 = shl i32 %17, 10, !dbg !32
  %47 = shl i32 %18, 10, !dbg !32
  %48 = shl i32 %19, 10, !dbg !32
  %49 = shl i32 %20, 10, !dbg !32
  %50 = add i32 %45, %46, !dbg !33
  %51 = add i32 %45, %47, !dbg !33
  %52 = add i32 %45, %48, !dbg !33
  %53 = add i32 %45, %49, !dbg !33
  %54 = sext i32 %50 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !34
  %56 = sext i32 %51 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !34
  %58 = sext i32 %52 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = sext i32 %53 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !34
  %62 = and i1 %31, %42, !dbg !35
  %63 = and i1 %22, %62, !dbg !36
  %64 = and i1 %23, %62, !dbg !36
  %65 = and i1 %24, %62, !dbg !36
  %66 = and i1 %25, %62, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %63, i32 -8388608, i1 %63) #2, !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %64, i32 -8388608, i1 %64) #2, !dbg !37
  %70 = bitcast i32 %69 to float, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %65, i32 -8388608, i1 %65) #2, !dbg !37
  %72 = bitcast i32 %71 to float, !dbg !37
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %66, i32 -8388608, i1 %66) #2, !dbg !37
  %74 = bitcast i32 %73 to float, !dbg !37
  %75 = icmp sgt i32 %.decomposed, -1, !dbg !38
  %76 = and i1 %39, %75, !dbg !39
  %77 = add i32 %44, -32, !dbg !40
  %78 = add i32 %77, %46, !dbg !41
  %79 = add i32 %77, %47, !dbg !41
  %80 = add i32 %77, %48, !dbg !41
  %81 = add i32 %77, %49, !dbg !41
  %82 = sext i32 %78 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !42
  %84 = sext i32 %79 to i64, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !42
  %86 = sext i32 %80 to i64, !dbg !42
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !42
  %88 = sext i32 %81 to i64, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !42
  %90 = and i1 %31, %76, !dbg !43
  %91 = and i1 %22, %90, !dbg !44
  %92 = and i1 %23, %90, !dbg !44
  %93 = and i1 %24, %90, !dbg !44
  %94 = and i1 %25, %90, !dbg !44
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %91, i32 -8388608, i1 %91) #2, !dbg !45
  %96 = bitcast i32 %95 to float, !dbg !45
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %92, i32 -8388608, i1 %92) #2, !dbg !45
  %98 = bitcast i32 %97 to float, !dbg !45
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %93, i32 -8388608, i1 %93) #2, !dbg !45
  %100 = bitcast i32 %99 to float, !dbg !45
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %94, i32 -8388608, i1 %94) #2, !dbg !45
  %102 = bitcast i32 %101 to float, !dbg !45
  %103 = fcmp ogt float %96, %68, !dbg !46
  %104 = fcmp ogt float %98, %70, !dbg !46
  %105 = fcmp ogt float %100, %72, !dbg !46
  %106 = fcmp ogt float %102, %74, !dbg !46
  %107 = fcmp uno float %96, 0.000000e+00, !dbg !50
  %108 = fcmp uno float %98, 0.000000e+00, !dbg !50
  %109 = fcmp uno float %100, 0.000000e+00, !dbg !50
  %110 = fcmp uno float %102, 0.000000e+00, !dbg !50
  %111 = or i1 %103, %107, !dbg !51
  %112 = or i1 %104, %108, !dbg !51
  %113 = or i1 %105, %109, !dbg !51
  %114 = or i1 %106, %110, !dbg !51
  %115 = select i1 %111, float %96, float %68, !dbg !52
  %116 = select i1 %112, float %98, float %70, !dbg !52
  %117 = select i1 %113, float %100, float %72, !dbg !52
  %118 = select i1 %114, float %102, float %74, !dbg !52
  %119 = or disjoint i32 %40, 1, !dbg !53
  %120 = add i32 %44, -31, !dbg !54
  %121 = add i32 %120, %46, !dbg !55
  %122 = add i32 %120, %47, !dbg !55
  %123 = add i32 %120, %48, !dbg !55
  %124 = add i32 %120, %49, !dbg !55
  %125 = sext i32 %121 to i64, !dbg !56
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !56
  %127 = sext i32 %122 to i64, !dbg !56
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !56
  %129 = sext i32 %123 to i64, !dbg !56
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !56
  %131 = sext i32 %124 to i64, !dbg !56
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !56
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %91, i32 -8388608, i1 %91) #2, !dbg !57
  %134 = bitcast i32 %133 to float, !dbg !57
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %92, i32 -8388608, i1 %92) #2, !dbg !57
  %136 = bitcast i32 %135 to float, !dbg !57
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %93, i32 -8388608, i1 %93) #2, !dbg !57
  %138 = bitcast i32 %137 to float, !dbg !57
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %94, i32 -8388608, i1 %94) #2, !dbg !57
  %140 = bitcast i32 %139 to float, !dbg !57
  %141 = fcmp olt float %115, %134, !dbg !58
  %142 = fcmp olt float %116, %136, !dbg !58
  %143 = fcmp olt float %117, %138, !dbg !58
  %144 = fcmp olt float %118, %140, !dbg !58
  %145 = fcmp uno float %134, 0.000000e+00, !dbg !60
  %146 = fcmp uno float %136, 0.000000e+00, !dbg !60
  %147 = fcmp uno float %138, 0.000000e+00, !dbg !60
  %148 = fcmp uno float %140, 0.000000e+00, !dbg !60
  %149 = or i1 %141, %145, !dbg !61
  %150 = or i1 %142, %146, !dbg !61
  %151 = or i1 %143, %147, !dbg !61
  %152 = or i1 %144, %148, !dbg !61
  %153 = select i1 %149, float %134, float %115, !dbg !62
  %154 = select i1 %150, float %136, float %116, !dbg !62
  %155 = select i1 %151, float %138, float %117, !dbg !62
  %156 = select i1 %152, float %140, float %118, !dbg !62
  %157 = add i32 %44, -1, !dbg !63
  %158 = add i32 %157, %46, !dbg !64
  %159 = add i32 %157, %47, !dbg !64
  %160 = add i32 %157, %48, !dbg !64
  %161 = add i32 %157, %49, !dbg !64
  %162 = sext i32 %158 to i64, !dbg !65
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !65
  %164 = sext i32 %159 to i64, !dbg !65
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !65
  %166 = sext i32 %160 to i64, !dbg !65
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !65
  %168 = sext i32 %161 to i64, !dbg !65
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !65
  %170 = add i32 %29, 15, !dbg !66
  %171 = icmp ult i32 %170, 271, !dbg !66
  %172 = and i1 %171, %41, !dbg !66
  %173 = and i1 %22, %172, !dbg !67
  %174 = and i1 %23, %172, !dbg !67
  %175 = and i1 %24, %172, !dbg !67
  %176 = and i1 %25, %172, !dbg !67
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %173, i32 -8388608, i1 %173) #2, !dbg !68
  %178 = bitcast i32 %177 to float, !dbg !68
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %174, i32 -8388608, i1 %174) #2, !dbg !68
  %180 = bitcast i32 %179 to float, !dbg !68
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %175, i32 -8388608, i1 %175) #2, !dbg !68
  %182 = bitcast i32 %181 to float, !dbg !68
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %176, i32 -8388608, i1 %176) #2, !dbg !68
  %184 = bitcast i32 %183 to float, !dbg !68
  %185 = fcmp olt float %153, %178, !dbg !69
  %186 = fcmp olt float %154, %180, !dbg !69
  %187 = fcmp olt float %155, %182, !dbg !69
  %188 = fcmp olt float %156, %184, !dbg !69
  %189 = fcmp uno float %178, 0.000000e+00, !dbg !71
  %190 = fcmp uno float %180, 0.000000e+00, !dbg !71
  %191 = fcmp uno float %182, 0.000000e+00, !dbg !71
  %192 = fcmp uno float %184, 0.000000e+00, !dbg !71
  %193 = or i1 %185, %189, !dbg !72
  %194 = or i1 %186, %190, !dbg !72
  %195 = or i1 %187, %191, !dbg !72
  %196 = or i1 %188, %192, !dbg !72
  %197 = select i1 %193, float %178, float %153, !dbg !73
  %198 = select i1 %194, float %180, float %154, !dbg !73
  %199 = select i1 %195, float %182, float %155, !dbg !73
  %200 = select i1 %196, float %184, float %156, !dbg !73
  %201 = add i32 %44, %46, !dbg !74
  %202 = add i32 %44, %47, !dbg !74
  %203 = add i32 %44, %48, !dbg !74
  %204 = add i32 %44, %49, !dbg !74
  %205 = sext i32 %201 to i64, !dbg !75
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !75
  %207 = sext i32 %202 to i64, !dbg !75
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !75
  %209 = sext i32 %203 to i64, !dbg !75
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !75
  %211 = sext i32 %204 to i64, !dbg !75
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !75
  %213 = and i1 %171, %75, !dbg !76
  %214 = and i1 %22, %213, !dbg !77
  %215 = and i1 %23, %213, !dbg !77
  %216 = and i1 %24, %213, !dbg !77
  %217 = and i1 %25, %213, !dbg !77
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %214, i32 -8388608, i1 %214) #2, !dbg !78
  %219 = bitcast i32 %218 to float, !dbg !78
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %215, i32 -8388608, i1 %215) #2, !dbg !78
  %221 = bitcast i32 %220 to float, !dbg !78
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %216, i32 -8388608, i1 %216) #2, !dbg !78
  %223 = bitcast i32 %222 to float, !dbg !78
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %217, i32 -8388608, i1 %217) #2, !dbg !78
  %225 = bitcast i32 %224 to float, !dbg !78
  %226 = fcmp olt float %197, %219, !dbg !79
  %227 = fcmp olt float %198, %221, !dbg !79
  %228 = fcmp olt float %199, %223, !dbg !79
  %229 = fcmp olt float %200, %225, !dbg !79
  %230 = fcmp uno float %219, 0.000000e+00, !dbg !81
  %231 = fcmp uno float %221, 0.000000e+00, !dbg !81
  %232 = fcmp uno float %223, 0.000000e+00, !dbg !81
  %233 = fcmp uno float %225, 0.000000e+00, !dbg !81
  %234 = or i1 %226, %230, !dbg !82
  %235 = or i1 %227, %231, !dbg !82
  %236 = or i1 %228, %232, !dbg !82
  %237 = or i1 %229, %233, !dbg !82
  %238 = select i1 %234, float %219, float %197, !dbg !83
  %239 = select i1 %235, float %221, float %198, !dbg !83
  %240 = select i1 %236, float %223, float %199, !dbg !83
  %241 = select i1 %237, float %225, float %200, !dbg !83
  %242 = add i32 %119, %43, !dbg !84
  %243 = add i32 %242, %46, !dbg !85
  %244 = add i32 %242, %47, !dbg !85
  %245 = add i32 %242, %48, !dbg !85
  %246 = add i32 %242, %49, !dbg !85
  %247 = sext i32 %243 to i64, !dbg !86
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !86
  %249 = sext i32 %244 to i64, !dbg !86
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !86
  %251 = sext i32 %245 to i64, !dbg !86
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !86
  %253 = sext i32 %246 to i64, !dbg !86
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !86
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %214, i32 -8388608, i1 %214) #2, !dbg !87
  %256 = bitcast i32 %255 to float, !dbg !87
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %215, i32 -8388608, i1 %215) #2, !dbg !87
  %258 = bitcast i32 %257 to float, !dbg !87
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %216, i32 -8388608, i1 %216) #2, !dbg !87
  %260 = bitcast i32 %259 to float, !dbg !87
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %217, i32 -8388608, i1 %217) #2, !dbg !87
  %262 = bitcast i32 %261 to float, !dbg !87
  %263 = fcmp olt float %238, %256, !dbg !88
  %264 = fcmp olt float %239, %258, !dbg !88
  %265 = fcmp olt float %240, %260, !dbg !88
  %266 = fcmp olt float %241, %262, !dbg !88
  %267 = fcmp uno float %256, 0.000000e+00, !dbg !90
  %268 = fcmp uno float %258, 0.000000e+00, !dbg !90
  %269 = fcmp uno float %260, 0.000000e+00, !dbg !90
  %270 = fcmp uno float %262, 0.000000e+00, !dbg !90
  %271 = or i1 %263, %267, !dbg !91
  %272 = or i1 %264, %268, !dbg !91
  %273 = or i1 %265, %269, !dbg !91
  %274 = or i1 %266, %270, !dbg !91
  %275 = select i1 %271, float %256, float %238, !dbg !92
  %276 = select i1 %272, float %258, float %239, !dbg !92
  %277 = select i1 %273, float %260, float %240, !dbg !92
  %278 = select i1 %274, float %262, float %241, !dbg !92
  %279 = or disjoint i32 %37, 1, !dbg !93
  %280 = icmp sgt i32 %29, -16, !dbg !94
  %281 = icmp slt i32 %279, 32, !dbg !95
  %282 = and i1 %280, %281, !dbg !96
  %283 = and i1 %41, %282, !dbg !97
  %284 = add i32 %44, 31, !dbg !98
  %285 = add i32 %284, %46, !dbg !99
  %286 = add i32 %284, %47, !dbg !99
  %287 = add i32 %284, %48, !dbg !99
  %288 = add i32 %284, %49, !dbg !99
  %289 = sext i32 %285 to i64, !dbg !100
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !100
  %291 = sext i32 %286 to i64, !dbg !100
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !100
  %293 = sext i32 %287 to i64, !dbg !100
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !100
  %295 = sext i32 %288 to i64, !dbg !100
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !100
  %297 = and i1 %31, %283, !dbg !101
  %298 = and i1 %22, %297, !dbg !102
  %299 = and i1 %23, %297, !dbg !102
  %300 = and i1 %24, %297, !dbg !102
  %301 = and i1 %25, %297, !dbg !102
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %298, i32 -8388608, i1 %298) #2, !dbg !103
  %303 = bitcast i32 %302 to float, !dbg !103
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %299, i32 -8388608, i1 %299) #2, !dbg !103
  %305 = bitcast i32 %304 to float, !dbg !103
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %300, i32 -8388608, i1 %300) #2, !dbg !103
  %307 = bitcast i32 %306 to float, !dbg !103
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %301, i32 -8388608, i1 %301) #2, !dbg !103
  %309 = bitcast i32 %308 to float, !dbg !103
  %310 = fcmp olt float %275, %303, !dbg !104
  %311 = fcmp olt float %276, %305, !dbg !104
  %312 = fcmp olt float %277, %307, !dbg !104
  %313 = fcmp olt float %278, %309, !dbg !104
  %314 = fcmp uno float %303, 0.000000e+00, !dbg !106
  %315 = fcmp uno float %305, 0.000000e+00, !dbg !106
  %316 = fcmp uno float %307, 0.000000e+00, !dbg !106
  %317 = fcmp uno float %309, 0.000000e+00, !dbg !106
  %318 = or i1 %310, %314, !dbg !107
  %319 = or i1 %311, %315, !dbg !107
  %320 = or i1 %312, %316, !dbg !107
  %321 = or i1 %313, %317, !dbg !107
  %322 = select i1 %318, float %303, float %275, !dbg !108
  %323 = select i1 %319, float %305, float %276, !dbg !108
  %324 = select i1 %320, float %307, float %277, !dbg !108
  %325 = select i1 %321, float %309, float %278, !dbg !108
  %326 = and i1 %75, %282, !dbg !109
  %327 = add i32 %44, 32, !dbg !110
  %328 = add i32 %327, %46, !dbg !111
  %329 = add i32 %327, %47, !dbg !111
  %330 = add i32 %327, %48, !dbg !111
  %331 = add i32 %327, %49, !dbg !111
  %332 = sext i32 %328 to i64, !dbg !112
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !112
  %334 = sext i32 %329 to i64, !dbg !112
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !112
  %336 = sext i32 %330 to i64, !dbg !112
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !112
  %338 = sext i32 %331 to i64, !dbg !112
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !112
  %340 = and i1 %31, %326, !dbg !113
  %341 = and i1 %22, %340, !dbg !114
  %342 = and i1 %23, %340, !dbg !114
  %343 = and i1 %24, %340, !dbg !114
  %344 = and i1 %25, %340, !dbg !114
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %341, i32 -8388608, i1 %341) #2, !dbg !115
  %346 = bitcast i32 %345 to float, !dbg !115
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %342, i32 -8388608, i1 %342) #2, !dbg !115
  %348 = bitcast i32 %347 to float, !dbg !115
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %343, i32 -8388608, i1 %343) #2, !dbg !115
  %350 = bitcast i32 %349 to float, !dbg !115
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %344, i32 -8388608, i1 %344) #2, !dbg !115
  %352 = bitcast i32 %351 to float, !dbg !115
  %353 = fcmp olt float %322, %346, !dbg !116
  %354 = fcmp olt float %323, %348, !dbg !116
  %355 = fcmp olt float %324, %350, !dbg !116
  %356 = fcmp olt float %325, %352, !dbg !116
  %357 = fcmp uno float %346, 0.000000e+00, !dbg !118
  %358 = fcmp uno float %348, 0.000000e+00, !dbg !118
  %359 = fcmp uno float %350, 0.000000e+00, !dbg !118
  %360 = fcmp uno float %352, 0.000000e+00, !dbg !118
  %361 = or i1 %353, %357, !dbg !119
  %362 = or i1 %354, %358, !dbg !119
  %363 = or i1 %355, %359, !dbg !119
  %364 = or i1 %356, %360, !dbg !119
  %365 = select i1 %361, float %346, float %322, !dbg !120
  %366 = select i1 %362, float %348, float %323, !dbg !120
  %367 = select i1 %363, float %350, float %324, !dbg !120
  %368 = select i1 %364, float %352, float %325, !dbg !120
  %369 = add i32 %44, 33, !dbg !121
  %370 = add i32 %369, %46, !dbg !122
  %371 = add i32 %369, %47, !dbg !122
  %372 = add i32 %369, %48, !dbg !122
  %373 = add i32 %369, %49, !dbg !122
  %374 = sext i32 %370 to i64, !dbg !123
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !123
  %376 = sext i32 %371 to i64, !dbg !123
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !123
  %378 = sext i32 %372 to i64, !dbg !123
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !123
  %380 = sext i32 %373 to i64, !dbg !123
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !123
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %341, i32 -8388608, i1 %341) #2, !dbg !124
  %383 = bitcast i32 %382 to float, !dbg !124
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %377, i1 %342, i32 -8388608, i1 %342) #2, !dbg !124
  %385 = bitcast i32 %384 to float, !dbg !124
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %379, i1 %343, i32 -8388608, i1 %343) #2, !dbg !124
  %387 = bitcast i32 %386 to float, !dbg !124
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %381, i1 %344, i32 -8388608, i1 %344) #2, !dbg !124
  %389 = bitcast i32 %388 to float, !dbg !124
  %390 = fcmp olt float %365, %383, !dbg !125
  %391 = fcmp olt float %366, %385, !dbg !125
  %392 = fcmp olt float %367, %387, !dbg !125
  %393 = fcmp olt float %368, %389, !dbg !125
  %394 = fcmp uno float %383, 0.000000e+00, !dbg !127
  %395 = fcmp uno float %385, 0.000000e+00, !dbg !127
  %396 = fcmp uno float %387, 0.000000e+00, !dbg !127
  %397 = fcmp uno float %389, 0.000000e+00, !dbg !127
  %398 = or i1 %390, %394, !dbg !128
  %399 = or i1 %391, %395, !dbg !128
  %400 = or i1 %392, %396, !dbg !128
  %401 = or i1 %393, %397, !dbg !128
  %402 = zext i1 %103 to i8, !dbg !129
  %403 = zext i1 %104 to i8, !dbg !129
  %404 = zext i1 %105 to i8, !dbg !129
  %405 = zext i1 %106 to i8, !dbg !129
  %406 = select i1 %141, i8 2, i8 %402, !dbg !130
  %407 = select i1 %142, i8 2, i8 %403, !dbg !130
  %408 = select i1 %143, i8 2, i8 %404, !dbg !130
  %409 = select i1 %144, i8 2, i8 %405, !dbg !130
  %410 = select i1 %185, i8 3, i8 %406, !dbg !131
  %411 = select i1 %186, i8 3, i8 %407, !dbg !131
  %412 = select i1 %187, i8 3, i8 %408, !dbg !131
  %413 = select i1 %188, i8 3, i8 %409, !dbg !131
  %414 = select i1 %226, i8 4, i8 %410, !dbg !132
  %415 = select i1 %227, i8 4, i8 %411, !dbg !132
  %416 = select i1 %228, i8 4, i8 %412, !dbg !132
  %417 = select i1 %229, i8 4, i8 %413, !dbg !132
  %418 = select i1 %263, i8 5, i8 %414, !dbg !133
  %419 = select i1 %264, i8 5, i8 %415, !dbg !133
  %420 = select i1 %265, i8 5, i8 %416, !dbg !133
  %421 = select i1 %266, i8 5, i8 %417, !dbg !133
  %422 = select i1 %310, i8 6, i8 %418, !dbg !134
  %423 = select i1 %311, i8 6, i8 %419, !dbg !134
  %424 = select i1 %312, i8 6, i8 %420, !dbg !134
  %425 = select i1 %313, i8 6, i8 %421, !dbg !134
  %426 = select i1 %353, i8 7, i8 %422, !dbg !135
  %427 = select i1 %354, i8 7, i8 %423, !dbg !135
  %428 = select i1 %355, i8 7, i8 %424, !dbg !135
  %429 = select i1 %356, i8 7, i8 %425, !dbg !135
  %430 = select i1 %390, i8 8, i8 %426, !dbg !136
  %431 = select i1 %391, i8 8, i8 %427, !dbg !136
  %432 = select i1 %392, i8 8, i8 %428, !dbg !136
  %433 = select i1 %393, i8 8, i8 %429, !dbg !136
  %434 = shl i32 %30, 6, !dbg !137
  %435 = add i32 %434, %.decomposed10, !dbg !138
  %436 = shl i32 %35, 14, !dbg !139
  %437 = add i32 %435, %436, !dbg !140
  %438 = sext i32 %437 to i64, !dbg !141
  %439 = getelementptr float, ptr addrspace(1) %1, i64 %438, !dbg !141
  %440 = and i1 %26, %32, !dbg !142
  %441 = shl nuw nsw i32 %14, 8, !dbg !143
  %442 = or disjoint i32 %441, %10, !dbg !143
  %443 = or disjoint i32 %442, %12, !dbg !143
  %444 = and i32 %15, 508, !dbg !143
  %445 = shl nuw nsw i32 %14, 2, !dbg !143
  %446 = add nuw nsw i32 %443, %445, !dbg !143
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %446, !dbg !143
  %448 = bitcast float %365 to i32, !dbg !143
  %449 = select i1 %398, i32 %382, i32 %448, !dbg !144
  %450 = insertelement <1 x i32> poison, i32 %449, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %450, i1 true) #2, !dbg !143
  %451 = or disjoint i32 %443, 64, !dbg !143
  %452 = add nuw nsw i32 %451, %445, !dbg !143
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !143
  %454 = bitcast float %366 to i32, !dbg !143
  %455 = select i1 %399, i32 %384, i32 %454, !dbg !144
  %456 = insertelement <1 x i32> poison, i32 %455, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %456, i1 true) #2, !dbg !143
  %457 = or disjoint i32 %443, 128, !dbg !143
  %458 = add nuw nsw i32 %457, %445, !dbg !143
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !143
  %460 = bitcast float %367 to i32, !dbg !143
  %461 = select i1 %400, i32 %386, i32 %460, !dbg !144
  %462 = insertelement <1 x i32> poison, i32 %461, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %462, i1 true) #2, !dbg !143
  %463 = or disjoint i32 %443, 192, !dbg !143
  %464 = add nuw nsw i32 %463, %445, !dbg !143
  %465 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %464, !dbg !143
  %466 = bitcast float %368 to i32, !dbg !143
  %467 = select i1 %401, i32 %388, i32 %466, !dbg !144
  %468 = insertelement <1 x i32> poison, i32 %467, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %468, i1 true) #2, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %469 = lshr i32 %15, 6, !dbg !143
  %470 = and i32 %469, 4, !dbg !143
  %471 = add nuw nsw i32 %470, %444, !dbg !143
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !143
  %.extract = load i32, ptr addrspace(3) %472, align 16, !dbg !143
  %473 = getelementptr inbounds i8, ptr addrspace(3) %472, i32 4, !dbg !143
  %.extract6 = load i32, ptr addrspace(3) %473, align 4, !dbg !143
  %474 = getelementptr inbounds i8, ptr addrspace(3) %472, i32 8, !dbg !143
  %.extract7 = load i32, ptr addrspace(3) %474, align 8, !dbg !143
  %475 = getelementptr inbounds i8, ptr addrspace(3) %472, i32 12, !dbg !143
  %.extract8 = load i32, ptr addrspace(3) %475, align 4, !dbg !143
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %439, i1 %440) #2, !dbg !143
  %476 = getelementptr i8, ptr addrspace(1) %2, i64 %438, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %477 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %446, !dbg !146
  %478 = insertelement <1 x i8> poison, i8 %430, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %477, <1 x i8> %478, i1 true) #2, !dbg !146
  %479 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %452, !dbg !146
  %480 = insertelement <1 x i8> poison, i8 %431, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %479, <1 x i8> %480, i1 true) #2, !dbg !146
  %481 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %458, !dbg !146
  %482 = insertelement <1 x i8> poison, i8 %432, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %481, <1 x i8> %482, i1 true) #2, !dbg !146
  %483 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %464, !dbg !146
  %484 = insertelement <1 x i8> poison, i8 %433, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %483, <1 x i8> %484, i1 true) #2, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %485 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %471, !dbg !146
  %486 = load i32, ptr addrspace(3) %485, align 4, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %486, ptr addrspace(1) %476, i1 %440) #2, !dbg !146
  ret void, !dbg !147
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyn6fla5jeci5v233g2u7refbb5qlf57yns46bihryzt5zefn6uk.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 20, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 20, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 19, scope: !7)
!29 = !DILocation(line: 45, column: 49, scope: !7)
!30 = !DILocation(line: 45, column: 39, scope: !7)
!31 = !DILocation(line: 45, column: 46, scope: !7)
!32 = !DILocation(line: 45, column: 59, scope: !7)
!33 = !DILocation(line: 45, column: 54, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 72, scope: !7)
!36 = !DILocation(line: 45, column: 80, scope: !7)
!37 = !DILocation(line: 45, column: 64, scope: !7)
!38 = !DILocation(line: 47, column: 21, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 46, scope: !7)
!41 = !DILocation(line: 51, column: 54, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 72, scope: !7)
!44 = !DILocation(line: 51, column: 80, scope: !7)
!45 = !DILocation(line: 51, column: 64, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 52, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 53, column: 16, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 54, scope: !7)
!56 = !DILocation(line: 58, column: 31, scope: !7)
!57 = !DILocation(line: 58, column: 64, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !59)
!59 = !DILocation(line: 59, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !59)
!63 = !DILocation(line: 65, column: 45, scope: !7)
!64 = !DILocation(line: 65, column: 53, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 71, scope: !7)
!67 = !DILocation(line: 65, column: 79, scope: !7)
!68 = !DILocation(line: 65, column: 63, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !70)
!70 = !DILocation(line: 66, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !70)
!74 = !DILocation(line: 68, column: 46, scope: !7)
!75 = !DILocation(line: 68, column: 31, scope: !7)
!76 = !DILocation(line: 68, column: 64, scope: !7)
!77 = !DILocation(line: 68, column: 72, scope: !7)
!78 = !DILocation(line: 68, column: 56, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !80)
!80 = !DILocation(line: 69, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !80)
!84 = !DILocation(line: 71, column: 42, scope: !7)
!85 = !DILocation(line: 71, column: 50, scope: !7)
!86 = !DILocation(line: 71, column: 31, scope: !7)
!87 = !DILocation(line: 71, column: 60, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !89)
!89 = !DILocation(line: 72, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !89)
!93 = !DILocation(line: 73, column: 16, scope: !7)
!94 = !DILocation(line: 74, column: 21, scope: !7)
!95 = !DILocation(line: 75, column: 20, scope: !7)
!96 = !DILocation(line: 76, column: 20, scope: !7)
!97 = !DILocation(line: 77, column: 20, scope: !7)
!98 = !DILocation(line: 78, column: 43, scope: !7)
!99 = !DILocation(line: 78, column: 51, scope: !7)
!100 = !DILocation(line: 78, column: 31, scope: !7)
!101 = !DILocation(line: 78, column: 69, scope: !7)
!102 = !DILocation(line: 78, column: 77, scope: !7)
!103 = !DILocation(line: 78, column: 61, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !105)
!105 = !DILocation(line: 79, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !105)
!109 = !DILocation(line: 80, column: 20, scope: !7)
!110 = !DILocation(line: 81, column: 43, scope: !7)
!111 = !DILocation(line: 81, column: 51, scope: !7)
!112 = !DILocation(line: 81, column: 31, scope: !7)
!113 = !DILocation(line: 81, column: 69, scope: !7)
!114 = !DILocation(line: 81, column: 77, scope: !7)
!115 = !DILocation(line: 81, column: 61, scope: !7)
!116 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !117)
!117 = !DILocation(line: 82, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !117)
!121 = !DILocation(line: 84, column: 43, scope: !7)
!122 = !DILocation(line: 84, column: 51, scope: !7)
!123 = !DILocation(line: 84, column: 31, scope: !7)
!124 = !DILocation(line: 84, column: 61, scope: !7)
!125 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !126)
!126 = !DILocation(line: 85, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !126)
!129 = !DILocation(line: 89, column: 35, scope: !7)
!130 = !DILocation(line: 92, column: 35, scope: !7)
!131 = !DILocation(line: 95, column: 35, scope: !7)
!132 = !DILocation(line: 98, column: 35, scope: !7)
!133 = !DILocation(line: 101, column: 35, scope: !7)
!134 = !DILocation(line: 104, column: 35, scope: !7)
!135 = !DILocation(line: 107, column: 35, scope: !7)
!136 = !DILocation(line: 110, column: 35, scope: !7)
!137 = !DILocation(line: 111, column: 33, scope: !7)
!138 = !DILocation(line: 111, column: 30, scope: !7)
!139 = !DILocation(line: 111, column: 44, scope: !7)
!140 = !DILocation(line: 111, column: 38, scope: !7)
!141 = !DILocation(line: 111, column: 25, scope: !7)
!142 = !DILocation(line: 111, column: 64, scope: !7)
!143 = !DILocation(line: 111, column: 56, scope: !7)
!144 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !126)
!145 = !DILocation(line: 112, column: 25, scope: !7)
!146 = !DILocation(line: 112, column: 56, scope: !7)
!147 = !DILocation(line: 112, column: 4, scope: !7)
