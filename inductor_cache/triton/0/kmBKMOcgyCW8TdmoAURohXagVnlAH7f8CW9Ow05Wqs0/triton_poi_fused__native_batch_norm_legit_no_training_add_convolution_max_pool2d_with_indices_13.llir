; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = shl i32 %14, 2, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %18, 8, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 8, !dbg !15
  %22 = shl i32 %14, 3, !dbg !16
  %23 = and i32 %22, 248, !dbg !16
  %24 = and i32 %17, 252, !dbg !16
  %25 = and i32 %14, 255, !dbg !16
  %26 = or disjoint i32 %21, %23, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %21, %25, !dbg !17
  %29 = icmp slt i32 %26, 728, !dbg !18
  %30 = icmp slt i32 %28, 728, !dbg !18
  %31 = sdiv i32 %18, 16, !dbg !19
  %32 = sdiv i32 %19, 16, !dbg !19
  %33 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %34 = insertelement <2 x i32> %33, i32 %18, i64 1, !dbg !20
  %35 = srem <2 x i32> %34, splat (i32 16), !dbg !20
  %36 = mul i32 %18, 728, !dbg !21
  %37 = mul i32 %19, 728, !dbg !21
  %38 = add i32 %26, %36, !dbg !22
  %39 = add i32 %36, %27, !dbg !22
  %40 = add i32 %26, %37, !dbg !22
  %41 = add i32 %37, %27, !dbg !22
  %42 = sext i32 %38 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %39 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %40 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %41 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %29) #4, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %29) #4, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %29) #4, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %29) #4, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !24
  %70 = and i32 %22, 2040, !dbg !24
  %71 = and i32 %17, 1020, !dbg !24
  %72 = lshr i32 %70, 8, !dbg !24
  %73 = or disjoint i32 %72, %70, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  %76 = or disjoint i32 %70, 1, !dbg !24
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %76, !dbg !24
  %79 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !24
  %80 = or disjoint i32 %70, 2, !dbg !24
  %81 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %80, !dbg !24
  %82 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !24
  %83 = or disjoint i32 %70, 3, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %83, !dbg !24
  %85 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !24
  %86 = or disjoint i32 %70, 4, !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %86, !dbg !24
  %88 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !24
  %89 = or disjoint i32 %70, 5, !dbg !24
  %90 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %89, !dbg !24
  %91 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !24
  %92 = or disjoint i32 %70, 6, !dbg !24
  %93 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %92, !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !24
  %95 = or disjoint i32 %70, 7, !dbg !24
  %96 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %95, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %98 = lshr i32 %71, 8, !dbg !24
  %99 = or disjoint i32 %98, %71, !dbg !24
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !24
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !24
  %102 = or disjoint i32 %71, 1, !dbg !24
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !24
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %102, !dbg !24
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !24
  %106 = or disjoint i32 %71, 2, !dbg !24
  %107 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %106, !dbg !24
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !24
  %109 = or disjoint i32 %71, 3, !dbg !24
  %110 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %109, !dbg !24
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !24
  %112 = or disjoint i32 %71, 1024, !dbg !24
  %113 = lshr i32 %112, 8, !dbg !24
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !24
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %112, !dbg !24
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !24
  %117 = or disjoint i32 %71, 1025, !dbg !24
  %118 = lshr i32 %117, 8, !dbg !24
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !24
  %120 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %117, !dbg !24
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !24
  %122 = or disjoint i32 %71, 1026, !dbg !24
  %123 = lshr i32 %122, 8, !dbg !24
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !24
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %122, !dbg !24
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !24
  %127 = or disjoint i32 %71, 1027, !dbg !24
  %128 = lshr i32 %127, 8, !dbg !24
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !24
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %127, !dbg !24
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %132 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %132, i1 true) #4, !dbg !24
  %133 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %133, i1 true) #4, !dbg !24
  %134 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %134, i1 true) #4, !dbg !24
  %135 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %135, i1 true) #4, !dbg !24
  %136 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %136, i1 true) #4, !dbg !24
  %137 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %137, i1 true) #4, !dbg !24
  %138 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %138, i1 true) #4, !dbg !24
  %139 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %139, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %140 = load float, ptr addrspace(3) %100, align 4, !dbg !24
  %141 = load float, ptr addrspace(3) %104, align 4, !dbg !24
  %142 = load float, ptr addrspace(3) %107, align 4, !dbg !24
  %143 = load float, ptr addrspace(3) %110, align 4, !dbg !24
  %144 = load float, ptr addrspace(3) %115, align 4, !dbg !24
  %145 = load float, ptr addrspace(3) %120, align 4, !dbg !24
  %146 = load float, ptr addrspace(3) %125, align 4, !dbg !24
  %147 = load float, ptr addrspace(3) %130, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !24
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !24
  %150 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 1028, !dbg !24
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !24
  %152 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 2056, !dbg !24
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !24
  %154 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 3084, !dbg !24
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !24
  %156 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 4112, !dbg !24
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !24
  %158 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 5140, !dbg !24
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !24
  %160 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 6168, !dbg !24
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !24
  %162 = getelementptr inbounds i8, ptr addrspace(3) %148, i32 7196, !dbg !24
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %132, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %133, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %134, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %135, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %136, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %137, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %138, i1 true) #4, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %139, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %164 = load float, ptr addrspace(3) %148, align 4, !dbg !24
  %165 = load float, ptr addrspace(3) %150, align 4, !dbg !24
  %166 = load float, ptr addrspace(3) %152, align 4, !dbg !24
  %167 = load float, ptr addrspace(3) %154, align 4, !dbg !24
  %168 = load float, ptr addrspace(3) %156, align 4, !dbg !24
  %169 = load float, ptr addrspace(3) %158, align 4, !dbg !24
  %170 = load float, ptr addrspace(3) %160, align 4, !dbg !24
  %171 = load float, ptr addrspace(3) %162, align 4, !dbg !24
  %172 = sext i32 %28 to i64, !dbg !25
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !25
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %30) #4, !dbg !26
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !27
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %30) #4, !dbg !28
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %172, !dbg !29
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %30) #4, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %172, !dbg !31
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %30) #4, !dbg !32
  %182 = getelementptr float, ptr addrspace(1) %6, i64 %172, !dbg !33
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %30) #4, !dbg !34
  %184 = extractelement <2 x i32> %35, i64 0, !dbg !35
  %185 = icmp sgt i32 %184, 0, !dbg !36
  %186 = extractelement <2 x i32> %35, i64 1, !dbg !37
  %187 = icmp sgt i32 %186, 0, !dbg !38
  %188 = and i1 %187, %185, !dbg !39
  %189 = add i32 %26, -12376, !dbg !40
  %190 = add i32 %26, -12372, !dbg !40
  %191 = add i32 %189, %36, !dbg !41
  %192 = add i32 %36, %190, !dbg !41
  %193 = add i32 %189, %37, !dbg !41
  %194 = add i32 %190, %37, !dbg !41
  %195 = sext i32 %191 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !42
  %197 = sext i32 %192 to i64, !dbg !42
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !42
  %199 = sext i32 %193 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !42
  %201 = sext i32 %194 to i64, !dbg !42
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !42
  %203 = and i1 %29, %188, !dbg !43
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #4, !dbg !44
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #4, !dbg !44
  %206 = icmp sgt i32 %186, -1, !dbg !45
  %207 = and i1 %206, %185, !dbg !46
  %208 = add i32 %26, -11648, !dbg !47
  %209 = add i32 %26, -11644, !dbg !47
  %210 = add i32 %208, %36, !dbg !48
  %211 = add i32 %36, %209, !dbg !48
  %212 = add i32 %208, %37, !dbg !48
  %213 = add i32 %209, %37, !dbg !48
  %214 = sext i32 %210 to i64, !dbg !49
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !49
  %216 = sext i32 %211 to i64, !dbg !49
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !49
  %218 = sext i32 %212 to i64, !dbg !49
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !49
  %220 = sext i32 %213 to i64, !dbg !49
  %221 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !49
  %222 = and i1 %29, %207, !dbg !50
  %223 = icmp ult i32 %186, 15, !dbg !51
  %224 = and i1 %223, %185, !dbg !52
  %225 = add i32 %26, -10920, !dbg !53
  %226 = add i32 %26, -10916, !dbg !53
  %227 = add i32 %225, %36, !dbg !54
  %228 = add i32 %36, %226, !dbg !54
  %229 = add i32 %225, %37, !dbg !54
  %230 = add i32 %226, %37, !dbg !54
  %231 = sext i32 %227 to i64, !dbg !55
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !55
  %233 = sext i32 %228 to i64, !dbg !55
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !55
  %235 = sext i32 %229 to i64, !dbg !55
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !55
  %237 = sext i32 %230 to i64, !dbg !55
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !55
  %239 = and i1 %29, %224, !dbg !56
  %240 = icmp sgt i32 %184, -1, !dbg !57
  %241 = and i1 %187, %240, !dbg !58
  %242 = add i32 %26, -728, !dbg !59
  %243 = add i32 %26, -724, !dbg !59
  %244 = add i32 %242, %36, !dbg !60
  %245 = add i32 %36, %243, !dbg !60
  %246 = add i32 %242, %37, !dbg !60
  %247 = add i32 %243, %37, !dbg !60
  %248 = sext i32 %244 to i64, !dbg !61
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !61
  %250 = sext i32 %245 to i64, !dbg !61
  %251 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !61
  %252 = sext i32 %246 to i64, !dbg !61
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !61
  %254 = sext i32 %247 to i64, !dbg !61
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !61
  %256 = and i1 %29, %241, !dbg !62
  %257 = or i32 %184, %186, !dbg !37
  %258 = icmp sgt i32 %257, -1, !dbg !37
  %259 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !63
  %260 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !63
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !63
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !63
  %263 = and i1 %29, %258, !dbg !64
  %264 = and i1 %223, %240, !dbg !65
  %265 = add i32 %26, 728, !dbg !66
  %266 = add i32 %26, 732, !dbg !66
  %267 = add i32 %265, %36, !dbg !67
  %268 = add i32 %36, %266, !dbg !67
  %269 = add i32 %265, %37, !dbg !67
  %270 = add i32 %266, %37, !dbg !67
  %271 = sext i32 %267 to i64, !dbg !68
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !68
  %273 = sext i32 %268 to i64, !dbg !68
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %273, !dbg !68
  %275 = sext i32 %269 to i64, !dbg !68
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !68
  %277 = sext i32 %270 to i64, !dbg !68
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !68
  %279 = and i1 %29, %264, !dbg !69
  %280 = add nsw i32 %184, 1, !dbg !35
  %281 = icmp ult i32 %280, 16, !dbg !35
  %282 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %283 = insertelement <2 x i32> %282, i32 %19, i64 1, !dbg !20
  %284 = srem <2 x i32> %283, splat (i32 16), !dbg !20
  %285 = extractelement <2 x i32> %284, i64 0, !dbg !37
  %286 = icmp sgt i32 %285, 0, !dbg !36
  %287 = extractelement <2 x i32> %284, i64 1, !dbg !37
  %288 = icmp sgt i32 %287, 0, !dbg !38
  %289 = and i1 %288, %286, !dbg !39
  %290 = and i1 %289, %29, !dbg !43
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290) #4, !dbg !44
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290) #4, !dbg !44
  %293 = icmp sgt i32 %287, -1, !dbg !45
  %294 = and i1 %293, %286, !dbg !46
  %295 = and i1 %294, %29, !dbg !50
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222) #4, !dbg !70
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %217, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222, i32 -8388608, i1 %222) #4, !dbg !70
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295) #4, !dbg !70
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295, i32 -8388608, i1 %295) #4, !dbg !70
  %300 = add nsw <2 x i32> %284, splat (i32 1), !dbg !35
  %301 = extractelement <2 x i32> %300, i64 1, !dbg !71
  %302 = icmp ult i32 %301, 16, !dbg !51
  %303 = and i1 %286, %302, !dbg !52
  %304 = and i1 %303, %29, !dbg !56
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %232, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239) #4, !dbg !72
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239, i32 -8388608, i1 %239) #4, !dbg !72
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304) #4, !dbg !72
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %238, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304) #4, !dbg !72
  %309 = icmp sgt i32 %285, -1, !dbg !57
  %310 = and i1 %288, %309, !dbg !58
  %311 = and i1 %310, %29, !dbg !62
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #4, !dbg !73
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %251, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256, i32 -8388608, i1 %256) #4, !dbg !73
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %253, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311) #4, !dbg !73
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311, i32 -8388608, i1 %311) #4, !dbg !73
  %316 = or i32 %285, %287, !dbg !37
  %317 = icmp sgt i32 %316, -1, !dbg !37
  %318 = and i1 %317, %29, !dbg !64
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %259, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263) #4, !dbg !74
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %260, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263, i32 -8388608, i1 %263) #4, !dbg !74
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318) #4, !dbg !74
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %262, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318, i32 -8388608, i1 %318) #4, !dbg !74
  %323 = and i1 %309, %302, !dbg !65
  %324 = and i1 %323, %29, !dbg !69
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %272, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279) #4, !dbg !75
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %274, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279, i32 -8388608, i1 %279) #4, !dbg !75
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %276, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324) #4, !dbg !75
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324, i32 -8388608, i1 %324) #4, !dbg !75
  %329 = extractelement <2 x i32> %300, i64 0, !dbg !71
  %330 = icmp ult i32 %329, 16, !dbg !35
  %331 = and i1 %187, %281, !dbg !76
  %332 = and i1 %288, %330, !dbg !76
  %333 = add i32 %26, 10920, !dbg !77
  %334 = add i32 %26, 10924, !dbg !77
  %335 = add i32 %333, %36, !dbg !78
  %336 = add i32 %36, %334, !dbg !78
  %337 = add i32 %333, %37, !dbg !78
  %338 = add i32 %334, %37, !dbg !78
  %339 = sext i32 %335 to i64, !dbg !79
  %340 = getelementptr float, ptr addrspace(1) %1, i64 %339, !dbg !79
  %341 = sext i32 %336 to i64, !dbg !79
  %342 = getelementptr float, ptr addrspace(1) %1, i64 %341, !dbg !79
  %343 = sext i32 %337 to i64, !dbg !79
  %344 = getelementptr float, ptr addrspace(1) %1, i64 %343, !dbg !79
  %345 = sext i32 %338 to i64, !dbg !79
  %346 = getelementptr float, ptr addrspace(1) %1, i64 %345, !dbg !79
  %347 = and i1 %29, %331, !dbg !80
  %348 = and i1 %332, %29, !dbg !80
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347) #4, !dbg !81
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %342, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347, i32 -8388608, i1 %347) #4, !dbg !81
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %344, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348) #4, !dbg !81
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %346, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348, i32 -8388608, i1 %348) #4, !dbg !81
  %353 = and i1 %206, %281, !dbg !82
  %354 = and i1 %293, %330, !dbg !82
  %355 = add i32 %26, 11648, !dbg !83
  %356 = add i32 %26, 11652, !dbg !83
  %357 = add i32 %355, %36, !dbg !84
  %358 = add i32 %36, %356, !dbg !84
  %359 = add i32 %355, %37, !dbg !84
  %360 = add i32 %356, %37, !dbg !84
  %361 = sext i32 %357 to i64, !dbg !85
  %362 = getelementptr float, ptr addrspace(1) %1, i64 %361, !dbg !85
  %363 = sext i32 %358 to i64, !dbg !85
  %364 = getelementptr float, ptr addrspace(1) %1, i64 %363, !dbg !85
  %365 = sext i32 %359 to i64, !dbg !85
  %366 = getelementptr float, ptr addrspace(1) %1, i64 %365, !dbg !85
  %367 = sext i32 %360 to i64, !dbg !85
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !85
  %369 = and i1 %29, %353, !dbg !86
  %370 = and i1 %354, %29, !dbg !86
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %362, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #4, !dbg !87
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %364, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #4, !dbg !87
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %366, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #4, !dbg !87
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #4, !dbg !87
  %375 = and i1 %223, %281, !dbg !71
  %376 = or i32 %329, %301, !dbg !71
  %377 = icmp ult i32 %376, 16, !dbg !71
  %378 = add i32 %26, 12376, !dbg !88
  %379 = add i32 %26, 12380, !dbg !88
  %380 = add i32 %378, %36, !dbg !89
  %381 = add i32 %36, %379, !dbg !89
  %382 = add i32 %378, %37, !dbg !89
  %383 = add i32 %379, %37, !dbg !89
  %384 = sext i32 %380 to i64, !dbg !90
  %385 = getelementptr float, ptr addrspace(1) %1, i64 %384, !dbg !90
  %386 = sext i32 %381 to i64, !dbg !90
  %387 = getelementptr float, ptr addrspace(1) %1, i64 %386, !dbg !90
  %388 = sext i32 %382 to i64, !dbg !90
  %389 = getelementptr float, ptr addrspace(1) %1, i64 %388, !dbg !90
  %390 = sext i32 %383 to i64, !dbg !90
  %391 = getelementptr float, ptr addrspace(1) %1, i64 %390, !dbg !90
  %392 = and i1 %29, %375, !dbg !91
  %393 = and i1 %377, %29, !dbg !91
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392) #4, !dbg !92
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392, i32 -8388608, i1 %392) #4, !dbg !92
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393) #4, !dbg !92
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %391, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393, i32 -8388608, i1 %393) #4, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %398 = insertelement <1 x i32> poison, i32 %174, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %398, i1 true) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !93
  %400 = load float, ptr addrspace(3) %399, align 16, !dbg !93
  %401 = or disjoint i32 %24, 1, !dbg !93
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !93
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !93
  %404 = or disjoint i32 %24, 2, !dbg !93
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %404, !dbg !93
  %406 = load float, ptr addrspace(3) %405, align 8, !dbg !93
  %407 = or disjoint i32 %24, 3, !dbg !93
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !93
  %409 = load float, ptr addrspace(3) %408, align 4, !dbg !93
  %410 = fadd float %179, 0x3EE4F8B580000000, !dbg !94
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !95
  %.not.i = icmp eq i32 %411, 0, !dbg !95
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !95
  %.not1.i = icmp eq i32 %412, 0, !dbg !95
  br i1 %.not.i, label %418, label %413, !dbg !95

413:                                              ; preds = %11
  br i1 %.not1.i, label %416, label %414, !dbg !95

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %410) #4, !dbg !95
  br label %__nv_sqrtf.exit, !dbg !95

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %410) #4, !dbg !95
  br label %__nv_sqrtf.exit, !dbg !95

418:                                              ; preds = %11
  br i1 %.not1.i, label %421, label %419, !dbg !95

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.f(float %410) #4, !dbg !95
  br label %__nv_sqrtf.exit, !dbg !95

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.f(float %410) #4, !dbg !95
  br label %__nv_sqrtf.exit, !dbg !95

__nv_sqrtf.exit:                                  ; preds = %414, %416, %419, %421
  %.0.i = phi float [ %415, %414 ], [ %417, %416 ], [ %420, %419 ], [ %422, %421 ], !dbg !95
  %423 = bitcast i32 %174 to float, !dbg !26
  %424 = fadd float %171, %423, !dbg !93
  %425 = bitcast i32 %176 to float, !dbg !28
  %426 = fsub float %424, %425, !dbg !96
  %427 = fadd float %170, %423, !dbg !93
  %428 = fsub float %427, %425, !dbg !96
  %429 = fadd float %169, %423, !dbg !93
  %430 = fsub float %429, %425, !dbg !96
  %431 = fadd float %168, %423, !dbg !93
  %432 = fsub float %431, %425, !dbg !96
  %433 = fadd float %167, %423, !dbg !93
  %434 = fsub float %433, %425, !dbg !96
  %435 = fadd float %166, %423, !dbg !93
  %436 = fsub float %435, %425, !dbg !96
  %437 = fadd float %165, %423, !dbg !93
  %438 = fsub float %437, %425, !dbg !96
  %439 = fadd float %164, %423, !dbg !93
  %440 = fsub float %439, %425, !dbg !96
  %441 = fadd float %163, %423, !dbg !93
  %442 = fsub float %441, %425, !dbg !96
  %443 = fadd float %161, %423, !dbg !93
  %444 = fsub float %443, %425, !dbg !96
  %445 = fadd float %159, %423, !dbg !93
  %446 = fsub float %445, %425, !dbg !96
  %447 = fadd float %157, %423, !dbg !93
  %448 = fsub float %447, %425, !dbg !96
  %449 = fadd float %155, %423, !dbg !93
  %450 = fsub float %449, %425, !dbg !96
  %451 = fadd float %153, %423, !dbg !93
  %452 = fsub float %451, %425, !dbg !96
  %453 = fadd float %151, %423, !dbg !93
  %454 = fsub float %453, %425, !dbg !96
  %455 = fadd float %149, %423, !dbg !93
  %456 = fsub float %455, %425, !dbg !96
  %457 = fadd float %147, %409, !dbg !93
  %458 = fadd float %146, %406, !dbg !93
  %459 = fadd float %145, %403, !dbg !93
  %460 = fadd float %144, %400, !dbg !93
  %461 = fadd float %143, %409, !dbg !93
  %462 = fadd float %142, %406, !dbg !93
  %463 = fadd float %141, %403, !dbg !93
  %464 = fadd float %140, %400, !dbg !93
  %465 = fadd float %131, %409, !dbg !93
  %466 = fadd float %126, %406, !dbg !93
  %467 = fadd float %121, %403, !dbg !93
  %468 = fadd float %116, %400, !dbg !93
  %469 = fadd float %111, %409, !dbg !93
  %470 = fadd float %108, %406, !dbg !93
  %471 = fadd float %105, %403, !dbg !93
  %472 = fadd float %101, %400, !dbg !93
  %473 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !70
  %474 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !44
  %475 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !72
  %476 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !73
  %477 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !74
  %478 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !75
  %479 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !81
  %480 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !87
  %481 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !92
  %482 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !70
  %483 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !44
  %484 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !72
  %485 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !73
  %486 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !74
  %487 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !75
  %488 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !81
  %489 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !87
  %490 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !92
  %491 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !70
  %492 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !44
  %493 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !72
  %494 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !73
  %495 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !74
  %496 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !75
  %497 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !81
  %498 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !87
  %499 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !92
  %500 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !70
  %501 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !44
  %502 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !72
  %503 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !73
  %504 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !74
  %505 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !75
  %506 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !81
  %507 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !87
  %508 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !92
  %509 = insertelement <4 x i32> poison, i32 %500, i64 0, !dbg !70
  %510 = insertelement <4 x i32> %509, i32 %491, i64 1, !dbg !70
  %511 = insertelement <4 x i32> %510, i32 %482, i64 2, !dbg !70
  %512 = insertelement <4 x i32> %511, i32 %473, i64 3, !dbg !70
  %513 = bitcast <4 x i32> %512 to <4 x float>, !dbg !70
  %514 = insertelement <4 x i32> poison, i32 %501, i64 0, !dbg !44
  %515 = insertelement <4 x i32> %514, i32 %492, i64 1, !dbg !44
  %516 = insertelement <4 x i32> %515, i32 %483, i64 2, !dbg !44
  %517 = insertelement <4 x i32> %516, i32 %474, i64 3, !dbg !44
  %518 = bitcast <4 x i32> %517 to <4 x float>, !dbg !44
  %519 = fcmp ogt <4 x float> %513, %518, !dbg !97
  %520 = insertelement <4 x i32> poison, i32 %503, i64 0, !dbg !73
  %521 = insertelement <4 x i32> %520, i32 %494, i64 1, !dbg !73
  %522 = insertelement <4 x i32> %521, i32 %485, i64 2, !dbg !73
  %523 = insertelement <4 x i32> %522, i32 %476, i64 3, !dbg !73
  %524 = bitcast <4 x i32> %523 to <4 x float>, !dbg !73
  %525 = fcmp uno <4 x float> %513, zeroinitializer, !dbg !101
  %526 = or <4 x i1> %519, %525, !dbg !102
  %.v = select <4 x i1> %526, <4 x i32> %512, <4 x i32> %517, !dbg !103
  %527 = bitcast <4 x i32> %.v to <4 x float>, !dbg !103
  %528 = insertelement <4 x i32> poison, i32 %502, i64 0, !dbg !72
  %529 = insertelement <4 x i32> %528, i32 %493, i64 1, !dbg !72
  %530 = insertelement <4 x i32> %529, i32 %484, i64 2, !dbg !72
  %531 = insertelement <4 x i32> %530, i32 %475, i64 3, !dbg !72
  %532 = bitcast <4 x i32> %531 to <4 x float>, !dbg !72
  %533 = fcmp olt <4 x float> %527, %532, !dbg !104
  %534 = fcmp uno <4 x float> %532, zeroinitializer, !dbg !106
  %535 = or <4 x i1> %533, %534, !dbg !107
  %.v38 = select <4 x i1> %535, <4 x i32> %531, <4 x i32> %.v, !dbg !108
  %536 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !108
  %537 = fcmp olt <4 x float> %536, %524, !dbg !109
  %538 = insertelement <4 x i32> poison, i32 %504, i64 0, !dbg !74
  %539 = insertelement <4 x i32> %538, i32 %495, i64 1, !dbg !74
  %540 = insertelement <4 x i32> %539, i32 %486, i64 2, !dbg !74
  %541 = insertelement <4 x i32> %540, i32 %477, i64 3, !dbg !74
  %542 = bitcast <4 x i32> %541 to <4 x float>, !dbg !74
  %543 = fcmp uno <4 x float> %524, zeroinitializer, !dbg !111
  %544 = or <4 x i1> %537, %543, !dbg !112
  %.v39 = select <4 x i1> %544, <4 x i32> %523, <4 x i32> %.v38, !dbg !113
  %545 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !113
  %546 = fcmp olt <4 x float> %545, %542, !dbg !114
  %547 = fcmp uno <4 x float> %542, zeroinitializer, !dbg !116
  %548 = or <4 x i1> %546, %547, !dbg !117
  %.v40 = select <4 x i1> %548, <4 x i32> %541, <4 x i32> %.v39, !dbg !118
  %549 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !118
  %550 = insertelement <4 x i32> poison, i32 %505, i64 0, !dbg !75
  %551 = insertelement <4 x i32> %550, i32 %496, i64 1, !dbg !75
  %552 = insertelement <4 x i32> %551, i32 %487, i64 2, !dbg !75
  %553 = insertelement <4 x i32> %552, i32 %478, i64 3, !dbg !75
  %554 = bitcast <4 x i32> %553 to <4 x float>, !dbg !75
  %555 = fcmp olt <4 x float> %549, %554, !dbg !119
  %556 = fcmp uno <4 x float> %554, zeroinitializer, !dbg !121
  %557 = or <4 x i1> %555, %556, !dbg !122
  %.v41 = select <4 x i1> %557, <4 x i32> %553, <4 x i32> %.v40, !dbg !123
  %558 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !123
  %559 = insertelement <4 x i32> poison, i32 %506, i64 0, !dbg !81
  %560 = insertelement <4 x i32> %559, i32 %497, i64 1, !dbg !81
  %561 = insertelement <4 x i32> %560, i32 %488, i64 2, !dbg !81
  %562 = insertelement <4 x i32> %561, i32 %479, i64 3, !dbg !81
  %563 = bitcast <4 x i32> %562 to <4 x float>, !dbg !81
  %564 = fcmp olt <4 x float> %558, %563, !dbg !124
  %565 = fcmp uno <4 x float> %563, zeroinitializer, !dbg !126
  %566 = or <4 x i1> %564, %565, !dbg !127
  %.v42 = select <4 x i1> %566, <4 x i32> %562, <4 x i32> %.v41, !dbg !128
  %567 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !128
  %568 = insertelement <4 x i32> poison, i32 %507, i64 0, !dbg !87
  %569 = insertelement <4 x i32> %568, i32 %498, i64 1, !dbg !87
  %570 = insertelement <4 x i32> %569, i32 %489, i64 2, !dbg !87
  %571 = insertelement <4 x i32> %570, i32 %480, i64 3, !dbg !87
  %572 = bitcast <4 x i32> %571 to <4 x float>, !dbg !87
  %573 = fcmp olt <4 x float> %567, %572, !dbg !129
  %574 = fcmp uno <4 x float> %572, zeroinitializer, !dbg !131
  %575 = or <4 x i1> %573, %574, !dbg !132
  %.v43 = select <4 x i1> %575, <4 x i32> %571, <4 x i32> %.v42, !dbg !133
  %576 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !133
  %577 = insertelement <4 x i32> poison, i32 %508, i64 0, !dbg !92
  %578 = insertelement <4 x i32> %577, i32 %499, i64 1, !dbg !92
  %579 = insertelement <4 x i32> %578, i32 %490, i64 2, !dbg !92
  %580 = insertelement <4 x i32> %579, i32 %481, i64 3, !dbg !92
  %581 = bitcast <4 x i32> %580 to <4 x float>, !dbg !92
  %582 = fcmp olt <4 x float> %576, %581, !dbg !134
  %583 = zext <4 x i1> %519 to <4 x i8>, !dbg !136
  %584 = select <4 x i1> %533, <4 x i8> splat (i8 2), <4 x i8> %583, !dbg !137
  %585 = select <4 x i1> %537, <4 x i8> splat (i8 3), <4 x i8> %584, !dbg !138
  %586 = select <4 x i1> %546, <4 x i8> splat (i8 4), <4 x i8> %585, !dbg !139
  %587 = select <4 x i1> %555, <4 x i8> splat (i8 5), <4 x i8> %586, !dbg !140
  %588 = select <4 x i1> %564, <4 x i8> splat (i8 6), <4 x i8> %587, !dbg !141
  %589 = select <4 x i1> %573, <4 x i8> splat (i8 7), <4 x i8> %588, !dbg !142
  %590 = select <4 x i1> %582, <4 x i8> splat (i8 8), <4 x i8> %589, !dbg !143
  %591 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !70
  %592 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !44
  %593 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !72
  %594 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !73
  %595 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !74
  %596 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !75
  %597 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !81
  %598 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !87
  %599 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !92
  %600 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !70
  %601 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !44
  %602 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !72
  %603 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !73
  %604 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !74
  %605 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !75
  %606 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !81
  %607 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !87
  %608 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !92
  %609 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !70
  %610 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !44
  %611 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !72
  %612 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !73
  %613 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !74
  %614 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !75
  %615 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !81
  %616 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !87
  %617 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !92
  %618 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !70
  %619 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !44
  %620 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !72
  %621 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !73
  %622 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !74
  %623 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !75
  %624 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !81
  %625 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !87
  %626 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !92
  %627 = insertelement <4 x i32> poison, i32 %618, i64 0, !dbg !70
  %628 = insertelement <4 x i32> %627, i32 %609, i64 1, !dbg !70
  %629 = insertelement <4 x i32> %628, i32 %600, i64 2, !dbg !70
  %630 = insertelement <4 x i32> %629, i32 %591, i64 3, !dbg !70
  %631 = bitcast <4 x i32> %630 to <4 x float>, !dbg !70
  %632 = insertelement <4 x i32> poison, i32 %619, i64 0, !dbg !44
  %633 = insertelement <4 x i32> %632, i32 %610, i64 1, !dbg !44
  %634 = insertelement <4 x i32> %633, i32 %601, i64 2, !dbg !44
  %635 = insertelement <4 x i32> %634, i32 %592, i64 3, !dbg !44
  %636 = bitcast <4 x i32> %635 to <4 x float>, !dbg !44
  %637 = fcmp ogt <4 x float> %631, %636, !dbg !97
  %638 = insertelement <4 x i32> poison, i32 %621, i64 0, !dbg !73
  %639 = insertelement <4 x i32> %638, i32 %612, i64 1, !dbg !73
  %640 = insertelement <4 x i32> %639, i32 %603, i64 2, !dbg !73
  %641 = insertelement <4 x i32> %640, i32 %594, i64 3, !dbg !73
  %642 = bitcast <4 x i32> %641 to <4 x float>, !dbg !73
  %643 = fcmp uno <4 x float> %631, zeroinitializer, !dbg !101
  %644 = or <4 x i1> %637, %643, !dbg !102
  %.v44 = select <4 x i1> %644, <4 x i32> %630, <4 x i32> %635, !dbg !103
  %645 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !103
  %646 = insertelement <4 x i32> poison, i32 %620, i64 0, !dbg !72
  %647 = insertelement <4 x i32> %646, i32 %611, i64 1, !dbg !72
  %648 = insertelement <4 x i32> %647, i32 %602, i64 2, !dbg !72
  %649 = insertelement <4 x i32> %648, i32 %593, i64 3, !dbg !72
  %650 = bitcast <4 x i32> %649 to <4 x float>, !dbg !72
  %651 = fcmp olt <4 x float> %645, %650, !dbg !104
  %652 = fcmp uno <4 x float> %650, zeroinitializer, !dbg !106
  %653 = or <4 x i1> %651, %652, !dbg !107
  %.v45 = select <4 x i1> %653, <4 x i32> %649, <4 x i32> %.v44, !dbg !108
  %654 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !108
  %655 = fcmp olt <4 x float> %654, %642, !dbg !109
  %656 = insertelement <4 x i32> poison, i32 %622, i64 0, !dbg !74
  %657 = insertelement <4 x i32> %656, i32 %613, i64 1, !dbg !74
  %658 = insertelement <4 x i32> %657, i32 %604, i64 2, !dbg !74
  %659 = insertelement <4 x i32> %658, i32 %595, i64 3, !dbg !74
  %660 = bitcast <4 x i32> %659 to <4 x float>, !dbg !74
  %661 = fcmp uno <4 x float> %642, zeroinitializer, !dbg !111
  %662 = or <4 x i1> %655, %661, !dbg !112
  %.v46 = select <4 x i1> %662, <4 x i32> %641, <4 x i32> %.v45, !dbg !113
  %663 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !113
  %664 = fcmp olt <4 x float> %663, %660, !dbg !114
  %665 = fcmp uno <4 x float> %660, zeroinitializer, !dbg !116
  %666 = or <4 x i1> %664, %665, !dbg !117
  %.v47 = select <4 x i1> %666, <4 x i32> %659, <4 x i32> %.v46, !dbg !118
  %667 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !118
  %668 = insertelement <4 x i32> poison, i32 %623, i64 0, !dbg !75
  %669 = insertelement <4 x i32> %668, i32 %614, i64 1, !dbg !75
  %670 = insertelement <4 x i32> %669, i32 %605, i64 2, !dbg !75
  %671 = insertelement <4 x i32> %670, i32 %596, i64 3, !dbg !75
  %672 = bitcast <4 x i32> %671 to <4 x float>, !dbg !75
  %673 = fcmp olt <4 x float> %667, %672, !dbg !119
  %674 = fcmp uno <4 x float> %672, zeroinitializer, !dbg !121
  %675 = or <4 x i1> %673, %674, !dbg !122
  %.v48 = select <4 x i1> %675, <4 x i32> %671, <4 x i32> %.v47, !dbg !123
  %676 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !123
  %677 = insertelement <4 x i32> poison, i32 %624, i64 0, !dbg !81
  %678 = insertelement <4 x i32> %677, i32 %615, i64 1, !dbg !81
  %679 = insertelement <4 x i32> %678, i32 %606, i64 2, !dbg !81
  %680 = insertelement <4 x i32> %679, i32 %597, i64 3, !dbg !81
  %681 = bitcast <4 x i32> %680 to <4 x float>, !dbg !81
  %682 = fcmp olt <4 x float> %676, %681, !dbg !124
  %683 = fcmp uno <4 x float> %681, zeroinitializer, !dbg !126
  %684 = or <4 x i1> %682, %683, !dbg !127
  %.v49 = select <4 x i1> %684, <4 x i32> %680, <4 x i32> %.v48, !dbg !128
  %685 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !128
  %686 = insertelement <4 x i32> poison, i32 %625, i64 0, !dbg !87
  %687 = insertelement <4 x i32> %686, i32 %616, i64 1, !dbg !87
  %688 = insertelement <4 x i32> %687, i32 %607, i64 2, !dbg !87
  %689 = insertelement <4 x i32> %688, i32 %598, i64 3, !dbg !87
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !87
  %691 = fcmp olt <4 x float> %685, %690, !dbg !129
  %692 = fcmp uno <4 x float> %690, zeroinitializer, !dbg !131
  %693 = or <4 x i1> %691, %692, !dbg !132
  %.v50 = select <4 x i1> %693, <4 x i32> %689, <4 x i32> %.v49, !dbg !133
  %694 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !133
  %695 = insertelement <4 x i32> poison, i32 %626, i64 0, !dbg !92
  %696 = insertelement <4 x i32> %695, i32 %617, i64 1, !dbg !92
  %697 = insertelement <4 x i32> %696, i32 %608, i64 2, !dbg !92
  %698 = insertelement <4 x i32> %697, i32 %599, i64 3, !dbg !92
  %699 = bitcast <4 x i32> %698 to <4 x float>, !dbg !92
  %700 = fcmp olt <4 x float> %694, %699, !dbg !134
  %701 = zext <4 x i1> %637 to <4 x i8>, !dbg !136
  %702 = select <4 x i1> %651, <4 x i8> splat (i8 2), <4 x i8> %701, !dbg !137
  %703 = select <4 x i1> %655, <4 x i8> splat (i8 3), <4 x i8> %702, !dbg !138
  %704 = select <4 x i1> %664, <4 x i8> splat (i8 4), <4 x i8> %703, !dbg !139
  %705 = select <4 x i1> %673, <4 x i8> splat (i8 5), <4 x i8> %704, !dbg !140
  %706 = select <4 x i1> %682, <4 x i8> splat (i8 6), <4 x i8> %705, !dbg !141
  %707 = select <4 x i1> %691, <4 x i8> splat (i8 7), <4 x i8> %706, !dbg !142
  %708 = select <4 x i1> %700, <4 x i8> splat (i8 8), <4 x i8> %707, !dbg !143
  %709 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !70
  %710 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !44
  %711 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !72
  %712 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !73
  %713 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !74
  %714 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !75
  %715 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !81
  %716 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !87
  %717 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !92
  %718 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !70
  %719 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !44
  %720 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !72
  %721 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !73
  %722 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !74
  %723 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !75
  %724 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !81
  %725 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !87
  %726 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !92
  %727 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !70
  %728 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !44
  %729 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !72
  %730 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !73
  %731 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !74
  %732 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !75
  %733 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !81
  %734 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !87
  %735 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !92
  %736 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !70
  %737 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !44
  %738 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !72
  %739 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !73
  %740 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !74
  %741 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !75
  %742 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !81
  %743 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !87
  %744 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !92
  %745 = insertelement <4 x i32> poison, i32 %736, i64 0, !dbg !70
  %746 = insertelement <4 x i32> %745, i32 %727, i64 1, !dbg !70
  %747 = insertelement <4 x i32> %746, i32 %718, i64 2, !dbg !70
  %748 = insertelement <4 x i32> %747, i32 %709, i64 3, !dbg !70
  %749 = bitcast <4 x i32> %748 to <4 x float>, !dbg !70
  %750 = insertelement <4 x i32> poison, i32 %737, i64 0, !dbg !44
  %751 = insertelement <4 x i32> %750, i32 %728, i64 1, !dbg !44
  %752 = insertelement <4 x i32> %751, i32 %719, i64 2, !dbg !44
  %753 = insertelement <4 x i32> %752, i32 %710, i64 3, !dbg !44
  %754 = bitcast <4 x i32> %753 to <4 x float>, !dbg !44
  %755 = fcmp ogt <4 x float> %749, %754, !dbg !97
  %756 = insertelement <4 x i32> poison, i32 %739, i64 0, !dbg !73
  %757 = insertelement <4 x i32> %756, i32 %730, i64 1, !dbg !73
  %758 = insertelement <4 x i32> %757, i32 %721, i64 2, !dbg !73
  %759 = insertelement <4 x i32> %758, i32 %712, i64 3, !dbg !73
  %760 = bitcast <4 x i32> %759 to <4 x float>, !dbg !73
  %761 = fcmp uno <4 x float> %749, zeroinitializer, !dbg !101
  %762 = or <4 x i1> %755, %761, !dbg !102
  %.v51 = select <4 x i1> %762, <4 x i32> %748, <4 x i32> %753, !dbg !103
  %763 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !103
  %764 = insertelement <4 x i32> poison, i32 %738, i64 0, !dbg !72
  %765 = insertelement <4 x i32> %764, i32 %729, i64 1, !dbg !72
  %766 = insertelement <4 x i32> %765, i32 %720, i64 2, !dbg !72
  %767 = insertelement <4 x i32> %766, i32 %711, i64 3, !dbg !72
  %768 = bitcast <4 x i32> %767 to <4 x float>, !dbg !72
  %769 = fcmp olt <4 x float> %763, %768, !dbg !104
  %770 = fcmp uno <4 x float> %768, zeroinitializer, !dbg !106
  %771 = or <4 x i1> %769, %770, !dbg !107
  %.v52 = select <4 x i1> %771, <4 x i32> %767, <4 x i32> %.v51, !dbg !108
  %772 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !108
  %773 = fcmp olt <4 x float> %772, %760, !dbg !109
  %774 = insertelement <4 x i32> poison, i32 %740, i64 0, !dbg !74
  %775 = insertelement <4 x i32> %774, i32 %731, i64 1, !dbg !74
  %776 = insertelement <4 x i32> %775, i32 %722, i64 2, !dbg !74
  %777 = insertelement <4 x i32> %776, i32 %713, i64 3, !dbg !74
  %778 = bitcast <4 x i32> %777 to <4 x float>, !dbg !74
  %779 = fcmp uno <4 x float> %760, zeroinitializer, !dbg !111
  %780 = or <4 x i1> %773, %779, !dbg !112
  %.v53 = select <4 x i1> %780, <4 x i32> %759, <4 x i32> %.v52, !dbg !113
  %781 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !113
  %782 = fcmp olt <4 x float> %781, %778, !dbg !114
  %783 = fcmp uno <4 x float> %778, zeroinitializer, !dbg !116
  %784 = or <4 x i1> %782, %783, !dbg !117
  %.v54 = select <4 x i1> %784, <4 x i32> %777, <4 x i32> %.v53, !dbg !118
  %785 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !118
  %786 = insertelement <4 x i32> poison, i32 %741, i64 0, !dbg !75
  %787 = insertelement <4 x i32> %786, i32 %732, i64 1, !dbg !75
  %788 = insertelement <4 x i32> %787, i32 %723, i64 2, !dbg !75
  %789 = insertelement <4 x i32> %788, i32 %714, i64 3, !dbg !75
  %790 = bitcast <4 x i32> %789 to <4 x float>, !dbg !75
  %791 = fcmp olt <4 x float> %785, %790, !dbg !119
  %792 = fcmp uno <4 x float> %790, zeroinitializer, !dbg !121
  %793 = or <4 x i1> %791, %792, !dbg !122
  %.v55 = select <4 x i1> %793, <4 x i32> %789, <4 x i32> %.v54, !dbg !123
  %794 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !123
  %795 = insertelement <4 x i32> poison, i32 %742, i64 0, !dbg !81
  %796 = insertelement <4 x i32> %795, i32 %733, i64 1, !dbg !81
  %797 = insertelement <4 x i32> %796, i32 %724, i64 2, !dbg !81
  %798 = insertelement <4 x i32> %797, i32 %715, i64 3, !dbg !81
  %799 = bitcast <4 x i32> %798 to <4 x float>, !dbg !81
  %800 = fcmp olt <4 x float> %794, %799, !dbg !124
  %801 = fcmp uno <4 x float> %799, zeroinitializer, !dbg !126
  %802 = or <4 x i1> %800, %801, !dbg !127
  %.v56 = select <4 x i1> %802, <4 x i32> %798, <4 x i32> %.v55, !dbg !128
  %803 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !128
  %804 = insertelement <4 x i32> poison, i32 %743, i64 0, !dbg !87
  %805 = insertelement <4 x i32> %804, i32 %734, i64 1, !dbg !87
  %806 = insertelement <4 x i32> %805, i32 %725, i64 2, !dbg !87
  %807 = insertelement <4 x i32> %806, i32 %716, i64 3, !dbg !87
  %808 = bitcast <4 x i32> %807 to <4 x float>, !dbg !87
  %809 = fcmp olt <4 x float> %803, %808, !dbg !129
  %810 = fcmp uno <4 x float> %808, zeroinitializer, !dbg !131
  %811 = or <4 x i1> %809, %810, !dbg !132
  %.v57 = select <4 x i1> %811, <4 x i32> %807, <4 x i32> %.v56, !dbg !133
  %812 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !133
  %813 = insertelement <4 x i32> poison, i32 %744, i64 0, !dbg !92
  %814 = insertelement <4 x i32> %813, i32 %735, i64 1, !dbg !92
  %815 = insertelement <4 x i32> %814, i32 %726, i64 2, !dbg !92
  %816 = insertelement <4 x i32> %815, i32 %717, i64 3, !dbg !92
  %817 = bitcast <4 x i32> %816 to <4 x float>, !dbg !92
  %818 = fcmp olt <4 x float> %812, %817, !dbg !134
  %819 = zext <4 x i1> %755 to <4 x i8>, !dbg !136
  %820 = select <4 x i1> %769, <4 x i8> splat (i8 2), <4 x i8> %819, !dbg !137
  %821 = select <4 x i1> %773, <4 x i8> splat (i8 3), <4 x i8> %820, !dbg !138
  %822 = select <4 x i1> %782, <4 x i8> splat (i8 4), <4 x i8> %821, !dbg !139
  %823 = select <4 x i1> %791, <4 x i8> splat (i8 5), <4 x i8> %822, !dbg !140
  %824 = select <4 x i1> %800, <4 x i8> splat (i8 6), <4 x i8> %823, !dbg !141
  %825 = select <4 x i1> %809, <4 x i8> splat (i8 7), <4 x i8> %824, !dbg !142
  %826 = select <4 x i1> %818, <4 x i8> splat (i8 8), <4 x i8> %825, !dbg !143
  %827 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !70
  %828 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !44
  %829 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !72
  %830 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !73
  %831 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !74
  %832 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !75
  %833 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !81
  %834 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !87
  %835 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !92
  %836 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !70
  %837 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !44
  %838 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !72
  %839 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !73
  %840 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !74
  %841 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !75
  %842 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !81
  %843 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !87
  %844 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !92
  %845 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !70
  %846 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !44
  %847 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !72
  %848 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !73
  %849 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !74
  %850 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !75
  %851 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !81
  %852 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !87
  %853 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !92
  %854 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !70
  %855 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !44
  %856 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !72
  %857 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !73
  %858 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !74
  %859 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !75
  %860 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !81
  %861 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !87
  %862 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !92
  %863 = insertelement <4 x i32> poison, i32 %854, i64 0, !dbg !70
  %864 = insertelement <4 x i32> %863, i32 %845, i64 1, !dbg !70
  %865 = insertelement <4 x i32> %864, i32 %836, i64 2, !dbg !70
  %866 = insertelement <4 x i32> %865, i32 %827, i64 3, !dbg !70
  %867 = bitcast <4 x i32> %866 to <4 x float>, !dbg !70
  %868 = insertelement <4 x i32> poison, i32 %855, i64 0, !dbg !44
  %869 = insertelement <4 x i32> %868, i32 %846, i64 1, !dbg !44
  %870 = insertelement <4 x i32> %869, i32 %837, i64 2, !dbg !44
  %871 = insertelement <4 x i32> %870, i32 %828, i64 3, !dbg !44
  %872 = bitcast <4 x i32> %871 to <4 x float>, !dbg !44
  %873 = fcmp ogt <4 x float> %867, %872, !dbg !97
  %874 = insertelement <4 x i32> poison, i32 %857, i64 0, !dbg !73
  %875 = insertelement <4 x i32> %874, i32 %848, i64 1, !dbg !73
  %876 = insertelement <4 x i32> %875, i32 %839, i64 2, !dbg !73
  %877 = insertelement <4 x i32> %876, i32 %830, i64 3, !dbg !73
  %878 = bitcast <4 x i32> %877 to <4 x float>, !dbg !73
  %879 = fcmp uno <4 x float> %867, zeroinitializer, !dbg !101
  %880 = or <4 x i1> %873, %879, !dbg !102
  %.v58 = select <4 x i1> %880, <4 x i32> %866, <4 x i32> %871, !dbg !103
  %881 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !103
  %882 = insertelement <4 x i32> poison, i32 %856, i64 0, !dbg !72
  %883 = insertelement <4 x i32> %882, i32 %847, i64 1, !dbg !72
  %884 = insertelement <4 x i32> %883, i32 %838, i64 2, !dbg !72
  %885 = insertelement <4 x i32> %884, i32 %829, i64 3, !dbg !72
  %886 = bitcast <4 x i32> %885 to <4 x float>, !dbg !72
  %887 = fcmp olt <4 x float> %881, %886, !dbg !104
  %888 = fcmp uno <4 x float> %886, zeroinitializer, !dbg !106
  %889 = or <4 x i1> %887, %888, !dbg !107
  %.v59 = select <4 x i1> %889, <4 x i32> %885, <4 x i32> %.v58, !dbg !108
  %890 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !108
  %891 = fcmp olt <4 x float> %890, %878, !dbg !109
  %892 = insertelement <4 x i32> poison, i32 %858, i64 0, !dbg !74
  %893 = insertelement <4 x i32> %892, i32 %849, i64 1, !dbg !74
  %894 = insertelement <4 x i32> %893, i32 %840, i64 2, !dbg !74
  %895 = insertelement <4 x i32> %894, i32 %831, i64 3, !dbg !74
  %896 = bitcast <4 x i32> %895 to <4 x float>, !dbg !74
  %897 = fcmp uno <4 x float> %878, zeroinitializer, !dbg !111
  %898 = or <4 x i1> %891, %897, !dbg !112
  %.v60 = select <4 x i1> %898, <4 x i32> %877, <4 x i32> %.v59, !dbg !113
  %899 = bitcast <4 x i32> %.v60 to <4 x float>, !dbg !113
  %900 = fcmp olt <4 x float> %899, %896, !dbg !114
  %901 = fcmp uno <4 x float> %896, zeroinitializer, !dbg !116
  %902 = or <4 x i1> %900, %901, !dbg !117
  %.v61 = select <4 x i1> %902, <4 x i32> %895, <4 x i32> %.v60, !dbg !118
  %903 = bitcast <4 x i32> %.v61 to <4 x float>, !dbg !118
  %904 = insertelement <4 x i32> poison, i32 %859, i64 0, !dbg !75
  %905 = insertelement <4 x i32> %904, i32 %850, i64 1, !dbg !75
  %906 = insertelement <4 x i32> %905, i32 %841, i64 2, !dbg !75
  %907 = insertelement <4 x i32> %906, i32 %832, i64 3, !dbg !75
  %908 = bitcast <4 x i32> %907 to <4 x float>, !dbg !75
  %909 = fcmp olt <4 x float> %903, %908, !dbg !119
  %910 = fcmp uno <4 x float> %908, zeroinitializer, !dbg !121
  %911 = or <4 x i1> %909, %910, !dbg !122
  %.v62 = select <4 x i1> %911, <4 x i32> %907, <4 x i32> %.v61, !dbg !123
  %912 = bitcast <4 x i32> %.v62 to <4 x float>, !dbg !123
  %913 = insertelement <4 x i32> poison, i32 %860, i64 0, !dbg !81
  %914 = insertelement <4 x i32> %913, i32 %851, i64 1, !dbg !81
  %915 = insertelement <4 x i32> %914, i32 %842, i64 2, !dbg !81
  %916 = insertelement <4 x i32> %915, i32 %833, i64 3, !dbg !81
  %917 = bitcast <4 x i32> %916 to <4 x float>, !dbg !81
  %918 = fcmp olt <4 x float> %912, %917, !dbg !124
  %919 = fcmp uno <4 x float> %917, zeroinitializer, !dbg !126
  %920 = or <4 x i1> %918, %919, !dbg !127
  %.v63 = select <4 x i1> %920, <4 x i32> %916, <4 x i32> %.v62, !dbg !128
  %921 = bitcast <4 x i32> %.v63 to <4 x float>, !dbg !128
  %922 = insertelement <4 x i32> poison, i32 %861, i64 0, !dbg !87
  %923 = insertelement <4 x i32> %922, i32 %852, i64 1, !dbg !87
  %924 = insertelement <4 x i32> %923, i32 %843, i64 2, !dbg !87
  %925 = insertelement <4 x i32> %924, i32 %834, i64 3, !dbg !87
  %926 = bitcast <4 x i32> %925 to <4 x float>, !dbg !87
  %927 = fcmp olt <4 x float> %921, %926, !dbg !129
  %928 = fcmp uno <4 x float> %926, zeroinitializer, !dbg !131
  %929 = or <4 x i1> %927, %928, !dbg !132
  %.v64 = select <4 x i1> %929, <4 x i32> %925, <4 x i32> %.v63, !dbg !133
  %930 = bitcast <4 x i32> %.v64 to <4 x float>, !dbg !133
  %931 = insertelement <4 x i32> poison, i32 %862, i64 0, !dbg !92
  %932 = insertelement <4 x i32> %931, i32 %853, i64 1, !dbg !92
  %933 = insertelement <4 x i32> %932, i32 %844, i64 2, !dbg !92
  %934 = insertelement <4 x i32> %933, i32 %835, i64 3, !dbg !92
  %935 = bitcast <4 x i32> %934 to <4 x float>, !dbg !92
  %936 = fcmp olt <4 x float> %930, %935, !dbg !134
  %937 = zext <4 x i1> %873 to <4 x i8>, !dbg !136
  %938 = select <4 x i1> %887, <4 x i8> splat (i8 2), <4 x i8> %937, !dbg !137
  %939 = select <4 x i1> %891, <4 x i8> splat (i8 3), <4 x i8> %938, !dbg !138
  %940 = select <4 x i1> %900, <4 x i8> splat (i8 4), <4 x i8> %939, !dbg !139
  %941 = select <4 x i1> %909, <4 x i8> splat (i8 5), <4 x i8> %940, !dbg !140
  %942 = select <4 x i1> %918, <4 x i8> splat (i8 6), <4 x i8> %941, !dbg !141
  %943 = select <4 x i1> %927, <4 x i8> splat (i8 7), <4 x i8> %942, !dbg !142
  %944 = select <4 x i1> %936, <4 x i8> splat (i8 8), <4 x i8> %943, !dbg !143
  %945 = bitcast i32 %481 to float, !dbg !144
  %946 = fcmp uno float %945, 0.000000e+00, !dbg !144
  %947 = extractelement <4 x i1> %582, i64 3, !dbg !145
  %948 = or i1 %947, %946, !dbg !145
  %949 = extractelement <4 x float> %576, i64 3, !dbg !146
  %950 = select i1 %948, float %945, float %949, !dbg !146
  %951 = bitcast i32 %490 to float, !dbg !144
  %952 = fcmp uno float %951, 0.000000e+00, !dbg !144
  %953 = extractelement <4 x i1> %582, i64 2, !dbg !145
  %954 = or i1 %953, %952, !dbg !145
  %955 = extractelement <4 x float> %576, i64 2, !dbg !146
  %956 = select i1 %954, float %951, float %955, !dbg !146
  %957 = bitcast i32 %499 to float, !dbg !144
  %958 = fcmp uno float %957, 0.000000e+00, !dbg !144
  %959 = extractelement <4 x i1> %582, i64 1, !dbg !145
  %960 = or i1 %959, %958, !dbg !145
  %961 = extractelement <4 x float> %576, i64 1, !dbg !146
  %962 = select i1 %960, float %957, float %961, !dbg !146
  %963 = bitcast i32 %508 to float, !dbg !144
  %964 = fcmp uno float %963, 0.000000e+00, !dbg !144
  %965 = extractelement <4 x i1> %582, i64 0, !dbg !145
  %966 = or i1 %965, %964, !dbg !145
  %967 = extractelement <4 x float> %576, i64 0, !dbg !146
  %968 = select i1 %966, float %963, float %967, !dbg !146
  %969 = bitcast i32 %599 to float, !dbg !144
  %970 = fcmp uno float %969, 0.000000e+00, !dbg !144
  %971 = extractelement <4 x i1> %700, i64 3, !dbg !145
  %972 = or i1 %971, %970, !dbg !145
  %973 = extractelement <4 x float> %694, i64 3, !dbg !146
  %974 = select i1 %972, float %969, float %973, !dbg !146
  %975 = bitcast i32 %608 to float, !dbg !144
  %976 = fcmp uno float %975, 0.000000e+00, !dbg !144
  %977 = extractelement <4 x i1> %700, i64 2, !dbg !145
  %978 = or i1 %977, %976, !dbg !145
  %979 = extractelement <4 x float> %694, i64 2, !dbg !146
  %980 = select i1 %978, float %975, float %979, !dbg !146
  %981 = bitcast i32 %617 to float, !dbg !144
  %982 = fcmp uno float %981, 0.000000e+00, !dbg !144
  %983 = extractelement <4 x i1> %700, i64 1, !dbg !145
  %984 = or i1 %983, %982, !dbg !145
  %985 = extractelement <4 x float> %694, i64 1, !dbg !146
  %986 = select i1 %984, float %981, float %985, !dbg !146
  %987 = bitcast i32 %626 to float, !dbg !144
  %988 = fcmp uno float %987, 0.000000e+00, !dbg !144
  %989 = extractelement <4 x i1> %700, i64 0, !dbg !145
  %990 = or i1 %989, %988, !dbg !145
  %991 = extractelement <4 x float> %694, i64 0, !dbg !146
  %992 = select i1 %990, float %987, float %991, !dbg !146
  %993 = bitcast i32 %717 to float, !dbg !144
  %994 = fcmp uno float %993, 0.000000e+00, !dbg !144
  %995 = extractelement <4 x i1> %818, i64 3, !dbg !145
  %996 = or i1 %995, %994, !dbg !145
  %997 = extractelement <4 x float> %812, i64 3, !dbg !146
  %998 = select i1 %996, float %993, float %997, !dbg !146
  %999 = bitcast i32 %726 to float, !dbg !144
  %1000 = fcmp uno float %999, 0.000000e+00, !dbg !144
  %1001 = extractelement <4 x i1> %818, i64 2, !dbg !145
  %1002 = or i1 %1001, %1000, !dbg !145
  %1003 = extractelement <4 x float> %812, i64 2, !dbg !146
  %1004 = select i1 %1002, float %999, float %1003, !dbg !146
  %1005 = bitcast i32 %735 to float, !dbg !144
  %1006 = fcmp uno float %1005, 0.000000e+00, !dbg !144
  %1007 = extractelement <4 x i1> %818, i64 1, !dbg !145
  %1008 = or i1 %1007, %1006, !dbg !145
  %1009 = extractelement <4 x float> %812, i64 1, !dbg !146
  %1010 = select i1 %1008, float %1005, float %1009, !dbg !146
  %1011 = bitcast i32 %744 to float, !dbg !144
  %1012 = fcmp uno float %1011, 0.000000e+00, !dbg !144
  %1013 = extractelement <4 x i1> %818, i64 0, !dbg !145
  %1014 = or i1 %1013, %1012, !dbg !145
  %1015 = extractelement <4 x float> %812, i64 0, !dbg !146
  %1016 = select i1 %1014, float %1011, float %1015, !dbg !146
  %1017 = bitcast i32 %835 to float, !dbg !144
  %1018 = fcmp uno float %1017, 0.000000e+00, !dbg !144
  %1019 = extractelement <4 x i1> %936, i64 3, !dbg !145
  %1020 = or i1 %1019, %1018, !dbg !145
  %1021 = extractelement <4 x float> %930, i64 3, !dbg !146
  %1022 = select i1 %1020, float %1017, float %1021, !dbg !146
  %1023 = bitcast i32 %844 to float, !dbg !144
  %1024 = fcmp uno float %1023, 0.000000e+00, !dbg !144
  %1025 = extractelement <4 x i1> %936, i64 2, !dbg !145
  %1026 = or i1 %1025, %1024, !dbg !145
  %1027 = extractelement <4 x float> %930, i64 2, !dbg !146
  %1028 = select i1 %1026, float %1023, float %1027, !dbg !146
  %1029 = bitcast i32 %853 to float, !dbg !144
  %1030 = fcmp uno float %1029, 0.000000e+00, !dbg !144
  %1031 = extractelement <4 x i1> %936, i64 1, !dbg !145
  %1032 = or i1 %1031, %1030, !dbg !145
  %1033 = extractelement <4 x float> %930, i64 1, !dbg !146
  %1034 = select i1 %1032, float %1029, float %1033, !dbg !146
  %1035 = bitcast i32 %862 to float, !dbg !144
  %1036 = fcmp uno float %1035, 0.000000e+00, !dbg !144
  %1037 = extractelement <4 x i1> %936, i64 0, !dbg !145
  %1038 = or i1 %1037, %1036, !dbg !145
  %1039 = extractelement <4 x float> %930, i64 0, !dbg !146
  %1040 = select i1 %1038, float %1035, float %1039, !dbg !146
  %1041 = bitcast i32 %183 to float, !dbg !34
  %1042 = bitcast i32 %181 to float, !dbg !32
  %1043 = or disjoint i32 %21, %24, !dbg !17
  %.lobit13 = lshr i32 %14, 6, !dbg !12
  %1044 = and i32 %.lobit13, 3, !dbg !12
  %1045 = or disjoint i32 %1044, 12, !dbg !12
  %1046 = or disjoint i32 %13, %1045, !dbg !13
  %1047 = mul i32 %1046, 728, !dbg !21
  %1048 = add i32 %1043, %1047, !dbg !22
  %1049 = sext i32 %1048 to i64, !dbg !23
  %1050 = getelementptr float, ptr addrspace(1) %0, i64 %1049, !dbg !23
  %1051 = or disjoint i32 %1044, 8, !dbg !12
  %1052 = or disjoint i32 %13, %1051, !dbg !13
  %1053 = mul i32 %1052, 728, !dbg !21
  %1054 = add i32 %1043, %1053, !dbg !22
  %1055 = sext i32 %1054 to i64, !dbg !23
  %1056 = getelementptr float, ptr addrspace(1) %0, i64 %1055, !dbg !23
  %1057 = or disjoint i32 %1044, 4, !dbg !12
  %1058 = or disjoint i32 %13, %1057, !dbg !13
  %1059 = mul i32 %1058, 728, !dbg !21
  %1060 = add i32 %1043, %1059, !dbg !22
  %1061 = sext i32 %1060 to i64, !dbg !23
  %1062 = getelementptr float, ptr addrspace(1) %0, i64 %1061, !dbg !23
  %1063 = or disjoint i32 %13, %1044, !dbg !13
  %1064 = mul i32 %1063, 728, !dbg !21
  %1065 = add i32 %1043, %1064, !dbg !22
  %1066 = sext i32 %1065 to i64, !dbg !23
  %1067 = getelementptr float, ptr addrspace(1) %0, i64 %1066, !dbg !23
  %1068 = and i32 %17, 12, !dbg !12
  %1069 = or disjoint i32 %13, %1068, !dbg !13
  %.frozen = freeze i32 %1069, !dbg !147
  %1070 = sdiv i32 %.frozen, 256, !dbg !147
  %1071 = mul i32 %1070, 256, !dbg !148
  %.decomposed = sub i32 %.frozen, %1071, !dbg !148
  %1072 = lshr i32 %14, 2, !dbg !16
  %1073 = and i32 %1072, 63, !dbg !16
  %1074 = or disjoint i32 %1073, %21, !dbg !17
  %1075 = or disjoint i32 %1074, 192, !dbg !17
  %1076 = icmp slt i32 %1075, 728, !dbg !18
  %1077 = or disjoint i32 %1074, 128, !dbg !17
  %1078 = icmp slt i32 %1077, 728, !dbg !18
  %1079 = or disjoint i32 %1074, 64, !dbg !17
  %1080 = icmp slt i32 %1079, 728, !dbg !18
  %1081 = icmp slt i32 %1074, 728, !dbg !18
  %1082 = icmp slt i32 %1043, 728, !dbg !18
  %1083 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !149
  %1084 = fmul float %456, %1083, !dbg !150
  %1085 = fmul float %454, %1083, !dbg !150
  %1086 = fmul float %452, %1083, !dbg !150
  %1087 = fmul float %450, %1083, !dbg !150
  %1088 = fmul float %448, %1083, !dbg !150
  %1089 = fmul float %446, %1083, !dbg !150
  %1090 = fmul float %444, %1083, !dbg !150
  %1091 = fmul float %442, %1083, !dbg !150
  %1092 = fmul float %440, %1083, !dbg !150
  %1093 = fmul float %438, %1083, !dbg !150
  %1094 = fmul float %436, %1083, !dbg !150
  %1095 = fmul float %434, %1083, !dbg !150
  %1096 = fmul float %432, %1083, !dbg !150
  %1097 = fmul float %430, %1083, !dbg !150
  %1098 = fmul float %428, %1083, !dbg !150
  %1099 = fmul float %426, %1083, !dbg !150
  %1100 = fmul float %1084, %1042, !dbg !151
  %1101 = fmul float %1085, %1042, !dbg !151
  %1102 = fmul float %1086, %1042, !dbg !151
  %1103 = fmul float %1087, %1042, !dbg !151
  %1104 = fmul float %1088, %1042, !dbg !151
  %1105 = fmul float %1089, %1042, !dbg !151
  %1106 = fmul float %1090, %1042, !dbg !151
  %1107 = fmul float %1091, %1042, !dbg !151
  %1108 = fmul float %1092, %1042, !dbg !151
  %1109 = fmul float %1093, %1042, !dbg !151
  %1110 = fmul float %1094, %1042, !dbg !151
  %1111 = fmul float %1095, %1042, !dbg !151
  %1112 = fmul float %1096, %1042, !dbg !151
  %1113 = fmul float %1097, %1042, !dbg !151
  %1114 = fmul float %1098, %1042, !dbg !151
  %1115 = fmul float %1099, %1042, !dbg !151
  %1116 = fadd float %1100, %1041, !dbg !152
  %1117 = fadd float %1101, %1041, !dbg !152
  %1118 = fadd float %1102, %1041, !dbg !152
  %1119 = fadd float %1103, %1041, !dbg !152
  %1120 = fadd float %1104, %1041, !dbg !152
  %1121 = fadd float %1105, %1041, !dbg !152
  %1122 = fadd float %1106, %1041, !dbg !152
  %1123 = fadd float %1107, %1041, !dbg !152
  %1124 = fadd float %1108, %1041, !dbg !152
  %1125 = fadd float %1109, %1041, !dbg !152
  %1126 = fadd float %1110, %1041, !dbg !152
  %1127 = fadd float %1111, %1041, !dbg !152
  %1128 = fadd float %1112, %1041, !dbg !152
  %1129 = fadd float %1113, %1041, !dbg !152
  %1130 = fadd float %1114, %1041, !dbg !152
  %1131 = fadd float %1115, %1041, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1132 = bitcast float %1116 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %1132, i1 true) #4, !dbg !152
  %1133 = bitcast float %1117 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %1133, i1 true) #4, !dbg !152
  %1134 = bitcast float %1118 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %1134, i1 true) #4, !dbg !152
  %1135 = bitcast float %1119 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %1135, i1 true) #4, !dbg !152
  %1136 = bitcast float %1120 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %1136, i1 true) #4, !dbg !152
  %1137 = bitcast float %1121 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %1137, i1 true) #4, !dbg !152
  %1138 = bitcast float %1122 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %1138, i1 true) #4, !dbg !152
  %1139 = bitcast float %1123 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %1139, i1 true) #4, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1140 = load float, ptr addrspace(3) %74, align 4, !dbg !152
  %1141 = load float, ptr addrspace(3) %78, align 4, !dbg !152
  %1142 = load float, ptr addrspace(3) %81, align 4, !dbg !152
  %1143 = load float, ptr addrspace(3) %84, align 4, !dbg !152
  %1144 = load float, ptr addrspace(3) %87, align 4, !dbg !152
  %1145 = load float, ptr addrspace(3) %90, align 4, !dbg !152
  %1146 = load float, ptr addrspace(3) %93, align 4, !dbg !152
  %1147 = load float, ptr addrspace(3) %96, align 4, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1148 = bitcast float %1124 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %1148, i1 true) #4, !dbg !152
  %1149 = bitcast float %1125 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %1149, i1 true) #4, !dbg !152
  %1150 = bitcast float %1126 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %1150, i1 true) #4, !dbg !152
  %1151 = bitcast float %1127 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %1151, i1 true) #4, !dbg !152
  %1152 = bitcast float %1128 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %1152, i1 true) #4, !dbg !152
  %1153 = bitcast float %1129 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %1153, i1 true) #4, !dbg !152
  %1154 = bitcast float %1130 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %1154, i1 true) #4, !dbg !152
  %1155 = bitcast float %1131 to <1 x i32>, !dbg !152
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %1155, i1 true) #4, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1156 = load float, ptr addrspace(3) %74, align 4, !dbg !152
  %1157 = load float, ptr addrspace(3) %78, align 4, !dbg !152
  %1158 = load float, ptr addrspace(3) %81, align 4, !dbg !152
  %1159 = load float, ptr addrspace(3) %84, align 4, !dbg !152
  %1160 = load float, ptr addrspace(3) %87, align 4, !dbg !152
  %1161 = load float, ptr addrspace(3) %90, align 4, !dbg !152
  %1162 = load float, ptr addrspace(3) %93, align 4, !dbg !152
  %1163 = load float, ptr addrspace(3) %96, align 4, !dbg !152
  %1164 = fadd float %1040, %1140, !dbg !153
  %1165 = fadd float %1034, %1141, !dbg !153
  %1166 = fadd float %1028, %1142, !dbg !153
  %1167 = fadd float %1022, %1143, !dbg !153
  %1168 = fadd float %1016, %1144, !dbg !153
  %1169 = fadd float %1010, %1145, !dbg !153
  %1170 = fadd float %1004, %1146, !dbg !153
  %1171 = fadd float %998, %1147, !dbg !153
  %1172 = fadd float %992, %1156, !dbg !153
  %1173 = fadd float %986, %1157, !dbg !153
  %1174 = fadd float %980, %1158, !dbg !153
  %1175 = fadd float %974, %1159, !dbg !153
  %1176 = fadd float %968, %1160, !dbg !153
  %1177 = fadd float %962, %1161, !dbg !153
  %1178 = fadd float %956, %1162, !dbg !153
  %1179 = fadd float %950, %1163, !dbg !153
  %1180 = getelementptr i8, ptr addrspace(1) %7, i64 %42, !dbg !154
  %1181 = getelementptr i8, ptr addrspace(1) %7, i64 %46, !dbg !154
  %1182 = bitcast <4 x i8> %944 to i32, !dbg !155
  %1183 = bitcast <4 x i8> %826 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1182, i32 %1183, ptr addrspace(1) %1180, i1 %29) #4, !dbg !155
  %1184 = bitcast <4 x i8> %708 to i32, !dbg !155
  %1185 = bitcast <4 x i8> %590 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1184, i32 %1185, ptr addrspace(1) %1181, i1 %29) #4, !dbg !155
  tail call void @llvm.nvvm.barrier0(), !dbg !156
  %1186 = bitcast float %472 to i32, !dbg !157
  %1187 = bitcast float %471 to i32, !dbg !157
  %1188 = bitcast float %470 to i32, !dbg !157
  %1189 = bitcast float %469 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1186, i32 %1187, i32 %1188, i32 %1189, ptr addrspace(1) %1067, i1 %1082) #4, !dbg !157
  %1190 = bitcast float %468 to i32, !dbg !157
  %1191 = bitcast float %467 to i32, !dbg !157
  %1192 = bitcast float %466 to i32, !dbg !157
  %1193 = bitcast float %465 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1190, i32 %1191, i32 %1192, i32 %1193, ptr addrspace(1) %1062, i1 %1082) #4, !dbg !157
  %1194 = bitcast float %464 to i32, !dbg !157
  %1195 = bitcast float %463 to i32, !dbg !157
  %1196 = bitcast float %462 to i32, !dbg !157
  %1197 = bitcast float %461 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1194, i32 %1195, i32 %1196, i32 %1197, ptr addrspace(1) %1056, i1 %1082) #4, !dbg !157
  %1198 = bitcast float %460 to i32, !dbg !157
  %1199 = bitcast float %459 to i32, !dbg !157
  %1200 = bitcast float %458 to i32, !dbg !157
  %1201 = bitcast float %457 to i32, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1198, i32 %1199, i32 %1200, i32 %1201, ptr addrspace(1) %1050, i1 %1082) #4, !dbg !157
  %1202 = shl i32 %1074, 8, !dbg !158
  %1203 = shl i32 %1079, 8, !dbg !158
  %1204 = shl i32 %1077, 8, !dbg !158
  %1205 = shl i32 %1075, 8, !dbg !158
  %1206 = mul i32 %1070, 186368, !dbg !159
  %1207 = add i32 %1206, %.decomposed, !dbg !160
  %1208 = add i32 %1207, %1202, !dbg !161
  %1209 = add i32 %1207, %1203, !dbg !161
  %1210 = add i32 %1207, %1204, !dbg !161
  %1211 = add i32 %1207, %1205, !dbg !161
  %1212 = sext i32 %1208 to i64, !dbg !162
  %1213 = getelementptr float, ptr addrspace(1) %8, i64 %1212, !dbg !162
  %1214 = sext i32 %1209 to i64, !dbg !162
  %1215 = getelementptr float, ptr addrspace(1) %8, i64 %1214, !dbg !162
  %1216 = sext i32 %1210 to i64, !dbg !162
  %1217 = getelementptr float, ptr addrspace(1) %8, i64 %1216, !dbg !162
  %1218 = sext i32 %1211 to i64, !dbg !162
  %1219 = getelementptr float, ptr addrspace(1) %8, i64 %1218, !dbg !162
  %1220 = shl i32 %14, 7, !dbg !163
  %1221 = and i32 %1220, 3968, !dbg !163
  %1222 = or disjoint i32 %1221, %16, !dbg !163
  %1223 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1221, !dbg !163
  %1224 = getelementptr float, ptr addrspace(3) %1223, i32 %1222, !dbg !163
  %1225 = bitcast float %1164 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1225, i1 true) #4, !dbg !163
  %1226 = or disjoint i32 %1222, 16, !dbg !163
  %1227 = lshr i32 %1226, 2, !dbg !163
  %1228 = and i32 %1227, 996, !dbg !163
  %1229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1228, !dbg !163
  %1230 = getelementptr float, ptr addrspace(3) %1229, i32 %1226, !dbg !163
  %1231 = bitcast float %1165 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1230, <1 x i32> %1231, i1 true) #4, !dbg !163
  %1232 = or disjoint i32 %1222, 32, !dbg !163
  %1233 = lshr i32 %1232, 2, !dbg !163
  %1234 = and i32 %1233, 1000, !dbg !163
  %1235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1234, !dbg !163
  %1236 = getelementptr float, ptr addrspace(3) %1235, i32 %1232, !dbg !163
  %1237 = bitcast float %1166 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1236, <1 x i32> %1237, i1 true) #4, !dbg !163
  %1238 = or disjoint i32 %1222, 48, !dbg !163
  %1239 = lshr i32 %1238, 2, !dbg !163
  %1240 = and i32 %1239, 1004, !dbg !163
  %1241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1240, !dbg !163
  %1242 = getelementptr float, ptr addrspace(3) %1241, i32 %1238, !dbg !163
  %1243 = bitcast float %1167 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1242, <1 x i32> %1243, i1 true) #4, !dbg !163
  %1244 = or disjoint i32 %1222, 64, !dbg !163
  %1245 = lshr i32 %1244, 2, !dbg !163
  %1246 = and i32 %1245, 1008, !dbg !163
  %1247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1246, !dbg !163
  %1248 = getelementptr float, ptr addrspace(3) %1247, i32 %1244, !dbg !163
  %1249 = bitcast float %1168 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1249, i1 true) #4, !dbg !163
  %1250 = or disjoint i32 %1222, 80, !dbg !163
  %1251 = lshr i32 %1250, 2, !dbg !163
  %1252 = and i32 %1251, 1012, !dbg !163
  %1253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1252, !dbg !163
  %1254 = getelementptr float, ptr addrspace(3) %1253, i32 %1250, !dbg !163
  %1255 = bitcast float %1169 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %1255, i1 true) #4, !dbg !163
  %1256 = or disjoint i32 %1222, 96, !dbg !163
  %1257 = lshr i32 %1256, 2, !dbg !163
  %1258 = and i32 %1257, 1016, !dbg !163
  %1259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1258, !dbg !163
  %1260 = getelementptr float, ptr addrspace(3) %1259, i32 %1256, !dbg !163
  %1261 = bitcast float %1170 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1260, <1 x i32> %1261, i1 true) #4, !dbg !163
  %1262 = or disjoint i32 %1222, 112, !dbg !163
  %1263 = lshr i32 %1262, 2, !dbg !163
  %1264 = and i32 %1263, 1020, !dbg !163
  %1265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1264, !dbg !163
  %1266 = getelementptr float, ptr addrspace(3) %1265, i32 %1262, !dbg !163
  %1267 = bitcast float %1171 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1266, <1 x i32> %1267, i1 true) #4, !dbg !163
  %1268 = or disjoint i32 %1222, 8, !dbg !163
  %1269 = getelementptr float, ptr addrspace(3) %1223, i32 %1268, !dbg !163
  %1270 = bitcast float %1172 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1269, <1 x i32> %1270, i1 true) #4, !dbg !163
  %1271 = or disjoint i32 %1222, 24, !dbg !163
  %1272 = lshr i32 %1271, 2, !dbg !163
  %1273 = and i32 %1272, 996, !dbg !163
  %1274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1273, !dbg !163
  %1275 = getelementptr float, ptr addrspace(3) %1274, i32 %1271, !dbg !163
  %1276 = bitcast float %1173 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1275, <1 x i32> %1276, i1 true) #4, !dbg !163
  %1277 = or disjoint i32 %1222, 40, !dbg !163
  %1278 = lshr i32 %1277, 2, !dbg !163
  %1279 = and i32 %1278, 1000, !dbg !163
  %1280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1279, !dbg !163
  %1281 = getelementptr float, ptr addrspace(3) %1280, i32 %1277, !dbg !163
  %1282 = bitcast float %1174 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1281, <1 x i32> %1282, i1 true) #4, !dbg !163
  %1283 = or disjoint i32 %1222, 56, !dbg !163
  %1284 = lshr i32 %1283, 2, !dbg !163
  %1285 = and i32 %1284, 1004, !dbg !163
  %1286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1285, !dbg !163
  %1287 = getelementptr float, ptr addrspace(3) %1286, i32 %1283, !dbg !163
  %1288 = bitcast float %1175 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1287, <1 x i32> %1288, i1 true) #4, !dbg !163
  %1289 = or disjoint i32 %1222, 72, !dbg !163
  %1290 = lshr i32 %1289, 2, !dbg !163
  %1291 = and i32 %1290, 1008, !dbg !163
  %1292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1291, !dbg !163
  %1293 = getelementptr float, ptr addrspace(3) %1292, i32 %1289, !dbg !163
  %1294 = bitcast float %1176 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1293, <1 x i32> %1294, i1 true) #4, !dbg !163
  %1295 = or disjoint i32 %1222, 88, !dbg !163
  %1296 = lshr i32 %1295, 2, !dbg !163
  %1297 = and i32 %1296, 1012, !dbg !163
  %1298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1297, !dbg !163
  %1299 = getelementptr float, ptr addrspace(3) %1298, i32 %1295, !dbg !163
  %1300 = bitcast float %1177 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1299, <1 x i32> %1300, i1 true) #4, !dbg !163
  %1301 = or disjoint i32 %1222, 104, !dbg !163
  %1302 = lshr i32 %1301, 2, !dbg !163
  %1303 = and i32 %1302, 1016, !dbg !163
  %1304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1303, !dbg !163
  %1305 = getelementptr float, ptr addrspace(3) %1304, i32 %1301, !dbg !163
  %1306 = bitcast float %1178 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1305, <1 x i32> %1306, i1 true) #4, !dbg !163
  %1307 = or disjoint i32 %1222, 120, !dbg !163
  %1308 = lshr i32 %1307, 2, !dbg !163
  %1309 = and i32 %1308, 1020, !dbg !163
  %1310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1309, !dbg !163
  %1311 = getelementptr float, ptr addrspace(3) %1310, i32 %1307, !dbg !163
  %1312 = bitcast float %1179 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1311, <1 x i32> %1312, i1 true) #4, !dbg !163
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %1313 = and i32 %14, 252, !dbg !163
  %1314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1313, !dbg !163
  %1315 = getelementptr inbounds float, ptr addrspace(3) %1314, i32 %71, !dbg !163
  %1316 = lshr exact i32 %112, 2, !dbg !163
  %1317 = and i32 %1316, 508, !dbg !163
  %1318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1317, !dbg !163
  %1319 = getelementptr inbounds float, ptr addrspace(3) %1318, i32 %112, !dbg !163
  %1320 = load <4 x i32>, ptr addrspace(3) %1319, align 16, !dbg !163
  %1321 = or disjoint i32 %71, 2048, !dbg !163
  %1322 = lshr exact i32 %1321, 2, !dbg !163
  %1323 = and i32 %1322, 764, !dbg !163
  %1324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1323, !dbg !163
  %1325 = getelementptr inbounds float, ptr addrspace(3) %1324, i32 %1321, !dbg !163
  %1326 = load <4 x i32>, ptr addrspace(3) %1325, align 16, !dbg !163
  %1327 = or disjoint i32 %71, 3072, !dbg !163
  %1328 = lshr exact i32 %1327, 2, !dbg !163
  %1329 = and i32 %1328, 1020, !dbg !163
  %1330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1329, !dbg !163
  %1331 = getelementptr inbounds float, ptr addrspace(3) %1330, i32 %1327, !dbg !163
  %1332 = load <4 x i32>, ptr addrspace(3) %1331, align 16, !dbg !163
  %.extract = load i32, ptr addrspace(3) %1315, align 16, !dbg !163
  %1333 = getelementptr inbounds i8, ptr addrspace(3) %1315, i32 4, !dbg !163
  %.extract23 = load i32, ptr addrspace(3) %1333, align 4, !dbg !163
  %1334 = getelementptr inbounds i8, ptr addrspace(3) %1315, i32 8, !dbg !163
  %.extract24 = load i32, ptr addrspace(3) %1334, align 8, !dbg !163
  %1335 = getelementptr inbounds i8, ptr addrspace(3) %1315, i32 12, !dbg !163
  %.extract25 = load i32, ptr addrspace(3) %1335, align 4, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %1213, i1 %1081) #4, !dbg !163
  %.extract26 = extractelement <4 x i32> %1320, i64 0, !dbg !163
  %.extract27 = extractelement <4 x i32> %1320, i64 1, !dbg !163
  %.extract28 = extractelement <4 x i32> %1320, i64 2, !dbg !163
  %.extract29 = extractelement <4 x i32> %1320, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %1215, i1 %1080) #4, !dbg !163
  %.extract30 = extractelement <4 x i32> %1326, i64 0, !dbg !163
  %.extract31 = extractelement <4 x i32> %1326, i64 1, !dbg !163
  %.extract32 = extractelement <4 x i32> %1326, i64 2, !dbg !163
  %.extract33 = extractelement <4 x i32> %1326, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %1217, i1 %1078) #4, !dbg !163
  %.extract34 = extractelement <4 x i32> %1332, i64 0, !dbg !163
  %.extract35 = extractelement <4 x i32> %1332, i64 1, !dbg !163
  %.extract36 = extractelement <4 x i32> %1332, i64 2, !dbg !163
  %.extract37 = extractelement <4 x i32> %1332, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %1219, i1 %1076) #4, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ktk7o3iszzameqeugdr3imivwcvh4sg3ao45lshs54pswdywpt.py", directory: "inductor_cache/2k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 82, column: 20, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 73, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 19, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 42, scope: !7)
!41 = !DILocation(line: 51, column: 47, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 64, scope: !7)
!44 = !DILocation(line: 51, column: 56, scope: !7)
!45 = !DILocation(line: 53, column: 21, scope: !7)
!46 = !DILocation(line: 56, column: 19, scope: !7)
!47 = !DILocation(line: 57, column: 42, scope: !7)
!48 = !DILocation(line: 57, column: 47, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 64, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 19, scope: !7)
!53 = !DILocation(line: 64, column: 42, scope: !7)
!54 = !DILocation(line: 64, column: 47, scope: !7)
!55 = !DILocation(line: 64, column: 31, scope: !7)
!56 = !DILocation(line: 64, column: 64, scope: !7)
!57 = !DILocation(line: 67, column: 21, scope: !7)
!58 = !DILocation(line: 70, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 40, scope: !7)
!60 = !DILocation(line: 71, column: 45, scope: !7)
!61 = !DILocation(line: 71, column: 31, scope: !7)
!62 = !DILocation(line: 71, column: 62, scope: !7)
!63 = !DILocation(line: 74, column: 31, scope: !7)
!64 = !DILocation(line: 74, column: 53, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 37, scope: !7)
!67 = !DILocation(line: 77, column: 42, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 59, scope: !7)
!70 = !DILocation(line: 57, column: 56, scope: !7)
!71 = !DILocation(line: 89, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 56, scope: !7)
!73 = !DILocation(line: 71, column: 54, scope: !7)
!74 = !DILocation(line: 74, column: 45, scope: !7)
!75 = !DILocation(line: 77, column: 51, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 39, scope: !7)
!78 = !DILocation(line: 84, column: 44, scope: !7)
!79 = !DILocation(line: 84, column: 31, scope: !7)
!80 = !DILocation(line: 84, column: 61, scope: !7)
!81 = !DILocation(line: 84, column: 53, scope: !7)
!82 = !DILocation(line: 86, column: 20, scope: !7)
!83 = !DILocation(line: 87, column: 39, scope: !7)
!84 = !DILocation(line: 87, column: 44, scope: !7)
!85 = !DILocation(line: 87, column: 31, scope: !7)
!86 = !DILocation(line: 87, column: 61, scope: !7)
!87 = !DILocation(line: 87, column: 53, scope: !7)
!88 = !DILocation(line: 90, column: 39, scope: !7)
!89 = !DILocation(line: 90, column: 44, scope: !7)
!90 = !DILocation(line: 90, column: 31, scope: !7)
!91 = !DILocation(line: 90, column: 61, scope: !7)
!92 = !DILocation(line: 90, column: 53, scope: !7)
!93 = !DILocation(line: 117, column: 20, scope: !7)
!94 = !DILocation(line: 120, column: 20, scope: !7)
!95 = !DILocation(line: 121, column: 27, scope: !7)
!96 = !DILocation(line: 118, column: 20, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !100)
!98 = distinct !DILexicalBlockFile(scope: !7, file: !99, discriminator: 0)
!99 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!100 = !DILocation(line: 58, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !105)
!105 = !DILocation(line: 65, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !110)
!110 = !DILocation(line: 72, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !115)
!115 = !DILocation(line: 75, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !120)
!120 = !DILocation(line: 78, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !125)
!125 = !DILocation(line: 85, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !130)
!130 = !DILocation(line: 88, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !130)
!134 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !135)
!135 = !DILocation(line: 91, column: 42, scope: !7)
!136 = !DILocation(line: 95, column: 35, scope: !7)
!137 = !DILocation(line: 98, column: 35, scope: !7)
!138 = !DILocation(line: 101, column: 35, scope: !7)
!139 = !DILocation(line: 104, column: 35, scope: !7)
!140 = !DILocation(line: 107, column: 35, scope: !7)
!141 = !DILocation(line: 110, column: 35, scope: !7)
!142 = !DILocation(line: 113, column: 35, scope: !7)
!143 = !DILocation(line: 116, column: 35, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !135)
!145 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !135)
!146 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !135)
!147 = !DILocation(line: 32, column: 19, scope: !7)
!148 = !DILocation(line: 33, column: 19, scope: !7)
!149 = !DILocation(line: 123, column: 20, scope: !7)
!150 = !DILocation(line: 126, column: 20, scope: !7)
!151 = !DILocation(line: 127, column: 20, scope: !7)
!152 = !DILocation(line: 128, column: 20, scope: !7)
!153 = !DILocation(line: 129, column: 20, scope: !7)
!154 = !DILocation(line: 130, column: 25, scope: !7)
!155 = !DILocation(line: 130, column: 46, scope: !7)
!156 = !DILocation(line: 131, column: 4, scope: !7)
!157 = !DILocation(line: 132, column: 49, scope: !7)
!158 = !DILocation(line: 133, column: 34, scope: !7)
!159 = !DILocation(line: 133, column: 46, scope: !7)
!160 = !DILocation(line: 133, column: 30, scope: !7)
!161 = !DILocation(line: 133, column: 39, scope: !7)
!162 = !DILocation(line: 133, column: 25, scope: !7)
!163 = !DILocation(line: 133, column: 58, scope: !7)
!164 = !DILocation(line: 133, column: 4, scope: !7)
