#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":19:0)
#loc1 = loc(unknown)
#loc6 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":33:57)
#loc16 = loc(callsite(#loc1 at #loc6))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = "tt.reduce"(%3) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc6)), %arg4: f32 loc(callsite(#loc1 at #loc6))):
      %11 = arith.addf %arg3, %arg4 : f32 loc(#loc19)
      tt.reduce.return %11 : f32 loc(#loc15)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc15)
    %5 = arith.addf %4, %cst_0 : f32 loc(#loc18)
    %6 = arith.divf %5, %cst : f32 loc(#loc10)
    %7 = tt.splat %6 : f32 -> tensor<256xf32, #blocked> loc(#loc11)
    %8 = arith.subf %3, %7 : tensor<256xf32, #blocked> loc(#loc11)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %10 = tt.addptr %9, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    tt.store %10, %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":27:26)
#loc3 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":31:30)
#loc4 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":31:35)
#loc5 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc7 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc9 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":33:44)
#loc10 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":35:18)
#loc11 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":36:18)
#loc12 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":37:25)
#loc13 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":37:63)
#loc14 = loc("inductor_cache/tx/ctxttuxem4lnbyejhbqpwc3eg7jiwdclit2vaima24fdelobpgza.py":37:4)
#loc15 = loc(callsite(#loc5 at #loc6))
#loc17 = loc(callsite(#loc7 at #loc5))
#loc18 = loc(callsite(#loc8 at #loc9))
#loc19 = loc(callsite(#loc17 at #loc6))
