; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %17, 16, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = icmp slt i32 %19, 36, !dbg !14
  %23 = icmp slt i32 %20, 36, !dbg !14
  %24 = icmp slt i32 %21, 36, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = or disjoint i32 %26, %17, !dbg !17
  %28 = or disjoint i32 %26, %18, !dbg !17
  %29 = or disjoint i32 %26, %15, !dbg !17
  %30 = icmp slt i32 %27, 512, !dbg !18
  %31 = icmp slt i32 %28, 512, !dbg !18
  %32 = icmp slt i32 %29, 512, !dbg !18
  %.frozen = freeze i32 %29, !dbg !19
  %33 = sdiv i32 %.frozen, 128, !dbg !19
  %34 = mul i32 %33, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = mul i32 %27, 36, !dbg !21
  %36 = mul i32 %28, 36, !dbg !21
  %37 = add i32 %35, %19, !dbg !22
  %38 = add i32 %36, %19, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !23
  %43 = and i1 %22, %30, !dbg !24
  %44 = and i1 %22, %31, !dbg !24
  %45 = and i1 %23, %32, !dbg !24
  %46 = and i1 %24, %32, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #4, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #4, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = shl i32 %13, 7, !dbg !25
  %58 = and i32 %57, 896, !dbg !25
  %59 = or disjoint i32 %58, %17, !dbg !25
  %60 = and i32 %14, 508, !dbg !25
  %61 = lshr exact i32 %58, 3, !dbg !25
  %62 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !25
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %59, !dbg !25
  %64 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !25
  %65 = or disjoint i32 %59, 32, !dbg !25
  %66 = lshr i32 %65, 5, !dbg !25
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !25
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !25
  %69 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !25
  %70 = or disjoint i32 %59, 64, !dbg !25
  %71 = lshr i32 %70, 5, !dbg !25
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !25
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %70, !dbg !25
  %74 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !25
  %75 = or disjoint i32 %59, 96, !dbg !25
  %76 = lshr i32 %75, 5, !dbg !25
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !25
  %79 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !25
  %80 = or disjoint i32 %59, 16, !dbg !25
  %81 = getelementptr float, ptr addrspace(3) %62, i32 %80, !dbg !25
  %82 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !25
  %83 = or disjoint i32 %59, 48, !dbg !25
  %84 = lshr i32 %83, 5, !dbg !25
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !25
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !25
  %87 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !25
  %88 = or disjoint i32 %59, 80, !dbg !25
  %89 = lshr i32 %88, 5, !dbg !25
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !25
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !25
  %92 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !25
  %93 = or disjoint i32 %59, 112, !dbg !25
  %94 = lshr i32 %93, 5, !dbg !25
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !25
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !25
  %97 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %98 = lshr i32 %60, 5, !dbg !25
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %60, !dbg !25
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !25
  %102 = or disjoint i32 %60, 1, !dbg !25
  %103 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %102, !dbg !25
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !25
  %105 = or disjoint i32 %60, 2, !dbg !25
  %106 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %105, !dbg !25
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !25
  %108 = or disjoint i32 %60, 3, !dbg !25
  %109 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %108, !dbg !25
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !25
  %111 = or disjoint i32 %60, 512, !dbg !25
  %112 = lshr i32 %111, 5, !dbg !25
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !25
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %111, !dbg !25
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !25
  %116 = or disjoint i32 %60, 513, !dbg !25
  %117 = lshr i32 %116, 5, !dbg !25
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !25
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !25
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !25
  %121 = or disjoint i32 %60, 514, !dbg !25
  %122 = lshr i32 %121, 5, !dbg !25
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !25
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !25
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !25
  %126 = or disjoint i32 %60, 515, !dbg !25
  %127 = lshr i32 %126, 5, !dbg !25
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !25
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !25
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !25
  %131 = shl i32 %20, 9, !dbg !26
  %132 = shl i32 %21, 9, !dbg !26
  %133 = add i32 %29, %131, !dbg !27
  %134 = add i32 %29, %132, !dbg !27
  %135 = sext i32 %133 to i64, !dbg !28
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !28
  %137 = sext i32 %134 to i64, !dbg !28
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !28
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %45) #4, !dbg !29
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %46) #4, !dbg !29
  %141 = sext i32 %.decomposed to i64, !dbg !30
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !30
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %32) #4, !dbg !31
  %144 = shl i32 %20, 2, !dbg !32
  %145 = shl i32 %21, 2, !dbg !32
  %146 = add i32 %33, %144, !dbg !33
  %147 = add i32 %33, %145, !dbg !33
  %148 = sext i32 %146 to i64, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !34
  %150 = sext i32 %147 to i64, !dbg !34
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %45) #4, !dbg !35
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %45) #4, !dbg !35
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %45) #4, !dbg !35
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %45) #4, !dbg !35
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %46) #4, !dbg !35
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %46) #4, !dbg !35
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %46) #4, !dbg !35
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %46) #4, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %45) #4, !dbg !37
  %163 = bitcast i32 %162 to float, !dbg !37
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %45) #4, !dbg !37
  %165 = bitcast i32 %164 to float, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %45) #4, !dbg !37
  %167 = bitcast i32 %166 to float, !dbg !37
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %45) #4, !dbg !37
  %169 = bitcast i32 %168 to float, !dbg !37
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %46) #4, !dbg !37
  %171 = bitcast i32 %170 to float, !dbg !37
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %46) #4, !dbg !37
  %173 = bitcast i32 %172 to float, !dbg !37
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %46) #4, !dbg !37
  %175 = bitcast i32 %174 to float, !dbg !37
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %46) #4, !dbg !37
  %177 = bitcast i32 %176 to float, !dbg !37
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !38
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %32) #4, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %6, i64 %141, !dbg !40
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %32) #4, !dbg !41
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float 1.280000e+02) #4, !dbg !42
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 1.280000e+02) #4, !dbg !42
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 1.280000e+02) #4, !dbg !42
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 1.280000e+02) #4, !dbg !42
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 1.280000e+02) #4, !dbg !42
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 1.280000e+02) #4, !dbg !42
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 1.280000e+02) #4, !dbg !42
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 1.280000e+02) #4, !dbg !42
  %190 = fadd float %182, 0x3EE4F8B580000000, !dbg !43
  %191 = fadd float %183, 0x3EE4F8B580000000, !dbg !43
  %192 = fadd float %184, 0x3EE4F8B580000000, !dbg !43
  %193 = fadd float %185, 0x3EE4F8B580000000, !dbg !43
  %194 = fadd float %186, 0x3EE4F8B580000000, !dbg !43
  %195 = fadd float %187, 0x3EE4F8B580000000, !dbg !43
  %196 = fadd float %188, 0x3EE4F8B580000000, !dbg !43
  %197 = fadd float %189, 0x3EE4F8B580000000, !dbg !43
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %198, 0, !dbg !44
  br i1 %.not.i, label %201, label %199, !dbg !44

199:                                              ; preds = %10
  %200 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %190), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

201:                                              ; preds = %10
  %202 = tail call float @llvm.nvvm.rsqrt.approx.f(float %190), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %199, %201
  %.0.i = phi float [ %200, %199 ], [ %202, %201 ], !dbg !44
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i1 = icmp eq i32 %203, 0, !dbg !44
  br i1 %.not.i1, label %206, label %204, !dbg !44

204:                                              ; preds = %__nv_rsqrtf.exit
  %205 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

206:                                              ; preds = %__nv_rsqrtf.exit
  %207 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

__nv_rsqrtf.exit3:                                ; preds = %204, %206
  %.0.i2 = phi float [ %205, %204 ], [ %207, %206 ], !dbg !44
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i4 = icmp eq i32 %208, 0, !dbg !44
  br i1 %.not.i4, label %211, label %209, !dbg !44

209:                                              ; preds = %__nv_rsqrtf.exit3
  %210 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

211:                                              ; preds = %__nv_rsqrtf.exit3
  %212 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %209, %211
  %.0.i5 = phi float [ %210, %209 ], [ %212, %211 ], !dbg !44
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i7 = icmp eq i32 %213, 0, !dbg !44
  br i1 %.not.i7, label %216, label %214, !dbg !44

214:                                              ; preds = %__nv_rsqrtf.exit6
  %215 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

216:                                              ; preds = %__nv_rsqrtf.exit6
  %217 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

__nv_rsqrtf.exit9:                                ; preds = %214, %216
  %.0.i8 = phi float [ %215, %214 ], [ %217, %216 ], !dbg !44
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i10 = icmp eq i32 %218, 0, !dbg !44
  br i1 %.not.i10, label %221, label %219, !dbg !44

219:                                              ; preds = %__nv_rsqrtf.exit9
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %194), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

221:                                              ; preds = %__nv_rsqrtf.exit9
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %194), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

__nv_rsqrtf.exit12:                               ; preds = %219, %221
  %.0.i11 = phi float [ %220, %219 ], [ %222, %221 ], !dbg !44
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i13 = icmp eq i32 %223, 0, !dbg !44
  br i1 %.not.i13, label %226, label %224, !dbg !44

224:                                              ; preds = %__nv_rsqrtf.exit12
  %225 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %195), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

226:                                              ; preds = %__nv_rsqrtf.exit12
  %227 = tail call float @llvm.nvvm.rsqrt.approx.f(float %195), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

__nv_rsqrtf.exit15:                               ; preds = %224, %226
  %.0.i14 = phi float [ %225, %224 ], [ %227, %226 ], !dbg !44
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i16 = icmp eq i32 %228, 0, !dbg !44
  br i1 %.not.i16, label %231, label %229, !dbg !44

229:                                              ; preds = %__nv_rsqrtf.exit15
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %196), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

231:                                              ; preds = %__nv_rsqrtf.exit15
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %196), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

__nv_rsqrtf.exit18:                               ; preds = %229, %231
  %.0.i17 = phi float [ %230, %229 ], [ %232, %231 ], !dbg !44
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i19 = icmp eq i32 %233, 0, !dbg !44
  br i1 %.not.i19, label %236, label %234, !dbg !44

234:                                              ; preds = %__nv_rsqrtf.exit18
  %235 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %197), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

236:                                              ; preds = %__nv_rsqrtf.exit18
  %237 = tail call float @llvm.nvvm.rsqrt.approx.f(float %197), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

__nv_rsqrtf.exit21:                               ; preds = %234, %236
  %.0.i20 = phi float [ %235, %234 ], [ %237, %236 ], !dbg !44
  %238 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !29
  %239 = bitcast i32 %238 to float, !dbg !29
  %240 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !31
  %241 = bitcast i32 %240 to float, !dbg !31
  %242 = fadd float %239, %241, !dbg !45
  %243 = fadd float %130, %242, !dbg !46
  %244 = bitcast i32 %159 to float, !dbg !35
  %245 = fsub float %243, %244, !dbg !47
  %246 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !29
  %247 = bitcast i32 %246 to float, !dbg !29
  %248 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !31
  %249 = bitcast i32 %248 to float, !dbg !31
  %250 = fadd float %247, %249, !dbg !45
  %251 = fadd float %125, %250, !dbg !46
  %252 = bitcast i32 %158 to float, !dbg !35
  %253 = fsub float %251, %252, !dbg !47
  %254 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !29
  %255 = bitcast i32 %254 to float, !dbg !29
  %256 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !31
  %257 = bitcast i32 %256 to float, !dbg !31
  %258 = fadd float %255, %257, !dbg !45
  %259 = fadd float %120, %258, !dbg !46
  %260 = bitcast i32 %157 to float, !dbg !35
  %261 = fsub float %259, %260, !dbg !47
  %262 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !29
  %263 = bitcast i32 %262 to float, !dbg !29
  %264 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !31
  %265 = bitcast i32 %264 to float, !dbg !31
  %266 = fadd float %263, %265, !dbg !45
  %267 = fadd float %115, %266, !dbg !46
  %268 = bitcast i32 %156 to float, !dbg !35
  %269 = fsub float %267, %268, !dbg !47
  %270 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !29
  %271 = bitcast i32 %270 to float, !dbg !29
  %272 = fadd float %271, %241, !dbg !45
  %273 = fadd float %110, %272, !dbg !46
  %274 = bitcast i32 %155 to float, !dbg !35
  %275 = fsub float %273, %274, !dbg !47
  %276 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !29
  %277 = bitcast i32 %276 to float, !dbg !29
  %278 = fadd float %277, %249, !dbg !45
  %279 = fadd float %107, %278, !dbg !46
  %280 = bitcast i32 %154 to float, !dbg !35
  %281 = fsub float %279, %280, !dbg !47
  %282 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !29
  %283 = bitcast i32 %282 to float, !dbg !29
  %284 = fadd float %283, %257, !dbg !45
  %285 = fadd float %104, %284, !dbg !46
  %286 = bitcast i32 %153 to float, !dbg !35
  %287 = fsub float %285, %286, !dbg !47
  %288 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !29
  %289 = bitcast i32 %288 to float, !dbg !29
  %290 = fadd float %289, %265, !dbg !45
  %291 = fadd float %101, %290, !dbg !46
  %292 = bitcast i32 %152 to float, !dbg !35
  %293 = fsub float %291, %292, !dbg !47
  %294 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !41
  %295 = bitcast i32 %294 to float, !dbg !41
  %296 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !41
  %297 = bitcast i32 %296 to float, !dbg !41
  %298 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !41
  %299 = bitcast i32 %298 to float, !dbg !41
  %300 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !41
  %301 = bitcast i32 %300 to float, !dbg !41
  %302 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !39
  %303 = bitcast i32 %302 to float, !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !39
  %305 = bitcast i32 %304 to float, !dbg !39
  %306 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !39
  %307 = bitcast i32 %306 to float, !dbg !39
  %308 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !39
  %309 = bitcast i32 %308 to float, !dbg !39
  %310 = fmul float %293, %.0.i, !dbg !48
  %311 = fmul float %287, %.0.i2, !dbg !48
  %312 = fmul float %281, %.0.i5, !dbg !48
  %313 = fmul float %275, %.0.i8, !dbg !48
  %314 = fmul float %269, %.0.i11, !dbg !48
  %315 = fmul float %261, %.0.i14, !dbg !48
  %316 = fmul float %253, %.0.i17, !dbg !48
  %317 = fmul float %245, %.0.i20, !dbg !48
  %318 = fmul float %310, %309, !dbg !49
  %319 = fmul float %311, %307, !dbg !49
  %320 = fmul float %312, %305, !dbg !49
  %321 = fmul float %313, %303, !dbg !49
  %322 = fmul float %314, %309, !dbg !49
  %323 = fmul float %315, %307, !dbg !49
  %324 = fmul float %316, %305, !dbg !49
  %325 = fmul float %317, %303, !dbg !49
  %326 = fadd float %318, %301, !dbg !50
  %327 = fadd float %319, %299, !dbg !50
  %328 = fadd float %320, %297, !dbg !50
  %329 = fadd float %321, %295, !dbg !50
  %330 = fadd float %322, %301, !dbg !50
  %331 = fadd float %323, %299, !dbg !50
  %332 = fadd float %324, %297, !dbg !50
  %333 = fadd float %325, %295, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %334 = bitcast float %310 to i32, !dbg !52
  %335 = bitcast float %311 to i32, !dbg !52
  %336 = bitcast float %312 to i32, !dbg !52
  %337 = bitcast float %313 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %335, i32 %336, i32 %337, ptr addrspace(1) %136, i1 %45) #4, !dbg !52
  %338 = bitcast float %314 to i32, !dbg !52
  %339 = bitcast float %315 to i32, !dbg !52
  %340 = bitcast float %316 to i32, !dbg !52
  %341 = bitcast float %317 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %338, i32 %339, i32 %340, i32 %341, ptr addrspace(1) %138, i1 %46) #4, !dbg !52
  %342 = getelementptr float, ptr addrspace(1) %7, i64 %135, !dbg !53
  %343 = getelementptr float, ptr addrspace(1) %7, i64 %137, !dbg !53
  %344 = bitcast float %326 to i32, !dbg !54
  %345 = bitcast float %327 to i32, !dbg !54
  %346 = bitcast float %328 to i32, !dbg !54
  %347 = bitcast float %329 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %342, i1 %45) #4, !dbg !54
  %348 = bitcast float %330 to i32, !dbg !54
  %349 = bitcast float %331 to i32, !dbg !54
  %350 = bitcast float %332 to i32, !dbg !54
  %351 = bitcast float %333 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %343, i1 %46) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuezwpyzmrfzsvk3mdk2ecowuynelffkh4aenby4vtokvwqdcunh.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_8", linkageName: "triton_poi_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 34, scope: !7)
!29 = !DILocation(line: 33, column: 48, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 43, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 28, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
!52 = !DILocation(line: 51, column: 49, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 46, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
