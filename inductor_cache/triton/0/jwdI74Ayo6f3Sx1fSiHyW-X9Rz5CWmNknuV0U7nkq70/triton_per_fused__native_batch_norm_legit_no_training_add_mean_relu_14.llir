; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 3, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 4, !dbg !12
  %18 = and i32 %17, 7, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 2048, !dbg !14
  %21 = shl i32 %16, 2, !dbg !15
  %22 = and i32 %21, 60, !dbg !15
  %23 = srem i32 %19, 512, !dbg !16
  %24 = shl i32 %19, 6, !dbg !17
  %25 = or disjoint i32 %24, %22, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %29 = sext i32 %23 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %20) #5, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #5, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %20) #5, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %20) #5, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %20) #5, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %20) #5, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #5, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !29
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #5, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #5, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #5, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #5, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #5, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #5, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #5, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #5, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #5, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %20) #5, !dbg !38
  %74 = fadd float %40, 0x3EE4F8B580000000, !dbg !39
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i11 = icmp eq i32 %81, 0, !dbg !40
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %.not1.i14 = icmp eq i32 %82, 0, !dbg !40
  br i1 %.not.i11, label %88, label %83, !dbg !40

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %86, label %84, !dbg !40

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #5, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #5, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %91, label %89, !dbg !40

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #5, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #5, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %84, %86, %89, %91
  %.0.i13 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !40
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !41
  %94 = fadd float %63, 0x3EE4F8B580000000, !dbg !42
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i31 = icmp eq i32 %101, 0, !dbg !43
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i34 = icmp eq i32 %102, 0, !dbg !43
  br i1 %.not.i31, label %108, label %103, !dbg !43

103:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %106, label %104, !dbg !43

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

108:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %111, label %109, !dbg !43

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

__nv_sqrtf.exit35:                                ; preds = %104, %106, %109, %111
  %.0.i33 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !43
  %113 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = bitcast i32 %57 to float, !dbg !32
  %116 = fsub float %114, %115, !dbg !44
  %117 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = fsub float %118, %115, !dbg !44
  %120 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !30
  %121 = bitcast i32 %120 to float, !dbg !30
  %122 = fsub float %121, %115, !dbg !44
  %123 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !30
  %124 = bitcast i32 %123 to float, !dbg !30
  %125 = fsub float %124, %115, !dbg !44
  %126 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %127 = bitcast i32 %126 to float, !dbg !20
  %128 = bitcast i32 %34 to float, !dbg !22
  %129 = fsub float %127, %128, !dbg !45
  %130 = fmul float %129, %93, !dbg !46
  %131 = bitcast i32 %45 to float, !dbg !26
  %132 = fmul float %130, %131, !dbg !47
  %133 = bitcast i32 %50 to float, !dbg !28
  %134 = fadd float %132, %133, !dbg !48
  %135 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %136 = bitcast i32 %135 to float, !dbg !20
  %137 = fsub float %136, %128, !dbg !45
  %138 = fmul float %137, %93, !dbg !46
  %139 = fmul float %138, %131, !dbg !47
  %140 = fadd float %139, %133, !dbg !48
  %141 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %142 = bitcast i32 %141 to float, !dbg !20
  %143 = fsub float %142, %128, !dbg !45
  %144 = fmul float %143, %93, !dbg !46
  %145 = fmul float %144, %131, !dbg !47
  %146 = fadd float %145, %133, !dbg !48
  %147 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %148 = bitcast i32 %147 to float, !dbg !20
  %149 = fsub float %148, %128, !dbg !45
  %150 = fmul float %149, %93, !dbg !46
  %151 = fmul float %150, %131, !dbg !47
  %152 = fadd float %151, %133, !dbg !48
  %153 = bitcast i32 %73 to float, !dbg !38
  %154 = bitcast i32 %68 to float, !dbg !36
  %155 = and i32 %16, 7, !dbg !12
  %156 = or disjoint i32 %15, %155, !dbg !13
  %157 = icmp slt i32 %156, 2048, !dbg !14
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #5, !dbg !49
  %159 = fmul float %125, %158, !dbg !50
  %160 = fmul float %122, %158, !dbg !50
  %161 = fmul float %119, %158, !dbg !50
  %162 = fmul float %116, %158, !dbg !50
  %163 = fmul float %159, %154, !dbg !51
  %164 = fmul float %160, %154, !dbg !51
  %165 = fmul float %161, %154, !dbg !51
  %166 = fmul float %162, %154, !dbg !51
  %167 = fadd float %163, %153, !dbg !52
  %168 = fadd float %164, %153, !dbg !52
  %169 = fadd float %165, %153, !dbg !52
  %170 = fadd float %166, %153, !dbg !52
  %171 = fcmp olt float %167, 0.000000e+00, !dbg !53
  %172 = fcmp olt float %168, 0.000000e+00, !dbg !53
  %173 = fcmp olt float %169, 0.000000e+00, !dbg !53
  %174 = fcmp olt float %170, 0.000000e+00, !dbg !53
  %175 = select i1 %171, float 0.000000e+00, float %167, !dbg !57
  %176 = select i1 %172, float 0.000000e+00, float %168, !dbg !57
  %177 = select i1 %173, float 0.000000e+00, float %169, !dbg !57
  %178 = select i1 %174, float 0.000000e+00, float %170, !dbg !57
  %179 = fadd float %152, %175, !dbg !58
  %180 = fadd float %146, %176, !dbg !58
  %181 = fadd float %140, %177, !dbg !58
  %182 = fadd float %134, %178, !dbg !58
  %183 = fcmp olt float %179, 0.000000e+00, !dbg !59
  %184 = fcmp olt float %180, 0.000000e+00, !dbg !59
  %185 = fcmp olt float %181, 0.000000e+00, !dbg !59
  %186 = fcmp olt float %182, 0.000000e+00, !dbg !59
  %187 = select i1 %183, float 0.000000e+00, float %179, !dbg !61
  %188 = select i1 %184, float 0.000000e+00, float %180, !dbg !61
  %189 = select i1 %185, float 0.000000e+00, float %181, !dbg !61
  %190 = select i1 %186, float 0.000000e+00, float %182, !dbg !61
  %191 = fadd float %187, %188, !dbg !62
  %192 = fadd float %189, %191, !dbg !62
  %193 = fadd float %190, %192, !dbg !62
  %194 = select i1 %20, float %193, float 0.000000e+00, !dbg !62
  %195 = bitcast float %194 to i32, !dbg !67
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !67
  %197 = bitcast i32 %196 to float, !dbg !67
  %198 = fadd float %194, %197, !dbg !62
  %199 = bitcast float %198 to i32, !dbg !67
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 4, i32 31), !dbg !67
  %201 = bitcast i32 %200 to float, !dbg !67
  %202 = fadd float %198, %201, !dbg !62
  %203 = bitcast float %202 to i32, !dbg !67
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !67
  %205 = bitcast i32 %204 to float, !dbg !67
  %206 = fadd float %202, %205, !dbg !62
  %207 = bitcast float %206 to i32, !dbg !67
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !67
  %209 = bitcast i32 %208 to float, !dbg !67
  %210 = fadd float %206, %209, !dbg !62
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !68
  %212 = bitcast float %210 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !68
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !68
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float 6.400000e+01) #5, !dbg !68
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !69
  %217 = bitcast float %187 to i32, !dbg !70
  %218 = bitcast float %188 to i32, !dbg !70
  %219 = bitcast float %189 to i32, !dbg !70
  %220 = bitcast float %190 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %216, i1 %20) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %221 = sext i32 %156 to i64, !dbg !72
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !72
  %223 = and i32 %16, 120, !dbg !73
  %224 = icmp eq i32 %223, 0, !dbg !73
  %225 = bitcast float %215 to i32, !dbg !73
  %226 = and i1 %224, %157, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %222, i1 %226) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 44, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 47, column: 18, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 27, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 19, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 62, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !60)
!60 = !DILocation(line: 64, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !60)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !66)
!63 = distinct !DILexicalBlockFile(scope: !65, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!65 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!66 = !DILocation(line: 67, column: 26, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 28, scope: !7)
!70 = !DILocation(line: 70, column: 48, scope: !7)
!71 = !DILocation(line: 71, column: 4, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 72, column: 40, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
