#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0)
#loc1 = loc(unknown)
#loc52 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":67:26)
#loc67 = loc(callsite(#loc1 at #loc52))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x64xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<2048> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<512> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<6.400000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.muli %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %13 : tensor<1x64xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %15 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc10)
    %18 = arith.addi %16, %17 : tensor<8x64xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc11)
    %21 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x64xi1, #blocked> loc(#loc12)
    %22 = tt.load %20, %21, %cst : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %24 = tt.addptr %23, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc13)
    %25 = tt.load %24, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = tt.addptr %26, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc15)
    %28 = tt.load %27, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %30 = tt.addptr %29, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc17)
    %31 = tt.load %30, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %32 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %33 = tt.addptr %32, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc19)
    %34 = tt.load %33, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %35 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc21)
    %36 = tt.addptr %35, %18 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc21)
    %37 = tt.load %36, %21, %cst : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %38 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %39 = tt.addptr %38, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc23)
    %40 = tt.load %39, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %41 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %42 = tt.addptr %41, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc25)
    %43 = tt.load %42, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %44 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %45 = tt.addptr %44, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc27)
    %46 = tt.load %45, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    %47 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %48 = tt.addptr %47, %14 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc29)
    %49 = tt.load %48, %10 evictionPolicy = evict_last : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc30)
    %50 = tt.broadcast %25 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc31)
    %51 = arith.subf %22, %50 : tensor<8x64xf32, #blocked> loc(#loc31)
    %52 = arith.addf %28, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc32)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc33)
    %54 = arith.divf %cst_5, %53 : tensor<8x1xf32, #blocked> loc(#loc34)
    %55 = tt.broadcast %54 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc35)
    %56 = arith.mulf %51, %55 : tensor<8x64xf32, #blocked> loc(#loc35)
    %57 = tt.broadcast %31 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc36)
    %58 = arith.mulf %56, %57 : tensor<8x64xf32, #blocked> loc(#loc36)
    %59 = tt.broadcast %34 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc37)
    %60 = arith.addf %58, %59 : tensor<8x64xf32, #blocked> loc(#loc37)
    %61 = tt.broadcast %40 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc38)
    %62 = arith.subf %37, %61 : tensor<8x64xf32, #blocked> loc(#loc38)
    %63 = arith.addf %43, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc39)
    %64 = tt.extern_elementwise %63 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc40)
    %65 = arith.divf %cst_5, %64 : tensor<8x1xf32, #blocked> loc(#loc41)
    %66 = tt.broadcast %65 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc42)
    %67 = arith.mulf %62, %66 : tensor<8x64xf32, #blocked> loc(#loc42)
    %68 = tt.broadcast %46 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc43)
    %69 = arith.mulf %67, %68 : tensor<8x64xf32, #blocked> loc(#loc43)
    %70 = tt.broadcast %49 : tensor<8x1xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc44)
    %71 = arith.addf %69, %70 : tensor<8x64xf32, #blocked> loc(#loc44)
    %72 = arith.cmpf ogt, %cst, %71 : tensor<8x64xf32, #blocked> loc(#loc62)
    %73 = arith.select %72, %cst, %71 : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc63)
    %74 = arith.addf %60, %73 : tensor<8x64xf32, #blocked> loc(#loc48)
    %75 = arith.cmpf ogt, %cst, %74 : tensor<8x64xf32, #blocked> loc(#loc64)
    %76 = arith.select %75, %cst, %74 : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc65)
    %77 = arith.select %21, %76, %cst : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc50)
    %78 = "tt.reduce"(%77) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32 loc(callsite(#loc1 at #loc52)), %arg15: f32 loc(callsite(#loc1 at #loc52))):
      %86 = arith.addf %arg14, %arg15 : f32 loc(#loc69)
      tt.reduce.return %86 : f32 loc(#loc66)
    }) : (tensor<8x64xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc66)
    %79 = triton_gpu.convert_layout %78 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %80 = tt.expand_dims %79 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc55)
    %81 = arith.divf %80, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc54)
    %82 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc56)
    %83 = tt.addptr %82, %18 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc56)
    tt.store %83, %76, %21 : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc57)
    gpu.barrier loc(#loc58)
    %84 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc59)
    %85 = tt.addptr %84, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc59)
    tt.store %85, %81, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    tt.return loc(#loc61)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":23:28)
#loc3 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":23:33)
#loc4 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":24:44)
#loc5 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":24:23)
#loc6 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":25:21)
#loc7 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":26:34)
#loc8 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":31:19)
#loc9 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:38)
#loc10 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:35)
#loc11 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:30)
#loc12 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:43)
#loc13 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":33:30)
#loc14 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":33:35)
#loc15 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":34:30)
#loc16 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":34:35)
#loc17 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":35:31)
#loc18 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":35:36)
#loc19 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":36:31)
#loc20 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":36:36)
#loc21 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":37:31)
#loc22 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":37:44)
#loc23 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":38:31)
#loc24 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":38:36)
#loc25 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":39:31)
#loc26 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":39:36)
#loc27 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":40:31)
#loc28 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":40:36)
#loc29 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":41:31)
#loc30 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":41:36)
#loc31 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":42:18)
#loc32 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":44:18)
#loc33 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":45:26)
#loc34 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":47:18)
#loc35 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":50:19)
#loc36 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":51:20)
#loc37 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":52:20)
#loc38 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":53:20)
#loc39 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":54:20)
#loc40 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":55:27)
#loc41 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":56:19)
#loc42 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":58:20)
#loc43 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":59:20)
#loc44 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":60:20)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc46 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":62:42)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc48 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":63:20)
#loc49 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":64:42)
#loc50 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":66:35)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc54 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":69:20)
#loc55 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":67:29)
#loc56 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":70:28)
#loc57 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":70:48)
#loc58 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":71:4)
#loc59 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:28)
#loc60 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:40)
#loc61 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:4)
#loc62 = loc(callsite(#loc45 at #loc46))
#loc63 = loc(callsite(#loc47 at #loc46))
#loc64 = loc(callsite(#loc45 at #loc49))
#loc65 = loc(callsite(#loc47 at #loc49))
#loc66 = loc(callsite(#loc51 at #loc52))
#loc68 = loc(callsite(#loc53 at #loc51))
#loc69 = loc(callsite(#loc68 at #loc52))
