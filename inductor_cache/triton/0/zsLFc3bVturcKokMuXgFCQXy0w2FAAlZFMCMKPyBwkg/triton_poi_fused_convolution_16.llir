; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %10, 64, !dbg !12
  %12 = or disjoint i32 %10, 128, !dbg !12
  %13 = or disjoint i32 %10, 192, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = or disjoint i32 %7, %10, !dbg !13
  %18 = or disjoint i32 %7, %11, !dbg !13
  %19 = or disjoint i32 %7, %12, !dbg !13
  %20 = or disjoint i32 %7, %13, !dbg !13
  %21 = or disjoint i32 %7, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 4, !dbg !15
  %.lobit12 = lshr i32 %8, 6, !dbg !16
  %24 = and i32 %.lobit12, 3, !dbg !16
  %25 = or disjoint i32 %23, %15, !dbg !17
  %26 = or disjoint i32 %23, %24, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = icmp slt i32 %25, 64, !dbg !18
  %31 = icmp slt i32 %26, 64, !dbg !18
  %32 = icmp slt i32 %27, 64, !dbg !18
  %33 = icmp slt i32 %28, 64, !dbg !18
  %34 = icmp slt i32 %29, 64, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %35 = sdiv i32 %.frozen, 512, !dbg !19
  %36 = mul i32 %35, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = shl i32 %17, 6, !dbg !21
  %38 = shl i32 %18, 6, !dbg !21
  %39 = shl i32 %19, 6, !dbg !21
  %40 = shl i32 %20, 6, !dbg !21
  %41 = add i32 %25, %37, !dbg !22
  %42 = add i32 %25, %38, !dbg !22
  %43 = add i32 %25, %39, !dbg !22
  %44 = add i32 %25, %40, !dbg !22
  %45 = sext i32 %41 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %42 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %43 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %44 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %30) #2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %30) #2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %30) #2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !24
  %73 = shl i32 %26, 9, !dbg !25
  %74 = shl i32 %27, 9, !dbg !25
  %75 = shl i32 %28, 9, !dbg !25
  %76 = shl i32 %29, 9, !dbg !25
  %77 = shl i32 %35, 15, !dbg !26
  %78 = add i32 %77, %.decomposed, !dbg !27
  %79 = add i32 %78, %73, !dbg !28
  %80 = add i32 %78, %74, !dbg !28
  %81 = add i32 %78, %75, !dbg !28
  %82 = add i32 %78, %76, !dbg !28
  %83 = sext i32 %79 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !29
  %85 = sext i32 %80 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !29
  %87 = sext i32 %81 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !29
  %89 = sext i32 %82 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !29
  %91 = shl i32 %8, 10, !dbg !30
  %92 = and i32 %91, 3072, !dbg !30
  %93 = or disjoint i32 %92, %10, !dbg !30
  %94 = and i32 %14, 1020, !dbg !30
  %95 = lshr exact i32 %92, 4, !dbg !30
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !30
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !30
  %98 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !30
  %99 = or disjoint i32 %93, 256, !dbg !30
  %100 = lshr i32 %99, 6, !dbg !30
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !30
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !30
  %103 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !30
  %104 = or disjoint i32 %93, 512, !dbg !30
  %105 = lshr i32 %104, 6, !dbg !30
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !30
  %108 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !30
  %109 = or disjoint i32 %93, 768, !dbg !30
  %110 = lshr i32 %109, 6, !dbg !30
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !30
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !30
  %113 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !30
  %114 = or disjoint i32 %93, 64, !dbg !30
  %115 = getelementptr float, ptr addrspace(3) %96, i32 %114, !dbg !30
  %116 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !30
  %117 = or disjoint i32 %93, 320, !dbg !30
  %118 = lshr i32 %117, 6, !dbg !30
  %119 = and i32 %118, 52, !dbg !30
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !30
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %117, !dbg !30
  %122 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !30
  %123 = or disjoint i32 %93, 576, !dbg !30
  %124 = lshr i32 %123, 6, !dbg !30
  %125 = and i32 %124, 56, !dbg !30
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !30
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %123, !dbg !30
  %128 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !30
  %129 = or disjoint i32 %93, 832, !dbg !30
  %130 = lshr i32 %129, 6, !dbg !30
  %131 = and i32 %130, 60, !dbg !30
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !30
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %129, !dbg !30
  %134 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !30
  %135 = or disjoint i32 %93, 128, !dbg !30
  %136 = getelementptr float, ptr addrspace(3) %96, i32 %135, !dbg !30
  %137 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !30
  %138 = or disjoint i32 %93, 384, !dbg !30
  %139 = lshr i32 %138, 6, !dbg !30
  %140 = and i32 %139, 52, !dbg !30
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !30
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !30
  %143 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !30
  %144 = or disjoint i32 %93, 640, !dbg !30
  %145 = lshr i32 %144, 6, !dbg !30
  %146 = and i32 %145, 56, !dbg !30
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !30
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %144, !dbg !30
  %149 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !30
  %150 = or disjoint i32 %93, 896, !dbg !30
  %151 = lshr i32 %150, 6, !dbg !30
  %152 = and i32 %151, 60, !dbg !30
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !30
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150, !dbg !30
  %155 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !30
  %156 = or disjoint i32 %93, 192, !dbg !30
  %157 = getelementptr float, ptr addrspace(3) %96, i32 %156, !dbg !30
  %158 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !30
  %159 = or disjoint i32 %93, 448, !dbg !30
  %160 = lshr i32 %159, 6, !dbg !30
  %161 = and i32 %160, 52, !dbg !30
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !30
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !30
  %164 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !30
  %165 = or disjoint i32 %93, 704, !dbg !30
  %166 = lshr i32 %165, 6, !dbg !30
  %167 = and i32 %166, 56, !dbg !30
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !30
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !30
  %170 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !30
  %171 = or disjoint i32 %93, 960, !dbg !30
  %172 = lshr i32 %171, 6, !dbg !30
  %173 = and i32 %172, 60, !dbg !30
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !30
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !30
  %176 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %177 = lshr i32 %14, 6, !dbg !30
  %178 = and i32 %177, 12, !dbg !30
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !30
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %94, !dbg !30
  %181 = or disjoint i32 %94, 1024, !dbg !30
  %182 = lshr i32 %181, 6, !dbg !30
  %183 = and i32 %182, 28, !dbg !30
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !30
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %181, !dbg !30
  %186 = load <4 x i32>, ptr addrspace(3) %185, align 16, !dbg !30
  %187 = or disjoint i32 %94, 2048, !dbg !30
  %188 = lshr i32 %187, 6, !dbg !30
  %189 = and i32 %188, 44, !dbg !30
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !30
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %187, !dbg !30
  %192 = load <4 x i32>, ptr addrspace(3) %191, align 16, !dbg !30
  %193 = or disjoint i32 %94, 3072, !dbg !30
  %194 = lshr i32 %193, 6, !dbg !30
  %195 = and i32 %194, 60, !dbg !30
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !30
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %193, !dbg !30
  %198 = load <4 x i32>, ptr addrspace(3) %197, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %180, align 16, !dbg !30
  %199 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 4, !dbg !30
  %.extract18 = load i32, ptr addrspace(3) %199, align 4, !dbg !30
  %200 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 8, !dbg !30
  %.extract19 = load i32, ptr addrspace(3) %200, align 8, !dbg !30
  %201 = getelementptr inbounds i8, ptr addrspace(3) %180, i32 12, !dbg !30
  %.extract20 = load i32, ptr addrspace(3) %201, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %84, i1 %31) #2, !dbg !30
  %.extract21 = extractelement <4 x i32> %186, i64 0, !dbg !30
  %.extract22 = extractelement <4 x i32> %186, i64 1, !dbg !30
  %.extract23 = extractelement <4 x i32> %186, i64 2, !dbg !30
  %.extract24 = extractelement <4 x i32> %186, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %86, i1 %32) #2, !dbg !30
  %.extract25 = extractelement <4 x i32> %192, i64 0, !dbg !30
  %.extract26 = extractelement <4 x i32> %192, i64 1, !dbg !30
  %.extract27 = extractelement <4 x i32> %192, i64 2, !dbg !30
  %.extract28 = extractelement <4 x i32> %192, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %88, i1 %33) #2, !dbg !30
  %.extract29 = extractelement <4 x i32> %198, i64 0, !dbg !30
  %.extract30 = extractelement <4 x i32> %198, i64 1, !dbg !30
  %.extract31 = extractelement <4 x i32> %198, i64 2, !dbg !30
  %.extract32 = extractelement <4 x i32> %198, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %90, i1 %34) #2, !dbg !30
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !31
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !31
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !31
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %202, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %203, i1 %32) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %204, i1 %33) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %205, i1 %34) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cna6bzl33y4kehillv7zs6qoivtqdccl6o5rsnb5p6ejyx3j45ra.py", directory: "inductor_cache/na")
!4 = !{ptr @triton_poi_fused_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_16", linkageName: "triton_poi_fused_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 56, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 56, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
