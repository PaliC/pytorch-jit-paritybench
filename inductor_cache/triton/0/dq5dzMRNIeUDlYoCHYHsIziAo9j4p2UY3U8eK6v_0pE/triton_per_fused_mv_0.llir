; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = or disjoint i32 %10, 16, !dbg !12
  %13 = or disjoint i32 %10, 24, !dbg !12
  %14 = and i32 %8, 15, !dbg !12
  %15 = and i32 %8, 31, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = icmp slt i32 %16, 128, !dbg !14
  %22 = icmp slt i32 %17, 128, !dbg !14
  %23 = icmp slt i32 %18, 128, !dbg !14
  %24 = icmp slt i32 %19, 128, !dbg !14
  %25 = icmp slt i32 %20, 128, !dbg !14
  %26 = icmp ne i32 %14, 15, !dbg !15
  %27 = mul i32 %16, 15, !dbg !16
  %28 = mul i32 %17, 15, !dbg !16
  %29 = mul i32 %18, 15, !dbg !16
  %30 = mul i32 %19, 15, !dbg !16
  %31 = add i32 %27, %14, !dbg !17
  %32 = add i32 %28, %14, !dbg !17
  %33 = add i32 %29, %14, !dbg !17
  %34 = add i32 %30, %14, !dbg !17
  %35 = sext i32 %31 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !18
  %37 = sext i32 %32 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !18
  %39 = sext i32 %33 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !18
  %41 = sext i32 %34 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !18
  %43 = and i1 %26, %21, !dbg !19
  %44 = and i1 %26, %22, !dbg !19
  %45 = and i1 %26, %23, !dbg !19
  %46 = and i1 %26, %24, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %43, i32 0, i1 %43) #3, !dbg !20
  %48 = bitcast i32 %47 to float, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %44, i32 0, i1 %44) #3, !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %45, i32 0, i1 %45) #3, !dbg !20
  %52 = bitcast i32 %51 to float, !dbg !20
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %46, i32 0, i1 %46) #3, !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = zext nneg i32 %14 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %26, i32 0, i1 %26) #3, !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = fmul float %48, %58, !dbg !23
  %60 = fmul float %50, %58, !dbg !23
  %61 = fmul float %52, %58, !dbg !23
  %62 = fmul float %54, %58, !dbg !23
  %63 = select i1 %43, float %59, float 0.000000e+00, !dbg !24
  %64 = select i1 %44, float %60, float 0.000000e+00, !dbg !24
  %65 = select i1 %45, float %61, float 0.000000e+00, !dbg !24
  %66 = select i1 %46, float %62, float 0.000000e+00, !dbg !24
  %67 = bitcast float %63 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %63, %69, !dbg !29
  %71 = bitcast float %70 to i32, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %70, %73, !dbg !29
  %75 = bitcast float %74 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %74, %77, !dbg !29
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !29
  %83 = bitcast float %64 to i32, !dbg !25
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 8, i32 31), !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fadd float %64, %85, !dbg !29
  %87 = bitcast float %86 to i32, !dbg !25
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fadd float %86, %89, !dbg !29
  %91 = bitcast float %90 to i32, !dbg !25
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = fadd float %90, %93, !dbg !29
  %95 = bitcast float %94 to i32, !dbg !25
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %94, %97, !dbg !29
  %99 = bitcast float %65 to i32, !dbg !25
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !25
  %101 = bitcast i32 %100 to float, !dbg !25
  %102 = fadd float %65, %101, !dbg !29
  %103 = bitcast float %102 to i32, !dbg !25
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !25
  %105 = bitcast i32 %104 to float, !dbg !25
  %106 = fadd float %102, %105, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !25
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !25
  %109 = bitcast i32 %108 to float, !dbg !25
  %110 = fadd float %106, %109, !dbg !29
  %111 = bitcast float %110 to i32, !dbg !25
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fadd float %110, %113, !dbg !29
  %115 = bitcast float %66 to i32, !dbg !25
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fadd float %66, %117, !dbg !29
  %119 = bitcast float %118 to i32, !dbg !25
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !25
  %121 = bitcast i32 %120 to float, !dbg !25
  %122 = fadd float %118, %121, !dbg !29
  %123 = bitcast float %122 to i32, !dbg !25
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %122, %125, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !25
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fadd float %126, %129, !dbg !29
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %132 = bitcast float %82 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #3, !dbg !31
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %134 = bitcast float %98 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #3, !dbg !31
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %136 = bitcast float %114 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #3, !dbg !31
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %138 = bitcast float %130 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !31
  %141 = sext i32 %20 to i64, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !32
  %143 = and i32 %8, 96, !dbg !33
  %144 = icmp eq i32 %143, 0, !dbg !33
  %145 = and i1 %144, %25, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %142, i1 %145) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cliqf6vwvkgqzazlb2utq2g46t7jhkkr2dedr6txkfoore2v5vmh.py", directory: "inductor_cache/li")
!4 = !{ptr @triton_per_fused_mv_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_0", linkageName: "triton_per_fused_mv_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 36, column: 27, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 4, scope: !7)
