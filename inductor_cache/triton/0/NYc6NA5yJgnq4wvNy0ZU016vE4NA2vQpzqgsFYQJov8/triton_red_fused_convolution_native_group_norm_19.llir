; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 2048, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 8, !dbg !13
  %18 = shl i32 %8, 15, !dbg !14
  %19 = shl nsw i32 %17, 5, !dbg !15
  %20 = or disjoint i32 %18, %16
  %21 = shl nuw nsw i32 %16, 1
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %22
  %24 = or disjoint i32 %21, 2
  %25 = zext nneg i32 %24 to i64
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %25
  %27 = or disjoint i32 %21, 4
  %28 = zext nneg i32 %27 to i64
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %28
  %30 = or disjoint i32 %21, 6
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %11, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %12, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %13, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %14, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43
  %45 = zext nneg i32 %11 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = zext nneg i32 %12 to i64
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %13 to i64
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %51 = zext nneg i32 %14 to i64
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51
  %53 = zext nneg i32 %16 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = sext i32 %20 to i64, !dbg !16
  %56 = sext i32 %19 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !16
  %57 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 4
  %58 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 8
  %59 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 12
  br label %60, !dbg !16

60:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %7 ], [ %149, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %150, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %151, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %152, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %145, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %146, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %147, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %148, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %141, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %142, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %143, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %144, %._crit_edge ]
  %73 = lshr exact i64 %indvars.iv, 10, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !19
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %79, i1 true) #5, !dbg !19
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %80, i1 true) #5, !dbg !19
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %81, i1 true) #5, !dbg !19
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %82, i1 true) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %83 = load float, ptr addrspace(3) %35, align 8, !dbg !19
  %84 = load float, ptr addrspace(3) %38, align 8, !dbg !19
  %85 = load float, ptr addrspace(3) %41, align 8, !dbg !19
  %86 = load float, ptr addrspace(3) %44, align 8, !dbg !19
  %87 = add nuw nsw i64 %73, %56, !dbg !20
  %88 = or disjoint i64 %87, 1, !dbg !20
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !21
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !21
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %94 = bitcast i32 %93 to float, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %96 = bitcast i32 %95 to float, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %98 = bitcast i32 %97 to float, !dbg !22
  %99 = fadd float %83, %92, !dbg !23
  %100 = fadd float %84, %94, !dbg !23
  %101 = fadd float %85, %96, !dbg !23
  %102 = fadd float %86, %98, !dbg !23
  %103 = icmp eq i64 %indvars.iv, 0, !dbg !24
  br i1 %103, label %._crit_edge, label %104, !dbg !25

104:                                              ; preds = %60
  %105 = fsub float %99, %69, !dbg !29
  %106 = fsub float %100, %70, !dbg !29
  %107 = fsub float %101, %71, !dbg !29
  %108 = fsub float %102, %72, !dbg !29
  %109 = fadd float %61, 1.000000e+00, !dbg !30
  %110 = fadd float %62, 1.000000e+00, !dbg !30
  %111 = fadd float %63, 1.000000e+00, !dbg !30
  %112 = fadd float %64, 1.000000e+00, !dbg !30
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %109) #5, !dbg !31
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %110) #5, !dbg !31
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %111) #5, !dbg !31
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %112) #5, !dbg !31
  %117 = fadd float %69, %113, !dbg !32
  %118 = fadd float %70, %114, !dbg !32
  %119 = fadd float %71, %115, !dbg !32
  %120 = fadd float %72, %116, !dbg !32
  %121 = fsub float %99, %117, !dbg !33
  %122 = fsub float %100, %118, !dbg !33
  %123 = fsub float %101, %119, !dbg !33
  %124 = fsub float %102, %120, !dbg !33
  %125 = fmul float %105, %121, !dbg !34
  %126 = fmul float %106, %122, !dbg !34
  %127 = fmul float %107, %123, !dbg !34
  %128 = fmul float %108, %124, !dbg !34
  %129 = fadd float %65, %125, !dbg !35
  %130 = fadd float %66, %126, !dbg !35
  %131 = fadd float %67, %127, !dbg !35
  %132 = fadd float %68, %128, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %60, %104
  %133 = phi float [ %129, %104 ], [ 0.000000e+00, %60 ], !dbg !28
  %134 = phi float [ %130, %104 ], [ 0.000000e+00, %60 ], !dbg !28
  %135 = phi float [ %131, %104 ], [ 0.000000e+00, %60 ], !dbg !28
  %136 = phi float [ %132, %104 ], [ 0.000000e+00, %60 ], !dbg !28
  %.pn7 = phi float [ %117, %104 ], [ %99, %60 ]
  %.pn5 = phi float [ %118, %104 ], [ %100, %60 ]
  %.pn3 = phi float [ %119, %104 ], [ %101, %60 ]
  %.pn1 = phi float [ %120, %104 ], [ %102, %60 ]
  %137 = phi float [ %109, %104 ], [ 1.000000e+00, %60 ], !dbg !28
  %138 = phi float [ %110, %104 ], [ 1.000000e+00, %60 ], !dbg !28
  %139 = phi float [ %111, %104 ], [ 1.000000e+00, %60 ], !dbg !28
  %140 = phi float [ %112, %104 ], [ 1.000000e+00, %60 ], !dbg !28
  %141 = select i1 %9, float %.pn7, float %69, !dbg !36
  %142 = select i1 %9, float %.pn5, float %70, !dbg !36
  %143 = select i1 %9, float %.pn3, float %71, !dbg !36
  %144 = select i1 %9, float %.pn1, float %72, !dbg !36
  %145 = select i1 %9, float %133, float %65, !dbg !37
  %146 = select i1 %9, float %134, float %66, !dbg !37
  %147 = select i1 %9, float %135, float %67, !dbg !37
  %148 = select i1 %9, float %136, float %68, !dbg !37
  %149 = select i1 %9, float %137, float %61, !dbg !38
  %150 = select i1 %9, float %138, float %62, !dbg !38
  %151 = select i1 %9, float %139, float %63, !dbg !38
  %152 = select i1 %9, float %140, float %64, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %153 = bitcast float %99 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %153, i1 true) #5, !dbg !39
  %154 = bitcast float %100 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %154, i1 true) #5, !dbg !39
  %155 = bitcast float %101 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %155, i1 true) #5, !dbg !39
  %156 = bitcast float %102 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %156, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %54, align 16, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %57, align 4, !dbg !39
  %.extract12 = load i32, ptr addrspace(3) %58, align 8, !dbg !39
  %.extract13 = load i32, ptr addrspace(3) %59, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %9) #5, !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %157 = icmp samesign ult i64 %indvars.iv, 30720, !dbg !16
  br i1 %157, label %60, label %158, !dbg !16

158:                                              ; preds = %._crit_edge
  %159 = lshr i32 %10, 5, !dbg !12
  %160 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %161 = fsub float %142, %141, !dbg !42
  %162 = fadd float %149, %150, !dbg !44
  %163 = fcmp oeq float %162, 0.000000e+00, !dbg !45
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %162) #5, !dbg !46
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !47
  %166 = fmul float %161, %165, !dbg !48
  %167 = fadd float %141, %166, !dbg !49
  %168 = fadd float %145, %146, !dbg !50
  %169 = fmul float %161, %161, !dbg !51
  %170 = fmul float %169, %149, !dbg !52
  %171 = fmul float %170, %165, !dbg !53
  %172 = fadd float %168, %171, !dbg !54
  %173 = fsub float %143, %167, !dbg !42
  %174 = fadd float %151, %162, !dbg !44
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !45
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %174) #5, !dbg !46
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !47
  %178 = fmul float %177, %173, !dbg !48
  %179 = fadd float %167, %178, !dbg !49
  %180 = fadd float %147, %172, !dbg !50
  %181 = fmul float %173, %173, !dbg !51
  %182 = fmul float %162, %181, !dbg !52
  %183 = fmul float %177, %182, !dbg !53
  %184 = fadd float %180, %183, !dbg !54
  %185 = fsub float %144, %179, !dbg !42
  %186 = fadd float %152, %174, !dbg !44
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !45
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %186) #5, !dbg !46
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !47
  %190 = fmul float %189, %185, !dbg !48
  %191 = fadd float %179, %190, !dbg !49
  %192 = fadd float %148, %184, !dbg !50
  %193 = fmul float %185, %185, !dbg !51
  %194 = fmul float %174, %193, !dbg !52
  %195 = fmul float %189, %194, !dbg !53
  %196 = fadd float %192, %195, !dbg !54
  %197 = bitcast float %191 to i32, !dbg !40
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !40
  %199 = bitcast i32 %198 to float, !dbg !40
  %200 = bitcast float %196 to i32, !dbg !40
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !40
  %202 = bitcast i32 %201 to float, !dbg !40
  %203 = bitcast float %186 to i32, !dbg !40
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !40
  %205 = bitcast i32 %204 to float, !dbg !40
  %206 = fsub float %199, %191, !dbg !42
  %207 = fadd float %186, %205, !dbg !44
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !45
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %207) #5, !dbg !46
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !47
  %211 = fmul float %210, %206, !dbg !48
  %212 = fadd float %191, %211, !dbg !49
  %213 = fadd float %196, %202, !dbg !50
  %214 = fmul float %206, %206, !dbg !51
  %215 = fmul float %186, %214, !dbg !52
  %216 = fmul float %210, %215, !dbg !53
  %217 = fadd float %213, %216, !dbg !54
  %218 = bitcast float %212 to i32, !dbg !40
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !40
  %220 = bitcast i32 %219 to float, !dbg !40
  %221 = bitcast float %217 to i32, !dbg !40
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !40
  %223 = bitcast i32 %222 to float, !dbg !40
  %224 = bitcast float %207 to i32, !dbg !40
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !40
  %226 = bitcast i32 %225 to float, !dbg !40
  %227 = fsub float %220, %212, !dbg !42
  %228 = fadd float %207, %226, !dbg !44
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !45
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %228) #5, !dbg !46
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !47
  %232 = fmul float %227, %231, !dbg !48
  %233 = fadd float %212, %232, !dbg !49
  %234 = fadd float %217, %223, !dbg !50
  %235 = fmul float %227, %227, !dbg !51
  %236 = fmul float %207, %235, !dbg !52
  %237 = fmul float %231, %236, !dbg !53
  %238 = fadd float %234, %237, !dbg !54
  %239 = bitcast float %233 to i32, !dbg !40
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !40
  %241 = bitcast i32 %240 to float, !dbg !40
  %242 = bitcast float %238 to i32, !dbg !40
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !40
  %244 = bitcast i32 %243 to float, !dbg !40
  %245 = bitcast float %228 to i32, !dbg !40
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !40
  %247 = bitcast i32 %246 to float, !dbg !40
  %248 = fsub float %241, %233, !dbg !42
  %249 = fadd float %228, %247, !dbg !44
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !45
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #5, !dbg !46
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !47
  %253 = fmul float %248, %252, !dbg !48
  %254 = fadd float %233, %253, !dbg !49
  %255 = fadd float %238, %244, !dbg !50
  %256 = fmul float %248, %248, !dbg !51
  %257 = fmul float %228, %256, !dbg !52
  %258 = fmul float %252, %257, !dbg !53
  %259 = fadd float %255, %258, !dbg !54
  %260 = bitcast float %254 to i32, !dbg !40
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !40
  %262 = bitcast i32 %261 to float, !dbg !40
  %263 = bitcast float %259 to i32, !dbg !40
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !40
  %265 = bitcast i32 %264 to float, !dbg !40
  %266 = bitcast float %249 to i32, !dbg !40
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !40
  %268 = bitcast i32 %267 to float, !dbg !40
  %269 = fsub float %262, %254, !dbg !42
  %270 = fadd float %249, %268, !dbg !44
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !45
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #5, !dbg !46
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !47
  %274 = fmul float %269, %273, !dbg !48
  %275 = fadd float %254, %274, !dbg !49
  %276 = fadd float %259, %265, !dbg !50
  %277 = fmul float %269, %269, !dbg !51
  %278 = fmul float %249, %277, !dbg !52
  %279 = fmul float %273, %278, !dbg !53
  %280 = fadd float %276, %279, !dbg !54
  %281 = bitcast float %275 to i32, !dbg !40
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !40
  %283 = bitcast i32 %282 to float, !dbg !40
  %284 = bitcast float %280 to i32, !dbg !40
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !40
  %286 = bitcast i32 %285 to float, !dbg !40
  %287 = bitcast float %270 to i32, !dbg !40
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !40
  %289 = bitcast i32 %288 to float, !dbg !40
  %290 = fsub float %283, %275, !dbg !42
  %291 = fadd float %270, %289, !dbg !44
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !45
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #5, !dbg !46
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !47
  %295 = fmul float %290, %294, !dbg !48
  %296 = fadd float %275, %295, !dbg !49
  %297 = fadd float %280, %286, !dbg !50
  %298 = fmul float %290, %290, !dbg !51
  %299 = fmul float %270, %298, !dbg !52
  %300 = fmul float %294, %299, !dbg !53
  %301 = fadd float %297, %300, !dbg !54
  %302 = icmp eq i32 %160, 0, !dbg !40
  %303 = and i32 %159, 15, !dbg !40
  %304 = zext nneg i32 %303 to i64, !dbg !40
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !40
  %306 = bitcast float %296 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 %302) #5, !dbg !40
  %307 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %304, !dbg !40
  %308 = bitcast float %301 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 %302) #5, !dbg !40
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %304, !dbg !40
  %310 = bitcast float %291 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 %302) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %311 = icmp slt i32 %10, 16, !dbg !40
  %312 = sext i32 %10 to i64, !dbg !40
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !40
  %314 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %313, i1 %311) #5, !dbg !40
  %315 = bitcast i32 %314 to float, !dbg !40
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %312, !dbg !40
  %317 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %316, i1 %311) #5, !dbg !40
  %318 = bitcast i32 %317 to float, !dbg !40
  %319 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %312, !dbg !40
  %320 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %319, i1 %311) #5, !dbg !40
  %321 = bitcast i32 %320 to float, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 8, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !40
  %325 = bitcast i32 %324 to float, !dbg !40
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !40
  %327 = bitcast i32 %326 to float, !dbg !40
  %328 = fsub float %323, %315, !dbg !42
  %329 = fadd float %321, %327, !dbg !44
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !45
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %329) #5, !dbg !46
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !47
  %333 = fmul float %328, %332, !dbg !48
  %334 = fadd float %333, %315, !dbg !49
  %335 = fadd float %318, %325, !dbg !50
  %336 = fmul float %328, %328, !dbg !51
  %337 = fmul float %336, %321, !dbg !52
  %338 = fmul float %337, %332, !dbg !53
  %339 = fadd float %335, %338, !dbg !54
  %340 = bitcast float %334 to i32, !dbg !40
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !40
  %342 = bitcast i32 %341 to float, !dbg !40
  %343 = bitcast float %339 to i32, !dbg !40
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !40
  %345 = bitcast i32 %344 to float, !dbg !40
  %346 = bitcast float %329 to i32, !dbg !40
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !40
  %348 = bitcast i32 %347 to float, !dbg !40
  %349 = fsub float %342, %334, !dbg !42
  %350 = fadd float %329, %348, !dbg !44
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !45
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float %350) #5, !dbg !46
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !47
  %354 = fmul float %349, %353, !dbg !48
  %355 = fadd float %334, %354, !dbg !49
  %356 = fadd float %339, %345, !dbg !50
  %357 = fmul float %349, %349, !dbg !51
  %358 = fmul float %329, %357, !dbg !52
  %359 = fmul float %353, %358, !dbg !53
  %360 = fadd float %356, %359, !dbg !54
  %361 = bitcast float %355 to i32, !dbg !40
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !40
  %363 = bitcast i32 %362 to float, !dbg !40
  %364 = bitcast float %360 to i32, !dbg !40
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !40
  %366 = bitcast i32 %365 to float, !dbg !40
  %367 = bitcast float %350 to i32, !dbg !40
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !40
  %369 = bitcast i32 %368 to float, !dbg !40
  %370 = fsub float %363, %355, !dbg !42
  %371 = fadd float %350, %369, !dbg !44
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !45
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %371) #5, !dbg !46
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !47
  %375 = fmul float %370, %374, !dbg !48
  %376 = fadd float %355, %375, !dbg !49
  %377 = fadd float %360, %366, !dbg !50
  %378 = fmul float %370, %370, !dbg !51
  %379 = fmul float %350, %378, !dbg !52
  %380 = fmul float %374, %379, !dbg !53
  %381 = fadd float %377, %380, !dbg !54
  %382 = bitcast float %376 to i32, !dbg !40
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !40
  %384 = bitcast i32 %383 to float, !dbg !40
  %385 = bitcast float %381 to i32, !dbg !40
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !40
  %387 = bitcast i32 %386 to float, !dbg !40
  %388 = bitcast float %371 to i32, !dbg !40
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !40
  %390 = bitcast i32 %389 to float, !dbg !40
  %391 = fsub float %384, %376, !dbg !42
  %392 = fadd float %371, %390, !dbg !44
  %393 = fcmp oeq float %392, 0.000000e+00, !dbg !45
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float %392) #5, !dbg !46
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !47
  %396 = fmul float %391, %395, !dbg !48
  %397 = fadd float %376, %396, !dbg !49
  %398 = fadd float %381, %387, !dbg !50
  %399 = fmul float %391, %391, !dbg !51
  %400 = fmul float %371, %399, !dbg !52
  %401 = fmul float %395, %400, !dbg !53
  %402 = fadd float %398, %401, !dbg !54
  %403 = and i32 %10, 15, !dbg !40
  %404 = icmp eq i32 %403, 0, !dbg !40
  %405 = and i1 %311, %404, !dbg !40
  %406 = bitcast float %397 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %406, i1 %405) #5, !dbg !40
  %407 = bitcast float %402 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %407, i1 %405) #5, !dbg !40
  %408 = bitcast float %392 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %408, i1 %405) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %409 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %410 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !40
  %411 = sext i32 %8 to i64, !dbg !55
  %412 = getelementptr float, ptr addrspace(1) %2, i64 %411, !dbg !55
  %413 = icmp eq i32 %11, 0, !dbg !56
  %414 = and i1 %413, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %412, i1 %414) #5, !dbg !56
  %415 = getelementptr float, ptr addrspace(1) %3, i64 %411, !dbg !57
  %416 = bitcast float %410 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %415, i1 %414) #5, !dbg !58
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %410, float 3.276800e+04) #5, !dbg !59
  %418 = fadd float %417, 0x3EE4F8B580000000, !dbg !60
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i = icmp eq i32 %419, 0, !dbg !61
  br i1 %.not.i, label %422, label %420, !dbg !61

420:                                              ; preds = %158
  %421 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %418), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

422:                                              ; preds = %158
  %423 = tail call float @llvm.nvvm.rsqrt.approx.f(float %418), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

__nv_rsqrtf.exit:                                 ; preds = %420, %422
  %.0.i = phi float [ %421, %420 ], [ %423, %422 ], !dbg !61
  %424 = getelementptr float, ptr addrspace(1) %4, i64 %411, !dbg !62
  %425 = bitcast float %.0.i to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %424, i1 %414) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccdt6nzlrskaawewlfgg2poiwniwwgdjc7d23jhzk7ouiuvviqmm.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_19, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_19, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_19", linkageName: "triton_red_fused_convolution_native_group_norm_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 49, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 54, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 47, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 62, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 54, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 36, scope: !7)
!59 = !DILocation(line: 56, column: 18, scope: !7)
!60 = !DILocation(line: 58, column: 19, scope: !7)
!61 = !DILocation(line: 59, column: 28, scope: !7)
!62 = !DILocation(line: 60, column: 25, scope: !7)
!63 = !DILocation(line: 60, column: 37, scope: !7)
!64 = !DILocation(line: 60, column: 4, scope: !7)
