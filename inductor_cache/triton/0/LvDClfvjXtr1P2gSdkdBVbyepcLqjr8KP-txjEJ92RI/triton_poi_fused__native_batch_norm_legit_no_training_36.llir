; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 124, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %11, 5, !dbg !17
  %19 = and i32 %18, 7, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 8, !dbg !18
  %22 = or disjoint i32 %20, 16, !dbg !18
  %23 = or disjoint i32 %20, 24, !dbg !18
  %24 = icmp slt i32 %20, 30, !dbg !19
  %25 = icmp slt i32 %21, 30, !dbg !19
  %26 = icmp slt i32 %22, 30, !dbg !19
  %27 = icmp slt i32 %23, 30, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %28 = sdiv i32 %.frozen, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %20, 7, !dbg !22
  %31 = shl i32 %21, 7, !dbg !22
  %32 = shl i32 %22, 7, !dbg !22
  %33 = shl i32 %23, 7, !dbg !22
  %34 = mul i32 %28, 3840, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %35, %30, !dbg !25
  %37 = add i32 %35, %31, !dbg !25
  %38 = add i32 %35, %32, !dbg !25
  %39 = add i32 %35, %33, !dbg !25
  %40 = sext i32 %36 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %37 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %38 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %39 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %15, %24, !dbg !27
  %49 = and i1 %25, %15, !dbg !27
  %50 = and i1 %26, %15, !dbg !27
  %51 = and i1 %27, %15, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %15) #4, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %15) #4, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = bitcast i32 %63 to float, !dbg !32
  %68 = bitcast i32 %64 to float, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %15) #4, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %15) #4, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i, label %84, label %79, !dbg !38

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %89, 0, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %90, 0, !dbg !38
  br i1 %.not.i3, label %96, label %91, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %99, label %97, !dbg !38

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %92, %94, %97, %99
  %.0.i5 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %101, 0, !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %102, 0, !dbg !38
  br i1 %.not.i8, label %108, label %103, !dbg !38

103:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %106, label %104, !dbg !38

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

108:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %111, label %109, !dbg !38

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %104, %106, %109, %111
  %.0.i10 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %113, 0, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %114, 0, !dbg !38
  br i1 %.not.i13, label %120, label %115, !dbg !38

115:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %118, label %116, !dbg !38

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

120:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %123, label %121, !dbg !38

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %116, %118, %121, %123
  %.0.i15 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = fsub float %126, %128, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fsub float %131, %133, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %138 = bitcast i32 %137 to float, !dbg !30
  %139 = fsub float %136, %138, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %143 = bitcast i32 %142 to float, !dbg !30
  %144 = fsub float %141, %143, !dbg !39
  %145 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = fsub float %146, %128, !dbg !39
  %148 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = fsub float %149, %133, !dbg !39
  %151 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fsub float %152, %138, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = fsub float %155, %143, !dbg !39
  %157 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = fsub float %158, %128, !dbg !39
  %160 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = fsub float %161, %133, !dbg !39
  %163 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %164 = bitcast i32 %163 to float, !dbg !28
  %165 = fsub float %164, %138, !dbg !39
  %166 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %167 = bitcast i32 %166 to float, !dbg !28
  %168 = fsub float %167, %143, !dbg !39
  %169 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %170 = bitcast i32 %169 to float, !dbg !28
  %171 = fsub float %170, %128, !dbg !39
  %172 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %173 = bitcast i32 %172 to float, !dbg !28
  %174 = fsub float %173, %133, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = fsub float %176, %138, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = fsub float %179, %143, !dbg !39
  %181 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %182 = bitcast i32 %181 to float, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %184 = bitcast i32 %183 to float, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %186 = bitcast i32 %185 to float, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %188 = bitcast i32 %187 to float, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %190 = bitcast i32 %189 to float, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %196 = bitcast i32 %195 to float, !dbg !34
  %197 = shl i32 %11, 1, !dbg !17
  %198 = and i32 %197, 30, !dbg !17
  %199 = or disjoint i32 %17, %198, !dbg !18
  %200 = icmp slt i32 %199, 30, !dbg !19
  %201 = lshr i32 %11, 4, !dbg !12
  %202 = and i32 %201, 15, !dbg !12
  %203 = or disjoint i32 %202, %10, !dbg !13
  %204 = or disjoint i32 %203, 112, !dbg !13
  %205 = icmp slt i32 %204, 512, !dbg !14
  %206 = and i1 %205, %200, !dbg !27
  %207 = or disjoint i32 %203, 96, !dbg !13
  %208 = icmp slt i32 %207, 512, !dbg !14
  %209 = and i1 %208, %200, !dbg !27
  %210 = or disjoint i32 %203, 80, !dbg !13
  %211 = icmp slt i32 %210, 512, !dbg !14
  %212 = and i1 %211, %200, !dbg !27
  %213 = or disjoint i32 %203, 64, !dbg !13
  %214 = icmp slt i32 %213, 512, !dbg !14
  %215 = and i1 %214, %200, !dbg !27
  %216 = or disjoint i32 %203, 48, !dbg !13
  %217 = icmp slt i32 %216, 512, !dbg !14
  %218 = and i1 %217, %200, !dbg !27
  %219 = or disjoint i32 %203, 32, !dbg !13
  %220 = icmp slt i32 %219, 512, !dbg !14
  %221 = and i1 %220, %200, !dbg !27
  %222 = or disjoint i32 %203, 16, !dbg !13
  %223 = icmp slt i32 %222, 512, !dbg !14
  %224 = and i1 %223, %200, !dbg !27
  %225 = icmp slt i32 %203, 512, !dbg !14
  %226 = and i1 %225, %200, !dbg !27
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !40
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !40
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !40
  %231 = fmul float %180, %227, !dbg !41
  %232 = fmul float %177, %228, !dbg !41
  %233 = fmul float %174, %229, !dbg !41
  %234 = fmul float %171, %230, !dbg !41
  %235 = fmul float %168, %227, !dbg !41
  %236 = fmul float %165, %228, !dbg !41
  %237 = fmul float %162, %229, !dbg !41
  %238 = fmul float %159, %230, !dbg !41
  %239 = fmul float %156, %227, !dbg !41
  %240 = fmul float %153, %228, !dbg !41
  %241 = fmul float %150, %229, !dbg !41
  %242 = fmul float %147, %230, !dbg !41
  %243 = fmul float %144, %227, !dbg !41
  %244 = fmul float %139, %228, !dbg !41
  %245 = fmul float %134, %229, !dbg !41
  %246 = fmul float %129, %230, !dbg !41
  %247 = fmul float %231, %196, !dbg !42
  %248 = fmul float %232, %194, !dbg !42
  %249 = fmul float %233, %192, !dbg !42
  %250 = fmul float %234, %190, !dbg !42
  %251 = fmul float %235, %196, !dbg !42
  %252 = fmul float %236, %194, !dbg !42
  %253 = fmul float %237, %192, !dbg !42
  %254 = fmul float %238, %190, !dbg !42
  %255 = fmul float %239, %196, !dbg !42
  %256 = fmul float %240, %194, !dbg !42
  %257 = fmul float %241, %192, !dbg !42
  %258 = fmul float %242, %190, !dbg !42
  %259 = fmul float %243, %196, !dbg !42
  %260 = fmul float %244, %194, !dbg !42
  %261 = fmul float %245, %192, !dbg !42
  %262 = fmul float %246, %190, !dbg !42
  %263 = fadd float %247, %188, !dbg !43
  %264 = fadd float %248, %186, !dbg !43
  %265 = fadd float %249, %184, !dbg !43
  %266 = fadd float %250, %182, !dbg !43
  %267 = fadd float %251, %188, !dbg !43
  %268 = fadd float %252, %186, !dbg !43
  %269 = fadd float %253, %184, !dbg !43
  %270 = fadd float %254, %182, !dbg !43
  %271 = fadd float %255, %188, !dbg !43
  %272 = fadd float %256, %186, !dbg !43
  %273 = fadd float %257, %184, !dbg !43
  %274 = fadd float %258, %182, !dbg !43
  %275 = fadd float %259, %188, !dbg !43
  %276 = fadd float %260, %186, !dbg !43
  %277 = fadd float %261, %184, !dbg !43
  %278 = fadd float %262, %182, !dbg !43
  %279 = mul i32 %203, 30, !dbg !44
  %280 = mul i32 %222, 30, !dbg !44
  %281 = mul i32 %219, 30, !dbg !44
  %282 = mul i32 %216, 30, !dbg !44
  %283 = mul i32 %213, 30, !dbg !44
  %284 = mul i32 %210, 30, !dbg !44
  %285 = mul i32 %207, 30, !dbg !44
  %286 = mul i32 %204, 30, !dbg !44
  %287 = add i32 %199, %279, !dbg !45
  %288 = add i32 %199, %280, !dbg !45
  %289 = add i32 %199, %281, !dbg !45
  %290 = add i32 %199, %282, !dbg !45
  %291 = add i32 %199, %283, !dbg !45
  %292 = add i32 %199, %284, !dbg !45
  %293 = add i32 %199, %285, !dbg !45
  %294 = add i32 %199, %286, !dbg !45
  %295 = sext i32 %287 to i64, !dbg !46
  %296 = getelementptr float, ptr addrspace(1) %5, i64 %295, !dbg !46
  %297 = sext i32 %288 to i64, !dbg !46
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %297, !dbg !46
  %299 = sext i32 %289 to i64, !dbg !46
  %300 = getelementptr float, ptr addrspace(1) %5, i64 %299, !dbg !46
  %301 = sext i32 %290 to i64, !dbg !46
  %302 = getelementptr float, ptr addrspace(1) %5, i64 %301, !dbg !46
  %303 = sext i32 %291 to i64, !dbg !46
  %304 = getelementptr float, ptr addrspace(1) %5, i64 %303, !dbg !46
  %305 = sext i32 %292 to i64, !dbg !46
  %306 = getelementptr float, ptr addrspace(1) %5, i64 %305, !dbg !46
  %307 = sext i32 %293 to i64, !dbg !46
  %308 = getelementptr float, ptr addrspace(1) %5, i64 %307, !dbg !46
  %309 = sext i32 %294 to i64, !dbg !46
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %309, !dbg !46
  %311 = shl i32 %11, 7, !dbg !47
  %312 = and i32 %311, 3968, !dbg !47
  %313 = or disjoint i32 %312, %19, !dbg !47
  %314 = and i32 %197, 510, !dbg !47
  %315 = lshr exact i32 %312, 3, !dbg !47
  %316 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %315, !dbg !47
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %313, !dbg !47
  %318 = bitcast float %263 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !47
  %319 = or disjoint i32 %313, 32, !dbg !47
  %320 = lshr i32 %319, 5, !dbg !47
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !47
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !47
  %323 = bitcast float %264 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #4, !dbg !47
  %324 = or disjoint i32 %313, 64, !dbg !47
  %325 = lshr i32 %324, 5, !dbg !47
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !47
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !47
  %328 = bitcast float %265 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !47
  %329 = or disjoint i32 %313, 96, !dbg !47
  %330 = lshr i32 %329, 5, !dbg !47
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !47
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !47
  %333 = bitcast float %266 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !47
  %334 = or disjoint i32 %313, 8, !dbg !47
  %335 = getelementptr float, ptr addrspace(3) %316, i32 %334, !dbg !47
  %336 = bitcast float %267 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !47
  %337 = or disjoint i32 %313, 40, !dbg !47
  %338 = lshr i32 %337, 5, !dbg !47
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !47
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %337, !dbg !47
  %341 = bitcast float %268 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #4, !dbg !47
  %342 = or disjoint i32 %313, 72, !dbg !47
  %343 = lshr i32 %342, 5, !dbg !47
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !47
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %342, !dbg !47
  %346 = bitcast float %269 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !47
  %347 = or disjoint i32 %313, 104, !dbg !47
  %348 = lshr i32 %347, 5, !dbg !47
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !47
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !47
  %351 = bitcast float %270 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !47
  %352 = or disjoint i32 %313, 16, !dbg !47
  %353 = getelementptr float, ptr addrspace(3) %316, i32 %352, !dbg !47
  %354 = bitcast float %271 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !47
  %355 = or disjoint i32 %313, 48, !dbg !47
  %356 = lshr i32 %355, 5, !dbg !47
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !47
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %355, !dbg !47
  %359 = bitcast float %272 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !47
  %360 = or disjoint i32 %313, 80, !dbg !47
  %361 = lshr i32 %360, 5, !dbg !47
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i32 %361, !dbg !47
  %363 = getelementptr float, ptr addrspace(3) %362, i32 %360, !dbg !47
  %364 = bitcast float %273 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !47
  %365 = or disjoint i32 %313, 112, !dbg !47
  %366 = lshr i32 %365, 5, !dbg !47
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !47
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %365, !dbg !47
  %369 = bitcast float %274 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !47
  %370 = or disjoint i32 %313, 24, !dbg !47
  %371 = getelementptr float, ptr addrspace(3) %316, i32 %370, !dbg !47
  %372 = bitcast float %275 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !47
  %373 = or disjoint i32 %313, 56, !dbg !47
  %374 = lshr i32 %373, 5, !dbg !47
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !47
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !47
  %377 = bitcast float %276 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !47
  %378 = or disjoint i32 %313, 88, !dbg !47
  %379 = lshr i32 %378, 5, !dbg !47
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !47
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %378, !dbg !47
  %382 = bitcast float %277 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !47
  %383 = or disjoint i32 %313, 120, !dbg !47
  %384 = lshr i32 %383, 5, !dbg !47
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !47
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !47
  %387 = bitcast float %278 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %388 = lshr i32 %314, 5, !dbg !47
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %388, !dbg !47
  %390 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %314, !dbg !47
  %391 = load i32, ptr addrspace(3) %390, align 4, !dbg !47
  %392 = or disjoint i32 %314, 1, !dbg !47
  %393 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %392, !dbg !47
  %394 = load i32, ptr addrspace(3) %393, align 4, !dbg !47
  %395 = or disjoint i32 %314, 512, !dbg !47
  %396 = lshr i32 %395, 5, !dbg !47
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !47
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !47
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !47
  %400 = or disjoint i32 %314, 513, !dbg !47
  %401 = lshr i32 %400, 5, !dbg !47
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !47
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %400, !dbg !47
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !47
  %405 = or disjoint i32 %314, 1024, !dbg !47
  %406 = lshr i32 %405, 5, !dbg !47
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !47
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %405, !dbg !47
  %409 = load i32, ptr addrspace(3) %408, align 4, !dbg !47
  %410 = or disjoint i32 %314, 1025, !dbg !47
  %411 = lshr i32 %410, 5, !dbg !47
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %411, !dbg !47
  %413 = getelementptr inbounds float, ptr addrspace(3) %412, i32 %410, !dbg !47
  %414 = load i32, ptr addrspace(3) %413, align 4, !dbg !47
  %415 = or disjoint i32 %314, 1536, !dbg !47
  %416 = lshr i32 %415, 5, !dbg !47
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %416, !dbg !47
  %418 = getelementptr inbounds float, ptr addrspace(3) %417, i32 %415, !dbg !47
  %419 = load i32, ptr addrspace(3) %418, align 4, !dbg !47
  %420 = or disjoint i32 %314, 1537, !dbg !47
  %421 = lshr i32 %420, 5, !dbg !47
  %422 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %421, !dbg !47
  %423 = getelementptr inbounds float, ptr addrspace(3) %422, i32 %420, !dbg !47
  %424 = load i32, ptr addrspace(3) %423, align 4, !dbg !47
  %425 = or disjoint i32 %314, 2048, !dbg !47
  %426 = lshr i32 %425, 5, !dbg !47
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !47
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %425, !dbg !47
  %429 = load i32, ptr addrspace(3) %428, align 4, !dbg !47
  %430 = or disjoint i32 %314, 2049, !dbg !47
  %431 = lshr i32 %430, 5, !dbg !47
  %432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %431, !dbg !47
  %433 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %430, !dbg !47
  %434 = load i32, ptr addrspace(3) %433, align 4, !dbg !47
  %435 = or disjoint i32 %314, 2560, !dbg !47
  %436 = lshr i32 %435, 5, !dbg !47
  %437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %436, !dbg !47
  %438 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %435, !dbg !47
  %439 = load i32, ptr addrspace(3) %438, align 4, !dbg !47
  %440 = or disjoint i32 %314, 2561, !dbg !47
  %441 = lshr i32 %440, 5, !dbg !47
  %442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %441, !dbg !47
  %443 = getelementptr inbounds float, ptr addrspace(3) %442, i32 %440, !dbg !47
  %444 = load i32, ptr addrspace(3) %443, align 4, !dbg !47
  %445 = or disjoint i32 %314, 3072, !dbg !47
  %446 = lshr i32 %445, 5, !dbg !47
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %446, !dbg !47
  %448 = getelementptr inbounds float, ptr addrspace(3) %447, i32 %445, !dbg !47
  %449 = load i32, ptr addrspace(3) %448, align 4, !dbg !47
  %450 = or disjoint i32 %314, 3073, !dbg !47
  %451 = lshr i32 %450, 5, !dbg !47
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %451, !dbg !47
  %453 = getelementptr inbounds float, ptr addrspace(3) %452, i32 %450, !dbg !47
  %454 = load i32, ptr addrspace(3) %453, align 4, !dbg !47
  %455 = or disjoint i32 %314, 3584, !dbg !47
  %456 = lshr i32 %455, 5, !dbg !47
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !47
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %455, !dbg !47
  %459 = load i32, ptr addrspace(3) %458, align 4, !dbg !47
  %460 = or disjoint i32 %314, 3585, !dbg !47
  %461 = lshr i32 %460, 5, !dbg !47
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %461, !dbg !47
  %463 = getelementptr inbounds float, ptr addrspace(3) %462, i32 %460, !dbg !47
  %464 = load i32, ptr addrspace(3) %463, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %391, i32 %394, ptr addrspace(1) %296, i1 %226) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %399, i32 %404, ptr addrspace(1) %298, i1 %224) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %409, i32 %414, ptr addrspace(1) %300, i1 %221) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %419, i32 %424, ptr addrspace(1) %302, i1 %218) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %429, i32 %434, ptr addrspace(1) %304, i1 %215) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %439, i32 %444, ptr addrspace(1) %306, i1 %212) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %449, i32 %454, ptr addrspace(1) %308, i1 %209) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %459, i32 %464, ptr addrspace(1) %310, i1 %206) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpr5xosznznfm5meozkmfr64fw4anl7wajv6w2knwjpzrhqbttb.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
