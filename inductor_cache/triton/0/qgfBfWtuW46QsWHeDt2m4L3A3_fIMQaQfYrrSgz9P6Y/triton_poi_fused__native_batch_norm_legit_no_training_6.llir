; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 2048, !dbg !15
  %18 = mul i32 %17, 2048, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen40 = freeze i32 %15, !dbg !15
  %19 = sdiv i32 %.frozen40, 2048, !dbg !15
  %20 = mul i32 %19, 2048, !dbg !16
  %.decomposed41 = sub i32 %.frozen40, %20, !dbg !16
  %21 = shl i32 %16, 11, !dbg !17
  %22 = add i32 %.decomposed, %21, !dbg !18
  %23 = shl i32 %17, 23, !dbg !19
  %24 = shl i32 %19, 23, !dbg !19
  %25 = add i32 %22, %23, !dbg !20
  %26 = add i32 %24, %.decomposed41, !dbg !18
  %27 = add i32 %26, %21, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !22
  %34 = sext i32 %.decomposed to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = sext i32 %.decomposed41 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !29
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !30
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !31
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !31
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !31
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !31
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !31
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %76, 0, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %77, 0, !dbg !32
  br i1 %.not.i, label %83, label %78, !dbg !32

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !32

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

83:                                               ; preds = %8
  br i1 %.not1.i, label %86, label %84, !dbg !32

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i5 = icmp eq i32 %88, 0, !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i8 = icmp eq i32 %89, 0, !dbg !32
  br i1 %.not.i5, label %95, label %90, !dbg !32

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %93, label %91, !dbg !32

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit9, !dbg !32

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit9, !dbg !32

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %98, label %96, !dbg !32

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit9, !dbg !32

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit9, !dbg !32

__nv_sqrtf.exit9:                                 ; preds = %91, %93, %96, %98
  %.0.i7 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !32
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i10 = icmp eq i32 %100, 0, !dbg !32
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i13 = icmp eq i32 %101, 0, !dbg !32
  br i1 %.not.i10, label %107, label %102, !dbg !32

102:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %105, label %103, !dbg !32

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

107:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %110, label %108, !dbg !32

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

__nv_sqrtf.exit14:                                ; preds = %103, %105, %108, %110
  %.0.i12 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !32
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i15 = icmp eq i32 %112, 0, !dbg !32
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i18 = icmp eq i32 %113, 0, !dbg !32
  br i1 %.not.i15, label %119, label %114, !dbg !32

114:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %117, label %115, !dbg !32

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

119:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %122, label %120, !dbg !32

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

__nv_sqrtf.exit19:                                ; preds = %115, %117, %120, %122
  %.0.i17 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !32
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i20 = icmp eq i32 %124, 0, !dbg !32
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i23 = icmp eq i32 %125, 0, !dbg !32
  br i1 %.not.i20, label %131, label %126, !dbg !32

126:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %129, label %127, !dbg !32

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

131:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %134, label %132, !dbg !32

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

__nv_sqrtf.exit24:                                ; preds = %127, %129, %132, %134
  %.0.i22 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i25 = icmp eq i32 %136, 0, !dbg !32
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i28 = icmp eq i32 %137, 0, !dbg !32
  br i1 %.not.i25, label %143, label %138, !dbg !32

138:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %141, label %139, !dbg !32

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

143:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %146, label %144, !dbg !32

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

__nv_sqrtf.exit29:                                ; preds = %139, %141, %144, %146
  %.0.i27 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !32
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i30 = icmp eq i32 %148, 0, !dbg !32
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i33 = icmp eq i32 %149, 0, !dbg !32
  br i1 %.not.i30, label %155, label %150, !dbg !32

150:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %153, label %151, !dbg !32

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

155:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %158, label %156, !dbg !32

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

__nv_sqrtf.exit34:                                ; preds = %151, %153, %156, %158
  %.0.i32 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !32
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i35 = icmp eq i32 %160, 0, !dbg !32
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i38 = icmp eq i32 %161, 0, !dbg !32
  br i1 %.not.i35, label %167, label %162, !dbg !32

162:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %165, label %163, !dbg !32

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

167:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %170, label %168, !dbg !32

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

__nv_sqrtf.exit39:                                ; preds = %163, %165, %168, %170
  %.0.i37 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %173 = bitcast i32 %172 to float, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %175 = bitcast i32 %174 to float, !dbg !24
  %176 = fsub float %173, %175, !dbg !33
  %177 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %178 = bitcast i32 %177 to float, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %180 = bitcast i32 %179 to float, !dbg !24
  %181 = fsub float %178, %180, !dbg !33
  %182 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %183 = bitcast i32 %182 to float, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %185 = bitcast i32 %184 to float, !dbg !24
  %186 = fsub float %183, %185, !dbg !33
  %187 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %188 = bitcast i32 %187 to float, !dbg !22
  %189 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %190 = bitcast i32 %189 to float, !dbg !24
  %191 = fsub float %188, %190, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %193 = bitcast i32 %192 to float, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %195 = bitcast i32 %194 to float, !dbg !24
  %196 = fsub float %193, %195, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %198 = bitcast i32 %197 to float, !dbg !22
  %199 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %200 = bitcast i32 %199 to float, !dbg !24
  %201 = fsub float %198, %200, !dbg !33
  %202 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %203 = bitcast i32 %202 to float, !dbg !22
  %204 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %205 = bitcast i32 %204 to float, !dbg !24
  %206 = fsub float %203, %205, !dbg !33
  %207 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %208 = bitcast i32 %207 to float, !dbg !22
  %209 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %210 = bitcast i32 %209 to float, !dbg !24
  %211 = fsub float %208, %210, !dbg !33
  %212 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %215 = bitcast i32 %214 to float, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %219 = bitcast i32 %218 to float, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %221 = bitcast i32 %220 to float, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %223 = bitcast i32 %222 to float, !dbg !30
  %224 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %225 = bitcast i32 %224 to float, !dbg !30
  %226 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %227 = bitcast i32 %226 to float, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %229 = bitcast i32 %228 to float, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %231 = bitcast i32 %230 to float, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %233 = bitcast i32 %232 to float, !dbg !28
  %234 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %235 = bitcast i32 %234 to float, !dbg !28
  %236 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %237 = bitcast i32 %236 to float, !dbg !28
  %238 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %239 = bitcast i32 %238 to float, !dbg !28
  %240 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %241 = bitcast i32 %240 to float, !dbg !28
  %242 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %243 = bitcast i32 %242 to float, !dbg !28
  %244 = and i32 %11, 127, !dbg !12
  %245 = or disjoint i32 %244, 896, !dbg !12
  %246 = or disjoint i32 %10, %245, !dbg !13
  %247 = or disjoint i32 %244, 768, !dbg !12
  %248 = or disjoint i32 %10, %247, !dbg !13
  %249 = or disjoint i32 %244, 640, !dbg !12
  %250 = or disjoint i32 %10, %249, !dbg !13
  %251 = or disjoint i32 %244, 512, !dbg !12
  %252 = or disjoint i32 %10, %251, !dbg !13
  %253 = or disjoint i32 %244, 384, !dbg !12
  %254 = or disjoint i32 %10, %253, !dbg !13
  %255 = or disjoint i32 %244, 256, !dbg !12
  %256 = or disjoint i32 %10, %255, !dbg !13
  %257 = or disjoint i32 %244, 128, !dbg !12
  %258 = or disjoint i32 %10, %257, !dbg !13
  %259 = or disjoint i32 %10, %244, !dbg !13
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !34
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %268 = fmul float %211, %260, !dbg !35
  %269 = fmul float %206, %261, !dbg !35
  %270 = fmul float %201, %262, !dbg !35
  %271 = fmul float %196, %263, !dbg !35
  %272 = fmul float %191, %264, !dbg !35
  %273 = fmul float %186, %265, !dbg !35
  %274 = fmul float %181, %266, !dbg !35
  %275 = fmul float %176, %267, !dbg !35
  %276 = fmul float %268, %243, !dbg !36
  %277 = fmul float %269, %241, !dbg !36
  %278 = fmul float %270, %239, !dbg !36
  %279 = fmul float %271, %237, !dbg !36
  %280 = fmul float %272, %235, !dbg !36
  %281 = fmul float %273, %233, !dbg !36
  %282 = fmul float %274, %231, !dbg !36
  %283 = fmul float %275, %229, !dbg !36
  %284 = fadd float %276, %227, !dbg !37
  %285 = fadd float %277, %225, !dbg !37
  %286 = fadd float %278, %223, !dbg !37
  %287 = fadd float %279, %221, !dbg !37
  %288 = fadd float %280, %219, !dbg !37
  %289 = fadd float %281, %217, !dbg !37
  %290 = fadd float %282, %215, !dbg !37
  %291 = fadd float %283, %213, !dbg !37
  %292 = shl i32 %259, 12, !dbg !38
  %293 = shl i32 %258, 12, !dbg !38
  %294 = shl i32 %256, 12, !dbg !38
  %295 = shl i32 %254, 12, !dbg !38
  %296 = shl i32 %252, 12, !dbg !38
  %297 = shl i32 %250, 12, !dbg !38
  %298 = shl i32 %248, 12, !dbg !38
  %299 = shl i32 %246, 12, !dbg !38
  %300 = add i32 %292, %16, !dbg !39
  %301 = add i32 %293, %16, !dbg !39
  %302 = add i32 %294, %16, !dbg !39
  %303 = add i32 %295, %16, !dbg !39
  %304 = add i32 %296, %16, !dbg !39
  %305 = add i32 %297, %16, !dbg !39
  %306 = add i32 %298, %16, !dbg !39
  %307 = add i32 %299, %16, !dbg !39
  %308 = sext i32 %300 to i64, !dbg !40
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %308, !dbg !40
  %310 = sext i32 %301 to i64, !dbg !40
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %310, !dbg !40
  %312 = sext i32 %302 to i64, !dbg !40
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %312, !dbg !40
  %314 = sext i32 %303 to i64, !dbg !40
  %315 = getelementptr float, ptr addrspace(1) %5, i64 %314, !dbg !40
  %316 = sext i32 %304 to i64, !dbg !40
  %317 = getelementptr float, ptr addrspace(1) %5, i64 %316, !dbg !40
  %318 = sext i32 %305 to i64, !dbg !40
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %318, !dbg !40
  %320 = sext i32 %306 to i64, !dbg !40
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !40
  %322 = sext i32 %307 to i64, !dbg !40
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %322, !dbg !40
  %.idx = shl nuw nsw i32 %13, 3, !dbg !41
  %324 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !41
  %325 = bitcast float %284 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !41
  %326 = shl nuw nsw i32 %13, 1, !dbg !41
  %327 = or disjoint i32 %326, 2, !dbg !41
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !41
  %329 = bitcast float %285 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #4, !dbg !41
  %330 = or disjoint i32 %326, 4, !dbg !41
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !41
  %332 = bitcast float %286 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !41
  %333 = or disjoint i32 %326, 6, !dbg !41
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !41
  %335 = bitcast float %287 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %.idx1 = shl nuw nsw i32 %244, 3, !dbg !41
  %336 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !41
  %337 = load i32, ptr addrspace(3) %336, align 8, !dbg !41
  %.idx2 = shl nuw nsw i32 %257, 3, !dbg !41
  %338 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !41
  %339 = load i32, ptr addrspace(3) %338, align 8, !dbg !41
  %.idx3 = shl nuw nsw i32 %255, 3, !dbg !41
  %340 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !41
  %341 = load i32, ptr addrspace(3) %340, align 8, !dbg !41
  %.idx4 = shl nuw nsw i32 %253, 3, !dbg !41
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !41
  %343 = load i32, ptr addrspace(3) %342, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %344 = bitcast float %288 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %344, i1 true) #4, !dbg !41
  %345 = bitcast float %289 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %345, i1 true) #4, !dbg !41
  %346 = bitcast float %290 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %346, i1 true) #4, !dbg !41
  %347 = bitcast float %291 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %347, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %348 = load i32, ptr addrspace(3) %336, align 8, !dbg !41
  %349 = load i32, ptr addrspace(3) %338, align 8, !dbg !41
  %350 = load i32, ptr addrspace(3) %340, align 8, !dbg !41
  %351 = load i32, ptr addrspace(3) %342, align 8, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %309, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %311, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %313, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %315, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %317, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %319, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %321, i1 true) #4, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %323, i1 true) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cel75zlhimsif776biquuf3vyj4cb6tbzv372mew66xel7upupkh.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 53, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 58, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 35, scope: !7)
!39 = !DILocation(line: 48, column: 30, scope: !7)
!40 = !DILocation(line: 48, column: 25, scope: !7)
!41 = !DILocation(line: 48, column: 47, scope: !7)
!42 = !DILocation(line: 48, column: 4, scope: !7)
