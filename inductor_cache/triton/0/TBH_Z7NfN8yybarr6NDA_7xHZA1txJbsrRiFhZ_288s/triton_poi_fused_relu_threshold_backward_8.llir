; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !11
  %8 = shl i32 %7, 10, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = shl i32 %9, 2, !dbg !13
  %11 = and i32 %10, 508, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 513, !dbg !13
  %16 = or disjoint i32 %11, 514, !dbg !13
  %17 = or disjoint i32 %11, 515, !dbg !13
  %18 = and i32 %9, 127, !dbg !13
  %19 = or disjoint i32 %18, 128, !dbg !13
  %20 = or disjoint i32 %18, 256, !dbg !13
  %21 = or disjoint i32 %18, 384, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 640, !dbg !13
  %24 = or disjoint i32 %18, 768, !dbg !13
  %25 = or disjoint i32 %18, 896, !dbg !13
  %26 = or disjoint i32 %8, %11, !dbg !14
  %27 = or disjoint i32 %8, %12, !dbg !14
  %28 = or disjoint i32 %8, %13, !dbg !14
  %29 = or disjoint i32 %8, %14, !dbg !14
  %30 = or disjoint i32 %26, 512, !dbg !14
  %31 = or disjoint i32 %8, %15, !dbg !14
  %32 = or disjoint i32 %8, %16, !dbg !14
  %33 = or disjoint i32 %8, %17, !dbg !14
  %34 = or disjoint i32 %8, %18, !dbg !14
  %35 = or disjoint i32 %8, %19, !dbg !14
  %36 = or disjoint i32 %8, %20, !dbg !14
  %37 = or disjoint i32 %8, %21, !dbg !14
  %38 = or disjoint i32 %8, %22, !dbg !14
  %39 = or disjoint i32 %8, %23, !dbg !14
  %40 = or disjoint i32 %8, %24, !dbg !14
  %41 = or disjoint i32 %8, %25, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %42 = sdiv i32 %.frozen, 2048, !dbg !15
  %43 = mul i32 %42, 2048, !dbg !16
  %.decomposed = sub i32 %.frozen, %43, !dbg !16
  %44 = shl i32 %26, 11, !dbg !17
  %45 = shl i32 %27, 11, !dbg !17
  %46 = shl i32 %28, 11, !dbg !17
  %47 = shl i32 %29, 11, !dbg !17
  %48 = shl i32 %30, 11, !dbg !17
  %49 = shl i32 %31, 11, !dbg !17
  %50 = shl i32 %32, 11, !dbg !17
  %51 = shl i32 %33, 11, !dbg !17
  %52 = shl i32 %34, 11, !dbg !17
  %53 = shl i32 %35, 11, !dbg !17
  %54 = shl i32 %36, 11, !dbg !17
  %55 = shl i32 %37, 11, !dbg !17
  %56 = shl i32 %38, 11, !dbg !17
  %57 = shl i32 %39, 11, !dbg !17
  %58 = shl i32 %40, 11, !dbg !17
  %59 = shl i32 %41, 11, !dbg !17
  %60 = shl i32 %42, 23, !dbg !18
  %61 = add i32 %60, %.decomposed, !dbg !19
  %62 = add i32 %61, %44, !dbg !20
  %63 = add i32 %61, %45, !dbg !20
  %64 = add i32 %61, %46, !dbg !20
  %65 = add i32 %61, %47, !dbg !20
  %66 = add i32 %61, %48, !dbg !20
  %67 = add i32 %61, %49, !dbg !20
  %68 = add i32 %61, %50, !dbg !20
  %69 = add i32 %61, %51, !dbg !20
  %70 = add i32 %61, %52, !dbg !20
  %71 = add i32 %61, %53, !dbg !20
  %72 = add i32 %61, %54, !dbg !20
  %73 = add i32 %61, %55, !dbg !20
  %74 = add i32 %61, %56, !dbg !20
  %75 = add i32 %61, %57, !dbg !20
  %76 = add i32 %61, %58, !dbg !20
  %77 = add i32 %61, %59, !dbg !20
  %78 = sext i32 %62 to i64, !dbg !21
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !21
  %80 = sext i32 %63 to i64, !dbg !21
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !21
  %82 = sext i32 %64 to i64, !dbg !21
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !21
  %84 = sext i32 %65 to i64, !dbg !21
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !21
  %86 = sext i32 %66 to i64, !dbg !21
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !21
  %88 = sext i32 %67 to i64, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !21
  %90 = sext i32 %68 to i64, !dbg !21
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !21
  %92 = sext i32 %69 to i64, !dbg !21
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !21
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !22
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !22
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !22
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #2, !dbg !22
  %102 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !22
  %103 = insertelement <8 x i32> %102, i32 %100, i64 1, !dbg !22
  %104 = insertelement <8 x i32> %103, i32 %99, i64 2, !dbg !22
  %105 = insertelement <8 x i32> %104, i32 %98, i64 3, !dbg !22
  %106 = insertelement <8 x i32> %105, i32 %97, i64 4, !dbg !22
  %107 = insertelement <8 x i32> %106, i32 %96, i64 5, !dbg !22
  %108 = insertelement <8 x i32> %107, i32 %95, i64 6, !dbg !22
  %109 = insertelement <8 x i32> %108, i32 %94, i64 7, !dbg !22
  %110 = bitcast <8 x i32> %109 to <8 x float>, !dbg !22
  %111 = fcmp olt <8 x float> %110, zeroinitializer, !dbg !23
  %112 = select <8 x i1> %111, <8 x float> zeroinitializer, <8 x float> %110, !dbg !27
  %113 = fcmp ole <8 x float> %112, zeroinitializer, !dbg !28
  %114 = shl i32 %6, 12, !dbg !29
  %115 = add i32 %26, %114, !dbg !30
  %116 = add i32 %114, %30, !dbg !30
  %117 = sext i32 %115 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !31
  %119 = sext i32 %116 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !31
  %bc = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %121 = extractelement <8 x i32> %bc, i64 7, !dbg !32
  %bc1 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %122 = extractelement <8 x i32> %bc1, i64 6, !dbg !32
  %bc2 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %123 = extractelement <8 x i32> %bc2, i64 5, !dbg !32
  %bc3 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %124 = extractelement <8 x i32> %bc3, i64 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %118, i1 true) #2, !dbg !32
  %bc4 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %125 = extractelement <8 x i32> %bc4, i64 3, !dbg !32
  %bc5 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %126 = extractelement <8 x i32> %bc5, i64 2, !dbg !32
  %bc6 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %127 = extractelement <8 x i32> %bc6, i64 1, !dbg !32
  %bc7 = bitcast <8 x float> %112 to <8 x i32>, !dbg !32
  %128 = extractelement <8 x i32> %bc7, i64 0, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %126, i32 %127, i32 %128, ptr addrspace(1) %120, i1 true) #2, !dbg !32
  %129 = sext i32 %70 to i64, !dbg !33
  %130 = getelementptr i1, ptr addrspace(1) %2, i64 %129, !dbg !33
  %131 = sext i32 %71 to i64, !dbg !33
  %132 = getelementptr i1, ptr addrspace(1) %2, i64 %131, !dbg !33
  %133 = sext i32 %72 to i64, !dbg !33
  %134 = getelementptr i1, ptr addrspace(1) %2, i64 %133, !dbg !33
  %135 = sext i32 %73 to i64, !dbg !33
  %136 = getelementptr i1, ptr addrspace(1) %2, i64 %135, !dbg !33
  %137 = sext i32 %74 to i64, !dbg !33
  %138 = getelementptr i1, ptr addrspace(1) %2, i64 %137, !dbg !33
  %139 = sext i32 %75 to i64, !dbg !33
  %140 = getelementptr i1, ptr addrspace(1) %2, i64 %139, !dbg !33
  %141 = sext i32 %76 to i64, !dbg !33
  %142 = getelementptr i1, ptr addrspace(1) %2, i64 %141, !dbg !33
  %143 = sext i32 %77 to i64, !dbg !33
  %144 = getelementptr i1, ptr addrspace(1) %2, i64 %143, !dbg !33
  %145 = extractelement <8 x i1> %113, i64 7, !dbg !34
  %146 = zext i1 %145 to i8, !dbg !34
  %147 = extractelement <8 x i1> %113, i64 6, !dbg !34
  %148 = zext i1 %147 to i8, !dbg !34
  %149 = extractelement <8 x i1> %113, i64 5, !dbg !34
  %150 = zext i1 %149 to i8, !dbg !34
  %151 = extractelement <8 x i1> %113, i64 4, !dbg !34
  %152 = zext i1 %151 to i8, !dbg !34
  %153 = extractelement <8 x i1> %113, i64 3, !dbg !34
  %154 = zext i1 %153 to i8, !dbg !34
  %155 = extractelement <8 x i1> %113, i64 2, !dbg !34
  %156 = zext i1 %155 to i8, !dbg !34
  %157 = extractelement <8 x i1> %113, i64 1, !dbg !34
  %158 = zext i1 %157 to i8, !dbg !34
  %159 = extractelement <8 x i1> %113, i64 0, !dbg !34
  %160 = zext i1 %159 to i8, !dbg !34
  %161 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %162 = insertelement <1 x i8> poison, i8 %146, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %161, <1 x i8> %162, i1 true) #2, !dbg !34
  %163 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %164 = insertelement <1 x i8> poison, i8 %148, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %163, <1 x i8> %164, i1 true) #2, !dbg !34
  %165 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %166 = insertelement <1 x i8> poison, i8 %150, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %165, <1 x i8> %166, i1 true) #2, !dbg !34
  %167 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  %168 = insertelement <1 x i8> poison, i8 %152, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %167, <1 x i8> %168, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %169 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %18, !dbg !34
  %170 = load i8, ptr addrspace(3) %169, align 1, !dbg !34
  %171 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %19, !dbg !34
  %172 = load i8, ptr addrspace(3) %171, align 1, !dbg !34
  %173 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %20, !dbg !34
  %174 = load i8, ptr addrspace(3) %173, align 1, !dbg !34
  %175 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %21, !dbg !34
  %176 = load i8, ptr addrspace(3) %175, align 1, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %177 = insertelement <1 x i8> poison, i8 %154, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %161, <1 x i8> %177, i1 true) #2, !dbg !34
  %178 = insertelement <1 x i8> poison, i8 %156, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %163, <1 x i8> %178, i1 true) #2, !dbg !34
  %179 = insertelement <1 x i8> poison, i8 %158, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %165, <1 x i8> %179, i1 true) #2, !dbg !34
  %180 = insertelement <1 x i8> poison, i8 %160, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %167, <1 x i8> %180, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %181 = load i8, ptr addrspace(3) %169, align 1, !dbg !34
  %182 = load i8, ptr addrspace(3) %171, align 1, !dbg !34
  %183 = load i8, ptr addrspace(3) %173, align 1, !dbg !34
  %184 = load i8, ptr addrspace(3) %175, align 1, !dbg !34
  %185 = and i8 %170, 1, !dbg !34
  %186 = and i8 %172, 1, !dbg !34
  %187 = and i8 %174, 1, !dbg !34
  %188 = and i8 %176, 1, !dbg !34
  %189 = and i8 %181, 1, !dbg !34
  %190 = and i8 %182, 1, !dbg !34
  %191 = and i8 %183, 1, !dbg !34
  %192 = and i8 %184, 1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %185, ptr addrspace(1) %130, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %186, ptr addrspace(1) %132, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %187, ptr addrspace(1) %134, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %188, ptr addrspace(1) %136, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %189, ptr addrspace(1) %138, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %190, ptr addrspace(1) %140, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %191, ptr addrspace(1) %142, i1 true) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %192, ptr addrspace(1) %144, i1 true) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwqqzzpfa5helhxcoj4gcfjvzgvkqsbrzzkr5z32plkussuz2ch6.py", directory: "inductor_cache/wq")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_8", linkageName: "triton_poi_fused_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 53, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 58, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 34, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 36, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 46, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 59, scope: !7)
!35 = !DILocation(line: 38, column: 4, scope: !7)
