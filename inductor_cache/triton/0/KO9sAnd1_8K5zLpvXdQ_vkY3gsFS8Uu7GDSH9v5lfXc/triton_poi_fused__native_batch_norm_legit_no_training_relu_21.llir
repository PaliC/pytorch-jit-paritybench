; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = icmp slt i32 %17, 832, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %15, !dbg !17
  %22 = or disjoint i32 %20, %16, !dbg !17
  %23 = icmp slt i32 %21, 256, !dbg !18
  %24 = icmp slt i32 %22, 256, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %25 = sdiv i32 %.frozen, 208, !dbg !19
  %26 = mul i32 %25, 208, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = mul i32 %21, 208, !dbg !21
  %28 = mul i32 %22, 208, !dbg !21
  %29 = mul i32 %25, 53248, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = add i32 %30, %27, !dbg !24
  %32 = add i32 %30, %28, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %18, %23, !dbg !26
  %38 = and i1 %18, %24, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #4, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !27
  %41 = sext i32 %.decomposed to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #4, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %18) #4, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %18) #4, !dbg !35
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !36
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %62, 0, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i, label %69, label %64, !dbg !37

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !37

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !37
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !37
  br i1 %.not.i1, label %81, label %76, !dbg !37

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i6, label %93, label %88, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %98, 0, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i11, label %105, label %100, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %126 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %130 = or disjoint i32 %20, %13, !dbg !17
  %131 = icmp slt i32 %130, 256, !dbg !18
  %132 = or disjoint i32 %10, %16, !dbg !13
  %133 = icmp slt i32 %132, 832, !dbg !14
  %134 = and i1 %133, %131, !dbg !26
  %135 = or disjoint i32 %10, %15, !dbg !13
  %136 = icmp slt i32 %135, 832, !dbg !14
  %137 = and i1 %136, %131, !dbg !26
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !38
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !38
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !38
  %142 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !29
  %143 = insertelement <4 x i32> %142, i32 %113, i64 1, !dbg !29
  %144 = insertelement <4 x i32> %143, i32 %115, i64 2, !dbg !29
  %145 = insertelement <4 x i32> %144, i32 %117, i64 3, !dbg !29
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !29
  %147 = shufflevector <4 x float> %146, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %148 = insertelement <8 x i32> poison, i32 %110, i64 0, !dbg !27
  %149 = insertelement <8 x i32> %148, i32 %112, i64 1, !dbg !27
  %150 = insertelement <8 x i32> %149, i32 %114, i64 2, !dbg !27
  %151 = insertelement <8 x i32> %150, i32 %116, i64 3, !dbg !27
  %152 = insertelement <8 x i32> %151, i32 %118, i64 4, !dbg !27
  %153 = insertelement <8 x i32> %152, i32 %119, i64 5, !dbg !27
  %154 = insertelement <8 x i32> %153, i32 %120, i64 6, !dbg !27
  %155 = insertelement <8 x i32> %154, i32 %121, i64 7, !dbg !27
  %156 = bitcast <8 x i32> %155 to <8 x float>, !dbg !27
  %157 = fsub <8 x float> %156, %147, !dbg !39
  %158 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !35
  %159 = insertelement <4 x i32> %158, i32 %123, i64 1, !dbg !35
  %160 = insertelement <4 x i32> %159, i32 %124, i64 2, !dbg !35
  %161 = insertelement <4 x i32> %160, i32 %125, i64 3, !dbg !35
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !35
  %163 = shufflevector <4 x float> %162, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %164 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !33
  %165 = insertelement <4 x i32> %164, i32 %127, i64 1, !dbg !33
  %166 = insertelement <4 x i32> %165, i32 %128, i64 2, !dbg !33
  %167 = insertelement <4 x i32> %166, i32 %129, i64 3, !dbg !33
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !33
  %169 = shufflevector <4 x float> %168, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %170 = insertelement <8 x float> poison, float %141, i64 0, !dbg !40
  %171 = insertelement <8 x float> %170, float %140, i64 1, !dbg !40
  %172 = insertelement <8 x float> %171, float %139, i64 2, !dbg !40
  %173 = insertelement <8 x float> %172, float %138, i64 3, !dbg !40
  %174 = shufflevector <8 x float> %173, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %175 = fmul <8 x float> %157, %174, !dbg !40
  %176 = fmul <8 x float> %175, %169, !dbg !41
  %177 = fadd <8 x float> %176, %163, !dbg !42
  %178 = fcmp olt <8 x float> %177, zeroinitializer, !dbg !43
  %179 = extractelement <8 x i1> %178, i64 7, !dbg !47
  %180 = extractelement <8 x float> %177, i64 7, !dbg !47
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !47
  %182 = extractelement <8 x i1> %178, i64 6, !dbg !47
  %183 = extractelement <8 x float> %177, i64 6, !dbg !47
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !47
  %185 = extractelement <8 x i1> %178, i64 5, !dbg !47
  %186 = extractelement <8 x float> %177, i64 5, !dbg !47
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !47
  %188 = extractelement <8 x i1> %178, i64 4, !dbg !47
  %189 = extractelement <8 x float> %177, i64 4, !dbg !47
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !47
  %191 = extractelement <8 x i1> %178, i64 3, !dbg !47
  %192 = extractelement <8 x float> %177, i64 3, !dbg !47
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !47
  %194 = extractelement <8 x i1> %178, i64 2, !dbg !47
  %195 = extractelement <8 x float> %177, i64 2, !dbg !47
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !47
  %197 = extractelement <8 x i1> %178, i64 1, !dbg !47
  %198 = extractelement <8 x float> %177, i64 1, !dbg !47
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !47
  %200 = extractelement <8 x i1> %178, i64 0, !dbg !47
  %201 = extractelement <8 x float> %177, i64 0, !dbg !47
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !47
  %203 = shl i32 %135, 8, !dbg !48
  %204 = shl i32 %132, 8, !dbg !48
  %205 = add i32 %130, %203, !dbg !49
  %206 = add i32 %130, %204, !dbg !49
  %207 = sext i32 %205 to i64, !dbg !50
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !50
  %209 = sext i32 %206 to i64, !dbg !50
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %209, !dbg !50
  %211 = shl i32 %11, 7, !dbg !51
  %212 = and i32 %211, 896, !dbg !51
  %213 = or disjoint i32 %212, %15, !dbg !51
  %214 = and i32 %12, 508, !dbg !51
  %215 = lshr exact i32 %212, 3, !dbg !51
  %216 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %215, !dbg !51
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %213, !dbg !51
  %218 = bitcast float %181 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !51
  %219 = or disjoint i32 %213, 32, !dbg !51
  %220 = lshr i32 %219, 5, !dbg !51
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !51
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !51
  %223 = bitcast float %184 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #4, !dbg !51
  %224 = or disjoint i32 %213, 64, !dbg !51
  %225 = lshr i32 %224, 5, !dbg !51
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !51
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !51
  %228 = bitcast float %187 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !51
  %229 = or disjoint i32 %213, 96, !dbg !51
  %230 = lshr i32 %229, 5, !dbg !51
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !51
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %229, !dbg !51
  %233 = bitcast float %190 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !51
  %234 = or disjoint i32 %213, 16, !dbg !51
  %235 = getelementptr float, ptr addrspace(3) %216, i32 %234, !dbg !51
  %236 = bitcast float %193 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !51
  %237 = or disjoint i32 %213, 48, !dbg !51
  %238 = lshr i32 %237, 5, !dbg !51
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !51
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !51
  %241 = bitcast float %196 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !51
  %242 = or disjoint i32 %213, 80, !dbg !51
  %243 = lshr i32 %242, 5, !dbg !51
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !51
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !51
  %246 = bitcast float %199 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !51
  %247 = or disjoint i32 %213, 112, !dbg !51
  %248 = lshr i32 %247, 5, !dbg !51
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !51
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %247, !dbg !51
  %251 = bitcast float %202 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %252 = lshr i32 %214, 5, !dbg !51
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !51
  %254 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %214, !dbg !51
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !51
  %256 = or disjoint i32 %214, 1, !dbg !51
  %257 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %256, !dbg !51
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !51
  %259 = or disjoint i32 %214, 2, !dbg !51
  %260 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %259, !dbg !51
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !51
  %262 = or disjoint i32 %214, 3, !dbg !51
  %263 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %262, !dbg !51
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !51
  %265 = or disjoint i32 %214, 512, !dbg !51
  %266 = lshr i32 %265, 5, !dbg !51
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !51
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !51
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !51
  %270 = or disjoint i32 %214, 513, !dbg !51
  %271 = lshr i32 %270, 5, !dbg !51
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !51
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !51
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !51
  %275 = or disjoint i32 %214, 514, !dbg !51
  %276 = lshr i32 %275, 5, !dbg !51
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !51
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !51
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !51
  %280 = or disjoint i32 %214, 515, !dbg !51
  %281 = lshr i32 %280, 5, !dbg !51
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !51
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !51
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %258, i32 %261, i32 %264, ptr addrspace(1) %208, i1 %137) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %274, i32 %279, i32 %284, ptr addrspace(1) %210, i1 %134) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuhtlscfb4zutotyzwxodmc4trpmgwlaf5vfze37gztkh2oll37d.py", directory: "inductor_cache/uh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 63, scope: !7)
!27 = !DILocation(line: 32, column: 55, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 30, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 46, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
