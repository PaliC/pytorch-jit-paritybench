; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 7, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 32, !dbg !14
  %21 = srem i32 %20, 32, !dbg !15
  %22 = mul i32 %20, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %19, 1024, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = sext i32 %.decomposed to i64, !dbg !20
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %4, i64 %27, !dbg !22
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !26
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !29
  %38 = sext i32 %19 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !35
  %46 = lshr i64 %26, 59, !dbg !36
  %47 = and i64 %46, 16, !dbg !36
  %48 = add i64 %47, %26, !dbg !36
  %49 = lshr i64 %29, 59, !dbg !37
  %50 = and i64 %49, 16, !dbg !37
  %51 = shl i64 %48, 4, !dbg !38
  %52 = shl nsw i32 %23, 8, !dbg !39
  %53 = sext i32 %52 to i64, !dbg !40
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %50, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %51, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %53, !dbg !41
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !42
  %59 = lshr i64 %31, 59, !dbg !43
  %60 = and i64 %59, 16, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %60, !dbg !44
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %51, !dbg !44
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %53, !dbg !44
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !45
  %66 = lshr i64 %35, 59, !dbg !46
  %67 = and i64 %66, 16, !dbg !46
  %68 = add i64 %67, %35, !dbg !46
  %69 = shl i64 %68, 4, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %55, i64 %69, !dbg !48
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %53, !dbg !48
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !49
  %73 = getelementptr float, ptr addrspace(1) %62, i64 %69, !dbg !50
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %53, !dbg !50
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !51
  %76 = fadd float %43, 0x3EE4F8B580000000, !dbg !52
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %77, 0, !dbg !53
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %78, 0, !dbg !53
  br i1 %.not.i, label %84, label %79, !dbg !53

79:                                               ; preds = %14
  br i1 %.not1.i, label %82, label %80, !dbg !53

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

84:                                               ; preds = %14
  br i1 %.not1.i, label %87, label %85, !dbg !53

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !53
  %89 = bitcast i32 %40 to float, !dbg !31
  %90 = bitcast i32 %41 to float, !dbg !32
  %91 = fsub float %89, %90, !dbg !54
  %92 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !51
  %93 = insertelement <2 x i32> %92, i32 %65, i64 1, !dbg !51
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !51
  %95 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !49
  %96 = insertelement <2 x i32> %95, i32 %58, i64 1, !dbg !49
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !49
  %98 = fsub <2 x float> %94, %97, !dbg !55
  %99 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !56
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !56
  %101 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %102 = fmul <2 x float> %98, %101, !dbg !56
  %103 = fadd <2 x float> %102, %97, !dbg !57
  %104 = extractelement <2 x float> %103, i64 0, !dbg !58
  %105 = extractelement <2 x float> %103, i64 1, !dbg !59
  %106 = fsub float %104, %105, !dbg !58
  %107 = bitcast i32 %37 to float, !dbg !29
  %108 = fmul float %106, %107, !dbg !60
  %109 = fadd float %105, %108, !dbg !59
  %110 = bitcast i32 %45 to float, !dbg !35
  %111 = bitcast i32 %44 to float, !dbg !34
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %113 = fmul float %91, %112, !dbg !62
  %114 = fmul float %113, %111, !dbg !63
  %115 = fadd float %114, %110, !dbg !64
  %116 = fcmp olt float %115, 0.000000e+00, !dbg !65
  %117 = select i1 %116, float 0.000000e+00, float %115, !dbg !69
  %118 = fadd float %109, %117, !dbg !70
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !71
  %120 = bitcast float %118 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %119, i1 true) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfo6tspmaxpzo5fo6p5eiscoqjlzvi4mg6bg2q7tqw65g5tahjgo.py", directory: "inductor_cache/fo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 20, scope: !7)
!33 = !DILocation(line: 37, column: 20, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 32, scope: !7)
!37 = !DILocation(line: 49, column: 32, scope: !7)
!38 = !DILocation(line: 50, column: 40, scope: !7)
!39 = !DILocation(line: 50, column: 51, scope: !7)
!40 = !DILocation(line: 50, column: 47, scope: !7)
!41 = !DILocation(line: 50, column: 30, scope: !7)
!42 = !DILocation(line: 50, column: 56, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 58, scope: !7)
!46 = !DILocation(line: 60, column: 35, scope: !7)
!47 = !DILocation(line: 61, column: 41, scope: !7)
!48 = !DILocation(line: 61, column: 31, scope: !7)
!49 = !DILocation(line: 61, column: 58, scope: !7)
!50 = !DILocation(line: 62, column: 31, scope: !7)
!51 = !DILocation(line: 62, column: 59, scope: !7)
!52 = !DILocation(line: 71, column: 20, scope: !7)
!53 = !DILocation(line: 72, column: 27, scope: !7)
!54 = !DILocation(line: 69, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 74, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 20, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 81, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 82, column: 20, scope: !7)
!71 = !DILocation(line: 83, column: 28, scope: !7)
!72 = !DILocation(line: 83, column: 40, scope: !7)
!73 = !DILocation(line: 83, column: 4, scope: !7)
