; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %.frozen6 = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen6, 1024, !dbg !14
  %21 = srem i32 %20, 16, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %22 = sdiv i32 %.frozen, 32, !dbg !16
  %23 = mul i32 %22, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %19, 32, !dbg !17
  %25 = srem i32 %22, 32, !dbg !18
  %26 = sdiv i32 %18, 16384, !dbg !19
  %27 = mul i32 %20, 1024, !dbg !20
  %.decomposed7 = sub i32 %.frozen6, %27, !dbg !20
  %28 = icmp slt i32 %21, 4, !dbg !21
  %29 = mul nsw i32 %25, 33, !dbg !22
  %30 = add nsw i32 %29, 34, !dbg !23
  %31 = add nsw i32 %30, %.decomposed, !dbg !24
  %32 = add nsw i32 %30, %24, !dbg !24
  %33 = mul nsw i32 %21, 1120, !dbg !25
  %34 = mul nsw i32 %26, 4480, !dbg !26
  %35 = add nsw i32 %31, %34, !dbg !27
  %36 = add nsw i32 %35, %33, !dbg !28
  %37 = add nsw i32 %34, %32, !dbg !27
  %38 = add nsw i32 %37, %33, !dbg !28
  %39 = sext i32 %36 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = sext i32 %38 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %28, i32 0, i1 %28) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %28, i32 0, i1 %28) #3, !dbg !30
  %45 = shl nsw i32 %26, 2, !dbg !31
  %46 = add nsw i32 %45, %21, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %28, i32 0, i1 %28) #3, !dbg !34
  %51 = and i32 %21, -4, !dbg !35
  %52 = icmp eq i32 %51, 4, !dbg !35
  %53 = add nsw i32 %21, -4, !dbg !36
  %54 = mul nsw i32 %53, 1120, !dbg !37
  %55 = add nsw i32 %35, %54, !dbg !38
  %56 = add nsw i32 %37, %54, !dbg !38
  %57 = sext i32 %55 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !39
  %59 = sext i32 %56 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !39
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %52, i32 0, i1 %52) #3, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %52, i32 0, i1 %52) #3, !dbg !40
  %63 = add nsw i32 %53, %45, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %52, i32 0, i1 %52) #3, !dbg !43
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %52, i32 0, i1 %52) #3, !dbg !43
  %68 = icmp eq i32 %51, 8, !dbg !44
  %69 = add nsw i32 %21, -8, !dbg !45
  %70 = shl nsw i32 %69, 10, !dbg !46
  %71 = shl nsw i32 %26, 12, !dbg !47
  %72 = add nsw i32 %71, %.decomposed7, !dbg !48
  %73 = add nsw i32 %72, %70, !dbg !49
  %74 = sext i32 %73 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !50
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !51
  %77 = mul nsw i32 %69, 1120, !dbg !52
  %78 = add nsw i32 %35, %77, !dbg !53
  %79 = add nsw i32 %37, %77, !dbg !53
  %80 = sext i32 %78 to i64, !dbg !54
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !54
  %82 = sext i32 %79 to i64, !dbg !54
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !54
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %68, i32 0, i1 %68) #3, !dbg !55
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %68, i32 0, i1 %68) #3, !dbg !55
  %86 = add nsw i32 %69, %45, !dbg !56
  %87 = sext i32 %86 to i64, !dbg !57
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !57
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %68, i32 0, i1 %68) #3, !dbg !58
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %68, i32 0, i1 %68) #3, !dbg !58
  %91 = icmp sgt i32 %21, 11, !dbg !59
  %92 = add nsw i32 %21, -12, !dbg !60
  %93 = shl nsw i32 %92, 10, !dbg !61
  %94 = add nsw i32 %72, %93, !dbg !62
  %95 = sext i32 %94 to i64, !dbg !63
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !63
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !64
  %98 = sext i32 %92 to i64, !dbg !65
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !65
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %91, i32 0, i1 %91) #3, !dbg !66
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %91, i32 0, i1 %91) #3, !dbg !66
  %102 = getelementptr float, ptr addrspace(1) %7, i64 %98, !dbg !67
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %91, i32 0, i1 %91) #3, !dbg !68
  %104 = bitcast i32 %103 to float, !dbg !68
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %91, i32 0, i1 %91) #3, !dbg !68
  %106 = bitcast i32 %105 to float, !dbg !68
  %107 = fadd float %104, 0x3F50624DE0000000, !dbg !69
  %108 = fadd float %106, 0x3F50624DE0000000, !dbg !69
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i = icmp eq i32 %109, 0, !dbg !70
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i = icmp eq i32 %110, 0, !dbg !70
  br i1 %.not.i, label %116, label %111, !dbg !70

111:                                              ; preds = %12
  br i1 %.not1.i, label %114, label %112, !dbg !70

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

116:                                              ; preds = %12
  br i1 %.not1.i, label %119, label %117, !dbg !70

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

__nv_sqrtf.exit:                                  ; preds = %112, %114, %117, %119
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !70
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i1 = icmp eq i32 %121, 0, !dbg !70
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i4 = icmp eq i32 %122, 0, !dbg !70
  br i1 %.not.i1, label %128, label %123, !dbg !70

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !70

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !70
  br label %__nv_sqrtf.exit5, !dbg !70

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !70
  br label %__nv_sqrtf.exit5, !dbg !70

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %131, label %129, !dbg !70

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !70
  br label %__nv_sqrtf.exit5, !dbg !70

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !70
  br label %__nv_sqrtf.exit5, !dbg !70

__nv_sqrtf.exit5:                                 ; preds = %124, %126, %129, %131
  %.0.i3 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !70
  %133 = extractvalue { i32, i32 } %97, 1, !dbg !64
  %134 = bitcast i32 %133 to float, !dbg !64
  %135 = bitcast i32 %101 to float, !dbg !66
  %136 = fsub float %134, %135, !dbg !71
  %137 = extractvalue { i32, i32 } %97, 0, !dbg !64
  %138 = bitcast i32 %137 to float, !dbg !64
  %139 = bitcast i32 %100 to float, !dbg !66
  %140 = fsub float %138, %139, !dbg !71
  %141 = bitcast i32 %85 to float, !dbg !55
  %142 = bitcast i32 %90 to float, !dbg !58
  %143 = fadd float %141, %142, !dbg !72
  %144 = extractvalue { i32, i32 } %76, 1, !dbg !51
  %145 = bitcast i32 %144 to float, !dbg !51
  %146 = fadd float %143, %145, !dbg !73
  %147 = bitcast i32 %84 to float, !dbg !55
  %148 = bitcast i32 %89 to float, !dbg !58
  %149 = fadd float %147, %148, !dbg !72
  %150 = extractvalue { i32, i32 } %76, 0, !dbg !51
  %151 = bitcast i32 %150 to float, !dbg !51
  %152 = fadd float %149, %151, !dbg !73
  %153 = bitcast i32 %62 to float, !dbg !40
  %154 = bitcast i32 %67 to float, !dbg !43
  %155 = fadd float %153, %154, !dbg !74
  %156 = bitcast i32 %61 to float, !dbg !40
  %157 = bitcast i32 %66 to float, !dbg !43
  %158 = fadd float %156, %157, !dbg !74
  %159 = bitcast i32 %44 to float, !dbg !30
  %160 = bitcast i32 %50 to float, !dbg !34
  %161 = fadd float %159, %160, !dbg !75
  %162 = bitcast i32 %43 to float, !dbg !30
  %163 = bitcast i32 %49 to float, !dbg !34
  %164 = fadd float %162, %163, !dbg !75
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !76
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !76
  %167 = fmul float %140, %165, !dbg !77
  %168 = fmul float %136, %166, !dbg !77
  %169 = getelementptr float, ptr addrspace(1) %8, i64 %98, !dbg !78
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %91, i32 0, i1 %91) #3, !dbg !79
  %171 = bitcast i32 %170 to float, !dbg !79
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %91, i32 0, i1 %91) #3, !dbg !79
  %173 = bitcast i32 %172 to float, !dbg !79
  %174 = fmul float %167, %171, !dbg !80
  %175 = fmul float %168, %173, !dbg !80
  %176 = getelementptr float, ptr addrspace(1) %9, i64 %98, !dbg !81
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %91, i32 0, i1 %91) #3, !dbg !82
  %178 = bitcast i32 %177 to float, !dbg !82
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %91, i32 0, i1 %91) #3, !dbg !82
  %180 = bitcast i32 %179 to float, !dbg !82
  %181 = fadd float %174, %178, !dbg !83
  %182 = fadd float %175, %180, !dbg !83
  %183 = mul nsw i32 %92, 1120, !dbg !84
  %184 = add nsw i32 %35, %183, !dbg !85
  %185 = add nsw i32 %37, %183, !dbg !85
  %186 = sext i32 %184 to i64, !dbg !86
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !86
  %188 = sext i32 %185 to i64, !dbg !86
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !86
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %91, i32 0, i1 %91) #3, !dbg !87
  %191 = bitcast i32 %190 to float, !dbg !87
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %91, i32 0, i1 %91) #3, !dbg !87
  %193 = bitcast i32 %192 to float, !dbg !87
  %194 = fadd float %181, %191, !dbg !88
  %195 = fadd float %182, %193, !dbg !88
  %196 = select i1 %91, float %194, float 0.000000e+00, !dbg !89
  %197 = select i1 %91, float %195, float 0.000000e+00, !dbg !89
  %198 = select i1 %68, float %152, float %196, !dbg !90
  %199 = select i1 %68, float %146, float %197, !dbg !90
  %200 = select i1 %52, float %158, float %198, !dbg !90
  %201 = select i1 %52, float %155, float %199, !dbg !90
  %202 = select i1 %28, float %164, float %200, !dbg !90
  %203 = select i1 %28, float %161, float %201, !dbg !90
  %204 = sext i32 %18 to i64, !dbg !91
  %205 = getelementptr float, ptr addrspace(1) %10, i64 %204, !dbg !91
  %206 = bitcast float %202 to i32, !dbg !92
  %207 = bitcast float %203 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %206, i32 %207, ptr addrspace(1) %205, i1 true) #3, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cght553ovpdfx6c3qsu4fevemavinxo3qynbheg3co36n2tvaktr.py", directory: "inductor_cache/gh")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 43, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 40, scope: !7)
!25 = !DILocation(line: 35, column: 54, scope: !7)
!26 = !DILocation(line: 35, column: 65, scope: !7)
!27 = !DILocation(line: 35, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 60, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 70, scope: !7)
!31 = !DILocation(line: 36, column: 32, scope: !7)
!32 = !DILocation(line: 36, column: 38, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 62, scope: !7)
!37 = !DILocation(line: 44, column: 55, scope: !7)
!38 = !DILocation(line: 44, column: 68, scope: !7)
!39 = !DILocation(line: 44, column: 31, scope: !7)
!40 = !DILocation(line: 44, column: 78, scope: !7)
!41 = !DILocation(line: 45, column: 39, scope: !7)
!42 = !DILocation(line: 45, column: 31, scope: !7)
!43 = !DILocation(line: 45, column: 52, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 49, scope: !7)
!46 = !DILocation(line: 53, column: 42, scope: !7)
!47 = !DILocation(line: 53, column: 60, scope: !7)
!48 = !DILocation(line: 53, column: 36, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 53, column: 31, scope: !7)
!51 = !DILocation(line: 53, column: 65, scope: !7)
!52 = !DILocation(line: 54, column: 55, scope: !7)
!53 = !DILocation(line: 54, column: 68, scope: !7)
!54 = !DILocation(line: 54, column: 31, scope: !7)
!55 = !DILocation(line: 54, column: 78, scope: !7)
!56 = !DILocation(line: 55, column: 39, scope: !7)
!57 = !DILocation(line: 55, column: 31, scope: !7)
!58 = !DILocation(line: 55, column: 52, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 50, scope: !7)
!61 = !DILocation(line: 63, column: 42, scope: !7)
!62 = !DILocation(line: 63, column: 56, scope: !7)
!63 = !DILocation(line: 63, column: 31, scope: !7)
!64 = !DILocation(line: 63, column: 66, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 44, scope: !7)
!67 = !DILocation(line: 66, column: 31, scope: !7)
!68 = !DILocation(line: 66, column: 44, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 27, scope: !7)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 56, column: 20, scope: !7)
!73 = !DILocation(line: 57, column: 20, scope: !7)
!74 = !DILocation(line: 46, column: 20, scope: !7)
!75 = !DILocation(line: 37, column: 18, scope: !7)
!76 = !DILocation(line: 71, column: 20, scope: !7)
!77 = !DILocation(line: 74, column: 20, scope: !7)
!78 = !DILocation(line: 75, column: 31, scope: !7)
!79 = !DILocation(line: 75, column: 44, scope: !7)
!80 = !DILocation(line: 76, column: 20, scope: !7)
!81 = !DILocation(line: 77, column: 31, scope: !7)
!82 = !DILocation(line: 77, column: 44, scope: !7)
!83 = !DILocation(line: 78, column: 20, scope: !7)
!84 = !DILocation(line: 79, column: 55, scope: !7)
!85 = !DILocation(line: 79, column: 69, scope: !7)
!86 = !DILocation(line: 79, column: 31, scope: !7)
!87 = !DILocation(line: 79, column: 79, scope: !7)
!88 = !DILocation(line: 80, column: 20, scope: !7)
!89 = !DILocation(line: 82, column: 35, scope: !7)
!90 = !DILocation(line: 0, scope: !7)
!91 = !DILocation(line: 86, column: 25, scope: !7)
!92 = !DILocation(line: 86, column: 37, scope: !7)
!93 = !DILocation(line: 86, column: 4, scope: !7)
