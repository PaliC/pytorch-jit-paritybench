; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = or disjoint i32 %13, 256, !dbg !13
  %16 = or disjoint i32 %13, 384, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !17
  %25 = icmp slt i32 %23, 256, !dbg !18
  %26 = icmp slt i32 %24, 256, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %27 = sdiv i32 %.frozen, 128, !dbg !19
  %28 = mul i32 %27, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %22, 8, !dbg !21
  %30 = shl i32 %24, 7, !dbg !21
  %31 = shl i32 %27, 15, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %29, !dbg !24
  %34 = add i32 %32, %30, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = and i1 %25, %17, !dbg !26
  %40 = and i1 %17, %26, !dbg !26
  %41 = and i1 %25, %18, !dbg !26
  %42 = and i1 %19, %25, !dbg !26
  %43 = and i1 %20, %25, !dbg !26
  %44 = and i1 %21, %25, !dbg !26
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = shl i32 %13, 8, !dbg !28
  %56 = shl i32 %14, 8, !dbg !28
  %57 = shl i32 %15, 8, !dbg !28
  %58 = shl i32 %16, 8, !dbg !28
  %59 = add i32 %55, %23, !dbg !29
  %60 = add i32 %23, %56, !dbg !29
  %61 = add i32 %23, %57, !dbg !29
  %62 = add i32 %23, %58, !dbg !29
  %63 = sext i32 %59 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !30
  %65 = sext i32 %60 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !30
  %67 = sext i32 %61 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !30
  %69 = sext i32 %62 to i64, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !30
  %71 = shl i32 %8, 3, !dbg !31
  %72 = and i32 %71, 1016, !dbg !31
  %73 = shl i32 %8, 1, !dbg !31
  %74 = and i32 %73, 254, !dbg !31
  %75 = lshr exact i32 %72, 1, !dbg !31
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !31
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %72, !dbg !31
  %78 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !31
  %79 = or disjoint i32 %72, 2, !dbg !31
  %80 = lshr exact i32 %79, 1, !dbg !31
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !31
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %79, !dbg !31
  %83 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !31
  %84 = or disjoint i32 %72, 4, !dbg !31
  %85 = lshr exact i32 %84, 1, !dbg !31
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !31
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84, !dbg !31
  %88 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !31
  %89 = or disjoint i32 %72, 6, !dbg !31
  %90 = lshr exact i32 %89, 1, !dbg !31
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !31
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %89, !dbg !31
  %93 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !31
  %94 = or disjoint i32 %72, 1, !dbg !31
  %95 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %94, !dbg !31
  %96 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !31
  %97 = or disjoint i32 %72, 3, !dbg !31
  %98 = lshr i32 %97, 1, !dbg !31
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !31
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %97, !dbg !31
  %101 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !31
  %102 = or disjoint i32 %72, 5, !dbg !31
  %103 = lshr i32 %102, 1, !dbg !31
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !31
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %102, !dbg !31
  %106 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !31
  %107 = or disjoint i32 %72, 7, !dbg !31
  %108 = lshr i32 %107, 1, !dbg !31
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !31
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %107, !dbg !31
  %111 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %112 = lshr exact i32 %74, 1, !dbg !31
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !31
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %74, !dbg !31
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !31
  %116 = or disjoint i32 %74, 1, !dbg !31
  %117 = getelementptr float, ptr addrspace(3) %113, i32 %116, !dbg !31
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !31
  %119 = or disjoint i32 %74, 256, !dbg !31
  %120 = lshr exact i32 %119, 1, !dbg !31
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !31
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !31
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !31
  %124 = or disjoint i32 %74, 257, !dbg !31
  %125 = lshr i32 %124, 1, !dbg !31
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !31
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !31
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !31
  %129 = or disjoint i32 %74, 512, !dbg !31
  %130 = lshr exact i32 %129, 1, !dbg !31
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !31
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !31
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !31
  %134 = or disjoint i32 %74, 513, !dbg !31
  %135 = lshr i32 %134, 1, !dbg !31
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !31
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !31
  %139 = or disjoint i32 %74, 768, !dbg !31
  %140 = lshr exact i32 %139, 1, !dbg !31
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !31
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !31
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !31
  %144 = or disjoint i32 %74, 769, !dbg !31
  %145 = lshr i32 %144, 1, !dbg !31
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !31
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !31
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %115, i32 %118, ptr addrspace(1) %64, i1 %41) #2, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %128, ptr addrspace(1) %66, i1 %42) #2, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %138, ptr addrspace(1) %68, i1 %43) #2, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %148, ptr addrspace(1) %70, i1 %44) #2, !dbg !31
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %46, i32 %47, i32 %48, i32 %49, ptr addrspace(1) %149, i1 %39) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %51, i32 %52, i32 %53, i32 %54, ptr addrspace(1) %150, i1 %40) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csgdsmph4kqisnvscvtgwez3mkcyphq5vzlxhdrwp7e2bmeovhbn.py", directory: "inductor_cache/sg")
!4 = !{ptr @triton_poi_fused_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_8", linkageName: "triton_poi_fused_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 63, scope: !7)
!27 = !DILocation(line: 32, column: 55, scope: !7)
!28 = !DILocation(line: 33, column: 34, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 25, scope: !7)
!33 = !DILocation(line: 34, column: 56, scope: !7)
!34 = !DILocation(line: 34, column: 4, scope: !7)
