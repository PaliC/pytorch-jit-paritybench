; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 13312, !dbg !14
  %11 = srem i32 %9, 832, !dbg !15
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %14 = sdiv <2 x i32> %13, <i32 1664, i32 832>, !dbg !16
  %15 = srem <2 x i32> %14, splat (i32 2), !dbg !17
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !18
  %17 = icmp sgt i32 %16, -1, !dbg !19
  %18 = shl nsw <2 x i32> %15, splat (i32 1), !dbg !20
  %19 = extractelement <2 x i32> %15, i64 1, !dbg !18
  %20 = icmp sgt i32 %19, -1, !dbg !21
  %21 = or i32 %16, %19, !dbg !18
  %22 = icmp sgt i32 %21, -1, !dbg !18
  %23 = mul nsw i32 %19, 1664, !dbg !22
  %24 = extractelement <2 x i32> %14, i64 0, !dbg !23
  %25 = mul i32 %24, 6656, !dbg !23
  %26 = add i32 %25, %11, !dbg !24
  %27 = add i32 %26, %23, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = and i1 %10, %22, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 -8388608, i1 %30) #1, !dbg !28
  %32 = bitcast i32 %31 to float, !dbg !28
  %33 = add i32 %26, 832, !dbg !29
  %34 = add i32 %33, %23, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %30, i32 -8388608, i1 %30) #1, !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = fcmp ogt float %38, %32, !dbg !33
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !37
  %41 = or i1 %39, %40, !dbg !38
  %42 = select i1 %41, float %38, float %32, !dbg !39
  %43 = add nsw <2 x i32> %18, splat (i32 2), !dbg !40
  %44 = extractelement <2 x i32> %43, i64 1, !dbg !41
  %45 = icmp samesign ult i32 %44, 4, !dbg !42
  %46 = and i1 %17, %45, !dbg !43
  %47 = add i32 %26, 1664, !dbg !44
  %48 = add i32 %47, %23, !dbg !45
  %49 = sext i32 %48 to i64, !dbg !46
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !46
  %51 = and i1 %10, %46, !dbg !47
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %51, i32 -8388608, i1 %51) #1, !dbg !48
  %53 = bitcast i32 %52 to float, !dbg !48
  %54 = fcmp olt float %42, %53, !dbg !49
  %55 = fcmp uno float %53, 0.000000e+00, !dbg !51
  %56 = or i1 %55, %54, !dbg !52
  %57 = select i1 %56, float %53, float %42, !dbg !53
  %58 = add i32 %26, 3328, !dbg !54
  %59 = add i32 %58, %23, !dbg !55
  %60 = sext i32 %59 to i64, !dbg !56
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !56
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %30, i32 -8388608, i1 %30) #1, !dbg !57
  %63 = bitcast i32 %62 to float, !dbg !57
  %64 = fcmp olt float %57, %63, !dbg !58
  %65 = fcmp uno float %63, 0.000000e+00, !dbg !60
  %66 = or i1 %65, %64, !dbg !61
  %67 = select i1 %66, float %63, float %57, !dbg !62
  %68 = add i32 %26, 4160, !dbg !63
  %69 = add i32 %68, %23, !dbg !64
  %70 = sext i32 %69 to i64, !dbg !65
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !65
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %30, i32 -8388608, i1 %30) #1, !dbg !66
  %73 = bitcast i32 %72 to float, !dbg !66
  %74 = fcmp olt float %67, %73, !dbg !67
  %75 = fcmp uno float %73, 0.000000e+00, !dbg !69
  %76 = or i1 %75, %74, !dbg !70
  %77 = select i1 %76, float %73, float %67, !dbg !71
  %78 = add i32 %26, 4992, !dbg !72
  %79 = add i32 %78, %23, !dbg !73
  %80 = sext i32 %79 to i64, !dbg !74
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !74
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %51, i32 -8388608, i1 %51) #1, !dbg !75
  %83 = bitcast i32 %82 to float, !dbg !75
  %84 = fcmp olt float %77, %83, !dbg !76
  %85 = fcmp uno float %83, 0.000000e+00, !dbg !78
  %86 = or i1 %85, %84, !dbg !79
  %87 = select i1 %86, float %83, float %77, !dbg !80
  %88 = extractelement <2 x i32> %43, i64 0, !dbg !41
  %89 = icmp samesign ult i32 %88, 4, !dbg !81
  %90 = and i1 %20, %89, !dbg !82
  %91 = add i32 %26, 6656, !dbg !83
  %92 = add i32 %91, %23, !dbg !84
  %93 = sext i32 %92 to i64, !dbg !85
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !85
  %95 = and i1 %10, %90, !dbg !86
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 -8388608, i1 %95) #1, !dbg !87
  %97 = bitcast i32 %96 to float, !dbg !87
  %98 = fcmp olt float %87, %97, !dbg !88
  %99 = fcmp uno float %97, 0.000000e+00, !dbg !90
  %100 = or i1 %99, %98, !dbg !91
  %101 = select i1 %100, float %97, float %87, !dbg !92
  %102 = add i32 %26, 7488, !dbg !93
  %103 = add i32 %102, %23, !dbg !94
  %104 = sext i32 %103 to i64, !dbg !95
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !95
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %95, i32 -8388608, i1 %95) #1, !dbg !96
  %107 = bitcast i32 %106 to float, !dbg !96
  %108 = fcmp olt float %101, %107, !dbg !97
  %109 = fcmp uno float %107, 0.000000e+00, !dbg !99
  %110 = or i1 %109, %108, !dbg !100
  %111 = select i1 %110, float %107, float %101, !dbg !101
  %112 = or i32 %88, %44, !dbg !41
  %113 = icmp samesign ult i32 %112, 4, !dbg !41
  %114 = add i32 %26, 8320, !dbg !102
  %115 = add i32 %114, %23, !dbg !103
  %116 = sext i32 %115 to i64, !dbg !104
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !104
  %118 = and i1 %10, %113, !dbg !105
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %118, i32 -8388608, i1 %118) #1, !dbg !106
  %120 = bitcast i32 %119 to float, !dbg !106
  %121 = fcmp olt float %111, %120, !dbg !107
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !109
  %123 = or i1 %122, %121, !dbg !110
  %124 = zext i1 %39 to i8, !dbg !111
  %125 = select i1 %54, i8 2, i8 %124, !dbg !112
  %126 = select i1 %64, i8 3, i8 %125, !dbg !113
  %127 = select i1 %74, i8 4, i8 %126, !dbg !114
  %128 = select i1 %84, i8 5, i8 %127, !dbg !115
  %129 = select i1 %98, i8 6, i8 %128, !dbg !116
  %130 = select i1 %108, i8 7, i8 %129, !dbg !117
  %131 = select i1 %121, i8 8, i8 %130, !dbg !118
  %132 = sext i32 %9 to i64, !dbg !119
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !119
  %134 = bitcast float %111 to i32, !dbg !120
  %135 = select i1 %123, i32 %119, i32 %134, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %10) #1, !dbg !120
  %136 = getelementptr i8, ptr addrspace(1) %2, i64 %132, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %131, ptr addrspace(1) %136, i1 %10) #1, !dbg !123
  ret void, !dbg !124
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjoxkbhl2bpz73ryxftjyh4skjfuu5uh2or6tgqsmwf4a6menesv.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_64, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_64, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_64", linkageName: "triton_poi_fused_max_pool2d_with_indices_64", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 13, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 41, scope: !7)
!23 = !DILocation(line: 40, column: 51, scope: !7)
!24 = !DILocation(line: 40, column: 36, scope: !7)
!25 = !DILocation(line: 40, column: 46, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 64, scope: !7)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 46, column: 42, scope: !7)
!30 = !DILocation(line: 46, column: 52, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 46, column: 62, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 47, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 68, column: 16, scope: !7)
!41 = !DILocation(line: 78, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 19, scope: !7)
!44 = !DILocation(line: 53, column: 43, scope: !7)
!45 = !DILocation(line: 53, column: 53, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 71, scope: !7)
!48 = !DILocation(line: 53, column: 63, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !50)
!50 = !DILocation(line: 54, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !50)
!54 = !DILocation(line: 60, column: 43, scope: !7)
!55 = !DILocation(line: 60, column: 53, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 63, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !59)
!59 = !DILocation(line: 61, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !59)
!63 = !DILocation(line: 63, column: 43, scope: !7)
!64 = !DILocation(line: 63, column: 53, scope: !7)
!65 = !DILocation(line: 63, column: 31, scope: !7)
!66 = !DILocation(line: 63, column: 63, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !68)
!68 = !DILocation(line: 64, column: 42, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !68)
!72 = !DILocation(line: 66, column: 43, scope: !7)
!73 = !DILocation(line: 66, column: 53, scope: !7)
!74 = !DILocation(line: 66, column: 31, scope: !7)
!75 = !DILocation(line: 66, column: 63, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !77)
!77 = !DILocation(line: 67, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !77)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 72, column: 20, scope: !7)
!83 = !DILocation(line: 73, column: 43, scope: !7)
!84 = !DILocation(line: 73, column: 53, scope: !7)
!85 = !DILocation(line: 73, column: 31, scope: !7)
!86 = !DILocation(line: 73, column: 71, scope: !7)
!87 = !DILocation(line: 73, column: 63, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !89)
!89 = !DILocation(line: 74, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !89)
!93 = !DILocation(line: 76, column: 43, scope: !7)
!94 = !DILocation(line: 76, column: 53, scope: !7)
!95 = !DILocation(line: 76, column: 31, scope: !7)
!96 = !DILocation(line: 76, column: 63, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !98)
!98 = !DILocation(line: 77, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !98)
!102 = !DILocation(line: 79, column: 43, scope: !7)
!103 = !DILocation(line: 79, column: 53, scope: !7)
!104 = !DILocation(line: 79, column: 31, scope: !7)
!105 = !DILocation(line: 79, column: 71, scope: !7)
!106 = !DILocation(line: 79, column: 63, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !108)
!108 = !DILocation(line: 80, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !108)
!111 = !DILocation(line: 84, column: 35, scope: !7)
!112 = !DILocation(line: 87, column: 35, scope: !7)
!113 = !DILocation(line: 90, column: 35, scope: !7)
!114 = !DILocation(line: 93, column: 35, scope: !7)
!115 = !DILocation(line: 96, column: 35, scope: !7)
!116 = !DILocation(line: 99, column: 35, scope: !7)
!117 = !DILocation(line: 102, column: 35, scope: !7)
!118 = !DILocation(line: 105, column: 35, scope: !7)
!119 = !DILocation(line: 106, column: 25, scope: !7)
!120 = !DILocation(line: 106, column: 37, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !108)
!122 = !DILocation(line: 107, column: 25, scope: !7)
!123 = !DILocation(line: 107, column: 37, scope: !7)
!124 = !DILocation(line: 107, column: 4, scope: !7)
