; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 1020, !dbg !12
  %11 = and i32 %8, 255, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 256, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 768, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 2, !dbg !15
  %19 = or disjoint i32 %18, 1, !dbg !16
  %20 = or disjoint i32 %18, 2, !dbg !16
  %21 = or disjoint i32 %18, 3, !dbg !16
  %22 = icmp slt i32 %18, 4, !dbg !17
  %23 = icmp slt i32 %19, 4, !dbg !17
  %24 = icmp slt i32 %20, 4, !dbg !17
  %25 = icmp slt i32 %21, 4, !dbg !17
  %.frozen = freeze i32 %12, !dbg !18
  %26 = sdiv i32 %.frozen, 512, !dbg !18
  %27 = mul i32 %26, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = sdiv i32 %13, 512, !dbg !18
  %29 = sdiv i32 %14, 512, !dbg !18
  %30 = sdiv i32 %15, 512, !dbg !18
  %31 = sdiv i32 %16, 512, !dbg !18
  %32 = shl i32 %19, 9, !dbg !20
  %33 = shl i32 %20, 9, !dbg !20
  %34 = shl i32 %21, 9, !dbg !20
  %35 = shl i32 %26, 11, !dbg !21
  %36 = add i32 %35, %.decomposed, !dbg !22
  %37 = add i32 %26, %17, !dbg !23
  %38 = shl i32 %37, 11, !dbg !23
  %39 = add i32 %38, %.decomposed, !dbg !23
  %40 = add i32 %36, %32, !dbg !23
  %41 = add i32 %36, %33, !dbg !23
  %42 = add i32 %36, %34, !dbg !23
  %43 = sext i32 %39 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %40 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %41 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %42 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %23) #4, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %24) #4, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %25) #4, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !25
  %71 = shl i32 %8, 4, !dbg !25
  %72 = and i32 %71, 4080, !dbg !25
  %73 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %72, !dbg !25
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %72, !dbg !25
  %75 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !25
  %76 = or disjoint i32 %72, 4, !dbg !25
  %77 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %76, !dbg !25
  %79 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !25
  %80 = or disjoint i32 %72, 8, !dbg !25
  %81 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !25
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %80, !dbg !25
  %83 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !25
  %84 = or disjoint i32 %72, 12, !dbg !25
  %85 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %84, !dbg !25
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %84, !dbg !25
  %87 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !25
  %88 = or disjoint i32 %72, 1, !dbg !25
  %89 = getelementptr float, ptr addrspace(3) %73, i32 %88, !dbg !25
  %90 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #4, !dbg !25
  %91 = or disjoint i32 %72, 5, !dbg !25
  %92 = lshr i32 %91, 2, !dbg !25
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !25
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !25
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #4, !dbg !25
  %96 = or disjoint i32 %72, 9, !dbg !25
  %97 = lshr i32 %96, 2, !dbg !25
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !25
  %100 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #4, !dbg !25
  %101 = or disjoint i32 %72, 13, !dbg !25
  %102 = lshr i32 %101, 2, !dbg !25
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !25
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !25
  %105 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !25
  %106 = or disjoint i32 %72, 2, !dbg !25
  %107 = getelementptr float, ptr addrspace(3) %73, i32 %106, !dbg !25
  %108 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #4, !dbg !25
  %109 = or disjoint i32 %72, 6, !dbg !25
  %110 = lshr i32 %109, 2, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !25
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !25
  %113 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #4, !dbg !25
  %114 = or disjoint i32 %72, 10, !dbg !25
  %115 = lshr i32 %114, 2, !dbg !25
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !25
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !25
  %118 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !25
  %119 = or disjoint i32 %72, 14, !dbg !25
  %120 = lshr i32 %119, 2, !dbg !25
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !25
  %123 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #4, !dbg !25
  %124 = or disjoint i32 %72, 3, !dbg !25
  %125 = getelementptr float, ptr addrspace(3) %73, i32 %124, !dbg !25
  %126 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !25
  %127 = or disjoint i32 %72, 7, !dbg !25
  %128 = lshr i32 %127, 2, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !25
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !25
  %131 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #4, !dbg !25
  %132 = or disjoint i32 %72, 11, !dbg !25
  %133 = lshr i32 %132, 2, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !25
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !25
  %136 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !25
  %137 = or disjoint i32 %72, 15, !dbg !25
  %138 = lshr i32 %137, 2, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !25
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !25
  %141 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %142 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %10, !dbg !25
  %144 = load float, ptr addrspace(3) %143, align 4, !dbg !25
  %145 = or disjoint i32 %10, 1, !dbg !25
  %146 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %145, !dbg !25
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !25
  %148 = or disjoint i32 %10, 2, !dbg !25
  %149 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %148, !dbg !25
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !25
  %151 = or disjoint i32 %10, 3, !dbg !25
  %152 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %151, !dbg !25
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !25
  %154 = or disjoint i32 %10, 1024, !dbg !25
  %155 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %154, !dbg !25
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %154, !dbg !25
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !25
  %158 = or disjoint i32 %10, 1025, !dbg !25
  %159 = lshr i32 %158, 2, !dbg !25
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !25
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !25
  %162 = load float, ptr addrspace(3) %161, align 4, !dbg !25
  %163 = or disjoint i32 %10, 1026, !dbg !25
  %164 = lshr i32 %163, 2, !dbg !25
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !25
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %163, !dbg !25
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !25
  %168 = or disjoint i32 %10, 1027, !dbg !25
  %169 = lshr i32 %168, 2, !dbg !25
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !25
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %168, !dbg !25
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !25
  %173 = or disjoint i32 %10, 2048, !dbg !25
  %174 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !25
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %173, !dbg !25
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !25
  %177 = or disjoint i32 %10, 2049, !dbg !25
  %178 = lshr i32 %177, 2, !dbg !25
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !25
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !25
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !25
  %182 = or disjoint i32 %10, 2050, !dbg !25
  %183 = lshr i32 %182, 2, !dbg !25
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !25
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !25
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !25
  %187 = or disjoint i32 %10, 2051, !dbg !25
  %188 = lshr i32 %187, 2, !dbg !25
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !25
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !25
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !25
  %192 = or disjoint i32 %10, 3072, !dbg !25
  %193 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %192, !dbg !25
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %192, !dbg !25
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !25
  %196 = or disjoint i32 %10, 3073, !dbg !25
  %197 = lshr i32 %196, 2, !dbg !25
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !25
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %196, !dbg !25
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !25
  %201 = or disjoint i32 %10, 3074, !dbg !25
  %202 = lshr i32 %201, 2, !dbg !25
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !25
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !25
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !25
  %206 = or disjoint i32 %10, 3075, !dbg !25
  %207 = lshr i32 %206, 2, !dbg !25
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !25
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %206, !dbg !25
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !25
  %211 = add i32 %28, %17, !dbg !26
  %212 = shl i32 %211, 2, !dbg !26
  %213 = add i32 %17, %29, !dbg !26
  %214 = shl i32 %213, 2, !dbg !26
  %215 = add i32 %17, %30, !dbg !26
  %216 = shl i32 %215, 2, !dbg !26
  %217 = add i32 %17, %31, !dbg !26
  %218 = shl i32 %217, 2, !dbg !26
  %219 = sext i32 %212 to i64, !dbg !27
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !27
  %221 = sext i32 %214 to i64, !dbg !27
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !27
  %223 = sext i32 %216 to i64, !dbg !27
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !27
  %225 = sext i32 %218 to i64, !dbg !27
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !27
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %22) #4, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !28
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !28
  %232 = bitcast i32 %228 to float, !dbg !28
  %233 = bitcast i32 %229 to float, !dbg !28
  %234 = bitcast i32 %230 to float, !dbg !28
  %235 = bitcast i32 %231 to float, !dbg !28
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %22) #4, !dbg !28
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !28
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !28
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !28
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !28
  %241 = bitcast i32 %237 to float, !dbg !28
  %242 = bitcast i32 %238 to float, !dbg !28
  %243 = bitcast i32 %239 to float, !dbg !28
  %244 = bitcast i32 %240 to float, !dbg !28
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %224, i1 %22) #4, !dbg !28
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !28
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !28
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !28
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !28
  %250 = bitcast i32 %246 to float, !dbg !28
  %251 = bitcast i32 %247 to float, !dbg !28
  %252 = bitcast i32 %248 to float, !dbg !28
  %253 = bitcast i32 %249 to float, !dbg !28
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %226, i1 %22) #4, !dbg !28
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !28
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !28
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !28
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !28
  %259 = bitcast i32 %255 to float, !dbg !28
  %260 = bitcast i32 %256 to float, !dbg !28
  %261 = bitcast i32 %257 to float, !dbg !28
  %262 = bitcast i32 %258 to float, !dbg !28
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %263, 0, !dbg !29
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %264, 0, !dbg !29
  br i1 %.not.i, label %270, label %265, !dbg !29

265:                                              ; preds = %5
  br i1 %.not1.i, label %268, label %266, !dbg !29

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

270:                                              ; preds = %5
  br i1 %.not1.i, label %273, label %271, !dbg !29

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %266, %268, %271, %273
  %.0.i = phi float [ %267, %266 ], [ %269, %268 ], [ %272, %271 ], [ %274, %273 ], !dbg !29
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i1 = icmp eq i32 %275, 0, !dbg !29
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i4 = icmp eq i32 %276, 0, !dbg !29
  br i1 %.not.i1, label %282, label %277, !dbg !29

277:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %280, label %278, !dbg !29

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

282:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %285, label %283, !dbg !29

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #4, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %278, %280, %283, %285
  %.0.i3 = phi float [ %279, %278 ], [ %281, %280 ], [ %284, %283 ], [ %286, %285 ], !dbg !29
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i6 = icmp eq i32 %287, 0, !dbg !29
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i9 = icmp eq i32 %288, 0, !dbg !29
  br i1 %.not.i6, label %294, label %289, !dbg !29

289:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %292, label %290, !dbg !29

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

294:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %297, label %295, !dbg !29

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #4, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %290, %292, %295, %297
  %.0.i8 = phi float [ %291, %290 ], [ %293, %292 ], [ %296, %295 ], [ %298, %297 ], !dbg !29
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i11 = icmp eq i32 %299, 0, !dbg !29
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i14 = icmp eq i32 %300, 0, !dbg !29
  br i1 %.not.i11, label %306, label %301, !dbg !29

301:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %304, label %302, !dbg !29

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

306:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %309, label %307, !dbg !29

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #4, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %302, %304, %307, %309
  %.0.i13 = phi float [ %303, %302 ], [ %305, %304 ], [ %308, %307 ], [ %310, %309 ], !dbg !29
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i16 = icmp eq i32 %311, 0, !dbg !29
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i19 = icmp eq i32 %312, 0, !dbg !29
  br i1 %.not.i16, label %318, label %313, !dbg !29

313:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %316, label %314, !dbg !29

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

318:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %321, label %319, !dbg !29

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %314, %316, %319, %321
  %.0.i18 = phi float [ %315, %314 ], [ %317, %316 ], [ %320, %319 ], [ %322, %321 ], !dbg !29
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i21 = icmp eq i32 %323, 0, !dbg !29
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i24 = icmp eq i32 %324, 0, !dbg !29
  br i1 %.not.i21, label %330, label %325, !dbg !29

325:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %328, label %326, !dbg !29

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

330:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %333, label %331, !dbg !29

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %326, %328, %331, %333
  %.0.i23 = phi float [ %327, %326 ], [ %329, %328 ], [ %332, %331 ], [ %334, %333 ], !dbg !29
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i26 = icmp eq i32 %335, 0, !dbg !29
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i29 = icmp eq i32 %336, 0, !dbg !29
  br i1 %.not.i26, label %342, label %337, !dbg !29

337:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %340, label %338, !dbg !29

338:                                              ; preds = %337
  %339 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %243) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

340:                                              ; preds = %337
  %341 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %243) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

342:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %345, label %343, !dbg !29

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.f(float %243) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.f(float %243) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %338, %340, %343, %345
  %.0.i28 = phi float [ %339, %338 ], [ %341, %340 ], [ %344, %343 ], [ %346, %345 ], !dbg !29
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i31 = icmp eq i32 %347, 0, !dbg !29
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i34 = icmp eq i32 %348, 0, !dbg !29
  br i1 %.not.i31, label %354, label %349, !dbg !29

349:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %352, label %350, !dbg !29

350:                                              ; preds = %349
  %351 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

352:                                              ; preds = %349
  %353 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

354:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %357, label %355, !dbg !29

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %350, %352, %355, %357
  %.0.i33 = phi float [ %351, %350 ], [ %353, %352 ], [ %356, %355 ], [ %358, %357 ], !dbg !29
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i36 = icmp eq i32 %359, 0, !dbg !29
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i39 = icmp eq i32 %360, 0, !dbg !29
  br i1 %.not.i36, label %366, label %361, !dbg !29

361:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %364, label %362, !dbg !29

362:                                              ; preds = %361
  %363 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

364:                                              ; preds = %361
  %365 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

366:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %369, label %367, !dbg !29

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

__nv_sqrtf.exit40:                                ; preds = %362, %364, %367, %369
  %.0.i38 = phi float [ %363, %362 ], [ %365, %364 ], [ %368, %367 ], [ %370, %369 ], !dbg !29
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i41 = icmp eq i32 %371, 0, !dbg !29
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i44 = icmp eq i32 %372, 0, !dbg !29
  br i1 %.not.i41, label %378, label %373, !dbg !29

373:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %376, label %374, !dbg !29

374:                                              ; preds = %373
  %375 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

376:                                              ; preds = %373
  %377 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

378:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %381, label %379, !dbg !29

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

__nv_sqrtf.exit45:                                ; preds = %374, %376, %379, %381
  %.0.i43 = phi float [ %375, %374 ], [ %377, %376 ], [ %380, %379 ], [ %382, %381 ], !dbg !29
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i46 = icmp eq i32 %383, 0, !dbg !29
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i49 = icmp eq i32 %384, 0, !dbg !29
  br i1 %.not.i46, label %390, label %385, !dbg !29

385:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %388, label %386, !dbg !29

386:                                              ; preds = %385
  %387 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

388:                                              ; preds = %385
  %389 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

390:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %393, label %391, !dbg !29

391:                                              ; preds = %390
  %392 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

393:                                              ; preds = %390
  %394 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

__nv_sqrtf.exit50:                                ; preds = %386, %388, %391, %393
  %.0.i48 = phi float [ %387, %386 ], [ %389, %388 ], [ %392, %391 ], [ %394, %393 ], !dbg !29
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i51 = icmp eq i32 %395, 0, !dbg !29
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i54 = icmp eq i32 %396, 0, !dbg !29
  br i1 %.not.i51, label %402, label %397, !dbg !29

397:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %400, label %398, !dbg !29

398:                                              ; preds = %397
  %399 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #4, !dbg !29
  br label %__nv_sqrtf.exit55, !dbg !29

400:                                              ; preds = %397
  %401 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #4, !dbg !29
  br label %__nv_sqrtf.exit55, !dbg !29

402:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %405, label %403, !dbg !29

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #4, !dbg !29
  br label %__nv_sqrtf.exit55, !dbg !29

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #4, !dbg !29
  br label %__nv_sqrtf.exit55, !dbg !29

__nv_sqrtf.exit55:                                ; preds = %398, %400, %403, %405
  %.0.i53 = phi float [ %399, %398 ], [ %401, %400 ], [ %404, %403 ], [ %406, %405 ], !dbg !29
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i56 = icmp eq i32 %407, 0, !dbg !29
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i59 = icmp eq i32 %408, 0, !dbg !29
  br i1 %.not.i56, label %414, label %409, !dbg !29

409:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %412, label %410, !dbg !29

410:                                              ; preds = %409
  %411 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #4, !dbg !29
  br label %__nv_sqrtf.exit60, !dbg !29

412:                                              ; preds = %409
  %413 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #4, !dbg !29
  br label %__nv_sqrtf.exit60, !dbg !29

414:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %417, label %415, !dbg !29

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #4, !dbg !29
  br label %__nv_sqrtf.exit60, !dbg !29

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #4, !dbg !29
  br label %__nv_sqrtf.exit60, !dbg !29

__nv_sqrtf.exit60:                                ; preds = %410, %412, %415, %417
  %.0.i58 = phi float [ %411, %410 ], [ %413, %412 ], [ %416, %415 ], [ %418, %417 ], !dbg !29
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i61 = icmp eq i32 %419, 0, !dbg !29
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i64 = icmp eq i32 %420, 0, !dbg !29
  br i1 %.not.i61, label %426, label %421, !dbg !29

421:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %424, label %422, !dbg !29

422:                                              ; preds = %421
  %423 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #4, !dbg !29
  br label %__nv_sqrtf.exit65, !dbg !29

424:                                              ; preds = %421
  %425 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #4, !dbg !29
  br label %__nv_sqrtf.exit65, !dbg !29

426:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %429, label %427, !dbg !29

427:                                              ; preds = %426
  %428 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #4, !dbg !29
  br label %__nv_sqrtf.exit65, !dbg !29

429:                                              ; preds = %426
  %430 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #4, !dbg !29
  br label %__nv_sqrtf.exit65, !dbg !29

__nv_sqrtf.exit65:                                ; preds = %422, %424, %427, %429
  %.0.i63 = phi float [ %423, %422 ], [ %425, %424 ], [ %428, %427 ], [ %430, %429 ], !dbg !29
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i66 = icmp eq i32 %431, 0, !dbg !29
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i69 = icmp eq i32 %432, 0, !dbg !29
  br i1 %.not.i66, label %438, label %433, !dbg !29

433:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %436, label %434, !dbg !29

434:                                              ; preds = %433
  %435 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #4, !dbg !29
  br label %__nv_sqrtf.exit70, !dbg !29

436:                                              ; preds = %433
  %437 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #4, !dbg !29
  br label %__nv_sqrtf.exit70, !dbg !29

438:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %441, label %439, !dbg !29

439:                                              ; preds = %438
  %440 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #4, !dbg !29
  br label %__nv_sqrtf.exit70, !dbg !29

441:                                              ; preds = %438
  %442 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #4, !dbg !29
  br label %__nv_sqrtf.exit70, !dbg !29

__nv_sqrtf.exit70:                                ; preds = %434, %436, %439, %441
  %.0.i68 = phi float [ %435, %434 ], [ %437, %436 ], [ %440, %439 ], [ %442, %441 ], !dbg !29
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i71 = icmp eq i32 %443, 0, !dbg !29
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i74 = icmp eq i32 %444, 0, !dbg !29
  br i1 %.not.i71, label %450, label %445, !dbg !29

445:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %448, label %446, !dbg !29

446:                                              ; preds = %445
  %447 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %262) #4, !dbg !29
  br label %__nv_sqrtf.exit75, !dbg !29

448:                                              ; preds = %445
  %449 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %262) #4, !dbg !29
  br label %__nv_sqrtf.exit75, !dbg !29

450:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %453, label %451, !dbg !29

451:                                              ; preds = %450
  %452 = tail call float @llvm.nvvm.sqrt.rn.f(float %262) #4, !dbg !29
  br label %__nv_sqrtf.exit75, !dbg !29

453:                                              ; preds = %450
  %454 = tail call float @llvm.nvvm.sqrt.approx.f(float %262) #4, !dbg !29
  br label %__nv_sqrtf.exit75, !dbg !29

__nv_sqrtf.exit75:                                ; preds = %446, %448, %451, %453
  %.0.i73 = phi float [ %447, %446 ], [ %449, %448 ], [ %452, %451 ], [ %454, %453 ], !dbg !29
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %.0.i) #4, !dbg !30
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %.0.i3) #4, !dbg !30
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %.0.i8) #4, !dbg !30
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %.0.i13) #4, !dbg !30
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %.0.i18) #4, !dbg !30
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %.0.i23) #4, !dbg !30
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %.0.i28) #4, !dbg !30
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %.0.i33) #4, !dbg !30
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %.0.i38) #4, !dbg !30
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %.0.i43) #4, !dbg !30
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %.0.i48) #4, !dbg !30
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %.0.i53) #4, !dbg !30
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %.0.i58) #4, !dbg !30
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %.0.i63) #4, !dbg !30
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %.0.i68) #4, !dbg !30
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %.0.i73) #4, !dbg !30
  %471 = add i32 %13, %17, !dbg !31
  %472 = shl i32 %471, 2, !dbg !31
  %473 = add i32 %17, %14, !dbg !31
  %474 = shl i32 %473, 2, !dbg !31
  %475 = add i32 %17, %15, !dbg !31
  %476 = shl i32 %475, 2, !dbg !31
  %477 = add i32 %17, %16, !dbg !31
  %478 = shl i32 %477, 2, !dbg !31
  %479 = sext i32 %472 to i64, !dbg !32
  %480 = getelementptr float, ptr addrspace(1) %2, i64 %479, !dbg !32
  %481 = sext i32 %474 to i64, !dbg !32
  %482 = getelementptr float, ptr addrspace(1) %2, i64 %481, !dbg !32
  %483 = sext i32 %476 to i64, !dbg !32
  %484 = getelementptr float, ptr addrspace(1) %2, i64 %483, !dbg !32
  %485 = sext i32 %478 to i64, !dbg !32
  %486 = getelementptr float, ptr addrspace(1) %2, i64 %485, !dbg !32
  %487 = bitcast float %455 to i32, !dbg !33
  %488 = bitcast float %456 to i32, !dbg !33
  %489 = bitcast float %457 to i32, !dbg !33
  %490 = bitcast float %458 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %488, i32 %489, i32 %490, ptr addrspace(1) %480, i1 %22) #4, !dbg !33
  %491 = bitcast float %459 to i32, !dbg !33
  %492 = bitcast float %460 to i32, !dbg !33
  %493 = bitcast float %461 to i32, !dbg !33
  %494 = bitcast float %462 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %491, i32 %492, i32 %493, i32 %494, ptr addrspace(1) %482, i1 %22) #4, !dbg !33
  %495 = bitcast float %463 to i32, !dbg !33
  %496 = bitcast float %464 to i32, !dbg !33
  %497 = bitcast float %465 to i32, !dbg !33
  %498 = bitcast float %466 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %495, i32 %496, i32 %497, i32 %498, ptr addrspace(1) %484, i1 %22) #4, !dbg !33
  %499 = bitcast float %467 to i32, !dbg !33
  %500 = bitcast float %468 to i32, !dbg !33
  %501 = bitcast float %469 to i32, !dbg !33
  %502 = bitcast float %470 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %499, i32 %500, i32 %501, i32 %502, ptr addrspace(1) %486, i1 %22) #4, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csqhdkeyr4yptxfqzkahnkfmiwkkuuys3r6oeketbvdgujvlhjcv.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused_div_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_22", linkageName: "triton_poi_fused_div_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 42, scope: !7)
!29 = !DILocation(line: 34, column: 26, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 43, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
