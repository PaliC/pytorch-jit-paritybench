; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 1024, !dbg !14
  %12 = sdiv i32 %9, 4, !dbg !15
  %13 = srem i32 %10, 4, !dbg !16
  %14 = sext i32 %9 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !18
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %19 = bitcast i32 %17 to float, !dbg !18
  %20 = bitcast i32 %18 to float, !dbg !18
  %21 = shl nsw i32 %13, 1, !dbg !19
  %22 = icmp sgt i32 %13, 0, !dbg !20
  %23 = shl i32 %12, 4, !dbg !21
  %24 = add i32 %23, %21, !dbg !22
  %25 = add i32 %24, -9, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = icmp sgt i32 %13, -1, !dbg !25
  %29 = add i32 %24, -8, !dbg !26
  %30 = sext i32 %29 to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !27
  %32 = add i32 %24, -7, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = sext i32 %24 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !30
  %37 = getelementptr i8, ptr addrspace(1) %36, i64 -4, !dbg !30
  %38 = or disjoint i32 %24, 1, !dbg !31
  %39 = sext i32 %38 to i64, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !32
  %41 = add i32 %24, 7, !dbg !33
  %42 = sext i32 %41 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !34
  %44 = add i32 %24, 8, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !36
  %47 = add i32 %24, 9, !dbg !37
  %48 = sext i32 %47 to i64, !dbg !38
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !38
  %50 = mul nsw i32 %13, -2, !dbg !39
  %51 = add nsw i32 %21, 2, !dbg !40
  %52 = shl nsw i32 %13, 2, !dbg !41
  %53 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %54 = insertelement <2 x i32> %53, i32 %12, i64 1, !dbg !16
  %55 = srem <2 x i32> %54, splat (i32 4), !dbg !16
  %56 = extractelement <2 x i32> %55, i64 1, !dbg !42
  %57 = shl nsw i32 %56, 1, !dbg !43
  %58 = icmp sgt i32 %56, 0, !dbg !44
  %59 = extractelement <2 x i32> %55, i64 0, !dbg !41
  %60 = shl nsw i32 %59, 1, !dbg !19
  %61 = icmp sgt i32 %59, 0, !dbg !20
  %62 = and i1 %61, %58, !dbg !45
  %63 = and i1 %22, %58, !dbg !45
  %64 = add i32 %23, %60, !dbg !22
  %65 = add i32 %64, -9, !dbg !23
  %66 = sext i32 %65 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !24
  %68 = and i1 %11, %62, !dbg !46
  %69 = and i1 %11, %63, !dbg !46
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 0, i1 %68) #1, !dbg !47
  %71 = bitcast i32 %70 to float, !dbg !47
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %69, i32 0, i1 %69) #1, !dbg !47
  %73 = bitcast i32 %72 to float, !dbg !47
  %74 = icmp sgt i32 %59, -1, !dbg !25
  %75 = and i1 %74, %58, !dbg !48
  %76 = and i1 %28, %58, !dbg !48
  %77 = add i32 %64, -8, !dbg !26
  %78 = sext i32 %77 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !27
  %80 = and i1 %11, %75, !dbg !49
  %81 = and i1 %11, %76, !dbg !49
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80) #1, !dbg !50
  %83 = bitcast i32 %82 to float, !dbg !50
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %81, i32 0, i1 %81) #1, !dbg !50
  %85 = bitcast i32 %84 to float, !dbg !50
  %86 = fadd float %71, %83, !dbg !51
  %87 = fadd float %73, %85, !dbg !51
  %88 = add i32 %64, -7, !dbg !28
  %89 = sext i32 %88 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %80, i32 0, i1 %80) #1, !dbg !52
  %92 = bitcast i32 %91 to float, !dbg !52
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %81, i32 0, i1 %81) #1, !dbg !52
  %94 = bitcast i32 %93 to float, !dbg !52
  %95 = fadd float %86, %92, !dbg !53
  %96 = fadd float %87, %94, !dbg !53
  %97 = icmp sgt i32 %56, -1, !dbg !54
  %98 = and i1 %61, %97, !dbg !55
  %99 = and i1 %22, %97, !dbg !55
  %100 = add i32 %64, -1, !dbg !56
  %101 = sext i32 %100 to i64, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !30
  %103 = and i1 %11, %98, !dbg !57
  %104 = and i1 %11, %99, !dbg !57
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %103, i32 0, i1 %103) #1, !dbg !58
  %106 = bitcast i32 %105 to float, !dbg !58
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %104, i32 0, i1 %104) #1, !dbg !58
  %108 = bitcast i32 %107 to float, !dbg !58
  %109 = fadd float %95, %106, !dbg !59
  %110 = fadd float %96, %108, !dbg !59
  %111 = or i32 %56, %59, !dbg !42
  %112 = icmp sgt i32 %111, -1, !dbg !42
  %113 = or i32 %56, %13, !dbg !42
  %114 = icmp sgt i32 %113, -1, !dbg !42
  %115 = sext i32 %64 to i64, !dbg !60
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !60
  %117 = and i1 %11, %112, !dbg !61
  %118 = and i1 %11, %114, !dbg !61
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %117, i32 0, i1 %117) #1, !dbg !62
  %120 = bitcast i32 %119 to float, !dbg !62
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %118, i32 0, i1 %118) #1, !dbg !62
  %122 = bitcast i32 %121 to float, !dbg !62
  %123 = fadd float %109, %120, !dbg !63
  %124 = fadd float %110, %122, !dbg !63
  %125 = or disjoint i32 %64, 1, !dbg !31
  %126 = sext i32 %125 to i64, !dbg !32
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %117, i32 0, i1 %117) #1, !dbg !64
  %129 = bitcast i32 %128 to float, !dbg !64
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %118, i32 0, i1 %118) #1, !dbg !64
  %131 = bitcast i32 %130 to float, !dbg !64
  %132 = fadd float %123, %129, !dbg !65
  %133 = fadd float %124, %131, !dbg !65
  %134 = add i32 %64, 7, !dbg !33
  %135 = sext i32 %134 to i64, !dbg !34
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !34
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %103, i32 0, i1 %103) #1, !dbg !66
  %138 = bitcast i32 %137 to float, !dbg !66
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %104, i32 0, i1 %104) #1, !dbg !66
  %140 = bitcast i32 %139 to float, !dbg !66
  %141 = fadd float %132, %138, !dbg !67
  %142 = fadd float %133, %140, !dbg !67
  %143 = add i32 %64, 8, !dbg !35
  %144 = sext i32 %143 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %117, i32 0, i1 %117) #1, !dbg !68
  %147 = bitcast i32 %146 to float, !dbg !68
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %118, i32 0, i1 %118) #1, !dbg !68
  %149 = bitcast i32 %148 to float, !dbg !68
  %150 = fadd float %141, %147, !dbg !69
  %151 = fadd float %142, %149, !dbg !69
  %152 = add i32 %64, 9, !dbg !37
  %153 = sext i32 %152 to i64, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !38
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %117, i32 0, i1 %117) #1, !dbg !70
  %156 = bitcast i32 %155 to float, !dbg !70
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %118, i32 0, i1 %118) #1, !dbg !70
  %158 = bitcast i32 %157 to float, !dbg !70
  %159 = fadd float %150, %156, !dbg !71
  %160 = fadd float %151, %158, !dbg !71
  %161 = mul nsw i32 %56, -2, !dbg !72
  %162 = or disjoint i32 %60, 2, !dbg !40
  %163 = add nsw i32 %57, 2, !dbg !73
  %164 = mul nsw i32 %161, %162, !dbg !74
  %165 = mul nsw i32 %161, %51, !dbg !74
  %166 = shl nsw i32 %59, 2, !dbg !41
  %167 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %166, i64 1, !dbg !39
  %168 = mul nsw <2 x i32> %167, %55, !dbg !39
  %169 = mul nsw i32 %52, %56, !dbg !75
  %170 = extractelement <2 x i32> %168, i64 0, !dbg !76
  %reass.add = add nsw i32 %162, %170
  %reass.mul = mul nsw i32 %reass.add, %163
  %171 = add nsw i32 %163, %161, !dbg !77
  %172 = or disjoint i32 %171, 1, !dbg !78
  %173 = add nsw i32 %172, %170, !dbg !76
  %174 = extractelement <2 x i32> %168, i64 1, !dbg !79
  %175 = add nsw i32 %173, %174, !dbg !79
  %176 = add i32 %175, %162, !dbg !80
  %177 = add i32 %176, %164, !dbg !81
  %178 = add i32 %177, %reass.mul, !dbg !82
  %reass.add1 = add nsw i32 %51, %50
  %reass.mul2 = mul nsw i32 %163, %reass.add1
  %179 = add nsw i32 %172, %50, !dbg !76
  %180 = add nsw i32 %179, %51, !dbg !79
  %181 = add i32 %180, %169, !dbg !80
  %182 = add i32 %181, %165, !dbg !81
  %183 = add i32 %182, %reass.mul2, !dbg !82
  %184 = sitofp i32 %178 to float, !dbg !83
  %185 = sitofp i32 %183 to float, !dbg !83
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %184) #1, !dbg !83
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %185) #1, !dbg !83
  %188 = fadd float %186, %19, !dbg !84
  %189 = fadd float %187, %20, !dbg !84
  %190 = bitcast float %188 to i32, !dbg !85
  %191 = bitcast float %189 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %191, ptr addrspace(1) %15, i1 %11) #1, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckkqqa3amlotvo6zgqcccoydkjb2v5ccgbzrblhgpss3ol3g76w6.py", directory: "inductor_cache/kk")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_34", linkageName: "triton_poi_fused_add_avg_pool2d_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 35, column: 20, scope: !7)
!20 = !DILocation(line: 36, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 48, scope: !7)
!22 = !DILocation(line: 40, column: 38, scope: !7)
!23 = !DILocation(line: 40, column: 45, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 42, column: 21, scope: !7)
!26 = !DILocation(line: 46, column: 45, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 53, column: 45, scope: !7)
!29 = !DILocation(line: 53, column: 31, scope: !7)
!30 = !DILocation(line: 60, column: 31, scope: !7)
!31 = !DILocation(line: 66, column: 42, scope: !7)
!32 = !DILocation(line: 66, column: 31, scope: !7)
!33 = !DILocation(line: 73, column: 42, scope: !7)
!34 = !DILocation(line: 73, column: 31, scope: !7)
!35 = !DILocation(line: 76, column: 42, scope: !7)
!36 = !DILocation(line: 76, column: 31, scope: !7)
!37 = !DILocation(line: 79, column: 42, scope: !7)
!38 = !DILocation(line: 79, column: 31, scope: !7)
!39 = !DILocation(line: 81, column: 22, scope: !7)
!40 = !DILocation(line: 81, column: 60, scope: !7)
!41 = !DILocation(line: 81, column: 316, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 29, column: 20, scope: !7)
!44 = !DILocation(line: 31, column: 19, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 61, scope: !7)
!47 = !DILocation(line: 40, column: 53, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 61, scope: !7)
!50 = !DILocation(line: 46, column: 53, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 53, scope: !7)
!53 = !DILocation(line: 54, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 21, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 45, scope: !7)
!57 = !DILocation(line: 60, column: 61, scope: !7)
!58 = !DILocation(line: 60, column: 53, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 31, scope: !7)
!61 = !DILocation(line: 63, column: 54, scope: !7)
!62 = !DILocation(line: 63, column: 46, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 50, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 50, scope: !7)
!67 = !DILocation(line: 74, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 50, scope: !7)
!69 = !DILocation(line: 77, column: 20, scope: !7)
!70 = !DILocation(line: 79, column: 50, scope: !7)
!71 = !DILocation(line: 80, column: 20, scope: !7)
!72 = !DILocation(line: 81, column: 34, scope: !7)
!73 = !DILocation(line: 81, column: 122, scope: !7)
!74 = !DILocation(line: 81, column: 250, scope: !7)
!75 = !DILocation(line: 81, column: 319, scope: !7)
!76 = !DILocation(line: 81, column: 167, scope: !7)
!77 = !DILocation(line: 81, column: 29, scope: !7)
!78 = !DILocation(line: 81, column: 40, scope: !7)
!79 = !DILocation(line: 81, column: 241, scope: !7)
!80 = !DILocation(line: 81, column: 314, scope: !7)
!81 = !DILocation(line: 81, column: 325, scope: !7)
!82 = !DILocation(line: 81, column: 389, scope: !7)
!83 = !DILocation(line: 82, column: 20, scope: !7)
!84 = !DILocation(line: 83, column: 20, scope: !7)
!85 = !DILocation(line: 84, column: 40, scope: !7)
!86 = !DILocation(line: 84, column: 4, scope: !7)
