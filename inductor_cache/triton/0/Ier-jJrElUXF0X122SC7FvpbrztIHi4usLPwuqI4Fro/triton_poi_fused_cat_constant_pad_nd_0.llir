; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_constant_pad_nd_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 800, !dbg !14
  %10 = sdiv i32 %8, 10, !dbg !15
  %11 = sdiv i32 %8, 100, !dbg !16
  %12 = srem i32 %11, 2, !dbg !17
  %13 = sdiv i32 %8, 200, !dbg !18
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !19
  %15 = insertelement <2 x i32> %14, i32 %8, i64 1, !dbg !19
  %16 = srem <2 x i32> %15, splat (i32 10), !dbg !19
  %17 = add nsw <2 x i32> %16, splat (i32 -3), !dbg !20
  %shift = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %18 = or <2 x i32> %17, %shift, !dbg !21
  %19 = extractelement <2 x i32> %18, i64 0, !dbg !21
  %20 = icmp ult i32 %19, 4, !dbg !21
  %21 = icmp slt i32 %12, 1, !dbg !22
  %22 = and i1 %21, %20, !dbg !23
  %23 = extractelement <2 x i32> %16, i64 0, !dbg !24
  %24 = shl nsw i32 %23, 2, !dbg !24
  %25 = shl nsw i32 %13, 6, !dbg !25
  %26 = extractelement <2 x i32> %16, i64 1, !dbg !26
  %27 = add nsw i32 %25, %26, !dbg !26
  %28 = add nsw i32 %27, -15, !dbg !27
  %29 = add nsw i32 %28, %24, !dbg !28
  %30 = sext i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !29
  %32 = and i1 %9, %22, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #1, !dbg !31
  %34 = bitcast i32 %33 to float, !dbg !31
  %35 = add nsw i32 %27, 1, !dbg !32
  %36 = add nsw i32 %35, %24, !dbg !33
  %37 = sext i32 %36 to i64, !dbg !34
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !34
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %32, i32 0, i1 %32) #1, !dbg !35
  %40 = bitcast i32 %39 to float, !dbg !35
  %41 = fadd float %34, %40, !dbg !36
  %42 = add nsw i32 %27, 17, !dbg !37
  %43 = add nsw i32 %42, %24, !dbg !38
  %44 = sext i32 %43 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !39
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %32, i32 0, i1 %32) #1, !dbg !40
  %47 = bitcast i32 %46 to float, !dbg !40
  %48 = fadd float %41, %47, !dbg !41
  %49 = add nsw i32 %27, 33, !dbg !42
  %50 = add nsw i32 %49, %24, !dbg !43
  %51 = sext i32 %50 to i64, !dbg !44
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !44
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %32, i32 0, i1 %32) #1, !dbg !45
  %54 = bitcast i32 %53 to float, !dbg !45
  %55 = fadd float %48, %54, !dbg !46
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 4.000000e+00) #1, !dbg !47
  %57 = select i1 %22, float %56, float 0.000000e+00, !dbg !48
  %58 = icmp sgt i32 %12, 0, !dbg !49
  %59 = and i1 %58, %20, !dbg !50
  %60 = and i1 %9, %59, !dbg !51
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %60, i32 0, i1 %60) #1, !dbg !52
  %62 = bitcast i32 %61 to float, !dbg !52
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %60, i32 0, i1 %60) #1, !dbg !53
  %64 = bitcast i32 %63 to float, !dbg !53
  %65 = fcmp ogt float %62, %64, !dbg !54
  %66 = fcmp uno float %62, 0.000000e+00, !dbg !58
  %67 = or i1 %66, %65, !dbg !59
  %68 = select i1 %67, float %62, float %64, !dbg !60
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %60, i32 0, i1 %60) #1, !dbg !61
  %70 = bitcast i32 %69 to float, !dbg !61
  %71 = fcmp ogt float %68, %70, !dbg !62
  %72 = fcmp uno float %68, 0.000000e+00, !dbg !64
  %73 = or i1 %71, %72, !dbg !65
  %74 = select i1 %73, float %68, float %70, !dbg !66
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %60, i32 0, i1 %60) #1, !dbg !67
  %76 = bitcast i32 %75 to float, !dbg !67
  %77 = fcmp ogt float %74, %76, !dbg !68
  %78 = fcmp uno float %74, 0.000000e+00, !dbg !70
  %79 = or i1 %77, %78, !dbg !71
  %80 = select i1 %79, float %74, float %76, !dbg !72
  %81 = select i1 %59, float %80, float 0.000000e+00, !dbg !73
  %82 = select i1 %21, float %57, float %81, !dbg !74
  %83 = sext i32 %8 to i64, !dbg !75
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !75
  %85 = bitcast float %82 to i32, !dbg !76
  %86 = select i1 %20, i32 %85, i32 0, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %84, i1 %9) #1, !dbg !76
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdqlqr7z7qqfrezhsu2pqwvfrc5torqiw4qhaudiw6vy4tc2rpvy.py", directory: "inductor_cache/dq")
!4 = !{ptr @triton_poi_fused_cat_constant_pad_nd_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_constant_pad_nd_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_constant_pad_nd_0", linkageName: "triton_poi_fused_cat_constant_pad_nd_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 24, column: 27, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 39, column: 19, scope: !7)
!22 = !DILocation(line: 44, column: 20, scope: !7)
!23 = !DILocation(line: 45, column: 20, scope: !7)
!24 = !DILocation(line: 46, column: 46, scope: !7)
!25 = !DILocation(line: 46, column: 54, scope: !7)
!26 = !DILocation(line: 46, column: 39, scope: !7)
!27 = !DILocation(line: 46, column: 44, scope: !7)
!28 = !DILocation(line: 46, column: 51, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 67, scope: !7)
!31 = !DILocation(line: 46, column: 59, scope: !7)
!32 = !DILocation(line: 47, column: 40, scope: !7)
!33 = !DILocation(line: 47, column: 47, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 55, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 41, scope: !7)
!38 = !DILocation(line: 49, column: 48, scope: !7)
!39 = !DILocation(line: 49, column: 31, scope: !7)
!40 = !DILocation(line: 49, column: 56, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 41, scope: !7)
!43 = !DILocation(line: 51, column: 48, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 56, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 57, column: 21, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 67, scope: !7)
!52 = !DILocation(line: 61, column: 59, scope: !7)
!53 = !DILocation(line: 62, column: 55, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 63, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 64, column: 56, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !63)
!63 = !DILocation(line: 65, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 56, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !69)
!69 = !DILocation(line: 67, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !69)
!73 = !DILocation(line: 69, column: 35, scope: !7)
!74 = !DILocation(line: 70, column: 35, scope: !7)
!75 = !DILocation(line: 73, column: 25, scope: !7)
!76 = !DILocation(line: 73, column: 37, scope: !7)
!77 = !DILocation(line: 72, column: 35, scope: !7)
!78 = !DILocation(line: 73, column: 4, scope: !7)
