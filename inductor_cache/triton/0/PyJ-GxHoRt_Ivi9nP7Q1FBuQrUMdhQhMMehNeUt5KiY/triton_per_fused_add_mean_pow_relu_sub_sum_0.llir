; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_pow_relu_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = and i32 %6, 15, !dbg !11
  %10 = shl i32 %6, 2, !dbg !12
  %11 = and i32 %10, 192, !dbg !12
  %12 = or disjoint i32 %11, %9, !dbg !13
  %13 = zext nneg i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !17
  %18 = or disjoint i32 %12, 16, !dbg !18
  %19 = zext nneg i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !22
  %24 = or disjoint i32 %12, 32, !dbg !23
  %25 = zext nneg i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !27
  %30 = or disjoint i32 %12, 48, !dbg !28
  %31 = zext nneg i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !31
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !33
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !34
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !35
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !36
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !37
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !38
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !39
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !40
  %44 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %45 = insertelement <2 x i32> %44, i32 %37, i64 1, !dbg !17
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !17
  %47 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !22
  %48 = insertelement <2 x i32> %47, i32 %39, i64 1, !dbg !22
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !22
  %50 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !27
  %51 = insertelement <2 x i32> %50, i32 %41, i64 1, !dbg !27
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !27
  %53 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !32
  %54 = insertelement <2 x i32> %53, i32 %43, i64 1, !dbg !32
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !32
  %56 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !41
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !41
  %58 = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %59 = fsub <2 x float> %58, %46, !dbg !41
  %60 = fmul <2 x float> %59, %59, !dbg !42
  %61 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !43
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !43
  %63 = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %64 = fsub <2 x float> %63, %49, !dbg !43
  %65 = fmul <2 x float> %64, %64, !dbg !44
  %66 = fadd <2 x float> %60, %65, !dbg !45
  %67 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !46
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !46
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %70 = fsub <2 x float> %69, %52, !dbg !46
  %71 = fmul <2 x float> %70, %70, !dbg !47
  %72 = fadd <2 x float> %66, %71, !dbg !48
  %73 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !49
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !49
  %75 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %76 = fsub <2 x float> %75, %55, !dbg !49
  %77 = fmul <2 x float> %76, %76, !dbg !50
  %78 = fadd <2 x float> %72, %77, !dbg !51
  %shift = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %79 = fsub <2 x float> %78, %shift, !dbg !52
  %80 = extractelement <2 x float> %79, i64 0, !dbg !52
  %81 = fadd float %80, 4.000000e+00, !dbg !53
  %82 = fcmp olt float %81, 0.000000e+00, !dbg !54
  %83 = select i1 %82, float 0.000000e+00, float %81, !dbg !58
  %84 = bitcast float %83 to i32, !dbg !59
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !59
  %86 = bitcast i32 %85 to float, !dbg !59
  %87 = fadd float %83, %86, !dbg !63
  %88 = bitcast float %87 to i32, !dbg !59
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !59
  %90 = bitcast i32 %89 to float, !dbg !59
  %91 = fadd float %87, %90, !dbg !63
  %92 = bitcast float %91 to i32, !dbg !59
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !59
  %94 = bitcast i32 %93 to float, !dbg !59
  %95 = fadd float %91, %94, !dbg !63
  %96 = bitcast float %95 to i32, !dbg !59
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !59
  %98 = bitcast i32 %97 to float, !dbg !59
  %99 = fadd float %95, %98, !dbg !63
  %100 = bitcast float %99 to i32, !dbg !59
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !59
  %102 = bitcast i32 %101 to float, !dbg !59
  %103 = fadd float %99, %102, !dbg !63
  %104 = icmp eq i32 %7, 0, !dbg !59
  %105 = and i32 %8, 1, !dbg !59
  %106 = zext nneg i32 %105 to i64, !dbg !59
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i64 %106, !dbg !59
  %108 = bitcast float %103 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %104) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %109 = icmp slt i32 %6, 2, !dbg !59
  %110 = sext i32 %6 to i64, !dbg !59
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i64 %110, !dbg !59
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %109) #3, !dbg !59
  %113 = bitcast i32 %112 to float, !dbg !59
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !59
  %115 = bitcast i32 %114 to float, !dbg !59
  %116 = fadd float %113, %115, !dbg !63
  %117 = and i32 %6, 1, !dbg !59
  %118 = icmp eq i32 %117, 0, !dbg !59
  %119 = and i1 %109, %118, !dbg !59
  %120 = bitcast float %116 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %120, i1 %119) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %121 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !59
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 6.400000e+01) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %urem = and i32 %6, 63, !dbg !67
  %123 = icmp eq i32 %urem, 0, !dbg !67
  %124 = bitcast float %122 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %0, i1 %123) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqquna2sqdgfisi4hxw7ya5airerzckne6gqcm5d7lfjgqpxga7k.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_per_fused_add_mean_pow_relu_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_pow_relu_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_pow_relu_sub_sum_0", linkageName: "triton_per_fused_add_mean_pow_relu_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 34, column: 40, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 48, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 40, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 41, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 49, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 49, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 49, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 18, scope: !7)
!46 = !DILocation(line: 49, column: 19, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 19, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 70, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!62 = !DILocation(line: 72, column: 26, scope: !7)
!63 = !DILocation(line: 256, column: 15, scope: !64, inlinedAt: !62)
!64 = distinct !DILexicalBlockFile(scope: !60, file: !61, discriminator: 0)
!65 = !DILocation(line: 74, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 4, scope: !7)
!67 = !DILocation(line: 76, column: 71, scope: !7)
!68 = !DILocation(line: 76, column: 4, scope: !7)
