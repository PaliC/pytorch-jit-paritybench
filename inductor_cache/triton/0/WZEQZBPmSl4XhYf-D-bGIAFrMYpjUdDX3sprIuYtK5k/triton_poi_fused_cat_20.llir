; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = icmp slt i32 %12, 75264, !dbg !14
  %15 = icmp slt i32 %13, 75264, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 384, !dbg !15
  %17 = mul i32 %16, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen1, 384, !dbg !15
  %19 = mul i32 %18, 384, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %19, !dbg !16
  %20 = icmp slt i32 %.decomposed, 192, !dbg !17
  %21 = icmp slt i32 %.decomposed2, 192, !dbg !17
  %22 = mul nsw i32 %16, 192, !dbg !18
  %23 = mul nsw i32 %18, 192, !dbg !18
  %24 = add nsw i32 %22, %.decomposed, !dbg !19
  %25 = add nsw i32 %23, %.decomposed2, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = and i1 %14, %20, !dbg !21
  %31 = and i1 %15, %21, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = sext i32 %.decomposed to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !23
  %44 = sext i32 %.decomposed2 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = icmp sgt i32 %.decomposed, 191, !dbg !25
  %57 = icmp sgt i32 %.decomposed2, 191, !dbg !25
  %58 = add nsw i32 %.decomposed, -192, !dbg !26
  %59 = add nsw i32 %.decomposed2, -192, !dbg !26
  %60 = add nsw i32 %22, %58, !dbg !27
  %61 = add nsw i32 %23, %59, !dbg !27
  %62 = sext i32 %60 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !28
  %64 = sext i32 %61 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !28
  %66 = and i1 %14, %56, !dbg !29
  %67 = and i1 %15, %57, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #1, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = sext i32 %58 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !31
  %80 = sext i32 %59 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !31
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !32
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #1, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !32
  %92 = insertelement <16 x i32> poison, i32 %77, i64 0, !dbg !30
  %93 = insertelement <16 x i32> %92, i32 %76, i64 1, !dbg !30
  %94 = insertelement <16 x i32> %93, i32 %75, i64 2, !dbg !30
  %95 = insertelement <16 x i32> %94, i32 %74, i64 3, !dbg !30
  %96 = insertelement <16 x i32> %95, i32 %72, i64 4, !dbg !30
  %97 = insertelement <16 x i32> %96, i32 %71, i64 5, !dbg !30
  %98 = insertelement <16 x i32> %97, i32 %70, i64 6, !dbg !30
  %99 = insertelement <16 x i32> %98, i32 %69, i64 7, !dbg !30
  %100 = insertelement <16 x i32> %99, i32 %41, i64 8, !dbg !30
  %101 = insertelement <16 x i32> %100, i32 %40, i64 9, !dbg !30
  %102 = insertelement <16 x i32> %101, i32 %39, i64 10, !dbg !30
  %103 = insertelement <16 x i32> %102, i32 %38, i64 11, !dbg !30
  %104 = insertelement <16 x i32> %103, i32 %36, i64 12, !dbg !30
  %105 = insertelement <16 x i32> %104, i32 %35, i64 13, !dbg !30
  %106 = insertelement <16 x i32> %105, i32 %34, i64 14, !dbg !30
  %107 = insertelement <16 x i32> %106, i32 %33, i64 15, !dbg !30
  %108 = bitcast <16 x i32> %107 to <16 x float>, !dbg !30
  %109 = insertelement <16 x i32> poison, i32 %91, i64 0, !dbg !32
  %110 = insertelement <16 x i32> %109, i32 %90, i64 1, !dbg !32
  %111 = insertelement <16 x i32> %110, i32 %89, i64 2, !dbg !32
  %112 = insertelement <16 x i32> %111, i32 %88, i64 3, !dbg !32
  %113 = insertelement <16 x i32> %112, i32 %86, i64 4, !dbg !32
  %114 = insertelement <16 x i32> %113, i32 %85, i64 5, !dbg !32
  %115 = insertelement <16 x i32> %114, i32 %84, i64 6, !dbg !32
  %116 = insertelement <16 x i32> %115, i32 %83, i64 7, !dbg !32
  %117 = insertelement <16 x i32> %116, i32 %55, i64 8, !dbg !32
  %118 = insertelement <16 x i32> %117, i32 %54, i64 9, !dbg !32
  %119 = insertelement <16 x i32> %118, i32 %53, i64 10, !dbg !32
  %120 = insertelement <16 x i32> %119, i32 %52, i64 11, !dbg !32
  %121 = insertelement <16 x i32> %120, i32 %50, i64 12, !dbg !32
  %122 = insertelement <16 x i32> %121, i32 %49, i64 13, !dbg !32
  %123 = insertelement <16 x i32> %122, i32 %48, i64 14, !dbg !32
  %124 = insertelement <16 x i32> %123, i32 %47, i64 15, !dbg !32
  %125 = bitcast <16 x i32> %124 to <16 x float>, !dbg !32
  %126 = fadd <16 x float> %108, %125, !dbg !33
  %127 = fcmp olt <16 x float> %126, zeroinitializer, !dbg !34
  %128 = extractelement <16 x i1> %127, i64 15, !dbg !38
  %129 = extractelement <16 x float> %126, i64 15, !dbg !38
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !38
  %131 = extractelement <16 x i1> %127, i64 14, !dbg !38
  %132 = extractelement <16 x float> %126, i64 14, !dbg !38
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !38
  %134 = extractelement <16 x i1> %127, i64 13, !dbg !38
  %135 = extractelement <16 x float> %126, i64 13, !dbg !38
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !38
  %137 = extractelement <16 x i1> %127, i64 12, !dbg !38
  %138 = extractelement <16 x float> %126, i64 12, !dbg !38
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !38
  %140 = extractelement <16 x i1> %127, i64 11, !dbg !38
  %141 = extractelement <16 x float> %126, i64 11, !dbg !38
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !38
  %143 = extractelement <16 x i1> %127, i64 10, !dbg !38
  %144 = extractelement <16 x float> %126, i64 10, !dbg !38
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !38
  %146 = extractelement <16 x i1> %127, i64 9, !dbg !38
  %147 = extractelement <16 x float> %126, i64 9, !dbg !38
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !38
  %149 = extractelement <16 x i1> %127, i64 8, !dbg !38
  %150 = extractelement <16 x float> %126, i64 8, !dbg !38
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !38
  %152 = extractelement <16 x i1> %127, i64 7, !dbg !40
  %153 = extractelement <16 x float> %126, i64 7, !dbg !40
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !40
  %155 = extractelement <16 x i1> %127, i64 6, !dbg !40
  %156 = extractelement <16 x float> %126, i64 6, !dbg !40
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !40
  %158 = extractelement <16 x i1> %127, i64 5, !dbg !40
  %159 = extractelement <16 x float> %126, i64 5, !dbg !40
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !40
  %161 = extractelement <16 x i1> %127, i64 4, !dbg !40
  %162 = extractelement <16 x float> %126, i64 4, !dbg !40
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !40
  %164 = extractelement <16 x i1> %127, i64 3, !dbg !40
  %165 = extractelement <16 x float> %126, i64 3, !dbg !40
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !40
  %167 = extractelement <16 x i1> %127, i64 2, !dbg !40
  %168 = extractelement <16 x float> %126, i64 2, !dbg !40
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !40
  %170 = extractelement <16 x i1> %127, i64 1, !dbg !40
  %171 = extractelement <16 x float> %126, i64 1, !dbg !40
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !40
  %173 = extractelement <16 x i1> %127, i64 0, !dbg !40
  %174 = extractelement <16 x float> %126, i64 0, !dbg !40
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !40
  %176 = select i1 %20, float %130, float %154, !dbg !41
  %177 = select i1 %20, float %133, float %157, !dbg !41
  %178 = select i1 %20, float %136, float %160, !dbg !41
  %179 = select i1 %20, float %139, float %163, !dbg !41
  %180 = select i1 %21, float %142, float %166, !dbg !41
  %181 = select i1 %21, float %145, float %169, !dbg !41
  %182 = select i1 %21, float %148, float %172, !dbg !41
  %183 = select i1 %21, float %151, float %175, !dbg !41
  %184 = sext i32 %12 to i64, !dbg !42
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !42
  %186 = sext i32 %13 to i64, !dbg !42
  %187 = getelementptr float, ptr addrspace(1) %4, i64 %186, !dbg !42
  %188 = bitcast float %176 to i32, !dbg !43
  %189 = bitcast float %177 to i32, !dbg !43
  %190 = bitcast float %178 to i32, !dbg !43
  %191 = bitcast float %179 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %185, i1 %14) #1, !dbg !43
  %192 = bitcast float %180 to i32, !dbg !43
  %193 = bitcast float %181 to i32, !dbg !43
  %194 = bitcast float %182 to i32, !dbg !43
  %195 = bitcast float %183 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %187, i1 %15) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c62x7q6wlfiksto7dnsvhaajik7fvek2rmvnhdsc45g5clorhl6t.py", directory: "inductor_cache/62")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 50, scope: !7)
!27 = !DILocation(line: 42, column: 41, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 64, scope: !7)
!30 = !DILocation(line: 42, column: 56, scope: !7)
!31 = !DILocation(line: 43, column: 31, scope: !7)
!32 = !DILocation(line: 43, column: 45, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 46, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 36, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 37, scope: !7)
!44 = !DILocation(line: 50, column: 4, scope: !7)
