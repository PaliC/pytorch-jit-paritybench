; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 63, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 64, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %13 = icmp slt i32 %11, 256, !dbg !14
  %14 = shl i32 %7, 2, !dbg !15
  %15 = and i32 %14, 12, !dbg !15
  %16 = shl i32 %10, 4, !dbg !16
  %17 = shl i32 %11, 4, !dbg !16
  %18 = or disjoint i32 %16, %15, !dbg !17
  %19 = or disjoint i32 %17, %15, !dbg !17
  %20 = sext i32 %18 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #2, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #2, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %38 = bitcast i32 %34 to float, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = fcmp oge float %43, 0.000000e+00, !dbg !21
  %45 = select i1 %44, float 1.000000e+00, float -1.000000e+00, !dbg !22
  %46 = fmul float %45, %29, !dbg !23
  %47 = fmul float %45, %30, !dbg !23
  %48 = fmul float %45, %31, !dbg !23
  %49 = fmul float %45, %32, !dbg !23
  %50 = fmul float %45, %38, !dbg !23
  %51 = fmul float %45, %39, !dbg !23
  %52 = fmul float %45, %40, !dbg !23
  %53 = fmul float %45, %41, !dbg !23
  %54 = select i1 %12, float %46, float 0xFFF0000000000000, !dbg !24
  %55 = select i1 %12, float %47, float 0xFFF0000000000000, !dbg !24
  %56 = select i1 %12, float %48, float 0xFFF0000000000000, !dbg !24
  %57 = select i1 %12, float %49, float 0xFFF0000000000000, !dbg !24
  %58 = select i1 %13, float %50, float 0xFFF0000000000000, !dbg !24
  %59 = select i1 %13, float %51, float 0xFFF0000000000000, !dbg !24
  %60 = select i1 %13, float %52, float 0xFFF0000000000000, !dbg !24
  %61 = select i1 %13, float %53, float 0xFFF0000000000000, !dbg !24
  %62 = fcmp ogt float %54, %55, !dbg !25
  %63 = fcmp uno float %54, 0.000000e+00, !dbg !30
  %64 = or i1 %62, %63, !dbg !31
  %65 = select i1 %64, float %54, float %55, !dbg !32
  %66 = fcmp ogt float %65, %56, !dbg !25
  %67 = fcmp uno float %65, 0.000000e+00, !dbg !30
  %68 = or i1 %66, %67, !dbg !31
  %69 = select i1 %68, float %65, float %56, !dbg !32
  %70 = fcmp ogt float %69, %57, !dbg !25
  %71 = fcmp uno float %69, 0.000000e+00, !dbg !30
  %72 = or i1 %70, %71, !dbg !31
  %73 = select i1 %72, float %69, float %57, !dbg !32
  %74 = fcmp ogt float %58, %59, !dbg !25
  %75 = fcmp uno float %58, 0.000000e+00, !dbg !30
  %76 = or i1 %74, %75, !dbg !31
  %77 = select i1 %76, float %58, float %59, !dbg !32
  %78 = fcmp ogt float %77, %60, !dbg !25
  %79 = fcmp uno float %77, 0.000000e+00, !dbg !30
  %80 = or i1 %78, %79, !dbg !31
  %81 = select i1 %80, float %77, float %60, !dbg !32
  %82 = fcmp ogt float %81, %61, !dbg !25
  %83 = fcmp uno float %81, 0.000000e+00, !dbg !30
  %84 = or i1 %82, %83, !dbg !31
  %85 = select i1 %84, float %81, float %61, !dbg !32
  %86 = bitcast float %73 to i32, !dbg !33
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !33
  %88 = bitcast i32 %87 to float, !dbg !33
  %89 = fcmp ogt float %73, %88, !dbg !25
  %90 = fcmp uno float %73, 0.000000e+00, !dbg !30
  %91 = or i1 %89, %90, !dbg !31
  %92 = select i1 %91, float %73, float %88, !dbg !32
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fcmp ogt float %92, %95, !dbg !25
  %97 = fcmp uno float %92, 0.000000e+00, !dbg !30
  %98 = or i1 %96, %97, !dbg !31
  %99 = select i1 %98, float %92, float %95, !dbg !32
  %100 = bitcast float %85 to i32, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = fcmp ogt float %85, %102, !dbg !25
  %104 = fcmp uno float %85, 0.000000e+00, !dbg !30
  %105 = or i1 %103, %104, !dbg !31
  %106 = select i1 %105, float %85, float %102, !dbg !32
  %107 = bitcast float %106 to i32, !dbg !33
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = fcmp ogt float %106, %109, !dbg !25
  %111 = fcmp uno float %106, 0.000000e+00, !dbg !30
  %112 = or i1 %110, %111, !dbg !31
  %113 = select i1 %112, float %106, float %109, !dbg !32
  %114 = fsub float %46, %99, !dbg !34
  %115 = fsub float %47, %99, !dbg !34
  %116 = fsub float %48, %99, !dbg !34
  %117 = fsub float %49, %99, !dbg !34
  %118 = fsub float %50, %113, !dbg !34
  %119 = fsub float %51, %113, !dbg !34
  %120 = fsub float %52, %113, !dbg !34
  %121 = fsub float %53, %113, !dbg !34
  %122 = fmul float %45, %43, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %122) #2, !dbg !36
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %122) #2, !dbg !36
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %122) #2, !dbg !36
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %122) #2, !dbg !36
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #2, !dbg !36
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %122) #2, !dbg !36
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %122) #2, !dbg !36
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %122) #2, !dbg !36
  %131 = fmul float %123, 0x3FF7154760000000, !dbg !37
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #2, !dbg !37
  %133 = fmul float %124, 0x3FF7154760000000, !dbg !37
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #2, !dbg !37
  %135 = fmul float %125, 0x3FF7154760000000, !dbg !37
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #2, !dbg !37
  %137 = fmul float %126, 0x3FF7154760000000, !dbg !37
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #2, !dbg !37
  %139 = fmul float %127, 0x3FF7154760000000, !dbg !37
  %140 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %139) #2, !dbg !37
  %141 = fmul float %128, 0x3FF7154760000000, !dbg !37
  %142 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %141) #2, !dbg !37
  %143 = fmul float %129, 0x3FF7154760000000, !dbg !37
  %144 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %143) #2, !dbg !37
  %145 = fmul float %130, 0x3FF7154760000000, !dbg !37
  %146 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %145) #2, !dbg !37
  %147 = fadd float %132, %134, !dbg !38
  %148 = fadd float %147, %136, !dbg !38
  %149 = fadd float %148, %138, !dbg !38
  %150 = select i1 %12, float %149, float 0.000000e+00, !dbg !38
  %151 = fadd float %140, %142, !dbg !38
  %152 = fadd float %151, %144, !dbg !38
  %153 = fadd float %152, %146, !dbg !38
  %154 = select i1 %13, float %153, float 0.000000e+00, !dbg !38
  %155 = bitcast float %150 to i32, !dbg !43
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = fadd float %150, %157, !dbg !38
  %159 = bitcast float %158 to i32, !dbg !43
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = fadd float %158, %161, !dbg !38
  %163 = bitcast float %154 to i32, !dbg !43
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = fadd float %154, %165, !dbg !38
  %167 = bitcast float %166 to i32, !dbg !43
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !43
  %169 = bitcast i32 %168 to float, !dbg !43
  %170 = fadd float %166, %169, !dbg !38
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %162) #2, !dbg !44
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %162) #2, !dbg !44
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %162) #2, !dbg !44
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %162) #2, !dbg !44
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %170) #2, !dbg !44
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %170) #2, !dbg !44
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %170) #2, !dbg !44
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %170) #2, !dbg !44
  %179 = bitcast float %171 to i32, !dbg !45
  %180 = bitcast float %172 to i32, !dbg !45
  %181 = bitcast float %173 to i32, !dbg !45
  %182 = bitcast float %174 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %21, i1 %12) #2, !dbg !45
  %183 = bitcast float %175 to i32, !dbg !45
  %184 = bitcast float %176 to i32, !dbg !45
  %185 = bitcast float %177 to i32, !dbg !45
  %186 = bitcast float %178 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %184, i32 %185, i32 %186, ptr addrspace(1) %23, i1 %13) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c36th37g4qtvxricdofulydbooxq3b5mj6ifc7gpqiayjp34xk2v.py", directory: "inductor_cache/36")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 32, scope: !7)
!23 = !DILocation(line: 39, column: 18, scope: !7)
!24 = !DILocation(line: 41, column: 34, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 42, column: 39, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !29)
!33 = !DILocation(line: 131, column: 29, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 49, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 48, scope: !7)
!46 = !DILocation(line: 51, column: 4, scope: !7)
