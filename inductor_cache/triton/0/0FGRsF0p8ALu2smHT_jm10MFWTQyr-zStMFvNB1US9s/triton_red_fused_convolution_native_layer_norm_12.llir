; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit2 = lshr i32 %12, 4, !dbg !12
  %13 = and i32 %.lobit2, 31, !dbg !12
  %14 = or disjoint i32 %13, 32, !dbg !12
  %15 = and i32 %12, 63, !dbg !12
  %16 = or disjoint i32 %11, %13, !dbg !13
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = shl i32 %12, 2, !dbg !15
  %22 = and i32 %21, 60, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %23 = sdiv i32 %.frozen, 8, !dbg !16
  %24 = srem i32 %23, 8, !dbg !17
  %25 = mul i32 %16, 192, !dbg !18
  %26 = mul i32 %17, 192, !dbg !18
  %27 = zext nneg i32 %22 to i64, !dbg !19
  br label %28, !dbg !19

28:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %9 ], [ %187, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %188, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %9 ], [ %194, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %9 ], [ %179, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %9 ], [ %180, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %9 ], [ %181, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %9 ], [ %182, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %9 ], [ %183, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %9 ], [ %184, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %9 ], [ %185, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %9 ], [ %186, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %9 ], [ %171, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %9 ], [ %172, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %9 ], [ %173, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %9 ], [ %174, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %9 ], [ %175, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %176, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %177, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %178, %._crit_edge ]
  %53 = or disjoint i64 %indvars.iv, %27, !dbg !20
  %54 = trunc nuw nsw i64 %53 to i32, !dbg !21
  %55 = add i32 %25, %54, !dbg !21
  %56 = add i32 %26, %54, !dbg !21
  %57 = sext i32 %55 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %56 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = fadd float %66, %85, !dbg !26
  %90 = fadd float %67, %86, !dbg !26
  %91 = fadd float %68, %87, !dbg !26
  %92 = fadd float %69, %88, !dbg !26
  %93 = fadd float %75, %85, !dbg !26
  %94 = fadd float %76, %86, !dbg !26
  %95 = fadd float %77, %87, !dbg !26
  %96 = fadd float %78, %88, !dbg !26
  %97 = icmp eq i64 %indvars.iv, 0, !dbg !27
  br i1 %97, label %._crit_edge, label %98, !dbg !28

98:                                               ; preds = %28
  %99 = fsub float %89, %45, !dbg !32
  %100 = fsub float %90, %46, !dbg !32
  %101 = fsub float %91, %47, !dbg !32
  %102 = fsub float %92, %48, !dbg !32
  %103 = fsub float %93, %49, !dbg !32
  %104 = fsub float %94, %50, !dbg !32
  %105 = fsub float %95, %51, !dbg !32
  %106 = fsub float %96, %52, !dbg !32
  %107 = fadd float %29, 1.000000e+00, !dbg !33
  %108 = fadd float %30, 1.000000e+00, !dbg !33
  %109 = fadd float %31, 1.000000e+00, !dbg !33
  %110 = fadd float %32, 1.000000e+00, !dbg !33
  %111 = fadd float %33, 1.000000e+00, !dbg !33
  %112 = fadd float %34, 1.000000e+00, !dbg !33
  %113 = fadd float %35, 1.000000e+00, !dbg !33
  %114 = fadd float %36, 1.000000e+00, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %107) #5, !dbg !34
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %108) #5, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %109) #5, !dbg !34
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %110) #5, !dbg !34
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %111) #5, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %112) #5, !dbg !34
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %113) #5, !dbg !34
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #5, !dbg !34
  %123 = fadd float %45, %115, !dbg !35
  %124 = fadd float %46, %116, !dbg !35
  %125 = fadd float %47, %117, !dbg !35
  %126 = fadd float %48, %118, !dbg !35
  %127 = fadd float %49, %119, !dbg !35
  %128 = fadd float %50, %120, !dbg !35
  %129 = fadd float %51, %121, !dbg !35
  %130 = fadd float %52, %122, !dbg !35
  %131 = fsub float %89, %123, !dbg !36
  %132 = fsub float %90, %124, !dbg !36
  %133 = fsub float %91, %125, !dbg !36
  %134 = fsub float %92, %126, !dbg !36
  %135 = fsub float %93, %127, !dbg !36
  %136 = fsub float %94, %128, !dbg !36
  %137 = fsub float %95, %129, !dbg !36
  %138 = fsub float %96, %130, !dbg !36
  %139 = fmul float %99, %131, !dbg !37
  %140 = fmul float %100, %132, !dbg !37
  %141 = fmul float %101, %133, !dbg !37
  %142 = fmul float %102, %134, !dbg !37
  %143 = fmul float %103, %135, !dbg !37
  %144 = fmul float %104, %136, !dbg !37
  %145 = fmul float %105, %137, !dbg !37
  %146 = fmul float %106, %138, !dbg !37
  %147 = fadd float %37, %139, !dbg !38
  %148 = fadd float %38, %140, !dbg !38
  %149 = fadd float %39, %141, !dbg !38
  %150 = fadd float %40, %142, !dbg !38
  %151 = fadd float %41, %143, !dbg !38
  %152 = fadd float %42, %144, !dbg !38
  %153 = fadd float %43, %145, !dbg !38
  %154 = fadd float %44, %146, !dbg !38
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %28, %98
  %155 = phi float [ %147, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %156 = phi float [ %148, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %157 = phi float [ %149, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %158 = phi float [ %150, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %159 = phi float [ %151, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %160 = phi float [ %152, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %161 = phi float [ %153, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %162 = phi float [ %154, %98 ], [ 0.000000e+00, %28 ], !dbg !31
  %.pn18 = phi float [ %123, %98 ], [ %89, %28 ]
  %.pn16 = phi float [ %124, %98 ], [ %90, %28 ]
  %.pn14 = phi float [ %125, %98 ], [ %91, %28 ]
  %.pn12 = phi float [ %126, %98 ], [ %92, %28 ]
  %.pn10 = phi float [ %127, %98 ], [ %93, %28 ]
  %.pn8 = phi float [ %128, %98 ], [ %94, %28 ]
  %.pn6 = phi float [ %129, %98 ], [ %95, %28 ]
  %.pn4 = phi float [ %130, %98 ], [ %96, %28 ]
  %163 = phi float [ %107, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %164 = phi float [ %108, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %165 = phi float [ %109, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %166 = phi float [ %110, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %167 = phi float [ %111, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %168 = phi float [ %112, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %169 = phi float [ %113, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %170 = phi float [ %114, %98 ], [ 1.000000e+00, %28 ], !dbg !31
  %171 = select i1 %19, float %.pn18, float %45, !dbg !39
  %172 = select i1 %19, float %.pn16, float %46, !dbg !39
  %173 = select i1 %19, float %.pn14, float %47, !dbg !39
  %174 = select i1 %19, float %.pn12, float %48, !dbg !39
  %175 = select i1 %20, float %.pn10, float %49, !dbg !39
  %176 = select i1 %20, float %.pn8, float %50, !dbg !39
  %177 = select i1 %20, float %.pn6, float %51, !dbg !39
  %178 = select i1 %20, float %.pn4, float %52, !dbg !39
  %179 = select i1 %19, float %155, float %37, !dbg !40
  %180 = select i1 %19, float %156, float %38, !dbg !40
  %181 = select i1 %19, float %157, float %39, !dbg !40
  %182 = select i1 %19, float %158, float %40, !dbg !40
  %183 = select i1 %20, float %159, float %41, !dbg !40
  %184 = select i1 %20, float %160, float %42, !dbg !40
  %185 = select i1 %20, float %161, float %43, !dbg !40
  %186 = select i1 %20, float %162, float %44, !dbg !40
  %187 = select i1 %19, float %163, float %29, !dbg !41
  %188 = select i1 %19, float %164, float %30, !dbg !41
  %189 = select i1 %19, float %165, float %31, !dbg !41
  %190 = select i1 %19, float %166, float %32, !dbg !41
  %191 = select i1 %20, float %167, float %33, !dbg !41
  %192 = select i1 %20, float %168, float %34, !dbg !41
  %193 = select i1 %20, float %169, float %35, !dbg !41
  %194 = select i1 %20, float %170, float %36, !dbg !41
  %195 = bitcast float %89 to i32, !dbg !42
  %196 = bitcast float %90 to i32, !dbg !42
  %197 = bitcast float %91 to i32, !dbg !42
  %198 = bitcast float %92 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %195, i32 %196, i32 %197, i32 %198, ptr addrspace(1) %58, i1 %19) #5, !dbg !42
  %199 = bitcast float %93 to i32, !dbg !42
  %200 = bitcast float %94 to i32, !dbg !42
  %201 = bitcast float %95 to i32, !dbg !42
  %202 = bitcast float %96 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %200, i32 %201, i32 %202, ptr addrspace(1) %60, i1 %20) #5, !dbg !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !19
  %203 = icmp samesign ult i64 %indvars.iv, 128, !dbg !19
  br i1 %203, label %28, label %204, !dbg !19

204:                                              ; preds = %._crit_edge
  %205 = icmp slt i32 %18, 256, !dbg !14
  %206 = mul i32 %23, 8, !dbg !43
  %.decomposed = sub i32 %.frozen, %206, !dbg !43
  %207 = sdiv i32 %18, 64, !dbg !44
  %208 = fsub float %172, %171, !dbg !45
  %209 = fadd float %187, %188, !dbg !48
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !49
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %209) #5, !dbg !50
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !51
  %213 = fmul float %208, %212, !dbg !52
  %214 = fadd float %171, %213, !dbg !53
  %215 = fadd float %179, %180, !dbg !54
  %216 = fmul float %208, %208, !dbg !55
  %217 = fmul float %216, %187, !dbg !56
  %218 = fmul float %217, %212, !dbg !57
  %219 = fadd float %215, %218, !dbg !58
  %220 = fsub float %173, %214, !dbg !45
  %221 = fadd float %189, %209, !dbg !48
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !49
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %221) #5, !dbg !50
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !51
  %225 = fmul float %224, %220, !dbg !52
  %226 = fadd float %214, %225, !dbg !53
  %227 = fadd float %181, %219, !dbg !54
  %228 = fmul float %220, %220, !dbg !55
  %229 = fmul float %209, %228, !dbg !56
  %230 = fmul float %224, %229, !dbg !57
  %231 = fadd float %227, %230, !dbg !58
  %232 = fsub float %174, %226, !dbg !45
  %233 = fadd float %190, %221, !dbg !48
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !49
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %233) #5, !dbg !50
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !51
  %237 = fmul float %236, %232, !dbg !52
  %238 = fadd float %226, %237, !dbg !53
  %239 = fadd float %182, %231, !dbg !54
  %240 = fmul float %232, %232, !dbg !55
  %241 = fmul float %221, %240, !dbg !56
  %242 = fmul float %236, %241, !dbg !57
  %243 = fadd float %239, %242, !dbg !58
  %244 = fsub float %176, %175, !dbg !45
  %245 = fadd float %191, %192, !dbg !48
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !49
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %245) #5, !dbg !50
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !51
  %249 = fmul float %244, %248, !dbg !52
  %250 = fadd float %175, %249, !dbg !53
  %251 = fadd float %183, %184, !dbg !54
  %252 = fmul float %244, %244, !dbg !55
  %253 = fmul float %252, %191, !dbg !56
  %254 = fmul float %253, %248, !dbg !57
  %255 = fadd float %251, %254, !dbg !58
  %256 = fsub float %177, %250, !dbg !45
  %257 = fadd float %193, %245, !dbg !48
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !49
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %257) #5, !dbg !50
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !51
  %261 = fmul float %260, %256, !dbg !52
  %262 = fadd float %250, %261, !dbg !53
  %263 = fadd float %185, %255, !dbg !54
  %264 = fmul float %256, %256, !dbg !55
  %265 = fmul float %245, %264, !dbg !56
  %266 = fmul float %260, %265, !dbg !57
  %267 = fadd float %263, %266, !dbg !58
  %268 = fsub float %178, %262, !dbg !45
  %269 = fadd float %194, %257, !dbg !48
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !49
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %269) #5, !dbg !50
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !51
  %273 = fmul float %272, %268, !dbg !52
  %274 = fadd float %262, %273, !dbg !53
  %275 = fadd float %186, %267, !dbg !54
  %276 = fmul float %268, %268, !dbg !55
  %277 = fmul float %257, %276, !dbg !56
  %278 = fmul float %272, %277, !dbg !57
  %279 = fadd float %275, %278, !dbg !58
  %280 = bitcast float %238 to i32, !dbg !59
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !59
  %282 = bitcast i32 %281 to float, !dbg !59
  %283 = bitcast float %243 to i32, !dbg !59
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !59
  %285 = bitcast i32 %284 to float, !dbg !59
  %286 = bitcast float %233 to i32, !dbg !59
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 8, i32 31), !dbg !59
  %288 = bitcast i32 %287 to float, !dbg !59
  %289 = fsub float %282, %238, !dbg !45
  %290 = fadd float %233, %288, !dbg !48
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !49
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #5, !dbg !50
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !51
  %294 = fmul float %289, %293, !dbg !52
  %295 = fadd float %238, %294, !dbg !53
  %296 = fadd float %243, %285, !dbg !54
  %297 = fmul float %289, %289, !dbg !55
  %298 = fmul float %233, %297, !dbg !56
  %299 = fmul float %298, %293, !dbg !57
  %300 = fadd float %296, %299, !dbg !58
  %301 = bitcast float %295 to i32, !dbg !59
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !59
  %303 = bitcast i32 %302 to float, !dbg !59
  %304 = bitcast float %300 to i32, !dbg !59
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !59
  %306 = bitcast i32 %305 to float, !dbg !59
  %307 = bitcast float %290 to i32, !dbg !59
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 4, i32 31), !dbg !59
  %309 = bitcast i32 %308 to float, !dbg !59
  %310 = fsub float %303, %295, !dbg !45
  %311 = fadd float %290, %309, !dbg !48
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !49
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #5, !dbg !50
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !51
  %315 = fmul float %310, %314, !dbg !52
  %316 = fadd float %295, %315, !dbg !53
  %317 = fadd float %300, %306, !dbg !54
  %318 = fmul float %310, %310, !dbg !55
  %319 = fmul float %290, %318, !dbg !56
  %320 = fmul float %314, %319, !dbg !57
  %321 = fadd float %317, %320, !dbg !58
  %322 = bitcast float %316 to i32, !dbg !59
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !59
  %324 = bitcast i32 %323 to float, !dbg !59
  %325 = bitcast float %321 to i32, !dbg !59
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 2, i32 31), !dbg !59
  %327 = bitcast i32 %326 to float, !dbg !59
  %328 = bitcast float %311 to i32, !dbg !59
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !59
  %330 = bitcast i32 %329 to float, !dbg !59
  %331 = fsub float %324, %316, !dbg !45
  %332 = fadd float %311, %330, !dbg !48
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !49
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #5, !dbg !50
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !51
  %336 = fmul float %331, %335, !dbg !52
  %337 = fadd float %316, %336, !dbg !53
  %338 = fadd float %321, %327, !dbg !54
  %339 = fmul float %331, %331, !dbg !55
  %340 = fmul float %311, %339, !dbg !56
  %341 = fmul float %335, %340, !dbg !57
  %342 = fadd float %338, %341, !dbg !58
  %343 = bitcast float %337 to i32, !dbg !59
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !59
  %345 = bitcast i32 %344 to float, !dbg !59
  %346 = bitcast float %342 to i32, !dbg !59
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !59
  %348 = bitcast i32 %347 to float, !dbg !59
  %349 = bitcast float %332 to i32, !dbg !59
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !59
  %351 = bitcast i32 %350 to float, !dbg !59
  %352 = fsub float %345, %337, !dbg !45
  %353 = fadd float %332, %351, !dbg !48
  %354 = fcmp oeq float %353, 0.000000e+00, !dbg !49
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %353) #5, !dbg !50
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !51
  %357 = fmul float %352, %356, !dbg !52
  %358 = fadd float %337, %357, !dbg !53
  %359 = fadd float %342, %348, !dbg !54
  %360 = fmul float %352, %352, !dbg !55
  %361 = fmul float %332, %360, !dbg !56
  %362 = fmul float %356, %361, !dbg !57
  %363 = fadd float %359, %362, !dbg !58
  %364 = bitcast float %274 to i32, !dbg !59
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 8, i32 31), !dbg !59
  %366 = bitcast i32 %365 to float, !dbg !59
  %367 = bitcast float %279 to i32, !dbg !59
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 8, i32 31), !dbg !59
  %369 = bitcast i32 %368 to float, !dbg !59
  %370 = bitcast float %269 to i32, !dbg !59
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 8, i32 31), !dbg !59
  %372 = bitcast i32 %371 to float, !dbg !59
  %373 = fsub float %366, %274, !dbg !45
  %374 = fadd float %269, %372, !dbg !48
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !49
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %374) #5, !dbg !50
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !51
  %378 = fmul float %373, %377, !dbg !52
  %379 = fadd float %274, %378, !dbg !53
  %380 = fadd float %279, %369, !dbg !54
  %381 = fmul float %373, %373, !dbg !55
  %382 = fmul float %269, %381, !dbg !56
  %383 = fmul float %382, %377, !dbg !57
  %384 = fadd float %380, %383, !dbg !58
  %385 = bitcast float %379 to i32, !dbg !59
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 4, i32 31), !dbg !59
  %387 = bitcast i32 %386 to float, !dbg !59
  %388 = bitcast float %384 to i32, !dbg !59
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 4, i32 31), !dbg !59
  %390 = bitcast i32 %389 to float, !dbg !59
  %391 = bitcast float %374 to i32, !dbg !59
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 4, i32 31), !dbg !59
  %393 = bitcast i32 %392 to float, !dbg !59
  %394 = fsub float %387, %379, !dbg !45
  %395 = fadd float %374, %393, !dbg !48
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !49
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %395) #5, !dbg !50
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !51
  %399 = fmul float %394, %398, !dbg !52
  %400 = fadd float %379, %399, !dbg !53
  %401 = fadd float %384, %390, !dbg !54
  %402 = fmul float %394, %394, !dbg !55
  %403 = fmul float %374, %402, !dbg !56
  %404 = fmul float %398, %403, !dbg !57
  %405 = fadd float %401, %404, !dbg !58
  %406 = bitcast float %400 to i32, !dbg !59
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !59
  %408 = bitcast i32 %407 to float, !dbg !59
  %409 = bitcast float %405 to i32, !dbg !59
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 2, i32 31), !dbg !59
  %411 = bitcast i32 %410 to float, !dbg !59
  %412 = bitcast float %395 to i32, !dbg !59
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 2, i32 31), !dbg !59
  %414 = bitcast i32 %413 to float, !dbg !59
  %415 = fsub float %408, %400, !dbg !45
  %416 = fadd float %395, %414, !dbg !48
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !49
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float %416) #5, !dbg !50
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !51
  %420 = fmul float %415, %419, !dbg !52
  %421 = fadd float %400, %420, !dbg !53
  %422 = fadd float %405, %411, !dbg !54
  %423 = fmul float %415, %415, !dbg !55
  %424 = fmul float %395, %423, !dbg !56
  %425 = fmul float %419, %424, !dbg !57
  %426 = fadd float %422, %425, !dbg !58
  %427 = bitcast float %421 to i32, !dbg !59
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !59
  %429 = bitcast i32 %428 to float, !dbg !59
  %430 = bitcast float %426 to i32, !dbg !59
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 1, i32 31), !dbg !59
  %432 = bitcast i32 %431 to float, !dbg !59
  %433 = bitcast float %416 to i32, !dbg !59
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !59
  %435 = bitcast i32 %434 to float, !dbg !59
  %436 = fsub float %429, %421, !dbg !45
  %437 = fadd float %416, %435, !dbg !48
  %438 = fcmp oeq float %437, 0.000000e+00, !dbg !49
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %437) #5, !dbg !50
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !51
  %441 = fmul float %436, %440, !dbg !52
  %442 = fadd float %421, %441, !dbg !53
  %443 = fadd float %426, %432, !dbg !54
  %444 = fmul float %436, %436, !dbg !55
  %445 = fmul float %416, %444, !dbg !56
  %446 = fmul float %440, %445, !dbg !57
  %447 = fadd float %443, %446, !dbg !58
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !60
  %449 = bitcast float %358 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #5, !dbg !60
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !60
  %451 = bitcast float %442 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %453 = load i32, ptr addrspace(3) %452, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %454 = bitcast float %363 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %454, i1 true) #5, !dbg !61
  %455 = bitcast float %447 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %455, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %456 = load float, ptr addrspace(3) %452, align 4, !dbg !61
  %457 = shl nsw i32 %.decomposed, 3, !dbg !62
  %458 = add nsw i32 %24, %457, !dbg !63
  %459 = shl nsw i32 %207, 6, !dbg !64
  %460 = add i32 %458, %459, !dbg !65
  %461 = sext i32 %460 to i64, !dbg !66
  %462 = getelementptr float, ptr addrspace(1) %4, i64 %461, !dbg !66
  %463 = and i32 %12, 448, !dbg !67
  %464 = icmp eq i32 %463, 0, !dbg !67
  %465 = and i1 %464, %205, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %462, i1 %465) #5, !dbg !67
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %456, float 1.920000e+02) #5, !dbg !68
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float 1.920000e+02) #5, !dbg !68
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float 1.920000e+02) #5, !dbg !68
  %469 = fadd float %466, 0x3EB0C6F7A0000000, !dbg !69
  %470 = fadd float %467, 0x3EB0C6F7A0000000, !dbg !69
  %471 = fadd float %468, 0x3EB0C6F7A0000000, !dbg !69
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i = icmp eq i32 %472, 0, !dbg !61
  br i1 %.not.i, label %475, label %473, !dbg !61

473:                                              ; preds = %204
  %474 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %469), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

475:                                              ; preds = %204
  %476 = tail call float @llvm.nvvm.rsqrt.approx.f(float %469), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

__nv_rsqrtf.exit:                                 ; preds = %473, %475
  %.0.i = phi float [ %474, %473 ], [ %476, %475 ], !dbg !61
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i28 = icmp eq i32 %480, 0, !dbg !61
  br i1 %.not.i28, label %483, label %481, !dbg !61

481:                                              ; preds = %__nv_rsqrtf.exit
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %470), !dbg !61
  br label %__nv_rsqrtf.exit30, !dbg !61

483:                                              ; preds = %__nv_rsqrtf.exit
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %470), !dbg !61
  br label %__nv_rsqrtf.exit30, !dbg !61

__nv_rsqrtf.exit30:                               ; preds = %481, %483
  %.0.i29 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !61
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i40 = icmp eq i32 %488, 0, !dbg !61
  br i1 %.not.i40, label %491, label %489, !dbg !61

489:                                              ; preds = %__nv_rsqrtf.exit30
  %490 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %471), !dbg !61
  br label %__nv_rsqrtf.exit42, !dbg !61

491:                                              ; preds = %__nv_rsqrtf.exit30
  %492 = tail call float @llvm.nvvm.rsqrt.approx.f(float %471), !dbg !61
  br label %__nv_rsqrtf.exit42, !dbg !61

__nv_rsqrtf.exit42:                               ; preds = %489, %491
  %.0.i41 = phi float [ %490, %489 ], [ %492, %491 ], !dbg !61
  %493 = getelementptr float, ptr addrspace(1) %5, i64 %461, !dbg !70
  %494 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %493, i1 %465) #5, !dbg !71
  br label %495, !dbg !72

495:                                              ; preds = %__nv_rsqrtf.exit42, %495
  %indvars.iv68 = phi i64 [ 0, %__nv_rsqrtf.exit42 ], [ %indvars.iv.next69, %495 ]
  %496 = or disjoint i64 %indvars.iv68, %27, !dbg !73
  %497 = trunc nuw nsw i64 %496 to i32, !dbg !74
  %498 = add i32 %25, %497, !dbg !74
  %499 = add i32 %26, %497, !dbg !74
  %500 = sext i32 %498 to i64, !dbg !75
  %501 = getelementptr float, ptr addrspace(1) %0, i64 %500, !dbg !75
  %502 = sext i32 %499 to i64, !dbg !75
  %503 = getelementptr float, ptr addrspace(1) %0, i64 %502, !dbg !75
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %501, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !76
  %505 = extractvalue { i32, i32, i32, i32 } %504, 0, !dbg !76
  %506 = extractvalue { i32, i32, i32, i32 } %504, 1, !dbg !76
  %507 = extractvalue { i32, i32, i32, i32 } %504, 2, !dbg !76
  %508 = extractvalue { i32, i32, i32, i32 } %504, 3, !dbg !76
  %509 = bitcast i32 %505 to float, !dbg !76
  %510 = bitcast i32 %506 to float, !dbg !76
  %511 = bitcast i32 %507 to float, !dbg !76
  %512 = bitcast i32 %508 to float, !dbg !76
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %503, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !76
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !76
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !76
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !76
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !76
  %518 = bitcast i32 %514 to float, !dbg !76
  %519 = bitcast i32 %515 to float, !dbg !76
  %520 = bitcast i32 %516 to float, !dbg !76
  %521 = bitcast i32 %517 to float, !dbg !76
  %522 = getelementptr float, ptr addrspace(1) %2, i64 %496, !dbg !77
  %523 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %522, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !78
  %524 = extractvalue { i32, i32, i32, i32 } %523, 0, !dbg !78
  %525 = extractvalue { i32, i32, i32, i32 } %523, 1, !dbg !78
  %526 = extractvalue { i32, i32, i32, i32 } %523, 2, !dbg !78
  %527 = extractvalue { i32, i32, i32, i32 } %523, 3, !dbg !78
  %528 = bitcast i32 %524 to float, !dbg !78
  %529 = bitcast i32 %525 to float, !dbg !78
  %530 = bitcast i32 %526 to float, !dbg !78
  %531 = bitcast i32 %527 to float, !dbg !78
  %532 = getelementptr float, ptr addrspace(1) %3, i64 %496, !dbg !79
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %532, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !80
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !80
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !80
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !80
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !80
  %538 = bitcast i32 %534 to float, !dbg !80
  %539 = bitcast i32 %535 to float, !dbg !80
  %540 = bitcast i32 %536 to float, !dbg !80
  %541 = bitcast i32 %537 to float, !dbg !80
  %542 = fsub float %509, %358, !dbg !81
  %543 = fsub float %510, %358, !dbg !81
  %544 = fsub float %511, %358, !dbg !81
  %545 = fsub float %512, %358, !dbg !81
  %546 = fsub float %518, %442, !dbg !81
  %547 = fsub float %519, %442, !dbg !81
  %548 = fsub float %520, %442, !dbg !81
  %549 = fsub float %521, %442, !dbg !81
  %550 = fmul float %.0.i29, %542, !dbg !82
  %551 = fmul float %.0.i29, %543, !dbg !82
  %552 = fmul float %.0.i29, %544, !dbg !82
  %553 = fmul float %.0.i29, %545, !dbg !82
  %554 = fmul float %.0.i41, %546, !dbg !82
  %555 = fmul float %.0.i41, %547, !dbg !82
  %556 = fmul float %.0.i41, %548, !dbg !82
  %557 = fmul float %.0.i41, %549, !dbg !82
  %558 = fmul float %550, %528, !dbg !83
  %559 = fmul float %551, %529, !dbg !83
  %560 = fmul float %552, %530, !dbg !83
  %561 = fmul float %553, %531, !dbg !83
  %562 = fmul float %554, %528, !dbg !83
  %563 = fmul float %555, %529, !dbg !83
  %564 = fmul float %556, %530, !dbg !83
  %565 = fmul float %557, %531, !dbg !83
  %566 = fadd float %558, %538, !dbg !84
  %567 = fadd float %559, %539, !dbg !84
  %568 = fadd float %560, %540, !dbg !84
  %569 = fadd float %561, %541, !dbg !84
  %570 = fadd float %562, %538, !dbg !84
  %571 = fadd float %563, %539, !dbg !84
  %572 = fadd float %564, %540, !dbg !84
  %573 = fadd float %565, %541, !dbg !84
  %574 = getelementptr float, ptr addrspace(1) %6, i64 %500, !dbg !85
  %575 = getelementptr float, ptr addrspace(1) %6, i64 %502, !dbg !85
  %576 = bitcast float %566 to i32, !dbg !86
  %577 = bitcast float %567 to i32, !dbg !86
  %578 = bitcast float %568 to i32, !dbg !86
  %579 = bitcast float %569 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %576, i32 %577, i32 %578, i32 %579, ptr addrspace(1) %574, i1 %19) #5, !dbg !86
  %580 = bitcast float %570 to i32, !dbg !86
  %581 = bitcast float %571 to i32, !dbg !86
  %582 = bitcast float %572 to i32, !dbg !86
  %583 = bitcast float %573 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %580, i32 %581, i32 %582, i32 %583, ptr addrspace(1) %575, i1 %20) #5, !dbg !86
  %indvars.iv.next69 = add nuw nsw i64 %indvars.iv68, 64, !dbg !72
  %584 = icmp samesign ult i64 %indvars.iv68, 128, !dbg !72
  br i1 %584, label %495, label %585, !dbg !72

585:                                              ; preds = %495
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ngepos6tyhoegx4agldkkaxh3ozy7ih6x7xbladud4npqoheos.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_12", linkageName: "triton_red_fused_convolution_native_layer_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 27, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 52, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 39, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 62, scope: !7)
!28 = !DILocation(line: 178, column: 7, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 42, column: 51, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 184, column: 30, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 185, column: 34, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 185, column: 26, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 186, column: 39, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 186, column: 31, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 186, column: 22, scope: !29, inlinedAt: !31)
!39 = !DILocation(line: 44, column: 60, scope: !7)
!40 = !DILocation(line: 45, column: 56, scope: !7)
!41 = !DILocation(line: 46, column: 64, scope: !7)
!42 = !DILocation(line: 47, column: 52, scope: !7)
!43 = !DILocation(line: 30, column: 19, scope: !7)
!44 = !DILocation(line: 32, column: 19, scope: !7)
!45 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!47 = !DILocation(line: 49, column: 41, scope: !7)
!48 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !47)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 59, column: 28, scope: !7)
!62 = !DILocation(line: 54, column: 32, scope: !7)
!63 = !DILocation(line: 54, column: 30, scope: !7)
!64 = !DILocation(line: 54, column: 40, scope: !7)
!65 = !DILocation(line: 54, column: 37, scope: !7)
!66 = !DILocation(line: 54, column: 25, scope: !7)
!67 = !DILocation(line: 54, column: 51, scope: !7)
!68 = !DILocation(line: 56, column: 18, scope: !7)
!69 = !DILocation(line: 58, column: 19, scope: !7)
!70 = !DILocation(line: 60, column: 25, scope: !7)
!71 = !DILocation(line: 60, column: 52, scope: !7)
!72 = !DILocation(line: 61, column: 36, scope: !7)
!73 = !DILocation(line: 62, column: 27, scope: !7)
!74 = !DILocation(line: 65, column: 44, scope: !7)
!75 = !DILocation(line: 65, column: 39, scope: !7)
!76 = !DILocation(line: 65, column: 53, scope: !7)
!77 = !DILocation(line: 66, column: 35, scope: !7)
!78 = !DILocation(line: 66, column: 40, scope: !7)
!79 = !DILocation(line: 67, column: 35, scope: !7)
!80 = !DILocation(line: 67, column: 40, scope: !7)
!81 = !DILocation(line: 68, column: 24, scope: !7)
!82 = !DILocation(line: 69, column: 24, scope: !7)
!83 = !DILocation(line: 70, column: 24, scope: !7)
!84 = !DILocation(line: 71, column: 24, scope: !7)
!85 = !DILocation(line: 72, column: 29, scope: !7)
!86 = !DILocation(line: 72, column: 50, scope: !7)
!87 = !DILocation(line: 61, column: 4, scope: !7)
