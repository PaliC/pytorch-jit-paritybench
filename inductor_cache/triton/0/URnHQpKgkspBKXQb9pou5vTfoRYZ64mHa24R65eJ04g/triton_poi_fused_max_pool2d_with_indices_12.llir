; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 1, !dbg !16
  %21 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %21, 1, !dbg !17
  %22 = or disjoint i32 %20, %.lobit, !dbg !18
  %23 = icmp slt i32 %20, 196, !dbg !19
  %24 = icmp slt i32 %22, 196, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %25 = sdiv i32 %.frozen, 8, !dbg !20
  %26 = mul i32 %25, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %.frozen10 = freeze i32 %14, !dbg !20
  %27 = sdiv i32 %.frozen10, 8, !dbg !20
  %28 = mul i32 %27, 8, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %28, !dbg !21
  %.frozen12 = freeze i32 %15, !dbg !22
  %29 = sdiv i32 %.frozen12, 64, !dbg !22
  %30 = mul i32 %29, 64, !dbg !23
  %.decomposed13 = sub i32 %.frozen12, %30, !dbg !23
  %31 = mul nsw i32 %.decomposed, 392, !dbg !24
  %32 = mul nsw i32 %.decomposed11, 392, !dbg !24
  %33 = mul i32 %25, 6272, !dbg !25
  %34 = mul i32 %27, 6272, !dbg !25
  %35 = add i32 %33, %31, !dbg !26
  %36 = add i32 %35, %20, !dbg !27
  %37 = add i32 %34, %32, !dbg !26
  %38 = add i32 %37, %20, !dbg !27
  %39 = sext i32 %36 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = and i1 %23, %16, !dbg !29
  %44 = and i1 %23, %17, !dbg !29
  %45 = and i1 %18, %24, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !30
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !30
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %52 = add i32 %20, 196, !dbg !31
  %53 = add i32 %35, %52, !dbg !32
  %54 = add i32 %37, %52, !dbg !32
  %55 = sext i32 %53 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = sext i32 %54 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !33
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %43) #2, !dbg !34
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !34
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !34
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %44) #2, !dbg !34
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !34
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !34
  %65 = add i32 %20, 3136, !dbg !35
  %66 = add i32 %35, %65, !dbg !36
  %67 = add i32 %37, %65, !dbg !36
  %68 = sext i32 %66 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !37
  %70 = sext i32 %67 to i64, !dbg !37
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !37
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %43) #2, !dbg !38
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !38
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !38
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %44) #2, !dbg !38
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !38
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !38
  %78 = add i32 %20, 3332, !dbg !39
  %79 = add i32 %35, %78, !dbg !40
  %80 = add i32 %37, %78, !dbg !40
  %81 = sext i32 %79 to i64, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !41
  %83 = sext i32 %80 to i64, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !41
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %43) #2, !dbg !42
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !42
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !42
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %44) #2, !dbg !42
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !42
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !42
  %91 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !30
  %92 = insertelement <2 x i32> %91, i32 %48, i64 1, !dbg !30
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !30
  %94 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !34
  %95 = insertelement <2 x i32> %94, i32 %61, i64 1, !dbg !34
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !34
  %97 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !38
  %98 = insertelement <2 x i32> %97, i32 %74, i64 1, !dbg !38
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !38
  %100 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !42
  %101 = insertelement <2 x i32> %100, i32 %87, i64 1, !dbg !42
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !42
  %103 = fcmp ogt <2 x float> %96, %93, !dbg !43
  %104 = zext <2 x i1> %103 to <2 x i8>, !dbg !44
  %105 = fcmp uno <2 x float> %96, zeroinitializer, !dbg !45
  %106 = or <2 x i1> %103, %105, !dbg !49
  %.v = select <2 x i1> %106, <2 x i32> %95, <2 x i32> %92, !dbg !50
  %107 = bitcast <2 x i32> %.v to <2 x float>, !dbg !50
  %108 = fcmp olt <2 x float> %107, %99, !dbg !51
  %109 = select <2 x i1> %108, <2 x i8> splat (i8 2), <2 x i8> %104, !dbg !52
  %110 = fcmp uno <2 x float> %99, zeroinitializer, !dbg !53
  %111 = or <2 x i1> %110, %108, !dbg !55
  %.v7 = select <2 x i1> %111, <2 x i32> %98, <2 x i32> %.v, !dbg !56
  %112 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !56
  %113 = fcmp olt <2 x float> %112, %102, !dbg !57
  %114 = select <2 x i1> %113, <2 x i8> splat (i8 3), <2 x i8> %109, !dbg !58
  %115 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !30
  %116 = insertelement <2 x i32> %115, i32 %51, i64 1, !dbg !30
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !30
  %118 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !34
  %119 = insertelement <2 x i32> %118, i32 %64, i64 1, !dbg !34
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !34
  %121 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !38
  %122 = insertelement <2 x i32> %121, i32 %77, i64 1, !dbg !38
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !38
  %124 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !42
  %125 = insertelement <2 x i32> %124, i32 %90, i64 1, !dbg !42
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !42
  %127 = fcmp ogt <2 x float> %120, %117, !dbg !43
  %128 = zext <2 x i1> %127 to <2 x i8>, !dbg !44
  %129 = fcmp uno <2 x float> %120, zeroinitializer, !dbg !45
  %130 = or <2 x i1> %127, %129, !dbg !49
  %.v8 = select <2 x i1> %130, <2 x i32> %119, <2 x i32> %116, !dbg !50
  %131 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !50
  %132 = fcmp olt <2 x float> %131, %123, !dbg !51
  %133 = select <2 x i1> %132, <2 x i8> splat (i8 2), <2 x i8> %128, !dbg !52
  %134 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !53
  %135 = or <2 x i1> %134, %132, !dbg !55
  %.v9 = select <2 x i1> %135, <2 x i32> %122, <2 x i32> %.v8, !dbg !56
  %136 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !56
  %137 = fcmp olt <2 x float> %136, %126, !dbg !57
  %138 = select <2 x i1> %137, <2 x i8> splat (i8 3), <2 x i8> %133, !dbg !58
  %139 = shufflevector <2 x float> %126, <2 x float> %102, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !59
  %140 = fcmp uno <4 x float> %139, zeroinitializer, !dbg !59
  %141 = extractelement <2 x i1> %113, i64 0, !dbg !61
  %142 = extractelement <4 x i1> %140, i64 3, !dbg !61
  %143 = or i1 %142, %141, !dbg !61
  %144 = extractelement <2 x i1> %113, i64 1, !dbg !61
  %145 = extractelement <4 x i1> %140, i64 2, !dbg !61
  %146 = or i1 %145, %144, !dbg !61
  %147 = extractelement <2 x i1> %137, i64 0, !dbg !61
  %148 = extractelement <4 x i1> %140, i64 1, !dbg !61
  %149 = or i1 %148, %147, !dbg !61
  %150 = extractelement <2 x i1> %137, i64 1, !dbg !61
  %151 = extractelement <4 x i1> %140, i64 0, !dbg !61
  %152 = or i1 %151, %150, !dbg !61
  %153 = mul i32 %13, 196, !dbg !62
  %154 = mul i32 %14, 196, !dbg !62
  %155 = add i32 %153, %20, !dbg !63
  %156 = add i32 %154, %20, !dbg !63
  %157 = sext i32 %155 to i64, !dbg !64
  %158 = getelementptr i8, ptr addrspace(1) %1, i64 %157, !dbg !64
  %159 = sext i32 %156 to i64, !dbg !64
  %160 = getelementptr i8, ptr addrspace(1) %1, i64 %159, !dbg !64
  %161 = bitcast <2 x i8> %114 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %161, ptr addrspace(1) %158, i1 %43) #2, !dbg !65
  %162 = bitcast <2 x i8> %138 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %162, ptr addrspace(1) %160, i1 %44) #2, !dbg !65
  %163 = shl i32 %22, 6, !dbg !66
  %164 = add i32 %163, %.decomposed13, !dbg !67
  %165 = mul i32 %29, 12544, !dbg !68
  %166 = add i32 %164, %165, !dbg !69
  %167 = sext i32 %166 to i64, !dbg !70
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !70
  %169 = and i32 %11, 508, !dbg !71
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !71
  %171 = extractelement <2 x i32> %.v7, i64 0, !dbg !71
  %172 = select i1 %143, i32 %86, i32 %171, !dbg !72
  %173 = insertelement <1 x i32> poison, i32 %172, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %173, i1 true) #2, !dbg !71
  %174 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 1040, !dbg !71
  %175 = extractelement <2 x i32> %.v7, i64 1, !dbg !71
  %176 = select i1 %146, i32 %87, i32 %175, !dbg !72
  %177 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %177, i1 true) #2, !dbg !71
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !71
  %179 = extractelement <2 x i32> %.v9, i64 0, !dbg !71
  %180 = select i1 %149, i32 %89, i32 %179, !dbg !72
  %181 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %181, i1 true) #2, !dbg !71
  %182 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 1552, !dbg !71
  %183 = extractelement <2 x i32> %.v9, i64 1, !dbg !71
  %184 = select i1 %152, i32 %90, i32 %183, !dbg !72
  %185 = insertelement <1 x i32> poison, i32 %184, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %185, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %186 = lshr i32 %11, 6, !dbg !71
  %187 = and i32 %186, 4, !dbg !71
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !71
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %169, !dbg !71
  %.extract = load i32, ptr addrspace(3) %189, align 16, !dbg !71
  %190 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 4, !dbg !71
  %.extract4 = load i32, ptr addrspace(3) %190, align 4, !dbg !71
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 8, !dbg !71
  %.extract5 = load i32, ptr addrspace(3) %191, align 8, !dbg !71
  %192 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 12, !dbg !71
  %.extract6 = load i32, ptr addrspace(3) %192, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %168, i1 %45) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 38, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 44, scope: !7)
!69 = !DILocation(line: 52, column: 38, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 56, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
