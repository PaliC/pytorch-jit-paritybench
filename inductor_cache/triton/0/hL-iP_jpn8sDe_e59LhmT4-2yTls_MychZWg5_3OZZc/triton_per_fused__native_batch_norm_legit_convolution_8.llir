; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = icmp slt i32 %14, 1024, !dbg !14
  %17 = icmp slt i32 %15, 1024, !dbg !14
  %18 = shl i32 %9, 2, !dbg !15
  %19 = and i32 %18, 60, !dbg !15
  %20 = srem i32 %14, 256, !dbg !16
  %21 = srem i32 %15, 256, !dbg !16
  %22 = shl i32 %14, 6, !dbg !17
  %23 = shl i32 %15, 6, !dbg !17
  %24 = or disjoint i32 %22, %19, !dbg !18
  %25 = or disjoint i32 %23, %19, !dbg !18
  %26 = sext i32 %24 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = sext i32 %25 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = sext i32 %20 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !21
  %50 = sext i32 %21 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #5, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #5, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #5, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #5, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #5, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #5, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #5, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #5, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %35, %56, !dbg !23
  %63 = fadd float %36, %56, !dbg !23
  %64 = fadd float %37, %56, !dbg !23
  %65 = fadd float %38, %56, !dbg !23
  %66 = fadd float %44, %61, !dbg !23
  %67 = fadd float %45, %61, !dbg !23
  %68 = fadd float %46, %61, !dbg !23
  %69 = fadd float %47, %61, !dbg !23
  %70 = fadd float %62, %63, !dbg !24
  %71 = fadd float %64, %70, !dbg !24
  %72 = fadd float %65, %71, !dbg !24
  %73 = select i1 %16, float %72, float 0.000000e+00, !dbg !24
  %74 = fadd float %66, %67, !dbg !24
  %75 = fadd float %68, %74, !dbg !24
  %76 = fadd float %69, %75, !dbg !24
  %77 = select i1 %17, float %76, float 0.000000e+00, !dbg !24
  %78 = bitcast float %73 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %73, %80, !dbg !24
  %82 = bitcast float %81 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %81, %84, !dbg !24
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !24
  %90 = bitcast float %89 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %89, %92, !dbg !24
  %94 = bitcast float %77 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fadd float %77, %96, !dbg !24
  %98 = bitcast float %97 to i32, !dbg !29
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = fadd float %97, %100, !dbg !24
  %102 = bitcast float %101 to i32, !dbg !29
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = fadd float %101, %104, !dbg !24
  %106 = bitcast float %105 to i32, !dbg !29
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = fadd float %105, %108, !dbg !24
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %111 = bitcast float %93 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #5, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %113 = bitcast float %109 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !30
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 6.400000e+01) #5, !dbg !30
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 6.400000e+01) #5, !dbg !30
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 6.400000e+01) #5, !dbg !30
  %119 = fsub float %62, %117, !dbg !31
  %120 = fsub float %63, %117, !dbg !31
  %121 = fsub float %64, %117, !dbg !31
  %122 = fsub float %65, %117, !dbg !31
  %123 = fsub float %66, %118, !dbg !31
  %124 = fsub float %67, %118, !dbg !31
  %125 = fsub float %68, %118, !dbg !31
  %126 = fsub float %69, %118, !dbg !31
  %127 = fmul float %119, %119, !dbg !32
  %128 = fmul float %120, %120, !dbg !32
  %129 = fmul float %121, %121, !dbg !32
  %130 = fmul float %122, %122, !dbg !32
  %131 = fmul float %123, %123, !dbg !32
  %132 = fmul float %124, %124, !dbg !32
  %133 = fmul float %125, %125, !dbg !32
  %134 = fmul float %126, %126, !dbg !32
  %135 = fadd float %127, %128, !dbg !33
  %136 = fadd float %129, %135, !dbg !33
  %137 = fadd float %130, %136, !dbg !33
  %138 = select i1 %16, float %137, float 0.000000e+00, !dbg !33
  %139 = fadd float %131, %132, !dbg !33
  %140 = fadd float %133, %139, !dbg !33
  %141 = fadd float %134, %140, !dbg !33
  %142 = select i1 %17, float %141, float 0.000000e+00, !dbg !33
  %143 = bitcast float %138 to i32, !dbg !35
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  %146 = fadd float %138, %145, !dbg !33
  %147 = bitcast float %146 to i32, !dbg !35
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = fadd float %146, %149, !dbg !33
  %151 = bitcast float %150 to i32, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %150, %153, !dbg !33
  %155 = bitcast float %154 to i32, !dbg !35
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = fadd float %154, %157, !dbg !33
  %159 = bitcast float %142 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %142, %161, !dbg !33
  %163 = bitcast float %162 to i32, !dbg !35
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = fadd float %162, %165, !dbg !33
  %167 = bitcast float %166 to i32, !dbg !35
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !35
  %169 = bitcast i32 %168 to float, !dbg !35
  %170 = fadd float %166, %169, !dbg !33
  %171 = bitcast float %170 to i32, !dbg !35
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !35
  %173 = bitcast i32 %172 to float, !dbg !35
  %174 = fadd float %170, %173, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %175 = bitcast float %158 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %175, i1 true) #5, !dbg !36
  %176 = bitcast float %174 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %176, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %177 = load float, ptr addrspace(3) %114, align 4, !dbg !36
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 6.400000e+01) #5, !dbg !37
  %179 = fadd float %178, 0x3EE4F8B580000000, !dbg !38
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %180, 0, !dbg !36
  br i1 %.not.i, label %183, label %181, !dbg !36

181:                                              ; preds = %6
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %179), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

183:                                              ; preds = %6
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %179), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %181, %183
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], !dbg !36
  %185 = or disjoint i32 %8, %13, !dbg !13
  %186 = icmp slt i32 %185, 1024, !dbg !14
  %187 = bitcast float %62 to i32, !dbg !39
  %188 = bitcast float %63 to i32, !dbg !39
  %189 = bitcast float %64 to i32, !dbg !39
  %190 = bitcast float %65 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %27, i1 %16) #5, !dbg !39
  %191 = bitcast float %66 to i32, !dbg !39
  %192 = bitcast float %67 to i32, !dbg !39
  %193 = bitcast float %68 to i32, !dbg !39
  %194 = bitcast float %69 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %192, i32 %193, i32 %194, ptr addrspace(1) %29, i1 %17) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %195 = sext i32 %185 to i64, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !41
  %197 = and i32 %9, 224, !dbg !42
  %198 = icmp eq i32 %197, 0, !dbg !42
  %199 = bitcast float %.0.i to i32, !dbg !42
  %200 = and i1 %198, %186, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %196, i1 %200) #5, !dbg !42
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !43
  %202 = bitcast float %116 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %201, i1 %200) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch3enj2j5f3wlyidntbcapchbxskuh7cwgznatra66c6ltfwnqvf.py", directory: "inductor_cache/h3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_8", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 52, column: 28, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 47, scope: !7)
!40 = !DILocation(line: 54, column: 4, scope: !7)
!41 = !DILocation(line: 55, column: 28, scope: !7)
!42 = !DILocation(line: 55, column: 40, scope: !7)
!43 = !DILocation(line: 56, column: 25, scope: !7)
!44 = !DILocation(line: 56, column: 37, scope: !7)
!45 = !DILocation(line: 56, column: 4, scope: !7)
