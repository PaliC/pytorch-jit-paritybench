; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 384, !dbg !14
  %18 = icmp slt i32 %15, 384, !dbg !14
  %19 = icmp slt i32 %16, 384, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %25 = srem i32 %14, 96, !dbg !18
  %26 = srem i32 %15, 96, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %27 = sdiv i32 %.frozen, 96, !dbg !19
  %28 = mul i32 %27, 96, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = shl i32 %14, 12, !dbg !20
  %30 = shl i32 %15, 12, !dbg !20
  %31 = add i32 %22, %29, !dbg !21
  %32 = add i32 %22, %30, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %17) #2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = sext i32 %25 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %49 = sext i32 %26 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #2, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #2, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #2, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #2, !dbg !25
  %59 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !23
  %60 = insertelement <8 x i32> %59, i32 %45, i64 1, !dbg !23
  %61 = insertelement <8 x i32> %60, i32 %44, i64 2, !dbg !23
  %62 = insertelement <8 x i32> %61, i32 %43, i64 3, !dbg !23
  %63 = insertelement <8 x i32> %62, i32 %41, i64 4, !dbg !23
  %64 = insertelement <8 x i32> %63, i32 %40, i64 5, !dbg !23
  %65 = insertelement <8 x i32> %64, i32 %39, i64 6, !dbg !23
  %66 = insertelement <8 x i32> %65, i32 %38, i64 7, !dbg !23
  %67 = bitcast <8 x i32> %66 to <8 x float>, !dbg !23
  %68 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !25
  %69 = insertelement <2 x i32> %68, i32 %54, i64 1, !dbg !25
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !25
  %71 = shufflevector <2 x float> %70, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !25
  %72 = fadd <8 x float> %71, %67, !dbg !26
  %73 = fcmp olt <8 x float> %72, zeroinitializer, !dbg !27
  %74 = extractelement <8 x i1> %73, i64 7, !dbg !31
  %75 = extractelement <8 x float> %72, i64 7, !dbg !31
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !31
  %77 = extractelement <8 x i1> %73, i64 6, !dbg !31
  %78 = extractelement <8 x float> %72, i64 6, !dbg !31
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !31
  %80 = extractelement <8 x i1> %73, i64 5, !dbg !31
  %81 = extractelement <8 x float> %72, i64 5, !dbg !31
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !31
  %83 = extractelement <8 x i1> %73, i64 4, !dbg !31
  %84 = extractelement <8 x float> %72, i64 4, !dbg !31
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !31
  %86 = extractelement <8 x i1> %73, i64 3, !dbg !31
  %87 = extractelement <8 x float> %72, i64 3, !dbg !31
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !31
  %89 = extractelement <8 x i1> %73, i64 2, !dbg !31
  %90 = extractelement <8 x float> %72, i64 2, !dbg !31
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !31
  %92 = extractelement <8 x i1> %73, i64 1, !dbg !31
  %93 = extractelement <8 x float> %72, i64 1, !dbg !31
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !31
  %95 = extractelement <8 x i1> %73, i64 0, !dbg !31
  %96 = extractelement <8 x float> %72, i64 0, !dbg !31
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !31
  %98 = mul i32 %23, 96, !dbg !32
  %99 = mul i32 %24, 96, !dbg !32
  %100 = mul i32 %27, 393216, !dbg !33
  %101 = add i32 %100, %.decomposed, !dbg !34
  %102 = add i32 %101, %98, !dbg !35
  %103 = add i32 %101, %99, !dbg !35
  %104 = sext i32 %102 to i64, !dbg !36
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !36
  %106 = sext i32 %103 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !36
  %108 = shl i32 %8, 7, !dbg !37
  %109 = and i32 %108, 896, !dbg !37
  %110 = or disjoint i32 %109, %10, !dbg !37
  %111 = and i32 %12, 508, !dbg !37
  %112 = lshr exact i32 %109, 1, !dbg !37
  %113 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %110, !dbg !37
  %115 = bitcast float %76 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !37
  %116 = or disjoint i32 %110, 32, !dbg !37
  %117 = lshr i32 %116, 3, !dbg !37
  %118 = and i32 %117, 116, !dbg !37
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !37
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %116, !dbg !37
  %121 = bitcast float %79 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !37
  %122 = or disjoint i32 %110, 64, !dbg !37
  %123 = lshr i32 %122, 3, !dbg !37
  %124 = and i32 %123, 120, !dbg !37
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !37
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %122, !dbg !37
  %127 = bitcast float %82 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !37
  %128 = or disjoint i32 %110, 96, !dbg !37
  %129 = lshr i32 %128, 3, !dbg !37
  %130 = and i32 %129, 124, !dbg !37
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !37
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !37
  %133 = bitcast float %85 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !37
  %134 = or disjoint i32 %110, 16, !dbg !37
  %135 = getelementptr float, ptr addrspace(3) %113, i32 %134, !dbg !37
  %136 = bitcast float %88 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !37
  %137 = or disjoint i32 %110, 48, !dbg !37
  %138 = lshr i32 %137, 3, !dbg !37
  %139 = and i32 %138, 116, !dbg !37
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !37
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %137, !dbg !37
  %142 = bitcast float %91 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !37
  %143 = or disjoint i32 %110, 80, !dbg !37
  %144 = lshr i32 %143, 3, !dbg !37
  %145 = and i32 %144, 120, !dbg !37
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !37
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !37
  %148 = bitcast float %94 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !37
  %149 = or disjoint i32 %110, 112, !dbg !37
  %150 = lshr i32 %149, 3, !dbg !37
  %151 = and i32 %150, 124, !dbg !37
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !37
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %149, !dbg !37
  %154 = bitcast float %97 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %155 = lshr i32 %12, 3, !dbg !37
  %156 = and i32 %155, 60, !dbg !37
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !37
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %111, !dbg !37
  %159 = or disjoint i32 %111, 512, !dbg !37
  %160 = lshr i32 %159, 3, !dbg !37
  %161 = and i32 %160, 124, !dbg !37
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !37
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %159, !dbg !37
  %164 = load <4 x i32>, ptr addrspace(3) %163, align 16, !dbg !37
  %.extract = load i32, ptr addrspace(3) %158, align 16, !dbg !37
  %165 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 4, !dbg !37
  %.extract8 = load i32, ptr addrspace(3) %165, align 4, !dbg !37
  %166 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 8, !dbg !37
  %.extract9 = load i32, ptr addrspace(3) %166, align 8, !dbg !37
  %167 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 12, !dbg !37
  %.extract10 = load i32, ptr addrspace(3) %167, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %105, i1 %19) #2, !dbg !37
  %.extract11 = extractelement <4 x i32> %164, i64 0, !dbg !37
  %.extract12 = extractelement <4 x i32> %164, i64 1, !dbg !37
  %.extract13 = extractelement <4 x i32> %164, i64 2, !dbg !37
  %.extract14 = extractelement <4 x i32> %164, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %107, i1 %19) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2wn3ejmsha5hn4vmb4gldqjeqnfuay2armejfescyld2dom7cv.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_1", linkageName: "triton_poi_fused_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 56, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
