; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 9216, !dbg !14
  %16 = srem i32 %14, 768, !dbg !15
  %17 = srem i32 %14, 64, !dbg !16
  %18 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !17
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %20 = sdiv <2 x i32> %19, <i32 768, i32 64>, !dbg !17
  %21 = srem <2 x i32> %20, splat (i32 12), !dbg !18
  %22 = add nsw <2 x i32> %21, splat (i32 -2), !dbg !19
  %shift = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %23 = or <2 x i32> %22, %shift, !dbg !20
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !20
  %25 = icmp ult i32 %24, 8, !dbg !20
  %26 = add nsw i32 %16, -1152, !dbg !21
  %27 = extractelement <2 x i32> %21, i64 0, !dbg !22
  %28 = shl nsw i32 %27, 9, !dbg !22
  %29 = shl nsw i32 %15, 12, !dbg !23
  %30 = add nsw i32 %26, %29, !dbg !24
  %31 = add nsw i32 %30, %28, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !28
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !29
  %37 = sext i32 %17 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !32
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !33
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !33
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !33
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !33
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !33
  %46 = bitcast i32 %42 to float, !dbg !33
  %47 = bitcast i32 %43 to float, !dbg !33
  %48 = bitcast i32 %44 to float, !dbg !33
  %49 = bitcast i32 %45 to float, !dbg !33
  %50 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %51 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %52 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %53 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %54, 0, !dbg !35
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %55, 0, !dbg !35
  br i1 %.not.i, label %61, label %56, !dbg !35

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !35

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !35
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %66, 0, !dbg !35
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !35
  br i1 %.not.i1, label %73, label %68, !dbg !35

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !35

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !35
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %78, 0, !dbg !35
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %79, 0, !dbg !35
  br i1 %.not.i6, label %85, label %80, !dbg !35

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !35

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %81, %83, %86, %88
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %90, 0, !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %91, 0, !dbg !35
  br i1 %.not.i11, label %97, label %92, !dbg !35

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %93, %95, %98, %100
  %.0.i13 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !35
  %102 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = fsub float %103, %105, !dbg !36
  %107 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = fsub float %108, %110, !dbg !36
  %112 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = fsub float %113, %115, !dbg !36
  %117 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = fsub float %118, %120, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %134 = fmul float %121, %130, !dbg !38
  %135 = fmul float %116, %131, !dbg !38
  %136 = fmul float %111, %132, !dbg !38
  %137 = fmul float %106, %133, !dbg !38
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !39
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !40
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !40
  %144 = bitcast i32 %140 to float, !dbg !40
  %145 = bitcast i32 %141 to float, !dbg !40
  %146 = bitcast i32 %142 to float, !dbg !40
  %147 = bitcast i32 %143 to float, !dbg !40
  %148 = fmul float %134, %144, !dbg !41
  %149 = fmul float %135, %145, !dbg !41
  %150 = fmul float %136, %146, !dbg !41
  %151 = fmul float %137, %147, !dbg !41
  %152 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !42
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !43
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !43
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !43
  %158 = bitcast i32 %154 to float, !dbg !43
  %159 = bitcast i32 %155 to float, !dbg !43
  %160 = bitcast i32 %156 to float, !dbg !43
  %161 = bitcast i32 %157 to float, !dbg !43
  %162 = fadd float %148, %158, !dbg !44
  %163 = fadd float %149, %159, !dbg !44
  %164 = fadd float %150, %160, !dbg !44
  %165 = fadd float %151, %161, !dbg !44
  %166 = fadd float %162, %129, !dbg !45
  %167 = fadd float %163, %127, !dbg !45
  %168 = fadd float %164, %125, !dbg !45
  %169 = fadd float %165, %123, !dbg !45
  %170 = sext i32 %14 to i64, !dbg !46
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !46
  %172 = bitcast float %166 to i32, !dbg !47
  %173 = select i1 %25, i32 %172, i32 0, !dbg !48
  %174 = bitcast float %167 to i32, !dbg !47
  %175 = select i1 %25, i32 %174, i32 0, !dbg !48
  %176 = bitcast float %168 to i32, !dbg !47
  %177 = select i1 %25, i32 %176, i32 0, !dbg !48
  %178 = bitcast float %169 to i32, !dbg !47
  %179 = select i1 %25, i32 %178, i32 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %175, i32 %177, i32 %179, ptr addrspace(1) %171, i1 true) #3, !dbg !47
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c575xyjf5plyzr77axqac7cmeyokw3jmyfablo6nldcw6audfqr5.py", directory: "inductor_cache/57")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 24, column: 28, scope: !7)
!19 = !DILocation(line: 38, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 19, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 41, column: 50, scope: !7)
!23 = !DILocation(line: 41, column: 60, scope: !7)
!24 = !DILocation(line: 41, column: 46, scope: !7)
!25 = !DILocation(line: 41, column: 55, scope: !7)
!26 = !DILocation(line: 41, column: 31, scope: !7)
!27 = !DILocation(line: 41, column: 65, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 65, scope: !7)
!30 = !DILocation(line: 43, column: 31, scope: !7)
!31 = !DILocation(line: 43, column: 36, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 27, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 31, scope: !7)
!40 = !DILocation(line: 54, column: 36, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 31, scope: !7)
!43 = !DILocation(line: 56, column: 36, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 25, scope: !7)
!47 = !DILocation(line: 61, column: 37, scope: !7)
!48 = !DILocation(line: 60, column: 35, scope: !7)
!49 = !DILocation(line: 61, column: 4, scope: !7)
