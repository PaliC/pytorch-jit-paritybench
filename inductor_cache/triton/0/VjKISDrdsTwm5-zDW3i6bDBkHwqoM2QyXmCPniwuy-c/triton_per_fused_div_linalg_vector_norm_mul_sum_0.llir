; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 16, !dbg !14
  %12 = shl i32 %7, 1, !dbg !15
  %13 = and i32 %12, 14, !dbg !15
  %14 = shl i32 %10, 4, !dbg !16
  %15 = or disjoint i32 %14, %13, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !19
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !19
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !19
  %21 = bitcast i32 %19 to float, !dbg !19
  %22 = bitcast i32 %20 to float, !dbg !19
  %23 = fmul float %21, %21, !dbg !20
  %24 = fmul float %22, %22, !dbg !20
  %25 = fadd float %23, %24, !dbg !21
  %26 = select i1 %11, float %25, float 0.000000e+00, !dbg !21
  %27 = bitcast float %26 to i32, !dbg !26
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 4, i32 31), !dbg !26
  %29 = bitcast i32 %28 to float, !dbg !26
  %30 = fadd float %26, %29, !dbg !21
  %31 = bitcast float %30 to i32, !dbg !26
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 2, i32 31), !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = fadd float %30, %33, !dbg !21
  %35 = bitcast float %34 to i32, !dbg !26
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = fadd float %34, %37, !dbg !21
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i1 = icmp eq i32 %41, 0, !dbg !27
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i4 = icmp eq i32 %42, 0, !dbg !27
  br i1 %.not.i1, label %48, label %43, !dbg !27

43:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %46, label %44, !dbg !27

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

48:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %51, label %49, !dbg !27

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %44, %46, %49, %51
  %.0.i3 = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !27
  %53 = and i32 %7, 7, !dbg !12
  %54 = or disjoint i32 %6, %53, !dbg !13
  %55 = icmp slt i32 %54, 16, !dbg !14
  %56 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !28
  %57 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !32
  %58 = or i1 %56, %57, !dbg !33
  %59 = select i1 %58, float %.0.i3, float 0x3D71979980000000, !dbg !34
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %59) #5, !dbg !35
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float %59) #5, !dbg !35
  %62 = fmul float %60, %60, !dbg !36
  %63 = fmul float %61, %61, !dbg !36
  %64 = fadd float %62, %63, !dbg !37
  %65 = select i1 %11, float %64, float 0.000000e+00, !dbg !37
  %66 = bitcast float %65 to i32, !dbg !39
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !39
  %68 = bitcast i32 %67 to float, !dbg !39
  %69 = fadd float %65, %68, !dbg !37
  %70 = bitcast float %69 to i32, !dbg !39
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !39
  %72 = bitcast i32 %71 to float, !dbg !39
  %73 = fadd float %69, %72, !dbg !37
  %74 = bitcast float %73 to i32, !dbg !39
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = fadd float %73, %76, !dbg !37
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !40
  %79 = bitcast float %77 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !40
  %81 = load i32, ptr addrspace(3) %80, align 4, !dbg !40
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !41
  %83 = bitcast float %60 to i32, !dbg !42
  %84 = bitcast float %61 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %84, ptr addrspace(1) %82, i1 %11) #5, !dbg !42
  %85 = sext i32 %54 to i64, !dbg !43
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !43
  %87 = and i32 %7, 56, !dbg !44
  %88 = icmp eq i32 %87, 0, !dbg !44
  %89 = and i1 %88, %55, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %86, i1 %89) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7ufs2qzgzfquhnmvr5l5dfeframw7s4lrg22miwuvlyyayhqnq.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_mul_sum_0", linkageName: "triton_per_fused_div_linalg_vector_norm_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 35, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 36, column: 26, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 40, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !38)
!40 = !DILocation(line: 43, column: 29, scope: !7)
!41 = !DILocation(line: 44, column: 25, scope: !7)
!42 = !DILocation(line: 44, column: 44, scope: !7)
!43 = !DILocation(line: 45, column: 25, scope: !7)
!44 = !DILocation(line: 45, column: 37, scope: !7)
!45 = !DILocation(line: 45, column: 4, scope: !7)
