; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %33 = shl i32 %32, 7, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = and i32 %34, 127, !dbg !12
  %36 = or disjoint i32 %33, %35, !dbg !13
  %37 = icmp slt i32 %36, 1280, !dbg !14
  %38 = sdiv i32 %36, 320, !dbg !15
  %39 = sdiv i32 %36, 20, !dbg !16
  %40 = sdiv i32 %36, 80, !dbg !17
  %41 = srem i32 %40, 4, !dbg !18
  %42 = srem i32 %39, 4, !dbg !19
  %43 = shl nsw i32 %38, 6, !dbg !20
  %44 = shl nsw i32 %38, 2, !dbg !21
  %45 = sext i32 %42 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !22
  %47 = sext i32 %41 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !23
  %49 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !24
  %50 = insertelement <2 x i32> %49, i32 %36, i64 1, !dbg !24
  %51 = srem <2 x i32> %50, <i32 16, i32 20>, !dbg !24
  %52 = extractelement <2 x i32> %51, i64 1, !dbg !25
  %53 = icmp slt i32 %52, 4, !dbg !26
  %54 = shl nsw i32 %52, 4, !dbg !27
  %55 = insertelement <2 x i32> <i32 poison, i32 -4>, i32 %43, i64 0, !dbg !28
  %56 = add nsw <2 x i32> %55, %51, !dbg !28
  %57 = extractelement <2 x i32> %56, i64 0, !dbg !29
  %58 = add nsw i32 %57, %54, !dbg !30
  %59 = sext i32 %58 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = and i1 %37, %53, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61) #1, !dbg !33
  %63 = bitcast i32 %62 to float, !dbg !33
  %64 = add nsw i32 %44, %52, !dbg !34
  %65 = sext i32 %64 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %61, i32 0, i1 %61) #1, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fsub float %68, %68, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %61, i32 0, i1 %61) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = fmul float %69, %71, !dbg !39
  %73 = fadd float %72, %68, !dbg !40
  %74 = fsub float %73, %63, !dbg !41
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %61, i32 0, i1 %61) #1, !dbg !42
  %76 = bitcast i32 %75 to float, !dbg !42
  %77 = fmul float %74, %76, !dbg !43
  %78 = fadd float %77, %63, !dbg !44
  %79 = and i32 %52, -4, !dbg !45
  %80 = icmp eq i32 %79, 4, !dbg !45
  %81 = extractelement <2 x i32> %56, i64 1, !dbg !46
  %82 = shl nsw i32 %81, 4, !dbg !46
  %83 = add nsw i32 %57, %82, !dbg !47
  %84 = sext i32 %83 to i64, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %84, !dbg !48
  %86 = and i1 %37, %80, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 0, i1 %86) #1, !dbg !50
  %88 = bitcast i32 %87 to float, !dbg !50
  %89 = getelementptr i64, ptr addrspace(1) %8, i64 %47, !dbg !51
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %89, i1 %86, i1 %86) #1, !dbg !52
  %91 = lshr i64 %90, 62, !dbg !53
  %92 = and i64 %91, 2, !dbg !53
  %93 = add i64 %92, %90, !dbg !53
  %94 = getelementptr i64, ptr addrspace(1) %9, i64 %45, !dbg !54
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %86, i1 %86) #1, !dbg !55
  %96 = lshr i64 %95, 62, !dbg !56
  %97 = and i64 %96, 2, !dbg !56
  %98 = add i64 %97, %95, !dbg !56
  %99 = shl i64 %93, 3, !dbg !57
  %100 = shl nsw i32 %38, 4, !dbg !58
  %101 = sext i32 %100 to i64, !dbg !59
  %102 = sext i32 %81 to i64, !dbg !60
  %.idx = shl i64 %98, 4, !dbg !61
  %103 = getelementptr i8, ptr addrspace(1) %10, i64 %.idx, !dbg !61
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %99, !dbg !61
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %101, !dbg !61
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %102, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %86, i32 0, i1 %86) #1, !dbg !62
  %108 = bitcast i32 %107 to float, !dbg !62
  %109 = getelementptr i64, ptr addrspace(1) %11, i64 %45, !dbg !63
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %109, i1 %86, i1 %86) #1, !dbg !64
  %111 = lshr i64 %110, 62, !dbg !65
  %112 = and i64 %111, 2, !dbg !65
  %113 = add i64 %112, %110, !dbg !65
  %.idx1 = shl i64 %113, 4, !dbg !66
  %114 = getelementptr i8, ptr addrspace(1) %10, i64 %.idx1, !dbg !66
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %99, !dbg !66
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %101, !dbg !66
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %102, !dbg !66
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %86, i32 0, i1 %86) #1, !dbg !67
  %119 = bitcast i32 %118 to float, !dbg !67
  %120 = fsub float %119, %108, !dbg !68
  %121 = getelementptr float, ptr addrspace(1) %12, i64 %45, !dbg !69
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %86, i32 0, i1 %86) #1, !dbg !70
  %123 = bitcast i32 %122 to float, !dbg !70
  %124 = fmul float %120, %123, !dbg !71
  %125 = fadd float %124, %108, !dbg !72
  %126 = fsub float %125, %88, !dbg !73
  %127 = getelementptr float, ptr addrspace(1) %13, i64 %47, !dbg !74
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %86, i32 0, i1 %86) #1, !dbg !75
  %129 = bitcast i32 %128 to float, !dbg !75
  %130 = fmul float %126, %129, !dbg !76
  %131 = fadd float %130, %88, !dbg !77
  %132 = icmp eq i32 %79, 8, !dbg !78
  %133 = add nsw i32 %52, -8, !dbg !79
  %134 = shl nsw i32 %133, 4, !dbg !80
  %135 = add nsw i32 %57, %134, !dbg !81
  %136 = sext i32 %135 to i64, !dbg !82
  %137 = getelementptr float, ptr addrspace(1) %14, i64 %136, !dbg !82
  %138 = and i1 %37, %132, !dbg !83
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %138, i32 0, i1 %138) #1, !dbg !84
  %140 = bitcast i32 %139 to float, !dbg !84
  %141 = getelementptr i64, ptr addrspace(1) %15, i64 %47, !dbg !85
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %141, i1 %138, i1 %138) #1, !dbg !86
  %143 = add i64 %142, 3, !dbg !87
  %144 = icmp slt i64 %142, 0, !dbg !88
  %145 = select i1 %144, i64 %143, i64 %142, !dbg !89
  %146 = getelementptr i64, ptr addrspace(1) %16, i64 %45, !dbg !90
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %146, i1 %138, i1 %138) #1, !dbg !91
  %148 = icmp slt i64 %147, 0, !dbg !92
  %149 = shl i64 %147, 2, !dbg !93
  %150 = add i64 %149, 12, !dbg !93
  %151 = select i1 %148, i64 %150, i64 %149, !dbg !93
  %152 = mul i64 %145, 12, !dbg !94
  %153 = mul nsw i32 %38, 36, !dbg !95
  %154 = sext i32 %153 to i64, !dbg !96
  %155 = sext i32 %133 to i64, !dbg !97
  %156 = getelementptr float, ptr addrspace(1) %17, i64 %151, !dbg !98
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %152, !dbg !98
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %154, !dbg !98
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %155, !dbg !98
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %138, i32 0, i1 %138) #1, !dbg !99
  %161 = bitcast i32 %160 to float, !dbg !99
  %162 = getelementptr i64, ptr addrspace(1) %18, i64 %45, !dbg !100
  %163 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %162, i1 %138, i1 %138) #1, !dbg !101
  %164 = icmp slt i64 %163, 0, !dbg !102
  %165 = shl i64 %163, 2, !dbg !103
  %166 = add i64 %165, 12, !dbg !103
  %167 = select i1 %164, i64 %166, i64 %165, !dbg !103
  %168 = getelementptr float, ptr addrspace(1) %17, i64 %167, !dbg !104
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %152, !dbg !104
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %154, !dbg !104
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %155, !dbg !104
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %138, i32 0, i1 %138) #1, !dbg !105
  %173 = bitcast i32 %172 to float, !dbg !105
  %174 = fsub float %173, %161, !dbg !106
  %175 = getelementptr float, ptr addrspace(1) %19, i64 %45, !dbg !107
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %138, i32 0, i1 %138) #1, !dbg !108
  %177 = bitcast i32 %176 to float, !dbg !108
  %178 = fmul float %174, %177, !dbg !109
  %179 = fadd float %178, %161, !dbg !110
  %180 = fsub float %179, %140, !dbg !111
  %181 = getelementptr float, ptr addrspace(1) %20, i64 %47, !dbg !112
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %138, i32 0, i1 %138) #1, !dbg !113
  %183 = bitcast i32 %182 to float, !dbg !113
  %184 = fmul float %180, %183, !dbg !114
  %185 = fadd float %184, %140, !dbg !115
  %186 = icmp eq i32 %79, 12, !dbg !116
  %187 = add nsw i32 %52, -12, !dbg !117
  %188 = shl nsw i32 %187, 4, !dbg !118
  %189 = add nsw i32 %57, %188, !dbg !119
  %190 = sext i32 %189 to i64, !dbg !120
  %191 = getelementptr float, ptr addrspace(1) %21, i64 %190, !dbg !120
  %192 = and i1 %37, %186, !dbg !121
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %192, i32 0, i1 %192) #1, !dbg !122
  %194 = bitcast i32 %193 to float, !dbg !122
  %195 = getelementptr i64, ptr addrspace(1) %22, i64 %47, !dbg !123
  %196 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %195, i1 %192, i1 %192) #1, !dbg !124
  %197 = add i64 %196, 6, !dbg !125
  %198 = icmp slt i64 %196, 0, !dbg !126
  %199 = select i1 %198, i64 %197, i64 %196, !dbg !127
  %200 = getelementptr i64, ptr addrspace(1) %23, i64 %45, !dbg !128
  %201 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %200, i1 %192, i1 %192) #1, !dbg !129
  %202 = icmp slt i64 %201, 0, !dbg !130
  %203 = shl i64 %201, 2, !dbg !131
  %204 = add i64 %203, 24, !dbg !131
  %205 = select i1 %202, i64 %204, i64 %203, !dbg !131
  %206 = mul i64 %199, 24, !dbg !132
  %207 = mul nsw i32 %38, 144, !dbg !133
  %208 = sext i32 %207 to i64, !dbg !134
  %209 = sext i32 %187 to i64, !dbg !135
  %210 = getelementptr float, ptr addrspace(1) %24, i64 %205, !dbg !136
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %206, !dbg !136
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %208, !dbg !136
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %209, !dbg !136
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %192, i32 0, i1 %192) #1, !dbg !137
  %215 = bitcast i32 %214 to float, !dbg !137
  %216 = getelementptr i64, ptr addrspace(1) %25, i64 %45, !dbg !138
  %217 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %216, i1 %192, i1 %192) #1, !dbg !139
  %218 = icmp slt i64 %217, 0, !dbg !140
  %219 = shl i64 %217, 2, !dbg !141
  %220 = add i64 %219, 24, !dbg !141
  %221 = select i1 %218, i64 %220, i64 %219, !dbg !141
  %222 = getelementptr float, ptr addrspace(1) %24, i64 %221, !dbg !142
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %206, !dbg !142
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %208, !dbg !142
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %209, !dbg !142
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %192, i32 0, i1 %192) #1, !dbg !143
  %227 = bitcast i32 %226 to float, !dbg !143
  %228 = fsub float %227, %215, !dbg !144
  %229 = getelementptr float, ptr addrspace(1) %26, i64 %45, !dbg !145
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %192, i32 0, i1 %192) #1, !dbg !146
  %231 = bitcast i32 %230 to float, !dbg !146
  %232 = fmul float %228, %231, !dbg !147
  %233 = fadd float %232, %215, !dbg !148
  %234 = fsub float %233, %194, !dbg !149
  %235 = getelementptr float, ptr addrspace(1) %27, i64 %47, !dbg !150
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %192, i32 0, i1 %192) #1, !dbg !151
  %237 = bitcast i32 %236 to float, !dbg !151
  %238 = fmul float %234, %237, !dbg !152
  %239 = fadd float %238, %194, !dbg !153
  %240 = icmp sgt i32 %52, 15, !dbg !25
  %241 = add nsw i32 %57, -256, !dbg !29
  %242 = add nsw i32 %241, %54, !dbg !154
  %243 = sext i32 %242 to i64, !dbg !155
  %244 = getelementptr float, ptr addrspace(1) %28, i64 %243, !dbg !155
  %245 = and i1 %37, %240, !dbg !156
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %245, i32 0, i1 %245) #1, !dbg !157
  %247 = bitcast i32 %246 to float, !dbg !157
  %248 = select i1 %186, float %239, float %247, !dbg !158
  %249 = select i1 %132, float %185, float %248, !dbg !158
  %250 = select i1 %80, float %131, float %249, !dbg !158
  %251 = select i1 %53, float %78, float %250, !dbg !158
  %252 = sext i32 %36 to i64, !dbg !159
  %253 = getelementptr float, ptr addrspace(1) %29, i64 %252, !dbg !159
  %254 = bitcast float %251 to i32, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %254, ptr addrspace(1) %253, i1 %37) #1, !dbg !160
  ret void, !dbg !161
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c75o3q52dikwwx5ftiieuz2u63qcaupjmijz2q25j5fpljw2goi5.py", directory: "inductor_cache/75")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 35, column: 48, scope: !7)
!21 = !DILocation(line: 45, column: 33, scope: !7)
!22 = !DILocation(line: 51, column: 31, scope: !7)
!23 = !DILocation(line: 55, column: 31, scope: !7)
!24 = !DILocation(line: 26, column: 27, scope: !7)
!25 = !DILocation(line: 150, column: 21, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 39, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 153, column: 38, scope: !7)
!30 = !DILocation(line: 35, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 35, column: 53, scope: !7)
!34 = !DILocation(line: 45, column: 39, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 45, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 36, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 36, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 19, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 40, scope: !7)
!47 = !DILocation(line: 64, column: 53, scope: !7)
!48 = !DILocation(line: 64, column: 31, scope: !7)
!49 = !DILocation(line: 64, column: 69, scope: !7)
!50 = !DILocation(line: 64, column: 61, scope: !7)
!51 = !DILocation(line: 65, column: 31, scope: !7)
!52 = !DILocation(line: 65, column: 36, scope: !7)
!53 = !DILocation(line: 69, column: 35, scope: !7)
!54 = !DILocation(line: 70, column: 31, scope: !7)
!55 = !DILocation(line: 70, column: 36, scope: !7)
!56 = !DILocation(line: 73, column: 35, scope: !7)
!57 = !DILocation(line: 74, column: 44, scope: !7)
!58 = !DILocation(line: 74, column: 55, scope: !7)
!59 = !DILocation(line: 74, column: 52, scope: !7)
!60 = !DILocation(line: 74, column: 61, scope: !7)
!61 = !DILocation(line: 74, column: 32, scope: !7)
!62 = !DILocation(line: 74, column: 74, scope: !7)
!63 = !DILocation(line: 75, column: 32, scope: !7)
!64 = !DILocation(line: 75, column: 37, scope: !7)
!65 = !DILocation(line: 78, column: 35, scope: !7)
!66 = !DILocation(line: 79, column: 32, scope: !7)
!67 = !DILocation(line: 79, column: 74, scope: !7)
!68 = !DILocation(line: 80, column: 20, scope: !7)
!69 = !DILocation(line: 81, column: 32, scope: !7)
!70 = !DILocation(line: 81, column: 37, scope: !7)
!71 = !DILocation(line: 82, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 20, scope: !7)
!73 = !DILocation(line: 84, column: 20, scope: !7)
!74 = !DILocation(line: 85, column: 32, scope: !7)
!75 = !DILocation(line: 85, column: 37, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 87, column: 20, scope: !7)
!78 = !DILocation(line: 93, column: 20, scope: !7)
!79 = !DILocation(line: 94, column: 48, scope: !7)
!80 = !DILocation(line: 94, column: 41, scope: !7)
!81 = !DILocation(line: 94, column: 54, scope: !7)
!82 = !DILocation(line: 94, column: 32, scope: !7)
!83 = !DILocation(line: 94, column: 70, scope: !7)
!84 = !DILocation(line: 94, column: 62, scope: !7)
!85 = !DILocation(line: 95, column: 32, scope: !7)
!86 = !DILocation(line: 95, column: 37, scope: !7)
!87 = !DILocation(line: 97, column: 20, scope: !7)
!88 = !DILocation(line: 98, column: 20, scope: !7)
!89 = !DILocation(line: 99, column: 35, scope: !7)
!90 = !DILocation(line: 100, column: 32, scope: !7)
!91 = !DILocation(line: 100, column: 37, scope: !7)
!92 = !DILocation(line: 102, column: 20, scope: !7)
!93 = !DILocation(line: 104, column: 34, scope: !7)
!94 = !DILocation(line: 104, column: 45, scope: !7)
!95 = !DILocation(line: 104, column: 56, scope: !7)
!96 = !DILocation(line: 104, column: 53, scope: !7)
!97 = !DILocation(line: 104, column: 62, scope: !7)
!98 = !DILocation(line: 104, column: 32, scope: !7)
!99 = !DILocation(line: 104, column: 75, scope: !7)
!100 = !DILocation(line: 105, column: 32, scope: !7)
!101 = !DILocation(line: 105, column: 37, scope: !7)
!102 = !DILocation(line: 107, column: 20, scope: !7)
!103 = !DILocation(line: 109, column: 34, scope: !7)
!104 = !DILocation(line: 109, column: 32, scope: !7)
!105 = !DILocation(line: 109, column: 75, scope: !7)
!106 = !DILocation(line: 110, column: 20, scope: !7)
!107 = !DILocation(line: 111, column: 32, scope: !7)
!108 = !DILocation(line: 111, column: 37, scope: !7)
!109 = !DILocation(line: 112, column: 20, scope: !7)
!110 = !DILocation(line: 113, column: 20, scope: !7)
!111 = !DILocation(line: 114, column: 20, scope: !7)
!112 = !DILocation(line: 115, column: 32, scope: !7)
!113 = !DILocation(line: 115, column: 37, scope: !7)
!114 = !DILocation(line: 116, column: 20, scope: !7)
!115 = !DILocation(line: 117, column: 20, scope: !7)
!116 = !DILocation(line: 123, column: 20, scope: !7)
!117 = !DILocation(line: 124, column: 49, scope: !7)
!118 = !DILocation(line: 124, column: 41, scope: !7)
!119 = !DILocation(line: 124, column: 55, scope: !7)
!120 = !DILocation(line: 124, column: 32, scope: !7)
!121 = !DILocation(line: 124, column: 71, scope: !7)
!122 = !DILocation(line: 124, column: 63, scope: !7)
!123 = !DILocation(line: 125, column: 32, scope: !7)
!124 = !DILocation(line: 125, column: 37, scope: !7)
!125 = !DILocation(line: 127, column: 20, scope: !7)
!126 = !DILocation(line: 128, column: 20, scope: !7)
!127 = !DILocation(line: 129, column: 35, scope: !7)
!128 = !DILocation(line: 130, column: 33, scope: !7)
!129 = !DILocation(line: 130, column: 38, scope: !7)
!130 = !DILocation(line: 132, column: 22, scope: !7)
!131 = !DILocation(line: 134, column: 35, scope: !7)
!132 = !DILocation(line: 134, column: 47, scope: !7)
!133 = !DILocation(line: 134, column: 59, scope: !7)
!134 = !DILocation(line: 134, column: 55, scope: !7)
!135 = !DILocation(line: 134, column: 65, scope: !7)
!136 = !DILocation(line: 134, column: 33, scope: !7)
!137 = !DILocation(line: 134, column: 79, scope: !7)
!138 = !DILocation(line: 135, column: 33, scope: !7)
!139 = !DILocation(line: 135, column: 38, scope: !7)
!140 = !DILocation(line: 137, column: 22, scope: !7)
!141 = !DILocation(line: 139, column: 35, scope: !7)
!142 = !DILocation(line: 139, column: 33, scope: !7)
!143 = !DILocation(line: 139, column: 79, scope: !7)
!144 = !DILocation(line: 140, column: 22, scope: !7)
!145 = !DILocation(line: 141, column: 33, scope: !7)
!146 = !DILocation(line: 141, column: 38, scope: !7)
!147 = !DILocation(line: 142, column: 22, scope: !7)
!148 = !DILocation(line: 143, column: 22, scope: !7)
!149 = !DILocation(line: 144, column: 22, scope: !7)
!150 = !DILocation(line: 145, column: 33, scope: !7)
!151 = !DILocation(line: 145, column: 38, scope: !7)
!152 = !DILocation(line: 146, column: 22, scope: !7)
!153 = !DILocation(line: 147, column: 21, scope: !7)
!154 = !DILocation(line: 153, column: 56, scope: !7)
!155 = !DILocation(line: 153, column: 33, scope: !7)
!156 = !DILocation(line: 153, column: 73, scope: !7)
!157 = !DILocation(line: 153, column: 64, scope: !7)
!158 = !DILocation(line: 0, scope: !7)
!159 = !DILocation(line: 158, column: 25, scope: !7)
!160 = !DILocation(line: 158, column: 38, scope: !7)
!161 = !DILocation(line: 158, column: 4, scope: !7)
