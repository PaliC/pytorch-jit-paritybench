; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 24, !dbg !14
  %12 = mul i32 %11, 24, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %10, 24, !dbg !15
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !16
  %.lhs.trunc1 = trunc nsw i32 %13 to i8, !dbg !16
  %14 = shl nsw i8 %.lhs.trunc, 2, !dbg !17
  %.lhs.trunc3 = add nsw i8 %14, 27, !dbg !17
  %15 = insertelement <2 x i8> poison, i8 %.lhs.trunc, i64 0, !dbg !16
  %16 = insertelement <2 x i8> %15, i8 %.lhs.trunc3, i64 1, !dbg !16
  %17 = sdiv <2 x i8> %16, <i8 6, i8 24>, !dbg !16
  %18 = extractelement <2 x i8> %17, i64 0, !dbg !18
  %.sext = sext i8 %18 to i32, !dbg !16
  %19 = extractelement <2 x i8> %17, i64 1, !dbg !18
  %.sext4 = sext i8 %19 to i32, !dbg !17
  %20 = shl nsw i8 %.lhs.trunc1, 2, !dbg !17
  %.lhs.trunc5 = add nsw i8 %20, 27, !dbg !17
  %21 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !16
  %22 = insertelement <2 x i8> %21, i8 %.lhs.trunc5, i64 1, !dbg !16
  %23 = sdiv <2 x i8> %22, <i8 6, i8 24>, !dbg !16
  %24 = extractelement <2 x i8> %23, i64 0, !dbg !18
  %.sext2 = sext i8 %24 to i32, !dbg !16
  %25 = extractelement <2 x i8> %23, i64 1, !dbg !18
  %.sext6 = sext i8 %25 to i32, !dbg !17
  %26 = icmp slt i8 %18, %19, !dbg !18
  %27 = icmp slt i8 %24, %25, !dbg !18
  %28 = shl nsw i32 %11, 4, !dbg !19
  %29 = add nsw i32 %28, %.sext, !dbg !20
  %30 = add nsw i32 %28, %.sext2, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %26, i32 0, i1 %26) #1, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %27, i32 0, i1 %27) #1, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = add nsw i32 %.sext, 1, !dbg !23
  %40 = add nsw i32 %.sext2, 1, !dbg !23
  %41 = icmp slt i32 %39, %.sext4, !dbg !24
  %42 = icmp slt i32 %40, %.sext6, !dbg !24
  %43 = or disjoint i32 %28, 1, !dbg !25
  %44 = add nsw i32 %43, %.sext, !dbg !26
  %45 = add nsw i32 %43, %.sext2, !dbg !26
  %46 = sext i32 %44 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = sext i32 %45 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %41, i32 0, i1 %41) #1, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42) #1, !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = fadd float %36, %51, !dbg !29
  %55 = fadd float %38, %53, !dbg !29
  %56 = or disjoint i32 %28, 4, !dbg !30
  %57 = add nsw i32 %56, %.sext, !dbg !31
  %58 = add nsw i32 %56, %.sext2, !dbg !31
  %59 = sext i32 %57 to i64, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !32
  %61 = sext i32 %58 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %26, i32 0, i1 %26) #1, !dbg !33
  %64 = bitcast i32 %63 to float, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %27, i32 0, i1 %27) #1, !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = fadd float %54, %64, !dbg !34
  %68 = fadd float %55, %66, !dbg !34
  %69 = or disjoint i32 %28, 5, !dbg !35
  %70 = add nsw i32 %69, %.sext, !dbg !36
  %71 = add nsw i32 %69, %.sext2, !dbg !36
  %72 = sext i32 %70 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !37
  %74 = sext i32 %71 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !37
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %41, i32 0, i1 %41) #1, !dbg !38
  %77 = bitcast i32 %76 to float, !dbg !38
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %42, i32 0, i1 %42) #1, !dbg !38
  %79 = bitcast i32 %78 to float, !dbg !38
  %80 = fadd float %67, %77, !dbg !39
  %81 = fadd float %68, %79, !dbg !39
  %82 = or disjoint i32 %28, 8, !dbg !40
  %83 = add nsw i32 %82, %.sext, !dbg !41
  %84 = add nsw i32 %82, %.sext2, !dbg !41
  %85 = sext i32 %83 to i64, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !42
  %87 = sext i32 %84 to i64, !dbg !42
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %26, i32 0, i1 %26) #1, !dbg !43
  %90 = bitcast i32 %89 to float, !dbg !43
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %27, i32 0, i1 %27) #1, !dbg !43
  %92 = bitcast i32 %91 to float, !dbg !43
  %93 = fadd float %80, %90, !dbg !44
  %94 = fadd float %81, %92, !dbg !44
  %95 = or disjoint i32 %28, 9, !dbg !45
  %96 = add nsw i32 %95, %.sext, !dbg !46
  %97 = add nsw i32 %95, %.sext2, !dbg !46
  %98 = sext i32 %96 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !47
  %100 = sext i32 %97 to i64, !dbg !47
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !47
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %41, i32 0, i1 %41) #1, !dbg !48
  %103 = bitcast i32 %102 to float, !dbg !48
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %42, i32 0, i1 %42) #1, !dbg !48
  %105 = bitcast i32 %104 to float, !dbg !48
  %106 = fadd float %93, %103, !dbg !49
  %107 = fadd float %94, %105, !dbg !49
  %108 = or disjoint i32 %28, 12, !dbg !50
  %109 = add nsw i32 %108, %.sext, !dbg !51
  %110 = add nsw i32 %108, %.sext2, !dbg !51
  %111 = sext i32 %109 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !52
  %113 = sext i32 %110 to i64, !dbg !52
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !52
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %26, i32 0, i1 %26) #1, !dbg !53
  %116 = bitcast i32 %115 to float, !dbg !53
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %27, i32 0, i1 %27) #1, !dbg !53
  %118 = bitcast i32 %117 to float, !dbg !53
  %119 = fadd float %106, %116, !dbg !54
  %120 = fadd float %107, %118, !dbg !54
  %121 = or disjoint i32 %28, 13, !dbg !55
  %122 = add nsw i32 %121, %.sext, !dbg !56
  %123 = add nsw i32 %121, %.sext2, !dbg !56
  %124 = sext i32 %122 to i64, !dbg !57
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !57
  %126 = sext i32 %123 to i64, !dbg !57
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !57
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %41, i32 0, i1 %41) #1, !dbg !58
  %129 = bitcast i32 %128 to float, !dbg !58
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %42, i32 0, i1 %42) #1, !dbg !58
  %131 = bitcast i32 %130 to float, !dbg !58
  %132 = fadd float %119, %129, !dbg !59
  %133 = fadd float %120, %131, !dbg !59
  %134 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %135 = select i1 %27, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %136 = select i1 %41, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %137 = select i1 %42, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %138 = fadd float %134, %136, !dbg !62
  %139 = fadd float %135, %137, !dbg !62
  %140 = fadd float %134, %138, !dbg !63
  %141 = fadd float %135, %139, !dbg !63
  %142 = fadd float %136, %140, !dbg !64
  %143 = fadd float %137, %141, !dbg !64
  %144 = fadd float %134, %142, !dbg !65
  %145 = fadd float %135, %143, !dbg !65
  %146 = fadd float %136, %144, !dbg !66
  %147 = fadd float %137, %145, !dbg !66
  %148 = fadd float %134, %146, !dbg !67
  %149 = fadd float %135, %147, !dbg !67
  %150 = fadd float %136, %148, !dbg !68
  %151 = fadd float %137, %149, !dbg !68
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %150) #1, !dbg !69
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %151) #1, !dbg !69
  %154 = sext i32 %9 to i64, !dbg !70
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !70
  %156 = bitcast float %152 to i32, !dbg !71
  %157 = bitcast float %153 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 true) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3we22s5htv3svkwiigl2z7t7czlyoo5cz65wcqj276jffvcqrhp.py", directory: "inductor_cache/3w")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_1", linkageName: "triton_poi_fused__adaptive_avg_pool2d_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 17, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 33, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 16, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 44, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 55, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 43, column: 35, scope: !7)
!31 = !DILocation(line: 43, column: 44, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 55, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 35, scope: !7)
!36 = !DILocation(line: 46, column: 44, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 55, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 44, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 54, column: 44, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 55, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 36, scope: !7)
!51 = !DILocation(line: 59, column: 45, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 56, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 45, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 56, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 34, scope: !7)
!61 = !DILocation(line: 69, column: 35, scope: !7)
!62 = !DILocation(line: 70, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 20, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 82, column: 20, scope: !7)
!66 = !DILocation(line: 86, column: 20, scope: !7)
!67 = !DILocation(line: 90, column: 20, scope: !7)
!68 = !DILocation(line: 94, column: 20, scope: !7)
!69 = !DILocation(line: 95, column: 20, scope: !7)
!70 = !DILocation(line: 96, column: 25, scope: !7)
!71 = !DILocation(line: 96, column: 37, scope: !7)
!72 = !DILocation(line: 96, column: 4, scope: !7)
