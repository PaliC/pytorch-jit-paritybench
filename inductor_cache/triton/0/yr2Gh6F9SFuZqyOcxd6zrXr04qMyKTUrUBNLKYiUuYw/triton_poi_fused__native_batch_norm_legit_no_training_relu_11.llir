; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = icmp slt i32 %22, 4, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %24 = sdiv i32 %.frozen, 64, !dbg !17
  %25 = mul i32 %24, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = shl i32 %16, 2, !dbg !19
  %27 = shl i32 %17, 2, !dbg !19
  %28 = add i32 %26, %22, !dbg !20
  %29 = add i32 %27, %22, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = and i1 %23, %19, !dbg !22
  %35 = and i1 %23, %20, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !23
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !23
  %39 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #4, !dbg !23
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !23
  %41 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !23
  %43 = load <2 x float>, ptr addrspace(3) %42, align 8, !dbg !23
  %44 = sext i32 %.decomposed to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !24
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !26
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %21) #4, !dbg !27
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !27
  %51 = bitcast i32 %49 to float, !dbg !27
  %52 = bitcast i32 %50 to float, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !28
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !30
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %21) #4, !dbg !31
  %57 = fadd float %51, 0x3EE4F8B580000000, !dbg !32
  %58 = fadd float %52, 0x3EE4F8B580000000, !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %59, 0, !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %60, 0, !dbg !33
  br i1 %.not.i, label %66, label %61, !dbg !33

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !33

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !33

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i2 = icmp eq i32 %71, 0, !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i5 = icmp eq i32 %72, 0, !dbg !33
  br i1 %.not.i2, label %78, label %73, !dbg !33

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %76, label %74, !dbg !33

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit6, !dbg !33

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit6, !dbg !33

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit6, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit6, !dbg !33

__nv_sqrtf.exit6:                                 ; preds = %74, %76, %79, %81
  %.0.i4 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !33
  %83 = extractelement <2 x float> %43, i64 1, !dbg !23
  %84 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fsub float %83, %85, !dbg !34
  %87 = extractelement <2 x float> %43, i64 0, !dbg !23
  %88 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fsub float %87, %89, !dbg !34
  %91 = extractvalue { i32, i32 } %56, 1, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = extractvalue { i32, i32 } %56, 0, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = extractvalue { i32, i32 } %54, 1, !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = extractvalue { i32, i32 } %54, 0, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = and i1 %23, %21, !dbg !22
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !35
  %102 = fmul float %90, %100, !dbg !36
  %103 = fmul float %86, %101, !dbg !36
  %104 = fmul float %102, %98, !dbg !37
  %105 = fmul float %103, %96, !dbg !37
  %106 = fadd float %104, %94, !dbg !38
  %107 = fadd float %105, %92, !dbg !38
  %108 = fcmp olt float %106, 0.000000e+00, !dbg !39
  %109 = fcmp olt float %107, 0.000000e+00, !dbg !39
  %110 = select i1 %108, float 0.000000e+00, float %106, !dbg !43
  %111 = select i1 %109, float 0.000000e+00, float %107, !dbg !43
  %112 = shl i32 %22, 6, !dbg !44
  %113 = add i32 %.decomposed, %112, !dbg !45
  %114 = shl i32 %24, 8, !dbg !46
  %115 = add i32 %113, %114, !dbg !47
  %116 = sext i32 %115 to i64, !dbg !48
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !48
  %118 = bitcast float %110 to i32, !dbg !49
  %119 = bitcast float %111 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %99) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqdwtkl7zhy2vnvmcnh77lqcu4qxzvoxmfv54n4qmjcczobkhd5.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 49, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 50, column: 33, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 42, scope: !7)
!47 = !DILocation(line: 50, column: 38, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 54, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
