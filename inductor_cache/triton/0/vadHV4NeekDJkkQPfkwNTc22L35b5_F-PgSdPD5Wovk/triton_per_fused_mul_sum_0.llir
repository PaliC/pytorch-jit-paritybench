; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 63, !dbg !12
  %15 = shl i32 %9, 6, !dbg !13
  %16 = or disjoint i32 %15, %14, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %10, i32 0, i1 %10) #3, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %10, i32 0, i1 %10) #3, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = fsub float 0.000000e+00, %20, !dbg !21
  %28 = fmul float %27, 0x3FF7154760000000, !dbg !25
  %29 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %28) #3, !dbg !25
  %30 = fadd float %29, 1.000000e+00, !dbg !26
  %31 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %30) #3, !dbg !27
  %32 = fmul float %31, %23, !dbg !28
  %33 = fmul float %23, %26, !dbg !29
  %34 = fmul float %33, %32, !dbg !30
  %35 = select i1 %10, float %34, float 0.000000e+00, !dbg !31
  %36 = bitcast float %35 to i32, !dbg !32
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = fadd float %35, %38, !dbg !34
  %40 = bitcast float %39 to i32, !dbg !32
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = fadd float %39, %42, !dbg !34
  %44 = bitcast float %43 to i32, !dbg !32
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = fadd float %43, %46, !dbg !34
  %48 = bitcast float %47 to i32, !dbg !32
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = fadd float %47, %50, !dbg !34
  %52 = bitcast float %51 to i32, !dbg !32
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = fadd float %51, %54, !dbg !34
  %56 = icmp eq i32 %12, 0, !dbg !32
  %57 = and i32 %13, 1, !dbg !32
  %58 = zext nneg i32 %57 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !32
  %60 = bitcast float %55 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %56) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %61 = icmp slt i32 %11, 2, !dbg !32
  %62 = sext i32 %11 to i64, !dbg !32
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !32
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #3, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %65, %67, !dbg !34
  %69 = and i32 %11, 1, !dbg !32
  %70 = icmp eq i32 %69, 0, !dbg !32
  %71 = and i1 %61, %70, !dbg !32
  %72 = bitcast float %68 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %72, i1 %71) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %73 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %74 = fmul float %32, %32, !dbg !36
  %75 = select i1 %10, float %74, float 0.000000e+00, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %76 = bitcast float %75 to i32, !dbg !38
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !38
  %78 = bitcast i32 %77 to float, !dbg !38
  %79 = fadd float %75, %78, !dbg !40
  %80 = bitcast float %79 to i32, !dbg !38
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !38
  %82 = bitcast i32 %81 to float, !dbg !38
  %83 = fadd float %79, %82, !dbg !40
  %84 = bitcast float %83 to i32, !dbg !38
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !38
  %86 = bitcast i32 %85 to float, !dbg !38
  %87 = fadd float %83, %86, !dbg !40
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !40
  %92 = bitcast float %91 to i32, !dbg !38
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = fadd float %91, %94, !dbg !40
  %96 = bitcast float %95 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %96, i1 %56) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #3, !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fadd float %98, %100, !dbg !40
  %102 = bitcast float %101 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %102, i1 %71) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %103 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %104 = fmul float %33, %33, !dbg !41
  %105 = select i1 %10, float %104, float 0.000000e+00, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !45
  %110 = bitcast float %109 to i32, !dbg !43
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = fadd float %109, %112, !dbg !45
  %114 = bitcast float %113 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = fadd float %113, %116, !dbg !45
  %118 = bitcast float %117 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = fadd float %117, %120, !dbg !45
  %122 = bitcast float %121 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = fadd float %121, %124, !dbg !45
  %126 = bitcast float %125 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %126, i1 %56) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %127 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #3, !dbg !43
  %128 = bitcast i32 %127 to float, !dbg !43
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !43
  %130 = bitcast i32 %129 to float, !dbg !43
  %131 = fadd float %128, %130, !dbg !45
  %132 = bitcast float %131 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %132, i1 %71) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %133 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %134 = sext i32 %9 to i64, !dbg !46
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !46
  %136 = icmp eq i32 %14, 0, !dbg !47
  %137 = and i1 %136, %10, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %135, i1 %137) #3, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %138, i1 %137) #3, !dbg !49
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %134, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %139, i1 %137) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgzuw4f24pbudqi2th5fvkcxwmbysaott7ajeqcvhq4gskyx6wzw.py", directory: "inductor_cache/gz")
!4 = !{ptr @triton_per_fused_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_0", linkageName: "triton_per_fused_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 34, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 33, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!36 = !DILocation(line: 41, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 35, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !39)
!39 = !DILocation(line: 44, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !39)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 35, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !44)
!44 = !DILocation(line: 48, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 37, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
