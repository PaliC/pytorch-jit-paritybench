; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = and i32 %12, 15, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = icmp slt i32 %17, 16, !dbg !14
  %21 = icmp slt i32 %18, 16, !dbg !14
  %22 = shl i32 %12, 2, !dbg !15
  %23 = and i32 %22, 252, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %24 = sdiv i32 %.frozen, 2, !dbg !16
  %25 = srem i32 %24, 2, !dbg !17
  %26 = mul i32 %17, 768, !dbg !18
  %27 = mul i32 %18, 768, !dbg !18
  %28 = zext nneg i32 %23 to i64, !dbg !19
  br label %29, !dbg !19

29:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %188, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %9 ], [ %194, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %9 ], [ %195, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %9 ], [ %180, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %9 ], [ %181, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %9 ], [ %182, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %9 ], [ %183, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %9 ], [ %184, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %9 ], [ %185, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %9 ], [ %186, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %9 ], [ %187, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %9 ], [ %172, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %9 ], [ %173, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %9 ], [ %174, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %9 ], [ %175, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %176, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %177, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %178, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %179, %._crit_edge ]
  %54 = or disjoint i64 %indvars.iv, %28, !dbg !20
  %55 = trunc nuw nsw i64 %54 to i32, !dbg !21
  %56 = add i32 %26, %55, !dbg !21
  %57 = add i32 %27, %55, !dbg !21
  %58 = sext i32 %56 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %57 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = bitcast i32 %66 to float, !dbg !23
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = bitcast i32 %75 to float, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !24
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = fadd float %67, %86, !dbg !26
  %91 = fadd float %68, %87, !dbg !26
  %92 = fadd float %69, %88, !dbg !26
  %93 = fadd float %70, %89, !dbg !26
  %94 = fadd float %76, %86, !dbg !26
  %95 = fadd float %77, %87, !dbg !26
  %96 = fadd float %78, %88, !dbg !26
  %97 = fadd float %79, %89, !dbg !26
  %98 = icmp eq i64 %indvars.iv, 0, !dbg !27
  br i1 %98, label %._crit_edge, label %99, !dbg !28

99:                                               ; preds = %29
  %100 = fsub float %90, %46, !dbg !32
  %101 = fsub float %91, %47, !dbg !32
  %102 = fsub float %92, %48, !dbg !32
  %103 = fsub float %93, %49, !dbg !32
  %104 = fsub float %94, %50, !dbg !32
  %105 = fsub float %95, %51, !dbg !32
  %106 = fsub float %96, %52, !dbg !32
  %107 = fsub float %97, %53, !dbg !32
  %108 = fadd float %30, 1.000000e+00, !dbg !33
  %109 = fadd float %31, 1.000000e+00, !dbg !33
  %110 = fadd float %32, 1.000000e+00, !dbg !33
  %111 = fadd float %33, 1.000000e+00, !dbg !33
  %112 = fadd float %34, 1.000000e+00, !dbg !33
  %113 = fadd float %35, 1.000000e+00, !dbg !33
  %114 = fadd float %36, 1.000000e+00, !dbg !33
  %115 = fadd float %37, 1.000000e+00, !dbg !33
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %108) #5, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %109) #5, !dbg !34
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %110) #5, !dbg !34
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %111) #5, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %112) #5, !dbg !34
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %113) #5, !dbg !34
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #5, !dbg !34
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #5, !dbg !34
  %124 = fadd float %46, %116, !dbg !35
  %125 = fadd float %47, %117, !dbg !35
  %126 = fadd float %48, %118, !dbg !35
  %127 = fadd float %49, %119, !dbg !35
  %128 = fadd float %50, %120, !dbg !35
  %129 = fadd float %51, %121, !dbg !35
  %130 = fadd float %52, %122, !dbg !35
  %131 = fadd float %53, %123, !dbg !35
  %132 = fsub float %90, %124, !dbg !36
  %133 = fsub float %91, %125, !dbg !36
  %134 = fsub float %92, %126, !dbg !36
  %135 = fsub float %93, %127, !dbg !36
  %136 = fsub float %94, %128, !dbg !36
  %137 = fsub float %95, %129, !dbg !36
  %138 = fsub float %96, %130, !dbg !36
  %139 = fsub float %97, %131, !dbg !36
  %140 = fmul float %100, %132, !dbg !37
  %141 = fmul float %101, %133, !dbg !37
  %142 = fmul float %102, %134, !dbg !37
  %143 = fmul float %103, %135, !dbg !37
  %144 = fmul float %104, %136, !dbg !37
  %145 = fmul float %105, %137, !dbg !37
  %146 = fmul float %106, %138, !dbg !37
  %147 = fmul float %107, %139, !dbg !37
  %148 = fadd float %38, %140, !dbg !38
  %149 = fadd float %39, %141, !dbg !38
  %150 = fadd float %40, %142, !dbg !38
  %151 = fadd float %41, %143, !dbg !38
  %152 = fadd float %42, %144, !dbg !38
  %153 = fadd float %43, %145, !dbg !38
  %154 = fadd float %44, %146, !dbg !38
  %155 = fadd float %45, %147, !dbg !38
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %29, %99
  %156 = phi float [ %148, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %157 = phi float [ %149, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %158 = phi float [ %150, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %159 = phi float [ %151, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %160 = phi float [ %152, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %161 = phi float [ %153, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %162 = phi float [ %154, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %163 = phi float [ %155, %99 ], [ 0.000000e+00, %29 ], !dbg !31
  %.pn16 = phi float [ %124, %99 ], [ %90, %29 ]
  %.pn14 = phi float [ %125, %99 ], [ %91, %29 ]
  %.pn12 = phi float [ %126, %99 ], [ %92, %29 ]
  %.pn10 = phi float [ %127, %99 ], [ %93, %29 ]
  %.pn8 = phi float [ %128, %99 ], [ %94, %29 ]
  %.pn6 = phi float [ %129, %99 ], [ %95, %29 ]
  %.pn4 = phi float [ %130, %99 ], [ %96, %29 ]
  %.pn2 = phi float [ %131, %99 ], [ %97, %29 ]
  %164 = phi float [ %108, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %165 = phi float [ %109, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %166 = phi float [ %110, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %167 = phi float [ %111, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %168 = phi float [ %112, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %169 = phi float [ %113, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %170 = phi float [ %114, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %171 = phi float [ %115, %99 ], [ 1.000000e+00, %29 ], !dbg !31
  %172 = select i1 %20, float %.pn16, float %46, !dbg !39
  %173 = select i1 %20, float %.pn14, float %47, !dbg !39
  %174 = select i1 %20, float %.pn12, float %48, !dbg !39
  %175 = select i1 %20, float %.pn10, float %49, !dbg !39
  %176 = select i1 %21, float %.pn8, float %50, !dbg !39
  %177 = select i1 %21, float %.pn6, float %51, !dbg !39
  %178 = select i1 %21, float %.pn4, float %52, !dbg !39
  %179 = select i1 %21, float %.pn2, float %53, !dbg !39
  %180 = select i1 %20, float %156, float %38, !dbg !40
  %181 = select i1 %20, float %157, float %39, !dbg !40
  %182 = select i1 %20, float %158, float %40, !dbg !40
  %183 = select i1 %20, float %159, float %41, !dbg !40
  %184 = select i1 %21, float %160, float %42, !dbg !40
  %185 = select i1 %21, float %161, float %43, !dbg !40
  %186 = select i1 %21, float %162, float %44, !dbg !40
  %187 = select i1 %21, float %163, float %45, !dbg !40
  %188 = select i1 %20, float %164, float %30, !dbg !41
  %189 = select i1 %20, float %165, float %31, !dbg !41
  %190 = select i1 %20, float %166, float %32, !dbg !41
  %191 = select i1 %20, float %167, float %33, !dbg !41
  %192 = select i1 %21, float %168, float %34, !dbg !41
  %193 = select i1 %21, float %169, float %35, !dbg !41
  %194 = select i1 %21, float %170, float %36, !dbg !41
  %195 = select i1 %21, float %171, float %37, !dbg !41
  %196 = bitcast float %90 to i32, !dbg !42
  %197 = bitcast float %91 to i32, !dbg !42
  %198 = bitcast float %92 to i32, !dbg !42
  %199 = bitcast float %93 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %59, i1 %20) #5, !dbg !42
  %200 = bitcast float %94 to i32, !dbg !42
  %201 = bitcast float %95 to i32, !dbg !42
  %202 = bitcast float %96 to i32, !dbg !42
  %203 = bitcast float %97 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %61, i1 %21) #5, !dbg !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !19
  %204 = icmp samesign ult i64 %indvars.iv, 512, !dbg !19
  br i1 %204, label %29, label %205, !dbg !19

205:                                              ; preds = %._crit_edge
  %206 = lshr i32 %12, 5, !dbg !12
  %207 = and i32 %12, 31, !dbg !12
  %208 = icmp slt i32 %19, 16, !dbg !14
  %209 = mul i32 %24, 2, !dbg !43
  %.decomposed = sub i32 %.frozen, %209, !dbg !43
  %210 = sdiv i32 %19, 4, !dbg !44
  %211 = fsub float %173, %172, !dbg !45
  %212 = fadd float %188, %189, !dbg !48
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !49
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %212) #5, !dbg !50
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !51
  %216 = fmul float %211, %215, !dbg !52
  %217 = fadd float %172, %216, !dbg !53
  %218 = fadd float %180, %181, !dbg !54
  %219 = fmul float %211, %211, !dbg !55
  %220 = fmul float %219, %188, !dbg !56
  %221 = fmul float %220, %215, !dbg !57
  %222 = fadd float %218, %221, !dbg !58
  %223 = fsub float %174, %217, !dbg !45
  %224 = fadd float %190, %212, !dbg !48
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !49
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %224) #5, !dbg !50
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !51
  %228 = fmul float %227, %223, !dbg !52
  %229 = fadd float %217, %228, !dbg !53
  %230 = fadd float %182, %222, !dbg !54
  %231 = fmul float %223, %223, !dbg !55
  %232 = fmul float %212, %231, !dbg !56
  %233 = fmul float %227, %232, !dbg !57
  %234 = fadd float %230, %233, !dbg !58
  %235 = fsub float %175, %229, !dbg !45
  %236 = fadd float %191, %224, !dbg !48
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !49
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %236) #5, !dbg !50
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !51
  %240 = fmul float %239, %235, !dbg !52
  %241 = fadd float %229, %240, !dbg !53
  %242 = fadd float %183, %234, !dbg !54
  %243 = fmul float %235, %235, !dbg !55
  %244 = fmul float %224, %243, !dbg !56
  %245 = fmul float %239, %244, !dbg !57
  %246 = fadd float %242, %245, !dbg !58
  %247 = fsub float %177, %176, !dbg !45
  %248 = fadd float %192, %193, !dbg !48
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !49
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %248) #5, !dbg !50
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !51
  %252 = fmul float %247, %251, !dbg !52
  %253 = fadd float %176, %252, !dbg !53
  %254 = fadd float %184, %185, !dbg !54
  %255 = fmul float %247, %247, !dbg !55
  %256 = fmul float %255, %192, !dbg !56
  %257 = fmul float %256, %251, !dbg !57
  %258 = fadd float %254, %257, !dbg !58
  %259 = fsub float %178, %253, !dbg !45
  %260 = fadd float %194, %248, !dbg !48
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !49
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %260) #5, !dbg !50
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !51
  %264 = fmul float %263, %259, !dbg !52
  %265 = fadd float %253, %264, !dbg !53
  %266 = fadd float %186, %258, !dbg !54
  %267 = fmul float %259, %259, !dbg !55
  %268 = fmul float %248, %267, !dbg !56
  %269 = fmul float %263, %268, !dbg !57
  %270 = fadd float %266, %269, !dbg !58
  %271 = fsub float %179, %265, !dbg !45
  %272 = fadd float %195, %260, !dbg !48
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !49
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %272) #5, !dbg !50
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !51
  %276 = fmul float %275, %271, !dbg !52
  %277 = fadd float %265, %276, !dbg !53
  %278 = fadd float %187, %270, !dbg !54
  %279 = fmul float %271, %271, !dbg !55
  %280 = fmul float %260, %279, !dbg !56
  %281 = fmul float %275, %280, !dbg !57
  %282 = fadd float %278, %281, !dbg !58
  %283 = bitcast float %241 to i32, !dbg !59
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 16, i32 31), !dbg !59
  %285 = bitcast i32 %284 to float, !dbg !59
  %286 = bitcast float %246 to i32, !dbg !59
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 16, i32 31), !dbg !59
  %288 = bitcast i32 %287 to float, !dbg !59
  %289 = bitcast float %236 to i32, !dbg !59
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 16, i32 31), !dbg !59
  %291 = bitcast i32 %290 to float, !dbg !59
  %292 = fsub float %285, %241, !dbg !45
  %293 = fadd float %236, %291, !dbg !48
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !49
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %293) #5, !dbg !50
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !51
  %297 = fmul float %292, %296, !dbg !52
  %298 = fadd float %241, %297, !dbg !53
  %299 = fadd float %246, %288, !dbg !54
  %300 = fmul float %292, %292, !dbg !55
  %301 = fmul float %236, %300, !dbg !56
  %302 = fmul float %301, %296, !dbg !57
  %303 = fadd float %299, %302, !dbg !58
  %304 = bitcast float %298 to i32, !dbg !59
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 8, i32 31), !dbg !59
  %306 = bitcast i32 %305 to float, !dbg !59
  %307 = bitcast float %303 to i32, !dbg !59
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !59
  %309 = bitcast i32 %308 to float, !dbg !59
  %310 = bitcast float %293 to i32, !dbg !59
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !59
  %312 = bitcast i32 %311 to float, !dbg !59
  %313 = fsub float %306, %298, !dbg !45
  %314 = fadd float %293, %312, !dbg !48
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !49
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %314) #5, !dbg !50
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !51
  %318 = fmul float %313, %317, !dbg !52
  %319 = fadd float %298, %318, !dbg !53
  %320 = fadd float %303, %309, !dbg !54
  %321 = fmul float %313, %313, !dbg !55
  %322 = fmul float %293, %321, !dbg !56
  %323 = fmul float %317, %322, !dbg !57
  %324 = fadd float %320, %323, !dbg !58
  %325 = bitcast float %319 to i32, !dbg !59
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 4, i32 31), !dbg !59
  %327 = bitcast i32 %326 to float, !dbg !59
  %328 = bitcast float %324 to i32, !dbg !59
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !59
  %330 = bitcast i32 %329 to float, !dbg !59
  %331 = bitcast float %314 to i32, !dbg !59
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !59
  %333 = bitcast i32 %332 to float, !dbg !59
  %334 = fsub float %327, %319, !dbg !45
  %335 = fadd float %314, %333, !dbg !48
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !49
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %335) #5, !dbg !50
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !51
  %339 = fmul float %334, %338, !dbg !52
  %340 = fadd float %319, %339, !dbg !53
  %341 = fadd float %324, %330, !dbg !54
  %342 = fmul float %334, %334, !dbg !55
  %343 = fmul float %314, %342, !dbg !56
  %344 = fmul float %338, %343, !dbg !57
  %345 = fadd float %341, %344, !dbg !58
  %346 = bitcast float %340 to i32, !dbg !59
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 2, i32 31), !dbg !59
  %348 = bitcast i32 %347 to float, !dbg !59
  %349 = bitcast float %345 to i32, !dbg !59
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 2, i32 31), !dbg !59
  %351 = bitcast i32 %350 to float, !dbg !59
  %352 = bitcast float %335 to i32, !dbg !59
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !59
  %354 = bitcast i32 %353 to float, !dbg !59
  %355 = fsub float %348, %340, !dbg !45
  %356 = fadd float %335, %354, !dbg !48
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !49
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %356) #5, !dbg !50
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !51
  %360 = fmul float %355, %359, !dbg !52
  %361 = fadd float %340, %360, !dbg !53
  %362 = fadd float %345, %351, !dbg !54
  %363 = fmul float %355, %355, !dbg !55
  %364 = fmul float %335, %363, !dbg !56
  %365 = fmul float %359, %364, !dbg !57
  %366 = fadd float %362, %365, !dbg !58
  %367 = bitcast float %361 to i32, !dbg !59
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 1, i32 31), !dbg !59
  %369 = bitcast i32 %368 to float, !dbg !59
  %370 = bitcast float %366 to i32, !dbg !59
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 1, i32 31), !dbg !59
  %372 = bitcast i32 %371 to float, !dbg !59
  %373 = bitcast float %356 to i32, !dbg !59
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !59
  %375 = bitcast i32 %374 to float, !dbg !59
  %376 = fsub float %369, %361, !dbg !45
  %377 = fadd float %356, %375, !dbg !48
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !49
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %377) #5, !dbg !50
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !51
  %381 = fmul float %376, %380, !dbg !52
  %382 = fadd float %361, %381, !dbg !53
  %383 = fadd float %366, %372, !dbg !54
  %384 = fmul float %376, %376, !dbg !55
  %385 = fmul float %356, %384, !dbg !56
  %386 = fmul float %380, %385, !dbg !57
  %387 = fadd float %383, %386, !dbg !58
  %388 = bitcast float %277 to i32, !dbg !59
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 16, i32 31), !dbg !59
  %390 = bitcast i32 %389 to float, !dbg !59
  %391 = bitcast float %282 to i32, !dbg !59
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 16, i32 31), !dbg !59
  %393 = bitcast i32 %392 to float, !dbg !59
  %394 = bitcast float %272 to i32, !dbg !59
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 16, i32 31), !dbg !59
  %396 = bitcast i32 %395 to float, !dbg !59
  %397 = fsub float %390, %277, !dbg !45
  %398 = fadd float %272, %396, !dbg !48
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !49
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %398) #5, !dbg !50
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !51
  %402 = fmul float %397, %401, !dbg !52
  %403 = fadd float %277, %402, !dbg !53
  %404 = fadd float %282, %393, !dbg !54
  %405 = fmul float %397, %397, !dbg !55
  %406 = fmul float %272, %405, !dbg !56
  %407 = fmul float %406, %401, !dbg !57
  %408 = fadd float %404, %407, !dbg !58
  %409 = bitcast float %403 to i32, !dbg !59
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 8, i32 31), !dbg !59
  %411 = bitcast i32 %410 to float, !dbg !59
  %412 = bitcast float %408 to i32, !dbg !59
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 8, i32 31), !dbg !59
  %414 = bitcast i32 %413 to float, !dbg !59
  %415 = bitcast float %398 to i32, !dbg !59
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 8, i32 31), !dbg !59
  %417 = bitcast i32 %416 to float, !dbg !59
  %418 = fsub float %411, %403, !dbg !45
  %419 = fadd float %398, %417, !dbg !48
  %420 = fcmp oeq float %419, 0.000000e+00, !dbg !49
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float %419) #5, !dbg !50
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !51
  %423 = fmul float %418, %422, !dbg !52
  %424 = fadd float %403, %423, !dbg !53
  %425 = fadd float %408, %414, !dbg !54
  %426 = fmul float %418, %418, !dbg !55
  %427 = fmul float %398, %426, !dbg !56
  %428 = fmul float %422, %427, !dbg !57
  %429 = fadd float %425, %428, !dbg !58
  %430 = bitcast float %424 to i32, !dbg !59
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 4, i32 31), !dbg !59
  %432 = bitcast i32 %431 to float, !dbg !59
  %433 = bitcast float %429 to i32, !dbg !59
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 4, i32 31), !dbg !59
  %435 = bitcast i32 %434 to float, !dbg !59
  %436 = bitcast float %419 to i32, !dbg !59
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 4, i32 31), !dbg !59
  %438 = bitcast i32 %437 to float, !dbg !59
  %439 = fsub float %432, %424, !dbg !45
  %440 = fadd float %419, %438, !dbg !48
  %441 = fcmp oeq float %440, 0.000000e+00, !dbg !49
  %442 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %440) #5, !dbg !50
  %443 = select i1 %441, float 0.000000e+00, float %442, !dbg !51
  %444 = fmul float %439, %443, !dbg !52
  %445 = fadd float %424, %444, !dbg !53
  %446 = fadd float %429, %435, !dbg !54
  %447 = fmul float %439, %439, !dbg !55
  %448 = fmul float %419, %447, !dbg !56
  %449 = fmul float %443, %448, !dbg !57
  %450 = fadd float %446, %449, !dbg !58
  %451 = bitcast float %445 to i32, !dbg !59
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 2, i32 31), !dbg !59
  %453 = bitcast i32 %452 to float, !dbg !59
  %454 = bitcast float %450 to i32, !dbg !59
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 2, i32 31), !dbg !59
  %456 = bitcast i32 %455 to float, !dbg !59
  %457 = bitcast float %440 to i32, !dbg !59
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 2, i32 31), !dbg !59
  %459 = bitcast i32 %458 to float, !dbg !59
  %460 = fsub float %453, %445, !dbg !45
  %461 = fadd float %440, %459, !dbg !48
  %462 = fcmp oeq float %461, 0.000000e+00, !dbg !49
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %459, float %461) #5, !dbg !50
  %464 = select i1 %462, float 0.000000e+00, float %463, !dbg !51
  %465 = fmul float %460, %464, !dbg !52
  %466 = fadd float %445, %465, !dbg !53
  %467 = fadd float %450, %456, !dbg !54
  %468 = fmul float %460, %460, !dbg !55
  %469 = fmul float %440, %468, !dbg !56
  %470 = fmul float %464, %469, !dbg !57
  %471 = fadd float %467, %470, !dbg !58
  %472 = bitcast float %466 to i32, !dbg !59
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 1, i32 31), !dbg !59
  %474 = bitcast i32 %473 to float, !dbg !59
  %475 = bitcast float %471 to i32, !dbg !59
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !59
  %477 = bitcast i32 %476 to float, !dbg !59
  %478 = bitcast float %461 to i32, !dbg !59
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !59
  %480 = bitcast i32 %479 to float, !dbg !59
  %481 = fsub float %474, %466, !dbg !45
  %482 = fadd float %461, %480, !dbg !48
  %483 = fcmp oeq float %482, 0.000000e+00, !dbg !49
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %480, float %482) #5, !dbg !50
  %485 = select i1 %483, float 0.000000e+00, float %484, !dbg !51
  %486 = fmul float %481, %485, !dbg !52
  %487 = fadd float %466, %486, !dbg !53
  %488 = fadd float %471, %477, !dbg !54
  %489 = fmul float %481, %481, !dbg !55
  %490 = fmul float %461, %489, !dbg !56
  %491 = fmul float %485, %490, !dbg !57
  %492 = fadd float %488, %491, !dbg !58
  %493 = icmp eq i32 %207, 0, !dbg !59
  %494 = and i32 %206, 1, !dbg !59
  %495 = shl nuw nsw i32 %14, 1, !dbg !59
  %496 = or disjoint i32 %495, %494, !dbg !59
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !59
  %498 = bitcast float %382 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %498, i1 %493) #5, !dbg !59
  %499 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %496, !dbg !59
  %500 = bitcast float %387 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %500, i1 %493) #5, !dbg !59
  %501 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %496, !dbg !59
  %502 = bitcast float %377 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 %493) #5, !dbg !59
  %503 = shl nuw nsw i32 %15, 1, !dbg !59
  %504 = or disjoint i32 %503, %494, !dbg !59
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !59
  %506 = bitcast float %487 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %506, i1 %493) #5, !dbg !59
  %507 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %504, !dbg !59
  %508 = bitcast float %492 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %508, i1 %493) #5, !dbg !59
  %509 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %504, !dbg !59
  %510 = bitcast float %482 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %510, i1 %493) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %511 = icmp slt i32 %12, 32, !dbg !59
  %512 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !59
  %513 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %512, i1 %511) #5, !dbg !59
  %514 = bitcast i32 %513 to float, !dbg !59
  %515 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !59
  %516 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %515, i1 %511) #5, !dbg !59
  %517 = bitcast i32 %516 to float, !dbg !59
  %518 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %12, !dbg !59
  %519 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %518, i1 %511) #5, !dbg !59
  %520 = bitcast i32 %519 to float, !dbg !59
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !59
  %522 = bitcast i32 %521 to float, !dbg !59
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 1, i32 31), !dbg !59
  %524 = bitcast i32 %523 to float, !dbg !59
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 1, i32 31), !dbg !59
  %526 = bitcast i32 %525 to float, !dbg !59
  %527 = fsub float %522, %514, !dbg !45
  %528 = fadd float %520, %526, !dbg !48
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !49
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %528) #5, !dbg !50
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !51
  %532 = fmul float %527, %531, !dbg !52
  %533 = fadd float %532, %514, !dbg !53
  %534 = fadd float %517, %524, !dbg !54
  %535 = fmul float %527, %527, !dbg !55
  %536 = fmul float %535, %520, !dbg !56
  %537 = fmul float %536, %531, !dbg !57
  %538 = fadd float %534, %537, !dbg !58
  %539 = and i32 %12, 1, !dbg !59
  %540 = icmp eq i32 %539, 0, !dbg !59
  %541 = and i1 %511, %540, !dbg !59
  %542 = bitcast float %533 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %512, <1 x i32> %542, i1 %541) #5, !dbg !59
  %543 = bitcast float %538 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, <1 x i32> %543, i1 %541) #5, !dbg !59
  %544 = bitcast float %528 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %544, i1 %541) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %545 = getelementptr float, ptr addrspace(3) @global_smem, i32 %495, !dbg !59
  %546 = load float, ptr addrspace(3) %545, align 8, !dbg !59
  %547 = getelementptr float, ptr addrspace(3) @global_smem, i32 %503, !dbg !59
  %548 = load float, ptr addrspace(3) %547, align 8, !dbg !59
  %549 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %495, !dbg !59
  %550 = load float, ptr addrspace(3) %549, align 8, !dbg !59
  %551 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %503, !dbg !59
  %552 = load float, ptr addrspace(3) %551, align 8, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !60
  %554 = bitcast float %546 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %554, i1 true) #5, !dbg !60
  %555 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %556 = bitcast float %548 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %557 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !60
  %558 = load i32, ptr addrspace(3) %557, align 4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %559 = bitcast float %550 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %559, i1 true) #5, !dbg !61
  %560 = bitcast float %552 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %560, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %561 = load float, ptr addrspace(3) %557, align 4, !dbg !61
  %562 = shl nsw i32 %.decomposed, 1, !dbg !62
  %563 = add nsw i32 %25, %562, !dbg !63
  %564 = shl nsw i32 %210, 2, !dbg !64
  %565 = add i32 %563, %564, !dbg !65
  %566 = sext i32 %565 to i64, !dbg !66
  %567 = getelementptr float, ptr addrspace(1) %4, i64 %566, !dbg !66
  %568 = lshr i32 %207, 4, !dbg !67
  %569 = shl nuw nsw i32 %206, 1, !dbg !67
  %570 = and i32 %569, 30, !dbg !67
  %571 = or disjoint i32 %570, %568, !dbg !67
  %572 = icmp eq i32 %571, 0, !dbg !67
  %573 = and i1 %572, %208, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %558, ptr addrspace(1) %567, i1 %573) #5, !dbg !67
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %561, float 7.680000e+02) #5, !dbg !68
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %550, float 7.680000e+02) #5, !dbg !68
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %552, float 7.680000e+02) #5, !dbg !68
  %577 = fadd float %574, 0x3EB0C6F7A0000000, !dbg !69
  %578 = fadd float %575, 0x3EB0C6F7A0000000, !dbg !69
  %579 = fadd float %576, 0x3EB0C6F7A0000000, !dbg !69
  %580 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i = icmp eq i32 %580, 0, !dbg !61
  br i1 %.not.i, label %583, label %581, !dbg !61

581:                                              ; preds = %205
  %582 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %577), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

583:                                              ; preds = %205
  %584 = tail call float @llvm.nvvm.rsqrt.approx.f(float %577), !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !61

__nv_rsqrtf.exit:                                 ; preds = %581, %583
  %.0.i = phi float [ %582, %581 ], [ %584, %583 ], !dbg !61
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %586 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %587 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %588 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i26 = icmp eq i32 %588, 0, !dbg !61
  br i1 %.not.i26, label %591, label %589, !dbg !61

589:                                              ; preds = %__nv_rsqrtf.exit
  %590 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %578), !dbg !61
  br label %__nv_rsqrtf.exit28, !dbg !61

591:                                              ; preds = %__nv_rsqrtf.exit
  %592 = tail call float @llvm.nvvm.rsqrt.approx.f(float %578), !dbg !61
  br label %__nv_rsqrtf.exit28, !dbg !61

__nv_rsqrtf.exit28:                               ; preds = %589, %591
  %.0.i27 = phi float [ %590, %589 ], [ %592, %591 ], !dbg !61
  %593 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %594 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %596 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i38 = icmp eq i32 %596, 0, !dbg !61
  br i1 %.not.i38, label %599, label %597, !dbg !61

597:                                              ; preds = %__nv_rsqrtf.exit28
  %598 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %579), !dbg !61
  br label %__nv_rsqrtf.exit40, !dbg !61

599:                                              ; preds = %__nv_rsqrtf.exit28
  %600 = tail call float @llvm.nvvm.rsqrt.approx.f(float %579), !dbg !61
  br label %__nv_rsqrtf.exit40, !dbg !61

__nv_rsqrtf.exit40:                               ; preds = %597, %599
  %.0.i39 = phi float [ %598, %597 ], [ %600, %599 ], !dbg !61
  %601 = getelementptr float, ptr addrspace(1) %5, i64 %566, !dbg !70
  %602 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %602, ptr addrspace(1) %601, i1 %573) #5, !dbg !71
  br label %603, !dbg !72

603:                                              ; preds = %__nv_rsqrtf.exit40, %603
  %indvars.iv66 = phi i64 [ 0, %__nv_rsqrtf.exit40 ], [ %indvars.iv.next67, %603 ]
  %604 = or disjoint i64 %indvars.iv66, %28, !dbg !73
  %605 = trunc nuw nsw i64 %604 to i32, !dbg !74
  %606 = add i32 %26, %605, !dbg !74
  %607 = add i32 %27, %605, !dbg !74
  %608 = sext i32 %606 to i64, !dbg !75
  %609 = getelementptr float, ptr addrspace(1) %0, i64 %608, !dbg !75
  %610 = sext i32 %607 to i64, !dbg !75
  %611 = getelementptr float, ptr addrspace(1) %0, i64 %610, !dbg !75
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %609, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !76
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !76
  %614 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !76
  %615 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !76
  %616 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !76
  %617 = bitcast i32 %613 to float, !dbg !76
  %618 = bitcast i32 %614 to float, !dbg !76
  %619 = bitcast i32 %615 to float, !dbg !76
  %620 = bitcast i32 %616 to float, !dbg !76
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %611, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !76
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !76
  %623 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !76
  %624 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !76
  %625 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !76
  %626 = bitcast i32 %622 to float, !dbg !76
  %627 = bitcast i32 %623 to float, !dbg !76
  %628 = bitcast i32 %624 to float, !dbg !76
  %629 = bitcast i32 %625 to float, !dbg !76
  %630 = getelementptr float, ptr addrspace(1) %2, i64 %604, !dbg !77
  %631 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %630, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !78
  %632 = extractvalue { i32, i32, i32, i32 } %631, 0, !dbg !78
  %633 = extractvalue { i32, i32, i32, i32 } %631, 1, !dbg !78
  %634 = extractvalue { i32, i32, i32, i32 } %631, 2, !dbg !78
  %635 = extractvalue { i32, i32, i32, i32 } %631, 3, !dbg !78
  %636 = bitcast i32 %632 to float, !dbg !78
  %637 = bitcast i32 %633 to float, !dbg !78
  %638 = bitcast i32 %634 to float, !dbg !78
  %639 = bitcast i32 %635 to float, !dbg !78
  %640 = getelementptr float, ptr addrspace(1) %3, i64 %604, !dbg !79
  %641 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %640, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !80
  %642 = extractvalue { i32, i32, i32, i32 } %641, 0, !dbg !80
  %643 = extractvalue { i32, i32, i32, i32 } %641, 1, !dbg !80
  %644 = extractvalue { i32, i32, i32, i32 } %641, 2, !dbg !80
  %645 = extractvalue { i32, i32, i32, i32 } %641, 3, !dbg !80
  %646 = bitcast i32 %642 to float, !dbg !80
  %647 = bitcast i32 %643 to float, !dbg !80
  %648 = bitcast i32 %644 to float, !dbg !80
  %649 = bitcast i32 %645 to float, !dbg !80
  %650 = fsub float %617, %546, !dbg !81
  %651 = fsub float %618, %546, !dbg !81
  %652 = fsub float %619, %546, !dbg !81
  %653 = fsub float %620, %546, !dbg !81
  %654 = fsub float %626, %548, !dbg !81
  %655 = fsub float %627, %548, !dbg !81
  %656 = fsub float %628, %548, !dbg !81
  %657 = fsub float %629, %548, !dbg !81
  %658 = fmul float %.0.i27, %650, !dbg !82
  %659 = fmul float %.0.i27, %651, !dbg !82
  %660 = fmul float %.0.i27, %652, !dbg !82
  %661 = fmul float %.0.i27, %653, !dbg !82
  %662 = fmul float %.0.i39, %654, !dbg !82
  %663 = fmul float %.0.i39, %655, !dbg !82
  %664 = fmul float %.0.i39, %656, !dbg !82
  %665 = fmul float %.0.i39, %657, !dbg !82
  %666 = fmul float %658, %636, !dbg !83
  %667 = fmul float %659, %637, !dbg !83
  %668 = fmul float %660, %638, !dbg !83
  %669 = fmul float %661, %639, !dbg !83
  %670 = fmul float %662, %636, !dbg !83
  %671 = fmul float %663, %637, !dbg !83
  %672 = fmul float %664, %638, !dbg !83
  %673 = fmul float %665, %639, !dbg !83
  %674 = fadd float %666, %646, !dbg !84
  %675 = fadd float %667, %647, !dbg !84
  %676 = fadd float %668, %648, !dbg !84
  %677 = fadd float %669, %649, !dbg !84
  %678 = fadd float %670, %646, !dbg !84
  %679 = fadd float %671, %647, !dbg !84
  %680 = fadd float %672, %648, !dbg !84
  %681 = fadd float %673, %649, !dbg !84
  %682 = getelementptr float, ptr addrspace(1) %6, i64 %608, !dbg !85
  %683 = getelementptr float, ptr addrspace(1) %6, i64 %610, !dbg !85
  %684 = bitcast float %674 to i32, !dbg !86
  %685 = bitcast float %675 to i32, !dbg !86
  %686 = bitcast float %676 to i32, !dbg !86
  %687 = bitcast float %677 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %684, i32 %685, i32 %686, i32 %687, ptr addrspace(1) %682, i1 %20) #5, !dbg !86
  %688 = bitcast float %678 to i32, !dbg !86
  %689 = bitcast float %679 to i32, !dbg !86
  %690 = bitcast float %680 to i32, !dbg !86
  %691 = bitcast float %681 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %688, i32 %689, i32 %690, i32 %691, ptr addrspace(1) %683, i1 %21) #5, !dbg !86
  %indvars.iv.next67 = add nuw nsw i64 %indvars.iv66, 256, !dbg !72
  %692 = icmp samesign ult i64 %indvars.iv66, 512, !dbg !72
  br i1 %692, label %603, label %693, !dbg !72

693:                                              ; preds = %603
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coliphs4rxgj6boypzskjfdo22bgsfzzx6b7vmweokh2m4uncwi6.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_32", linkageName: "triton_red_fused_convolution_native_layer_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 27, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 52, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 39, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 42, column: 62, scope: !7)
!28 = !DILocation(line: 178, column: 7, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 42, column: 51, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 184, column: 30, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 185, column: 34, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 185, column: 26, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 186, column: 39, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 186, column: 31, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 186, column: 22, scope: !29, inlinedAt: !31)
!39 = !DILocation(line: 44, column: 60, scope: !7)
!40 = !DILocation(line: 45, column: 56, scope: !7)
!41 = !DILocation(line: 46, column: 64, scope: !7)
!42 = !DILocation(line: 47, column: 52, scope: !7)
!43 = !DILocation(line: 30, column: 19, scope: !7)
!44 = !DILocation(line: 32, column: 19, scope: !7)
!45 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!47 = !DILocation(line: 49, column: 41, scope: !7)
!48 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !47)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 59, column: 28, scope: !7)
!62 = !DILocation(line: 54, column: 32, scope: !7)
!63 = !DILocation(line: 54, column: 30, scope: !7)
!64 = !DILocation(line: 54, column: 39, scope: !7)
!65 = !DILocation(line: 54, column: 37, scope: !7)
!66 = !DILocation(line: 54, column: 25, scope: !7)
!67 = !DILocation(line: 54, column: 50, scope: !7)
!68 = !DILocation(line: 56, column: 18, scope: !7)
!69 = !DILocation(line: 58, column: 19, scope: !7)
!70 = !DILocation(line: 60, column: 25, scope: !7)
!71 = !DILocation(line: 60, column: 51, scope: !7)
!72 = !DILocation(line: 61, column: 36, scope: !7)
!73 = !DILocation(line: 62, column: 27, scope: !7)
!74 = !DILocation(line: 65, column: 44, scope: !7)
!75 = !DILocation(line: 65, column: 39, scope: !7)
!76 = !DILocation(line: 65, column: 53, scope: !7)
!77 = !DILocation(line: 66, column: 35, scope: !7)
!78 = !DILocation(line: 66, column: 40, scope: !7)
!79 = !DILocation(line: 67, column: 35, scope: !7)
!80 = !DILocation(line: 67, column: 40, scope: !7)
!81 = !DILocation(line: 68, column: 24, scope: !7)
!82 = !DILocation(line: 69, column: 24, scope: !7)
!83 = !DILocation(line: 70, column: 24, scope: !7)
!84 = !DILocation(line: 71, column: 24, scope: !7)
!85 = !DILocation(line: 72, column: 29, scope: !7)
!86 = !DILocation(line: 72, column: 50, scope: !7)
!87 = !DILocation(line: 61, column: 4, scope: !7)
