; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 100352, !dbg !14
  %12 = icmp slt i32 %10, 100352, !dbg !14
  %13 = sdiv i32 %9, 784, !dbg !15
  %14 = sdiv i32 %10, 784, !dbg !15
  %15 = srem i32 %13, 32, !dbg !16
  %16 = srem i32 %14, 32, !dbg !16
  %17 = sext i32 %9 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = sext i32 %10 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %11) #1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = sext i32 %15 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = sext i32 %16 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !20
  %43 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !18
  %44 = insertelement <8 x i32> %43, i32 %29, i64 1, !dbg !18
  %45 = insertelement <8 x i32> %44, i32 %28, i64 2, !dbg !18
  %46 = insertelement <8 x i32> %45, i32 %27, i64 3, !dbg !18
  %47 = insertelement <8 x i32> %46, i32 %25, i64 4, !dbg !18
  %48 = insertelement <8 x i32> %47, i32 %24, i64 5, !dbg !18
  %49 = insertelement <8 x i32> %48, i32 %23, i64 6, !dbg !18
  %50 = insertelement <8 x i32> %49, i32 %22, i64 7, !dbg !18
  %51 = bitcast <8 x i32> %50 to <8 x float>, !dbg !18
  %52 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !20
  %53 = insertelement <8 x i32> %52, i32 %41, i64 1, !dbg !20
  %54 = insertelement <8 x i32> %53, i32 %40, i64 2, !dbg !20
  %55 = insertelement <8 x i32> %54, i32 %39, i64 3, !dbg !20
  %56 = insertelement <8 x i32> %55, i32 %38, i64 4, !dbg !20
  %57 = insertelement <8 x i32> %56, i32 %37, i64 5, !dbg !20
  %58 = insertelement <8 x i32> %57, i32 %36, i64 6, !dbg !20
  %59 = insertelement <8 x i32> %58, i32 %35, i64 7, !dbg !20
  %60 = bitcast <8 x i32> %59 to <8 x float>, !dbg !20
  %61 = fadd <8 x float> %51, %60, !dbg !21
  %62 = fcmp ogt <8 x float> %61, zeroinitializer, !dbg !22
  %63 = extractelement <8 x float> %61, i64 7, !dbg !23
  %64 = fmul float %63, 0x3FC99999A0000000, !dbg !24
  %65 = extractelement <8 x float> %61, i64 6, !dbg !23
  %66 = fmul float %65, 0x3FC99999A0000000, !dbg !24
  %67 = extractelement <8 x float> %61, i64 5, !dbg !23
  %68 = fmul float %67, 0x3FC99999A0000000, !dbg !24
  %69 = extractelement <8 x float> %61, i64 4, !dbg !23
  %70 = fmul float %69, 0x3FC99999A0000000, !dbg !24
  %71 = extractelement <8 x float> %61, i64 3, !dbg !23
  %72 = fmul float %71, 0x3FC99999A0000000, !dbg !24
  %73 = extractelement <8 x float> %61, i64 2, !dbg !23
  %74 = fmul float %73, 0x3FC99999A0000000, !dbg !24
  %75 = extractelement <8 x float> %61, i64 1, !dbg !23
  %76 = fmul float %75, 0x3FC99999A0000000, !dbg !24
  %77 = extractelement <8 x float> %61, i64 0, !dbg !23
  %78 = fmul float %77, 0x3FC99999A0000000, !dbg !24
  %79 = extractelement <8 x i1> %62, i64 7, !dbg !23
  %80 = select i1 %79, float %63, float %64, !dbg !23
  %81 = extractelement <8 x i1> %62, i64 6, !dbg !23
  %82 = select i1 %81, float %65, float %66, !dbg !23
  %83 = extractelement <8 x i1> %62, i64 5, !dbg !23
  %84 = select i1 %83, float %67, float %68, !dbg !23
  %85 = extractelement <8 x i1> %62, i64 4, !dbg !23
  %86 = select i1 %85, float %69, float %70, !dbg !23
  %87 = extractelement <8 x i1> %62, i64 3, !dbg !23
  %88 = select i1 %87, float %71, float %72, !dbg !23
  %89 = extractelement <8 x i1> %62, i64 2, !dbg !23
  %90 = select i1 %89, float %73, float %74, !dbg !23
  %91 = extractelement <8 x i1> %62, i64 1, !dbg !23
  %92 = select i1 %91, float %75, float %76, !dbg !23
  %93 = extractelement <8 x i1> %62, i64 0, !dbg !23
  %94 = select i1 %93, float %77, float %78, !dbg !23
  %95 = bitcast float %80 to i32, !dbg !25
  %96 = bitcast float %82 to i32, !dbg !25
  %97 = bitcast float %84 to i32, !dbg !25
  %98 = bitcast float %86 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %18, i1 %11) #1, !dbg !25
  %99 = bitcast float %88 to i32, !dbg !25
  %100 = bitcast float %90 to i32, !dbg !25
  %101 = bitcast float %92 to i32, !dbg !25
  %102 = bitcast float %94 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %20, i1 %12) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5zuiniolflhpjgcumngdm7tl6mpcyh2nr4ojo64xweaac4r5a72.py", directory: "inductor_cache/5z")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_18", linkageName: "triton_poi_fused_convolution_leaky_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 32, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 4, scope: !7)
