; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 4, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 6, !dbg !15
  %20 = lshr i32 %14, 1, !dbg !16
  %21 = and i32 %20, 63, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = icmp slt i32 %22, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %24 = sdiv i32 %.frozen, 8, !dbg !19
  %25 = mul i32 %24, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen2 = freeze i32 %17, !dbg !21
  %26 = sdiv i32 %.frozen2, 256, !dbg !21
  %27 = mul i32 %26, 256, !dbg !22
  %.decomposed3 = sub i32 %.frozen2, %27, !dbg !22
  %28 = sext i32 %24 to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %34 = sext i32 %.decomposed to i64, !dbg !25
  %35 = getelementptr i64, ptr addrspace(1) %2, i64 %34, !dbg !25
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !26
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !26
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !26
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %4, i64 %34, !dbg !27
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %23) #2, !dbg !28
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %23) #2, !dbg !28
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %23) #2, !dbg !28
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %23) #2, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !30
  %50 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !31
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !32
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !32
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !32
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %23) #2, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #2, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #2, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #2, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #2, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = shl i32 %22, 8, !dbg !35
  %62 = add i32 %61, %.decomposed3, !dbg !36
  %63 = shl i32 %26, 14, !dbg !37
  %64 = add i32 %62, %63, !dbg !38
  %65 = sext i32 %64 to i64, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !39
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %23) #2, !dbg !40
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !40
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !40
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !40
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !40
  %72 = bitcast i32 %68 to float, !dbg !40
  %73 = bitcast i32 %69 to float, !dbg !40
  %74 = bitcast i32 %70 to float, !dbg !40
  %75 = bitcast i32 %71 to float, !dbg !40
  %76 = sext i32 %.decomposed3 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %8, i64 %76, !dbg !41
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !42
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !42
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !42
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !42
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !42
  %83 = bitcast i32 %79 to float, !dbg !42
  %84 = bitcast i32 %80 to float, !dbg !42
  %85 = bitcast i32 %81 to float, !dbg !42
  %86 = bitcast i32 %82 to float, !dbg !42
  %87 = lshr i64 %33, 61, !dbg !43
  %88 = and i64 %87, 4, !dbg !43
  %89 = add i64 %88, %33, !dbg !43
  %90 = lshr i64 %39, 61, !dbg !44
  %91 = and i64 %90, 4, !dbg !44
  %92 = add i64 %91, %39, !dbg !44
  %93 = shl i64 %89, 10, !dbg !45
  %94 = shl i32 %26, 12, !dbg !46
  %95 = sext i32 %94 to i64, !dbg !47
  %.idx = shl i64 %92, 10, !dbg !48
  %96 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %76, !dbg !48
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %93, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %95, !dbg !48
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %23) #2, !dbg !49
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !49
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !49
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !49
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !49
  %105 = lshr i64 %44, 61, !dbg !50
  %106 = and i64 %105, 4, !dbg !50
  %107 = add i64 %106, %44, !dbg !50
  %.idx1 = shl i64 %107, 10, !dbg !51
  %108 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !51
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %76, !dbg !51
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %93, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %95, !dbg !51
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %23) #2, !dbg !52
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !52
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !52
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !52
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !52
  %117 = lshr i64 %54, 61, !dbg !53
  %118 = and i64 %117, 4, !dbg !53
  %119 = add i64 %118, %54, !dbg !53
  %120 = shl i64 %119, 10, !dbg !54
  %121 = getelementptr float, ptr addrspace(1) %97, i64 %120, !dbg !55
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %95, !dbg !55
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %23) #2, !dbg !56
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !56
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !56
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !56
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !56
  %128 = getelementptr float, ptr addrspace(1) %109, i64 %120, !dbg !57
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %95, !dbg !57
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %23) #2, !dbg !58
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !58
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !58
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !58
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !58
  %135 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !56
  %136 = insertelement <2 x i32> %135, i32 %101, i64 1, !dbg !56
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !56
  %138 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !58
  %139 = insertelement <2 x i32> %138, i32 %113, i64 1, !dbg !58
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !58
  %141 = fsub <2 x float> %140, %137, !dbg !59
  %142 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !60
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !60
  %144 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %145 = fmul <2 x float> %141, %144, !dbg !60
  %146 = fadd <2 x float> %145, %137, !dbg !61
  %147 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !56
  %148 = insertelement <2 x i32> %147, i32 %102, i64 1, !dbg !56
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !56
  %150 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !58
  %151 = insertelement <2 x i32> %150, i32 %114, i64 1, !dbg !58
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !58
  %153 = fsub <2 x float> %152, %149, !dbg !59
  %154 = fmul <2 x float> %153, %144, !dbg !60
  %155 = fadd <2 x float> %154, %149, !dbg !61
  %156 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !56
  %157 = insertelement <2 x i32> %156, i32 %103, i64 1, !dbg !56
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !56
  %159 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !58
  %160 = insertelement <2 x i32> %159, i32 %115, i64 1, !dbg !58
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !58
  %162 = fsub <2 x float> %161, %158, !dbg !59
  %163 = fmul <2 x float> %162, %144, !dbg !60
  %164 = fadd <2 x float> %163, %158, !dbg !61
  %165 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !56
  %166 = insertelement <2 x i32> %165, i32 %104, i64 1, !dbg !56
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !56
  %168 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !58
  %169 = insertelement <2 x i32> %168, i32 %116, i64 1, !dbg !58
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !58
  %171 = fsub <2 x float> %170, %167, !dbg !59
  %172 = fmul <2 x float> %171, %144, !dbg !60
  %173 = fadd <2 x float> %172, %167, !dbg !61
  %174 = extractelement <2 x float> %146, i64 0, !dbg !62
  %175 = extractelement <2 x float> %146, i64 1, !dbg !63
  %176 = fsub float %174, %175, !dbg !62
  %177 = extractelement <2 x float> %155, i64 0, !dbg !62
  %178 = extractelement <2 x float> %155, i64 1, !dbg !63
  %179 = fsub float %177, %178, !dbg !62
  %180 = extractelement <2 x float> %164, i64 0, !dbg !62
  %181 = extractelement <2 x float> %164, i64 1, !dbg !63
  %182 = fsub float %180, %181, !dbg !62
  %183 = extractelement <2 x float> %173, i64 0, !dbg !62
  %184 = extractelement <2 x float> %173, i64 1, !dbg !63
  %185 = fsub float %183, %184, !dbg !62
  %186 = fmul float %176, %60, !dbg !64
  %187 = fmul float %179, %60, !dbg !64
  %188 = fmul float %182, %60, !dbg !64
  %189 = fmul float %185, %60, !dbg !64
  %190 = fadd float %175, %186, !dbg !63
  %191 = fadd float %178, %187, !dbg !63
  %192 = fadd float %181, %188, !dbg !63
  %193 = fadd float %184, %189, !dbg !63
  %194 = fadd float %72, %83, !dbg !65
  %195 = fadd float %73, %84, !dbg !65
  %196 = fadd float %74, %85, !dbg !65
  %197 = fadd float %75, %86, !dbg !65
  %198 = fadd float %194, %190, !dbg !66
  %199 = fadd float %195, %191, !dbg !66
  %200 = fadd float %196, %192, !dbg !66
  %201 = fadd float %197, %193, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %202 = bitcast float %198 to i32, !dbg !68
  %203 = bitcast float %199 to i32, !dbg !68
  %204 = bitcast float %200 to i32, !dbg !68
  %205 = bitcast float %201 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %66, i1 %23) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjqududxfuudhhhuehdosb7ggeznthyx3l4unayrjkzh3bg6tnaa.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 40, scope: !7)
!37 = !DILocation(line: 40, column: 55, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 51, scope: !7)
!46 = !DILocation(line: 49, column: 63, scope: !7)
!47 = !DILocation(line: 49, column: 58, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 68, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 70, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 52, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 70, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 71, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 60, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
