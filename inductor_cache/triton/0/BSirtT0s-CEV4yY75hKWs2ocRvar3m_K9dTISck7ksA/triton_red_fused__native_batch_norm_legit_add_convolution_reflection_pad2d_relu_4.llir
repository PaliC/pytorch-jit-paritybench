; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_add_convolution_reflection_pad2d_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
._crit_edge71:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = icmp slt i32 %12, 256, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = shl i32 %14, 2, !dbg !12
  %17 = and i32 %16, 2044, !dbg !12
  %18 = shl i32 %12, 12, !dbg !13
  %19 = or disjoint i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = bitcast i32 %23 to float, !dbg !15
  %28 = bitcast i32 %24 to float, !dbg !15
  %29 = bitcast i32 %25 to float, !dbg !15
  %30 = bitcast i32 %26 to float, !dbg !15
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = bitcast i32 %33 to float, !dbg !17
  %38 = bitcast i32 %34 to float, !dbg !17
  %39 = bitcast i32 %35 to float, !dbg !17
  %40 = bitcast i32 %36 to float, !dbg !17
  %41 = select i1 %13, float %27, float 0.000000e+00, !dbg !18
  %42 = select i1 %13, float %28, float 0.000000e+00, !dbg !18
  %43 = select i1 %13, float %29, float 0.000000e+00, !dbg !18
  %44 = select i1 %13, float %30, float 0.000000e+00, !dbg !18
  %45 = select i1 %13, float %37, float 0.000000e+00, !dbg !19
  %46 = select i1 %13, float %38, float 0.000000e+00, !dbg !19
  %47 = select i1 %13, float %39, float 0.000000e+00, !dbg !19
  %48 = select i1 %13, float %40, float 0.000000e+00, !dbg !19
  %49 = or disjoint i32 %19, 2048, !dbg !20
  %50 = sext i32 %49 to i64, !dbg !14
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !14
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !15
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !16
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !17
  %59 = bitcast i32 %55 to float, !dbg !17
  %60 = bitcast i32 %56 to float, !dbg !17
  %61 = bitcast i32 %57 to float, !dbg !17
  %62 = bitcast i32 %58 to float, !dbg !17
  %63 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !15
  %64 = bitcast i32 %63 to float, !dbg !15
  %65 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !15
  %66 = bitcast i32 %65 to float, !dbg !15
  %67 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !15
  %68 = bitcast i32 %67 to float, !dbg !15
  %69 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !15
  %70 = bitcast i32 %69 to float, !dbg !15
  %71 = fsub float %70, %41, !dbg !21
  %72 = fsub float %68, %42, !dbg !21
  %73 = fsub float %66, %43, !dbg !21
  %74 = fsub float %64, %44, !dbg !21
  %75 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %76 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %77 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %78 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %75) #5, !dbg !26
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %76) #5, !dbg !26
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %77) #5, !dbg !26
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %78) #5, !dbg !26
  %83 = fadd float %41, %79, !dbg !27
  %84 = fadd float %42, %80, !dbg !27
  %85 = fadd float %43, %81, !dbg !27
  %86 = fadd float %44, %82, !dbg !27
  %87 = fsub float %70, %83, !dbg !28
  %88 = fsub float %68, %84, !dbg !28
  %89 = fsub float %66, %85, !dbg !28
  %90 = fsub float %64, %86, !dbg !28
  %91 = fmul float %71, %87, !dbg !29
  %92 = fmul float %72, %88, !dbg !29
  %93 = fmul float %73, %89, !dbg !29
  %94 = fmul float %74, %90, !dbg !29
  %95 = fadd float %91, 0.000000e+00, !dbg !30
  %96 = fadd float %92, 0.000000e+00, !dbg !30
  %97 = fadd float %93, 0.000000e+00, !dbg !30
  %98 = fadd float %94, 0.000000e+00, !dbg !30
  %99 = select i1 %13, float %83, float 0.000000e+00, !dbg !18
  %100 = select i1 %13, float %84, float 0.000000e+00, !dbg !18
  %101 = select i1 %13, float %85, float 0.000000e+00, !dbg !18
  %102 = select i1 %13, float %86, float 0.000000e+00, !dbg !18
  %103 = select i1 %13, float %97, float 0.000000e+00, !dbg !31
  %104 = select i1 %13, float %98, float 0.000000e+00, !dbg !31
  %105 = select i1 %13, float %75, float 0.000000e+00, !dbg !25
  %106 = select i1 %13, float %76, float 0.000000e+00, !dbg !25
  %107 = select i1 %13, float %77, float 0.000000e+00, !dbg !25
  %108 = select i1 %13, float %78, float 0.000000e+00, !dbg !25
  %109 = fsub float %59, %45, !dbg !32
  %110 = fsub float %60, %46, !dbg !32
  %111 = fsub float %61, %47, !dbg !32
  %112 = fsub float %62, %48, !dbg !32
  %113 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !34
  %114 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !34
  %115 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !34
  %116 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %113) #5, !dbg !35
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %114) #5, !dbg !35
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %115) #5, !dbg !35
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %116) #5, !dbg !35
  %121 = fadd float %45, %117, !dbg !36
  %122 = fadd float %46, %118, !dbg !36
  %123 = fadd float %47, %119, !dbg !36
  %124 = fadd float %48, %120, !dbg !36
  %125 = fsub float %59, %121, !dbg !37
  %126 = fsub float %60, %122, !dbg !37
  %127 = fsub float %61, %123, !dbg !37
  %128 = fsub float %62, %124, !dbg !37
  %129 = fmul float %109, %125, !dbg !38
  %130 = fmul float %110, %126, !dbg !38
  %131 = fmul float %111, %127, !dbg !38
  %132 = fmul float %112, %128, !dbg !38
  %133 = fadd float %129, 0.000000e+00, !dbg !39
  %134 = fadd float %130, 0.000000e+00, !dbg !39
  %135 = fadd float %131, 0.000000e+00, !dbg !39
  %136 = fadd float %132, 0.000000e+00, !dbg !39
  %137 = select i1 %13, float %121, float 0.000000e+00, !dbg !19
  %138 = select i1 %13, float %122, float 0.000000e+00, !dbg !19
  %139 = select i1 %13, float %123, float 0.000000e+00, !dbg !19
  %140 = select i1 %13, float %124, float 0.000000e+00, !dbg !19
  %141 = select i1 %13, float %135, float 0.000000e+00, !dbg !40
  %142 = select i1 %13, float %136, float 0.000000e+00, !dbg !40
  %143 = select i1 %13, float %113, float 0.000000e+00, !dbg !34
  %144 = select i1 %13, float %114, float 0.000000e+00, !dbg !34
  %145 = select i1 %13, float %115, float 0.000000e+00, !dbg !34
  %146 = select i1 %13, float %116, float 0.000000e+00, !dbg !34
  %147 = lshr i32 %14, 5, !dbg !12
  %148 = fsub float %100, %99, !dbg !41
  %149 = fadd float %105, %106, !dbg !44
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !45
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %149) #5, !dbg !46
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !47
  %153 = fmul float %148, %152, !dbg !48
  %154 = fadd float %99, %153, !dbg !49
  %155 = fadd float %95, %96, !dbg !50
  %156 = select i1 %13, float %155, float 0.000000e+00, !dbg !50
  %157 = fmul float %148, %148, !dbg !51
  %158 = fmul float %157, %105, !dbg !52
  %159 = fmul float %158, %152, !dbg !53
  %160 = fadd float %156, %159, !dbg !54
  %161 = fsub float %101, %154, !dbg !41
  %162 = fadd float %107, %149, !dbg !44
  %163 = fcmp oeq float %162, 0.000000e+00, !dbg !45
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %162) #5, !dbg !46
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !47
  %166 = fmul float %165, %161, !dbg !48
  %167 = fadd float %154, %166, !dbg !49
  %168 = fadd float %103, %160, !dbg !50
  %169 = fmul float %161, %161, !dbg !51
  %170 = fmul float %149, %169, !dbg !52
  %171 = fmul float %165, %170, !dbg !53
  %172 = fadd float %168, %171, !dbg !54
  %173 = fsub float %102, %167, !dbg !41
  %174 = fadd float %108, %162, !dbg !44
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !45
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %174) #5, !dbg !46
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !47
  %178 = fmul float %177, %173, !dbg !48
  %179 = fadd float %167, %178, !dbg !49
  %180 = fadd float %104, %172, !dbg !50
  %181 = fmul float %173, %173, !dbg !51
  %182 = fmul float %162, %181, !dbg !52
  %183 = fmul float %177, %182, !dbg !53
  %184 = fadd float %180, %183, !dbg !54
  %185 = bitcast float %179 to i32, !dbg !55
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !55
  %187 = bitcast i32 %186 to float, !dbg !55
  %188 = bitcast float %184 to i32, !dbg !55
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 16, i32 31), !dbg !55
  %190 = bitcast i32 %189 to float, !dbg !55
  %191 = bitcast float %174 to i32, !dbg !55
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 16, i32 31), !dbg !55
  %193 = bitcast i32 %192 to float, !dbg !55
  %194 = fsub float %187, %179, !dbg !41
  %195 = fadd float %174, %193, !dbg !44
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !45
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %195) #5, !dbg !46
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !47
  %199 = fmul float %198, %194, !dbg !48
  %200 = fadd float %179, %199, !dbg !49
  %201 = fadd float %184, %190, !dbg !50
  %202 = fmul float %194, %194, !dbg !51
  %203 = fmul float %174, %202, !dbg !52
  %204 = fmul float %198, %203, !dbg !53
  %205 = fadd float %201, %204, !dbg !54
  %206 = bitcast float %200 to i32, !dbg !55
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !55
  %208 = bitcast i32 %207 to float, !dbg !55
  %209 = bitcast float %205 to i32, !dbg !55
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 8, i32 31), !dbg !55
  %211 = bitcast i32 %210 to float, !dbg !55
  %212 = bitcast float %195 to i32, !dbg !55
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !55
  %214 = bitcast i32 %213 to float, !dbg !55
  %215 = fsub float %208, %200, !dbg !41
  %216 = fadd float %195, %214, !dbg !44
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !45
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %216) #5, !dbg !46
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !47
  %220 = fmul float %215, %219, !dbg !48
  %221 = fadd float %200, %220, !dbg !49
  %222 = fadd float %205, %211, !dbg !50
  %223 = fmul float %215, %215, !dbg !51
  %224 = fmul float %195, %223, !dbg !52
  %225 = fmul float %219, %224, !dbg !53
  %226 = fadd float %222, %225, !dbg !54
  %227 = bitcast float %221 to i32, !dbg !55
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !55
  %229 = bitcast i32 %228 to float, !dbg !55
  %230 = bitcast float %226 to i32, !dbg !55
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 4, i32 31), !dbg !55
  %232 = bitcast i32 %231 to float, !dbg !55
  %233 = bitcast float %216 to i32, !dbg !55
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !55
  %235 = bitcast i32 %234 to float, !dbg !55
  %236 = fsub float %229, %221, !dbg !41
  %237 = fadd float %216, %235, !dbg !44
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !45
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #5, !dbg !46
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !47
  %241 = fmul float %236, %240, !dbg !48
  %242 = fadd float %221, %241, !dbg !49
  %243 = fadd float %226, %232, !dbg !50
  %244 = fmul float %236, %236, !dbg !51
  %245 = fmul float %216, %244, !dbg !52
  %246 = fmul float %240, %245, !dbg !53
  %247 = fadd float %243, %246, !dbg !54
  %248 = bitcast float %242 to i32, !dbg !55
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !55
  %250 = bitcast i32 %249 to float, !dbg !55
  %251 = bitcast float %247 to i32, !dbg !55
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 2, i32 31), !dbg !55
  %253 = bitcast i32 %252 to float, !dbg !55
  %254 = bitcast float %237 to i32, !dbg !55
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 2, i32 31), !dbg !55
  %256 = bitcast i32 %255 to float, !dbg !55
  %257 = fsub float %250, %242, !dbg !41
  %258 = fadd float %237, %256, !dbg !44
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !45
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !46
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !47
  %262 = fmul float %257, %261, !dbg !48
  %263 = fadd float %242, %262, !dbg !49
  %264 = fadd float %247, %253, !dbg !50
  %265 = fmul float %257, %257, !dbg !51
  %266 = fmul float %237, %265, !dbg !52
  %267 = fmul float %261, %266, !dbg !53
  %268 = fadd float %264, %267, !dbg !54
  %269 = bitcast float %263 to i32, !dbg !55
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !55
  %271 = bitcast i32 %270 to float, !dbg !55
  %272 = bitcast float %268 to i32, !dbg !55
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !55
  %274 = bitcast i32 %273 to float, !dbg !55
  %275 = bitcast float %258 to i32, !dbg !55
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !55
  %277 = bitcast i32 %276 to float, !dbg !55
  %278 = fsub float %271, %263, !dbg !41
  %279 = fadd float %258, %277, !dbg !44
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !45
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %279) #5, !dbg !46
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !47
  %283 = fmul float %278, %282, !dbg !48
  %284 = fadd float %263, %283, !dbg !49
  %285 = fadd float %268, %274, !dbg !50
  %286 = fmul float %278, %278, !dbg !51
  %287 = fmul float %258, %286, !dbg !52
  %288 = fmul float %282, %287, !dbg !53
  %289 = fadd float %285, %288, !dbg !54
  %290 = icmp eq i32 %15, 0, !dbg !55
  %291 = and i32 %147, 15, !dbg !55
  %292 = zext nneg i32 %291 to i64, !dbg !55
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !55
  %294 = bitcast float %284 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 %290) #5, !dbg !55
  %295 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %292, !dbg !55
  %296 = bitcast float %289 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 %290) #5, !dbg !55
  %297 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %292, !dbg !55
  %298 = bitcast float %279 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 %290) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %299 = icmp slt i32 %14, 16, !dbg !55
  %300 = sext i32 %14 to i64, !dbg !55
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i64 %300, !dbg !55
  %302 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %301, i1 %299) #5, !dbg !55
  %303 = bitcast i32 %302 to float, !dbg !55
  %304 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %300, !dbg !55
  %305 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %304, i1 %299) #5, !dbg !55
  %306 = bitcast i32 %305 to float, !dbg !55
  %307 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %300, !dbg !55
  %308 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %307, i1 %299) #5, !dbg !55
  %309 = bitcast i32 %308 to float, !dbg !55
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !55
  %311 = bitcast i32 %310 to float, !dbg !55
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 8, i32 31), !dbg !55
  %313 = bitcast i32 %312 to float, !dbg !55
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 8, i32 31), !dbg !55
  %315 = bitcast i32 %314 to float, !dbg !55
  %316 = fsub float %311, %303, !dbg !41
  %317 = fadd float %309, %315, !dbg !44
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !45
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %317) #5, !dbg !46
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !47
  %321 = fmul float %316, %320, !dbg !48
  %322 = fadd float %321, %303, !dbg !49
  %323 = fadd float %306, %313, !dbg !50
  %324 = fmul float %316, %316, !dbg !51
  %325 = fmul float %324, %309, !dbg !52
  %326 = fmul float %325, %320, !dbg !53
  %327 = fadd float %323, %326, !dbg !54
  %328 = bitcast float %322 to i32, !dbg !55
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !55
  %330 = bitcast i32 %329 to float, !dbg !55
  %331 = bitcast float %327 to i32, !dbg !55
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !55
  %333 = bitcast i32 %332 to float, !dbg !55
  %334 = bitcast float %317 to i32, !dbg !55
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 4, i32 31), !dbg !55
  %336 = bitcast i32 %335 to float, !dbg !55
  %337 = fsub float %330, %322, !dbg !41
  %338 = fadd float %317, %336, !dbg !44
  %339 = fcmp oeq float %338, 0.000000e+00, !dbg !45
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float %338) #5, !dbg !46
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !47
  %342 = fmul float %337, %341, !dbg !48
  %343 = fadd float %322, %342, !dbg !49
  %344 = fadd float %327, %333, !dbg !50
  %345 = fmul float %337, %337, !dbg !51
  %346 = fmul float %317, %345, !dbg !52
  %347 = fmul float %341, %346, !dbg !53
  %348 = fadd float %344, %347, !dbg !54
  %349 = bitcast float %343 to i32, !dbg !55
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 2, i32 31), !dbg !55
  %351 = bitcast i32 %350 to float, !dbg !55
  %352 = bitcast float %348 to i32, !dbg !55
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !55
  %354 = bitcast i32 %353 to float, !dbg !55
  %355 = bitcast float %338 to i32, !dbg !55
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 2, i32 31), !dbg !55
  %357 = bitcast i32 %356 to float, !dbg !55
  %358 = fsub float %351, %343, !dbg !41
  %359 = fadd float %338, %357, !dbg !44
  %360 = fcmp oeq float %359, 0.000000e+00, !dbg !45
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float %359) #5, !dbg !46
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !47
  %363 = fmul float %358, %362, !dbg !48
  %364 = fadd float %343, %363, !dbg !49
  %365 = fadd float %348, %354, !dbg !50
  %366 = fmul float %358, %358, !dbg !51
  %367 = fmul float %338, %366, !dbg !52
  %368 = fmul float %362, %367, !dbg !53
  %369 = fadd float %365, %368, !dbg !54
  %370 = bitcast float %364 to i32, !dbg !55
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 1, i32 31), !dbg !55
  %372 = bitcast i32 %371 to float, !dbg !55
  %373 = bitcast float %369 to i32, !dbg !55
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !55
  %375 = bitcast i32 %374 to float, !dbg !55
  %376 = bitcast float %359 to i32, !dbg !55
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !55
  %378 = bitcast i32 %377 to float, !dbg !55
  %379 = fsub float %372, %364, !dbg !41
  %380 = fadd float %359, %378, !dbg !44
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !45
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %380) #5, !dbg !46
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !47
  %384 = fmul float %379, %383, !dbg !48
  %385 = fadd float %364, %384, !dbg !49
  %386 = fadd float %369, %375, !dbg !50
  %387 = fmul float %379, %379, !dbg !51
  %388 = fmul float %359, %387, !dbg !52
  %389 = fmul float %383, %388, !dbg !53
  %390 = fadd float %386, %389, !dbg !54
  %391 = and i32 %14, 15, !dbg !55
  %392 = icmp eq i32 %391, 0, !dbg !55
  %393 = and i1 %299, %392, !dbg !55
  %394 = bitcast float %385 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %394, i1 %393) #5, !dbg !55
  %395 = bitcast float %390 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %395, i1 %393) #5, !dbg !55
  %396 = bitcast float %380 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %396, i1 %393) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %397 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !55
  %398 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %399 = fsub float %138, %137, !dbg !58
  %400 = fadd float %143, %144, !dbg !59
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !60
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %400) #5, !dbg !61
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !62
  %404 = fmul float %399, %403, !dbg !63
  %405 = fadd float %137, %404, !dbg !64
  %406 = fadd float %133, %134, !dbg !65
  %407 = select i1 %13, float %406, float 0.000000e+00, !dbg !65
  %408 = fmul float %399, %399, !dbg !66
  %409 = fmul float %408, %143, !dbg !67
  %410 = fmul float %409, %403, !dbg !68
  %411 = fadd float %407, %410, !dbg !69
  %412 = fsub float %139, %405, !dbg !58
  %413 = fadd float %145, %400, !dbg !59
  %414 = fcmp oeq float %413, 0.000000e+00, !dbg !60
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %413) #5, !dbg !61
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !62
  %417 = fmul float %416, %412, !dbg !63
  %418 = fadd float %405, %417, !dbg !64
  %419 = fadd float %141, %411, !dbg !65
  %420 = fmul float %412, %412, !dbg !66
  %421 = fmul float %400, %420, !dbg !67
  %422 = fmul float %416, %421, !dbg !68
  %423 = fadd float %419, %422, !dbg !69
  %424 = fsub float %140, %418, !dbg !58
  %425 = fadd float %146, %413, !dbg !59
  %426 = fcmp oeq float %425, 0.000000e+00, !dbg !60
  %427 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %425) #5, !dbg !61
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !62
  %429 = fmul float %428, %424, !dbg !63
  %430 = fadd float %418, %429, !dbg !64
  %431 = fadd float %142, %423, !dbg !65
  %432 = fmul float %424, %424, !dbg !66
  %433 = fmul float %413, %432, !dbg !67
  %434 = fmul float %428, %433, !dbg !68
  %435 = fadd float %431, %434, !dbg !69
  %436 = bitcast float %430 to i32, !dbg !56
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 16, i32 31), !dbg !56
  %438 = bitcast i32 %437 to float, !dbg !56
  %439 = bitcast float %435 to i32, !dbg !56
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 16, i32 31), !dbg !56
  %441 = bitcast i32 %440 to float, !dbg !56
  %442 = bitcast float %425 to i32, !dbg !56
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 16, i32 31), !dbg !56
  %444 = bitcast i32 %443 to float, !dbg !56
  %445 = fsub float %438, %430, !dbg !58
  %446 = fadd float %425, %444, !dbg !59
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !60
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %444, float %446) #5, !dbg !61
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !62
  %450 = fmul float %449, %445, !dbg !63
  %451 = fadd float %430, %450, !dbg !64
  %452 = fadd float %435, %441, !dbg !65
  %453 = fmul float %445, %445, !dbg !66
  %454 = fmul float %425, %453, !dbg !67
  %455 = fmul float %449, %454, !dbg !68
  %456 = fadd float %452, %455, !dbg !69
  %457 = bitcast float %451 to i32, !dbg !56
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 8, i32 31), !dbg !56
  %459 = bitcast i32 %458 to float, !dbg !56
  %460 = bitcast float %456 to i32, !dbg !56
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 8, i32 31), !dbg !56
  %462 = bitcast i32 %461 to float, !dbg !56
  %463 = bitcast float %446 to i32, !dbg !56
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 8, i32 31), !dbg !56
  %465 = bitcast i32 %464 to float, !dbg !56
  %466 = fsub float %459, %451, !dbg !58
  %467 = fadd float %446, %465, !dbg !59
  %468 = fcmp oeq float %467, 0.000000e+00, !dbg !60
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %465, float %467) #5, !dbg !61
  %470 = select i1 %468, float 0.000000e+00, float %469, !dbg !62
  %471 = fmul float %466, %470, !dbg !63
  %472 = fadd float %451, %471, !dbg !64
  %473 = fadd float %456, %462, !dbg !65
  %474 = fmul float %466, %466, !dbg !66
  %475 = fmul float %446, %474, !dbg !67
  %476 = fmul float %470, %475, !dbg !68
  %477 = fadd float %473, %476, !dbg !69
  %478 = bitcast float %472 to i32, !dbg !56
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 4, i32 31), !dbg !56
  %480 = bitcast i32 %479 to float, !dbg !56
  %481 = bitcast float %477 to i32, !dbg !56
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 4, i32 31), !dbg !56
  %483 = bitcast i32 %482 to float, !dbg !56
  %484 = bitcast float %467 to i32, !dbg !56
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 4, i32 31), !dbg !56
  %486 = bitcast i32 %485 to float, !dbg !56
  %487 = fsub float %480, %472, !dbg !58
  %488 = fadd float %467, %486, !dbg !59
  %489 = fcmp oeq float %488, 0.000000e+00, !dbg !60
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %486, float %488) #5, !dbg !61
  %491 = select i1 %489, float 0.000000e+00, float %490, !dbg !62
  %492 = fmul float %487, %491, !dbg !63
  %493 = fadd float %472, %492, !dbg !64
  %494 = fadd float %477, %483, !dbg !65
  %495 = fmul float %487, %487, !dbg !66
  %496 = fmul float %467, %495, !dbg !67
  %497 = fmul float %491, %496, !dbg !68
  %498 = fadd float %494, %497, !dbg !69
  %499 = bitcast float %493 to i32, !dbg !56
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 2, i32 31), !dbg !56
  %501 = bitcast i32 %500 to float, !dbg !56
  %502 = bitcast float %498 to i32, !dbg !56
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 2, i32 31), !dbg !56
  %504 = bitcast i32 %503 to float, !dbg !56
  %505 = bitcast float %488 to i32, !dbg !56
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 2, i32 31), !dbg !56
  %507 = bitcast i32 %506 to float, !dbg !56
  %508 = fsub float %501, %493, !dbg !58
  %509 = fadd float %488, %507, !dbg !59
  %510 = fcmp oeq float %509, 0.000000e+00, !dbg !60
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %507, float %509) #5, !dbg !61
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !62
  %513 = fmul float %508, %512, !dbg !63
  %514 = fadd float %493, %513, !dbg !64
  %515 = fadd float %498, %504, !dbg !65
  %516 = fmul float %508, %508, !dbg !66
  %517 = fmul float %488, %516, !dbg !67
  %518 = fmul float %512, %517, !dbg !68
  %519 = fadd float %515, %518, !dbg !69
  %520 = bitcast float %514 to i32, !dbg !56
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 1, i32 31), !dbg !56
  %522 = bitcast i32 %521 to float, !dbg !56
  %523 = bitcast float %519 to i32, !dbg !56
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 1, i32 31), !dbg !56
  %525 = bitcast i32 %524 to float, !dbg !56
  %526 = bitcast float %509 to i32, !dbg !56
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 1, i32 31), !dbg !56
  %528 = bitcast i32 %527 to float, !dbg !56
  %529 = fsub float %522, %514, !dbg !58
  %530 = fadd float %509, %528, !dbg !59
  %531 = fcmp oeq float %530, 0.000000e+00, !dbg !60
  %532 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %528, float %530) #5, !dbg !61
  %533 = select i1 %531, float 0.000000e+00, float %532, !dbg !62
  %534 = fmul float %529, %533, !dbg !63
  %535 = fadd float %514, %534, !dbg !64
  %536 = fadd float %519, %525, !dbg !65
  %537 = fmul float %529, %529, !dbg !66
  %538 = fmul float %509, %537, !dbg !67
  %539 = fmul float %533, %538, !dbg !68
  %540 = fadd float %536, %539, !dbg !69
  %541 = bitcast float %535 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %541, i1 %290) #5, !dbg !56
  %542 = bitcast float %540 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %542, i1 %290) #5, !dbg !56
  %543 = bitcast float %530 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %543, i1 %290) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %544 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %301, i1 %299) #5, !dbg !56
  %545 = bitcast i32 %544 to float, !dbg !56
  %546 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %304, i1 %299) #5, !dbg !56
  %547 = bitcast i32 %546 to float, !dbg !56
  %548 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %307, i1 %299) #5, !dbg !56
  %549 = bitcast i32 %548 to float, !dbg !56
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 8, i32 31), !dbg !56
  %551 = bitcast i32 %550 to float, !dbg !56
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !56
  %553 = bitcast i32 %552 to float, !dbg !56
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 8, i32 31), !dbg !56
  %555 = bitcast i32 %554 to float, !dbg !56
  %556 = fsub float %551, %545, !dbg !58
  %557 = fadd float %549, %555, !dbg !59
  %558 = fcmp oeq float %557, 0.000000e+00, !dbg !60
  %559 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %555, float %557) #5, !dbg !61
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !62
  %561 = fmul float %556, %560, !dbg !63
  %562 = fadd float %561, %545, !dbg !64
  %563 = fadd float %547, %553, !dbg !65
  %564 = fmul float %556, %556, !dbg !66
  %565 = fmul float %564, %549, !dbg !67
  %566 = fmul float %565, %560, !dbg !68
  %567 = fadd float %563, %566, !dbg !69
  %568 = bitcast float %562 to i32, !dbg !56
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 4, i32 31), !dbg !56
  %570 = bitcast i32 %569 to float, !dbg !56
  %571 = bitcast float %567 to i32, !dbg !56
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !56
  %573 = bitcast i32 %572 to float, !dbg !56
  %574 = bitcast float %557 to i32, !dbg !56
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 4, i32 31), !dbg !56
  %576 = bitcast i32 %575 to float, !dbg !56
  %577 = fsub float %570, %562, !dbg !58
  %578 = fadd float %557, %576, !dbg !59
  %579 = fcmp oeq float %578, 0.000000e+00, !dbg !60
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %576, float %578) #5, !dbg !61
  %581 = select i1 %579, float 0.000000e+00, float %580, !dbg !62
  %582 = fmul float %577, %581, !dbg !63
  %583 = fadd float %562, %582, !dbg !64
  %584 = fadd float %567, %573, !dbg !65
  %585 = fmul float %577, %577, !dbg !66
  %586 = fmul float %557, %585, !dbg !67
  %587 = fmul float %581, %586, !dbg !68
  %588 = fadd float %584, %587, !dbg !69
  %589 = bitcast float %583 to i32, !dbg !56
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 2, i32 31), !dbg !56
  %591 = bitcast i32 %590 to float, !dbg !56
  %592 = bitcast float %588 to i32, !dbg !56
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 2, i32 31), !dbg !56
  %594 = bitcast i32 %593 to float, !dbg !56
  %595 = bitcast float %578 to i32, !dbg !56
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 2, i32 31), !dbg !56
  %597 = bitcast i32 %596 to float, !dbg !56
  %598 = fsub float %591, %583, !dbg !58
  %599 = fadd float %578, %597, !dbg !59
  %600 = fcmp oeq float %599, 0.000000e+00, !dbg !60
  %601 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %597, float %599) #5, !dbg !61
  %602 = select i1 %600, float 0.000000e+00, float %601, !dbg !62
  %603 = fmul float %598, %602, !dbg !63
  %604 = fadd float %583, %603, !dbg !64
  %605 = fadd float %588, %594, !dbg !65
  %606 = fmul float %598, %598, !dbg !66
  %607 = fmul float %578, %606, !dbg !67
  %608 = fmul float %602, %607, !dbg !68
  %609 = fadd float %605, %608, !dbg !69
  %610 = bitcast float %604 to i32, !dbg !56
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 1, i32 31), !dbg !56
  %612 = bitcast i32 %611 to float, !dbg !56
  %613 = bitcast float %609 to i32, !dbg !56
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 1, i32 31), !dbg !56
  %615 = bitcast i32 %614 to float, !dbg !56
  %616 = bitcast float %599 to i32, !dbg !56
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 1, i32 31), !dbg !56
  %618 = bitcast i32 %617 to float, !dbg !56
  %619 = fsub float %612, %604, !dbg !58
  %620 = fadd float %599, %618, !dbg !59
  %621 = fcmp oeq float %620, 0.000000e+00, !dbg !60
  %622 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %618, float %620) #5, !dbg !61
  %623 = select i1 %621, float 0.000000e+00, float %622, !dbg !62
  %624 = fmul float %619, %623, !dbg !63
  %625 = fadd float %604, %624, !dbg !64
  %626 = fadd float %609, %615, !dbg !65
  %627 = fmul float %619, %619, !dbg !66
  %628 = fmul float %599, %627, !dbg !67
  %629 = fmul float %623, %628, !dbg !68
  %630 = fadd float %626, %629, !dbg !69
  %631 = bitcast float %625 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %631, i1 %393) #5, !dbg !56
  %632 = bitcast float %630 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %632, i1 %393) #5, !dbg !56
  %633 = bitcast float %620 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %633, i1 %393) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %634 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %635 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !56
  %636 = sext i32 %12 to i64, !dbg !70
  %637 = getelementptr float, ptr addrspace(1) %4, i64 %636, !dbg !70
  %urem = and i32 %14, 511, !dbg !71
  %638 = icmp eq i32 %urem, 0, !dbg !71
  %639 = bitcast float %397 to i32, !dbg !71
  %640 = and i1 %638, %13, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %639, ptr addrspace(1) %637, i1 %640) #5, !dbg !71
  %641 = getelementptr float, ptr addrspace(1) %5, i64 %636, !dbg !72
  %642 = bitcast float %634 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %642, ptr addrspace(1) %641, i1 %640) #5, !dbg !73
  %643 = srem i32 %12, 64, !dbg !74
  %644 = sext i32 %643 to i64, !dbg !75
  %645 = getelementptr float, ptr addrspace(1) %3, i64 %644, !dbg !75
  %646 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %645, i1 %13) #5, !dbg !76
  %647 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %645, i1 %13) #5, !dbg !76
  %648 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %645, i1 %13) #5, !dbg !76
  %649 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %645, i1 %13) #5, !dbg !76
  %650 = bitcast i32 %649 to float, !dbg !76
  %651 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %635, float 4.096000e+03) #5, !dbg !77
  %652 = fadd float %651, 0x3EE4F8B580000000, !dbg !78
  %653 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %654 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %656 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %.not.i22 = icmp eq i32 %656, 0, !dbg !79
  br i1 %.not.i22, label %659, label %657, !dbg !79

657:                                              ; preds = %._crit_edge71
  %658 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %652), !dbg !79
  br label %__nv_rsqrtf.exit24, !dbg !79

659:                                              ; preds = %._crit_edge71
  %660 = tail call float @llvm.nvvm.rsqrt.approx.f(float %652), !dbg !79
  br label %__nv_rsqrtf.exit24, !dbg !79

__nv_rsqrtf.exit24:                               ; preds = %657, %659
  %.0.i23 = phi float [ %658, %657 ], [ %660, %659 ], !dbg !79
  %661 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float 4.096000e+03) #5, !dbg !80
  %662 = fadd float %661, 0x3EE4F8B580000000, !dbg !81
  %663 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !82
  %664 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !82
  %665 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !82
  %666 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !82
  %.not.i34 = icmp eq i32 %666, 0, !dbg !82
  br i1 %.not.i34, label %669, label %667, !dbg !82

667:                                              ; preds = %__nv_rsqrtf.exit24
  %668 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %662), !dbg !82
  br label %__nv_rsqrtf.exit36, !dbg !82

669:                                              ; preds = %__nv_rsqrtf.exit24
  %670 = tail call float @llvm.nvvm.rsqrt.approx.f(float %662), !dbg !82
  br label %__nv_rsqrtf.exit36, !dbg !82

__nv_rsqrtf.exit36:                               ; preds = %667, %669
  %.0.i35 = phi float [ %668, %667 ], [ %670, %669 ], !dbg !82
  %671 = sext i32 %19 to i64, !dbg !83
  %672 = getelementptr float, ptr addrspace(1) %2, i64 %671, !dbg !83
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %672, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !84
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !84
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !84
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !84
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !84
  %678 = bitcast i32 %674 to float, !dbg !84
  %679 = bitcast i32 %675 to float, !dbg !84
  %680 = bitcast i32 %676 to float, !dbg !84
  %681 = bitcast i32 %677 to float, !dbg !84
  %682 = getelementptr float, ptr addrspace(1) %1, i64 %671, !dbg !85
  %683 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %682, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !86
  %684 = extractvalue { i32, i32, i32, i32 } %683, 0, !dbg !86
  %685 = extractvalue { i32, i32, i32, i32 } %683, 1, !dbg !86
  %686 = extractvalue { i32, i32, i32, i32 } %683, 2, !dbg !86
  %687 = extractvalue { i32, i32, i32, i32 } %683, 3, !dbg !86
  %688 = bitcast i32 %684 to float, !dbg !86
  %689 = bitcast i32 %685 to float, !dbg !86
  %690 = bitcast i32 %686 to float, !dbg !86
  %691 = bitcast i32 %687 to float, !dbg !86
  %692 = getelementptr float, ptr addrspace(1) %0, i64 %671, !dbg !87
  %693 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %692, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !88
  %694 = extractvalue { i32, i32, i32, i32 } %693, 0, !dbg !88
  %695 = extractvalue { i32, i32, i32, i32 } %693, 1, !dbg !88
  %696 = extractvalue { i32, i32, i32, i32 } %693, 2, !dbg !88
  %697 = extractvalue { i32, i32, i32, i32 } %693, 3, !dbg !88
  %698 = bitcast i32 %694 to float, !dbg !88
  %699 = bitcast i32 %695 to float, !dbg !88
  %700 = bitcast i32 %696 to float, !dbg !88
  %701 = bitcast i32 %697 to float, !dbg !88
  %702 = fadd float %650, %678, !dbg !89
  %703 = fadd float %650, %679, !dbg !89
  %704 = fadd float %650, %680, !dbg !89
  %705 = fadd float %650, %681, !dbg !89
  %706 = fcmp olt float %702, 0.000000e+00, !dbg !90
  %707 = fcmp olt float %703, 0.000000e+00, !dbg !90
  %708 = fcmp olt float %704, 0.000000e+00, !dbg !90
  %709 = fcmp olt float %705, 0.000000e+00, !dbg !90
  %710 = select i1 %706, float 0.000000e+00, float %702, !dbg !92
  %711 = select i1 %707, float 0.000000e+00, float %703, !dbg !92
  %712 = select i1 %708, float 0.000000e+00, float %704, !dbg !92
  %713 = select i1 %709, float 0.000000e+00, float %705, !dbg !92
  %714 = fsub float %688, %634, !dbg !93
  %715 = fsub float %689, %634, !dbg !93
  %716 = fsub float %690, %634, !dbg !93
  %717 = fsub float %691, %634, !dbg !93
  %718 = fmul float %.0.i23, %714, !dbg !94
  %719 = fmul float %.0.i23, %715, !dbg !94
  %720 = fmul float %.0.i23, %716, !dbg !94
  %721 = fmul float %.0.i23, %717, !dbg !94
  %722 = fadd float %710, %718, !dbg !95
  %723 = fadd float %711, %719, !dbg !95
  %724 = fadd float %712, %720, !dbg !95
  %725 = fadd float %713, %721, !dbg !95
  %726 = fsub float %698, %397, !dbg !96
  %727 = fsub float %699, %397, !dbg !96
  %728 = fsub float %700, %397, !dbg !96
  %729 = fsub float %701, %397, !dbg !96
  %730 = fmul float %.0.i35, %726, !dbg !97
  %731 = fmul float %.0.i35, %727, !dbg !97
  %732 = fmul float %.0.i35, %728, !dbg !97
  %733 = fmul float %.0.i35, %729, !dbg !97
  %734 = fadd float %710, %730, !dbg !98
  %735 = fadd float %711, %731, !dbg !98
  %736 = fadd float %712, %732, !dbg !98
  %737 = fadd float %713, %733, !dbg !98
  %738 = getelementptr float, ptr addrspace(1) %6, i64 %671, !dbg !99
  %739 = bitcast float %722 to i32, !dbg !100
  %740 = bitcast float %723 to i32, !dbg !100
  %741 = bitcast float %724 to i32, !dbg !100
  %742 = bitcast float %725 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %739, i32 %740, i32 %741, i32 %742, ptr addrspace(1) %738, i1 %13) #5, !dbg !100
  %743 = getelementptr float, ptr addrspace(1) %7, i64 %671, !dbg !101
  %744 = bitcast float %734 to i32, !dbg !102
  %745 = bitcast float %735 to i32, !dbg !102
  %746 = bitcast float %736 to i32, !dbg !102
  %747 = bitcast float %737 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %744, i32 %745, i32 %746, i32 %747, ptr addrspace(1) %743, i1 %13) #5, !dbg !102
  %748 = or disjoint i32 %19, 2048, !dbg !103
  %749 = sext i32 %748 to i64, !dbg !83
  %750 = getelementptr float, ptr addrspace(1) %2, i64 %749, !dbg !83
  %751 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %750, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !84
  %752 = extractvalue { i32, i32, i32, i32 } %751, 0, !dbg !84
  %753 = extractvalue { i32, i32, i32, i32 } %751, 1, !dbg !84
  %754 = extractvalue { i32, i32, i32, i32 } %751, 2, !dbg !84
  %755 = extractvalue { i32, i32, i32, i32 } %751, 3, !dbg !84
  %756 = bitcast i32 %752 to float, !dbg !84
  %757 = bitcast i32 %753 to float, !dbg !84
  %758 = bitcast i32 %754 to float, !dbg !84
  %759 = bitcast i32 %755 to float, !dbg !84
  %760 = getelementptr float, ptr addrspace(1) %1, i64 %749, !dbg !85
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %760, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !86
  %762 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !86
  %763 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !86
  %764 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !86
  %765 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !86
  %766 = bitcast i32 %762 to float, !dbg !86
  %767 = bitcast i32 %763 to float, !dbg !86
  %768 = bitcast i32 %764 to float, !dbg !86
  %769 = bitcast i32 %765 to float, !dbg !86
  %770 = getelementptr float, ptr addrspace(1) %0, i64 %749, !dbg !87
  %771 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %770, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !88
  %772 = extractvalue { i32, i32, i32, i32 } %771, 0, !dbg !88
  %773 = extractvalue { i32, i32, i32, i32 } %771, 1, !dbg !88
  %774 = extractvalue { i32, i32, i32, i32 } %771, 2, !dbg !88
  %775 = extractvalue { i32, i32, i32, i32 } %771, 3, !dbg !88
  %776 = bitcast i32 %772 to float, !dbg !88
  %777 = bitcast i32 %773 to float, !dbg !88
  %778 = bitcast i32 %774 to float, !dbg !88
  %779 = bitcast i32 %775 to float, !dbg !88
  %780 = fadd float %650, %756, !dbg !89
  %781 = fadd float %650, %757, !dbg !89
  %782 = fadd float %650, %758, !dbg !89
  %783 = fadd float %650, %759, !dbg !89
  %784 = fcmp olt float %780, 0.000000e+00, !dbg !90
  %785 = fcmp olt float %781, 0.000000e+00, !dbg !90
  %786 = fcmp olt float %782, 0.000000e+00, !dbg !90
  %787 = fcmp olt float %783, 0.000000e+00, !dbg !90
  %788 = select i1 %784, float 0.000000e+00, float %780, !dbg !92
  %789 = select i1 %785, float 0.000000e+00, float %781, !dbg !92
  %790 = select i1 %786, float 0.000000e+00, float %782, !dbg !92
  %791 = select i1 %787, float 0.000000e+00, float %783, !dbg !92
  %792 = fsub float %766, %634, !dbg !93
  %793 = fsub float %767, %634, !dbg !93
  %794 = fsub float %768, %634, !dbg !93
  %795 = fsub float %769, %634, !dbg !93
  %796 = fmul float %.0.i23, %792, !dbg !94
  %797 = fmul float %.0.i23, %793, !dbg !94
  %798 = fmul float %.0.i23, %794, !dbg !94
  %799 = fmul float %.0.i23, %795, !dbg !94
  %800 = fadd float %788, %796, !dbg !95
  %801 = fadd float %789, %797, !dbg !95
  %802 = fadd float %790, %798, !dbg !95
  %803 = fadd float %791, %799, !dbg !95
  %804 = fsub float %776, %397, !dbg !96
  %805 = fsub float %777, %397, !dbg !96
  %806 = fsub float %778, %397, !dbg !96
  %807 = fsub float %779, %397, !dbg !96
  %808 = fmul float %.0.i35, %804, !dbg !97
  %809 = fmul float %.0.i35, %805, !dbg !97
  %810 = fmul float %.0.i35, %806, !dbg !97
  %811 = fmul float %.0.i35, %807, !dbg !97
  %812 = fadd float %788, %808, !dbg !98
  %813 = fadd float %789, %809, !dbg !98
  %814 = fadd float %790, %810, !dbg !98
  %815 = fadd float %791, %811, !dbg !98
  %816 = getelementptr float, ptr addrspace(1) %6, i64 %749, !dbg !99
  %817 = bitcast float %800 to i32, !dbg !100
  %818 = bitcast float %801 to i32, !dbg !100
  %819 = bitcast float %802 to i32, !dbg !100
  %820 = bitcast float %803 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %817, i32 %818, i32 %819, i32 %820, ptr addrspace(1) %816, i1 %13) #5, !dbg !100
  %821 = getelementptr float, ptr addrspace(1) %7, i64 %749, !dbg !101
  %822 = bitcast float %812 to i32, !dbg !102
  %823 = bitcast float %813 to i32, !dbg !102
  %824 = bitcast float %814 to i32, !dbg !102
  %825 = bitcast float %815 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %822, i32 %823, i32 %824, i32 %825, ptr addrspace(1) %821, i1 %13) #5, !dbg !102
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !104
  %.not.i37 = icmp eq i32 %826, 0, !dbg !104
  br i1 %.not.i37, label %829, label %827, !dbg !104

827:                                              ; preds = %__nv_rsqrtf.exit36
  %828 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %652), !dbg !104
  br label %__nv_rsqrtf.exit39, !dbg !104

829:                                              ; preds = %__nv_rsqrtf.exit36
  %830 = tail call float @llvm.nvvm.rsqrt.approx.f(float %652), !dbg !104
  br label %__nv_rsqrtf.exit39, !dbg !104

__nv_rsqrtf.exit39:                               ; preds = %827, %829
  %.0.i38 = phi float [ %828, %827 ], [ %830, %829 ], !dbg !104
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !105
  %.not.i40 = icmp eq i32 %831, 0, !dbg !105
  br i1 %.not.i40, label %834, label %832, !dbg !105

832:                                              ; preds = %__nv_rsqrtf.exit39
  %833 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %662), !dbg !105
  br label %__nv_rsqrtf.exit42, !dbg !105

834:                                              ; preds = %__nv_rsqrtf.exit39
  %835 = tail call float @llvm.nvvm.rsqrt.approx.f(float %662), !dbg !105
  br label %__nv_rsqrtf.exit42, !dbg !105

__nv_rsqrtf.exit42:                               ; preds = %832, %834
  %.0.i41 = phi float [ %833, %832 ], [ %835, %834 ], !dbg !105
  %836 = getelementptr float, ptr addrspace(1) %8, i64 %636, !dbg !106
  %837 = bitcast float %.0.i38 to i32, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %837, ptr addrspace(1) %836, i1 %640) #5, !dbg !107
  %838 = getelementptr float, ptr addrspace(1) %9, i64 %636, !dbg !108
  %839 = bitcast float %.0.i41 to i32, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %839, ptr addrspace(1) %838, i1 %640) #5, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctiry7hk2om52hrmo4ber4abcc7blkwfxjqs2fuzbjjzxj6vyfam.py", directory: "inductor_cache/ti")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_add_convolution_reflection_pad2d_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_add_convolution_reflection_pad2d_relu_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_add_convolution_reflection_pad2d_relu_4", linkageName: "triton_red_fused__native_batch_norm_legit_add_convolution_reflection_pad2d_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 37, column: 44, scope: !7)
!14 = !DILocation(line: 37, column: 34, scope: !7)
!15 = !DILocation(line: 37, column: 49, scope: !7)
!16 = !DILocation(line: 38, column: 34, scope: !7)
!17 = !DILocation(line: 38, column: 49, scope: !7)
!18 = !DILocation(line: 43, column: 60, scope: !7)
!19 = !DILocation(line: 50, column: 60, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 183, column: 24, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 41, column: 51, scope: !7)
!25 = !DILocation(line: 45, column: 64, scope: !7)
!26 = !DILocation(line: 185, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 185, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 186, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 186, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 186, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 44, column: 56, scope: !7)
!32 = !DILocation(line: 183, column: 24, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 48, column: 51, scope: !7)
!34 = !DILocation(line: 52, column: 64, scope: !7)
!35 = !DILocation(line: 185, column: 34, scope: !22, inlinedAt: !33)
!36 = !DILocation(line: 185, column: 26, scope: !22, inlinedAt: !33)
!37 = !DILocation(line: 186, column: 39, scope: !22, inlinedAt: !33)
!38 = !DILocation(line: 186, column: 31, scope: !22, inlinedAt: !33)
!39 = !DILocation(line: 186, column: 22, scope: !22, inlinedAt: !33)
!40 = !DILocation(line: 51, column: 56, scope: !7)
!41 = !DILocation(line: 192, column: 21, scope: !42, inlinedAt: !43)
!42 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!43 = !DILocation(line: 54, column: 41, scope: !7)
!44 = !DILocation(line: 193, column: 28, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 194, column: 39, scope: !42, inlinedAt: !43)
!46 = !DILocation(line: 194, column: 60, scope: !42, inlinedAt: !43)
!47 = !DILocation(line: 194, column: 49, scope: !42, inlinedAt: !43)
!48 = !DILocation(line: 196, column: 25, scope: !42, inlinedAt: !43)
!49 = !DILocation(line: 196, column: 17, scope: !42, inlinedAt: !43)
!50 = !DILocation(line: 197, column: 15, scope: !42, inlinedAt: !43)
!51 = !DILocation(line: 197, column: 30, scope: !42, inlinedAt: !43)
!52 = !DILocation(line: 197, column: 38, scope: !42, inlinedAt: !43)
!53 = !DILocation(line: 197, column: 49, scope: !42, inlinedAt: !43)
!54 = !DILocation(line: 197, column: 22, scope: !42, inlinedAt: !43)
!55 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !43)
!56 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !57)
!57 = !DILocation(line: 60, column: 41, scope: !7)
!58 = !DILocation(line: 192, column: 21, scope: !42, inlinedAt: !57)
!59 = !DILocation(line: 193, column: 28, scope: !42, inlinedAt: !57)
!60 = !DILocation(line: 194, column: 39, scope: !42, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 60, scope: !42, inlinedAt: !57)
!62 = !DILocation(line: 194, column: 49, scope: !42, inlinedAt: !57)
!63 = !DILocation(line: 196, column: 25, scope: !42, inlinedAt: !57)
!64 = !DILocation(line: 196, column: 17, scope: !42, inlinedAt: !57)
!65 = !DILocation(line: 197, column: 15, scope: !42, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 30, scope: !42, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 38, scope: !42, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 49, scope: !42, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 22, scope: !42, inlinedAt: !57)
!70 = !DILocation(line: 65, column: 25, scope: !7)
!71 = !DILocation(line: 65, column: 36, scope: !7)
!72 = !DILocation(line: 66, column: 25, scope: !7)
!73 = !DILocation(line: 66, column: 36, scope: !7)
!74 = !DILocation(line: 67, column: 19, scope: !7)
!75 = !DILocation(line: 68, column: 31, scope: !7)
!76 = !DILocation(line: 68, column: 36, scope: !7)
!77 = !DILocation(line: 81, column: 23, scope: !7)
!78 = !DILocation(line: 83, column: 24, scope: !7)
!79 = !DILocation(line: 84, column: 32, scope: !7)
!80 = !DILocation(line: 88, column: 23, scope: !7)
!81 = !DILocation(line: 89, column: 24, scope: !7)
!82 = !DILocation(line: 90, column: 32, scope: !7)
!83 = !DILocation(line: 73, column: 35, scope: !7)
!84 = !DILocation(line: 73, column: 50, scope: !7)
!85 = !DILocation(line: 74, column: 35, scope: !7)
!86 = !DILocation(line: 74, column: 50, scope: !7)
!87 = !DILocation(line: 75, column: 35, scope: !7)
!88 = !DILocation(line: 75, column: 50, scope: !7)
!89 = !DILocation(line: 76, column: 24, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !91)
!91 = !DILocation(line: 78, column: 46, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !91)
!93 = !DILocation(line: 79, column: 24, scope: !7)
!94 = !DILocation(line: 85, column: 24, scope: !7)
!95 = !DILocation(line: 86, column: 24, scope: !7)
!96 = !DILocation(line: 87, column: 24, scope: !7)
!97 = !DILocation(line: 91, column: 24, scope: !7)
!98 = !DILocation(line: 92, column: 24, scope: !7)
!99 = !DILocation(line: 93, column: 29, scope: !7)
!100 = !DILocation(line: 93, column: 51, scope: !7)
!101 = !DILocation(line: 94, column: 29, scope: !7)
!102 = !DILocation(line: 94, column: 51, scope: !7)
!103 = !DILocation(line: 73, column: 40, scope: !7)
!104 = !DILocation(line: 99, column: 28, scope: !7)
!105 = !DILocation(line: 102, column: 28, scope: !7)
!106 = !DILocation(line: 103, column: 25, scope: !7)
!107 = !DILocation(line: 103, column: 37, scope: !7)
!108 = !DILocation(line: 104, column: 25, scope: !7)
!109 = !DILocation(line: 104, column: 37, scope: !7)
!110 = !DILocation(line: 104, column: 4, scope: !7)
