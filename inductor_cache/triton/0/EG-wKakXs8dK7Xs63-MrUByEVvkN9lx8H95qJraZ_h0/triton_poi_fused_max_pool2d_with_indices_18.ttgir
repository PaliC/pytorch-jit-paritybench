#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_max_pool2d_with_indices_18(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":19:0), %arg2: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1> : tensor<512xi8, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<512xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<512xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<512xi8, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0xFF800000> : tensor<512xf32, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<4608> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<18> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<2> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<8> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<-1> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<17> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<-256> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<8704> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<1> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<4096> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<4352> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_4 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_5 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_6 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_7 : tensor<512xi32, #blocked> loc(#loc9)
    %9 = arith.remsi %4, %cst_4 : tensor<512xi32, #blocked> loc(#loc10)
    %10 = arith.muli %6, %cst_8 : tensor<512xi32, #blocked> loc(#loc11)
    %11 = arith.extsi %10 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc12)
    %12 = arith.cmpi sge, %11, %cst_9 : tensor<512xi64, #blocked> loc(#loc12)
    %13 = arith.cmpi slt, %11, %cst_10 : tensor<512xi64, #blocked> loc(#loc13)
    %14 = arith.andi %12, %13 : tensor<512xi1, #blocked> loc(#loc14)
    %15 = arith.addi %8, %cst_11 : tensor<512xi32, #blocked> loc(#loc15)
    %16 = arith.extsi %15 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc16)
    %17 = arith.cmpi sge, %16, %cst_9 : tensor<512xi64, #blocked> loc(#loc16)
    %18 = arith.cmpi slt, %16, %cst_12 : tensor<512xi64, #blocked> loc(#loc17)
    %19 = arith.andi %17, %18 : tensor<512xi1, #blocked> loc(#loc18)
    %20 = arith.andi %14, %19 : tensor<512xi1, #blocked> loc(#loc19)
    %21 = arith.addi %9, %cst_13 : tensor<512xi32, #blocked> loc(#loc20)
    %22 = arith.muli %5, %cst_14 : tensor<512xi32, #blocked> loc(#loc21)
    %23 = arith.addi %21, %22 : tensor<512xi32, #blocked> loc(#loc22)
    %24 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc23)
    %25 = tt.addptr %24, %23 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc23)
    %26 = tt.load %25, %20, %cst_3 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = arith.extsi %8 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc25)
    %28 = arith.cmpi sge, %27, %cst_9 : tensor<512xi64, #blocked> loc(#loc25)
    %29 = arith.cmpi slt, %27, %cst_12 : tensor<512xi64, #blocked> loc(#loc26)
    %30 = arith.andi %28, %29 : tensor<512xi1, #blocked> loc(#loc27)
    %31 = arith.andi %14, %30 : tensor<512xi1, #blocked> loc(#loc28)
    %32 = arith.addi %9, %22 : tensor<512xi32, #blocked> loc(#loc29)
    %33 = tt.addptr %24, %32 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc30)
    %34 = tt.load %33, %31, %cst_3 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc31)
    %35 = arith.cmpf ogt, %34, %26 : tensor<512xf32, #blocked> loc(#loc61)
    %36 = arith.cmpf une, %34, %34 : tensor<512xf32, #blocked> loc(#loc62)
    %37 = arith.ori %35, %36 : tensor<512xi1, #blocked> loc(#loc63)
    %38 = arith.select %37, %34, %26 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc64)
    %39 = arith.addi %10, %cst_15 : tensor<512xi32, #blocked> loc(#loc37)
    %40 = arith.extsi %39 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc38)
    %41 = arith.cmpi sge, %40, %cst_9 : tensor<512xi64, #blocked> loc(#loc38)
    %42 = arith.cmpi slt, %40, %cst_10 : tensor<512xi64, #blocked> loc(#loc39)
    %43 = arith.andi %41, %42 : tensor<512xi1, #blocked> loc(#loc40)
    %44 = arith.andi %43, %19 : tensor<512xi1, #blocked> loc(#loc41)
    %45 = arith.addi %9, %cst_16 : tensor<512xi32, #blocked> loc(#loc42)
    %46 = arith.addi %45, %22 : tensor<512xi32, #blocked> loc(#loc43)
    %47 = tt.addptr %24, %46 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc44)
    %48 = tt.load %47, %44, %cst_3 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc45)
    %49 = arith.cmpf ogt, %48, %38 : tensor<512xf32, #blocked> loc(#loc65)
    %50 = arith.cmpf une, %48, %48 : tensor<512xf32, #blocked> loc(#loc66)
    %51 = arith.ori %49, %50 : tensor<512xi1, #blocked> loc(#loc67)
    %52 = arith.select %51, %48, %38 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc68)
    %53 = arith.andi %43, %30 : tensor<512xi1, #blocked> loc(#loc47)
    %54 = arith.addi %9, %cst_17 : tensor<512xi32, #blocked> loc(#loc48)
    %55 = arith.addi %54, %22 : tensor<512xi32, #blocked> loc(#loc49)
    %56 = tt.addptr %24, %55 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc50)
    %57 = tt.load %56, %53, %cst_3 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc51)
    %58 = arith.cmpf ogt, %57, %52 : tensor<512xf32, #blocked> loc(#loc69)
    %59 = arith.cmpf une, %57, %57 : tensor<512xf32, #blocked> loc(#loc70)
    %60 = arith.ori %58, %59 : tensor<512xi1, #blocked> loc(#loc71)
    %61 = arith.select %60, %57, %52 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc72)
    %62 = arith.select %35, %cst, %cst_0 : tensor<512xi1, #blocked>, tensor<512xi8, #blocked> loc(#loc53)
    %63 = arith.select %49, %cst_1, %62 : tensor<512xi1, #blocked>, tensor<512xi8, #blocked> loc(#loc54)
    %64 = arith.select %58, %cst_2, %63 : tensor<512xi1, #blocked>, tensor<512xi8, #blocked> loc(#loc55)
    %65 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc56)
    %66 = tt.addptr %65, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc56)
    tt.store %66, %61 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc57)
    %67 = tt.splat %arg2 : !tt.ptr<i8> -> tensor<512x!tt.ptr<i8>, #blocked> loc(#loc58)
    %68 = tt.addptr %67, %4 : tensor<512x!tt.ptr<i8>, #blocked>, tensor<512xi32, #blocked> loc(#loc58)
    tt.store %68, %64 : tensor<512x!tt.ptr<i8>, #blocked> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":21:28)
#loc3 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":21:33)
#loc4 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":22:36)
#loc5 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":22:23)
#loc6 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":24:21)
#loc7 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":24:29)
#loc8 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":25:21)
#loc9 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":25:28)
#loc10 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":26:19)
#loc11 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":29:13)
#loc12 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":31:19)
#loc13 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":33:18)
#loc14 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":34:18)
#loc15 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":35:18)
#loc16 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":36:19)
#loc17 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":38:18)
#loc18 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":39:19)
#loc19 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":40:19)
#loc20 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":41:40)
#loc21 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":41:50)
#loc22 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":41:45)
#loc23 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":41:31)
#loc24 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":41:55)
#loc25 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":43:21)
#loc26 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":44:20)
#loc27 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":45:20)
#loc28 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":46:19)
#loc29 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":47:36)
#loc30 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":47:31)
#loc31 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":47:46)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc33 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":48:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc37 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":49:16)
#loc38 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":50:21)
#loc39 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":51:20)
#loc40 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":52:20)
#loc41 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":53:20)
#loc42 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":54:38)
#loc43 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":54:43)
#loc44 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":54:31)
#loc45 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":54:53)
#loc46 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":55:42)
#loc47 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":56:20)
#loc48 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":57:38)
#loc49 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":57:43)
#loc50 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":57:31)
#loc51 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":57:53)
#loc52 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":58:42)
#loc53 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":62:35)
#loc54 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":65:35)
#loc55 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":68:35)
#loc56 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":69:25)
#loc57 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":69:37)
#loc58 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":70:25)
#loc59 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":70:37)
#loc60 = loc("inductor_cache/b3/cb3numelpx2bqjsgygtfispvxzkozuyzb3wj57e6h35ryrwgoxkc.py":70:4)
#loc61 = loc(callsite(#loc32 at #loc33))
#loc62 = loc(callsite(#loc34 at #loc33))
#loc63 = loc(callsite(#loc35 at #loc33))
#loc64 = loc(callsite(#loc36 at #loc33))
#loc65 = loc(callsite(#loc32 at #loc46))
#loc66 = loc(callsite(#loc34 at #loc46))
#loc67 = loc(callsite(#loc35 at #loc46))
#loc68 = loc(callsite(#loc36 at #loc46))
#loc69 = loc(callsite(#loc32 at #loc52))
#loc70 = loc(callsite(#loc34 at #loc52))
#loc71 = loc(callsite(#loc35 at #loc52))
#loc72 = loc(callsite(#loc36 at #loc52))
