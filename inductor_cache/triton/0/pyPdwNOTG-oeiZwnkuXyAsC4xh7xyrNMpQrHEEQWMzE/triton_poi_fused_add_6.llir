; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 65536, !dbg !14
  %15 = mul i32 %14, 65536, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %.frozen1 = freeze i32 %13, !dbg !14
  %16 = sdiv i32 %.frozen1, 65536, !dbg !14
  %17 = mul i32 %16, 65536, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !15
  %18 = mul i32 %14, 73728, !dbg !16
  %19 = mul i32 %16, 73728, !dbg !16
  %20 = add i32 %18, %.decomposed, !dbg !17
  %21 = add i32 %19, %.decomposed2, !dbg !17
  %22 = sext i32 %20 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = mul i32 %14, 69632, !dbg !20
  %45 = mul i32 %16, 69632, !dbg !20
  %46 = add i32 %44, %.decomposed, !dbg !21
  %47 = add i32 %45, %.decomposed2, !dbg !21
  %48 = sext i32 %46 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !22
  %50 = sext i32 %47 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !27
  %97 = bitcast i32 %93 to float, !dbg !27
  %98 = bitcast i32 %94 to float, !dbg !27
  %99 = bitcast i32 %95 to float, !dbg !27
  %100 = bitcast i32 %96 to float, !dbg !27
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !27
  %106 = bitcast i32 %102 to float, !dbg !27
  %107 = bitcast i32 %103 to float, !dbg !27
  %108 = bitcast i32 %104 to float, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = fadd float %31, %57, !dbg !28
  %111 = fadd float %32, %58, !dbg !28
  %112 = fadd float %33, %59, !dbg !28
  %113 = fadd float %34, %60, !dbg !28
  %114 = fadd float %40, %66, !dbg !28
  %115 = fadd float %41, %67, !dbg !28
  %116 = fadd float %42, %68, !dbg !28
  %117 = fadd float %43, %69, !dbg !28
  %118 = fadd float %110, %77, !dbg !29
  %119 = fadd float %111, %78, !dbg !29
  %120 = fadd float %112, %79, !dbg !29
  %121 = fadd float %113, %80, !dbg !29
  %122 = fadd float %114, %86, !dbg !29
  %123 = fadd float %115, %87, !dbg !29
  %124 = fadd float %116, %88, !dbg !29
  %125 = fadd float %117, %89, !dbg !29
  %126 = fadd float %118, %97, !dbg !30
  %127 = fadd float %119, %98, !dbg !30
  %128 = fadd float %120, %99, !dbg !30
  %129 = fadd float %121, %100, !dbg !30
  %130 = fadd float %122, %106, !dbg !30
  %131 = fadd float %123, %107, !dbg !30
  %132 = fadd float %124, %108, !dbg !30
  %133 = fadd float %125, %109, !dbg !30
  %134 = mul i32 %14, 86016, !dbg !31
  %135 = mul i32 %16, 86016, !dbg !31
  %136 = add i32 %134, %.decomposed, !dbg !32
  %137 = add i32 %135, %.decomposed2, !dbg !32
  %138 = sext i32 %136 to i64, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %4, i64 %138, !dbg !33
  %140 = sext i32 %137 to i64, !dbg !33
  %141 = getelementptr float, ptr addrspace(1) %4, i64 %140, !dbg !33
  %142 = bitcast float %126 to i32, !dbg !34
  %143 = bitcast float %127 to i32, !dbg !34
  %144 = bitcast float %128 to i32, !dbg !34
  %145 = bitcast float %129 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %139, i1 true) #1, !dbg !34
  %146 = bitcast float %130 to i32, !dbg !34
  %147 = bitcast float %131 to i32, !dbg !34
  %148 = bitcast float %132 to i32, !dbg !34
  %149 = bitcast float %133 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %147, i32 %148, i32 %149, ptr addrspace(1) %141, i1 true) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpcjopo4uryukjn4toatyf4givs2jestvx6xb3rxe43eugdc4nhu.py", directory: "inductor_cache/pc")
!4 = !{ptr @triton_poi_fused_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_6", linkageName: "triton_poi_fused_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 41, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 46, scope: !7)
!20 = !DILocation(line: 27, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 46, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 46, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 46, scope: !7)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 47, scope: !7)
!35 = !DILocation(line: 33, column: 4, scope: !7)
