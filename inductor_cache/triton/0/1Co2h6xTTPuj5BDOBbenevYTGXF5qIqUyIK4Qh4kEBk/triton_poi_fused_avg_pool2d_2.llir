; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 64, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %13 = insertelement <2 x i32> %12, i32 %11, i64 1, !dbg !15
  %14 = srem <2 x i32> %13, splat (i32 64), !dbg !15
  %15 = srem i32 %10, 64, !dbg !15
  %16 = extractelement <2 x i32> %14, i64 1, !dbg !16
  %17 = icmp sgt i32 %16, 0, !dbg !17
  %18 = extractelement <2 x i32> %14, i64 0, !dbg !18
  %19 = icmp sgt i32 %18, 0, !dbg !19
  %20 = icmp sgt i32 %15, 0, !dbg !19
  %21 = and i1 %19, %17, !dbg !20
  %22 = and i1 %20, %17, !dbg !20
  %23 = add i32 %9, -65, !dbg !21
  %24 = add i32 %9, -64, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %22, i32 0, i1 %22) #1, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = icmp sgt i32 %18, -1, !dbg !24
  %34 = and i1 %33, %17, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = fadd float %30, %38, !dbg !27
  %41 = fadd float %32, %39, !dbg !27
  %42 = icmp ult i32 %18, 64, !dbg !28
  %43 = add nsw i32 %15, 1, !dbg !28
  %44 = icmp ult i32 %43, 64, !dbg !28
  %45 = and i1 %42, %17, !dbg !29
  %46 = and i1 %44, %17, !dbg !29
  %47 = add i32 %9, -63, !dbg !30
  %48 = add i32 %9, -62, !dbg !30
  %49 = sext i32 %47 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = sext i32 %48 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45) #1, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %46, i32 0, i1 %46) #1, !dbg !32
  %56 = bitcast i32 %55 to float, !dbg !32
  %57 = fadd float %40, %54, !dbg !33
  %58 = fadd float %41, %56, !dbg !33
  %59 = icmp sgt i32 %16, -1, !dbg !34
  %60 = and i1 %19, %59, !dbg !35
  %61 = and i1 %20, %59, !dbg !35
  %62 = add i32 %9, -1, !dbg !36
  %63 = sext i32 %62 to i64, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !37
  %65 = sext i32 %10 to i64, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !37
  %67 = getelementptr i8, ptr addrspace(1) %66, i64 -4, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 0, i1 %60) #1, !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %61, i32 0, i1 %61) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = fadd float %57, %69, !dbg !39
  %73 = fadd float %58, %71, !dbg !39
  %74 = or i32 %16, %18, !dbg !40
  %75 = icmp sgt i32 %74, -1, !dbg !40
  %76 = sext i32 %9 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !41
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !42
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !42
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !42
  %81 = bitcast i32 %79 to float, !dbg !42
  %82 = bitcast i32 %80 to float, !dbg !42
  %83 = fadd float %72, %81, !dbg !43
  %84 = fadd float %73, %82, !dbg !43
  %85 = and i1 %42, %59, !dbg !44
  %86 = and i1 %44, %59, !dbg !44
  %87 = add i32 %9, 2, !dbg !45
  %88 = sext i32 %87 to i64, !dbg !46
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !46
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %85, i32 0, i1 %85) #1, !dbg !47
  %91 = bitcast i32 %90 to float, !dbg !47
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %86, i32 0, i1 %86) #1, !dbg !47
  %93 = bitcast i32 %92 to float, !dbg !47
  %94 = fadd float %83, %91, !dbg !48
  %95 = fadd float %84, %93, !dbg !48
  %96 = add nsw i32 %16, 1, !dbg !49
  %97 = icmp ult i32 %96, 64, !dbg !49
  %98 = and i1 %19, %97, !dbg !50
  %99 = and i1 %20, %97, !dbg !50
  %100 = add i32 %9, 63, !dbg !51
  %101 = add i32 %9, 64, !dbg !51
  %102 = sext i32 %100 to i64, !dbg !52
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !52
  %104 = sext i32 %101 to i64, !dbg !52
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !52
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %98, i32 0, i1 %98) #1, !dbg !53
  %107 = bitcast i32 %106 to float, !dbg !53
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %99, i32 0, i1 %99) #1, !dbg !53
  %109 = bitcast i32 %108 to float, !dbg !53
  %110 = fadd float %94, %107, !dbg !54
  %111 = fadd float %95, %109, !dbg !54
  %112 = and i1 %33, %97, !dbg !55
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %105, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #1, !dbg !56
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !56
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !56
  %116 = bitcast i32 %114 to float, !dbg !56
  %117 = bitcast i32 %115 to float, !dbg !56
  %118 = fadd float %110, %116, !dbg !57
  %119 = fadd float %111, %117, !dbg !57
  %120 = or i32 %96, %18, !dbg !58
  %121 = icmp ult i32 %120, 64, !dbg !58
  %122 = or i32 %96, %43, !dbg !58
  %123 = icmp ult i32 %122, 64, !dbg !58
  %124 = add i32 %9, 65, !dbg !59
  %125 = add i32 %9, 66, !dbg !59
  %126 = sext i32 %124 to i64, !dbg !60
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !60
  %128 = sext i32 %125 to i64, !dbg !60
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !60
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %121, i32 0, i1 %121) #1, !dbg !61
  %131 = bitcast i32 %130 to float, !dbg !61
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %123, i32 0, i1 %123) #1, !dbg !61
  %133 = bitcast i32 %132 to float, !dbg !61
  %134 = fadd float %118, %131, !dbg !62
  %135 = fadd float %119, %133, !dbg !62
  %136 = add nsw i32 %18, 2, !dbg !63
  %137 = add nsw i32 %15, 2, !dbg !63
  %138 = icmp sgt i32 %18, 62, !dbg !64
  %139 = icmp sgt i32 %15, 62, !dbg !64
  %140 = select i1 %138, i32 65, i32 0, !dbg !65
  %141 = select i1 %139, i32 65, i32 0, !dbg !65
  %142 = icmp slt i32 %18, 63, !dbg !66
  %143 = icmp slt i32 %15, 63, !dbg !66
  %144 = select i1 %142, i32 %136, i32 0, !dbg !67
  %145 = select i1 %143, i32 %137, i32 0, !dbg !67
  %146 = add nsw i32 %140, %144, !dbg !68
  %147 = add nsw i32 %141, %145, !dbg !68
  %148 = add nsw i32 %16, 2, !dbg !69
  %149 = icmp sgt i32 %16, 62, !dbg !70
  %150 = select i1 %149, i32 65, i32 0, !dbg !71
  %151 = icmp slt i32 %16, 63, !dbg !72
  %152 = select i1 %151, i32 %148, i32 0, !dbg !73
  %153 = add nsw i32 %150, %152, !dbg !74
  %reass.add = sub nsw i32 %153, %16
  %reass.mul = mul nsw i32 %reass.add, %146
  %reass.add9 = sub nsw i32 %16, %153
  %reass.mul10 = mul nsw i32 %reass.add9, %18
  %154 = add nsw i32 %18, %16, !dbg !18
  %reass.sub = sub nsw i32 %146, %154, !dbg !16
  %155 = add nsw i32 %reass.sub, 1, !dbg !16
  %156 = add nsw i32 %155, %153, !dbg !75
  %157 = add nsw i32 %156, %reass.mul, !dbg !76
  %158 = add nsw i32 %157, %reass.mul10, !dbg !77
  %reass.mul8 = mul nsw i32 %reass.add, %147
  %reass.mul12 = mul nsw i32 %reass.add9, %15
  %159 = add nsw i32 %147, 1, !dbg !16
  %160 = add nsw i32 %15, %16, !dbg !16
  %161 = sub nsw i32 %159, %160, !dbg !16
  %162 = add nsw i32 %161, %153, !dbg !75
  %163 = add nsw i32 %162, %reass.mul8, !dbg !76
  %164 = add nsw i32 %163, %reass.mul12, !dbg !77
  %165 = sitofp i32 %158 to float, !dbg !78
  %166 = sitofp i32 %164 to float, !dbg !78
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %165) #1, !dbg !78
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %166) #1, !dbg !78
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !79
  %170 = bitcast float %167 to i32, !dbg !80
  %171 = bitcast float %168 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cekevgjzoewgnrdpdxqsqqk7h55cthhltn3mk4fsp6f7e6ygfx4c.py", directory: "inductor_cache/ek")
!4 = !{ptr @triton_poi_fused_avg_pool2d_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_2", linkageName: "triton_poi_fused_avg_pool2d_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 79, column: 169, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 79, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 19, scope: !7)
!20 = !DILocation(line: 37, column: 19, scope: !7)
!21 = !DILocation(line: 38, column: 39, scope: !7)
!22 = !DILocation(line: 38, column: 31, scope: !7)
!23 = !DILocation(line: 38, column: 44, scope: !7)
!24 = !DILocation(line: 40, column: 21, scope: !7)
!25 = !DILocation(line: 43, column: 19, scope: !7)
!26 = !DILocation(line: 44, column: 44, scope: !7)
!27 = !DILocation(line: 45, column: 20, scope: !7)
!28 = !DILocation(line: 49, column: 20, scope: !7)
!29 = !DILocation(line: 50, column: 19, scope: !7)
!30 = !DILocation(line: 51, column: 39, scope: !7)
!31 = !DILocation(line: 51, column: 31, scope: !7)
!32 = !DILocation(line: 51, column: 44, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 54, column: 21, scope: !7)
!35 = !DILocation(line: 57, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 38, scope: !7)
!37 = !DILocation(line: 58, column: 31, scope: !7)
!38 = !DILocation(line: 58, column: 43, scope: !7)
!39 = !DILocation(line: 59, column: 20, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 31, scope: !7)
!42 = !DILocation(line: 61, column: 36, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 35, scope: !7)
!46 = !DILocation(line: 64, column: 31, scope: !7)
!47 = !DILocation(line: 64, column: 40, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 36, scope: !7)
!52 = !DILocation(line: 71, column: 31, scope: !7)
!53 = !DILocation(line: 71, column: 41, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 20, scope: !7)
!56 = !DILocation(line: 74, column: 41, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 36, scope: !7)
!60 = !DILocation(line: 77, column: 31, scope: !7)
!61 = !DILocation(line: 77, column: 41, scope: !7)
!62 = !DILocation(line: 78, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 70, scope: !7)
!64 = !DILocation(line: 79, column: 66, scope: !7)
!65 = !DILocation(line: 79, column: 57, scope: !7)
!66 = !DILocation(line: 79, column: 101, scope: !7)
!67 = !DILocation(line: 79, column: 89, scope: !7)
!68 = !DILocation(line: 79, column: 77, scope: !7)
!69 = !DILocation(line: 79, column: 129, scope: !7)
!70 = !DILocation(line: 79, column: 125, scope: !7)
!71 = !DILocation(line: 79, column: 116, scope: !7)
!72 = !DILocation(line: 79, column: 160, scope: !7)
!73 = !DILocation(line: 79, column: 148, scope: !7)
!74 = !DILocation(line: 79, column: 136, scope: !7)
!75 = !DILocation(line: 79, column: 240, scope: !7)
!76 = !DILocation(line: 79, column: 311, scope: !7)
!77 = !DILocation(line: 79, column: 372, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 25, scope: !7)
!80 = !DILocation(line: 81, column: 37, scope: !7)
!81 = !DILocation(line: 81, column: 4, scope: !7)
