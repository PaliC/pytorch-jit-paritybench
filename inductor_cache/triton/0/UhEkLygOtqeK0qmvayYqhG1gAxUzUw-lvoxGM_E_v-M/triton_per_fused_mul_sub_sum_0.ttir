#loc = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0)
#loc1 = loc(unknown)
#loc26 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":40:24)
#loc30 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":43:26)
#loc34 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":47:26)
#loc38 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":51:26)
#loc41 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":54:26)
#loc60 = loc(callsite(#loc1 at #loc26))
#loc63 = loc(callsite(#loc1 at #loc30))
#loc65 = loc(callsite(#loc1 at #loc34))
#loc67 = loc(callsite(#loc1 at #loc38))
#loc69 = loc(callsite(#loc1 at #loc41))
module {
  tt.func public @triton_per_fused_mul_sub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x64xf32> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<8x1xi32> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x64xi32> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<8x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_3 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_2 : tensor<8x1xi32> loc(#loc10)
    %10 = arith.divsi %5, %cst_2 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.muli %8, %cst_1 : tensor<1x64xi32> loc(#loc12)
    %12 = tt.broadcast %9 : tensor<8x1xi32> -> tensor<8x64xi32> loc(#loc13)
    %13 = tt.broadcast %11 : tensor<1x64xi32> -> tensor<8x64xi32> loc(#loc13)
    %14 = arith.addi %12, %13 : tensor<8x64xi32> loc(#loc13)
    %15 = arith.muli %10, %cst_0 : tensor<8x1xi32> loc(#loc14)
    %16 = tt.broadcast %15 : tensor<8x1xi32> -> tensor<8x64xi32> loc(#loc15)
    %17 = arith.addi %14, %16 : tensor<8x64xi32> loc(#loc15)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc16)
    %19 = tt.addptr %18, %17 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc16)
    %20 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x64xi1> loc(#loc17)
    %21 = tt.load %19, %20, %cst : tensor<8x64x!tt.ptr<f32>> loc(#loc17)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc18)
    %23 = tt.addptr %22, %17 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc18)
    %24 = tt.load %23, %20, %cst : tensor<8x64x!tt.ptr<f32>> loc(#loc19)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc20)
    %26 = tt.addptr %25, %17 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc20)
    %27 = tt.load %26, %20, %cst : tensor<8x64x!tt.ptr<f32>> loc(#loc21)
    %28 = arith.mulf %21, %24 : tensor<8x64xf32> loc(#loc22)
    %29 = arith.mulf %28, %24 : tensor<8x64xf32> loc(#loc23)
    %30 = arith.select %20, %29, %cst : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc24)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc26)), %arg12: f32 loc(callsite(#loc1 at #loc26))):
      %62 = arith.addf %arg11, %arg12 : f32 loc(#loc70)
      tt.reduce.return %62 : f32 loc(#loc59)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc59)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc28)
    %33 = arith.select %20, %28, %cst : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc29)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc30)), %arg12: f32 loc(callsite(#loc1 at #loc30))):
      %62 = arith.addf %arg11, %arg12 : f32 loc(#loc71)
      tt.reduce.return %62 : f32 loc(#loc62)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc62)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc31)
    %36 = arith.mulf %28, %27 : tensor<8x64xf32> loc(#loc32)
    %37 = arith.select %20, %36, %cst : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc33)
    %38 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc34)), %arg12: f32 loc(callsite(#loc1 at #loc34))):
      %62 = arith.addf %arg11, %arg12 : f32 loc(#loc72)
      tt.reduce.return %62 : f32 loc(#loc64)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc64)
    %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc35)
    %40 = arith.mulf %21, %27 : tensor<8x64xf32> loc(#loc36)
    %41 = arith.select %20, %40, %cst : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc37)
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc38)), %arg12: f32 loc(callsite(#loc1 at #loc38))):
      %62 = arith.addf %arg11, %arg12 : f32 loc(#loc73)
      tt.reduce.return %62 : f32 loc(#loc66)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc66)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc39)
    %44 = arith.select %20, %21, %cst : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc40)
    %45 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc41)), %arg12: f32 loc(callsite(#loc1 at #loc41))):
      %62 = arith.addf %arg11, %arg12 : f32 loc(#loc74)
      tt.reduce.return %62 : f32 loc(#loc68)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc68)
    %46 = tt.expand_dims %45 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc42)
    %47 = arith.mulf %32, %46 : tensor<8x1xf32> loc(#loc43)
    %48 = arith.mulf %35, %35 : tensor<8x1xf32> loc(#loc44)
    %49 = arith.subf %47, %48 : tensor<8x1xf32> loc(#loc45)
    %50 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc46)
    %51 = tt.addptr %50, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc46)
    tt.store %51, %49, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc47)
    %52 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc48)
    %53 = tt.addptr %52, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc48)
    tt.store %53, %32, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc49)
    %54 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc50)
    %55 = tt.addptr %54, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc50)
    tt.store %55, %35, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc51)
    %56 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc52)
    %57 = tt.addptr %56, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc52)
    tt.store %57, %39, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc53)
    %58 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc54)
    %59 = tt.addptr %58, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc54)
    tt.store %59, %43, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc55)
    %60 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc56)
    %61 = tt.addptr %60, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc56)
    tt.store %61, %46, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":23:28)
#loc3 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":23:33)
#loc4 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":24:36)
#loc5 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":24:44)
#loc6 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":24:23)
#loc7 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":25:21)
#loc8 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":26:26)
#loc9 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":26:34)
#loc10 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":30:19)
#loc11 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":31:19)
#loc12 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:37)
#loc13 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:35)
#loc14 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:46)
#loc15 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:42)
#loc16 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:30)
#loc17 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":33:51)
#loc18 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":34:30)
#loc19 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":34:51)
#loc20 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":35:31)
#loc21 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":35:52)
#loc22 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":36:18)
#loc23 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":37:18)
#loc24 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":39:33)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc28 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":40:27)
#loc29 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":42:34)
#loc31 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":43:29)
#loc32 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":44:19)
#loc33 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":46:35)
#loc35 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":47:29)
#loc36 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":48:19)
#loc37 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":50:35)
#loc39 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":51:29)
#loc40 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":53:35)
#loc42 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":54:29)
#loc43 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":55:19)
#loc44 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":56:20)
#loc45 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":57:20)
#loc46 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":58:25)
#loc47 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":58:37)
#loc48 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":59:25)
#loc49 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":59:36)
#loc50 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":60:25)
#loc51 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":60:37)
#loc52 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":61:25)
#loc53 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":61:37)
#loc54 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":62:25)
#loc55 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":62:37)
#loc56 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":63:25)
#loc57 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":63:37)
#loc58 = loc("inductor_cache/42/c42rksqjkhbp3fns5kpvnpwayk3ngv6gjugpwbunvxn3wvpbqev2.py":63:4)
#loc59 = loc(callsite(#loc25 at #loc26))
#loc61 = loc(callsite(#loc27 at #loc25))
#loc62 = loc(callsite(#loc25 at #loc30))
#loc64 = loc(callsite(#loc25 at #loc34))
#loc66 = loc(callsite(#loc25 at #loc38))
#loc68 = loc(callsite(#loc25 at #loc41))
#loc70 = loc(callsite(#loc61 at #loc26))
#loc71 = loc(callsite(#loc61 at #loc30))
#loc72 = loc(callsite(#loc61 at #loc34))
#loc73 = loc(callsite(#loc61 at #loc38))
#loc74 = loc(callsite(#loc61 at #loc41))
