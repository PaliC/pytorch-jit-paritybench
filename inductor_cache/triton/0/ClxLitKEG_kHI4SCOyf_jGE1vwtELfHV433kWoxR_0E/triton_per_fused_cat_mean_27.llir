; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_mean_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 124, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %10, 127, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = and i32 %13, 7, !dbg !15
  %20 = icmp eq i32 %19, 0, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %21 = sdiv i32 %.frozen, 512, !dbg !17
  %22 = mul i32 %21, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = icmp slt i32 %.decomposed, 256, !dbg !19
  %24 = shl nuw nsw i32 %19, 8, !dbg !20
  %25 = or disjoint i32 %24, 2048, !dbg !20
  %26 = mul i32 %21, 2304, !dbg !21
  %27 = add i32 %26, %24, !dbg !22
  %28 = add i32 %26, %25, !dbg !22
  %29 = add i32 %27, %.decomposed, !dbg !23
  %30 = add i32 %28, %.decomposed, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = and i1 %20, %23, !dbg !25
  %36 = and i1 %17, %23, !dbg !26
  %37 = and i1 %17, %35, !dbg !26
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = sext i32 %.decomposed to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = icmp sgt i32 %.decomposed, 255, !dbg !30
  %61 = add nsw i32 %.decomposed, -256, !dbg !31
  %62 = add i32 %27, %61, !dbg !32
  %63 = add i32 %28, %61, !dbg !32
  %64 = sext i32 %62 to i64, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !33
  %66 = sext i32 %63 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !33
  %68 = and i1 %20, %60, !dbg !34
  %69 = and i1 %17, %60, !dbg !35
  %70 = and i1 %17, %68, !dbg !35
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !36
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !36
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !36
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !36
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !36
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !36
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !36
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !36
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !36
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !36
  %81 = sext i32 %61 to i64, !dbg !37
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !37
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !38
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !38
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !38
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !38
  %93 = and i1 %20, %17, !dbg !39
  %94 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !27
  %95 = insertelement <2 x i32> %94, i32 %44, i64 1, !dbg !27
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !27
  %97 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !29
  %98 = insertelement <2 x i32> %97, i32 %56, i64 1, !dbg !29
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !29
  %100 = fadd <2 x float> %96, %99, !dbg !40
  %101 = fcmp olt <2 x float> %100, zeroinitializer, !dbg !41
  %102 = select <2 x i1> %101, <2 x float> zeroinitializer, <2 x float> %100, !dbg !45
  %103 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !36
  %104 = insertelement <2 x i32> %103, i32 %77, i64 1, !dbg !36
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !36
  %106 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !38
  %107 = insertelement <2 x i32> %106, i32 %89, i64 1, !dbg !38
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !38
  %109 = fadd <2 x float> %105, %108, !dbg !46
  %110 = fcmp olt <2 x float> %109, zeroinitializer, !dbg !47
  %111 = select <2 x i1> %110, <2 x float> zeroinitializer, <2 x float> %109, !dbg !49
  %112 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !50
  %113 = shufflevector <2 x i1> %112, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !50
  %114 = select <2 x i1> %113, <2 x float> %102, <2 x float> %111, !dbg !50
  %115 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !51
  %116 = insertelement <2 x i1> %115, i1 %93, i64 1, !dbg !51
  %117 = select <2 x i1> %116, <2 x float> %114, <2 x float> zeroinitializer, !dbg !51
  %118 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !27
  %119 = insertelement <2 x i32> %118, i32 %45, i64 1, !dbg !27
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !27
  %121 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !29
  %122 = insertelement <2 x i32> %121, i32 %57, i64 1, !dbg !29
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !29
  %124 = fadd <2 x float> %120, %123, !dbg !40
  %125 = fcmp olt <2 x float> %124, zeroinitializer, !dbg !41
  %126 = select <2 x i1> %125, <2 x float> zeroinitializer, <2 x float> %124, !dbg !45
  %127 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !36
  %128 = insertelement <2 x i32> %127, i32 %78, i64 1, !dbg !36
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !36
  %130 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !38
  %131 = insertelement <2 x i32> %130, i32 %90, i64 1, !dbg !38
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !38
  %133 = fadd <2 x float> %129, %132, !dbg !46
  %134 = fcmp olt <2 x float> %133, zeroinitializer, !dbg !47
  %135 = select <2 x i1> %134, <2 x float> zeroinitializer, <2 x float> %133, !dbg !49
  %136 = select <2 x i1> %113, <2 x float> %126, <2 x float> %135, !dbg !50
  %137 = select <2 x i1> %116, <2 x float> %136, <2 x float> zeroinitializer, !dbg !51
  %138 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !27
  %139 = insertelement <2 x i32> %138, i32 %46, i64 1, !dbg !27
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !27
  %141 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !29
  %142 = insertelement <2 x i32> %141, i32 %58, i64 1, !dbg !29
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !29
  %144 = fadd <2 x float> %140, %143, !dbg !40
  %145 = fcmp olt <2 x float> %144, zeroinitializer, !dbg !41
  %146 = select <2 x i1> %145, <2 x float> zeroinitializer, <2 x float> %144, !dbg !45
  %147 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !36
  %148 = insertelement <2 x i32> %147, i32 %79, i64 1, !dbg !36
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !36
  %150 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !38
  %151 = insertelement <2 x i32> %150, i32 %91, i64 1, !dbg !38
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !38
  %153 = fadd <2 x float> %149, %152, !dbg !46
  %154 = fcmp olt <2 x float> %153, zeroinitializer, !dbg !47
  %155 = select <2 x i1> %154, <2 x float> zeroinitializer, <2 x float> %153, !dbg !49
  %156 = select <2 x i1> %113, <2 x float> %146, <2 x float> %155, !dbg !50
  %157 = select <2 x i1> %116, <2 x float> %156, <2 x float> zeroinitializer, !dbg !51
  %158 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !27
  %159 = insertelement <2 x i32> %158, i32 %47, i64 1, !dbg !27
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !27
  %161 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !29
  %162 = insertelement <2 x i32> %161, i32 %59, i64 1, !dbg !29
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !29
  %164 = fadd <2 x float> %160, %163, !dbg !40
  %165 = fcmp olt <2 x float> %164, zeroinitializer, !dbg !41
  %166 = select <2 x i1> %165, <2 x float> zeroinitializer, <2 x float> %164, !dbg !45
  %167 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !36
  %168 = insertelement <2 x i32> %167, i32 %80, i64 1, !dbg !36
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !36
  %170 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !38
  %171 = insertelement <2 x i32> %170, i32 %92, i64 1, !dbg !38
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !38
  %173 = fadd <2 x float> %169, %172, !dbg !46
  %174 = fcmp olt <2 x float> %173, zeroinitializer, !dbg !47
  %175 = select <2 x i1> %174, <2 x float> zeroinitializer, <2 x float> %173, !dbg !49
  %176 = select <2 x i1> %113, <2 x float> %166, <2 x float> %175, !dbg !50
  %177 = select <2 x i1> %116, <2 x float> %176, <2 x float> zeroinitializer, !dbg !51
  %shift = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %178 = fadd <2 x float> %117, %shift, !dbg !52
  %179 = extractelement <2 x float> %178, i64 0, !dbg !52
  %shift1 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %180 = fadd <2 x float> %137, %shift1, !dbg !52
  %181 = extractelement <2 x float> %180, i64 0, !dbg !52
  %shift2 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %182 = fadd <2 x float> %157, %shift2, !dbg !52
  %183 = extractelement <2 x float> %182, i64 0, !dbg !52
  %shift3 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %184 = fadd <2 x float> %177, %shift3, !dbg !52
  %185 = extractelement <2 x float> %184, i64 0, !dbg !52
  %186 = shl nuw nsw i32 %12, 3, !dbg !57
  %187 = or disjoint i32 %186, %19, !dbg !57
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !57
  %189 = bitcast float %179 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #3, !dbg !57
  %190 = or disjoint i32 %186, 8, !dbg !57
  %191 = or disjoint i32 %190, %19, !dbg !57
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !57
  %193 = bitcast float %181 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #3, !dbg !57
  %194 = or disjoint i32 %186, 16, !dbg !57
  %195 = or disjoint i32 %194, %19, !dbg !57
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !57
  %197 = bitcast float %183 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #3, !dbg !57
  %198 = or disjoint i32 %186, 24, !dbg !57
  %199 = or disjoint i32 %198, %19, !dbg !57
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !57
  %201 = bitcast float %185 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %202 = icmp slt i32 %10, 1024, !dbg !57
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !57
  %204 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %203, i1 %202) #3, !dbg !57
  %205 = bitcast i32 %204 to float, !dbg !57
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !57
  %207 = bitcast i32 %206 to float, !dbg !57
  %208 = fadd float %205, %207, !dbg !52
  %209 = bitcast float %208 to i32, !dbg !57
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !57
  %211 = bitcast i32 %210 to float, !dbg !57
  %212 = fadd float %208, %211, !dbg !52
  %213 = bitcast float %212 to i32, !dbg !57
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !57
  %215 = bitcast i32 %214 to float, !dbg !57
  %216 = fadd float %212, %215, !dbg !52
  %217 = and i32 %10, 7, !dbg !57
  %218 = icmp eq i32 %217, 0, !dbg !57
  %219 = and i1 %202, %218, !dbg !57
  %220 = bitcast float %216 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %220, i1 %219) #3, !dbg !57
  %221 = getelementptr i8, ptr addrspace(3) %203, i32 1024, !dbg !57
  %222 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %202) #3, !dbg !57
  %223 = bitcast i32 %222 to float, !dbg !57
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !57
  %225 = bitcast i32 %224 to float, !dbg !57
  %226 = fadd float %223, %225, !dbg !52
  %227 = bitcast float %226 to i32, !dbg !57
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !57
  %229 = bitcast i32 %228 to float, !dbg !57
  %230 = fadd float %226, %229, !dbg !52
  %231 = bitcast float %230 to i32, !dbg !57
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !57
  %233 = bitcast i32 %232 to float, !dbg !57
  %234 = fadd float %230, %233, !dbg !52
  %235 = bitcast float %234 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %235, i1 %219) #3, !dbg !57
  %236 = getelementptr i8, ptr addrspace(3) %203, i32 2048, !dbg !57
  %237 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %202) #3, !dbg !57
  %238 = bitcast i32 %237 to float, !dbg !57
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !57
  %240 = bitcast i32 %239 to float, !dbg !57
  %241 = fadd float %238, %240, !dbg !52
  %242 = bitcast float %241 to i32, !dbg !57
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !57
  %244 = bitcast i32 %243 to float, !dbg !57
  %245 = fadd float %241, %244, !dbg !52
  %246 = bitcast float %245 to i32, !dbg !57
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !57
  %248 = bitcast i32 %247 to float, !dbg !57
  %249 = fadd float %245, %248, !dbg !52
  %250 = bitcast float %249 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %250, i1 %219) #3, !dbg !57
  %251 = getelementptr i8, ptr addrspace(3) %203, i32 3072, !dbg !57
  %252 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %251, i1 %202) #3, !dbg !57
  %253 = bitcast i32 %252 to float, !dbg !57
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !57
  %255 = bitcast i32 %254 to float, !dbg !57
  %256 = fadd float %253, %255, !dbg !52
  %257 = bitcast float %256 to i32, !dbg !57
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !57
  %259 = bitcast i32 %258 to float, !dbg !57
  %260 = fadd float %256, %259, !dbg !52
  %261 = bitcast float %260 to i32, !dbg !57
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !57
  %263 = bitcast i32 %262 to float, !dbg !57
  %264 = fadd float %260, %263, !dbg !52
  %265 = bitcast float %264 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %265, i1 %219) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !57
  %267 = load i32, ptr addrspace(3) %266, align 16, !dbg !57
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !57
  %269 = load i32, ptr addrspace(3) %268, align 16, !dbg !57
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !57
  %271 = load i32, ptr addrspace(3) %270, align 16, !dbg !57
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !57
  %273 = load i32, ptr addrspace(3) %272, align 16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %274, i32 %267, i32 %269, i32 %271, i32 %273, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !58
  %276 = load float, ptr addrspace(3) %275, align 4, !dbg !58
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float 9.000000e+00) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %278 = sext i32 %16 to i64, !dbg !60
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !60
  %280 = and i32 %10, 128, !dbg !61
  %281 = icmp eq i32 %280, 0, !dbg !61
  %282 = bitcast float %277 to i32, !dbg !61
  %283 = and i1 %281, %18, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %279, i1 %283) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py", directory: "inductor_cache/5o")
!4 = !{ptr @triton_per_fused_cat_mean_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mean_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mean_27", linkageName: "triton_per_fused_cat_mean_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 38, column: 34, scope: !7)
!21 = !DILocation(line: 38, column: 44, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 50, scope: !7)
!24 = !DILocation(line: 38, column: 30, scope: !7)
!25 = !DILocation(line: 38, column: 64, scope: !7)
!26 = !DILocation(line: 38, column: 71, scope: !7)
!27 = !DILocation(line: 38, column: 56, scope: !7)
!28 = !DILocation(line: 39, column: 30, scope: !7)
!29 = !DILocation(line: 39, column: 70, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 60, scope: !7)
!32 = !DILocation(line: 48, column: 51, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 48, column: 74, scope: !7)
!35 = !DILocation(line: 48, column: 82, scope: !7)
!36 = !DILocation(line: 48, column: 66, scope: !7)
!37 = !DILocation(line: 49, column: 31, scope: !7)
!38 = !DILocation(line: 49, column: 80, scope: !7)
!39 = !DILocation(line: 57, column: 29, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 42, column: 40, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !48)
!48 = !DILocation(line: 52, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !48)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 57, column: 43, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !56)
!53 = distinct !DILexicalBlockFile(scope: !55, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!55 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!56 = !DILocation(line: 58, column: 26, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 4, scope: !7)
!60 = !DILocation(line: 62, column: 28, scope: !7)
!61 = !DILocation(line: 62, column: 40, scope: !7)
!62 = !DILocation(line: 62, column: 4, scope: !7)
