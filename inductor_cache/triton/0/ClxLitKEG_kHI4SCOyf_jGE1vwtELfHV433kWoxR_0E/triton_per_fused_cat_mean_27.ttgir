#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 2], order = [0, 1]}>
#loc = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0)
#loc1 = loc(unknown)
#loc43 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":58:26)
#loc57 = loc(callsite(#loc1 at #loc43))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_mean_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0), %arg6: i32 loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x16xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<2048> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2304> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<-256> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<9.000000e+00> : tensor<128x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<128x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<128x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<128x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<128x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.cmpi slt, %13, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc8)
    %15 = arith.remsi %8, %cst_3 : tensor<128x1xi32, #blocked> loc(#loc9)
    %16 = arith.divsi %8, %cst_3 : tensor<128x1xi32, #blocked> loc(#loc10)
    %17 = arith.extsi %15 : tensor<128x1xi32, #blocked> to tensor<128x1xi64, #blocked> loc(#loc11)
    %18 = arith.cmpi slt, %17, %cst_4 : tensor<128x1xi64, #blocked> loc(#loc11)
    %19 = arith.muli %13, %cst_5 : tensor<1x16xi32, #blocked> loc(#loc12)
    %20 = arith.muli %16, %cst_6 : tensor<128x1xi32, #blocked> loc(#loc13)
    %21 = tt.broadcast %19 : tensor<1x16xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc14)
    %22 = tt.broadcast %20 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc14)
    %23 = arith.addi %21, %22 : tensor<128x16xi32, #blocked> loc(#loc14)
    %24 = tt.broadcast %15 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc15)
    %25 = arith.addi %23, %24 : tensor<128x16xi32, #blocked> loc(#loc15)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc16)
    %27 = tt.addptr %26, %25 : tensor<128x16x!tt.ptr<f32>, #blocked>, tensor<128x16xi32, #blocked> loc(#loc16)
    %28 = tt.broadcast %14 : tensor<1x16xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc17)
    %29 = tt.broadcast %18 : tensor<128x1xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc17)
    %30 = arith.andi %28, %29 : tensor<128x16xi1, #blocked> loc(#loc17)
    %31 = tt.broadcast %10 : tensor<128x1xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc18)
    %32 = arith.andi %30, %31 : tensor<128x16xi1, #blocked> loc(#loc18)
    %33 = tt.load %27, %32, %cst evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc19)
    %34 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %35 = tt.addptr %34, %15 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc20)
    %36 = tt.broadcast %35 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc20)
    %37 = tt.load %36, %32, %cst evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc21)
    %38 = arith.addf %33, %37 : tensor<128x16xf32, #blocked> loc(#loc22)
    %39 = arith.cmpf ogt, %cst, %38 : tensor<128x16xf32, #blocked> loc(#loc51)
    %40 = arith.select %39, %cst, %38 : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc52)
    %41 = arith.cmpi sge, %17, %cst_4 : tensor<128x1xi64, #blocked> loc(#loc26)
    %42 = arith.addi %15, %cst_7 : tensor<128x1xi32, #blocked> loc(#loc27)
    %43 = tt.broadcast %42 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc28)
    %44 = arith.addi %23, %43 : tensor<128x16xi32, #blocked> loc(#loc28)
    %45 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc29)
    %46 = tt.addptr %45, %44 : tensor<128x16x!tt.ptr<f32>, #blocked>, tensor<128x16xi32, #blocked> loc(#loc29)
    %47 = tt.broadcast %41 : tensor<128x1xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc30)
    %48 = arith.andi %28, %47 : tensor<128x16xi1, #blocked> loc(#loc30)
    %49 = arith.andi %48, %31 : tensor<128x16xi1, #blocked> loc(#loc31)
    %50 = tt.load %46, %49, %cst evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc32)
    %51 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %52 = tt.addptr %51, %42 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc33)
    %53 = tt.broadcast %52 : tensor<128x1x!tt.ptr<f32>, #blocked> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc33)
    %54 = tt.load %53, %49, %cst evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc34)
    %55 = arith.addf %50, %54 : tensor<128x16xf32, #blocked> loc(#loc35)
    %56 = arith.cmpf ogt, %cst, %55 : tensor<128x16xf32, #blocked> loc(#loc53)
    %57 = arith.select %56, %cst, %55 : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc54)
    %58 = arith.select %47, %57, %cst : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc37)
    %59 = arith.select %29, %40, %58 : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc55)
    %60 = arith.andi %28, %31 : tensor<128x16xi1, #blocked> loc(#loc40)
    %61 = arith.select %60, %59, %cst : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc41)
    %62 = "tt.reduce"(%61) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc43)), %arg8: f32 loc(callsite(#loc1 at #loc43))):
      %68 = arith.addf %arg7, %arg8 : f32 loc(#loc59)
      tt.reduce.return %68 : f32 loc(#loc56)
    }) : (tensor<128x16xf32, #blocked>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc56)
    %63 = triton_gpu.convert_layout %62 {fastmath = #arith.fastmath<none>} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc45)
    %64 = tt.expand_dims %63 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xf32, #blocked1> loc(#loc46)
    %65 = arith.divf %64, %cst_8 : tensor<128x1xf32, #blocked1> loc(#loc45)
    gpu.barrier loc(#loc47)
    %66 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    %67 = tt.addptr %66, %9 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc48)
    tt.store %67, %65, %11 : tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":23:28)
#loc3 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":23:33)
#loc4 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":24:44)
#loc5 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":24:23)
#loc6 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":25:21)
#loc7 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":26:34)
#loc8 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":28:21)
#loc9 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":29:19)
#loc10 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":31:19)
#loc11 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":37:18)
#loc12 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:34)
#loc13 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:44)
#loc14 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:39)
#loc15 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:50)
#loc16 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:30)
#loc17 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:64)
#loc18 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:71)
#loc19 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":38:56)
#loc20 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":39:30)
#loc21 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":39:70)
#loc22 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":40:18)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc24 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":42:40)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":45:20)
#loc27 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:60)
#loc28 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:51)
#loc29 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:31)
#loc30 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:74)
#loc31 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:82)
#loc32 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":48:66)
#loc33 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":49:31)
#loc34 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":49:80)
#loc35 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":50:20)
#loc36 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":52:42)
#loc37 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":54:35)
#loc38 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":55:34)
#loc39 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":44:33)
#loc40 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":57:29)
#loc41 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":57:43)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc45 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":60:20)
#loc46 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":58:29)
#loc47 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":61:4)
#loc48 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":62:28)
#loc49 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":62:40)
#loc50 = loc("inductor_cache/5o/c5oxaxwq2evzi3a7wstyf6jumsr7vikpdizrqzdle5fdk6ctpkfl.py":62:4)
#loc51 = loc(callsite(#loc23 at #loc24))
#loc52 = loc(callsite(#loc25 at #loc24))
#loc53 = loc(callsite(#loc23 at #loc36))
#loc54 = loc(callsite(#loc25 at #loc36))
#loc55 = loc(fused[#loc38, #loc39])
#loc56 = loc(callsite(#loc42 at #loc43))
#loc58 = loc(callsite(#loc44 at #loc42))
#loc59 = loc(callsite(#loc58 at #loc43))
