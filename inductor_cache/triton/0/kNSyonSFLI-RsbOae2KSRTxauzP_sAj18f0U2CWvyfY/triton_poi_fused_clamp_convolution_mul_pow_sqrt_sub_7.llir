; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 1024, !dbg !14
  %14 = sdiv i32 %12, 1024, !dbg !14
  %15 = srem i32 %13, 128, !dbg !15
  %16 = srem i32 %14, 128, !dbg !15
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %12 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = bitcast i32 %24 to float, !dbg !17
  %29 = bitcast i32 %25 to float, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = bitcast i32 %33 to float, !dbg !17
  %38 = bitcast i32 %34 to float, !dbg !17
  %39 = sext i32 %15 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = sext i32 %16 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !19
  %46 = bitcast i32 %45 to float, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !19
  %50 = bitcast i32 %49 to float, !dbg !19
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !19
  %52 = bitcast i32 %51 to float, !dbg !19
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !19
  %54 = bitcast i32 %53 to float, !dbg !19
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !21
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !21
  %63 = fadd float %26, %44, !dbg !22
  %64 = fadd float %27, %46, !dbg !22
  %65 = fadd float %28, %48, !dbg !22
  %66 = fadd float %29, %50, !dbg !22
  %67 = fadd float %35, %52, !dbg !22
  %68 = fadd float %36, %54, !dbg !22
  %69 = fadd float %37, %56, !dbg !22
  %70 = fadd float %38, %58, !dbg !22
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %71, 0, !dbg !23
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %72, 0, !dbg !23
  br i1 %.not.i, label %78, label %73, !dbg !23

73:                                               ; preds = %5
  br i1 %.not1.i, label %76, label %74, !dbg !23

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

78:                                               ; preds = %5
  br i1 %.not1.i, label %81, label %79, !dbg !23

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !23
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %83, 0, !dbg !23
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !23
  br i1 %.not.i1, label %90, label %85, !dbg !23

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !23

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !23

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !23
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i6 = icmp eq i32 %95, 0, !dbg !23
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !23
  br i1 %.not.i6, label %102, label %97, !dbg !23

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !23

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !23

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

__nv_sqrtf.exit10:                                ; preds = %98, %100, %103, %105
  %.0.i8 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !23
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i11 = icmp eq i32 %107, 0, !dbg !23
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i14 = icmp eq i32 %108, 0, !dbg !23
  br i1 %.not.i11, label %114, label %109, !dbg !23

109:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %112, label %110, !dbg !23

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !23

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

__nv_sqrtf.exit15:                                ; preds = %110, %112, %115, %117
  %.0.i13 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !23
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i16 = icmp eq i32 %119, 0, !dbg !23
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i19 = icmp eq i32 %120, 0, !dbg !23
  br i1 %.not.i16, label %126, label %121, !dbg !23

121:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %124, label %122, !dbg !23

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !23

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

__nv_sqrtf.exit20:                                ; preds = %122, %124, %127, %129
  %.0.i18 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !23
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i21 = icmp eq i32 %131, 0, !dbg !23
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i24 = icmp eq i32 %132, 0, !dbg !23
  br i1 %.not.i21, label %138, label %133, !dbg !23

133:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %136, label %134, !dbg !23

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !23

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

__nv_sqrtf.exit25:                                ; preds = %134, %136, %139, %141
  %.0.i23 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !23
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i26 = icmp eq i32 %143, 0, !dbg !23
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i29 = icmp eq i32 %144, 0, !dbg !23
  br i1 %.not.i26, label %150, label %145, !dbg !23

145:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %148, label %146, !dbg !23

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !23

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

__nv_sqrtf.exit30:                                ; preds = %146, %148, %151, %153
  %.0.i28 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !23
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i31 = icmp eq i32 %155, 0, !dbg !23
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i34 = icmp eq i32 %156, 0, !dbg !23
  br i1 %.not.i31, label %162, label %157, !dbg !23

157:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %160, label %158, !dbg !23

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !23

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

__nv_sqrtf.exit35:                                ; preds = %158, %160, %163, %165
  %.0.i33 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !23
  %167 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !21
  %168 = bitcast i32 %167 to float, !dbg !21
  %169 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !21
  %170 = bitcast i32 %169 to float, !dbg !21
  %171 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !21
  %172 = bitcast i32 %171 to float, !dbg !21
  %173 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !21
  %174 = bitcast i32 %173 to float, !dbg !21
  %175 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !21
  %176 = bitcast i32 %175 to float, !dbg !21
  %177 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !21
  %178 = bitcast i32 %177 to float, !dbg !21
  %179 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !21
  %180 = bitcast i32 %179 to float, !dbg !21
  %181 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !21
  %182 = bitcast i32 %181 to float, !dbg !21
  %183 = fmul float %.0.i, %182, !dbg !24
  %184 = fmul float %.0.i3, %180, !dbg !24
  %185 = fmul float %.0.i8, %178, !dbg !24
  %186 = fmul float %.0.i13, %176, !dbg !24
  %187 = fmul float %.0.i18, %174, !dbg !24
  %188 = fmul float %.0.i23, %172, !dbg !24
  %189 = fmul float %.0.i28, %170, !dbg !24
  %190 = fmul float %.0.i33, %168, !dbg !24
  %191 = bitcast float %63 to i32, !dbg !25
  %192 = bitcast float %64 to i32, !dbg !25
  %193 = bitcast float %65 to i32, !dbg !25
  %194 = bitcast float %66 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %192, i32 %193, i32 %194, ptr addrspace(1) %18, i1 true) #3, !dbg !25
  %195 = bitcast float %67 to i32, !dbg !25
  %196 = bitcast float %68 to i32, !dbg !25
  %197 = bitcast float %69 to i32, !dbg !25
  %198 = bitcast float %70 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %195, i32 %196, i32 %197, i32 %198, ptr addrspace(1) %20, i1 true) #3, !dbg !25
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !26
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !26
  %201 = bitcast float %183 to i32, !dbg !27
  %202 = bitcast float %184 to i32, !dbg !27
  %203 = bitcast float %185 to i32, !dbg !27
  %204 = bitcast float %186 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %199, i1 true) #3, !dbg !27
  %205 = bitcast float %187 to i32, !dbg !27
  %206 = bitcast float %188 to i32, !dbg !27
  %207 = bitcast float %189 to i32, !dbg !27
  %208 = bitcast float %190 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %200, i1 true) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctuhwz2lynaj225rsgzb6e4vlv4dj4moezbvnxcxffvy33onqg3.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7", linkageName: "triton_poi_fused_clamp_convolution_mul_pow_sqrt_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 30, column: 26, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 25, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 4, scope: !7)
