; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 9, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 510, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %.frozen = freeze i32 %24, !dbg !14
  %25 = sdiv i32 %.frozen, 4096, !dbg !14
  %26 = srem i32 %25, 512, !dbg !15
  %27 = mul i32 %25, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %.frozen27 = freeze i32 %24, !dbg !17
  %28 = sdiv i32 %.frozen27, 2097152, !dbg !17
  %29 = icmp slt i32 %26, 256, !dbg !18
  %30 = mul i32 %28, 2097152, !dbg !19
  %srem.decomposed = sub i32 %.frozen27, %30, !dbg !19
  %31 = shl nsw i32 %28, 20, !dbg !20
  %32 = add nsw i32 %31, %srem.decomposed, !dbg !21
  %33 = sext i32 %32 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !23
  %36 = sext i32 %26 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = fadd float %42, 0x3EE4F8B580000000, !dbg !28
  %46 = fadd float %44, 0x3EE4F8B580000000, !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %47, 0, !dbg !29
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %48, 0, !dbg !29
  br i1 %.not.i, label %54, label %49, !dbg !29

49:                                               ; preds = %18
  br i1 %.not1.i, label %52, label %50, !dbg !29

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

54:                                               ; preds = %18
  br i1 %.not1.i, label %57, label %55, !dbg !29

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !29
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %59, 0, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !29
  br i1 %.not.i1, label %66, label %61, !dbg !29

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !29

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !29

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !29
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %29, i32 0, i1 %29) #3, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !33
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %79 = and i32 %26, -128, !dbg !35
  %80 = icmp eq i32 %79, 256, !dbg !35
  %81 = add nsw i32 %26, -256, !dbg !36
  %82 = shl nsw i32 %81, 12, !dbg !37
  %83 = shl nsw i32 %28, 19, !dbg !38
  %84 = add nsw i32 %83, %.decomposed, !dbg !39
  %85 = add nsw i32 %84, %82, !dbg !40
  %86 = sext i32 %85 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !41
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !42
  %89 = sext i32 %81 to i64, !dbg !43
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %89, !dbg !43
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %80, i32 0, i1 %80) #3, !dbg !44
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %80, i32 0, i1 %80) #3, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %8, i64 %89, !dbg !45
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %80, i32 0, i1 %80) #3, !dbg !46
  %95 = bitcast i32 %94 to float, !dbg !46
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %80, i32 0, i1 %80) #3, !dbg !46
  %97 = bitcast i32 %96 to float, !dbg !46
  %98 = fadd float %95, 0x3EE4F8B580000000, !dbg !47
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !47
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i6 = icmp eq i32 %100, 0, !dbg !48
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i9 = icmp eq i32 %101, 0, !dbg !48
  br i1 %.not.i6, label %107, label %102, !dbg !48

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !48

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !48

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

__nv_sqrtf.exit10:                                ; preds = %103, %105, %108, %110
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !48
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i11 = icmp eq i32 %112, 0, !dbg !48
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i14 = icmp eq i32 %113, 0, !dbg !48
  br i1 %.not.i11, label %119, label %114, !dbg !48

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !48

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !48

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

__nv_sqrtf.exit15:                                ; preds = %115, %117, %120, %122
  %.0.i13 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !48
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !49
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %9, i64 %89, !dbg !50
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %80, i32 0, i1 %80) #3, !dbg !51
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %80, i32 0, i1 %80) #3, !dbg !51
  %129 = getelementptr float, ptr addrspace(1) %10, i64 %89, !dbg !52
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %80, i32 0, i1 %80) #3, !dbg !53
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %80, i32 0, i1 %80) #3, !dbg !53
  %132 = icmp sgt i32 %26, 383, !dbg !54
  %133 = add nsw i32 %26, -384, !dbg !55
  %134 = shl nsw i32 %133, 12, !dbg !56
  %135 = add nsw i32 %84, %134, !dbg !57
  %136 = sext i32 %135 to i64, !dbg !58
  %137 = getelementptr float, ptr addrspace(1) %11, i64 %136, !dbg !58
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %137, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !59
  %139 = sext i32 %133 to i64, !dbg !60
  %140 = getelementptr float, ptr addrspace(1) %12, i64 %139, !dbg !60
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %132, i32 0, i1 %132) #3, !dbg !61
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %132, i32 0, i1 %132) #3, !dbg !61
  %143 = getelementptr float, ptr addrspace(1) %13, i64 %139, !dbg !62
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %132, i32 0, i1 %132) #3, !dbg !63
  %145 = bitcast i32 %144 to float, !dbg !63
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %132, i32 0, i1 %132) #3, !dbg !63
  %147 = bitcast i32 %146 to float, !dbg !63
  %148 = fadd float %145, 0x3EE4F8B580000000, !dbg !64
  %149 = fadd float %147, 0x3EE4F8B580000000, !dbg !64
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i16 = icmp eq i32 %150, 0, !dbg !65
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i19 = icmp eq i32 %151, 0, !dbg !65
  br i1 %.not.i16, label %157, label %152, !dbg !65

152:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %155, label %153, !dbg !65

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

157:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %160, label %158, !dbg !65

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

__nv_sqrtf.exit20:                                ; preds = %153, %155, %158, %160
  %.0.i18 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !65
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i21 = icmp eq i32 %162, 0, !dbg !65
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i24 = icmp eq i32 %163, 0, !dbg !65
  br i1 %.not.i21, label %169, label %164, !dbg !65

164:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %167, label %165, !dbg !65

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

169:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %172, label %170, !dbg !65

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

__nv_sqrtf.exit25:                                ; preds = %165, %167, %170, %172
  %.0.i23 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !65
  %174 = extractvalue { i32, i32 } %138, 1, !dbg !59
  %175 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !61
  %176 = insertelement <2 x i32> %175, i32 %142, i64 1, !dbg !61
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !61
  %178 = extractvalue { i32, i32 } %138, 0, !dbg !59
  %179 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !59
  %180 = insertelement <2 x i32> %179, i32 %174, i64 1, !dbg !59
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !59
  %182 = extractvalue { i32, i32 } %88, 1, !dbg !42
  %183 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !44
  %184 = insertelement <2 x i32> %183, i32 %92, i64 1, !dbg !44
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !44
  %186 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !51
  %187 = insertelement <2 x i32> %186, i32 %128, i64 1, !dbg !51
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !51
  %189 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !53
  %190 = insertelement <2 x i32> %189, i32 %131, i64 1, !dbg !53
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !53
  %192 = extractvalue { i32, i32 } %88, 0, !dbg !42
  %193 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %194 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %195 = insertelement <2 x i32> %194, i32 %39, i64 1, !dbg !25
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !25
  %197 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !32
  %198 = insertelement <2 x i32> %197, i32 %75, i64 1, !dbg !32
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !32
  %200 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !34
  %201 = insertelement <2 x i32> %200, i32 %78, i64 1, !dbg !34
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !34
  %203 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !66
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !66
  %206 = getelementptr float, ptr addrspace(1) %14, i64 %139, !dbg !67
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %132, i32 0, i1 %132) #3, !dbg !68
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %132, i32 0, i1 %132) #3, !dbg !68
  %209 = getelementptr float, ptr addrspace(1) %15, i64 %139, !dbg !69
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %132, i32 0, i1 %132) #3, !dbg !70
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %132, i32 0, i1 %132) #3, !dbg !70
  %212 = sext i32 %24 to i64, !dbg !71
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !71
  %214 = getelementptr i1, ptr addrspace(1) %16, i64 %212, !dbg !72
  %215 = fsub <2 x float> %181, %177, !dbg !73
  %216 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !42
  %217 = insertelement <2 x i32> %216, i32 %182, i64 1, !dbg !42
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !42
  %219 = fsub <2 x float> %218, %185, !dbg !74
  %220 = insertelement <2 x float> poison, float %124, i64 0, !dbg !75
  %221 = insertelement <2 x float> %220, float %125, i64 1, !dbg !75
  %222 = fmul <2 x float> %219, %221, !dbg !75
  %223 = fmul <2 x float> %222, %188, !dbg !76
  %224 = fadd <2 x float> %223, %191, !dbg !77
  %225 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !23
  %226 = insertelement <2 x i32> %225, i32 %193, i64 1, !dbg !23
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !23
  %228 = fsub <2 x float> %227, %196, !dbg !78
  %229 = insertelement <2 x float> poison, float %71, i64 0, !dbg !79
  %230 = insertelement <2 x float> %229, float %72, i64 1, !dbg !79
  %231 = fmul <2 x float> %228, %230, !dbg !79
  %232 = fmul <2 x float> %231, %199, !dbg !80
  %233 = fadd <2 x float> %232, %202, !dbg !81
  %234 = insertelement <2 x float> poison, float %204, i64 0, !dbg !82
  %235 = insertelement <2 x float> %234, float %205, i64 1, !dbg !82
  %236 = fmul <2 x float> %215, %235, !dbg !82
  %237 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !68
  %238 = insertelement <2 x i32> %237, i32 %208, i64 1, !dbg !68
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !68
  %240 = fmul <2 x float> %236, %239, !dbg !83
  %241 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !70
  %242 = insertelement <2 x i32> %241, i32 %211, i64 1, !dbg !70
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !70
  %244 = fadd <2 x float> %240, %243, !dbg !84
  %245 = insertelement <2 x i1> poison, i1 %132, i64 0, !dbg !85
  %246 = shufflevector <2 x i1> %245, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !85
  %247 = select <2 x i1> %246, <2 x float> %244, <2 x float> zeroinitializer, !dbg !85
  %248 = insertelement <2 x i1> poison, i1 %80, i64 0, !dbg !86
  %249 = shufflevector <2 x i1> %248, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !86
  %250 = select <2 x i1> %249, <2 x float> %224, <2 x float> %247, !dbg !86
  %251 = insertelement <2 x i1> poison, i1 %29, i64 0, !dbg !86
  %252 = shufflevector <2 x i1> %251, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !86
  %253 = select <2 x i1> %252, <2 x float> %233, <2 x float> %250, !dbg !86
  %254 = fcmp olt <2 x float> %253, zeroinitializer, !dbg !87
  %255 = select <2 x i1> %254, <2 x float> zeroinitializer, <2 x float> %253, !dbg !91
  %256 = fcmp ole <2 x float> %255, zeroinitializer, !dbg !92
  %bc = bitcast <2 x float> %255 to <2 x i32>, !dbg !93
  %257 = extractelement <2 x i32> %bc, i64 0, !dbg !93
  %bc26 = bitcast <2 x float> %255 to <2 x i32>, !dbg !93
  %258 = extractelement <2 x i32> %bc26, i64 1, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %258, ptr addrspace(1) %213, i1 true) #3, !dbg !93
  %259 = zext <2 x i1> %256 to <2 x i8>, !dbg !94
  %260 = bitcast <2 x i8> %259 to i16, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %260, ptr addrspace(1) %214, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz5jzrnwlg5pdczy5uyzvttlepmqk2ud6i2q2mx23uha5su3eva7.py", directory: "inductor_cache/z5")
!4 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_threshold_backward_1", linkageName: "triton_poi_fused_cat_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 55, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 60, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 54, column: 20, scope: !7)
!36 = !DILocation(line: 55, column: 51, scope: !7)
!37 = !DILocation(line: 55, column: 42, scope: !7)
!38 = !DILocation(line: 55, column: 64, scope: !7)
!39 = !DILocation(line: 55, column: 36, scope: !7)
!40 = !DILocation(line: 55, column: 57, scope: !7)
!41 = !DILocation(line: 55, column: 31, scope: !7)
!42 = !DILocation(line: 55, column: 69, scope: !7)
!43 = !DILocation(line: 56, column: 31, scope: !7)
!44 = !DILocation(line: 56, column: 45, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 45, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 27, scope: !7)
!49 = !DILocation(line: 63, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 31, scope: !7)
!51 = !DILocation(line: 67, column: 45, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 45, scope: !7)
!54 = !DILocation(line: 73, column: 20, scope: !7)
!55 = !DILocation(line: 76, column: 52, scope: !7)
!56 = !DILocation(line: 76, column: 43, scope: !7)
!57 = !DILocation(line: 76, column: 58, scope: !7)
!58 = !DILocation(line: 76, column: 32, scope: !7)
!59 = !DILocation(line: 76, column: 70, scope: !7)
!60 = !DILocation(line: 77, column: 32, scope: !7)
!61 = !DILocation(line: 77, column: 46, scope: !7)
!62 = !DILocation(line: 79, column: 32, scope: !7)
!63 = !DILocation(line: 79, column: 46, scope: !7)
!64 = !DILocation(line: 81, column: 20, scope: !7)
!65 = !DILocation(line: 82, column: 27, scope: !7)
!66 = !DILocation(line: 84, column: 20, scope: !7)
!67 = !DILocation(line: 88, column: 32, scope: !7)
!68 = !DILocation(line: 88, column: 46, scope: !7)
!69 = !DILocation(line: 90, column: 32, scope: !7)
!70 = !DILocation(line: 90, column: 46, scope: !7)
!71 = !DILocation(line: 100, column: 28, scope: !7)
!72 = !DILocation(line: 101, column: 25, scope: !7)
!73 = !DILocation(line: 78, column: 20, scope: !7)
!74 = !DILocation(line: 57, column: 20, scope: !7)
!75 = !DILocation(line: 66, column: 20, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 35, column: 18, scope: !7)
!79 = !DILocation(line: 44, column: 19, scope: !7)
!80 = !DILocation(line: 46, column: 20, scope: !7)
!81 = !DILocation(line: 48, column: 20, scope: !7)
!82 = !DILocation(line: 87, column: 20, scope: !7)
!83 = !DILocation(line: 89, column: 20, scope: !7)
!84 = !DILocation(line: 91, column: 20, scope: !7)
!85 = !DILocation(line: 93, column: 35, scope: !7)
!86 = !DILocation(line: 0, scope: !7)
!87 = !DILocation(line: 118, column: 15, scope: !88, inlinedAt: !90)
!88 = distinct !DILexicalBlockFile(scope: !7, file: !89, discriminator: 0)
!89 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!90 = !DILocation(line: 97, column: 42, scope: !7)
!91 = !DILocation(line: 121, column: 29, scope: !88, inlinedAt: !90)
!92 = !DILocation(line: 99, column: 21, scope: !7)
!93 = !DILocation(line: 100, column: 40, scope: !7)
!94 = !DILocation(line: 101, column: 37, scope: !7)
!95 = !DILocation(line: 101, column: 4, scope: !7)
