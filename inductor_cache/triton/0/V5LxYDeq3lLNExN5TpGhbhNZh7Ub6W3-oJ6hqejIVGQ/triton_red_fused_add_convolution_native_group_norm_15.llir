; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_convolution_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 128, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = shl i32 %11, 2, !dbg !12
  %19 = and i32 %18, 2044, !dbg !12
  %20 = srem i32 %9, 32, !dbg !13
  %21 = lshr i32 %14, 8, !dbg !14
  %22 = lshr i32 %15, 8, !dbg !14
  %23 = lshr i32 %16, 8, !dbg !14
  %24 = lshr i32 %17, 8, !dbg !14
  %25 = shl i32 %9, 11, !dbg !15
  %26 = or disjoint i32 %25, %19, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = shl nuw nsw i32 %19, 1, !dbg !18
  %35 = zext nneg i32 %34 to i64, !dbg !18
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %35, !dbg !18
  %37 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #5, !dbg !18
  %38 = or disjoint i32 %34, 2, !dbg !18
  %39 = zext nneg i32 %38 to i64, !dbg !18
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39, !dbg !18
  %41 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #5, !dbg !18
  %42 = or disjoint i32 %34, 4, !dbg !18
  %43 = zext nneg i32 %42 to i64, !dbg !18
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43, !dbg !18
  %45 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 true) #5, !dbg !18
  %46 = or disjoint i32 %34, 6, !dbg !18
  %47 = zext nneg i32 %46 to i64, !dbg !18
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47, !dbg !18
  %49 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %50 = shl nuw nsw i32 %14, 1, !dbg !18
  %51 = zext nneg i32 %50 to i64, !dbg !18
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51, !dbg !18
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !18
  %54 = shl nuw nsw i32 %15, 1, !dbg !18
  %55 = zext nneg i32 %54 to i64, !dbg !18
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !18
  %57 = load float, ptr addrspace(3) %56, align 8, !dbg !18
  %58 = shl nuw nsw i32 %16, 1, !dbg !18
  %59 = zext nneg i32 %58 to i64, !dbg !18
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59, !dbg !18
  %61 = load float, ptr addrspace(3) %60, align 8, !dbg !18
  %62 = shl nuw nsw i32 %17, 1, !dbg !18
  %63 = zext nneg i32 %62 to i64, !dbg !18
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63, !dbg !18
  %65 = load float, ptr addrspace(3) %64, align 8, !dbg !18
  %66 = shl nsw i32 %20, 3, !dbg !19
  %67 = or disjoint i32 %66, %21, !dbg !20
  %68 = or disjoint i32 %66, %22, !dbg !20
  %69 = or disjoint i32 %66, %23, !dbg !20
  %70 = or disjoint i32 %66, %24, !dbg !20
  %71 = sext i32 %67 to i64, !dbg !21
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !21
  %73 = sext i32 %68 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !21
  %75 = sext i32 %69 to i64, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !21
  %77 = sext i32 %70 to i64, !dbg !21
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %10, i32 0, i1 %10) #5, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %10, i32 0, i1 %10) #5, !dbg !22
  %82 = bitcast i32 %81 to float, !dbg !22
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10) #5, !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %10, i32 0, i1 %10) #5, !dbg !22
  %86 = bitcast i32 %85 to float, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !23
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %93 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %93, i1 true) #5, !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %94, i1 true) #5, !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %95, i1 true) #5, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %96, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %97 = load float, ptr addrspace(3) %52, align 8, !dbg !24
  %98 = load float, ptr addrspace(3) %56, align 8, !dbg !24
  %99 = load float, ptr addrspace(3) %60, align 8, !dbg !24
  %100 = load float, ptr addrspace(3) %64, align 8, !dbg !24
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !25
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %106 = bitcast i32 %105 to float, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = fadd float %53, %80, !dbg !27
  %114 = fadd float %57, %82, !dbg !27
  %115 = fadd float %61, %84, !dbg !27
  %116 = fadd float %65, %86, !dbg !27
  %117 = fadd float %97, %106, !dbg !28
  %118 = fadd float %98, %108, !dbg !28
  %119 = fadd float %99, %110, !dbg !28
  %120 = fadd float %100, %112, !dbg !28
  %121 = fadd float %113, %117, !dbg !29
  %122 = fadd float %114, %118, !dbg !29
  %123 = fadd float %115, %119, !dbg !29
  %124 = fadd float %116, %120, !dbg !29
  %125 = select i1 %10, float %121, float 0.000000e+00, !dbg !30
  %126 = select i1 %10, float %122, float 0.000000e+00, !dbg !30
  %127 = select i1 %10, float %123, float 0.000000e+00, !dbg !30
  %128 = select i1 %10, float %124, float 0.000000e+00, !dbg !30
  %129 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %130 = zext nneg i32 %14 to i64, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !32
  %132 = bitcast float %121 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #5, !dbg !32
  %133 = zext nneg i32 %15 to i64, !dbg !32
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !32
  %135 = bitcast float %122 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #5, !dbg !32
  %136 = zext nneg i32 %16 to i64, !dbg !32
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !32
  %138 = bitcast float %123 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #5, !dbg !32
  %139 = zext nneg i32 %17 to i64, !dbg !32
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !32
  %141 = bitcast float %124 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %142 = zext nneg i32 %19 to i64, !dbg !32
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !32
  %.extract = load i32, ptr addrspace(3) %143, align 16, !dbg !32
  %144 = getelementptr inbounds i8, ptr addrspace(3) %143, i64 4, !dbg !32
  %.extract4 = load i32, ptr addrspace(3) %144, align 4, !dbg !32
  %145 = getelementptr inbounds i8, ptr addrspace(3) %143, i64 8, !dbg !32
  %.extract5 = load i32, ptr addrspace(3) %145, align 8, !dbg !32
  %146 = getelementptr inbounds i8, ptr addrspace(3) %143, i64 12, !dbg !32
  %.extract6 = load i32, ptr addrspace(3) %146, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %28, i1 %10) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %147 = fsub float %126, %125, !dbg !37
  %148 = select i1 %10, float 2.000000e+00, float 0.000000e+00, !dbg !39
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !40
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %148) #5, !dbg !41
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !42
  %152 = fmul float %147, %151, !dbg !43
  %153 = fadd float %125, %152, !dbg !44
  %154 = fmul float %147, %147, !dbg !45
  %155 = fmul float %129, %154, !dbg !46
  %156 = fmul float %155, %151, !dbg !47
  %157 = fadd float %156, 0.000000e+00, !dbg !48
  %158 = fsub float %127, %153, !dbg !37
  %159 = select i1 %10, float 3.000000e+00, float 0.000000e+00, !dbg !39
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !40
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %159) #5, !dbg !41
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !42
  %163 = fmul float %162, %158, !dbg !43
  %164 = fadd float %153, %163, !dbg !44
  %165 = fmul float %158, %158, !dbg !45
  %166 = fmul float %148, %165, !dbg !46
  %167 = fmul float %162, %166, !dbg !47
  %168 = fadd float %157, %167, !dbg !48
  %169 = fsub float %128, %164, !dbg !37
  %170 = select i1 %10, float 4.000000e+00, float 0.000000e+00, !dbg !39
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !40
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %170) #5, !dbg !41
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !42
  %174 = fmul float %173, %169, !dbg !43
  %175 = fadd float %164, %174, !dbg !44
  %176 = fmul float %169, %169, !dbg !45
  %177 = fmul float %159, %176, !dbg !46
  %178 = fmul float %173, %177, !dbg !47
  %179 = fadd float %168, %178, !dbg !48
  %180 = bitcast float %175 to i32, !dbg !33
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !33
  %182 = bitcast i32 %181 to float, !dbg !33
  %183 = bitcast float %179 to i32, !dbg !33
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !33
  %185 = bitcast i32 %184 to float, !dbg !33
  %186 = bitcast float %170 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = fsub float %182, %175, !dbg !37
  %190 = fadd float %170, %188, !dbg !39
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !40
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #5, !dbg !41
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !42
  %194 = fmul float %193, %189, !dbg !43
  %195 = fadd float %175, %194, !dbg !44
  %196 = fadd float %179, %185, !dbg !49
  %197 = fmul float %189, %189, !dbg !45
  %198 = fmul float %170, %197, !dbg !46
  %199 = fmul float %193, %198, !dbg !47
  %200 = fadd float %196, %199, !dbg !48
  %201 = bitcast float %195 to i32, !dbg !33
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !33
  %203 = bitcast i32 %202 to float, !dbg !33
  %204 = bitcast float %200 to i32, !dbg !33
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !33
  %206 = bitcast i32 %205 to float, !dbg !33
  %207 = bitcast float %190 to i32, !dbg !33
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !33
  %209 = bitcast i32 %208 to float, !dbg !33
  %210 = fsub float %203, %195, !dbg !37
  %211 = fadd float %190, %209, !dbg !39
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !40
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #5, !dbg !41
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !42
  %215 = fmul float %210, %214, !dbg !43
  %216 = fadd float %195, %215, !dbg !44
  %217 = fadd float %200, %206, !dbg !49
  %218 = fmul float %210, %210, !dbg !45
  %219 = fmul float %190, %218, !dbg !46
  %220 = fmul float %214, %219, !dbg !47
  %221 = fadd float %217, %220, !dbg !48
  %222 = bitcast float %216 to i32, !dbg !33
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !33
  %224 = bitcast i32 %223 to float, !dbg !33
  %225 = bitcast float %221 to i32, !dbg !33
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !33
  %227 = bitcast i32 %226 to float, !dbg !33
  %228 = bitcast float %211 to i32, !dbg !33
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !33
  %230 = bitcast i32 %229 to float, !dbg !33
  %231 = fsub float %224, %216, !dbg !37
  %232 = fadd float %211, %230, !dbg !39
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !40
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #5, !dbg !41
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !42
  %236 = fmul float %231, %235, !dbg !43
  %237 = fadd float %216, %236, !dbg !44
  %238 = fadd float %221, %227, !dbg !49
  %239 = fmul float %231, %231, !dbg !45
  %240 = fmul float %211, %239, !dbg !46
  %241 = fmul float %235, %240, !dbg !47
  %242 = fadd float %238, %241, !dbg !48
  %243 = bitcast float %237 to i32, !dbg !33
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !33
  %245 = bitcast i32 %244 to float, !dbg !33
  %246 = bitcast float %242 to i32, !dbg !33
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !33
  %248 = bitcast i32 %247 to float, !dbg !33
  %249 = bitcast float %232 to i32, !dbg !33
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !33
  %251 = bitcast i32 %250 to float, !dbg !33
  %252 = fsub float %245, %237, !dbg !37
  %253 = fadd float %232, %251, !dbg !39
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !40
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %253) #5, !dbg !41
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !42
  %257 = fmul float %252, %256, !dbg !43
  %258 = fadd float %237, %257, !dbg !44
  %259 = fadd float %242, %248, !dbg !49
  %260 = fmul float %252, %252, !dbg !45
  %261 = fmul float %232, %260, !dbg !46
  %262 = fmul float %256, %261, !dbg !47
  %263 = fadd float %259, %262, !dbg !48
  %264 = bitcast float %258 to i32, !dbg !33
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !33
  %266 = bitcast i32 %265 to float, !dbg !33
  %267 = bitcast float %263 to i32, !dbg !33
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !33
  %269 = bitcast i32 %268 to float, !dbg !33
  %270 = bitcast float %253 to i32, !dbg !33
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !33
  %272 = bitcast i32 %271 to float, !dbg !33
  %273 = fsub float %266, %258, !dbg !37
  %274 = fadd float %253, %272, !dbg !39
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !40
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %274) #5, !dbg !41
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !42
  %278 = fmul float %273, %277, !dbg !43
  %279 = fadd float %258, %278, !dbg !44
  %280 = fadd float %263, %269, !dbg !49
  %281 = fmul float %273, %273, !dbg !45
  %282 = fmul float %253, %281, !dbg !46
  %283 = fmul float %277, %282, !dbg !47
  %284 = fadd float %280, %283, !dbg !48
  %285 = icmp eq i32 %12, 0, !dbg !33
  %286 = and i32 %13, 15, !dbg !33
  %287 = zext nneg i32 %286 to i64, !dbg !33
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i64 %287, !dbg !33
  %289 = bitcast float %279 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 %285) #5, !dbg !33
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %287, !dbg !33
  %291 = bitcast float %284 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %285) #5, !dbg !33
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %287, !dbg !33
  %293 = bitcast float %274 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 %285) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %294 = icmp slt i32 %11, 16, !dbg !33
  %295 = sext i32 %11 to i64, !dbg !33
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i64 %295, !dbg !33
  %297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %294) #5, !dbg !33
  %298 = bitcast i32 %297 to float, !dbg !33
  %299 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %295, !dbg !33
  %300 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %299, i1 %294) #5, !dbg !33
  %301 = bitcast i32 %300 to float, !dbg !33
  %302 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %295, !dbg !33
  %303 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %302, i1 %294) #5, !dbg !33
  %304 = bitcast i32 %303 to float, !dbg !33
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !33
  %306 = bitcast i32 %305 to float, !dbg !33
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !33
  %308 = bitcast i32 %307 to float, !dbg !33
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !33
  %310 = bitcast i32 %309 to float, !dbg !33
  %311 = fsub float %306, %298, !dbg !37
  %312 = fadd float %304, %310, !dbg !39
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !40
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !41
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !42
  %316 = fmul float %311, %315, !dbg !43
  %317 = fadd float %316, %298, !dbg !44
  %318 = fadd float %301, %308, !dbg !49
  %319 = fmul float %311, %311, !dbg !45
  %320 = fmul float %319, %304, !dbg !46
  %321 = fmul float %320, %315, !dbg !47
  %322 = fadd float %318, %321, !dbg !48
  %323 = bitcast float %317 to i32, !dbg !33
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !33
  %325 = bitcast i32 %324 to float, !dbg !33
  %326 = bitcast float %322 to i32, !dbg !33
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 4, i32 31), !dbg !33
  %328 = bitcast i32 %327 to float, !dbg !33
  %329 = bitcast float %312 to i32, !dbg !33
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !33
  %331 = bitcast i32 %330 to float, !dbg !33
  %332 = fsub float %325, %317, !dbg !37
  %333 = fadd float %312, %331, !dbg !39
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !40
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #5, !dbg !41
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !42
  %337 = fmul float %332, %336, !dbg !43
  %338 = fadd float %317, %337, !dbg !44
  %339 = fadd float %322, %328, !dbg !49
  %340 = fmul float %332, %332, !dbg !45
  %341 = fmul float %312, %340, !dbg !46
  %342 = fmul float %336, %341, !dbg !47
  %343 = fadd float %339, %342, !dbg !48
  %344 = bitcast float %338 to i32, !dbg !33
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !33
  %346 = bitcast i32 %345 to float, !dbg !33
  %347 = bitcast float %343 to i32, !dbg !33
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 2, i32 31), !dbg !33
  %349 = bitcast i32 %348 to float, !dbg !33
  %350 = bitcast float %333 to i32, !dbg !33
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 2, i32 31), !dbg !33
  %352 = bitcast i32 %351 to float, !dbg !33
  %353 = fsub float %346, %338, !dbg !37
  %354 = fadd float %333, %352, !dbg !39
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !40
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #5, !dbg !41
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !42
  %358 = fmul float %353, %357, !dbg !43
  %359 = fadd float %338, %358, !dbg !44
  %360 = fadd float %343, %349, !dbg !49
  %361 = fmul float %353, %353, !dbg !45
  %362 = fmul float %333, %361, !dbg !46
  %363 = fmul float %357, %362, !dbg !47
  %364 = fadd float %360, %363, !dbg !48
  %365 = bitcast float %359 to i32, !dbg !33
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !33
  %367 = bitcast i32 %366 to float, !dbg !33
  %368 = bitcast float %364 to i32, !dbg !33
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !33
  %370 = bitcast i32 %369 to float, !dbg !33
  %371 = bitcast float %354 to i32, !dbg !33
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !33
  %373 = bitcast i32 %372 to float, !dbg !33
  %374 = fsub float %367, %359, !dbg !37
  %375 = fadd float %354, %373, !dbg !39
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !40
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #5, !dbg !41
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !42
  %379 = fmul float %374, %378, !dbg !43
  %380 = fadd float %359, %379, !dbg !44
  %381 = fadd float %364, %370, !dbg !49
  %382 = fmul float %374, %374, !dbg !45
  %383 = fmul float %354, %382, !dbg !46
  %384 = fmul float %378, %383, !dbg !47
  %385 = fadd float %381, %384, !dbg !48
  %386 = and i32 %11, 15, !dbg !33
  %387 = icmp eq i32 %386, 0, !dbg !33
  %388 = and i1 %294, %387, !dbg !33
  %389 = bitcast float %380 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %389, i1 %388) #5, !dbg !33
  %390 = bitcast float %385 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %390, i1 %388) #5, !dbg !33
  %391 = bitcast float %375 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %391, i1 %388) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %392 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %393 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !33
  %394 = sext i32 %9 to i64, !dbg !50
  %395 = getelementptr float, ptr addrspace(1) %5, i64 %394, !dbg !50
  %396 = icmp eq i32 %14, 0, !dbg !51
  %397 = and i1 %396, %10, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %395, i1 %397) #5, !dbg !51
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 2.048000e+03) #5, !dbg !52
  %399 = fadd float %398, 0x3EB0C6F7A0000000, !dbg !53
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %400, 0, !dbg !54
  br i1 %.not.i, label %403, label %401, !dbg !54

401:                                              ; preds = %8
  %402 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %399), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

403:                                              ; preds = %8
  %404 = tail call float @llvm.nvvm.rsqrt.approx.f(float %399), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %401, %403
  %.0.i = phi float [ %402, %401 ], [ %404, %403 ], !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %405 = getelementptr float, ptr addrspace(1) %1, i64 %394, !dbg !56
  %406 = bitcast float %.0.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %406, ptr addrspace(1) %405, i1 %397) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cskxrensetejlz5vnnmz3hfhx2fp7h2tra5vdvlsckr6x33w2arv.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_15, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_15", linkageName: "triton_red_fused_add_convolution_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 48, scope: !7)
!16 = !DILocation(line: 36, column: 43, scope: !7)
!17 = !DILocation(line: 36, column: 38, scope: !7)
!18 = !DILocation(line: 36, column: 53, scope: !7)
!19 = !DILocation(line: 37, column: 41, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 34, scope: !7)
!24 = !DILocation(line: 38, column: 49, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 46, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 41, column: 22, scope: !7)
!29 = !DILocation(line: 42, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 60, scope: !7)
!31 = !DILocation(line: 49, column: 64, scope: !7)
!32 = !DILocation(line: 50, column: 53, scope: !7)
!33 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 52, column: 41, scope: !7)
!37 = !DILocation(line: 192, column: 21, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 193, column: 28, scope: !38, inlinedAt: !36)
!40 = !DILocation(line: 194, column: 39, scope: !38, inlinedAt: !36)
!41 = !DILocation(line: 194, column: 60, scope: !38, inlinedAt: !36)
!42 = !DILocation(line: 194, column: 49, scope: !38, inlinedAt: !36)
!43 = !DILocation(line: 196, column: 25, scope: !38, inlinedAt: !36)
!44 = !DILocation(line: 196, column: 17, scope: !38, inlinedAt: !36)
!45 = !DILocation(line: 197, column: 30, scope: !38, inlinedAt: !36)
!46 = !DILocation(line: 197, column: 38, scope: !38, inlinedAt: !36)
!47 = !DILocation(line: 197, column: 49, scope: !38, inlinedAt: !36)
!48 = !DILocation(line: 197, column: 22, scope: !38, inlinedAt: !36)
!49 = !DILocation(line: 197, column: 15, scope: !38, inlinedAt: !36)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 59, column: 19, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 28, scope: !7)
!55 = !DILocation(line: 63, column: 4, scope: !7)
!56 = !DILocation(line: 64, column: 28, scope: !7)
!57 = !DILocation(line: 64, column: 40, scope: !7)
!58 = !DILocation(line: 64, column: 4, scope: !7)
