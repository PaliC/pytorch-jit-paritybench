; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_mul_pow_rsqrt_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %13 = sdiv i32 %.frozen, 4, !dbg !13
  %14 = mul i32 %13, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = lshr i32 %12, 4, !dbg !15
  %16 = shl nsw i32 %.decomposed, 6, !dbg !16
  %17 = or disjoint i32 %16, %12, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = shl nsw i32 %13, 2, !dbg !20
  %23 = or disjoint i32 %22, %15, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = fmul float %21, 1.250000e-01, !dbg !24
  %29 = fmul float %28, %27, !dbg !25
  %30 = fmul float %29, %29, !dbg !26
  %31 = select i1 %8, float %30, float 0.000000e+00, !dbg !27
  %32 = bitcast float %31 to i32, !dbg !28
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = fadd float %31, %34, !dbg !32
  %36 = bitcast float %35 to i32, !dbg !28
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = fadd float %35, %38, !dbg !32
  %40 = bitcast float %39 to i32, !dbg !28
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = fadd float %39, %42, !dbg !32
  %44 = bitcast float %43 to i32, !dbg !28
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = fadd float %43, %46, !dbg !32
  %48 = bitcast float %47 to i32, !dbg !28
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = fadd float %47, %50, !dbg !32
  %52 = icmp eq i32 %10, 0, !dbg !28
  %53 = and i32 %11, 1, !dbg !28
  %54 = zext nneg i32 %53 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !28
  %56 = bitcast float %51 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 %52) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %57 = icmp slt i32 %9, 2, !dbg !28
  %58 = sext i32 %9 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !28
  %60 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %57) #5, !dbg !28
  %61 = bitcast i32 %60 to float, !dbg !28
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = fadd float %61, %63, !dbg !32
  %65 = and i32 %9, 1, !dbg !28
  %66 = icmp eq i32 %65, 0, !dbg !28
  %67 = and i1 %57, %66, !dbg !28
  %68 = bitcast float %64 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %68, i1 %67) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %69 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %70 = fadd float %69, 0x3E45798EE0000000, !dbg !34
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %71, 0, !dbg !35
  br i1 %.not.i, label %74, label %72, !dbg !35

72:                                               ; preds = %6
  %73 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %70), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

74:                                               ; preds = %6
  %75 = tail call float @llvm.nvvm.rsqrt.approx.f(float %70), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %72, %74
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], !dbg !35
  %76 = fmul float %29, %.0.i, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %77 = sext i32 %7 to i64, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !38
  %79 = icmp eq i32 %12, 0, !dbg !39
  %80 = bitcast float %.0.i to i32, !dbg !39
  %81 = and i1 %79, %8, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %78, i1 %81) #5, !dbg !39
  %82 = shl i32 %7, 6, !dbg !40
  %83 = or disjoint i32 %82, %12, !dbg !41
  %84 = sext i32 %83 to i64, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !42
  %86 = bitcast float %76 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %85, i1 %8) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqcz2id4lilpbutqds6ozpbkznutd32f6ye2pk37kdkdy43p6s6.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_pow_rsqrt_sum_2", linkageName: "triton_per_fused_add_mul_pow_rsqrt_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 43, scope: !7)
!20 = !DILocation(line: 35, column: 37, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 42, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 42, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 28, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 4, scope: !7)
!38 = !DILocation(line: 48, column: 28, scope: !7)
!39 = !DILocation(line: 48, column: 40, scope: !7)
!40 = !DILocation(line: 49, column: 33, scope: !7)
!41 = !DILocation(line: 49, column: 30, scope: !7)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 49, column: 45, scope: !7)
!44 = !DILocation(line: 49, column: 4, scope: !7)
