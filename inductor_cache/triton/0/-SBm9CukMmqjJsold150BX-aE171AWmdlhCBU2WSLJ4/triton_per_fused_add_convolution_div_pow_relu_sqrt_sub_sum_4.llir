; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = and i32 %8, 63, !dbg !11
  %12 = shl i32 %7, 6, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !15
  %17 = bitcast i32 %16 to float, !dbg !15
  %18 = zext nneg i32 %11 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = fadd float %17, %21, !dbg !20
  %26 = fcmp olt float %25, 0.000000e+00, !dbg !21
  %27 = select i1 %26, float 0.000000e+00, float %25, !dbg !25
  %28 = fadd float %21, %24, !dbg !26
  %29 = fcmp olt float %28, 0.000000e+00, !dbg !27
  %30 = select i1 %29, float 0.000000e+00, float %28, !dbg !29
  %31 = fmul float %27, %27, !dbg !30
  %32 = bitcast float %31 to i32, !dbg !31
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !31
  %34 = bitcast i32 %33 to float, !dbg !31
  %35 = fadd float %31, %34, !dbg !35
  %36 = bitcast float %35 to i32, !dbg !31
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !31
  %38 = bitcast i32 %37 to float, !dbg !31
  %39 = fadd float %35, %38, !dbg !35
  %40 = bitcast float %39 to i32, !dbg !31
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !31
  %42 = bitcast i32 %41 to float, !dbg !31
  %43 = fadd float %39, %42, !dbg !35
  %44 = bitcast float %43 to i32, !dbg !31
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = fadd float %43, %46, !dbg !35
  %48 = bitcast float %47 to i32, !dbg !31
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = fadd float %47, %50, !dbg !35
  %52 = icmp eq i32 %9, 0, !dbg !31
  %53 = and i32 %10, 1, !dbg !31
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !31
  %55 = bitcast float %51 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 %52) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %56 = icmp slt i32 %8, 2, !dbg !31
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %56) #5, !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %59, %61, !dbg !35
  %63 = and i32 %8, 1, !dbg !31
  %64 = icmp eq i32 %63, 0, !dbg !31
  %65 = and i1 %56, %64, !dbg !31
  %66 = bitcast float %62 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %67 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %68 = fmul float %30, %30, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %69 = bitcast float %68 to i32, !dbg !38
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = fadd float %68, %71, !dbg !40
  %73 = bitcast float %72 to i32, !dbg !38
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = fadd float %72, %75, !dbg !40
  %77 = bitcast float %76 to i32, !dbg !38
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !38
  %79 = bitcast i32 %78 to float, !dbg !38
  %80 = fadd float %76, %79, !dbg !40
  %81 = bitcast float %80 to i32, !dbg !38
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !38
  %83 = bitcast i32 %82 to float, !dbg !38
  %84 = fadd float %80, %83, !dbg !40
  %85 = bitcast float %84 to i32, !dbg !38
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !38
  %87 = bitcast i32 %86 to float, !dbg !38
  %88 = fadd float %84, %87, !dbg !40
  %89 = bitcast float %88 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %89, i1 %52) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %56) #5, !dbg !38
  %91 = bitcast i32 %90 to float, !dbg !38
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !38
  %93 = bitcast i32 %92 to float, !dbg !38
  %94 = fadd float %91, %93, !dbg !40
  %95 = bitcast float %94 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %95, i1 %65) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %96 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %97, 0, !dbg !41
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %98, 0, !dbg !41
  br i1 %.not.i, label %104, label %99, !dbg !41

99:                                               ; preds = %6
  br i1 %.not1.i, label %102, label %100, !dbg !41

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

104:                                              ; preds = %6
  br i1 %.not1.i, label %107, label %105, !dbg !41

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %100, %102, %105, %107
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !41
  %109 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !42
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %27, float %109) #5, !dbg !43
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i1 = icmp eq i32 %111, 0, !dbg !44
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i4 = icmp eq i32 %112, 0, !dbg !44
  br i1 %.not.i1, label %118, label %113, !dbg !44

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !44

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #5, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #5, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !44

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #5, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #5, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %114, %116, %119, %121
  %.0.i3 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !44
  %123 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !45
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %123) #5, !dbg !46
  %125 = fsub float %110, %124, !dbg !47
  %126 = fmul float %125, %125, !dbg !48
  %127 = bitcast float %27 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %15, i1 true) #5, !dbg !49
  %128 = bitcast float %30 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %22, i1 true) #5, !dbg !50
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !51
  %130 = bitcast float %126 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %129, i1 true) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikukn7ysiu5mudtsv4guw4abtyturbcwx7uyk32idcq24k4r2ok.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4", linkageName: "triton_per_fused_add_convolution_div_pow_relu_sqrt_sub_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 42, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 47, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 47, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !28)
!28 = !DILocation(line: 38, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 41, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 44, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!41 = !DILocation(line: 45, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 27, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 47, scope: !7)
!50 = !DILocation(line: 55, column: 47, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 45, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
