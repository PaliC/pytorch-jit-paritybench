; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_mul_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = shl i32 %7, 2, !dbg !10
  %11 = and i32 %10, 252, !dbg !10
  %12 = zext nneg i32 %11 to i64, !dbg !11
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !11
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = insertelement <4 x i32> poison, i32 %15, i64 0, !dbg !12
  %26 = insertelement <4 x i32> %25, i32 %16, i64 1, !dbg !12
  %27 = insertelement <4 x i32> %26, i32 %17, i64 2, !dbg !12
  %28 = insertelement <4 x i32> %27, i32 %18, i64 3, !dbg !12
  %29 = bitcast <4 x i32> %28 to <4 x float>, !dbg !12
  %30 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !14
  %31 = insertelement <4 x i32> %30, i32 %22, i64 1, !dbg !14
  %32 = insertelement <4 x i32> %31, i32 %23, i64 2, !dbg !14
  %33 = insertelement <4 x i32> %32, i32 %24, i64 3, !dbg !14
  %34 = bitcast <4 x i32> %33 to <4 x float>, !dbg !14
  %35 = fmul <4 x float> %29, %34, !dbg !15
  %36 = extractelement <4 x float> %35, i64 0, !dbg !15
  %37 = fmul <4 x float> %29, %34, !dbg !15
  %38 = extractelement <4 x float> %37, i64 1, !dbg !15
  %39 = fmul <4 x float> %29, %34, !dbg !15
  %40 = extractelement <4 x float> %39, i64 2, !dbg !15
  %41 = fmul <4 x float> %29, %34, !dbg !15
  %42 = extractelement <4 x float> %41, i64 3, !dbg !15
  %43 = fptosi float %36 to i8, !dbg !16
  %44 = fptosi float %38 to i8, !dbg !16
  %45 = fptosi float %40 to i8, !dbg !16
  %46 = fptosi float %42 to i8, !dbg !16
  %47 = fsub <4 x float> splat (float 1.000000e+00), %29, !dbg !17
  %48 = fmul <4 x float> %47, %34, !dbg !18
  %49 = fptosi <4 x float> %48 to <4 x i8>, !dbg !19
  %50 = uitofp i8 %43 to float, !dbg !20
  %51 = uitofp i8 %44 to float, !dbg !20
  %52 = uitofp i8 %45 to float, !dbg !20
  %53 = uitofp i8 %46 to float, !dbg !20
  %54 = fadd float %50, %51, !dbg !21
  %55 = fadd float %54, %52, !dbg !21
  %56 = fadd float %55, %53, !dbg !21
  %57 = bitcast float %56 to i32, !dbg !26
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = fadd float %56, %59, !dbg !21
  %61 = bitcast float %60 to i32, !dbg !26
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = fadd float %60, %63, !dbg !21
  %65 = bitcast float %64 to i32, !dbg !26
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = fadd float %64, %67, !dbg !21
  %69 = bitcast float %68 to i32, !dbg !26
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = fadd float %68, %71, !dbg !21
  %73 = bitcast float %72 to i32, !dbg !26
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = fadd float %72, %75, !dbg !21
  %77 = icmp eq i32 %8, 0, !dbg !26
  %78 = and i32 %9, 1, !dbg !26
  %79 = zext nneg i32 %78 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !26
  %81 = bitcast float %76 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %77) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = icmp slt i32 %7, 2, !dbg !26
  %83 = sext i32 %7 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i64 %83, !dbg !26
  %85 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %82) #3, !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = fadd float %86, %88, !dbg !21
  %90 = and i32 %7, 1, !dbg !26
  %91 = icmp eq i32 %90, 0, !dbg !26
  %92 = and i1 %82, %91, !dbg !26
  %93 = bitcast float %89 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %93, i1 %92) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %95 = fadd float %94, 0.000000e+00, !dbg !27
  %96 = getelementptr i8, ptr addrspace(1) %2, i64 %12, !dbg !31
  %97 = insertelement <4 x i8> poison, i8 %43, i64 0, !dbg !32
  %98 = insertelement <4 x i8> %97, i8 %44, i64 1, !dbg !32
  %99 = insertelement <4 x i8> %98, i8 %45, i64 2, !dbg !32
  %100 = insertelement <4 x i8> %99, i8 %46, i64 3, !dbg !32
  %101 = bitcast <4 x i8> %100 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %96, i1 true) #3, !dbg !32
  %102 = getelementptr i8, ptr addrspace(1) %3, i64 %12, !dbg !33
  %103 = bitcast <4 x i8> %49 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %102, i1 true) #3, !dbg !34
  %urem = and i32 %7, 63, !dbg !35
  %104 = icmp eq i32 %urem, 0, !dbg !35
  %105 = bitcast float %95 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %4, i1 %104) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3jdqzmfazfaoicv5rjdo6y77edjrtbxzkweakaesomfo7smmfa.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_per_fused__to_copy_mul_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_mul_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_mul_rsub_sum_0", linkageName: "triton_per_fused__to_copy_mul_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 37, column: 18, scope: !7)
!19 = !DILocation(line: 38, column: 19, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 41, column: 58, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 41, column: 45, scope: !7)
!31 = !DILocation(line: 42, column: 25, scope: !7)
!32 = !DILocation(line: 42, column: 63, scope: !7)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 43, column: 63, scope: !7)
!35 = !DILocation(line: 44, column: 60, scope: !7)
!36 = !DILocation(line: 44, column: 4, scope: !7)
