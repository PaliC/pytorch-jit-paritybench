#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#loc = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0), %arg4: i32 loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x256xi32, #blocked> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<1x256xi32, #blocked1> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<1x256xi32, #blocked> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.cmpi slt, %12, %c4_i32 : i32 loc(#loc8)
    %14 = arith.remsi %8, %cst_0 : tensor<1x256xi32, #blocked1> loc(#loc9)
    %15 = arith.divsi %8, %cst_0 : tensor<1x256xi32, #blocked1> loc(#loc10)
    %16 = arith.muli %12, %c64_i32 : i32 loc(#loc11)
    %17 = tt.splat %16 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc12)
    %18 = arith.addi %14, %17 : tensor<1x256xi32, #blocked1> loc(#loc12)
    %19 = arith.muli %15, %cst_1 : tensor<1x256xi32, #blocked1> loc(#loc13)
    %20 = arith.addi %18, %19 : tensor<1x256xi32, #blocked1> loc(#loc14)
    %21 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %22 = tt.addptr %21, %20 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc15)
    %23 = tt.splat %13 : i1 -> tensor<1x256xi1, #blocked1> loc(#loc16)
    %24 = tt.splat %13 : i1 -> tensor<1x256xi1, #blocked> loc(#loc16)
    %25 = arith.andi %23, %10 : tensor<1x256xi1, #blocked1> loc(#loc16)
    %26 = arith.andi %24, %11 : tensor<1x256xi1, #blocked> loc(#loc16)
    %27 = tt.load %22, %25 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %28 = triton_gpu.convert_layout %27 : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc17)
    %29 = arith.muli %9, %cst : tensor<1x256xi32, #blocked> loc(#loc18)
    %30 = tt.splat %12 : i32 -> tensor<1x256xi32, #blocked> loc(#loc19)
    %31 = arith.addi %30, %29 : tensor<1x256xi32, #blocked> loc(#loc19)
    %32 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %33 = tt.addptr %32, %31 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc20)
    %34 = tt.load %33, %26 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %35 = tt.addptr %arg2, %12 : !tt.ptr<f32>, i32 loc(#loc22)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %37 = tt.splat %13 : i1 -> tensor<1x1xi1, #blocked> loc(#loc23)
    %38 = tt.load %36, %37 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %39 = tt.broadcast %38 : tensor<1x1xf32, #blocked> -> tensor<1x256xf32, #blocked> loc(#loc24)
    %40 = arith.addf %34, %39 : tensor<1x256xf32, #blocked> loc(#loc24)
    %41 = arith.addf %28, %40 : tensor<1x256xf32, #blocked> loc(#loc25)
    gpu.barrier loc(#loc26)
    tt.store %33, %41, %26 : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":22:28)
#loc3 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":22:33)
#loc4 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":23:44)
#loc5 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":23:23)
#loc6 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":24:21)
#loc7 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":25:28)
#loc8 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":27:21)
#loc9 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":29:19)
#loc10 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":30:19)
#loc11 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:38)
#loc12 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:35)
#loc13 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:47)
#loc14 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:43)
#loc15 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:30)
#loc16 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:60)
#loc17 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":32:52)
#loc18 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":33:41)
#loc19 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":33:39)
#loc20 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":33:34)
#loc21 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":33:46)
#loc22 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":34:30)
#loc23 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":34:35)
#loc24 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":35:18)
#loc25 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":36:18)
#loc26 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":37:4)
#loc27 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":38:46)
#loc28 = loc("inductor_cache/fg/cfg6lqyokajiq25gtmnzi2v67cergljjqsa4v5dh2d7vlsze5ndt.py":38:4)
