; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %15, 128, !dbg !12
  %17 = or disjoint i32 %15, 256, !dbg !12
  %18 = or disjoint i32 %15, 384, !dbg !12
  %19 = or disjoint i32 %15, 512, !dbg !12
  %20 = or disjoint i32 %15, 640, !dbg !12
  %21 = or disjoint i32 %15, 768, !dbg !12
  %22 = or disjoint i32 %15, 896, !dbg !12
  %23 = or disjoint i32 %13, %15, !dbg !13
  %24 = or disjoint i32 %13, %16, !dbg !13
  %25 = or disjoint i32 %13, %17, !dbg !13
  %26 = or disjoint i32 %13, %18, !dbg !13
  %27 = or disjoint i32 %13, %19, !dbg !13
  %28 = or disjoint i32 %13, %20, !dbg !13
  %29 = or disjoint i32 %13, %21, !dbg !13
  %30 = or disjoint i32 %13, %22, !dbg !13
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %32 = icmp slt i32 %31, 2048, !dbg !15
  %33 = shl i32 %23, 11, !dbg !16
  %34 = shl i32 %24, 11, !dbg !16
  %35 = shl i32 %25, 11, !dbg !16
  %36 = shl i32 %26, 11, !dbg !16
  %37 = shl i32 %27, 11, !dbg !16
  %38 = shl i32 %28, 11, !dbg !16
  %39 = shl i32 %29, 11, !dbg !16
  %40 = shl i32 %30, 11, !dbg !16
  %41 = add i32 %33, %31, !dbg !17
  %42 = add i32 %34, %31, !dbg !17
  %43 = add i32 %35, %31, !dbg !17
  %44 = add i32 %36, %31, !dbg !17
  %45 = add i32 %37, %31, !dbg !17
  %46 = add i32 %38, %31, !dbg !17
  %47 = add i32 %39, %31, !dbg !17
  %48 = add i32 %40, %31, !dbg !17
  %49 = sext i32 %41 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %42 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = sext i32 %43 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = sext i32 %44 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !18
  %57 = sext i32 %45 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = sext i32 %46 to i64, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !18
  %61 = sext i32 %47 to i64, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !18
  %63 = sext i32 %48 to i64, !dbg !18
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !18
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %32) #4, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %32) #4, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %32) #4, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %32) #4, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %32) #4, !dbg !19
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %32) #4, !dbg !19
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %32) #4, !dbg !19
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %32) #4, !dbg !19
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !20
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !20
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !20
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !20
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !20
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %32) #4, !dbg !21
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %32) #4, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %32) #4, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %32) #4, !dbg !21
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %32) #4, !dbg !21
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %32) #4, !dbg !21
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %32) #4, !dbg !21
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %32) #4, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !22
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %32) #4, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %32) #4, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %32) #4, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %32) #4, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %32) #4, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %32) #4, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #4, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %32) #4, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !24
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !24
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !24
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !24
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %32) #4, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %32) #4, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %32) #4, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %32) #4, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %32) #4, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %32) #4, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %32) #4, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %32) #4, !dbg !25
  %121 = sext i32 %31 to i64, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %32) #4, !dbg !27
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %32) #4, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %6, i64 %121, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %32) #4, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %7, i64 %121, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %32) #4, !dbg !33
  %131 = fadd float %126, 0x3EE4F8B580000000, !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %132, 0, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i, label %139, label %134, !dbg !35

134:                                              ; preds = %11
  br i1 %.not1.i, label %137, label %135, !dbg !35

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

139:                                              ; preds = %11
  br i1 %.not1.i, label %142, label %140, !dbg !35

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %135, %137, %140, %142
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !35
  %144 = insertelement <8 x i32> poison, i32 %120, i64 0, !dbg !25
  %145 = insertelement <8 x i32> %144, i32 %119, i64 1, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %118, i64 2, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %117, i64 3, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %116, i64 4, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %115, i64 5, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %114, i64 6, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %113, i64 7, !dbg !25
  %152 = bitcast <8 x i32> %151 to <8 x float>, !dbg !25
  %153 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !19
  %154 = insertelement <8 x i32> %153, i32 %71, i64 1, !dbg !19
  %155 = insertelement <8 x i32> %154, i32 %70, i64 2, !dbg !19
  %156 = insertelement <8 x i32> %155, i32 %69, i64 3, !dbg !19
  %157 = insertelement <8 x i32> %156, i32 %68, i64 4, !dbg !19
  %158 = insertelement <8 x i32> %157, i32 %67, i64 5, !dbg !19
  %159 = insertelement <8 x i32> %158, i32 %66, i64 6, !dbg !19
  %160 = insertelement <8 x i32> %159, i32 %65, i64 7, !dbg !19
  %161 = bitcast <8 x i32> %160 to <8 x float>, !dbg !19
  %162 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !21
  %163 = insertelement <8 x i32> %162, i32 %87, i64 1, !dbg !21
  %164 = insertelement <8 x i32> %163, i32 %86, i64 2, !dbg !21
  %165 = insertelement <8 x i32> %164, i32 %85, i64 3, !dbg !21
  %166 = insertelement <8 x i32> %165, i32 %84, i64 4, !dbg !21
  %167 = insertelement <8 x i32> %166, i32 %83, i64 5, !dbg !21
  %168 = insertelement <8 x i32> %167, i32 %82, i64 6, !dbg !21
  %169 = insertelement <8 x i32> %168, i32 %81, i64 7, !dbg !21
  %170 = bitcast <8 x i32> %169 to <8 x float>, !dbg !21
  %171 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !23
  %172 = insertelement <8 x i32> %171, i32 %103, i64 1, !dbg !23
  %173 = insertelement <8 x i32> %172, i32 %102, i64 2, !dbg !23
  %174 = insertelement <8 x i32> %173, i32 %101, i64 3, !dbg !23
  %175 = insertelement <8 x i32> %174, i32 %100, i64 4, !dbg !23
  %176 = insertelement <8 x i32> %175, i32 %99, i64 5, !dbg !23
  %177 = insertelement <8 x i32> %176, i32 %98, i64 6, !dbg !23
  %178 = insertelement <8 x i32> %177, i32 %97, i64 7, !dbg !23
  %179 = bitcast <8 x i32> %178 to <8 x float>, !dbg !23
  %180 = shl i32 %14, 2, !dbg !12
  %181 = and i32 %180, 508, !dbg !12
  %182 = or disjoint i32 %181, %13, !dbg !13
  %183 = or disjoint i32 %182, 512, !dbg !13
  %.frozen = freeze i32 %183, !dbg !36
  %184 = sdiv i32 %.frozen, 4096, !dbg !36
  %.frozen15 = freeze i32 %182, !dbg !36
  %185 = sdiv i32 %.frozen15, 4096, !dbg !36
  %186 = mul i32 %184, 4096, !dbg !37
  %.decomposed = sub i32 %.frozen, %186, !dbg !37
  %187 = mul i32 %185, 4096, !dbg !37
  %.decomposed16 = sub i32 %.frozen15, %187, !dbg !37
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %189 = insertelement <8 x i32> poison, i32 %123, i64 0, !dbg !39
  %190 = bitcast <8 x i32> %189 to <8 x float>, !dbg !39
  %191 = shufflevector <8 x float> %190, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %192 = fsub <8 x float> %152, %191, !dbg !39
  %193 = fadd <8 x float> %161, %170, !dbg !40
  %194 = fadd <8 x float> %193, %179, !dbg !41
  %195 = insertelement <8 x float> poison, float %188, i64 0, !dbg !42
  %196 = shufflevector <8 x float> %195, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !42
  %197 = fmul <8 x float> %192, %196, !dbg !42
  %198 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !43
  %199 = bitcast <8 x i32> %198 to <8 x float>, !dbg !43
  %200 = shufflevector <8 x float> %199, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  %201 = fmul <8 x float> %197, %200, !dbg !43
  %202 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !44
  %203 = bitcast <8 x i32> %202 to <8 x float>, !dbg !44
  %204 = shufflevector <8 x float> %203, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !44
  %205 = fadd <8 x float> %201, %204, !dbg !44
  %206 = fadd <8 x float> %194, %205, !dbg !45
  %207 = fcmp olt <8 x float> %206, zeroinitializer, !dbg !46
  %208 = extractelement <8 x i1> %207, i64 7, !dbg !50
  %209 = extractelement <8 x float> %206, i64 7, !dbg !50
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !50
  %211 = extractelement <8 x i1> %207, i64 6, !dbg !50
  %212 = extractelement <8 x float> %206, i64 6, !dbg !50
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !50
  %214 = extractelement <8 x i1> %207, i64 5, !dbg !50
  %215 = extractelement <8 x float> %206, i64 5, !dbg !50
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !50
  %217 = extractelement <8 x i1> %207, i64 4, !dbg !50
  %218 = extractelement <8 x float> %206, i64 4, !dbg !50
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !50
  %220 = extractelement <8 x i1> %207, i64 3, !dbg !50
  %221 = extractelement <8 x float> %206, i64 3, !dbg !50
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !50
  %223 = extractelement <8 x i1> %207, i64 2, !dbg !50
  %224 = extractelement <8 x float> %206, i64 2, !dbg !50
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !50
  %226 = extractelement <8 x i1> %207, i64 1, !dbg !50
  %227 = extractelement <8 x float> %206, i64 1, !dbg !50
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !50
  %229 = extractelement <8 x i1> %207, i64 0, !dbg !50
  %230 = extractelement <8 x float> %206, i64 0, !dbg !50
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !50
  %232 = shl i32 %31, 12, !dbg !51
  %233 = add i32 %.decomposed16, %232, !dbg !52
  %234 = add i32 %.decomposed, %232, !dbg !52
  %235 = shl i32 %185, 23, !dbg !53
  %236 = shl i32 %184, 23, !dbg !53
  %237 = add i32 %233, %235, !dbg !54
  %238 = add i32 %234, %236, !dbg !54
  %239 = sext i32 %237 to i64, !dbg !55
  %240 = getelementptr float, ptr addrspace(1) %8, i64 %239, !dbg !55
  %241 = sext i32 %238 to i64, !dbg !55
  %242 = getelementptr float, ptr addrspace(1) %8, i64 %241, !dbg !55
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !56
  %244 = bitcast float %210 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !56
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !56
  %246 = bitcast float %213 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !56
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %248 = bitcast float %216 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !56
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !56
  %250 = bitcast float %219 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !56
  %252 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %253 = bitcast float %222 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %253, i1 true) #4, !dbg !56
  %254 = bitcast float %225 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %254, i1 true) #4, !dbg !56
  %255 = bitcast float %228 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %255, i1 true) #4, !dbg !56
  %256 = bitcast float %231 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %256, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %257 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !56
  %.extract = extractelement <4 x i32> %252, i64 0, !dbg !56
  %.extract8 = extractelement <4 x i32> %252, i64 1, !dbg !56
  %.extract9 = extractelement <4 x i32> %252, i64 2, !dbg !56
  %.extract10 = extractelement <4 x i32> %252, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %240, i1 %32) #4, !dbg !56
  %.extract11 = extractelement <4 x i32> %257, i64 0, !dbg !56
  %.extract12 = extractelement <4 x i32> %257, i64 1, !dbg !56
  %.extract13 = extractelement <4 x i32> %257, i64 2, !dbg !56
  %.extract14 = extractelement <4 x i32> %257, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %242, i1 %32) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cge2kbyrwyviiu5bmbeem2jvw7un3yezuodm625bgxa3udt5v6ap.py", directory: "inductor_cache/ge")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 27, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 19, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 58, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 59, column: 35, scope: !7)
!52 = !DILocation(line: 59, column: 30, scope: !7)
!53 = !DILocation(line: 59, column: 48, scope: !7)
!54 = !DILocation(line: 59, column: 40, scope: !7)
!55 = !DILocation(line: 59, column: 25, scope: !7)
!56 = !DILocation(line: 59, column: 60, scope: !7)
!57 = !DILocation(line: 59, column: 4, scope: !7)
