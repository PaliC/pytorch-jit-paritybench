; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 104, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 8, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 1, !dbg !14
  %16 = and i32 %15, 254, !dbg !14
  %17 = or disjoint i32 %16, 1, !dbg !14
  %18 = or disjoint i32 %13, %16, !dbg !15
  %19 = or disjoint i32 %13, %17, !dbg !15
  %20 = icmp slt i32 %18, 256, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %21 = sdiv i32 %.frozen, 26, !dbg !17
  %22 = mul i32 %21, 26, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = mul i32 %18, 26, !dbg !19
  %24 = mul i32 %19, 26, !dbg !19
  %25 = mul i32 %21, 6656, !dbg !20
  %26 = add i32 %25, %.decomposed, !dbg !21
  %27 = add i32 %26, %23, !dbg !22
  %28 = add i32 %26, %24, !dbg !22
  %29 = sext i32 %27 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %11, %20, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %33) #4, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #4, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #4, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #4, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %11) #4, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %11) #4, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #4, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #4, !dbg !33
  %50 = shl nsw i32 %.decomposed, 8, !dbg !34
  %51 = mul i32 %21, 26624, !dbg !35
  %52 = add i32 %18, %50, !dbg !36
  %53 = add i32 %52, 13312, !dbg !37
  %54 = add i32 %53, %51, !dbg !38
  %55 = sext i32 %54 to i64, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !39
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %33) #4, !dbg !40
  %58 = fadd float %43, 0x3EE4F8B580000000, !dbg !41
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i1 = icmp eq i32 %61, 0, !dbg !42
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !42
  br i1 %.not.i1, label %68, label %63, !dbg !42

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !42

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !42

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !42
  %73 = bitcast i32 %35 to float, !dbg !25
  %74 = bitcast i32 %39 to float, !dbg !27
  %75 = fsub float %73, %74, !dbg !43
  %76 = bitcast i32 %34 to float, !dbg !25
  %77 = fsub float %76, %74, !dbg !43
  %78 = extractvalue { i32, i32 } %57, 1, !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = extractvalue { i32, i32 } %57, 0, !dbg !40
  %81 = bitcast i32 %80 to float, !dbg !40
  %82 = bitcast i32 %49 to float, !dbg !33
  %83 = bitcast i32 %46 to float, !dbg !31
  %84 = and i32 %14, 127, !dbg !14
  %85 = or disjoint i32 %84, 128, !dbg !14
  %86 = or disjoint i32 %13, %85, !dbg !15
  %87 = icmp slt i32 %86, 256, !dbg !16
  %88 = and i1 %11, %87, !dbg !24
  %89 = or disjoint i32 %13, %84, !dbg !15
  %90 = icmp slt i32 %89, 256, !dbg !16
  %91 = and i1 %11, %90, !dbg !24
  %92 = mul i32 %86, 26, !dbg !19
  %93 = add i32 %26, %92, !dbg !22
  %94 = mul i32 %89, 26, !dbg !19
  %95 = add i32 %26, %94, !dbg !22
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !44
  %97 = fmul float %77, %96, !dbg !45
  %98 = fmul float %75, %96, !dbg !45
  %99 = fmul float %97, %83, !dbg !46
  %100 = fmul float %98, %83, !dbg !46
  %101 = fadd float %99, %82, !dbg !47
  %102 = fadd float %100, %82, !dbg !47
  %103 = fcmp olt float %101, 0.000000e+00, !dbg !48
  %104 = fcmp olt float %102, 0.000000e+00, !dbg !48
  %105 = select i1 %103, float 0.000000e+00, float %101, !dbg !52
  %106 = select i1 %104, float 0.000000e+00, float %102, !dbg !52
  %107 = fadd float %105, %81, !dbg !53
  %108 = fadd float %106, %79, !dbg !53
  %109 = mul i32 %21, 13312, !dbg !54
  %110 = add i32 %109, %50, !dbg !55
  %111 = add i32 %110, %18, !dbg !56
  %112 = sext i32 %111 to i64, !dbg !57
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !57
  %114 = bitcast float %105 to i32, !dbg !58
  %115 = bitcast float %106 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 %33) #4, !dbg !58
  %116 = sext i32 %95 to i64, !dbg !59
  %117 = getelementptr float, ptr addrspace(1) %7, i64 %116, !dbg !59
  %118 = sext i32 %93 to i64, !dbg !59
  %119 = getelementptr float, ptr addrspace(1) %7, i64 %118, !dbg !59
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !60
  %121 = bitcast float %107 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !60
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !60
  %123 = bitcast float %108 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !60
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !60
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !60
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %117, i1 %91) #4, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %119, i1 %88) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr5l2xx4g4vgk3d3mtyespfnzmiqn6pw55levxvpisk5k5pdhkwx.py", directory: "inductor_cache/r5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 38, scope: !7)
!20 = !DILocation(line: 31, column: 48, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 43, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 61, scope: !7)
!25 = !DILocation(line: 31, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 48, scope: !7)
!35 = !DILocation(line: 36, column: 59, scope: !7)
!36 = !DILocation(line: 36, column: 39, scope: !7)
!37 = !DILocation(line: 36, column: 44, scope: !7)
!38 = !DILocation(line: 36, column: 53, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 64, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 26, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 45, scope: !7)
!55 = !DILocation(line: 51, column: 30, scope: !7)
!56 = !DILocation(line: 51, column: 39, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 51, column: 57, scope: !7)
!59 = !DILocation(line: 52, column: 25, scope: !7)
!60 = !DILocation(line: 52, column: 55, scope: !7)
!61 = !DILocation(line: 52, column: 4, scope: !7)
