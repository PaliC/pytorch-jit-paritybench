; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__weight_norm_interface_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !10
  %6 = bitcast i32 %5 to float, !dbg !10
  %7 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !11
  %8 = fmul float %6, %6, !dbg !12
  %9 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !13
  %.not.i = icmp eq i32 %9, 0, !dbg !13
  %10 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !13
  %.not1.i = icmp eq i32 %10, 0, !dbg !13
  br i1 %.not.i, label %16, label %11, !dbg !13

11:                                               ; preds = %4
  br i1 %.not1.i, label %14, label %12, !dbg !13

12:                                               ; preds = %11
  %13 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %8) #3, !dbg !13
  br label %__nv_sqrtf.exit, !dbg !13

14:                                               ; preds = %11
  %15 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %8) #3, !dbg !13
  br label %__nv_sqrtf.exit, !dbg !13

16:                                               ; preds = %4
  br i1 %.not1.i, label %19, label %17, !dbg !13

17:                                               ; preds = %16
  %18 = tail call float @llvm.nvvm.sqrt.rn.f(float %8) #3, !dbg !13
  br label %__nv_sqrtf.exit, !dbg !13

19:                                               ; preds = %16
  %20 = tail call float @llvm.nvvm.sqrt.approx.f(float %8) #3, !dbg !13
  br label %__nv_sqrtf.exit, !dbg !13

__nv_sqrtf.exit:                                  ; preds = %12, %14, %17, %19
  %.0.i = phi float [ %13, %12 ], [ %15, %14 ], [ %18, %17 ], [ %20, %19 ], !dbg !13
  %21 = bitcast i32 %7 to float, !dbg !11
  %22 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %.0.i) #3, !dbg !14
  %23 = fmul float %22, %6, !dbg !15
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %25 = and i32 %24, 31, !dbg !16
  %26 = icmp eq i32 %25, 0, !dbg !16
  %27 = bitcast float %.0.i to i32, !dbg !16
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %27, ptr addrspace(1) %2, i1 %26) #3, !dbg !16
  %28 = bitcast float %23 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %28, ptr addrspace(1) %3, i1 %26) #3, !dbg !17
  ret void, !dbg !18
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdxltc6wl36ynpbjlcnv7vwcfwhmo54e2v4dvrpnkrh36luy4ru.py", directory: "inductor_cache/pd")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_14, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_14", linkageName: "triton_poi_fused__weight_norm_interface_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 19, scope: !7)
!11 = !DILocation(line: 26, column: 19, scope: !7)
!12 = !DILocation(line: 28, column: 18, scope: !7)
!13 = !DILocation(line: 29, column: 26, scope: !7)
!14 = !DILocation(line: 30, column: 18, scope: !7)
!15 = !DILocation(line: 31, column: 18, scope: !7)
!16 = !DILocation(line: 32, column: 64, scope: !7)
!17 = !DILocation(line: 33, column: 64, scope: !7)
!18 = !DILocation(line: 33, column: 4, scope: !7)
