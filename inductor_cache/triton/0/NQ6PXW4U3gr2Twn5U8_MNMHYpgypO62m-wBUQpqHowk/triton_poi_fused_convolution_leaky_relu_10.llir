; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %.lobit3 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %.lobit3, 3, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %14, 16, !dbg !13
  %19 = or disjoint i32 %14, 20, !dbg !13
  %20 = or disjoint i32 %14, 24, !dbg !13
  %21 = or disjoint i32 %14, 28, !dbg !13
  %22 = icmp slt i32 %13, 36, !dbg !14
  %23 = icmp slt i32 %14, 36, !dbg !14
  %24 = icmp slt i32 %15, 36, !dbg !14
  %25 = icmp slt i32 %16, 36, !dbg !14
  %26 = icmp slt i32 %17, 36, !dbg !14
  %27 = icmp slt i32 %18, 36, !dbg !14
  %28 = icmp slt i32 %19, 36, !dbg !14
  %29 = icmp slt i32 %20, 36, !dbg !14
  %30 = icmp slt i32 %21, 36, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 5, !dbg !16
  %33 = shl i32 %9, 3, !dbg !17
  %34 = and i32 %33, 24, !dbg !17
  %35 = and i32 %9, 31, !dbg !17
  %36 = or disjoint i32 %32, %34, !dbg !18
  %37 = or disjoint i32 %36, 4, !dbg !18
  %38 = or disjoint i32 %32, %35, !dbg !18
  %39 = icmp slt i32 %36, 256, !dbg !19
  %40 = icmp slt i32 %38, 256, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %41 = sdiv i32 %.frozen, 9, !dbg !20
  %42 = mul i32 %41, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %.frozen4 = freeze i32 %15, !dbg !20
  %43 = sdiv i32 %.frozen4, 9, !dbg !20
  %44 = mul i32 %43, 9, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %44, !dbg !21
  %.frozen6 = freeze i32 %16, !dbg !20
  %45 = sdiv i32 %.frozen6, 9, !dbg !20
  %46 = mul i32 %45, 9, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %46, !dbg !21
  %.frozen8 = freeze i32 %17, !dbg !20
  %47 = sdiv i32 %.frozen8, 9, !dbg !20
  %48 = mul i32 %47, 9, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %48, !dbg !21
  %.frozen10 = freeze i32 %18, !dbg !20
  %49 = sdiv i32 %.frozen10, 9, !dbg !20
  %50 = mul i32 %49, 9, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %50, !dbg !21
  %.frozen12 = freeze i32 %19, !dbg !20
  %51 = sdiv i32 %.frozen12, 9, !dbg !20
  %52 = mul i32 %51, 9, !dbg !21
  %.decomposed13 = sub i32 %.frozen12, %52, !dbg !21
  %.frozen14 = freeze i32 %20, !dbg !20
  %53 = sdiv i32 %.frozen14, 9, !dbg !20
  %54 = mul i32 %53, 9, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %54, !dbg !21
  %.frozen16 = freeze i32 %21, !dbg !20
  %55 = sdiv i32 %.frozen16, 9, !dbg !20
  %56 = mul i32 %55, 9, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %56, !dbg !21
  %57 = shl i32 %13, 8, !dbg !22
  %58 = add i32 %36, %57, !dbg !23
  %59 = add i32 %57, %37, !dbg !23
  %60 = sext i32 %58 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !24
  %62 = sext i32 %59 to i64, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !24
  %64 = and i1 %22, %39, !dbg !25
  %65 = and i1 %23, %40, !dbg !25
  %66 = and i1 %24, %40, !dbg !25
  %67 = and i1 %25, %40, !dbg !25
  %68 = and i1 %26, %40, !dbg !25
  %69 = and i1 %27, %40, !dbg !25
  %70 = and i1 %28, %40, !dbg !25
  %71 = and i1 %29, %40, !dbg !25
  %72 = and i1 %30, %40, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %64) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %64) #2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = sext i32 %36 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !27
  %85 = sext i32 %37 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %39) #2, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %39) #2, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !28
  %97 = getelementptr i1, ptr addrspace(1) %2, i64 %60, !dbg !29
  %98 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !26
  %99 = insertelement <4 x i32> %98, i32 %75, i64 1, !dbg !26
  %100 = insertelement <4 x i32> %99, i32 %76, i64 2, !dbg !26
  %101 = insertelement <4 x i32> %100, i32 %77, i64 3, !dbg !26
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !26
  %103 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !28
  %104 = insertelement <4 x i32> %103, i32 %89, i64 1, !dbg !28
  %105 = insertelement <4 x i32> %104, i32 %90, i64 2, !dbg !28
  %106 = insertelement <4 x i32> %105, i32 %91, i64 3, !dbg !28
  %107 = bitcast <4 x i32> %106 to <4 x float>, !dbg !28
  %108 = fadd <4 x float> %102, %107, !dbg !30
  %109 = fcmp ogt <4 x float> %108, zeroinitializer, !dbg !31
  %110 = extractelement <4 x float> %108, i64 0, !dbg !32
  %111 = fmul float %110, 0x3F847AE140000000, !dbg !33
  %112 = extractelement <4 x float> %108, i64 1, !dbg !32
  %113 = fmul float %112, 0x3F847AE140000000, !dbg !33
  %114 = extractelement <4 x float> %108, i64 2, !dbg !32
  %115 = fmul float %114, 0x3F847AE140000000, !dbg !33
  %116 = extractelement <4 x float> %108, i64 3, !dbg !32
  %117 = fmul float %116, 0x3F847AE140000000, !dbg !33
  %118 = extractelement <4 x i1> %109, i64 0, !dbg !32
  %119 = select i1 %118, float %110, float %111, !dbg !32
  %120 = extractelement <4 x i1> %109, i64 1, !dbg !32
  %121 = select i1 %120, float %112, float %113, !dbg !32
  %122 = extractelement <4 x i1> %109, i64 2, !dbg !32
  %123 = select i1 %122, float %114, float %115, !dbg !32
  %124 = extractelement <4 x i1> %109, i64 3, !dbg !32
  %125 = select i1 %124, float %116, float %117, !dbg !32
  %126 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !26
  %127 = insertelement <4 x i32> %126, i32 %80, i64 1, !dbg !26
  %128 = insertelement <4 x i32> %127, i32 %81, i64 2, !dbg !26
  %129 = insertelement <4 x i32> %128, i32 %82, i64 3, !dbg !26
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !26
  %131 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !28
  %132 = insertelement <4 x i32> %131, i32 %94, i64 1, !dbg !28
  %133 = insertelement <4 x i32> %132, i32 %95, i64 2, !dbg !28
  %134 = insertelement <4 x i32> %133, i32 %96, i64 3, !dbg !28
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !28
  %136 = fadd <4 x float> %130, %135, !dbg !30
  %137 = fcmp ogt <4 x float> %136, zeroinitializer, !dbg !31
  %138 = extractelement <4 x float> %136, i64 0, !dbg !32
  %139 = fmul float %138, 0x3F847AE140000000, !dbg !33
  %140 = extractelement <4 x float> %136, i64 1, !dbg !32
  %141 = fmul float %140, 0x3F847AE140000000, !dbg !33
  %142 = extractelement <4 x float> %136, i64 2, !dbg !32
  %143 = fmul float %142, 0x3F847AE140000000, !dbg !33
  %144 = extractelement <4 x float> %136, i64 3, !dbg !32
  %145 = fmul float %144, 0x3F847AE140000000, !dbg !33
  %146 = extractelement <4 x i1> %137, i64 0, !dbg !32
  %147 = select i1 %146, float %138, float %139, !dbg !32
  %148 = extractelement <4 x i1> %137, i64 1, !dbg !32
  %149 = select i1 %148, float %140, float %141, !dbg !32
  %150 = extractelement <4 x i1> %137, i64 2, !dbg !32
  %151 = select i1 %150, float %142, float %143, !dbg !32
  %152 = extractelement <4 x i1> %137, i64 3, !dbg !32
  %153 = select i1 %152, float %144, float %145, !dbg !32
  %154 = zext <4 x i1> %109 to <4 x i8>, !dbg !34
  %155 = bitcast <4 x i8> %154 to i32, !dbg !34
  %156 = zext <4 x i1> %137 to <4 x i8>, !dbg !34
  %157 = bitcast <4 x i8> %156 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %157, ptr addrspace(1) %97, i1 %64) #2, !dbg !34
  %158 = mul i32 %38, 9, !dbg !35
  %159 = add i32 %158, %.decomposed, !dbg !36
  %160 = mul i32 %41, 2304, !dbg !37
  %161 = mul i32 %43, 2304, !dbg !37
  %162 = mul i32 %45, 2304, !dbg !37
  %163 = mul i32 %47, 2304, !dbg !37
  %164 = mul i32 %49, 2304, !dbg !37
  %165 = mul i32 %51, 2304, !dbg !37
  %166 = mul i32 %53, 2304, !dbg !37
  %167 = mul i32 %55, 2304, !dbg !37
  %168 = add i32 %159, %160, !dbg !38
  %169 = add i32 %161, %.decomposed5, !dbg !36
  %170 = add i32 %169, %158, !dbg !38
  %171 = add i32 %162, %.decomposed7, !dbg !36
  %172 = add i32 %171, %158, !dbg !38
  %173 = add i32 %163, %.decomposed9, !dbg !36
  %174 = add i32 %173, %158, !dbg !38
  %175 = add i32 %164, %.decomposed11, !dbg !36
  %176 = add i32 %175, %158, !dbg !38
  %177 = add i32 %165, %.decomposed13, !dbg !36
  %178 = add i32 %177, %158, !dbg !38
  %179 = add i32 %166, %.decomposed15, !dbg !36
  %180 = add i32 %179, %158, !dbg !38
  %181 = add i32 %167, %.decomposed17, !dbg !36
  %182 = add i32 %181, %158, !dbg !38
  %183 = sext i32 %168 to i64, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !39
  %185 = sext i32 %170 to i64, !dbg !39
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !39
  %187 = sext i32 %172 to i64, !dbg !39
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !39
  %189 = sext i32 %174 to i64, !dbg !39
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !39
  %191 = sext i32 %176 to i64, !dbg !39
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !39
  %193 = sext i32 %178 to i64, !dbg !39
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !39
  %195 = sext i32 %180 to i64, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !39
  %197 = sext i32 %182 to i64, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !39
  %199 = and i32 %33, 1016, !dbg !40
  %200 = and i32 %9, 127, !dbg !40
  %201 = lshr i32 %33, 5, !dbg !40
  %202 = and i32 %201, 31, !dbg !40
  %203 = add nuw nsw i32 %202, %199, !dbg !40
  %204 = zext nneg i32 %203 to i64, !dbg !40
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !40
  %206 = bitcast float %119 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !40
  %207 = or disjoint i32 %199, 1, !dbg !40
  %208 = add nuw nsw i32 %207, %202, !dbg !40
  %209 = zext nneg i32 %208 to i64, !dbg !40
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %209, !dbg !40
  %211 = bitcast float %121 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !40
  %212 = or disjoint i32 %199, 2, !dbg !40
  %213 = add nuw nsw i32 %212, %202, !dbg !40
  %214 = zext nneg i32 %213 to i64, !dbg !40
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %214, !dbg !40
  %216 = bitcast float %123 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !40
  %217 = or disjoint i32 %199, 3, !dbg !40
  %218 = add nuw nsw i32 %217, %202, !dbg !40
  %219 = zext nneg i32 %218 to i64, !dbg !40
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !40
  %221 = bitcast float %125 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !40
  %222 = or disjoint i32 %199, 4, !dbg !40
  %223 = add nuw nsw i32 %222, %202, !dbg !40
  %224 = zext nneg i32 %223 to i64, !dbg !40
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %224, !dbg !40
  %226 = bitcast float %147 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !40
  %227 = or disjoint i32 %199, 5, !dbg !40
  %228 = add nuw nsw i32 %227, %202, !dbg !40
  %229 = zext nneg i32 %228 to i64, !dbg !40
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !40
  %231 = bitcast float %149 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !40
  %232 = or disjoint i32 %199, 6, !dbg !40
  %233 = add nuw nsw i32 %232, %202, !dbg !40
  %234 = zext nneg i32 %233 to i64, !dbg !40
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !40
  %236 = bitcast float %151 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !40
  %237 = or disjoint i32 %199, 7, !dbg !40
  %238 = add nuw nsw i32 %237, %202, !dbg !40
  %239 = zext nneg i32 %238 to i64, !dbg !40
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !40
  %241 = bitcast float %153 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %242 = lshr i32 %200, 5, !dbg !40
  %243 = add nuw nsw i32 %242, %200, !dbg !40
  %244 = zext nneg i32 %243 to i64, !dbg !40
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !40
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !40
  %247 = or disjoint i32 %200, 128, !dbg !40
  %248 = lshr i32 %247, 5, !dbg !40
  %249 = add nuw nsw i32 %248, %247, !dbg !40
  %250 = zext nneg i32 %249 to i64, !dbg !40
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %250, !dbg !40
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !40
  %253 = or disjoint i32 %200, 256, !dbg !40
  %254 = lshr i32 %253, 5, !dbg !40
  %255 = add nuw nsw i32 %254, %253, !dbg !40
  %256 = zext nneg i32 %255 to i64, !dbg !40
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %256, !dbg !40
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !40
  %259 = or disjoint i32 %200, 384, !dbg !40
  %260 = lshr i32 %259, 5, !dbg !40
  %261 = add nuw nsw i32 %260, %259, !dbg !40
  %262 = zext nneg i32 %261 to i64, !dbg !40
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !40
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !40
  %265 = or disjoint i32 %200, 512, !dbg !40
  %266 = lshr i32 %265, 5, !dbg !40
  %267 = add nuw nsw i32 %266, %265, !dbg !40
  %268 = zext nneg i32 %267 to i64, !dbg !40
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %268, !dbg !40
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !40
  %271 = or disjoint i32 %200, 640, !dbg !40
  %272 = lshr i32 %271, 5, !dbg !40
  %273 = add nuw nsw i32 %272, %271, !dbg !40
  %274 = zext nneg i32 %273 to i64, !dbg !40
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !40
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !40
  %277 = or disjoint i32 %200, 768, !dbg !40
  %278 = lshr i32 %277, 5, !dbg !40
  %279 = add nuw nsw i32 %278, %277, !dbg !40
  %280 = zext nneg i32 %279 to i64, !dbg !40
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !40
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !40
  %283 = or disjoint i32 %200, 896, !dbg !40
  %284 = lshr i32 %283, 5, !dbg !40
  %285 = add nuw nsw i32 %284, %283, !dbg !40
  %286 = zext nneg i32 %285 to i64, !dbg !40
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !40
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %184, i1 %65) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %252, ptr addrspace(1) %186, i1 %66) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %258, ptr addrspace(1) %188, i1 %67) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %264, ptr addrspace(1) %190, i1 %68) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %192, i1 %69) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %194, i1 %70) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %196, i1 %71) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %198, i1 %72) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chl5tpewny5oofnkzkepn72of4kbpub3km7rdog2pscsj5zpcd2k.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_10", linkageName: "triton_poi_fused_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 32, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 42, scope: !7)
!38 = !DILocation(line: 41, column: 37, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 53, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
