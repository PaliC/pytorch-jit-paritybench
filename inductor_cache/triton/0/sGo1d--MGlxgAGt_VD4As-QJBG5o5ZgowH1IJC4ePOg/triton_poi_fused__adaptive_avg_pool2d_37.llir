; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_37(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = sdiv i32 %9, 6, !dbg !14
  %18 = sdiv i32 %11, 6, !dbg !14
  %19 = sdiv i32 %13, 6, !dbg !14
  %20 = sdiv i32 %15, 6, !dbg !14
  %21 = srem i32 %10, 6, !dbg !15
  %22 = srem i32 %12, 6, !dbg !15
  %23 = srem i32 %14, 6, !dbg !15
  %24 = srem i32 %16, 6, !dbg !15
  %25 = sdiv i32 %9, 36, !dbg !16
  %26 = sdiv i32 %13, 36, !dbg !16
  %.tr55 = trunc nsw i32 %21 to i8, !dbg !17
  %.lhs.trunc17 = shl nsw i8 %.tr55, 2, !dbg !17
  %.tr57 = trunc nsw i32 %22 to i8, !dbg !17
  %.lhs.trunc21 = shl nsw i8 %.tr57, 2, !dbg !17
  %.tr59 = trunc nsw i32 %23 to i8, !dbg !17
  %.lhs.trunc25 = shl nsw i8 %.tr59, 2, !dbg !17
  %.tr61 = trunc nsw i32 %24 to i8, !dbg !17
  %.lhs.trunc29 = shl nsw i8 %.tr61, 2, !dbg !17
  %27 = shl nsw i8 %.tr55, 3, !dbg !18
  %.lhs.trunc33 = add nsw i8 %27, 13, !dbg !18
  %28 = insertelement <2 x i8> poison, i8 %.lhs.trunc17, i64 0, !dbg !17
  %29 = insertelement <2 x i8> %28, i8 %.lhs.trunc33, i64 1, !dbg !17
  %30 = sdiv <2 x i8> %29, <i8 3, i8 6>, !dbg !17
  %31 = extractelement <2 x i8> %30, i64 0, !dbg !19
  %.sext18 = sext i8 %31 to i32, !dbg !17
  %32 = extractelement <2 x i8> %30, i64 1, !dbg !19
  %.sext34 = sext i8 %32 to i32, !dbg !18
  %33 = shl nsw i8 %.tr57, 3, !dbg !18
  %.lhs.trunc37 = add nsw i8 %33, 13, !dbg !18
  %34 = insertelement <2 x i8> poison, i8 %.lhs.trunc21, i64 0, !dbg !17
  %35 = insertelement <2 x i8> %34, i8 %.lhs.trunc37, i64 1, !dbg !17
  %36 = sdiv <2 x i8> %35, <i8 3, i8 6>, !dbg !17
  %37 = extractelement <2 x i8> %36, i64 0, !dbg !19
  %.sext22 = sext i8 %37 to i32, !dbg !17
  %38 = extractelement <2 x i8> %36, i64 1, !dbg !19
  %.sext38 = sext i8 %38 to i32, !dbg !18
  %39 = shl nsw i8 %.tr59, 3, !dbg !18
  %.lhs.trunc41 = add nsw i8 %39, 13, !dbg !18
  %40 = insertelement <2 x i8> poison, i8 %.lhs.trunc25, i64 0, !dbg !17
  %41 = insertelement <2 x i8> %40, i8 %.lhs.trunc41, i64 1, !dbg !17
  %42 = sdiv <2 x i8> %41, <i8 3, i8 6>, !dbg !17
  %43 = extractelement <2 x i8> %42, i64 0, !dbg !19
  %.sext26 = sext i8 %43 to i32, !dbg !17
  %44 = extractelement <2 x i8> %42, i64 1, !dbg !19
  %.sext42 = sext i8 %44 to i32, !dbg !18
  %45 = shl nsw i8 %.tr61, 3, !dbg !18
  %.lhs.trunc45 = add nsw i8 %45, 13, !dbg !18
  %46 = insertelement <2 x i8> poison, i8 %.lhs.trunc29, i64 0, !dbg !17
  %47 = insertelement <2 x i8> %46, i8 %.lhs.trunc45, i64 1, !dbg !17
  %48 = sdiv <2 x i8> %47, <i8 3, i8 6>, !dbg !17
  %49 = extractelement <2 x i8> %48, i64 0, !dbg !19
  %.sext30 = sext i8 %49 to i32, !dbg !17
  %50 = extractelement <2 x i8> %48, i64 1, !dbg !19
  %.sext46 = sext i8 %50 to i32, !dbg !18
  %51 = icmp slt i8 %31, %32, !dbg !19
  %52 = icmp slt i8 %37, %38, !dbg !19
  %53 = icmp slt i8 %43, %44, !dbg !19
  %54 = icmp slt i8 %49, %50, !dbg !19
  %55 = shl i32 %25, 6, !dbg !20
  %56 = shl i32 %26, 6, !dbg !20
  %57 = add nsw i32 %.sext18, 1, !dbg !21
  %58 = add nsw i32 %.sext22, 1, !dbg !21
  %59 = add nsw i32 %.sext26, 1, !dbg !21
  %60 = add nsw i32 %.sext30, 1, !dbg !21
  %61 = icmp slt i32 %57, %.sext34, !dbg !22
  %62 = icmp slt i32 %58, %.sext38, !dbg !22
  %63 = icmp slt i32 %59, %.sext42, !dbg !22
  %64 = icmp slt i32 %60, %.sext46, !dbg !22
  %65 = add nsw i32 %.sext18, 2, !dbg !23
  %66 = add nsw i32 %.sext22, 2, !dbg !23
  %67 = add nsw i32 %.sext26, 2, !dbg !23
  %68 = add nsw i32 %.sext30, 2, !dbg !23
  %69 = icmp slt i32 %65, %.sext34, !dbg !24
  %70 = icmp slt i32 %66, %.sext38, !dbg !24
  %71 = icmp slt i32 %67, %.sext42, !dbg !24
  %72 = icmp slt i32 %68, %.sext46, !dbg !24
  %73 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %74 = insertelement <2 x i32> %73, i32 %17, i64 1, !dbg !15
  %75 = srem <2 x i32> %74, splat (i32 6), !dbg !15
  %76 = trunc nsw <2 x i32> %75 to <2 x i8>, !dbg !17
  %77 = shl nsw <2 x i8> %76, splat (i8 2), !dbg !17
  %78 = sdiv <2 x i8> %77, splat (i8 3), !dbg !17
  %79 = shl nsw <2 x i8> %76, splat (i8 3), !dbg !18
  %80 = add nsw <2 x i8> %79, splat (i8 13), !dbg !18
  %81 = sdiv <2 x i8> %80, splat (i8 6), !dbg !18
  %82 = sext <2 x i8> %78 to <2 x i32>, !dbg !17
  %83 = icmp slt <2 x i8> %78, %81, !dbg !19
  %84 = extractelement <2 x i1> %83, i64 0, !dbg !25
  %85 = extractelement <2 x i1> %83, i64 1, !dbg !25
  %86 = and i1 %84, %85, !dbg !25
  %87 = and i1 %51, %85, !dbg !25
  %88 = extractelement <2 x i32> %82, i64 1, !dbg !26
  %89 = shl nsw i32 %88, 3, !dbg !26
  %90 = add i32 %89, %55, !dbg !27
  %91 = extractelement <2 x i32> %82, i64 0, !dbg !28
  %92 = add i32 %90, %91, !dbg !29
  %93 = add i32 %90, %.sext18, !dbg !29
  %94 = sext i32 %92 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !30
  %96 = sext i32 %93 to i64, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %86, i32 0, i1 %86) #1, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %87, i32 0, i1 %87) #1, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = and i1 %61, %85, !dbg !32
  %103 = or disjoint i32 %89, 1, !dbg !33
  %104 = add i32 %103, %55, !dbg !34
  %105 = add i32 %104, %91, !dbg !35
  %106 = add i32 %104, %.sext18, !dbg !35
  %107 = sext i32 %105 to i64, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !36
  %109 = sext i32 %106 to i64, !dbg !36
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !36
  %111 = add nsw <2 x i32> %82, splat (i32 2), !dbg !23
  %112 = sext <2 x i8> %81 to <2 x i32>, !dbg !24
  %113 = icmp slt <2 x i32> %111, %112, !dbg !24
  %114 = extractelement <2 x i1> %113, i64 0, !dbg !37
  %115 = and i1 %85, %114, !dbg !38
  %116 = and i1 %69, %85, !dbg !38
  %117 = or disjoint i32 %89, 2, !dbg !39
  %118 = add i32 %117, %55, !dbg !40
  %119 = add i32 %118, %91, !dbg !41
  %120 = add i32 %118, %.sext18, !dbg !41
  %121 = sext i32 %119 to i64, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !42
  %123 = sext i32 %120 to i64, !dbg !42
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !42
  %125 = add nsw <2 x i32> %82, splat (i32 1), !dbg !21
  %126 = sext <2 x i8> %81 to <2 x i32>, !dbg !22
  %127 = icmp slt <2 x i32> %125, %126, !dbg !22
  %128 = extractelement <2 x i1> %127, i64 0, !dbg !43
  %129 = and i1 %85, %128, !dbg !32
  %130 = extractelement <2 x i1> %127, i64 1, !dbg !44
  %131 = and i1 %84, %130, !dbg !45
  %132 = and i1 %51, %130, !dbg !45
  %133 = add i32 %90, 8, !dbg !46
  %134 = add i32 %133, %91, !dbg !47
  %135 = add i32 %133, %.sext18, !dbg !47
  %136 = sext i32 %134 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !48
  %138 = sext i32 %135 to i64, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !48
  %140 = and i1 %128, %130, !dbg !49
  %141 = and i1 %61, %130, !dbg !49
  %142 = add i32 %90, 9, !dbg !50
  %143 = add i32 %142, %91, !dbg !51
  %144 = add i32 %142, %.sext18, !dbg !51
  %145 = sext i32 %143 to i64, !dbg !52
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !52
  %147 = sext i32 %144 to i64, !dbg !52
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !52
  %149 = and i1 %114, %130, !dbg !44
  %150 = and i1 %69, %130, !dbg !44
  %151 = add i32 %90, 10, !dbg !53
  %152 = add i32 %151, %91, !dbg !54
  %153 = add i32 %151, %.sext18, !dbg !54
  %154 = sext i32 %152 to i64, !dbg !55
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !55
  %156 = sext i32 %153 to i64, !dbg !55
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !55
  %158 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %159 = insertelement <2 x i32> %158, i32 %18, i64 1, !dbg !15
  %160 = srem <2 x i32> %159, splat (i32 6), !dbg !15
  %161 = trunc nsw <2 x i32> %160 to <2 x i8>, !dbg !17
  %162 = shl nsw <2 x i8> %161, splat (i8 2), !dbg !17
  %163 = sdiv <2 x i8> %162, splat (i8 3), !dbg !17
  %164 = shl nsw <2 x i8> %161, splat (i8 3), !dbg !18
  %165 = add nsw <2 x i8> %164, splat (i8 13), !dbg !18
  %166 = sdiv <2 x i8> %165, splat (i8 6), !dbg !18
  %167 = sext <2 x i8> %163 to <2 x i32>, !dbg !17
  %168 = icmp slt <2 x i8> %163, %166, !dbg !19
  %169 = extractelement <2 x i1> %168, i64 0, !dbg !25
  %170 = extractelement <2 x i1> %168, i64 1, !dbg !25
  %171 = and i1 %169, %170, !dbg !25
  %172 = and i1 %52, %170, !dbg !25
  %173 = extractelement <2 x i32> %167, i64 1, !dbg !26
  %174 = shl nsw i32 %173, 3, !dbg !26
  %175 = add i32 %55, %174, !dbg !27
  %176 = extractelement <2 x i32> %167, i64 0, !dbg !28
  %177 = add i32 %175, %176, !dbg !29
  %178 = add i32 %175, %.sext22, !dbg !29
  %179 = sext i32 %177 to i64, !dbg !30
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !30
  %181 = sext i32 %178 to i64, !dbg !30
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !30
  %183 = and i1 %170, %62, !dbg !32
  %184 = or disjoint i32 %174, 1, !dbg !33
  %185 = add i32 %55, %184, !dbg !34
  %186 = add i32 %185, %176, !dbg !35
  %187 = add i32 %185, %.sext22, !dbg !35
  %188 = sext i32 %186 to i64, !dbg !36
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !36
  %190 = sext i32 %187 to i64, !dbg !36
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !36
  %192 = add nsw <2 x i32> %167, splat (i32 2), !dbg !23
  %193 = sext <2 x i8> %166 to <2 x i32>, !dbg !24
  %194 = icmp slt <2 x i32> %192, %193, !dbg !24
  %195 = extractelement <2 x i1> %194, i64 0, !dbg !37
  %196 = and i1 %170, %195, !dbg !38
  %197 = and i1 %170, %70, !dbg !38
  %198 = or disjoint i32 %174, 2, !dbg !39
  %199 = add i32 %55, %198, !dbg !40
  %200 = add i32 %199, %176, !dbg !41
  %201 = add i32 %199, %.sext22, !dbg !41
  %202 = sext i32 %200 to i64, !dbg !42
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !42
  %204 = sext i32 %201 to i64, !dbg !42
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !42
  %206 = add nsw <2 x i32> %167, splat (i32 1), !dbg !21
  %207 = sext <2 x i8> %166 to <2 x i32>, !dbg !22
  %208 = icmp slt <2 x i32> %206, %207, !dbg !22
  %209 = extractelement <2 x i1> %208, i64 0, !dbg !43
  %210 = and i1 %170, %209, !dbg !32
  %211 = extractelement <2 x i1> %208, i64 1, !dbg !44
  %212 = and i1 %169, %211, !dbg !45
  %213 = and i1 %52, %211, !dbg !45
  %214 = add i32 %175, 8, !dbg !46
  %215 = add i32 %214, %176, !dbg !47
  %216 = add i32 %214, %.sext22, !dbg !47
  %217 = sext i32 %215 to i64, !dbg !48
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !48
  %219 = sext i32 %216 to i64, !dbg !48
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !48
  %221 = and i1 %209, %211, !dbg !49
  %222 = and i1 %62, %211, !dbg !49
  %223 = add i32 %175, 9, !dbg !50
  %224 = add i32 %223, %176, !dbg !51
  %225 = add i32 %223, %.sext22, !dbg !51
  %226 = sext i32 %224 to i64, !dbg !52
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !52
  %228 = sext i32 %225 to i64, !dbg !52
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !52
  %230 = and i1 %195, %211, !dbg !44
  %231 = and i1 %70, %211, !dbg !44
  %232 = add i32 %175, 10, !dbg !53
  %233 = add i32 %232, %176, !dbg !54
  %234 = add i32 %232, %.sext22, !dbg !54
  %235 = sext i32 %233 to i64, !dbg !55
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !55
  %237 = sext i32 %234 to i64, !dbg !55
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !55
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %171, i32 0, i1 %171) #1, !dbg !31
  %240 = bitcast i32 %239 to float, !dbg !31
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %172, i32 0, i1 %172) #1, !dbg !31
  %242 = bitcast i32 %241 to float, !dbg !31
  %243 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %244 = insertelement <2 x i32> %243, i32 %19, i64 1, !dbg !15
  %245 = srem <2 x i32> %244, splat (i32 6), !dbg !15
  %246 = trunc nsw <2 x i32> %245 to <2 x i8>, !dbg !17
  %247 = shl nsw <2 x i8> %246, splat (i8 2), !dbg !17
  %248 = sdiv <2 x i8> %247, splat (i8 3), !dbg !17
  %249 = shl nsw <2 x i8> %246, splat (i8 3), !dbg !18
  %250 = add nsw <2 x i8> %249, splat (i8 13), !dbg !18
  %251 = sdiv <2 x i8> %250, splat (i8 6), !dbg !18
  %252 = sext <2 x i8> %248 to <2 x i32>, !dbg !17
  %253 = icmp slt <2 x i8> %248, %251, !dbg !19
  %254 = extractelement <2 x i1> %253, i64 0, !dbg !25
  %255 = extractelement <2 x i1> %253, i64 1, !dbg !25
  %256 = and i1 %254, %255, !dbg !25
  %257 = and i1 %53, %255, !dbg !25
  %258 = extractelement <2 x i32> %252, i64 1, !dbg !26
  %259 = shl nsw i32 %258, 3, !dbg !26
  %260 = add i32 %259, %56, !dbg !27
  %261 = extractelement <2 x i32> %252, i64 0, !dbg !28
  %262 = add i32 %260, %261, !dbg !29
  %263 = add i32 %260, %.sext26, !dbg !29
  %264 = sext i32 %262 to i64, !dbg !30
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !30
  %266 = sext i32 %263 to i64, !dbg !30
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !30
  %268 = and i1 %255, %63, !dbg !32
  %269 = or disjoint i32 %259, 1, !dbg !33
  %270 = add i32 %269, %56, !dbg !34
  %271 = add i32 %270, %261, !dbg !35
  %272 = add i32 %270, %.sext26, !dbg !35
  %273 = sext i32 %271 to i64, !dbg !36
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !36
  %275 = sext i32 %272 to i64, !dbg !36
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !36
  %277 = add nsw <2 x i32> %252, splat (i32 2), !dbg !23
  %278 = sext <2 x i8> %251 to <2 x i32>, !dbg !24
  %279 = icmp slt <2 x i32> %277, %278, !dbg !24
  %280 = extractelement <2 x i1> %279, i64 0, !dbg !37
  %281 = and i1 %255, %280, !dbg !38
  %282 = and i1 %255, %71, !dbg !38
  %283 = or disjoint i32 %259, 2, !dbg !39
  %284 = add i32 %283, %56, !dbg !40
  %285 = add i32 %284, %261, !dbg !41
  %286 = add i32 %284, %.sext26, !dbg !41
  %287 = sext i32 %285 to i64, !dbg !42
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !42
  %289 = sext i32 %286 to i64, !dbg !42
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !42
  %291 = add nsw <2 x i32> %252, splat (i32 1), !dbg !21
  %292 = sext <2 x i8> %251 to <2 x i32>, !dbg !22
  %293 = icmp slt <2 x i32> %291, %292, !dbg !22
  %294 = extractelement <2 x i1> %293, i64 0, !dbg !43
  %295 = and i1 %255, %294, !dbg !32
  %296 = extractelement <2 x i1> %293, i64 1, !dbg !44
  %297 = and i1 %254, %296, !dbg !45
  %298 = and i1 %53, %296, !dbg !45
  %299 = add i32 %260, 8, !dbg !46
  %300 = add i32 %299, %261, !dbg !47
  %301 = add i32 %299, %.sext26, !dbg !47
  %302 = sext i32 %300 to i64, !dbg !48
  %303 = getelementptr float, ptr addrspace(1) %0, i64 %302, !dbg !48
  %304 = sext i32 %301 to i64, !dbg !48
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !48
  %306 = and i1 %294, %296, !dbg !49
  %307 = and i1 %63, %296, !dbg !49
  %308 = add i32 %260, 9, !dbg !50
  %309 = add i32 %308, %261, !dbg !51
  %310 = add i32 %308, %.sext26, !dbg !51
  %311 = sext i32 %309 to i64, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %0, i64 %311, !dbg !52
  %313 = sext i32 %310 to i64, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %0, i64 %313, !dbg !52
  %315 = and i1 %280, %296, !dbg !44
  %316 = and i1 %71, %296, !dbg !44
  %317 = add i32 %260, 10, !dbg !53
  %318 = add i32 %317, %261, !dbg !54
  %319 = add i32 %317, %.sext26, !dbg !54
  %320 = sext i32 %318 to i64, !dbg !55
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !55
  %322 = sext i32 %319 to i64, !dbg !55
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !55
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %256, i32 0, i1 %256) #1, !dbg !31
  %325 = bitcast i32 %324 to float, !dbg !31
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %257, i32 0, i1 %257) #1, !dbg !31
  %327 = bitcast i32 %326 to float, !dbg !31
  %328 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %329 = insertelement <2 x i32> %328, i32 %20, i64 1, !dbg !15
  %330 = srem <2 x i32> %329, splat (i32 6), !dbg !15
  %331 = trunc nsw <2 x i32> %330 to <2 x i8>, !dbg !17
  %332 = shl nsw <2 x i8> %331, splat (i8 2), !dbg !17
  %333 = sdiv <2 x i8> %332, splat (i8 3), !dbg !17
  %334 = shl nsw <2 x i8> %331, splat (i8 3), !dbg !18
  %335 = add nsw <2 x i8> %334, splat (i8 13), !dbg !18
  %336 = sdiv <2 x i8> %335, splat (i8 6), !dbg !18
  %337 = sext <2 x i8> %333 to <2 x i32>, !dbg !17
  %338 = icmp slt <2 x i8> %333, %336, !dbg !19
  %339 = extractelement <2 x i1> %338, i64 0, !dbg !25
  %340 = extractelement <2 x i1> %338, i64 1, !dbg !25
  %341 = and i1 %339, %340, !dbg !25
  %342 = and i1 %54, %340, !dbg !25
  %343 = extractelement <2 x i32> %337, i64 1, !dbg !26
  %344 = shl nsw i32 %343, 3, !dbg !26
  %345 = add i32 %344, %56, !dbg !27
  %346 = extractelement <2 x i32> %337, i64 0, !dbg !28
  %347 = add i32 %345, %346, !dbg !29
  %348 = add i32 %345, %.sext30, !dbg !29
  %349 = sext i32 %347 to i64, !dbg !30
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !30
  %351 = sext i32 %348 to i64, !dbg !30
  %352 = getelementptr float, ptr addrspace(1) %0, i64 %351, !dbg !30
  %353 = and i1 %340, %64, !dbg !32
  %354 = or disjoint i32 %344, 1, !dbg !33
  %355 = add i32 %354, %56, !dbg !34
  %356 = add i32 %355, %346, !dbg !35
  %357 = add i32 %355, %.sext30, !dbg !35
  %358 = sext i32 %356 to i64, !dbg !36
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !36
  %360 = sext i32 %357 to i64, !dbg !36
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !36
  %362 = add nsw <2 x i32> %337, splat (i32 2), !dbg !23
  %363 = sext <2 x i8> %336 to <2 x i32>, !dbg !24
  %364 = icmp slt <2 x i32> %362, %363, !dbg !24
  %365 = extractelement <2 x i1> %364, i64 0, !dbg !37
  %366 = and i1 %340, %365, !dbg !38
  %367 = and i1 %340, %72, !dbg !38
  %368 = or disjoint i32 %344, 2, !dbg !39
  %369 = add i32 %368, %56, !dbg !40
  %370 = add i32 %369, %346, !dbg !41
  %371 = add i32 %369, %.sext30, !dbg !41
  %372 = sext i32 %370 to i64, !dbg !42
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !42
  %374 = sext i32 %371 to i64, !dbg !42
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !42
  %376 = add nsw <2 x i32> %337, splat (i32 1), !dbg !21
  %377 = sext <2 x i8> %336 to <2 x i32>, !dbg !22
  %378 = icmp slt <2 x i32> %376, %377, !dbg !22
  %379 = extractelement <2 x i1> %378, i64 0, !dbg !43
  %380 = and i1 %340, %379, !dbg !32
  %381 = extractelement <2 x i1> %378, i64 1, !dbg !44
  %382 = and i1 %339, %381, !dbg !45
  %383 = and i1 %54, %381, !dbg !45
  %384 = add i32 %345, 8, !dbg !46
  %385 = add i32 %384, %346, !dbg !47
  %386 = add i32 %384, %.sext30, !dbg !47
  %387 = sext i32 %385 to i64, !dbg !48
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %387, !dbg !48
  %389 = sext i32 %386 to i64, !dbg !48
  %390 = getelementptr float, ptr addrspace(1) %0, i64 %389, !dbg !48
  %391 = and i1 %379, %381, !dbg !49
  %392 = and i1 %64, %381, !dbg !49
  %393 = add i32 %345, 9, !dbg !50
  %394 = add i32 %393, %346, !dbg !51
  %395 = add i32 %393, %.sext30, !dbg !51
  %396 = sext i32 %394 to i64, !dbg !52
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !52
  %398 = sext i32 %395 to i64, !dbg !52
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !52
  %400 = and i1 %365, %381, !dbg !44
  %401 = and i1 %72, %381, !dbg !44
  %402 = add i32 %345, 10, !dbg !53
  %403 = add i32 %402, %346, !dbg !54
  %404 = add i32 %402, %.sext30, !dbg !54
  %405 = sext i32 %403 to i64, !dbg !55
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !55
  %407 = sext i32 %404 to i64, !dbg !55
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !55
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %350, i1 %341, i32 0, i1 %341) #1, !dbg !31
  %410 = bitcast i32 %409 to float, !dbg !31
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %352, i1 %342, i32 0, i1 %342) #1, !dbg !31
  %412 = bitcast i32 %411 to float, !dbg !31
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %129, i32 0, i1 %129) #1, !dbg !56
  %414 = bitcast i32 %413 to float, !dbg !56
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %102, i32 0, i1 %102) #1, !dbg !56
  %416 = bitcast i32 %415 to float, !dbg !56
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %210, i32 0, i1 %210) #1, !dbg !56
  %418 = bitcast i32 %417 to float, !dbg !56
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %183, i32 0, i1 %183) #1, !dbg !56
  %420 = bitcast i32 %419 to float, !dbg !56
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %295, i32 0, i1 %295) #1, !dbg !56
  %422 = bitcast i32 %421 to float, !dbg !56
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %268, i32 0, i1 %268) #1, !dbg !56
  %424 = bitcast i32 %423 to float, !dbg !56
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %380, i32 0, i1 %380) #1, !dbg !56
  %426 = bitcast i32 %425 to float, !dbg !56
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %353, i32 0, i1 %353) #1, !dbg !56
  %428 = bitcast i32 %427 to float, !dbg !56
  %429 = fadd float %99, %414, !dbg !57
  %430 = fadd float %101, %416, !dbg !57
  %431 = fadd float %240, %418, !dbg !57
  %432 = fadd float %242, %420, !dbg !57
  %433 = fadd float %325, %422, !dbg !57
  %434 = fadd float %327, %424, !dbg !57
  %435 = fadd float %410, %426, !dbg !57
  %436 = fadd float %412, %428, !dbg !57
  %437 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %115, i32 0, i1 %115) #1, !dbg !58
  %438 = bitcast i32 %437 to float, !dbg !58
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %116, i32 0, i1 %116) #1, !dbg !58
  %440 = bitcast i32 %439 to float, !dbg !58
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %196, i32 0, i1 %196) #1, !dbg !58
  %442 = bitcast i32 %441 to float, !dbg !58
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %197, i32 0, i1 %197) #1, !dbg !58
  %444 = bitcast i32 %443 to float, !dbg !58
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %281, i32 0, i1 %281) #1, !dbg !58
  %446 = bitcast i32 %445 to float, !dbg !58
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %282, i32 0, i1 %282) #1, !dbg !58
  %448 = bitcast i32 %447 to float, !dbg !58
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %373, i1 %366, i32 0, i1 %366) #1, !dbg !58
  %450 = bitcast i32 %449 to float, !dbg !58
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %367, i32 0, i1 %367) #1, !dbg !58
  %452 = bitcast i32 %451 to float, !dbg !58
  %453 = fadd float %429, %438, !dbg !59
  %454 = fadd float %430, %440, !dbg !59
  %455 = fadd float %431, %442, !dbg !59
  %456 = fadd float %432, %444, !dbg !59
  %457 = fadd float %433, %446, !dbg !59
  %458 = fadd float %434, %448, !dbg !59
  %459 = fadd float %435, %450, !dbg !59
  %460 = fadd float %436, %452, !dbg !59
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %131, i32 0, i1 %131) #1, !dbg !60
  %462 = bitcast i32 %461 to float, !dbg !60
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %132, i32 0, i1 %132) #1, !dbg !60
  %464 = bitcast i32 %463 to float, !dbg !60
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %212, i32 0, i1 %212) #1, !dbg !60
  %466 = bitcast i32 %465 to float, !dbg !60
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %213, i32 0, i1 %213) #1, !dbg !60
  %468 = bitcast i32 %467 to float, !dbg !60
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %297, i32 0, i1 %297) #1, !dbg !60
  %470 = bitcast i32 %469 to float, !dbg !60
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %298, i32 0, i1 %298) #1, !dbg !60
  %472 = bitcast i32 %471 to float, !dbg !60
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %382, i32 0, i1 %382) #1, !dbg !60
  %474 = bitcast i32 %473 to float, !dbg !60
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %383, i32 0, i1 %383) #1, !dbg !60
  %476 = bitcast i32 %475 to float, !dbg !60
  %477 = fadd float %453, %462, !dbg !61
  %478 = fadd float %454, %464, !dbg !61
  %479 = fadd float %455, %466, !dbg !61
  %480 = fadd float %456, %468, !dbg !61
  %481 = fadd float %457, %470, !dbg !61
  %482 = fadd float %458, %472, !dbg !61
  %483 = fadd float %459, %474, !dbg !61
  %484 = fadd float %460, %476, !dbg !61
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %140, i32 0, i1 %140) #1, !dbg !62
  %486 = bitcast i32 %485 to float, !dbg !62
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %141, i32 0, i1 %141) #1, !dbg !62
  %488 = bitcast i32 %487 to float, !dbg !62
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %221, i32 0, i1 %221) #1, !dbg !62
  %490 = bitcast i32 %489 to float, !dbg !62
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %222, i32 0, i1 %222) #1, !dbg !62
  %492 = bitcast i32 %491 to float, !dbg !62
  %493 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %306, i32 0, i1 %306) #1, !dbg !62
  %494 = bitcast i32 %493 to float, !dbg !62
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %307, i32 0, i1 %307) #1, !dbg !62
  %496 = bitcast i32 %495 to float, !dbg !62
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %397, i1 %391, i32 0, i1 %391) #1, !dbg !62
  %498 = bitcast i32 %497 to float, !dbg !62
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %399, i1 %392, i32 0, i1 %392) #1, !dbg !62
  %500 = bitcast i32 %499 to float, !dbg !62
  %501 = fadd float %477, %486, !dbg !63
  %502 = fadd float %478, %488, !dbg !63
  %503 = fadd float %479, %490, !dbg !63
  %504 = fadd float %480, %492, !dbg !63
  %505 = fadd float %481, %494, !dbg !63
  %506 = fadd float %482, %496, !dbg !63
  %507 = fadd float %483, %498, !dbg !63
  %508 = fadd float %484, %500, !dbg !63
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %149, i32 0, i1 %149) #1, !dbg !64
  %510 = bitcast i32 %509 to float, !dbg !64
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %150, i32 0, i1 %150) #1, !dbg !64
  %512 = bitcast i32 %511 to float, !dbg !64
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %230, i32 0, i1 %230) #1, !dbg !64
  %514 = bitcast i32 %513 to float, !dbg !64
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %231, i32 0, i1 %231) #1, !dbg !64
  %516 = bitcast i32 %515 to float, !dbg !64
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %315, i32 0, i1 %315) #1, !dbg !64
  %518 = bitcast i32 %517 to float, !dbg !64
  %519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %316, i32 0, i1 %316) #1, !dbg !64
  %520 = bitcast i32 %519 to float, !dbg !64
  %521 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %400, i32 0, i1 %400) #1, !dbg !64
  %522 = bitcast i32 %521 to float, !dbg !64
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %401, i32 0, i1 %401) #1, !dbg !64
  %524 = bitcast i32 %523 to float, !dbg !64
  %525 = fadd float %501, %510, !dbg !65
  %526 = fadd float %502, %512, !dbg !65
  %527 = fadd float %503, %514, !dbg !65
  %528 = fadd float %504, %516, !dbg !65
  %529 = fadd float %505, %518, !dbg !65
  %530 = fadd float %506, %520, !dbg !65
  %531 = fadd float %507, %522, !dbg !65
  %532 = fadd float %508, %524, !dbg !65
  %533 = extractelement <2 x i1> %113, i64 1, !dbg !37
  %534 = and i1 %84, %533, !dbg !66
  %535 = and i1 %51, %533, !dbg !66
  %536 = extractelement <2 x i1> %194, i64 1, !dbg !37
  %537 = and i1 %169, %536, !dbg !66
  %538 = and i1 %52, %536, !dbg !66
  %539 = extractelement <2 x i1> %279, i64 1, !dbg !37
  %540 = and i1 %254, %539, !dbg !66
  %541 = and i1 %53, %539, !dbg !66
  %542 = extractelement <2 x i1> %364, i64 1, !dbg !37
  %543 = and i1 %339, %542, !dbg !66
  %544 = and i1 %54, %542, !dbg !66
  %545 = add i32 %90, 16, !dbg !67
  %546 = add i32 %175, 16, !dbg !67
  %547 = add i32 %260, 16, !dbg !67
  %548 = add i32 %345, 16, !dbg !67
  %549 = add i32 %545, %91, !dbg !68
  %550 = add i32 %545, %.sext18, !dbg !68
  %551 = add i32 %546, %176, !dbg !68
  %552 = add i32 %546, %.sext22, !dbg !68
  %553 = add i32 %547, %261, !dbg !68
  %554 = add i32 %547, %.sext26, !dbg !68
  %555 = add i32 %548, %346, !dbg !68
  %556 = add i32 %548, %.sext30, !dbg !68
  %557 = sext i32 %549 to i64, !dbg !69
  %558 = getelementptr float, ptr addrspace(1) %0, i64 %557, !dbg !69
  %559 = sext i32 %550 to i64, !dbg !69
  %560 = getelementptr float, ptr addrspace(1) %0, i64 %559, !dbg !69
  %561 = sext i32 %551 to i64, !dbg !69
  %562 = getelementptr float, ptr addrspace(1) %0, i64 %561, !dbg !69
  %563 = sext i32 %552 to i64, !dbg !69
  %564 = getelementptr float, ptr addrspace(1) %0, i64 %563, !dbg !69
  %565 = sext i32 %553 to i64, !dbg !69
  %566 = getelementptr float, ptr addrspace(1) %0, i64 %565, !dbg !69
  %567 = sext i32 %554 to i64, !dbg !69
  %568 = getelementptr float, ptr addrspace(1) %0, i64 %567, !dbg !69
  %569 = sext i32 %555 to i64, !dbg !69
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !69
  %571 = sext i32 %556 to i64, !dbg !69
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !69
  %573 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %558, i1 %534, i32 0, i1 %534) #1, !dbg !70
  %574 = bitcast i32 %573 to float, !dbg !70
  %575 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %560, i1 %535, i32 0, i1 %535) #1, !dbg !70
  %576 = bitcast i32 %575 to float, !dbg !70
  %577 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %562, i1 %537, i32 0, i1 %537) #1, !dbg !70
  %578 = bitcast i32 %577 to float, !dbg !70
  %579 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %564, i1 %538, i32 0, i1 %538) #1, !dbg !70
  %580 = bitcast i32 %579 to float, !dbg !70
  %581 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %540, i32 0, i1 %540) #1, !dbg !70
  %582 = bitcast i32 %581 to float, !dbg !70
  %583 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %568, i1 %541, i32 0, i1 %541) #1, !dbg !70
  %584 = bitcast i32 %583 to float, !dbg !70
  %585 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %570, i1 %543, i32 0, i1 %543) #1, !dbg !70
  %586 = bitcast i32 %585 to float, !dbg !70
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %544, i32 0, i1 %544) #1, !dbg !70
  %588 = bitcast i32 %587 to float, !dbg !70
  %589 = fadd float %525, %574, !dbg !71
  %590 = fadd float %526, %576, !dbg !71
  %591 = fadd float %527, %578, !dbg !71
  %592 = fadd float %528, %580, !dbg !71
  %593 = fadd float %529, %582, !dbg !71
  %594 = fadd float %530, %584, !dbg !71
  %595 = fadd float %531, %586, !dbg !71
  %596 = fadd float %532, %588, !dbg !71
  %597 = and i1 %128, %533, !dbg !43
  %598 = and i1 %61, %533, !dbg !43
  %599 = and i1 %209, %536, !dbg !43
  %600 = and i1 %62, %536, !dbg !43
  %601 = and i1 %294, %539, !dbg !43
  %602 = and i1 %63, %539, !dbg !43
  %603 = and i1 %379, %542, !dbg !43
  %604 = and i1 %64, %542, !dbg !43
  %605 = add i32 %90, 17, !dbg !72
  %606 = add i32 %175, 17, !dbg !72
  %607 = add i32 %260, 17, !dbg !72
  %608 = add i32 %345, 17, !dbg !72
  %609 = add i32 %605, %91, !dbg !73
  %610 = add i32 %605, %.sext18, !dbg !73
  %611 = add i32 %606, %176, !dbg !73
  %612 = add i32 %606, %.sext22, !dbg !73
  %613 = add i32 %607, %261, !dbg !73
  %614 = add i32 %607, %.sext26, !dbg !73
  %615 = add i32 %608, %346, !dbg !73
  %616 = add i32 %608, %.sext30, !dbg !73
  %617 = sext i32 %609 to i64, !dbg !74
  %618 = getelementptr float, ptr addrspace(1) %0, i64 %617, !dbg !74
  %619 = sext i32 %610 to i64, !dbg !74
  %620 = getelementptr float, ptr addrspace(1) %0, i64 %619, !dbg !74
  %621 = sext i32 %611 to i64, !dbg !74
  %622 = getelementptr float, ptr addrspace(1) %0, i64 %621, !dbg !74
  %623 = sext i32 %612 to i64, !dbg !74
  %624 = getelementptr float, ptr addrspace(1) %0, i64 %623, !dbg !74
  %625 = sext i32 %613 to i64, !dbg !74
  %626 = getelementptr float, ptr addrspace(1) %0, i64 %625, !dbg !74
  %627 = sext i32 %614 to i64, !dbg !74
  %628 = getelementptr float, ptr addrspace(1) %0, i64 %627, !dbg !74
  %629 = sext i32 %615 to i64, !dbg !74
  %630 = getelementptr float, ptr addrspace(1) %0, i64 %629, !dbg !74
  %631 = sext i32 %616 to i64, !dbg !74
  %632 = getelementptr float, ptr addrspace(1) %0, i64 %631, !dbg !74
  %633 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %618, i1 %597, i32 0, i1 %597) #1, !dbg !75
  %634 = bitcast i32 %633 to float, !dbg !75
  %635 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %620, i1 %598, i32 0, i1 %598) #1, !dbg !75
  %636 = bitcast i32 %635 to float, !dbg !75
  %637 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %599, i32 0, i1 %599) #1, !dbg !75
  %638 = bitcast i32 %637 to float, !dbg !75
  %639 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %600, i32 0, i1 %600) #1, !dbg !75
  %640 = bitcast i32 %639 to float, !dbg !75
  %641 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %626, i1 %601, i32 0, i1 %601) #1, !dbg !75
  %642 = bitcast i32 %641 to float, !dbg !75
  %643 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %628, i1 %602, i32 0, i1 %602) #1, !dbg !75
  %644 = bitcast i32 %643 to float, !dbg !75
  %645 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %630, i1 %603, i32 0, i1 %603) #1, !dbg !75
  %646 = bitcast i32 %645 to float, !dbg !75
  %647 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %632, i1 %604, i32 0, i1 %604) #1, !dbg !75
  %648 = bitcast i32 %647 to float, !dbg !75
  %649 = fadd float %589, %634, !dbg !76
  %650 = fadd float %590, %636, !dbg !76
  %651 = fadd float %591, %638, !dbg !76
  %652 = fadd float %592, %640, !dbg !76
  %653 = fadd float %593, %642, !dbg !76
  %654 = fadd float %594, %644, !dbg !76
  %655 = fadd float %595, %646, !dbg !76
  %656 = fadd float %596, %648, !dbg !76
  %657 = and i1 %114, %533, !dbg !37
  %658 = and i1 %69, %533, !dbg !37
  %659 = and i1 %195, %536, !dbg !37
  %660 = and i1 %70, %536, !dbg !37
  %661 = and i1 %280, %539, !dbg !37
  %662 = and i1 %71, %539, !dbg !37
  %663 = and i1 %365, %542, !dbg !37
  %664 = and i1 %72, %542, !dbg !37
  %665 = add i32 %90, 18, !dbg !77
  %666 = add i32 %175, 18, !dbg !77
  %667 = add i32 %260, 18, !dbg !77
  %668 = add i32 %345, 18, !dbg !77
  %669 = add i32 %665, %91, !dbg !28
  %670 = add i32 %665, %.sext18, !dbg !28
  %671 = add i32 %666, %176, !dbg !28
  %672 = add i32 %666, %.sext22, !dbg !28
  %673 = add i32 %667, %261, !dbg !28
  %674 = add i32 %667, %.sext26, !dbg !28
  %675 = add i32 %668, %346, !dbg !28
  %676 = add i32 %668, %.sext30, !dbg !28
  %677 = sext i32 %669 to i64, !dbg !78
  %678 = getelementptr float, ptr addrspace(1) %0, i64 %677, !dbg !78
  %679 = sext i32 %670 to i64, !dbg !78
  %680 = getelementptr float, ptr addrspace(1) %0, i64 %679, !dbg !78
  %681 = sext i32 %671 to i64, !dbg !78
  %682 = getelementptr float, ptr addrspace(1) %0, i64 %681, !dbg !78
  %683 = sext i32 %672 to i64, !dbg !78
  %684 = getelementptr float, ptr addrspace(1) %0, i64 %683, !dbg !78
  %685 = sext i32 %673 to i64, !dbg !78
  %686 = getelementptr float, ptr addrspace(1) %0, i64 %685, !dbg !78
  %687 = sext i32 %674 to i64, !dbg !78
  %688 = getelementptr float, ptr addrspace(1) %0, i64 %687, !dbg !78
  %689 = sext i32 %675 to i64, !dbg !78
  %690 = getelementptr float, ptr addrspace(1) %0, i64 %689, !dbg !78
  %691 = sext i32 %676 to i64, !dbg !78
  %692 = getelementptr float, ptr addrspace(1) %0, i64 %691, !dbg !78
  %693 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %678, i1 %657, i32 0, i1 %657) #1, !dbg !79
  %694 = bitcast i32 %693 to float, !dbg !79
  %695 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %680, i1 %658, i32 0, i1 %658) #1, !dbg !79
  %696 = bitcast i32 %695 to float, !dbg !79
  %697 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %682, i1 %659, i32 0, i1 %659) #1, !dbg !79
  %698 = bitcast i32 %697 to float, !dbg !79
  %699 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %684, i1 %660, i32 0, i1 %660) #1, !dbg !79
  %700 = bitcast i32 %699 to float, !dbg !79
  %701 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %686, i1 %661, i32 0, i1 %661) #1, !dbg !79
  %702 = bitcast i32 %701 to float, !dbg !79
  %703 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %688, i1 %662, i32 0, i1 %662) #1, !dbg !79
  %704 = bitcast i32 %703 to float, !dbg !79
  %705 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %690, i1 %663, i32 0, i1 %663) #1, !dbg !79
  %706 = bitcast i32 %705 to float, !dbg !79
  %707 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %692, i1 %664, i32 0, i1 %664) #1, !dbg !79
  %708 = bitcast i32 %707 to float, !dbg !79
  %709 = fadd float %649, %694, !dbg !80
  %710 = fadd float %650, %696, !dbg !80
  %711 = fadd float %651, %698, !dbg !80
  %712 = fadd float %652, %700, !dbg !80
  %713 = fadd float %653, %702, !dbg !80
  %714 = fadd float %654, %704, !dbg !80
  %715 = fadd float %655, %706, !dbg !80
  %716 = fadd float %656, %708, !dbg !80
  %717 = select i1 %86, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %718 = select i1 %87, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %719 = select i1 %171, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %720 = select i1 %172, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %721 = select i1 %256, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %722 = select i1 %257, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %723 = select i1 %341, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %724 = select i1 %342, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %725 = select i1 %129, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %726 = select i1 %102, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %727 = select i1 %210, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %728 = select i1 %183, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %729 = select i1 %295, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %730 = select i1 %268, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %731 = select i1 %380, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %732 = select i1 %353, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %733 = fadd float %725, %717, !dbg !83
  %734 = fadd float %726, %718, !dbg !83
  %735 = fadd float %727, %719, !dbg !83
  %736 = fadd float %728, %720, !dbg !83
  %737 = fadd float %729, %721, !dbg !83
  %738 = fadd float %730, %722, !dbg !83
  %739 = fadd float %731, %723, !dbg !83
  %740 = fadd float %732, %724, !dbg !83
  %741 = select i1 %115, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %742 = select i1 %116, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %743 = select i1 %196, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %744 = select i1 %197, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %745 = select i1 %281, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %746 = select i1 %282, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %747 = select i1 %366, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %748 = select i1 %367, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %749 = fadd float %741, %733, !dbg !85
  %750 = fadd float %742, %734, !dbg !85
  %751 = fadd float %743, %735, !dbg !85
  %752 = fadd float %744, %736, !dbg !85
  %753 = fadd float %745, %737, !dbg !85
  %754 = fadd float %746, %738, !dbg !85
  %755 = fadd float %747, %739, !dbg !85
  %756 = fadd float %748, %740, !dbg !85
  %757 = select i1 %131, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %758 = select i1 %132, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %759 = select i1 %212, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %760 = select i1 %213, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %761 = select i1 %297, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %762 = select i1 %298, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %763 = select i1 %382, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %764 = select i1 %383, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %765 = fadd float %757, %749, !dbg !87
  %766 = fadd float %758, %750, !dbg !87
  %767 = fadd float %759, %751, !dbg !87
  %768 = fadd float %760, %752, !dbg !87
  %769 = fadd float %761, %753, !dbg !87
  %770 = fadd float %762, %754, !dbg !87
  %771 = fadd float %763, %755, !dbg !87
  %772 = fadd float %764, %756, !dbg !87
  %773 = select i1 %140, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %774 = select i1 %141, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %775 = select i1 %221, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %776 = select i1 %222, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %777 = select i1 %306, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %778 = select i1 %307, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %779 = select i1 %391, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %780 = select i1 %392, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %781 = fadd float %773, %765, !dbg !89
  %782 = fadd float %774, %766, !dbg !89
  %783 = fadd float %775, %767, !dbg !89
  %784 = fadd float %776, %768, !dbg !89
  %785 = fadd float %777, %769, !dbg !89
  %786 = fadd float %778, %770, !dbg !89
  %787 = fadd float %779, %771, !dbg !89
  %788 = fadd float %780, %772, !dbg !89
  %789 = select i1 %149, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %790 = select i1 %150, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %791 = select i1 %230, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %792 = select i1 %231, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %793 = select i1 %315, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %794 = select i1 %316, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %795 = select i1 %400, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %796 = select i1 %401, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %797 = fadd float %789, %781, !dbg !91
  %798 = fadd float %790, %782, !dbg !91
  %799 = fadd float %791, %783, !dbg !91
  %800 = fadd float %792, %784, !dbg !91
  %801 = fadd float %793, %785, !dbg !91
  %802 = fadd float %794, %786, !dbg !91
  %803 = fadd float %795, %787, !dbg !91
  %804 = fadd float %796, %788, !dbg !91
  %805 = select i1 %534, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %806 = select i1 %535, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %807 = select i1 %537, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %808 = select i1 %538, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %809 = select i1 %540, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %810 = select i1 %541, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %811 = select i1 %543, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %812 = select i1 %544, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %813 = fadd float %805, %797, !dbg !93
  %814 = fadd float %806, %798, !dbg !93
  %815 = fadd float %807, %799, !dbg !93
  %816 = fadd float %808, %800, !dbg !93
  %817 = fadd float %809, %801, !dbg !93
  %818 = fadd float %810, %802, !dbg !93
  %819 = fadd float %811, %803, !dbg !93
  %820 = fadd float %812, %804, !dbg !93
  %821 = select i1 %597, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %822 = select i1 %598, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %823 = select i1 %599, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %824 = select i1 %600, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %825 = select i1 %601, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %826 = select i1 %602, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %827 = select i1 %603, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %828 = select i1 %604, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %829 = fadd float %821, %813, !dbg !95
  %830 = fadd float %822, %814, !dbg !95
  %831 = fadd float %823, %815, !dbg !95
  %832 = fadd float %824, %816, !dbg !95
  %833 = fadd float %825, %817, !dbg !95
  %834 = fadd float %826, %818, !dbg !95
  %835 = fadd float %827, %819, !dbg !95
  %836 = fadd float %828, %820, !dbg !95
  %837 = select i1 %657, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %838 = select i1 %658, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %839 = select i1 %659, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %840 = select i1 %660, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %841 = select i1 %661, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %842 = select i1 %662, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %843 = select i1 %663, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %844 = select i1 %664, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %845 = fadd float %837, %829, !dbg !97
  %846 = fadd float %838, %830, !dbg !97
  %847 = fadd float %839, %831, !dbg !97
  %848 = fadd float %840, %832, !dbg !97
  %849 = fadd float %841, %833, !dbg !97
  %850 = fadd float %842, %834, !dbg !97
  %851 = fadd float %843, %835, !dbg !97
  %852 = fadd float %844, %836, !dbg !97
  %853 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %709, float %845) #1, !dbg !98
  %854 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %710, float %846) #1, !dbg !98
  %855 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %711, float %847) #1, !dbg !98
  %856 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %712, float %848) #1, !dbg !98
  %857 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %713, float %849) #1, !dbg !98
  %858 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %714, float %850) #1, !dbg !98
  %859 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %715, float %851) #1, !dbg !98
  %860 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %716, float %852) #1, !dbg !98
  %861 = sext i32 %9 to i64, !dbg !99
  %862 = getelementptr float, ptr addrspace(1) %1, i64 %861, !dbg !99
  %863 = sext i32 %13 to i64, !dbg !99
  %864 = getelementptr float, ptr addrspace(1) %1, i64 %863, !dbg !99
  %865 = bitcast float %853 to i32, !dbg !100
  %866 = bitcast float %854 to i32, !dbg !100
  %867 = bitcast float %855 to i32, !dbg !100
  %868 = bitcast float %856 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %865, i32 %866, i32 %867, i32 %868, ptr addrspace(1) %862, i1 true) #1, !dbg !100
  %869 = bitcast float %857 to i32, !dbg !100
  %870 = bitcast float %858 to i32, !dbg !100
  %871 = bitcast float %859 to i32, !dbg !100
  %872 = bitcast float %860 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %869, i32 %870, i32 %871, i32 %872, ptr addrspace(1) %864, i1 true) #1, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cauyjquegba66krjnneorvbo5ijxknxrwyezga7t5gxrjfate7zs.py", directory: "inductor_cache/au")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_37", linkageName: "triton_poi_fused__adaptive_avg_pool2d_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 26, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 51, scope: !7)
!21 = !DILocation(line: 36, column: 16, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 41, column: 17, scope: !7)
!24 = !DILocation(line: 42, column: 20, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 33, scope: !7)
!27 = !DILocation(line: 35, column: 48, scope: !7)
!28 = !DILocation(line: 66, column: 63, scope: !7)
!29 = !DILocation(line: 35, column: 57, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 72, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 39, column: 53, scope: !7)
!35 = !DILocation(line: 39, column: 62, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 65, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 35, scope: !7)
!40 = !DILocation(line: 44, column: 53, scope: !7)
!41 = !DILocation(line: 44, column: 62, scope: !7)
!42 = !DILocation(line: 44, column: 31, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 53, scope: !7)
!47 = !DILocation(line: 49, column: 62, scope: !7)
!48 = !DILocation(line: 49, column: 31, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 53, scope: !7)
!51 = !DILocation(line: 52, column: 62, scope: !7)
!52 = !DILocation(line: 52, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 54, scope: !7)
!54 = !DILocation(line: 55, column: 63, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 39, column: 77, scope: !7)
!57 = !DILocation(line: 40, column: 20, scope: !7)
!58 = !DILocation(line: 44, column: 77, scope: !7)
!59 = !DILocation(line: 45, column: 20, scope: !7)
!60 = !DILocation(line: 49, column: 77, scope: !7)
!61 = !DILocation(line: 50, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 77, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 55, column: 78, scope: !7)
!65 = !DILocation(line: 56, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 60, column: 54, scope: !7)
!68 = !DILocation(line: 60, column: 63, scope: !7)
!69 = !DILocation(line: 60, column: 31, scope: !7)
!70 = !DILocation(line: 60, column: 78, scope: !7)
!71 = !DILocation(line: 61, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 54, scope: !7)
!73 = !DILocation(line: 63, column: 63, scope: !7)
!74 = !DILocation(line: 63, column: 31, scope: !7)
!75 = !DILocation(line: 63, column: 78, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 54, scope: !7)
!78 = !DILocation(line: 66, column: 31, scope: !7)
!79 = !DILocation(line: 66, column: 78, scope: !7)
!80 = !DILocation(line: 67, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 34, scope: !7)
!82 = !DILocation(line: 73, column: 35, scope: !7)
!83 = !DILocation(line: 74, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 35, scope: !7)
!85 = !DILocation(line: 78, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 35, scope: !7)
!87 = !DILocation(line: 82, column: 20, scope: !7)
!88 = !DILocation(line: 85, column: 35, scope: !7)
!89 = !DILocation(line: 86, column: 20, scope: !7)
!90 = !DILocation(line: 89, column: 35, scope: !7)
!91 = !DILocation(line: 90, column: 20, scope: !7)
!92 = !DILocation(line: 93, column: 35, scope: !7)
!93 = !DILocation(line: 94, column: 20, scope: !7)
!94 = !DILocation(line: 97, column: 35, scope: !7)
!95 = !DILocation(line: 98, column: 20, scope: !7)
!96 = !DILocation(line: 101, column: 35, scope: !7)
!97 = !DILocation(line: 102, column: 20, scope: !7)
!98 = !DILocation(line: 103, column: 20, scope: !7)
!99 = !DILocation(line: 104, column: 25, scope: !7)
!100 = !DILocation(line: 104, column: 37, scope: !7)
!101 = !DILocation(line: 104, column: 4, scope: !7)
