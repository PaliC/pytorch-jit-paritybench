; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = and i32 %12, 60, !dbg !17
  %23 = lshr i32 %9, 2, !dbg !17
  %24 = and i32 %23, 31, !dbg !17
  %25 = or disjoint i32 %21, %22, !dbg !18
  %26 = or disjoint i32 %21, %24, !dbg !18
  %27 = or disjoint i32 %26, 32, !dbg !18
  %28 = icmp slt i32 %25, 768, !dbg !19
  %29 = icmp slt i32 %26, 768, !dbg !19
  %30 = icmp slt i32 %27, 768, !dbg !19
  %31 = ashr exact i32 %16, 2, !dbg !20
  %32 = mul i32 %14, 768, !dbg !21
  %33 = mul i32 %15, 768, !dbg !21
  %34 = add i32 %25, %32, !dbg !22
  %35 = add i32 %25, %33, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = and i1 %17, %28, !dbg !24
  %41 = and i1 %18, %28, !dbg !24
  %42 = and i1 %19, %29, !dbg !24
  %43 = and i1 %30, %19, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = sext i32 %25 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %28) #2, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !27
  %69 = bitcast i32 %65 to float, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %40) #2, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %41) #2, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = bitcast i32 %87 to float, !dbg !29
  %92 = bitcast i32 %88 to float, !dbg !29
  %93 = fmul float %69, %80, !dbg !30
  %94 = fmul float %70, %81, !dbg !30
  %95 = fmul float %71, %82, !dbg !30
  %96 = fmul float %72, %83, !dbg !30
  %97 = fmul float %69, %89, !dbg !30
  %98 = fmul float %70, %90, !dbg !30
  %99 = fmul float %71, %91, !dbg !30
  %100 = fmul float %72, %92, !dbg !30
  %101 = fadd float %93, %49, !dbg !31
  %102 = fadd float %94, %50, !dbg !31
  %103 = fadd float %95, %51, !dbg !31
  %104 = fadd float %96, %52, !dbg !31
  %105 = fadd float %97, %58, !dbg !31
  %106 = fadd float %98, %59, !dbg !31
  %107 = fadd float %99, %60, !dbg !31
  %108 = fadd float %100, %61, !dbg !31
  %109 = shl i32 %26, 2, !dbg !32
  %110 = shl i32 %27, 2, !dbg !32
  %111 = mul i32 %31, 3072, !dbg !33
  %112 = add i32 %109, %111, !dbg !34
  %113 = add i32 %111, %110, !dbg !34
  %114 = sext i32 %112 to i64, !dbg !35
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !35
  %116 = sext i32 %113 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !35
  %118 = shl i32 %9, 6, !dbg !36
  %119 = and i32 %118, 960, !dbg !36
  %120 = or disjoint i32 %119, %11, !dbg !36
  %121 = and i32 %12, 508, !dbg !36
  %122 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !36
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !36
  %124 = bitcast float %101 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !36
  %125 = or disjoint i32 %120, 16, !dbg !36
  %126 = lshr i32 %125, 2, !dbg !36
  %127 = and i32 %126, 244, !dbg !36
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !36
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %125, !dbg !36
  %130 = bitcast float %102 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !36
  %131 = or disjoint i32 %120, 32, !dbg !36
  %132 = lshr i32 %131, 2, !dbg !36
  %133 = and i32 %132, 248, !dbg !36
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !36
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %131, !dbg !36
  %136 = bitcast float %103 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !36
  %137 = or disjoint i32 %120, 48, !dbg !36
  %138 = lshr i32 %137, 2, !dbg !36
  %139 = and i32 %138, 252, !dbg !36
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !36
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %137, !dbg !36
  %142 = bitcast float %104 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !36
  %143 = or disjoint i32 %120, 8, !dbg !36
  %144 = getelementptr float, ptr addrspace(3) %122, i32 %143, !dbg !36
  %145 = bitcast float %105 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !36
  %146 = or disjoint i32 %120, 24, !dbg !36
  %147 = lshr i32 %146, 2, !dbg !36
  %148 = and i32 %147, 244, !dbg !36
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !36
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %146, !dbg !36
  %151 = bitcast float %106 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !36
  %152 = or disjoint i32 %120, 40, !dbg !36
  %153 = lshr i32 %152, 2, !dbg !36
  %154 = and i32 %153, 248, !dbg !36
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !36
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %152, !dbg !36
  %157 = bitcast float %107 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !36
  %158 = or disjoint i32 %120, 56, !dbg !36
  %159 = lshr i32 %158, 2, !dbg !36
  %160 = and i32 %159, 252, !dbg !36
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !36
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %158, !dbg !36
  %163 = bitcast float %108 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %164 = and i32 %9, 124, !dbg !36
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !36
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %121, !dbg !36
  %167 = or disjoint i32 %121, 512, !dbg !36
  %168 = lshr exact i32 %167, 2, !dbg !36
  %169 = and i32 %168, 252, !dbg !36
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !36
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %167, !dbg !36
  %172 = load <4 x i32>, ptr addrspace(3) %171, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %166, align 16, !dbg !36
  %173 = getelementptr inbounds i8, ptr addrspace(3) %166, i32 4, !dbg !36
  %.extract11 = load i32, ptr addrspace(3) %173, align 4, !dbg !36
  %174 = getelementptr inbounds i8, ptr addrspace(3) %166, i32 8, !dbg !36
  %.extract12 = load i32, ptr addrspace(3) %174, align 8, !dbg !36
  %175 = getelementptr inbounds i8, ptr addrspace(3) %166, i32 12, !dbg !36
  %.extract13 = load i32, ptr addrspace(3) %175, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %115, i1 %42) #2, !dbg !36
  %.extract14 = extractelement <4 x i32> %172, i64 0, !dbg !36
  %.extract15 = extractelement <4 x i32> %172, i64 1, !dbg !36
  %.extract16 = extractelement <4 x i32> %172, i64 2, !dbg !36
  %.extract17 = extractelement <4 x i32> %172, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %117, i1 %43) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2udsxmfbwm4iqkhqh6pgd7x5kny6p7pfq4ak6yycakcc7ay434i.py", directory: "inductor_cache/2u")
!4 = !{ptr @triton_poi_fused_add_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_35", linkageName: "triton_poi_fused_add_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 32, scope: !7)
!33 = !DILocation(line: 37, column: 42, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 53, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
