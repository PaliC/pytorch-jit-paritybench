; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 4, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 512, !dbg !14
  %19 = shl i32 %14, 2, !dbg !15
  %20 = and i32 %19, 60, !dbg !15
  %21 = srem i32 %17, 128, !dbg !16
  %22 = shl i32 %17, 6, !dbg !17
  %23 = or disjoint i32 %22, %20, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %27 = sext i32 %21 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #5, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #5, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #5, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #5, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #5, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #5, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #5, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #5, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #5, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #5, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #5, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #5, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #5, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #5, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #5, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #5, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #5, !dbg !34
  %61 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i11 = icmp eq i32 %68, 0, !dbg !36
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i14 = icmp eq i32 %69, 0, !dbg !36
  br i1 %.not.i11, label %75, label %70, !dbg !36

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %73, label %71, !dbg !36

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %78, label %76, !dbg !36

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #5, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %71, %73, %76, %78
  %.0.i13 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !36
  %80 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = bitcast i32 %39 to float, !dbg !26
  %83 = fadd float %81, %82, !dbg !37
  %84 = bitcast i32 %44 to float, !dbg !28
  %85 = fsub float %83, %84, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = fadd float %87, %82, !dbg !37
  %89 = fsub float %88, %84, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = fadd float %91, %82, !dbg !37
  %93 = fsub float %92, %84, !dbg !38
  %94 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = fadd float %95, %82, !dbg !37
  %97 = fsub float %96, %84, !dbg !38
  %98 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %99 = bitcast i32 %98 to float, !dbg !20
  %100 = bitcast i32 %32 to float, !dbg !22
  %101 = fadd float %99, %100, !dbg !39
  %102 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %103 = bitcast i32 %102 to float, !dbg !20
  %104 = fadd float %103, %100, !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %106 = bitcast i32 %105 to float, !dbg !20
  %107 = fadd float %106, %100, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %109 = bitcast i32 %108 to float, !dbg !20
  %110 = fadd float %109, %100, !dbg !39
  %111 = bitcast i32 %60 to float, !dbg !34
  %112 = bitcast i32 %55 to float, !dbg !32
  %113 = and i32 %14, 7, !dbg !12
  %114 = or disjoint i32 %13, %113, !dbg !13
  %115 = icmp slt i32 %114, 512, !dbg !14
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !40
  %117 = fmul float %97, %116, !dbg !41
  %118 = fmul float %93, %116, !dbg !41
  %119 = fmul float %89, %116, !dbg !41
  %120 = fmul float %85, %116, !dbg !41
  %121 = fmul float %117, %112, !dbg !42
  %122 = fmul float %118, %112, !dbg !42
  %123 = fmul float %119, %112, !dbg !42
  %124 = fmul float %120, %112, !dbg !42
  %125 = fadd float %121, %111, !dbg !43
  %126 = fadd float %122, %111, !dbg !43
  %127 = fadd float %123, %111, !dbg !43
  %128 = fadd float %124, %111, !dbg !43
  %129 = fadd float %110, %125, !dbg !44
  %130 = fadd float %107, %126, !dbg !44
  %131 = fadd float %104, %127, !dbg !44
  %132 = fadd float %101, %128, !dbg !44
  %133 = fadd float %129, %130, !dbg !45
  %134 = fadd float %131, %133, !dbg !45
  %135 = fadd float %132, %134, !dbg !45
  %136 = select i1 %18, float %135, float 0.000000e+00, !dbg !45
  %137 = bitcast float %136 to i32, !dbg !50
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !50
  %139 = bitcast i32 %138 to float, !dbg !50
  %140 = fadd float %136, %139, !dbg !45
  %141 = bitcast float %140 to i32, !dbg !50
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !50
  %143 = bitcast i32 %142 to float, !dbg !50
  %144 = fadd float %140, %143, !dbg !45
  %145 = bitcast float %144 to i32, !dbg !50
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !50
  %147 = bitcast i32 %146 to float, !dbg !50
  %148 = fadd float %144, %147, !dbg !45
  %149 = bitcast float %148 to i32, !dbg !50
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !50
  %151 = bitcast i32 %150 to float, !dbg !50
  %152 = fadd float %148, %151, !dbg !45
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !51
  %154 = bitcast float %152 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !51
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !51
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 6.400000e+01) #5, !dbg !51
  %158 = bitcast float %110 to i32, !dbg !52
  %159 = bitcast float %107 to i32, !dbg !52
  %160 = bitcast float %104 to i32, !dbg !52
  %161 = bitcast float %101 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %159, i32 %160, i32 %161, ptr addrspace(1) %25, i1 %18) #5, !dbg !52
  %162 = bitcast float %96 to i32, !dbg !53
  %163 = bitcast float %92 to i32, !dbg !53
  %164 = bitcast float %88 to i32, !dbg !53
  %165 = bitcast float %83 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %163, i32 %164, i32 %165, ptr addrspace(1) %33, i1 %18) #5, !dbg !53
  %166 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !54
  %167 = bitcast float %129 to i32, !dbg !55
  %168 = bitcast float %130 to i32, !dbg !55
  %169 = bitcast float %131 to i32, !dbg !55
  %170 = bitcast float %132 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 %18) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %171 = sext i32 %114 to i64, !dbg !57
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !57
  %173 = and i32 %14, 120, !dbg !58
  %174 = icmp eq i32 %173, 0, !dbg !58
  %175 = bitcast float %157 to i32, !dbg !58
  %176 = and i1 %174, %115, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %172, i1 %176) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 19, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !49)
!46 = distinct !DILexicalBlockFile(scope: !48, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!49 = !DILocation(line: 56, column: 26, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 47, scope: !7)
!53 = !DILocation(line: 60, column: 47, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 45, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
!57 = !DILocation(line: 63, column: 28, scope: !7)
!58 = !DILocation(line: 63, column: 40, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
