; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 4, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = lshr i32 %8, 4, !dbg !14
  %17 = and i32 %16, 7, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen, 4096, !dbg !15
  %19 = mul i32 %18, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %15, 4096, !dbg !15
  %21 = shl i32 %18, 19, !dbg !17
  %22 = shl nsw i32 %20, 7, !dbg !18
  %23 = add i32 %21, %.decomposed
  %24 = shl i32 %8, 5
  %25 = and i32 %24, 480
  %26 = or disjoint i32 %25, %17
  %27 = and i32 %9, 508
  %28 = lshr exact i32 %25, 1
  %29 = add nuw nsw i32 %28, %26
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30
  %32 = or disjoint i32 %26, 8
  %33 = lshr i32 %32, 1
  %34 = and i32 %33, 244
  %35 = add nuw nsw i32 %34, %32
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36
  %38 = or disjoint i32 %26, 16
  %39 = lshr i32 %38, 1
  %40 = and i32 %39, 248
  %41 = add nuw nsw i32 %40, %38
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42
  %44 = or disjoint i32 %26, 24
  %45 = lshr i32 %44, 1
  %46 = and i32 %45, 252
  %47 = add nuw nsw i32 %46, %44
  %48 = zext nneg i32 %47 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = lshr exact i32 %9, 1
  %51 = and i32 %50, 252
  %52 = add nuw nsw i32 %51, %27
  %53 = zext nneg i32 %52 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = or disjoint i32 %22, %10
  %56 = sext i32 %55 to i64, !dbg !19
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !19
  br label %57, !dbg !19

57:                                               ; preds = %5, %57
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %57 ]
  %58 = phi <4 x float> [ zeroinitializer, %5 ], [ %85, %57 ]
  %59 = trunc i64 %indvars.iv to i32, !dbg !20
  %.tr = or disjoint i32 %17, %59, !dbg !20
  %60 = shl i32 %.tr, 12, !dbg !20
  %61 = add i32 %23, %60, !dbg !20
  %62 = sext i32 %61 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !22
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %69 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %69, i1 true) #3, !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %70, i1 true) #3, !dbg !22
  %71 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %71, i1 true) #3, !dbg !22
  %72 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %72, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !23
  %73 = load <4 x float>, ptr addrspace(3) %54, align 16, !dbg !22
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !24
  %79 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !24
  %80 = insertelement <4 x i32> %79, i32 %76, i64 1, !dbg !24
  %81 = insertelement <4 x i32> %80, i32 %77, i64 2, !dbg !24
  %82 = insertelement <4 x i32> %81, i32 %78, i64 3, !dbg !24
  %83 = bitcast <4 x i32> %82 to <4 x float>, !dbg !24
  %84 = fmul <4 x float> %73, %83, !dbg !25
  %85 = fadd <4 x float> %58, %84, !dbg !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %86 = icmp samesign ult i64 %indvars.iv, 120, !dbg !19
  br i1 %86, label %57, label %87, !dbg !19

87:                                               ; preds = %57
  %88 = and i32 %8, 63, !dbg !12
  %89 = or disjoint i32 %7, %88, !dbg !13
  %shift = shufflevector <4 x float> %85, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !27
  %90 = fadd <4 x float> %85, %shift, !dbg !27
  %shift16 = shufflevector <4 x float> %85, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !27
  %91 = fadd <4 x float> %shift16, %90, !dbg !27
  %shift17 = shufflevector <4 x float> %85, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !27
  %92 = fadd <4 x float> %shift17, %91, !dbg !27
  %93 = extractelement <4 x float> %92, i64 0, !dbg !27
  %94 = bitcast float %93 to i32, !dbg !32
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = fadd float %93, %96, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %98 = zext nneg i32 %13 to i64, !dbg !33
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !33
  %100 = bitcast float %97 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %101 = zext nneg i32 %88 to i64, !dbg !33
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !33
  %103 = load i32, ptr addrspace(3) %102, align 4, !dbg !33
  %104 = sext i32 %89 to i64, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !34
  %106 = and i32 %8, 64, !dbg !35
  %107 = icmp eq i32 %106, 0, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %105, i1 %107) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cteqmgpuho72rldxtltgfvv3jvqv35wgpcg776z3fznhsjvvbepe.py", directory: "inductor_cache/te")
!4 = !{ptr @triton_red_fused_mv_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_7", linkageName: "triton_red_fused_mv_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 56, scope: !7)
!18 = !DILocation(line: 35, column: 43, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 61, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 36, column: 22, scope: !7)
!26 = !DILocation(line: 38, column: 23, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 40, column: 25, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 40, column: 28, scope: !7)
!34 = !DILocation(line: 41, column: 25, scope: !7)
!35 = !DILocation(line: 41, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 4, scope: !7)
