; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = or disjoint i32 %22, %14, !dbg !17
  %24 = or disjoint i32 %22, %11, !dbg !17
  %25 = or disjoint i32 %22, %12, !dbg !17
  %26 = icmp slt i32 %23, 192, !dbg !18
  %27 = icmp slt i32 %24, 192, !dbg !18
  %28 = icmp slt i32 %25, 192, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %29 = sdiv i32 %.frozen, 64, !dbg !19
  %30 = mul i32 %29, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = mul i32 %15, 192, !dbg !21
  %32 = mul i32 %16, 192, !dbg !21
  %33 = add i32 %23, %31, !dbg !22
  %34 = add i32 %23, %32, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = and i1 %18, %26, !dbg !24
  %40 = and i1 %19, %26, !dbg !24
  %41 = and i1 %20, %27, !dbg !24
  %42 = and i1 %20, %28, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = sext i32 %23 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = bitcast i32 %65 to float, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %39) #2, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !29
  %79 = bitcast i32 %75 to float, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %40) #2, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = bitcast i32 %87 to float, !dbg !29
  %92 = fmul float %68, %79, !dbg !30
  %93 = fmul float %69, %80, !dbg !30
  %94 = fmul float %70, %81, !dbg !30
  %95 = fmul float %71, %82, !dbg !30
  %96 = fmul float %68, %88, !dbg !30
  %97 = fmul float %69, %89, !dbg !30
  %98 = fmul float %70, %90, !dbg !30
  %99 = fmul float %71, %91, !dbg !30
  %100 = fadd float %92, %48, !dbg !31
  %101 = fadd float %93, %49, !dbg !31
  %102 = fadd float %94, %50, !dbg !31
  %103 = fadd float %95, %51, !dbg !31
  %104 = fadd float %96, %57, !dbg !31
  %105 = fadd float %97, %58, !dbg !31
  %106 = fadd float %98, %59, !dbg !31
  %107 = fadd float %99, %60, !dbg !31
  %108 = shl i32 %24, 6, !dbg !32
  %109 = shl i32 %25, 6, !dbg !32
  %110 = mul i32 %29, 12288, !dbg !33
  %111 = add i32 %110, %.decomposed, !dbg !34
  %112 = add i32 %111, %108, !dbg !35
  %113 = add i32 %111, %109, !dbg !35
  %114 = sext i32 %112 to i64, !dbg !36
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !36
  %116 = sext i32 %113 to i64, !dbg !36
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !36
  %118 = shl i32 %9, 7, !dbg !37
  %119 = and i32 %118, 896, !dbg !37
  %120 = or disjoint i32 %119, %11, !dbg !37
  %121 = and i32 %13, 508, !dbg !37
  %122 = lshr exact i32 %119, 1, !dbg !37
  %123 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !37
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %120, !dbg !37
  %125 = bitcast float %100 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !37
  %126 = or disjoint i32 %120, 32, !dbg !37
  %127 = lshr i32 %126, 3, !dbg !37
  %128 = and i32 %127, 116, !dbg !37
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !37
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %126, !dbg !37
  %131 = bitcast float %101 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !37
  %132 = or disjoint i32 %120, 64, !dbg !37
  %133 = lshr i32 %132, 3, !dbg !37
  %134 = and i32 %133, 120, !dbg !37
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !37
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %132, !dbg !37
  %137 = bitcast float %102 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !37
  %138 = or disjoint i32 %120, 96, !dbg !37
  %139 = lshr i32 %138, 3, !dbg !37
  %140 = and i32 %139, 124, !dbg !37
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !37
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !37
  %143 = bitcast float %103 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !37
  %144 = or disjoint i32 %120, 16, !dbg !37
  %145 = getelementptr float, ptr addrspace(3) %123, i32 %144, !dbg !37
  %146 = bitcast float %104 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !37
  %147 = or disjoint i32 %120, 48, !dbg !37
  %148 = lshr i32 %147, 3, !dbg !37
  %149 = and i32 %148, 116, !dbg !37
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !37
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147, !dbg !37
  %152 = bitcast float %105 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !37
  %153 = or disjoint i32 %120, 80, !dbg !37
  %154 = lshr i32 %153, 3, !dbg !37
  %155 = and i32 %154, 120, !dbg !37
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !37
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %153, !dbg !37
  %158 = bitcast float %106 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !37
  %159 = or disjoint i32 %120, 112, !dbg !37
  %160 = lshr i32 %159, 3, !dbg !37
  %161 = and i32 %160, 124, !dbg !37
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !37
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !37
  %164 = bitcast float %107 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %165 = lshr i32 %13, 3, !dbg !37
  %166 = and i32 %165, 60, !dbg !37
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !37
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %121, !dbg !37
  %169 = or disjoint i32 %121, 512, !dbg !37
  %170 = lshr i32 %169, 3, !dbg !37
  %171 = and i32 %170, 124, !dbg !37
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !37
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %169, !dbg !37
  %174 = load <4 x i32>, ptr addrspace(3) %173, align 16, !dbg !37
  %.extract = load i32, ptr addrspace(3) %168, align 16, !dbg !37
  %175 = getelementptr inbounds i8, ptr addrspace(3) %168, i32 4, !dbg !37
  %.extract8 = load i32, ptr addrspace(3) %175, align 4, !dbg !37
  %176 = getelementptr inbounds i8, ptr addrspace(3) %168, i32 8, !dbg !37
  %.extract9 = load i32, ptr addrspace(3) %176, align 8, !dbg !37
  %177 = getelementptr inbounds i8, ptr addrspace(3) %168, i32 12, !dbg !37
  %.extract10 = load i32, ptr addrspace(3) %177, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %115, i1 %41) #2, !dbg !37
  %.extract11 = extractelement <4 x i32> %174, i64 0, !dbg !37
  %.extract12 = extractelement <4 x i32> %174, i64 1, !dbg !37
  %.extract13 = extractelement <4 x i32> %174, i64 2, !dbg !37
  %.extract14 = extractelement <4 x i32> %174, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %117, i1 %42) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 55, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
