#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":43:59)
#loc23 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":46:59)
#loc25 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":48:59)
#loc47 = loc(callsite(#loc1 at #loc18))
#loc51 = loc(callsite(#loc1 at #loc23))
#loc54 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_clamp_min_div_gt_mean_mul_rsub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 1.000000e-07 : f32 loc(#loc1)
    %cst_1 = arith.constant 2.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.cmpf olt, %cst_3, %3 : tensor<256xf32, #blocked> loc(#loc44)
    %8 = arith.select %7, %cst_3, %3 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc45)
    %9 = math.absf %3 : tensor<256xf32, #blocked> loc(#loc10)
    %10 = arith.subf %cst_3, %9 : tensor<256xf32, #blocked> loc(#loc11)
    %11 = math.exp %10 : tensor<256xf32, #blocked> loc(#loc12)
    %12 = tt.extern_elementwise %11 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc13)
    %13 = arith.subf %8, %12 : tensor<256xf32, #blocked> loc(#loc14)
    %14 = math.exp %13 : tensor<256xf32, #blocked> loc(#loc15)
    %15 = arith.mulf %14, %6 : tensor<256xf32, #blocked> loc(#loc16)
    %16 = "tt.reduce"(%15) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc18)), %arg5: f32 loc(callsite(#loc1 at #loc18))):
      %38 = arith.addf %arg4, %arg5 : f32 loc(#loc60)
      tt.reduce.return %38 : f32 loc(#loc46)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc46)
    %17 = arith.addf %16, %cst_2 : f32 loc(#loc49)
    %18 = arith.addf %14, %6 : tensor<256xf32, #blocked> loc(#loc22)
    %19 = "tt.reduce"(%18) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc23)), %arg5: f32 loc(callsite(#loc1 at #loc23))):
      %38 = arith.addf %arg4, %arg5 : f32 loc(#loc61)
      tt.reduce.return %38 : f32 loc(#loc50)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc50)
    %20 = arith.addf %19, %cst_2 : f32 loc(#loc52)
    %21 = "tt.reduce"(%6) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc25)), %arg5: f32 loc(callsite(#loc1 at #loc25))):
      %38 = arith.addf %arg4, %arg5 : f32 loc(#loc62)
      tt.reduce.return %38 : f32 loc(#loc53)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc53)
    %22 = arith.addf %21, %cst_2 : f32 loc(#loc55)
    %23 = arith.mulf %17, %cst_1 : f32 loc(#loc27)
    %24 = arith.addf %23, %cst_2 : f32 loc(#loc28)
    %25 = arith.addf %20, %cst_2 : f32 loc(#loc29)
    %26 = arith.cmpf ogt, %25, %cst_0 : f32 loc(#loc56)
    %27 = arith.cmpf une, %25, %25 : f32 loc(#loc57)
    %28 = arith.ori %26, %27 : i1 loc(#loc58)
    %29 = arith.select %28, %25, %cst_0 : f32 loc(#loc59)
    %30 = arith.divf %24, %29 : f32 loc(#loc35)
    %31 = arith.subf %cst, %30 : f32 loc(#loc36)
    %32 = arith.cmpf ogt, %22, %cst_2 : f32 loc(#loc37)
    %33 = arith.uitofp %32 : i1 to f32 loc(#loc38)
    %34 = arith.mulf %31, %33 : f32 loc(#loc39)
    %35 = tt.splat %34 : f32 -> tensor<1xf32, #blocked1> loc(#loc39)
    gpu.barrier loc(#loc40)
    %36 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc41)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.store %37, %35 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":27:26)
#loc3 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":31:30)
#loc4 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":31:35)
#loc5 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":32:30)
#loc6 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":32:35)
#loc7 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc8 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":34:40)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc10 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":35:23)
#loc11 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":36:12)
#loc12 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":37:23)
#loc13 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":38:27)
#loc14 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":39:18)
#loc15 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":40:23)
#loc16 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":41:19)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc21 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":43:45)
#loc22 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":44:19)
#loc24 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":46:45)
#loc26 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":48:45)
#loc27 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":50:20)
#loc28 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":51:20)
#loc29 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":52:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":54:42)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":55:20)
#loc36 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":57:20)
#loc37 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":58:20)
#loc38 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":59:21)
#loc39 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":60:20)
#loc40 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":62:4)
#loc41 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":63:28)
#loc42 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":63:63)
#loc43 = loc("inductor_cache/gb/cgbaesjlp74nfehye2gpxppdj4ieffs5dscyx35hfbk2lqkyn7wr.py":63:4)
#loc44 = loc(callsite(#loc7 at #loc8))
#loc45 = loc(callsite(#loc9 at #loc8))
#loc46 = loc(callsite(#loc17 at #loc18))
#loc48 = loc(callsite(#loc19 at #loc17))
#loc49 = loc(callsite(#loc20 at #loc21))
#loc50 = loc(callsite(#loc17 at #loc23))
#loc52 = loc(callsite(#loc20 at #loc24))
#loc53 = loc(callsite(#loc17 at #loc25))
#loc55 = loc(callsite(#loc20 at #loc26))
#loc56 = loc(callsite(#loc30 at #loc31))
#loc57 = loc(callsite(#loc32 at #loc31))
#loc58 = loc(callsite(#loc33 at #loc31))
#loc59 = loc(callsite(#loc34 at #loc31))
#loc60 = loc(callsite(#loc48 at #loc18))
#loc61 = loc(callsite(#loc48 at #loc23))
#loc62 = loc(callsite(#loc48 at #loc25))
