; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_clone_mul_sigmoid_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = sdiv i32 %11, 64, !dbg !15
  %14 = srem i32 %11, 16, !dbg !16
  %15 = srem i32 %11, 4, !dbg !17
  %16 = shl nsw i32 %13, 4, !dbg !18
  %17 = add nsw i32 %16, %14, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #1, !dbg !21
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !21
  %23 = bitcast i32 %21 to float, !dbg !21
  %24 = bitcast i32 %22 to float, !dbg !21
  %25 = fsub float 0.000000e+00, %23, !dbg !22
  %26 = fsub float 0.000000e+00, %24, !dbg !22
  %27 = fmul float %25, 0x3FF7154760000000, !dbg !26
  %28 = fmul float %26, 0x3FF7154760000000, !dbg !26
  %29 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !27
  %30 = shufflevector <2 x i32> %29, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %31 = sdiv <2 x i32> %30, <i32 16, i32 4>, !dbg !27
  %32 = srem <2 x i32> %31, splat (i32 4), !dbg !28
  %33 = extractelement <2 x i32> %31, i64 1, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !29
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !30
  %37 = bitcast i32 %36 to float, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !30
  %39 = bitcast i32 %38 to float, !dbg !30
  %40 = extractelement <2 x i32> %31, i64 0, !dbg !31
  %41 = shl nsw i32 %40, 2, !dbg !31
  %42 = add nsw i32 %41, %15, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !34
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %48 = bitcast i32 %46 to float, !dbg !34
  %49 = bitcast i32 %47 to float, !dbg !34
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %27) #1, !dbg !26
  %51 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %28) #1, !dbg !26
  %52 = fadd float %50, 1.000000e+00, !dbg !35
  %53 = fadd float %51, 1.000000e+00, !dbg !35
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !36
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #1, !dbg !36
  %56 = fmul float %54, %23, !dbg !37
  %57 = fmul float %55, %24, !dbg !37
  %58 = fsub float 0.000000e+00, %37, !dbg !38
  %59 = fsub float 0.000000e+00, %39, !dbg !38
  %60 = fmul float %58, 0x3FF7154760000000, !dbg !40
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #1, !dbg !40
  %62 = fmul float %59, 0x3FF7154760000000, !dbg !40
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #1, !dbg !40
  %64 = fadd float %61, 1.000000e+00, !dbg !41
  %65 = fadd float %63, 1.000000e+00, !dbg !41
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %64) #1, !dbg !42
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #1, !dbg !42
  %68 = fmul float %66, %37, !dbg !43
  %69 = fmul float %67, %39, !dbg !43
  %70 = fadd float %56, %68, !dbg !44
  %71 = fadd float %57, %69, !dbg !44
  %72 = fsub float 0.000000e+00, %48, !dbg !45
  %73 = fsub float 0.000000e+00, %49, !dbg !45
  %74 = fmul float %72, 0x3FF7154760000000, !dbg !47
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !47
  %76 = fmul float %73, 0x3FF7154760000000, !dbg !47
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #1, !dbg !47
  %78 = fadd float %75, 1.000000e+00, !dbg !48
  %79 = fadd float %77, 1.000000e+00, !dbg !48
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #1, !dbg !49
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #1, !dbg !49
  %82 = fmul float %80, %48, !dbg !50
  %83 = fmul float %81, %49, !dbg !50
  %84 = fadd float %70, %82, !dbg !51
  %85 = fadd float %71, %83, !dbg !51
  %86 = fmul float %84, 0x3FD5555560000000, !dbg !52
  %87 = fmul float %85, 0x3FD5555560000000, !dbg !52
  %88 = shl nsw <2 x i32> %32, <i32 2, i32 4>, !dbg !53
  %89 = shl nsw i32 %13, 6, !dbg !54
  %90 = add i32 %89, %15, !dbg !55
  %91 = extractelement <2 x i32> %88, i64 0, !dbg !56
  %92 = add i32 %90, %91, !dbg !56
  %93 = extractelement <2 x i32> %88, i64 1, !dbg !57
  %94 = add i32 %92, %93, !dbg !57
  %95 = sext i32 %94 to i64, !dbg !58
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !58
  %97 = bitcast float %86 to i32, !dbg !59
  %98 = bitcast float %87 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 %12) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cip4obzbgwylpqvpefgh6xxn3tuii36kawbuiknzmtrpywl34sf2.py", directory: "inductor_cache/ip")
!4 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_sigmoid_4", linkageName: "triton_poi_fused_add_clone_mul_sigmoid_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 38, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 30, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 34, column: 22, scope: !7)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 28, column: 19, scope: !7)
!28 = !DILocation(line: 30, column: 27, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 37, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!36 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !39)
!39 = !DILocation(line: 36, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !39)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !46)
!46 = !DILocation(line: 39, column: 22, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !46)
!50 = !DILocation(line: 40, column: 18, scope: !7)
!51 = !DILocation(line: 41, column: 19, scope: !7)
!52 = !DILocation(line: 43, column: 20, scope: !7)
!53 = !DILocation(line: 44, column: 32, scope: !7)
!54 = !DILocation(line: 44, column: 48, scope: !7)
!55 = !DILocation(line: 44, column: 30, scope: !7)
!56 = !DILocation(line: 44, column: 37, scope: !7)
!57 = !DILocation(line: 44, column: 45, scope: !7)
!58 = !DILocation(line: 44, column: 25, scope: !7)
!59 = !DILocation(line: 44, column: 60, scope: !7)
!60 = !DILocation(line: 44, column: 4, scope: !7)
