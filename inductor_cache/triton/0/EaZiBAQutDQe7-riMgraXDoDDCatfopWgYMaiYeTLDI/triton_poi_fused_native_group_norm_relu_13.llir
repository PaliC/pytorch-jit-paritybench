; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = sdiv i32 %17, 256, !dbg !14
  %20 = sdiv i32 %18, 256, !dbg !14
  %21 = srem i32 %19, 128, !dbg !15
  %22 = srem i32 %20, 128, !dbg !15
  %23 = sext i32 %17 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %18 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %33 = sdiv i32 %17, 1024, !dbg !20
  %34 = sdiv i32 %18, 1024, !dbg !20
  %35 = sext i32 %33 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = sext i32 %34 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %64 = bitcast i32 %63 to float, !dbg !24
  %65 = sext i32 %21 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !25
  %67 = sext i32 %22 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %7, i64 %65, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !32
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !32
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !32
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !32
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !32
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 1.024000e+03) #3, !dbg !33
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.024000e+03) #3, !dbg !33
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.024000e+03) #3, !dbg !33
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 1.024000e+03) #3, !dbg !33
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 1.024000e+03) #3, !dbg !33
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 1.024000e+03) #3, !dbg !33
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 1.024000e+03) #3, !dbg !33
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.024000e+03) #3, !dbg !33
  %115 = fadd float %107, 0x3EE4F8B580000000, !dbg !34
  %116 = fadd float %108, 0x3EE4F8B580000000, !dbg !34
  %117 = fadd float %109, 0x3EE4F8B580000000, !dbg !34
  %118 = fadd float %110, 0x3EE4F8B580000000, !dbg !34
  %119 = fadd float %111, 0x3EE4F8B580000000, !dbg !34
  %120 = fadd float %112, 0x3EE4F8B580000000, !dbg !34
  %121 = fadd float %113, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %114, 0x3EE4F8B580000000, !dbg !34
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %123, 0, !dbg !35
  br i1 %.not.i, label %126, label %124, !dbg !35

124:                                              ; preds = %11
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

126:                                              ; preds = %11
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %124, %126
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], !dbg !35
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %128, 0, !dbg !35
  br i1 %.not.i1, label %131, label %129, !dbg !35

129:                                              ; preds = %__nv_rsqrtf.exit
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !35
  br label %__nv_rsqrtf.exit3, !dbg !35

131:                                              ; preds = %__nv_rsqrtf.exit
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !35
  br label %__nv_rsqrtf.exit3, !dbg !35

__nv_rsqrtf.exit3:                                ; preds = %129, %131
  %.0.i2 = phi float [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i4 = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i4, label %136, label %134, !dbg !35

134:                                              ; preds = %__nv_rsqrtf.exit3
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

136:                                              ; preds = %__nv_rsqrtf.exit3
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

__nv_rsqrtf.exit6:                                ; preds = %134, %136
  %.0.i5 = phi float [ %135, %134 ], [ %137, %136 ], !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i7 = icmp eq i32 %138, 0, !dbg !35
  br i1 %.not.i7, label %141, label %139, !dbg !35

139:                                              ; preds = %__nv_rsqrtf.exit6
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !35
  br label %__nv_rsqrtf.exit9, !dbg !35

141:                                              ; preds = %__nv_rsqrtf.exit6
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !35
  br label %__nv_rsqrtf.exit9, !dbg !35

__nv_rsqrtf.exit9:                                ; preds = %139, %141
  %.0.i8 = phi float [ %140, %139 ], [ %142, %141 ], !dbg !35
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i10 = icmp eq i32 %143, 0, !dbg !35
  br i1 %.not.i10, label %146, label %144, !dbg !35

144:                                              ; preds = %__nv_rsqrtf.exit9
  %145 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

146:                                              ; preds = %__nv_rsqrtf.exit9
  %147 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

__nv_rsqrtf.exit12:                               ; preds = %144, %146
  %.0.i11 = phi float [ %145, %144 ], [ %147, %146 ], !dbg !35
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i13 = icmp eq i32 %148, 0, !dbg !35
  br i1 %.not.i13, label %151, label %149, !dbg !35

149:                                              ; preds = %__nv_rsqrtf.exit12
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %120), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

151:                                              ; preds = %__nv_rsqrtf.exit12
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %120), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

__nv_rsqrtf.exit15:                               ; preds = %149, %151
  %.0.i14 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %153, 0, !dbg !35
  br i1 %.not.i16, label %156, label %154, !dbg !35

154:                                              ; preds = %__nv_rsqrtf.exit15
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %121), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

156:                                              ; preds = %__nv_rsqrtf.exit15
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %121), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

__nv_rsqrtf.exit18:                               ; preds = %154, %156
  %.0.i17 = phi float [ %155, %154 ], [ %157, %156 ], !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i19 = icmp eq i32 %158, 0, !dbg !35
  br i1 %.not.i19, label %161, label %159, !dbg !35

159:                                              ; preds = %__nv_rsqrtf.exit18
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

161:                                              ; preds = %__nv_rsqrtf.exit18
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

__nv_rsqrtf.exit21:                               ; preds = %159, %161
  %.0.i20 = phi float [ %160, %159 ], [ %162, %161 ], !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %164 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %165 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !22
  %166 = insertelement <8 x i32> %165, i32 %45, i64 1, !dbg !22
  %167 = insertelement <8 x i32> %166, i32 %44, i64 2, !dbg !22
  %168 = insertelement <8 x i32> %167, i32 %43, i64 3, !dbg !22
  %169 = insertelement <8 x i32> %168, i32 %42, i64 4, !dbg !22
  %170 = insertelement <8 x i32> %169, i32 %41, i64 5, !dbg !22
  %171 = insertelement <8 x i32> %170, i32 %40, i64 6, !dbg !22
  %172 = insertelement <8 x i32> %171, i32 %39, i64 7, !dbg !22
  %173 = bitcast <8 x i32> %172 to <8 x float>, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %175 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %176 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %177 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %178 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %179 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %180 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %181 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !19
  %182 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %183 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !19
  %184 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %185 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !19
  %186 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %187 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !19
  %188 = insertelement <16 x i32> poison, i32 %106, i64 0, !dbg !32
  %189 = insertelement <16 x i32> %188, i32 %105, i64 1, !dbg !32
  %190 = insertelement <16 x i32> %189, i32 %104, i64 2, !dbg !32
  %191 = insertelement <16 x i32> %190, i32 %103, i64 3, !dbg !32
  %192 = insertelement <16 x i32> %191, i32 %102, i64 4, !dbg !32
  %193 = insertelement <16 x i32> %192, i32 %101, i64 5, !dbg !32
  %194 = insertelement <16 x i32> %193, i32 %100, i64 6, !dbg !32
  %195 = insertelement <16 x i32> %194, i32 %99, i64 7, !dbg !32
  %196 = insertelement <16 x i32> %195, i32 %86, i64 8, !dbg !32
  %197 = insertelement <16 x i32> %196, i32 %85, i64 9, !dbg !32
  %198 = insertelement <16 x i32> %197, i32 %84, i64 10, !dbg !32
  %199 = insertelement <16 x i32> %198, i32 %83, i64 11, !dbg !32
  %200 = insertelement <16 x i32> %199, i32 %82, i64 12, !dbg !32
  %201 = insertelement <16 x i32> %200, i32 %81, i64 13, !dbg !32
  %202 = insertelement <16 x i32> %201, i32 %80, i64 14, !dbg !32
  %203 = insertelement <16 x i32> %202, i32 %79, i64 15, !dbg !32
  %204 = bitcast <16 x i32> %203 to <16 x float>, !dbg !32
  %205 = insertelement <16 x i32> poison, i32 %96, i64 0, !dbg !30
  %206 = insertelement <16 x i32> %205, i32 %95, i64 1, !dbg !30
  %207 = insertelement <16 x i32> %206, i32 %94, i64 2, !dbg !30
  %208 = insertelement <16 x i32> %207, i32 %93, i64 3, !dbg !30
  %209 = insertelement <16 x i32> %208, i32 %92, i64 4, !dbg !30
  %210 = insertelement <16 x i32> %209, i32 %91, i64 5, !dbg !30
  %211 = insertelement <16 x i32> %210, i32 %90, i64 6, !dbg !30
  %212 = insertelement <16 x i32> %211, i32 %89, i64 7, !dbg !30
  %213 = insertelement <16 x i32> %212, i32 %76, i64 8, !dbg !30
  %214 = insertelement <16 x i32> %213, i32 %75, i64 9, !dbg !30
  %215 = insertelement <16 x i32> %214, i32 %74, i64 10, !dbg !30
  %216 = insertelement <16 x i32> %215, i32 %73, i64 11, !dbg !30
  %217 = insertelement <16 x i32> %216, i32 %72, i64 12, !dbg !30
  %218 = insertelement <16 x i32> %217, i32 %71, i64 13, !dbg !30
  %219 = insertelement <16 x i32> %218, i32 %70, i64 14, !dbg !30
  %220 = insertelement <16 x i32> %219, i32 %69, i64 15, !dbg !30
  %221 = bitcast <16 x i32> %220 to <16 x float>, !dbg !30
  %222 = insertelement <8 x i32> poison, i32 %163, i64 0, !dbg !17
  %223 = insertelement <8 x i32> %222, i32 %174, i64 1, !dbg !17
  %224 = insertelement <8 x i32> %223, i32 %176, i64 2, !dbg !17
  %225 = insertelement <8 x i32> %224, i32 %178, i64 3, !dbg !17
  %226 = insertelement <8 x i32> %225, i32 %180, i64 4, !dbg !17
  %227 = insertelement <8 x i32> %226, i32 %182, i64 5, !dbg !17
  %228 = insertelement <8 x i32> %227, i32 %184, i64 6, !dbg !17
  %229 = insertelement <8 x i32> %228, i32 %186, i64 7, !dbg !17
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !17
  %231 = insertelement <8 x i32> poison, i32 %164, i64 0, !dbg !19
  %232 = insertelement <8 x i32> %231, i32 %175, i64 1, !dbg !19
  %233 = insertelement <8 x i32> %232, i32 %177, i64 2, !dbg !19
  %234 = insertelement <8 x i32> %233, i32 %179, i64 3, !dbg !19
  %235 = insertelement <8 x i32> %234, i32 %181, i64 4, !dbg !19
  %236 = insertelement <8 x i32> %235, i32 %183, i64 5, !dbg !19
  %237 = insertelement <8 x i32> %236, i32 %185, i64 6, !dbg !19
  %238 = insertelement <8 x i32> %237, i32 %187, i64 7, !dbg !19
  %239 = bitcast <8 x i32> %238 to <8 x float>, !dbg !19
  %240 = fadd <8 x float> %230, %239, !dbg !36
  %241 = fsub <8 x float> %240, %173, !dbg !37
  %242 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !38
  %243 = insertelement <8 x float> %242, float %.0.i17, i64 1, !dbg !38
  %244 = insertelement <8 x float> %243, float %.0.i14, i64 2, !dbg !38
  %245 = insertelement <8 x float> %244, float %.0.i11, i64 3, !dbg !38
  %246 = insertelement <8 x float> %245, float %.0.i8, i64 4, !dbg !38
  %247 = insertelement <8 x float> %246, float %.0.i5, i64 5, !dbg !38
  %248 = insertelement <8 x float> %247, float %.0.i2, i64 6, !dbg !38
  %249 = insertelement <8 x float> %248, float %.0.i, i64 7, !dbg !38
  %250 = fmul <8 x float> %241, %249, !dbg !38
  %251 = shufflevector <8 x float> %250, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !38
  %252 = fmul <16 x float> %251, %221, !dbg !39
  %253 = fadd <16 x float> %252, %204, !dbg !40
  %254 = fcmp olt <16 x float> %253, zeroinitializer, !dbg !41
  %255 = extractelement <16 x i1> %254, i64 15, !dbg !45
  %256 = extractelement <16 x i1> %254, i64 14, !dbg !45
  %257 = extractelement <16 x i1> %254, i64 13, !dbg !45
  %258 = extractelement <16 x i1> %254, i64 12, !dbg !45
  %259 = extractelement <16 x i1> %254, i64 11, !dbg !45
  %260 = extractelement <16 x i1> %254, i64 10, !dbg !45
  %261 = extractelement <16 x i1> %254, i64 9, !dbg !45
  %262 = extractelement <16 x i1> %254, i64 8, !dbg !45
  %263 = extractelement <16 x i1> %254, i64 7, !dbg !47
  %264 = extractelement <16 x i1> %254, i64 6, !dbg !47
  %265 = extractelement <16 x i1> %254, i64 5, !dbg !47
  %266 = extractelement <16 x i1> %254, i64 4, !dbg !47
  %267 = extractelement <16 x i1> %254, i64 3, !dbg !47
  %268 = extractelement <16 x i1> %254, i64 2, !dbg !47
  %269 = extractelement <16 x i1> %254, i64 1, !dbg !47
  %270 = extractelement <16 x i1> %254, i64 0, !dbg !47
  %271 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !48
  %272 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !48
  %bc = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %273 = extractelement <16 x i32> %bc, i64 15, !dbg !49
  %274 = select i1 %255, i32 0, i32 %273, !dbg !45
  %bc22 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %275 = extractelement <16 x i32> %bc22, i64 14, !dbg !49
  %276 = select i1 %256, i32 0, i32 %275, !dbg !45
  %bc23 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %277 = extractelement <16 x i32> %bc23, i64 13, !dbg !49
  %278 = select i1 %257, i32 0, i32 %277, !dbg !45
  %bc24 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %279 = extractelement <16 x i32> %bc24, i64 12, !dbg !49
  %280 = select i1 %258, i32 0, i32 %279, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %274, i32 %276, i32 %278, i32 %280, ptr addrspace(1) %271, i1 true) #3, !dbg !49
  %bc25 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %281 = extractelement <16 x i32> %bc25, i64 11, !dbg !49
  %282 = select i1 %259, i32 0, i32 %281, !dbg !45
  %bc26 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %283 = extractelement <16 x i32> %bc26, i64 10, !dbg !49
  %284 = select i1 %260, i32 0, i32 %283, !dbg !45
  %bc27 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %285 = extractelement <16 x i32> %bc27, i64 9, !dbg !49
  %286 = select i1 %261, i32 0, i32 %285, !dbg !45
  %bc28 = bitcast <16 x float> %253 to <16 x i32>, !dbg !49
  %287 = extractelement <16 x i32> %bc28, i64 8, !dbg !49
  %288 = select i1 %262, i32 0, i32 %287, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %284, i32 %286, i32 %288, ptr addrspace(1) %272, i1 true) #3, !dbg !49
  %289 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !50
  %290 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !50
  %bc29 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %291 = extractelement <16 x i32> %bc29, i64 7, !dbg !51
  %292 = select i1 %263, i32 0, i32 %291, !dbg !47
  %bc30 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %293 = extractelement <16 x i32> %bc30, i64 6, !dbg !51
  %294 = select i1 %264, i32 0, i32 %293, !dbg !47
  %bc31 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %295 = extractelement <16 x i32> %bc31, i64 5, !dbg !51
  %296 = select i1 %265, i32 0, i32 %295, !dbg !47
  %bc32 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %297 = extractelement <16 x i32> %bc32, i64 4, !dbg !51
  %298 = select i1 %266, i32 0, i32 %297, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %294, i32 %296, i32 %298, ptr addrspace(1) %289, i1 true) #3, !dbg !51
  %bc33 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %299 = extractelement <16 x i32> %bc33, i64 3, !dbg !51
  %300 = select i1 %267, i32 0, i32 %299, !dbg !47
  %bc34 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %301 = extractelement <16 x i32> %bc34, i64 2, !dbg !51
  %302 = select i1 %268, i32 0, i32 %301, !dbg !47
  %bc35 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %303 = extractelement <16 x i32> %bc35, i64 1, !dbg !51
  %304 = select i1 %269, i32 0, i32 %303, !dbg !47
  %bc36 = bitcast <16 x float> %253 to <16 x i32>, !dbg !51
  %305 = extractelement <16 x i32> %bc36, i64 0, !dbg !51
  %306 = select i1 %270, i32 0, i32 %305, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %302, i32 %304, i32 %306, ptr addrspace(1) %290, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co5c3z4qdqk7mmdlusrhjxgumbxh5d2gxhphe2qtfrnz7bil2dn3.py", directory: "inductor_cache/o5")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_13", linkageName: "triton_poi_fused_native_group_norm_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 46, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 37, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
