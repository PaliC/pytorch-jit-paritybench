; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = srem i32 %9, 64, !dbg !13
  %19 = shl i32 %9, 13, !dbg !14
  %20 = shl nsw i32 %18, 1, !dbg !15
  %21 = or disjoint i32 %19, %13
  %22 = shl nuw nsw i32 %13, 1
  %23 = zext nneg i32 %22 to i64
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %23
  %25 = or disjoint i32 %22, 2
  %26 = zext nneg i32 %25 to i64
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %26
  %28 = or disjoint i32 %22, 4
  %29 = zext nneg i32 %28 to i64
  %30 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %29
  %31 = or disjoint i32 %22, 6
  %32 = zext nneg i32 %31 to i64
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %32
  %34 = shl nuw nsw i32 %14, 1
  %35 = zext nneg i32 %34 to i64
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %35
  %37 = shl nuw nsw i32 %15, 1
  %38 = zext nneg i32 %37 to i64
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38
  %40 = shl nuw nsw i32 %16, 1
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = shl nuw nsw i32 %17, 1
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %14 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %15 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %16 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %17 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = zext nneg i32 %13 to i64
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %54
  %56 = sext i32 %21 to i64, !dbg !16
  %57 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 4
  %58 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 8
  %59 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 12
  br label %60, !dbg !16

60:                                               ; preds = %8, %._crit_edge
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %8 ], [ %173, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %8 ], [ %174, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %8 ], [ %175, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %8 ], [ %176, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %8 ], [ %169, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %8 ], [ %170, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %8 ], [ %171, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %8 ], [ %172, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %8 ], [ %165, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %8 ], [ %166, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %8 ], [ %167, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %8 ], [ %168, %._crit_edge ]
  %73 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %74 = lshr i32 %73, 12, !dbg !17
  %75 = add nuw nsw i64 %indvars.iv, %56, !dbg !18
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %82, i1 true) #3, !dbg !20
  %83 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %83, i1 true) #3, !dbg !20
  %84 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %84, i1 true) #3, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %85, i1 true) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %86 = load float, ptr addrspace(3) %36, align 8, !dbg !20
  %87 = load float, ptr addrspace(3) %39, align 8, !dbg !20
  %88 = load float, ptr addrspace(3) %42, align 8, !dbg !20
  %89 = load float, ptr addrspace(3) %45, align 8, !dbg !20
  %90 = add nuw nsw i32 %74, %20, !dbg !21
  %91 = sext i32 %90 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %94 = bitcast i32 %93 to float, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %98 = bitcast i32 %97 to float, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %100 = bitcast i32 %99 to float, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !24
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !25
  %107 = bitcast i32 %103 to float, !dbg !25
  %108 = bitcast i32 %104 to float, !dbg !25
  %109 = bitcast i32 %105 to float, !dbg !25
  %110 = bitcast i32 %106 to float, !dbg !25
  %111 = fadd float %86, %94, !dbg !26
  %112 = fadd float %87, %96, !dbg !26
  %113 = fadd float %88, %98, !dbg !26
  %114 = fadd float %89, %100, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %115 = bitcast float %111 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %115, i1 true) #3, !dbg !26
  %116 = bitcast float %112 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %116, i1 true) #3, !dbg !26
  %117 = bitcast float %113 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %117, i1 true) #3, !dbg !26
  %118 = bitcast float %114 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %118, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %119 = load float, ptr addrspace(3) %55, align 16, !dbg !26
  %120 = load float, ptr addrspace(3) %57, align 4, !dbg !26
  %121 = load float, ptr addrspace(3) %58, align 8, !dbg !26
  %122 = load float, ptr addrspace(3) %59, align 4, !dbg !26
  %123 = fadd float %119, %107, !dbg !27
  %124 = fadd float %120, %108, !dbg !27
  %125 = fadd float %121, %109, !dbg !27
  %126 = fadd float %122, %110, !dbg !27
  %127 = icmp eq i64 %indvars.iv, 0, !dbg !28
  br i1 %127, label %._crit_edge, label %128, !dbg !29

128:                                              ; preds = %60
  %129 = fsub float %123, %69, !dbg !33
  %130 = fsub float %124, %70, !dbg !33
  %131 = fsub float %125, %71, !dbg !33
  %132 = fsub float %126, %72, !dbg !33
  %133 = fadd float %61, 1.000000e+00, !dbg !34
  %134 = fadd float %62, 1.000000e+00, !dbg !34
  %135 = fadd float %63, 1.000000e+00, !dbg !34
  %136 = fadd float %64, 1.000000e+00, !dbg !34
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %133) #3, !dbg !35
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %134) #3, !dbg !35
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %135) #3, !dbg !35
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %136) #3, !dbg !35
  %141 = fadd float %69, %137, !dbg !36
  %142 = fadd float %70, %138, !dbg !36
  %143 = fadd float %71, %139, !dbg !36
  %144 = fadd float %72, %140, !dbg !36
  %145 = fsub float %123, %141, !dbg !37
  %146 = fsub float %124, %142, !dbg !37
  %147 = fsub float %125, %143, !dbg !37
  %148 = fsub float %126, %144, !dbg !37
  %149 = fmul float %129, %145, !dbg !38
  %150 = fmul float %130, %146, !dbg !38
  %151 = fmul float %131, %147, !dbg !38
  %152 = fmul float %132, %148, !dbg !38
  %153 = fadd float %65, %149, !dbg !39
  %154 = fadd float %66, %150, !dbg !39
  %155 = fadd float %67, %151, !dbg !39
  %156 = fadd float %68, %152, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %60, %128
  %157 = phi float [ %153, %128 ], [ 0.000000e+00, %60 ], !dbg !32
  %158 = phi float [ %154, %128 ], [ 0.000000e+00, %60 ], !dbg !32
  %159 = phi float [ %155, %128 ], [ 0.000000e+00, %60 ], !dbg !32
  %160 = phi float [ %156, %128 ], [ 0.000000e+00, %60 ], !dbg !32
  %.pn10 = phi float [ %141, %128 ], [ %123, %60 ]
  %.pn8 = phi float [ %142, %128 ], [ %124, %60 ]
  %.pn6 = phi float [ %143, %128 ], [ %125, %60 ]
  %.pn4 = phi float [ %144, %128 ], [ %126, %60 ]
  %161 = phi float [ %133, %128 ], [ 1.000000e+00, %60 ], !dbg !32
  %162 = phi float [ %134, %128 ], [ 1.000000e+00, %60 ], !dbg !32
  %163 = phi float [ %135, %128 ], [ 1.000000e+00, %60 ], !dbg !32
  %164 = phi float [ %136, %128 ], [ 1.000000e+00, %60 ], !dbg !32
  %165 = select i1 %10, float %.pn10, float %69, !dbg !40
  %166 = select i1 %10, float %.pn8, float %70, !dbg !40
  %167 = select i1 %10, float %.pn6, float %71, !dbg !40
  %168 = select i1 %10, float %.pn4, float %72, !dbg !40
  %169 = select i1 %10, float %157, float %65, !dbg !41
  %170 = select i1 %10, float %158, float %66, !dbg !41
  %171 = select i1 %10, float %159, float %67, !dbg !41
  %172 = select i1 %10, float %160, float %68, !dbg !41
  %173 = select i1 %10, float %161, float %61, !dbg !42
  %174 = select i1 %10, float %162, float %62, !dbg !42
  %175 = select i1 %10, float %163, float %63, !dbg !42
  %176 = select i1 %10, float %164, float %64, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %115, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %116, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %117, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %118, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %.extract = load i32, ptr addrspace(3) %55, align 16, !dbg !43
  %.extract15 = load i32, ptr addrspace(3) %57, align 4, !dbg !43
  %.extract16 = load i32, ptr addrspace(3) %58, align 8, !dbg !43
  %.extract17 = load i32, ptr addrspace(3) %59, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %76, i1 %10) #3, !dbg !43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %177 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %177, label %60, label %178, !dbg !16

178:                                              ; preds = %._crit_edge
  %179 = lshr i32 %11, 5, !dbg !12
  %180 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %181 = fsub float %166, %165, !dbg !46
  %182 = fadd float %173, %174, !dbg !48
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !49
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %182) #3, !dbg !50
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !51
  %186 = fmul float %181, %185, !dbg !52
  %187 = fadd float %165, %186, !dbg !53
  %188 = fadd float %169, %170, !dbg !54
  %189 = fmul float %181, %181, !dbg !55
  %190 = fmul float %189, %173, !dbg !56
  %191 = fmul float %190, %185, !dbg !57
  %192 = fadd float %188, %191, !dbg !58
  %193 = fsub float %167, %187, !dbg !46
  %194 = fadd float %175, %182, !dbg !48
  %195 = fcmp oeq float %194, 0.000000e+00, !dbg !49
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %194) #3, !dbg !50
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !51
  %198 = fmul float %197, %193, !dbg !52
  %199 = fadd float %187, %198, !dbg !53
  %200 = fadd float %171, %192, !dbg !54
  %201 = fmul float %193, %193, !dbg !55
  %202 = fmul float %182, %201, !dbg !56
  %203 = fmul float %197, %202, !dbg !57
  %204 = fadd float %200, %203, !dbg !58
  %205 = fsub float %168, %199, !dbg !46
  %206 = fadd float %176, %194, !dbg !48
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !49
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %206) #3, !dbg !50
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !51
  %210 = fmul float %209, %205, !dbg !52
  %211 = fadd float %199, %210, !dbg !53
  %212 = fadd float %172, %204, !dbg !54
  %213 = fmul float %205, %205, !dbg !55
  %214 = fmul float %194, %213, !dbg !56
  %215 = fmul float %209, %214, !dbg !57
  %216 = fadd float %212, %215, !dbg !58
  %217 = bitcast float %211 to i32, !dbg !44
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = bitcast float %216 to i32, !dbg !44
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !44
  %222 = bitcast i32 %221 to float, !dbg !44
  %223 = bitcast float %206 to i32, !dbg !44
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !44
  %225 = bitcast i32 %224 to float, !dbg !44
  %226 = fsub float %219, %211, !dbg !46
  %227 = fadd float %206, %225, !dbg !48
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !49
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %227) #3, !dbg !50
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !51
  %231 = fmul float %230, %226, !dbg !52
  %232 = fadd float %211, %231, !dbg !53
  %233 = fadd float %216, %222, !dbg !54
  %234 = fmul float %226, %226, !dbg !55
  %235 = fmul float %206, %234, !dbg !56
  %236 = fmul float %230, %235, !dbg !57
  %237 = fadd float %233, %236, !dbg !58
  %238 = bitcast float %232 to i32, !dbg !44
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !44
  %240 = bitcast i32 %239 to float, !dbg !44
  %241 = bitcast float %237 to i32, !dbg !44
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !44
  %243 = bitcast i32 %242 to float, !dbg !44
  %244 = bitcast float %227 to i32, !dbg !44
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !44
  %246 = bitcast i32 %245 to float, !dbg !44
  %247 = fsub float %240, %232, !dbg !46
  %248 = fadd float %227, %246, !dbg !48
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !49
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #3, !dbg !50
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !51
  %252 = fmul float %247, %251, !dbg !52
  %253 = fadd float %232, %252, !dbg !53
  %254 = fadd float %237, %243, !dbg !54
  %255 = fmul float %247, %247, !dbg !55
  %256 = fmul float %227, %255, !dbg !56
  %257 = fmul float %251, %256, !dbg !57
  %258 = fadd float %254, %257, !dbg !58
  %259 = bitcast float %253 to i32, !dbg !44
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !44
  %261 = bitcast i32 %260 to float, !dbg !44
  %262 = bitcast float %258 to i32, !dbg !44
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !44
  %264 = bitcast i32 %263 to float, !dbg !44
  %265 = bitcast float %248 to i32, !dbg !44
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !44
  %267 = bitcast i32 %266 to float, !dbg !44
  %268 = fsub float %261, %253, !dbg !46
  %269 = fadd float %248, %267, !dbg !48
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !49
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #3, !dbg !50
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !51
  %273 = fmul float %268, %272, !dbg !52
  %274 = fadd float %253, %273, !dbg !53
  %275 = fadd float %258, %264, !dbg !54
  %276 = fmul float %268, %268, !dbg !55
  %277 = fmul float %248, %276, !dbg !56
  %278 = fmul float %272, %277, !dbg !57
  %279 = fadd float %275, %278, !dbg !58
  %280 = bitcast float %274 to i32, !dbg !44
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !44
  %282 = bitcast i32 %281 to float, !dbg !44
  %283 = bitcast float %279 to i32, !dbg !44
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !44
  %285 = bitcast i32 %284 to float, !dbg !44
  %286 = bitcast float %269 to i32, !dbg !44
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !44
  %288 = bitcast i32 %287 to float, !dbg !44
  %289 = fsub float %282, %274, !dbg !46
  %290 = fadd float %269, %288, !dbg !48
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !49
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #3, !dbg !50
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !51
  %294 = fmul float %289, %293, !dbg !52
  %295 = fadd float %274, %294, !dbg !53
  %296 = fadd float %279, %285, !dbg !54
  %297 = fmul float %289, %289, !dbg !55
  %298 = fmul float %269, %297, !dbg !56
  %299 = fmul float %293, %298, !dbg !57
  %300 = fadd float %296, %299, !dbg !58
  %301 = bitcast float %295 to i32, !dbg !44
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !44
  %303 = bitcast i32 %302 to float, !dbg !44
  %304 = bitcast float %300 to i32, !dbg !44
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !44
  %306 = bitcast i32 %305 to float, !dbg !44
  %307 = bitcast float %290 to i32, !dbg !44
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !44
  %309 = bitcast i32 %308 to float, !dbg !44
  %310 = fsub float %303, %295, !dbg !46
  %311 = fadd float %290, %309, !dbg !48
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !49
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #3, !dbg !50
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !51
  %315 = fmul float %310, %314, !dbg !52
  %316 = fadd float %295, %315, !dbg !53
  %317 = fadd float %300, %306, !dbg !54
  %318 = fmul float %310, %310, !dbg !55
  %319 = fmul float %290, %318, !dbg !56
  %320 = fmul float %314, %319, !dbg !57
  %321 = fadd float %317, %320, !dbg !58
  %322 = icmp eq i32 %180, 0, !dbg !44
  %323 = and i32 %179, 15, !dbg !44
  %324 = zext nneg i32 %323 to i64, !dbg !44
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !44
  %326 = bitcast float %316 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 %322) #3, !dbg !44
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %324, !dbg !44
  %328 = bitcast float %321 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 %322) #3, !dbg !44
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %324, !dbg !44
  %330 = bitcast float %311 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 %322) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %331 = icmp slt i32 %11, 16, !dbg !44
  %332 = sext i32 %11 to i64, !dbg !44
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !44
  %334 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %331) #3, !dbg !44
  %335 = bitcast i32 %334 to float, !dbg !44
  %336 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %332, !dbg !44
  %337 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %336, i1 %331) #3, !dbg !44
  %338 = bitcast i32 %337 to float, !dbg !44
  %339 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %332, !dbg !44
  %340 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %339, i1 %331) #3, !dbg !44
  %341 = bitcast i32 %340 to float, !dbg !44
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !44
  %343 = bitcast i32 %342 to float, !dbg !44
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 8, i32 31), !dbg !44
  %345 = bitcast i32 %344 to float, !dbg !44
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !44
  %347 = bitcast i32 %346 to float, !dbg !44
  %348 = fsub float %343, %335, !dbg !46
  %349 = fadd float %341, %347, !dbg !48
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !49
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #3, !dbg !50
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !51
  %353 = fmul float %348, %352, !dbg !52
  %354 = fadd float %353, %335, !dbg !53
  %355 = fadd float %338, %345, !dbg !54
  %356 = fmul float %348, %348, !dbg !55
  %357 = fmul float %356, %341, !dbg !56
  %358 = fmul float %357, %352, !dbg !57
  %359 = fadd float %355, %358, !dbg !58
  %360 = bitcast float %354 to i32, !dbg !44
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !44
  %362 = bitcast i32 %361 to float, !dbg !44
  %363 = bitcast float %359 to i32, !dbg !44
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !44
  %365 = bitcast i32 %364 to float, !dbg !44
  %366 = bitcast float %349 to i32, !dbg !44
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !44
  %368 = bitcast i32 %367 to float, !dbg !44
  %369 = fsub float %362, %354, !dbg !46
  %370 = fadd float %349, %368, !dbg !48
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !49
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #3, !dbg !50
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !51
  %374 = fmul float %369, %373, !dbg !52
  %375 = fadd float %354, %374, !dbg !53
  %376 = fadd float %359, %365, !dbg !54
  %377 = fmul float %369, %369, !dbg !55
  %378 = fmul float %349, %377, !dbg !56
  %379 = fmul float %373, %378, !dbg !57
  %380 = fadd float %376, %379, !dbg !58
  %381 = bitcast float %375 to i32, !dbg !44
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !44
  %383 = bitcast i32 %382 to float, !dbg !44
  %384 = bitcast float %380 to i32, !dbg !44
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !44
  %386 = bitcast i32 %385 to float, !dbg !44
  %387 = bitcast float %370 to i32, !dbg !44
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !44
  %389 = bitcast i32 %388 to float, !dbg !44
  %390 = fsub float %383, %375, !dbg !46
  %391 = fadd float %370, %389, !dbg !48
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !49
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #3, !dbg !50
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !51
  %395 = fmul float %390, %394, !dbg !52
  %396 = fadd float %375, %395, !dbg !53
  %397 = fadd float %380, %386, !dbg !54
  %398 = fmul float %390, %390, !dbg !55
  %399 = fmul float %370, %398, !dbg !56
  %400 = fmul float %394, %399, !dbg !57
  %401 = fadd float %397, %400, !dbg !58
  %402 = bitcast float %396 to i32, !dbg !44
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !44
  %404 = bitcast i32 %403 to float, !dbg !44
  %405 = bitcast float %401 to i32, !dbg !44
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !44
  %407 = bitcast i32 %406 to float, !dbg !44
  %408 = bitcast float %391 to i32, !dbg !44
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 1, i32 31), !dbg !44
  %410 = bitcast i32 %409 to float, !dbg !44
  %411 = fsub float %404, %396, !dbg !46
  %412 = fadd float %391, %410, !dbg !48
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !49
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %410, float %412) #3, !dbg !50
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !51
  %416 = fmul float %411, %415, !dbg !52
  %417 = fadd float %396, %416, !dbg !53
  %418 = fadd float %401, %407, !dbg !54
  %419 = fmul float %411, %411, !dbg !55
  %420 = fmul float %391, %419, !dbg !56
  %421 = fmul float %415, %420, !dbg !57
  %422 = fadd float %418, %421, !dbg !58
  %423 = and i32 %11, 15, !dbg !44
  %424 = icmp eq i32 %423, 0, !dbg !44
  %425 = and i1 %331, %424, !dbg !44
  %426 = bitcast float %417 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %426, i1 %425) #3, !dbg !44
  %427 = bitcast float %422 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %427, i1 %425) #3, !dbg !44
  %428 = bitcast float %412 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %428, i1 %425) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %429 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %430 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %431 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !44
  %432 = sext i32 %9 to i64, !dbg !59
  %433 = getelementptr float, ptr addrspace(1) %3, i64 %432, !dbg !59
  %434 = icmp eq i32 %14, 0, !dbg !60
  %435 = and i1 %434, %10, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %433, i1 %435) #3, !dbg !60
  %436 = getelementptr float, ptr addrspace(1) %4, i64 %432, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %436, i1 %435) #3, !dbg !62
  %437 = getelementptr float, ptr addrspace(1) %5, i64 %432, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %437, i1 %435) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctwk7onfbb2otkkdko3j42tc3y2ip4cmd3bfn5rd2ufidotbq3fe.py", directory: "inductor_cache/tw")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_3, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_3", linkageName: "triton_red_fused_convolution_native_group_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 43, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 46, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 49, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 43, column: 62, scope: !7)
!29 = !DILocation(line: 178, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 43, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 45, column: 60, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 47, column: 64, scope: !7)
!43 = !DILocation(line: 48, column: 53, scope: !7)
!44 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 50, column: 41, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!48 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 57, column: 4, scope: !7)
