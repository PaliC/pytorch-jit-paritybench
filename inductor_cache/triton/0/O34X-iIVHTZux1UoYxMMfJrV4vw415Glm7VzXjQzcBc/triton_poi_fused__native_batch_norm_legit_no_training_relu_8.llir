; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %22, 256, !dbg !19
  %27 = icmp slt i32 %23, 256, !dbg !19
  %28 = icmp slt i32 %24, 256, !dbg !19
  %29 = icmp slt i32 %25, 256, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %30 = sdiv i32 %.frozen, 64, !dbg !20
  %31 = mul i32 %30, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %16, 64, !dbg !21
  %33 = shl i32 %22, 6, !dbg !22
  %34 = shl i32 %23, 6, !dbg !22
  %35 = shl i32 %24, 6, !dbg !22
  %36 = shl i32 %25, 6, !dbg !22
  %37 = shl i32 %30, 14, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %38, %33, !dbg !25
  %40 = add i32 %38, %34, !dbg !25
  %41 = add i32 %38, %35, !dbg !25
  %42 = add i32 %38, %36, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %17, %26, !dbg !27
  %52 = and i1 %27, %17, !dbg !27
  %53 = and i1 %28, %17, !dbg !27
  %54 = and i1 %29, %17, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %12, 1020, !dbg !28
  %76 = lshr i32 %12, 6, !dbg !28
  %77 = and i32 %76, 12, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 1040, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 2080, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 3120, !dbg !28
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %89 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %93 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %97 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  %100 = sext i32 %32 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #4, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #4, !dbg !36
  %110 = fadd float %105, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %8
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = and i32 %12, 12, !dbg !12
  %124 = or disjoint i32 %20, %123, !dbg !18
  %125 = icmp slt i32 %124, 256, !dbg !19
  %126 = lshr i32 %11, 2, !dbg !12
  %127 = and i32 %126, 63, !dbg !12
  %128 = or disjoint i32 %127, %10, !dbg !13
  %129 = or disjoint i32 %128, 192, !dbg !13
  %130 = icmp slt i32 %129, 256, !dbg !14
  %131 = and i1 %130, %125, !dbg !27
  %132 = or disjoint i32 %128, 128, !dbg !13
  %133 = icmp slt i32 %132, 256, !dbg !14
  %134 = and i1 %133, %125, !dbg !27
  %135 = or disjoint i32 %128, 64, !dbg !13
  %136 = icmp slt i32 %135, 256, !dbg !14
  %137 = and i1 %136, %125, !dbg !27
  %138 = icmp slt i32 %128, 256, !dbg !14
  %139 = and i1 %138, %125, !dbg !27
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %141 = insertelement <16 x float> poison, float %99, i64 0, !dbg !40
  %142 = insertelement <16 x float> %141, float %98, i64 1, !dbg !40
  %143 = insertelement <16 x float> %142, float %97, i64 2, !dbg !40
  %144 = insertelement <16 x float> %143, float %96, i64 3, !dbg !40
  %145 = insertelement <16 x float> %144, float %95, i64 4, !dbg !40
  %146 = insertelement <16 x float> %145, float %94, i64 5, !dbg !40
  %147 = insertelement <16 x float> %146, float %93, i64 6, !dbg !40
  %148 = insertelement <16 x float> %147, float %92, i64 7, !dbg !40
  %149 = insertelement <16 x float> %148, float %91, i64 8, !dbg !40
  %150 = insertelement <16 x float> %149, float %90, i64 9, !dbg !40
  %151 = insertelement <16 x float> %150, float %89, i64 10, !dbg !40
  %152 = insertelement <16 x float> %151, float %88, i64 11, !dbg !40
  %153 = insertelement <16 x float> %152, float %87, i64 12, !dbg !40
  %154 = insertelement <16 x float> %153, float %85, i64 13, !dbg !40
  %155 = insertelement <16 x float> %154, float %83, i64 14, !dbg !40
  %156 = insertelement <16 x float> %155, float %81, i64 15, !dbg !40
  %157 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %158 = bitcast <16 x i32> %157 to <16 x float>, !dbg !40
  %159 = shufflevector <16 x float> %158, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %160 = fsub <16 x float> %156, %159, !dbg !40
  %161 = insertelement <16 x float> poison, float %140, i64 0, !dbg !41
  %162 = shufflevector <16 x float> %161, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %163 = fmul <16 x float> %160, %162, !dbg !41
  %164 = insertelement <16 x i32> poison, i32 %107, i64 0, !dbg !42
  %165 = bitcast <16 x i32> %164 to <16 x float>, !dbg !42
  %166 = shufflevector <16 x float> %165, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %167 = fmul <16 x float> %163, %166, !dbg !42
  %168 = insertelement <16 x i32> poison, i32 %109, i64 0, !dbg !43
  %169 = bitcast <16 x i32> %168 to <16 x float>, !dbg !43
  %170 = shufflevector <16 x float> %169, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %171 = fadd <16 x float> %167, %170, !dbg !43
  %172 = fcmp olt <16 x float> %171, zeroinitializer, !dbg !44
  %173 = extractelement <16 x i1> %172, i64 15, !dbg !48
  %174 = extractelement <16 x float> %171, i64 15, !dbg !48
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !48
  %176 = extractelement <16 x i1> %172, i64 14, !dbg !48
  %177 = extractelement <16 x float> %171, i64 14, !dbg !48
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !48
  %179 = extractelement <16 x i1> %172, i64 13, !dbg !48
  %180 = extractelement <16 x float> %171, i64 13, !dbg !48
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !48
  %182 = extractelement <16 x i1> %172, i64 12, !dbg !48
  %183 = extractelement <16 x float> %171, i64 12, !dbg !48
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !48
  %185 = extractelement <16 x i1> %172, i64 11, !dbg !48
  %186 = extractelement <16 x float> %171, i64 11, !dbg !48
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !48
  %188 = extractelement <16 x i1> %172, i64 10, !dbg !48
  %189 = extractelement <16 x float> %171, i64 10, !dbg !48
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !48
  %191 = extractelement <16 x i1> %172, i64 9, !dbg !48
  %192 = extractelement <16 x float> %171, i64 9, !dbg !48
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !48
  %194 = extractelement <16 x i1> %172, i64 8, !dbg !48
  %195 = extractelement <16 x float> %171, i64 8, !dbg !48
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !48
  %197 = extractelement <16 x i1> %172, i64 7, !dbg !48
  %198 = extractelement <16 x float> %171, i64 7, !dbg !48
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !48
  %200 = extractelement <16 x i1> %172, i64 6, !dbg !48
  %201 = extractelement <16 x float> %171, i64 6, !dbg !48
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !48
  %203 = extractelement <16 x i1> %172, i64 5, !dbg !48
  %204 = extractelement <16 x float> %171, i64 5, !dbg !48
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !48
  %206 = extractelement <16 x i1> %172, i64 4, !dbg !48
  %207 = extractelement <16 x float> %171, i64 4, !dbg !48
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !48
  %209 = extractelement <16 x i1> %172, i64 3, !dbg !48
  %210 = extractelement <16 x float> %171, i64 3, !dbg !48
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !48
  %212 = extractelement <16 x i1> %172, i64 2, !dbg !48
  %213 = extractelement <16 x float> %171, i64 2, !dbg !48
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !48
  %215 = extractelement <16 x i1> %172, i64 1, !dbg !48
  %216 = extractelement <16 x float> %171, i64 1, !dbg !48
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !48
  %218 = extractelement <16 x i1> %172, i64 0, !dbg !48
  %219 = extractelement <16 x float> %171, i64 0, !dbg !48
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !48
  %221 = shl i32 %128, 8, !dbg !49
  %222 = shl i32 %135, 8, !dbg !49
  %223 = shl i32 %132, 8, !dbg !49
  %224 = shl i32 %129, 8, !dbg !49
  %225 = add i32 %124, %221, !dbg !50
  %226 = add i32 %124, %222, !dbg !50
  %227 = add i32 %124, %223, !dbg !50
  %228 = add i32 %124, %224, !dbg !50
  %229 = sext i32 %225 to i64, !dbg !51
  %230 = getelementptr float, ptr addrspace(1) %5, i64 %229, !dbg !51
  %231 = sext i32 %226 to i64, !dbg !51
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !51
  %233 = sext i32 %227 to i64, !dbg !51
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !51
  %235 = sext i32 %228 to i64, !dbg !51
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %237 = shl i32 %11, 4, !dbg !52
  %238 = and i32 %237, 4080, !dbg !52
  %239 = lshr exact i32 %238, 2, !dbg !52
  %240 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %239, !dbg !52
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !52
  %242 = bitcast float %175 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !52
  %243 = or disjoint i32 %238, 1, !dbg !52
  %244 = getelementptr float, ptr addrspace(3) %240, i32 %243, !dbg !52
  %245 = bitcast float %178 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !52
  %246 = or disjoint i32 %238, 2, !dbg !52
  %247 = getelementptr float, ptr addrspace(3) %240, i32 %246, !dbg !52
  %248 = bitcast float %181 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !52
  %249 = or disjoint i32 %238, 3, !dbg !52
  %250 = getelementptr float, ptr addrspace(3) %240, i32 %249, !dbg !52
  %251 = bitcast float %184 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !52
  %252 = or disjoint i32 %238, 4, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) %240, i32 %252, !dbg !52
  %254 = bitcast float %187 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !52
  %255 = or disjoint i32 %238, 5, !dbg !52
  %256 = getelementptr float, ptr addrspace(3) %240, i32 %255, !dbg !52
  %257 = bitcast float %190 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !52
  %258 = or disjoint i32 %238, 6, !dbg !52
  %259 = getelementptr float, ptr addrspace(3) %240, i32 %258, !dbg !52
  %260 = bitcast float %193 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !52
  %261 = or disjoint i32 %238, 7, !dbg !52
  %262 = getelementptr float, ptr addrspace(3) %240, i32 %261, !dbg !52
  %263 = bitcast float %196 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !52
  %264 = or disjoint i32 %238, 8, !dbg !52
  %265 = getelementptr float, ptr addrspace(3) %240, i32 %264, !dbg !52
  %266 = bitcast float %199 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !52
  %267 = or disjoint i32 %238, 9, !dbg !52
  %268 = getelementptr float, ptr addrspace(3) %240, i32 %267, !dbg !52
  %269 = bitcast float %202 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !52
  %270 = or disjoint i32 %238, 10, !dbg !52
  %271 = getelementptr float, ptr addrspace(3) %240, i32 %270, !dbg !52
  %272 = bitcast float %205 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !52
  %273 = or disjoint i32 %238, 11, !dbg !52
  %274 = getelementptr float, ptr addrspace(3) %240, i32 %273, !dbg !52
  %275 = bitcast float %208 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !52
  %276 = or disjoint i32 %238, 12, !dbg !52
  %277 = getelementptr float, ptr addrspace(3) %240, i32 %276, !dbg !52
  %278 = bitcast float %211 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !52
  %279 = or disjoint i32 %238, 13, !dbg !52
  %280 = getelementptr float, ptr addrspace(3) %240, i32 %279, !dbg !52
  %281 = bitcast float %214 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !52
  %282 = or disjoint i32 %238, 14, !dbg !52
  %283 = getelementptr float, ptr addrspace(3) %240, i32 %282, !dbg !52
  %284 = bitcast float %217 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !52
  %285 = or disjoint i32 %238, 15, !dbg !52
  %286 = getelementptr float, ptr addrspace(3) %240, i32 %285, !dbg !52
  %287 = bitcast float %220 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %288 = lshr i32 %75, 4, !dbg !52
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !52
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %75, !dbg !52
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !52
  %292 = or disjoint i32 %75, 1, !dbg !52
  %293 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %292, !dbg !52
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !52
  %295 = or disjoint i32 %75, 2, !dbg !52
  %296 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %295, !dbg !52
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !52
  %298 = or disjoint i32 %75, 3, !dbg !52
  %299 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %298, !dbg !52
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !52
  %301 = or disjoint i32 %75, 1024, !dbg !52
  %302 = lshr i32 %301, 4, !dbg !52
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !52
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %301, !dbg !52
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !52
  %306 = or disjoint i32 %75, 1025, !dbg !52
  %307 = lshr i32 %306, 4, !dbg !52
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %307, !dbg !52
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %306, !dbg !52
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !52
  %311 = or disjoint i32 %75, 1026, !dbg !52
  %312 = lshr i32 %311, 4, !dbg !52
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %312, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) %313, i32 %311, !dbg !52
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !52
  %316 = or disjoint i32 %75, 1027, !dbg !52
  %317 = lshr i32 %316, 4, !dbg !52
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %317, !dbg !52
  %319 = getelementptr inbounds float, ptr addrspace(3) %318, i32 %316, !dbg !52
  %320 = load i32, ptr addrspace(3) %319, align 4, !dbg !52
  %321 = or disjoint i32 %75, 2048, !dbg !52
  %322 = lshr i32 %321, 4, !dbg !52
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !52
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %321, !dbg !52
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !52
  %326 = or disjoint i32 %75, 2049, !dbg !52
  %327 = lshr i32 %326, 4, !dbg !52
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !52
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %326, !dbg !52
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !52
  %331 = or disjoint i32 %75, 2050, !dbg !52
  %332 = lshr i32 %331, 4, !dbg !52
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %332, !dbg !52
  %334 = getelementptr inbounds float, ptr addrspace(3) %333, i32 %331, !dbg !52
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !52
  %336 = or disjoint i32 %75, 2051, !dbg !52
  %337 = lshr i32 %336, 4, !dbg !52
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !52
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %336, !dbg !52
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !52
  %341 = or disjoint i32 %75, 3072, !dbg !52
  %342 = lshr i32 %341, 4, !dbg !52
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !52
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %341, !dbg !52
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !52
  %346 = or disjoint i32 %75, 3073, !dbg !52
  %347 = lshr i32 %346, 4, !dbg !52
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !52
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %346, !dbg !52
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !52
  %351 = or disjoint i32 %75, 3074, !dbg !52
  %352 = lshr i32 %351, 4, !dbg !52
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !52
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !52
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !52
  %356 = or disjoint i32 %75, 3075, !dbg !52
  %357 = lshr i32 %356, 4, !dbg !52
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !52
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !52
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %294, i32 %297, i32 %300, ptr addrspace(1) %230, i1 %139) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %310, i32 %315, i32 %320, ptr addrspace(1) %232, i1 %137) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %330, i32 %335, i32 %340, ptr addrspace(1) %234, i1 %134) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %350, i32 %355, i32 %360, ptr addrspace(1) %236, i1 %131) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7vik5rw2bw5mfy3b4p4u46msn4huipuuk623naudd6in522s6xo.py", directory: "inductor_cache/7v")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 34, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 46, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
