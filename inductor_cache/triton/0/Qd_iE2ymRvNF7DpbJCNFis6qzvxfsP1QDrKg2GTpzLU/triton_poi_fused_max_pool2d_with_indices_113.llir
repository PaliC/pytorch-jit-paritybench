; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_113(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !17
  %20 = or disjoint i32 %12, 1, !dbg !18
  %21 = or disjoint i32 %12, 5, !dbg !18
  %22 = sext i32 %20 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #1, !dbg !20
  %28 = or disjoint i32 %12, 2, !dbg !21
  %29 = or disjoint i32 %12, 6, !dbg !21
  %30 = sext i32 %28 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #1, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !23
  %36 = or disjoint i32 %12, 3, !dbg !24
  %37 = or disjoint i32 %12, 7, !dbg !24
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !26
  %44 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !17
  %45 = insertelement <2 x i32> %44, i32 %19, i64 1, !dbg !17
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !17
  %47 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !20
  %48 = insertelement <2 x i32> %47, i32 %27, i64 1, !dbg !20
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !20
  %50 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %51 = insertelement <2 x i32> %50, i32 %35, i64 1, !dbg !23
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !23
  %53 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !26
  %54 = insertelement <2 x i32> %53, i32 %43, i64 1, !dbg !26
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !26
  %56 = fcmp ogt <2 x float> %49, %46, !dbg !27
  %57 = fcmp uno <2 x float> %49, zeroinitializer, !dbg !31
  %58 = or <2 x i1> %56, %57, !dbg !32
  %.v = select <2 x i1> %58, <2 x i32> %48, <2 x i32> %45, !dbg !33
  %59 = bitcast <2 x i32> %.v to <2 x float>, !dbg !33
  %60 = fcmp olt <2 x float> %59, %52, !dbg !34
  %61 = fcmp uno <2 x float> %52, zeroinitializer, !dbg !36
  %62 = or <2 x i1> %61, %60, !dbg !37
  %.v1 = select <2 x i1> %62, <2 x i32> %51, <2 x i32> %.v, !dbg !38
  %63 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !38
  %64 = fcmp olt <2 x float> %63, %55, !dbg !39
  %65 = bitcast i32 %42 to float, !dbg !41
  %66 = fcmp uno float %65, 0.000000e+00, !dbg !41
  %67 = bitcast i32 %43 to float, !dbg !41
  %68 = fcmp uno float %67, 0.000000e+00, !dbg !41
  %69 = extractelement <2 x i1> %64, i64 0, !dbg !42
  %70 = or i1 %66, %69, !dbg !42
  %71 = extractelement <2 x i1> %64, i64 1, !dbg !42
  %72 = or i1 %68, %71, !dbg !42
  %73 = zext <2 x i1> %56 to <2 x i8>, !dbg !43
  %74 = select <2 x i1> %60, <2 x i8> splat (i8 2), <2 x i8> %73, !dbg !44
  %75 = select <2 x i1> %64, <2 x i8> splat (i8 3), <2 x i8> %74, !dbg !45
  %76 = sext i32 %10 to i64, !dbg !46
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !46
  %78 = extractelement <2 x i32> %.v1, i64 0, !dbg !47
  %79 = select i1 %70, i32 %42, i32 %78, !dbg !48
  %80 = extractelement <2 x i32> %.v1, i64 1, !dbg !47
  %81 = select i1 %72, i32 %43, i32 %80, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %79, i32 %81, ptr addrspace(1) %77, i1 %11) #1, !dbg !47
  %82 = getelementptr i8, ptr addrspace(1) %2, i64 %76, !dbg !49
  %83 = bitcast <2 x i8> %75 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %83, ptr addrspace(1) %82, i1 %11) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2hhu7evwklmnmrgpiczixql3pncl3zhbodmpbfiawatskvde4en.py", directory: "inductor_cache/2h")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_113, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_113, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_113", linkageName: "triton_poi_fused_max_pool2d_with_indices_113", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 29, column: 40, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !35)
!35 = !DILocation(line: 30, column: 40, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !35)
!38 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !35)
!39 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !40)
!40 = !DILocation(line: 31, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !40)
!43 = !DILocation(line: 35, column: 33, scope: !7)
!44 = !DILocation(line: 38, column: 35, scope: !7)
!45 = !DILocation(line: 41, column: 35, scope: !7)
!46 = !DILocation(line: 42, column: 25, scope: !7)
!47 = !DILocation(line: 42, column: 36, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !40)
!49 = !DILocation(line: 43, column: 25, scope: !7)
!50 = !DILocation(line: 43, column: 37, scope: !7)
!51 = !DILocation(line: 43, column: 4, scope: !7)
