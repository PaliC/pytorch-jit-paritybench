; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 256, !dbg !14
  %11 = mul i32 %10, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = srem i32 %10, 8, !dbg !16
  %13 = sdiv i32 %9, 2048, !dbg !17
  %14 = shl nsw i32 %12, 9, !dbg !18
  %15 = shl i32 %13, 13, !dbg !19
  %16 = add i32 %15, %.decomposed, !dbg !20
  %17 = add i32 %16, %14, !dbg !21
  %18 = sext i32 %17 to i64, !dbg !22
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !22
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !23
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !23
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !23
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !23
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !23
  %25 = bitcast i32 %21 to float, !dbg !23
  %26 = bitcast i32 %22 to float, !dbg !23
  %27 = bitcast i32 %23 to float, !dbg !23
  %28 = bitcast i32 %24 to float, !dbg !23
  %29 = add i32 %16, 256, !dbg !24
  %30 = add i32 %29, %14, !dbg !25
  %31 = sext i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !27
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !27
  %38 = bitcast i32 %34 to float, !dbg !27
  %39 = bitcast i32 %35 to float, !dbg !27
  %40 = bitcast i32 %36 to float, !dbg !27
  %41 = bitcast i32 %37 to float, !dbg !27
  %42 = add i32 %16, 4096, !dbg !28
  %43 = add i32 %42, %14, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = bitcast i32 %50 to float, !dbg !31
  %55 = add i32 %16, 4352, !dbg !32
  %56 = add i32 %55, %14, !dbg !33
  %57 = sext i32 %56 to i64, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !34
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !35
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !35
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !35
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !35
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !35
  %64 = bitcast i32 %60 to float, !dbg !35
  %65 = bitcast i32 %61 to float, !dbg !35
  %66 = bitcast i32 %62 to float, !dbg !35
  %67 = bitcast i32 %63 to float, !dbg !35
  %68 = fcmp ogt float %38, %25, !dbg !36
  %69 = fcmp ogt float %39, %26, !dbg !36
  %70 = fcmp ogt float %40, %27, !dbg !36
  %71 = fcmp ogt float %41, %28, !dbg !36
  %72 = fcmp uno float %38, 0.000000e+00, !dbg !40
  %73 = fcmp uno float %39, 0.000000e+00, !dbg !40
  %74 = fcmp uno float %40, 0.000000e+00, !dbg !40
  %75 = fcmp uno float %41, 0.000000e+00, !dbg !40
  %76 = or i1 %68, %72, !dbg !41
  %77 = or i1 %69, %73, !dbg !41
  %78 = or i1 %70, %74, !dbg !41
  %79 = or i1 %71, %75, !dbg !41
  %80 = select i1 %76, float %38, float %25, !dbg !42
  %81 = select i1 %77, float %39, float %26, !dbg !42
  %82 = select i1 %78, float %40, float %27, !dbg !42
  %83 = select i1 %79, float %41, float %28, !dbg !42
  %84 = fcmp olt float %80, %51, !dbg !43
  %85 = fcmp olt float %81, %52, !dbg !43
  %86 = fcmp olt float %82, %53, !dbg !43
  %87 = fcmp olt float %83, %54, !dbg !43
  %88 = fcmp uno float %51, 0.000000e+00, !dbg !45
  %89 = fcmp uno float %52, 0.000000e+00, !dbg !45
  %90 = fcmp uno float %53, 0.000000e+00, !dbg !45
  %91 = fcmp uno float %54, 0.000000e+00, !dbg !45
  %92 = or i1 %88, %84, !dbg !46
  %93 = or i1 %89, %85, !dbg !46
  %94 = or i1 %90, %86, !dbg !46
  %95 = or i1 %91, %87, !dbg !46
  %96 = select i1 %92, float %51, float %80, !dbg !47
  %97 = select i1 %93, float %52, float %81, !dbg !47
  %98 = select i1 %94, float %53, float %82, !dbg !47
  %99 = select i1 %95, float %54, float %83, !dbg !47
  %100 = fcmp olt float %96, %64, !dbg !48
  %101 = fcmp olt float %97, %65, !dbg !48
  %102 = fcmp olt float %98, %66, !dbg !48
  %103 = fcmp olt float %99, %67, !dbg !48
  %104 = fcmp uno float %64, 0.000000e+00, !dbg !50
  %105 = fcmp uno float %65, 0.000000e+00, !dbg !50
  %106 = fcmp uno float %66, 0.000000e+00, !dbg !50
  %107 = fcmp uno float %67, 0.000000e+00, !dbg !50
  %108 = or i1 %104, %100, !dbg !51
  %109 = or i1 %105, %101, !dbg !51
  %110 = or i1 %106, %102, !dbg !51
  %111 = or i1 %107, %103, !dbg !51
  %112 = sext i32 %9 to i64, !dbg !52
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !52
  %114 = bitcast float %96 to i32, !dbg !53
  %115 = select i1 %108, i32 %60, i32 %114, !dbg !54
  %116 = bitcast float %97 to i32, !dbg !53
  %117 = select i1 %109, i32 %61, i32 %116, !dbg !54
  %118 = bitcast float %98 to i32, !dbg !53
  %119 = select i1 %110, i32 %62, i32 %118, !dbg !54
  %120 = bitcast float %99 to i32, !dbg !53
  %121 = select i1 %111, i32 %63, i32 %120, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %117, i32 %119, i32 %121, ptr addrspace(1) %113, i1 true) #1, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cahjkloqhtfbzbdzc4nmg2mgvn3l5bxwgqapcgs7uxtpttjzic3p.py", directory: "inductor_cache/ah")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_17", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 32, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 33, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !49)
!49 = !DILocation(line: 34, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !49)
!52 = !DILocation(line: 35, column: 25, scope: !7)
!53 = !DILocation(line: 35, column: 36, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !49)
!55 = !DILocation(line: 35, column: 4, scope: !7)
