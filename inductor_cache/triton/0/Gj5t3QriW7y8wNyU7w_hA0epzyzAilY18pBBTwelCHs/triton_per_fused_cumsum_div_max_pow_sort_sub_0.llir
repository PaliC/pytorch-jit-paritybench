; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_cumsum_div_max_pow_sort_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = and i32 %10, 1, !dbg !15
  %16 = shl nuw nsw i32 %15, 1, !dbg !15
  %17 = shl i32 %13, 2, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #2, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = sext i32 %17 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #2, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #2, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = or disjoint i32 %17, 1, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #2, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #2, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = or disjoint i32 %17, 2, !dbg !25
  %38 = sext i32 %37 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #2, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %14) #2, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = or disjoint i32 %17, 3, !dbg !28
  %44 = sext i32 %43 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %14) #2, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %14) #2, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fcmp ogt float %30, %36, !dbg !31
  %50 = fcmp uno float %30, 0.000000e+00, !dbg !35
  %51 = or i1 %50, %49, !dbg !36
  %52 = select i1 %51, float %30, float %36, !dbg !37
  %53 = fcmp ogt float %52, %42, !dbg !38
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !40
  %55 = or i1 %53, %54, !dbg !41
  %56 = select i1 %55, float %52, float %42, !dbg !42
  %57 = fcmp ogt float %56, %48, !dbg !43
  %58 = fcmp uno float %56, 0.000000e+00, !dbg !45
  %59 = or i1 %57, %58, !dbg !46
  %60 = select i1 %59, float %56, float %48, !dbg !47
  %61 = fsub float %24, %60, !dbg !48
  %62 = fsub float %25, %60, !dbg !48
  %63 = fmul float %61, 5.000000e-01, !dbg !49
  %64 = fmul float %62, 5.000000e-01, !dbg !49
  %65 = bitcast float %63 to i32, !dbg !50
  %66 = bitcast float %64 to i32, !dbg !50
  %67 = xor i32 %15, 1, !dbg !54
  %68 = trunc i32 %10 to i1, !dbg !55
  %69 = fcmp uge float %63, %64, !dbg !55
  %.not = xor i1 %69, %68, !dbg !55
  %70 = xor i32 %65, %66, !dbg !56
  %71 = select i1 %.not, i32 0, i32 %70, !dbg !57
  %72 = xor i32 %71, %65, !dbg !58
  %73 = xor i32 %71, %66, !dbg !58
  %74 = mul nuw nsw i32 %72, %67, !dbg !59
  %75 = mul nuw nsw i32 %73, %67, !dbg !59
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !60
  %77 = add i32 %74, %76, !dbg !63
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !60
  %79 = add i32 %75, %78, !dbg !63
  %80 = mul nuw nsw i32 %72, %15, !dbg !65
  %81 = mul nuw nsw i32 %73, %15, !dbg !65
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !60
  %83 = add i32 %80, %82, !dbg !63
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !60
  %85 = add i32 %81, %84, !dbg !63
  %86 = bitcast i32 %77 to float, !dbg !66
  %87 = bitcast i32 %79 to float, !dbg !66
  %88 = bitcast i32 %83 to float, !dbg !67
  %89 = bitcast i32 %85 to float, !dbg !67
  %90 = fcmp olt float %86, %88, !dbg !68
  %91 = fcmp olt float %87, %89, !dbg !68
  %92 = xor i32 %77, %83, !dbg !56
  %93 = xor i32 %79, %85, !dbg !56
  %94 = select i1 %90, i32 %92, i32 0, !dbg !57
  %95 = select i1 %91, i32 %93, i32 0, !dbg !57
  %96 = xor i32 %94, %72, !dbg !58
  %97 = xor i32 %95, %73, !dbg !58
  %98 = bitcast i32 %96 to float, !dbg !66
  %99 = bitcast i32 %97 to float, !dbg !67
  %100 = fcmp olt float %98, %99, !dbg !68
  %101 = xor i32 %96, %97, !dbg !56
  %102 = select i1 %100, i32 %101, i32 0, !dbg !57
  %103 = xor i32 %102, %96, !dbg !58
  %104 = xor i32 %102, %97, !dbg !58
  %105 = bitcast i32 %103 to float, !dbg !69
  %106 = bitcast i32 %104 to float, !dbg !69
  %107 = fmul float %105, %105, !dbg !70
  %108 = fmul float %106, %106, !dbg !70
  %109 = fadd float %107, %108, !dbg !71
  %110 = bitcast float %109 to i32, !dbg !73
  %111 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %110, i32 1, i32 0), !dbg !73
  %112 = bitcast i32 %111 to float, !dbg !73
  %.not1 = icmp eq i32 %15, 0, !dbg !73
  %113 = fadd float %109, %112, !dbg !71
  %114 = select i1 %.not1, float %109, float %113, !dbg !73
  %115 = bitcast float %114 to i32, !dbg !73
  %116 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %115, i32 1, i32 0), !dbg !73
  %117 = bitcast i32 %116 to float, !dbg !73
  %118 = fadd float %107, %117, !dbg !71
  %119 = select i1 %.not1, float %107, float %118, !dbg !73
  %120 = fadd float %105, %106, !dbg !74
  %121 = bitcast float %120 to i32, !dbg !75
  %122 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %121, i32 1, i32 0), !dbg !75
  %123 = bitcast i32 %122 to float, !dbg !75
  %124 = fadd float %120, %123, !dbg !74
  %125 = select i1 %.not1, float %120, float %124, !dbg !75
  %126 = bitcast float %125 to i32, !dbg !75
  %127 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %126, i32 1, i32 0), !dbg !75
  %128 = bitcast i32 %127 to float, !dbg !75
  %129 = fadd float %128, %105, !dbg !74
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %130, i1 %14) #2, !dbg !77
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %131, i1 %14) #2, !dbg !79
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !80
  %133 = bitcast float %119 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %115, ptr addrspace(1) %132, i1 %14) #2, !dbg !81
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !82
  %135 = bitcast float %129 to i32, !dbg !83
  %136 = select i1 %.not1, i32 %103, i32 %135, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %126, ptr addrspace(1) %134, i1 %14) #2, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf3mb6avrtkisakf3b5uietddb6xsyikuvtbwnqidgb7fmcpozk2.py", directory: "inductor_cache/f3")
!4 = !{ptr @triton_per_fused_cumsum_div_max_pow_sort_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_div_max_pow_sort_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cumsum_div_max_pow_sort_sub_0", linkageName: "triton_per_fused_cumsum_div_max_pow_sort_sub_0", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 36, column: 37, scope: !7)
!17 = !DILocation(line: 36, column: 35, scope: !7)
!18 = !DILocation(line: 36, column: 30, scope: !7)
!19 = !DILocation(line: 36, column: 42, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 37, column: 37, scope: !7)
!22 = !DILocation(line: 38, column: 34, scope: !7)
!23 = !DILocation(line: 38, column: 30, scope: !7)
!24 = !DILocation(line: 38, column: 41, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 34, scope: !7)
!29 = !DILocation(line: 40, column: 30, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 42, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 43, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 19, scope: !7)
!50 = !DILocation(line: 502, column: 14, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !52, file: !33, discriminator: 0)
!52 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!53 = !DILocation(line: 51, column: 71, scope: !7)
!54 = !DILocation(line: 505, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 547, column: 28, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 548, column: 38, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 548, column: 46, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 548, column: 15, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 506, column: 40, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 267, column: 36, scope: !61, inlinedAt: !53)
!61 = distinct !DILexicalBlockFile(scope: !51, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = !DILocation(line: 256, column: 15, scope: !64, inlinedAt: !53)
!64 = distinct !DILexicalBlockFile(scope: !61, file: !62, discriminator: 0)
!65 = !DILocation(line: 507, column: 41, scope: !51, inlinedAt: !53)
!66 = !DILocation(line: 510, column: 20, scope: !51, inlinedAt: !53)
!67 = !DILocation(line: 511, column: 22, scope: !51, inlinedAt: !53)
!68 = !DILocation(line: 536, column: 22, scope: !51, inlinedAt: !53)
!69 = !DILocation(line: 551, column: 18, scope: !51, inlinedAt: !53)
!70 = !DILocation(line: 52, column: 20, scope: !7)
!71 = !DILocation(line: 13, column: 20, scope: !72, inlinedAt: !73)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!73 = !DILocation(line: 55, column: 46, scope: !7)
!74 = !DILocation(line: 13, column: 20, scope: !72, inlinedAt: !75)
!75 = !DILocation(line: 58, column: 46, scope: !7)
!76 = !DILocation(line: 59, column: 25, scope: !7)
!77 = !DILocation(line: 59, column: 44, scope: !7)
!78 = !DILocation(line: 60, column: 25, scope: !7)
!79 = !DILocation(line: 60, column: 44, scope: !7)
!80 = !DILocation(line: 61, column: 25, scope: !7)
!81 = !DILocation(line: 61, column: 44, scope: !7)
!82 = !DILocation(line: 62, column: 25, scope: !7)
!83 = !DILocation(line: 62, column: 44, scope: !7)
!84 = !DILocation(line: 62, column: 4, scope: !7)
