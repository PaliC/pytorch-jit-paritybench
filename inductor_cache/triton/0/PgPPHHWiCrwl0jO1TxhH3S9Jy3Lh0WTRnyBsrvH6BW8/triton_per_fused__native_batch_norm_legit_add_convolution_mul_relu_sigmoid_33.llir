; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = and i32 %14, 15, !dbg !11
  %16 = srem i32 %13, 1024, !dbg !12
  %17 = sext i32 %13 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !14
  %20 = bitcast i32 %19 to float, !dbg !14
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !14
  %22 = sext i32 %16 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !16
  %25 = bitcast i32 %24 to float, !dbg !16
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !16
  %27 = shl i32 %13, 4, !dbg !17
  %28 = or disjoint i32 %27, %15, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !28
  %46 = fadd float %20, %25, !dbg !29
  %47 = fadd float %32, %37, !dbg !30
  %48 = fadd float %34, %39, !dbg !30
  %49 = bitcast float %47 to i32, !dbg !31
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = fadd float %47, %51, !dbg !35
  %53 = bitcast float %52 to i32, !dbg !31
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = fadd float %52, %55, !dbg !35
  %57 = bitcast float %56 to i32, !dbg !31
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = fadd float %56, %59, !dbg !35
  %61 = bitcast float %60 to i32, !dbg !31
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !31
  %63 = bitcast i32 %62 to float, !dbg !31
  %64 = fadd float %60, %63, !dbg !35
  %65 = bitcast float %48 to i32, !dbg !31
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = fadd float %48, %67, !dbg !35
  %69 = bitcast float %68 to i32, !dbg !31
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = fadd float %68, %71, !dbg !35
  %73 = bitcast float %72 to i32, !dbg !31
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = fadd float %72, %75, !dbg !35
  %77 = bitcast float %76 to i32, !dbg !31
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = fadd float %76, %79, !dbg !35
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.600000e+01) #5, !dbg !37
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.600000e+01) #5, !dbg !37
  %83 = fsub float %47, %81, !dbg !38
  %84 = fsub float %48, %82, !dbg !38
  %85 = fmul float %83, %83, !dbg !39
  %86 = fmul float %84, %84, !dbg !39
  %87 = bitcast float %85 to i32, !dbg !40
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !40
  %89 = bitcast i32 %88 to float, !dbg !40
  %90 = fadd float %85, %89, !dbg !42
  %91 = bitcast float %90 to i32, !dbg !40
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !40
  %93 = bitcast i32 %92 to float, !dbg !40
  %94 = fadd float %90, %93, !dbg !42
  %95 = bitcast float %94 to i32, !dbg !40
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !40
  %97 = bitcast i32 %96 to float, !dbg !40
  %98 = fadd float %94, %97, !dbg !42
  %99 = bitcast float %98 to i32, !dbg !40
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !40
  %101 = bitcast i32 %100 to float, !dbg !40
  %102 = fadd float %98, %101, !dbg !42
  %103 = bitcast float %86 to i32, !dbg !40
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !40
  %105 = bitcast i32 %104 to float, !dbg !40
  %106 = fadd float %86, %105, !dbg !42
  %107 = bitcast float %106 to i32, !dbg !40
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !40
  %109 = bitcast i32 %108 to float, !dbg !40
  %110 = fadd float %106, %109, !dbg !42
  %111 = bitcast float %110 to i32, !dbg !40
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !40
  %113 = bitcast i32 %112 to float, !dbg !40
  %114 = fadd float %110, %113, !dbg !42
  %115 = bitcast float %114 to i32, !dbg !40
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !40
  %117 = bitcast i32 %116 to float, !dbg !40
  %118 = fadd float %114, %117, !dbg !42
  %119 = fsub float 0.000000e+00, %46, !dbg !43
  %120 = fmul float %119, 0x3FF7154760000000, !dbg !45
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #5, !dbg !45
  %122 = fadd float %121, 1.000000e+00, !dbg !46
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %122) #5, !dbg !47
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.600000e+01) #5, !dbg !48
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 1.600000e+01) #5, !dbg !48
  %126 = fadd float %124, 0x3EE4F8B580000000, !dbg !49
  %127 = fadd float %125, 0x3EE4F8B580000000, !dbg !49
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %128, 0, !dbg !50
  br i1 %.not.i, label %131, label %129, !dbg !50

129:                                              ; preds = %12
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

131:                                              ; preds = %12
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %129, %131
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], !dbg !50
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i1 = icmp eq i32 %133, 0, !dbg !50
  br i1 %.not.i1, label %136, label %134, !dbg !50

134:                                              ; preds = %__nv_rsqrtf.exit
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !50
  br label %__nv_rsqrtf.exit3, !dbg !50

136:                                              ; preds = %__nv_rsqrtf.exit
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !50
  br label %__nv_rsqrtf.exit3, !dbg !50

__nv_rsqrtf.exit3:                                ; preds = %134, %136
  %.0.i2 = phi float [ %135, %134 ], [ %137, %136 ], !dbg !50
  %138 = bitcast i32 %41 to float, !dbg !24
  %139 = bitcast i32 %43 to float, !dbg !26
  %140 = fsub float %138, %139, !dbg !51
  %141 = bitcast i32 %45 to float, !dbg !28
  %142 = fmul float %140, %141, !dbg !52
  %143 = fmul float %142, %123, !dbg !53
  %144 = bitcast i32 %21 to float, !dbg !14
  %145 = bitcast i32 %26 to float, !dbg !16
  %146 = fadd float %144, %145, !dbg !29
  %147 = fmul float %83, %.0.i, !dbg !54
  %148 = fadd float %143, %147, !dbg !55
  %149 = fcmp olt float %148, 0.000000e+00, !dbg !56
  %150 = select i1 %149, float 0.000000e+00, float %148, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %urem = and i32 %14, 63, !dbg !62
  %151 = icmp eq i32 %urem, 0, !dbg !62
  %152 = bitcast float %146 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %18, i1 %151) #5, !dbg !62
  %153 = and i32 %14, 48, !dbg !63
  %154 = icmp eq i32 %153, 0, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %49, ptr addrspace(1) %30, i1 %154) #5, !dbg !63
  %155 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !64
  %156 = bitcast float %150 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %155, i1 %154) #5, !dbg !65
  %157 = getelementptr float, ptr addrspace(1) %9, i64 %17, !dbg !66
  %158 = bitcast float %.0.i2 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %157, i1 %151) #5, !dbg !67
  %159 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !68
  %160 = bitcast float %82 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %159, i1 %151) #5, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py", directory: "inductor_cache/gw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 30, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 34, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 34, column: 42, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 47, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 44, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 43, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 19, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !41)
!41 = !DILocation(line: 50, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 53, column: 23, scope: !7)
!45 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 28, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 64, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 65, column: 4, scope: !7)
!62 = !DILocation(line: 66, column: 39, scope: !7)
!63 = !DILocation(line: 67, column: 47, scope: !7)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 45, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 70, column: 25, scope: !7)
!69 = !DILocation(line: 70, column: 37, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
