#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":43:25)
#loc30 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":50:26)
#loc59 = loc(callsite(#loc1 at #loc24))
#loc62 = loc(callsite(#loc1 at #loc30))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc3)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc3)
    %5 = arith.remsi %0, %c1024_i32 : i32 loc(#loc4)
    %6 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc5)
    %7 = tt.splat %6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc6)
    %8 = tt.splat %6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %9 = tt.load %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc6)
    %10 = tt.load %8 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %11 = tt.addptr %arg2, %5 : !tt.ptr<f32>, i32 loc(#loc7)
    %12 = tt.splat %11 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %13 = tt.splat %11 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %14 = tt.load %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %15 = tt.load %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %16 = arith.muli %0, %c16_i32 : i32 loc(#loc9)
    %17 = tt.splat %16 : i32 -> tensor<1x16xi32, #blocked> loc(#loc10)
    %18 = tt.splat %16 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc10)
    %19 = arith.addi %3, %17 : tensor<1x16xi32, #blocked> loc(#loc10)
    %20 = arith.addi %4, %18 : tensor<1x16xi32, #blocked1> loc(#loc10)
    %21 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %23 = tt.addptr %21, %19 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc11)
    %24 = tt.addptr %22, %20 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc11)
    %25 = tt.load %23 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %26 = tt.load %24 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %27 = tt.addptr %arg3, %5 : !tt.ptr<f32>, i32 loc(#loc13)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %29 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %30 = tt.load %28 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %31 = tt.load %29 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %32 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %33 = tt.addptr %32, %19 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc15)
    %34 = tt.load %33 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc16)
    %35 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc17)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %37 = tt.load %36 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %38 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc19)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %40 = tt.load %39 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %41 = arith.addf %9, %14 : tensor<1x1xf32, #blocked> loc(#loc21)
    %42 = arith.addf %10, %15 : tensor<1x1xf32, #blocked1> loc(#loc21)
    %43 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc22)
    %44 = tt.broadcast %31 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc22)
    %45 = arith.addf %25, %43 : tensor<1x16xf32, #blocked> loc(#loc22)
    %46 = arith.addf %26, %44 : tensor<1x16xf32, #blocked1> loc(#loc22)
    %47 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc24)), %arg13: f32 loc(callsite(#loc1 at #loc24))):
      %90 = arith.addf %arg12, %arg13 : f32 loc(#loc69)
      tt.reduce.return %90 : f32 loc(#loc58)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc58)
    %48 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc24)), %arg13: f32 loc(callsite(#loc1 at #loc24))):
      %90 = arith.addf %arg12, %arg13 : f32 loc(#loc69)
      tt.reduce.return %90 : f32 loc(#loc58)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc58)
    %49 = tt.expand_dims %47 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %50 = tt.expand_dims %48 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc26)
    %51 = arith.divf %49, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc27)
    %52 = arith.divf %50, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc27)
    %53 = tt.broadcast %51 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc28)
    %54 = tt.broadcast %52 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc28)
    %55 = arith.subf %45, %53 : tensor<1x16xf32, #blocked> loc(#loc28)
    %56 = arith.subf %46, %54 : tensor<1x16xf32, #blocked1> loc(#loc28)
    %57 = arith.mulf %55, %55 : tensor<1x16xf32, #blocked> loc(#loc29)
    %58 = arith.mulf %56, %56 : tensor<1x16xf32, #blocked1> loc(#loc29)
    %59 = "tt.reduce"(%57) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc30)), %arg13: f32 loc(callsite(#loc1 at #loc30))):
      %90 = arith.addf %arg12, %arg13 : f32 loc(#loc70)
      tt.reduce.return %90 : f32 loc(#loc61)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc61)
    %60 = "tt.reduce"(%58) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc30)), %arg13: f32 loc(callsite(#loc1 at #loc30))):
      %90 = arith.addf %arg12, %arg13 : f32 loc(#loc70)
      tt.reduce.return %90 : f32 loc(#loc61)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc61)
    %61 = tt.expand_dims %59 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %62 = tt.expand_dims %60 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc31)
    %63 = tt.broadcast %37 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc32)
    %64 = arith.subf %34, %63 : tensor<1x16xf32, #blocked> loc(#loc32)
    %65 = tt.broadcast %40 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc33)
    %66 = arith.mulf %64, %65 : tensor<1x16xf32, #blocked> loc(#loc33)
    %67 = arith.subf %cst_0, %41 : tensor<1x1xf32, #blocked> loc(#loc63)
    %68 = math.exp %67 : tensor<1x1xf32, #blocked> loc(#loc64)
    %69 = arith.addf %68, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc65)
    %70 = arith.divf %cst_1, %69 : tensor<1x1xf32, #blocked> loc(#loc66)
    %71 = tt.broadcast %70 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc39)
    %72 = arith.mulf %66, %71 : tensor<1x16xf32, #blocked> loc(#loc39)
    %73 = arith.divf %61, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc40)
    %74 = arith.divf %62, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc40)
    %75 = arith.addf %73, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc41)
    %76 = arith.addf %74, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc41)
    %77 = tt.extern_elementwise %75 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc42)
    %78 = tt.extern_elementwise %76 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %79 = tt.broadcast %77 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc43)
    %80 = arith.mulf %55, %79 : tensor<1x16xf32, #blocked> loc(#loc43)
    %81 = arith.addf %72, %80 : tensor<1x16xf32, #blocked> loc(#loc44)
    %82 = arith.cmpf ogt, %cst, %81 : tensor<1x16xf32, #blocked> loc(#loc67)
    %83 = arith.select %82, %cst, %81 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc68)
    gpu.barrier loc(#loc48)
    tt.store %8, %42 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.store %23, %45 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc50)
    %84 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc51)
    %85 = tt.addptr %84, %19 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc51)
    tt.store %85, %83 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc52)
    %86 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc53)
    %87 = tt.splat %86 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.store %87, %78 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    %88 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc55)
    %89 = tt.splat %88 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.store %89, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":23:28)
#loc3 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":26:34)
#loc4 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":30:19)
#loc5 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":32:34)
#loc6 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":32:39)
#loc7 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":33:30)
#loc8 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":33:35)
#loc9 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:42)
#loc10 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:39)
#loc11 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:34)
#loc12 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":34:47)
#loc13 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":35:30)
#loc14 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":35:35)
#loc15 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":36:31)
#loc16 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":36:44)
#loc17 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":37:31)
#loc18 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":37:36)
#loc19 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":38:31)
#loc20 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":38:36)
#loc21 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":39:18)
#loc22 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":40:18)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":43:28)
#loc27 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":46:20)
#loc28 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":47:19)
#loc29 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":48:20)
#loc31 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":50:29)
#loc32 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":51:20)
#loc33 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":52:20)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc35 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":53:23)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc39 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":54:20)
#loc40 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":57:20)
#loc41 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":59:20)
#loc42 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":60:28)
#loc43 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":61:20)
#loc44 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":62:20)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc46 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":64:42)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc48 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":65:4)
#loc49 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":66:39)
#loc50 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":67:47)
#loc51 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":68:25)
#loc52 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":68:45)
#loc53 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":69:25)
#loc54 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":69:37)
#loc55 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:25)
#loc56 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:37)
#loc57 = loc("inductor_cache/gw/cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py":70:4)
#loc58 = loc(callsite(#loc23 at #loc24))
#loc60 = loc(callsite(#loc25 at #loc23))
#loc61 = loc(callsite(#loc23 at #loc30))
#loc63 = loc(callsite(#loc34 at #loc35))
#loc64 = loc(callsite(#loc36 at #loc35))
#loc65 = loc(callsite(#loc37 at #loc35))
#loc66 = loc(callsite(#loc38 at #loc35))
#loc67 = loc(callsite(#loc45 at #loc46))
#loc68 = loc(callsite(#loc47 at #loc46))
#loc69 = loc(callsite(#loc60 at #loc24))
#loc70 = loc(callsite(#loc60 at #loc30))
