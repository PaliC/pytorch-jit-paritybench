; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 128, !dbg !14
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %11, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %9, !dbg !17
  %.frozen = freeze i32 %13, !dbg !18
  %24 = sdiv i32 %.frozen, 32, !dbg !18
  %25 = mul i32 %24, 32, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %21, 5, !dbg !20
  %27 = shl i32 %22, 5, !dbg !20
  %28 = shl i32 %24, 17, !dbg !21
  %29 = add i32 %28, %.decomposed, !dbg !22
  %30 = add i32 %29, %26, !dbg !23
  %31 = add i32 %29, %27, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %16) #2, !dbg !25
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %16) #2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = shl i32 %14, 12, !dbg !26
  %47 = shl i32 %15, 12, !dbg !26
  %48 = add i32 %23, %46, !dbg !27
  %49 = add i32 %23, %47, !dbg !27
  %50 = sext i32 %48 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %52 = sext i32 %49 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = shl i32 %7, 7, !dbg !29
  %55 = and i32 %54, 896, !dbg !29
  %56 = or disjoint i32 %55, %11, !dbg !29
  %57 = and i32 %8, 508, !dbg !29
  %58 = lshr exact i32 %55, 5, !dbg !29
  %59 = add nuw nsw i32 %58, %56, !dbg !29
  %60 = zext nneg i32 %59 to i64, !dbg !29
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %60, !dbg !29
  %62 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !29
  %63 = or disjoint i32 %56, 32, !dbg !29
  %64 = lshr i32 %63, 5, !dbg !29
  %65 = add nuw nsw i32 %64, %63, !dbg !29
  %66 = zext nneg i32 %65 to i64, !dbg !29
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %66, !dbg !29
  %68 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !29
  %69 = or disjoint i32 %56, 64, !dbg !29
  %70 = lshr i32 %69, 5, !dbg !29
  %71 = add nuw nsw i32 %70, %69, !dbg !29
  %72 = zext nneg i32 %71 to i64, !dbg !29
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %72, !dbg !29
  %74 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !29
  %75 = or disjoint i32 %56, 96, !dbg !29
  %76 = lshr i32 %75, 5, !dbg !29
  %77 = add nuw nsw i32 %76, %75, !dbg !29
  %78 = zext nneg i32 %77 to i64, !dbg !29
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %78, !dbg !29
  %80 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !29
  %81 = or disjoint i32 %56, 16, !dbg !29
  %82 = add nuw nsw i32 %81, %58, !dbg !29
  %83 = zext nneg i32 %82 to i64, !dbg !29
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %83, !dbg !29
  %85 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !29
  %86 = or disjoint i32 %56, 48, !dbg !29
  %87 = lshr i32 %86, 5, !dbg !29
  %88 = add nuw nsw i32 %87, %86, !dbg !29
  %89 = zext nneg i32 %88 to i64, !dbg !29
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !29
  %91 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !29
  %92 = or disjoint i32 %56, 80, !dbg !29
  %93 = lshr i32 %92, 5, !dbg !29
  %94 = add nuw nsw i32 %93, %92, !dbg !29
  %95 = zext nneg i32 %94 to i64, !dbg !29
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !29
  %97 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !29
  %98 = or disjoint i32 %56, 112, !dbg !29
  %99 = lshr i32 %98, 5, !dbg !29
  %100 = add nuw nsw i32 %99, %98, !dbg !29
  %101 = zext nneg i32 %100 to i64, !dbg !29
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !29
  %103 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %104 = lshr i32 %57, 5, !dbg !29
  %105 = add nuw nsw i32 %104, %57, !dbg !29
  %106 = zext nneg i32 %105 to i64, !dbg !29
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !29
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !29
  %109 = or disjoint i32 %57, 1, !dbg !29
  %110 = add nuw nsw i32 %109, %104, !dbg !29
  %111 = zext nneg i32 %110 to i64, !dbg !29
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !29
  %113 = load i32, ptr addrspace(3) %112, align 4, !dbg !29
  %114 = or disjoint i32 %57, 2, !dbg !29
  %115 = add nuw nsw i32 %114, %104, !dbg !29
  %116 = zext nneg i32 %115 to i64, !dbg !29
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !29
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !29
  %119 = or disjoint i32 %57, 3, !dbg !29
  %120 = add nuw nsw i32 %119, %104, !dbg !29
  %121 = zext nneg i32 %120 to i64, !dbg !29
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !29
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !29
  %124 = or disjoint i32 %57, 512, !dbg !29
  %125 = lshr i32 %124, 5, !dbg !29
  %126 = add nuw nsw i32 %125, %124, !dbg !29
  %127 = zext nneg i32 %126 to i64, !dbg !29
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !29
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !29
  %130 = or disjoint i32 %57, 513, !dbg !29
  %131 = lshr i32 %130, 5, !dbg !29
  %132 = add nuw nsw i32 %131, %130, !dbg !29
  %133 = zext nneg i32 %132 to i64, !dbg !29
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !29
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !29
  %136 = or disjoint i32 %57, 514, !dbg !29
  %137 = lshr i32 %136, 5, !dbg !29
  %138 = add nuw nsw i32 %137, %136, !dbg !29
  %139 = zext nneg i32 %138 to i64, !dbg !29
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !29
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !29
  %142 = or disjoint i32 %57, 515, !dbg !29
  %143 = lshr i32 %142, 5, !dbg !29
  %144 = add nuw nsw i32 %143, %142, !dbg !29
  %145 = zext nneg i32 %144 to i64, !dbg !29
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !29
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %108, i32 %113, i32 %118, i32 %123, ptr addrspace(1) %51, i1 %17) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %135, i32 %141, i32 %147, ptr addrspace(1) %53, i1 %18) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnhopazznzvto45kuzh5d2tb6jgbropzekvzlc6xsvrmqm5mhoak.py", directory: "inductor_cache/nh")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 46, scope: !7)
!30 = !DILocation(line: 33, column: 4, scope: !7)
