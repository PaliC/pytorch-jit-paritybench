; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = and i32 %9, 63, !dbg !11
  %.frozen = freeze i32 %8, !dbg !12
  %13 = sdiv i32 %.frozen, 96, !dbg !12
  %14 = mul i32 %13, 96, !dbg !13
  %.decomposed = sub i32 %.frozen, %14, !dbg !13
  %15 = srem i32 %13, 64, !dbg !14
  %16 = sdiv i32 %8, 6144, !dbg !15
  %17 = shl nsw i32 %.decomposed, 1, !dbg !16
  %18 = shl nsw i32 %15, 7, !dbg !17
  %19 = or disjoint i32 %18, %12, !dbg !18
  %20 = or disjoint i32 %19, 64, !dbg !18
  %21 = sdiv i32 %19, 4096, !dbg !19
  %22 = mul i32 %21, 4096, !dbg !20
  %.decomposed1 = sub i32 %19, %22, !dbg !20
  %23 = sdiv i32 %20, 4096, !dbg !19
  %24 = mul i32 %23, 4096, !dbg !20
  %.decomposed2 = sub i32 %20, %24, !dbg !20
  %25 = mul nsw i32 %.decomposed1, 192, !dbg !21
  %26 = mul nsw i32 %.decomposed2, 192, !dbg !21
  %27 = mul i32 %16, 786432, !dbg !22
  %28 = add i32 %27, %17, !dbg !23
  %29 = add i32 %28, %21, !dbg !24
  %30 = add i32 %29, %25, !dbg !25
  %31 = add i32 %28, %23, !dbg !24
  %32 = add i32 %31, %26, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !29
  %43 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %44 = insertelement <2 x i32> %43, i32 %38, i64 1, !dbg !27
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !27
  %46 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !29
  %47 = insertelement <2 x i32> %46, i32 %42, i64 1, !dbg !29
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !29
  %49 = fadd <2 x float> %45, %48, !dbg !30
  %50 = extractelement <2 x float> %49, i64 0, !dbg !31
  %51 = extractelement <2 x float> %49, i64 1, !dbg !31
  %52 = fadd float %50, %51, !dbg !32
  %53 = bitcast float %52 to i32, !dbg !37
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !37
  %55 = bitcast i32 %54 to float, !dbg !37
  %56 = fadd float %52, %55, !dbg !32
  %57 = bitcast float %56 to i32, !dbg !37
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fadd float %56, %59, !dbg !32
  %61 = bitcast float %60 to i32, !dbg !37
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !37
  %63 = bitcast i32 %62 to float, !dbg !37
  %64 = fadd float %60, %63, !dbg !32
  %65 = bitcast float %64 to i32, !dbg !37
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !37
  %67 = bitcast i32 %66 to float, !dbg !37
  %68 = fadd float %64, %67, !dbg !32
  %69 = bitcast float %68 to i32, !dbg !37
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !37
  %71 = bitcast i32 %70 to float, !dbg !37
  %72 = fadd float %68, %71, !dbg !32
  %73 = icmp eq i32 %10, 0, !dbg !37
  %74 = and i32 %11, 1, !dbg !37
  %75 = zext nneg i32 %74 to i64, !dbg !37
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !37
  %77 = bitcast float %72 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %73) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %78 = icmp slt i32 %9, 2, !dbg !37
  %79 = sext i32 %9 to i64, !dbg !37
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !37
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !37
  %84 = bitcast i32 %83 to float, !dbg !37
  %85 = fadd float %82, %84, !dbg !32
  %86 = and i32 %9, 1, !dbg !37
  %87 = icmp eq i32 %86, 0, !dbg !37
  %88 = and i1 %78, %87, !dbg !37
  %89 = bitcast float %85 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %89, i1 %88) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.280000e+02) #3, !dbg !38
  %92 = fsub float %50, %91, !dbg !31
  %93 = fsub float %51, %91, !dbg !31
  %94 = fmul float %92, %92, !dbg !39
  %95 = fmul float %93, %93, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %96 = fadd float %94, %95, !dbg !42
  %97 = bitcast float %96 to i32, !dbg !40
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !40
  %99 = bitcast i32 %98 to float, !dbg !40
  %100 = fadd float %96, %99, !dbg !42
  %101 = bitcast float %100 to i32, !dbg !40
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !40
  %103 = bitcast i32 %102 to float, !dbg !40
  %104 = fadd float %100, %103, !dbg !42
  %105 = bitcast float %104 to i32, !dbg !40
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !40
  %107 = bitcast i32 %106 to float, !dbg !40
  %108 = fadd float %104, %107, !dbg !42
  %109 = bitcast float %108 to i32, !dbg !40
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !40
  %111 = bitcast i32 %110 to float, !dbg !40
  %112 = fadd float %108, %111, !dbg !42
  %113 = bitcast float %112 to i32, !dbg !40
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !40
  %115 = bitcast i32 %114 to float, !dbg !40
  %116 = fadd float %112, %115, !dbg !42
  %117 = bitcast float %116 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %117, i1 %73) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !40
  %121 = bitcast i32 %120 to float, !dbg !40
  %122 = fadd float %119, %121, !dbg !42
  %123 = bitcast float %122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %123, i1 %88) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %124 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %125 = sext i32 %8 to i64, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !43
  %127 = icmp eq i32 %12, 0, !dbg !44
  %128 = bitcast float %91 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %126, i1 %127) #3, !dbg !44
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %129, i1 %127) #3, !dbg !46
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %130, i1 %127) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clwpijrbnkan7stqjkwdgmoctxhwe5sxj667uaug4em6spziegp6.py", directory: "inductor_cache/lw")
!4 = !{ptr @triton_per_fused_native_group_norm_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_10, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_10", linkageName: "triton_per_fused_native_group_norm_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 21, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 27, scope: !7)
!15 = !DILocation(line: 32, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 32, scope: !7)
!17 = !DILocation(line: 34, column: 53, scope: !7)
!18 = !DILocation(line: 34, column: 49, scope: !7)
!19 = !DILocation(line: 34, column: 98, scope: !7)
!20 = !DILocation(line: 34, column: 59, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 75, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 68, scope: !7)
!25 = !DILocation(line: 34, column: 81, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 106, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 106, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !41)
!41 = !DILocation(line: 46, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 25, scope: !7)
!44 = !DILocation(line: 47, column: 37, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 37, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 36, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
