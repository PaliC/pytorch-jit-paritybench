; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_mul_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = or disjoint i32 %7, 1, !dbg !12
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %10 = shl i32 %9, 9, !dbg !14
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %12 = shl i32 %11, 2, !dbg !15
  %13 = and i32 %12, 508, !dbg !15
  %14 = and i32 %11, 127, !dbg !15
  %15 = or disjoint i32 %10, %13, !dbg !16
  %16 = or disjoint i32 %10, %14, !dbg !16
  %17 = or disjoint i32 %16, 128, !dbg !16
  %18 = or disjoint i32 %16, 256, !dbg !16
  %19 = or disjoint i32 %16, 384, !dbg !16
  %20 = icmp slt i32 %15, 512, !dbg !17
  %21 = icmp slt i32 %16, 512, !dbg !17
  %22 = icmp slt i32 %17, 512, !dbg !17
  %23 = icmp slt i32 %18, 512, !dbg !17
  %24 = icmp slt i32 %19, 512, !dbg !17
  %.frozen = freeze i32 %7, !dbg !18
  %25 = sdiv i32 %.frozen, 4096, !dbg !18
  %26 = sdiv i32 %8, 4096, !dbg !18
  %27 = mul i32 %25, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = shl nsw i32 %25, 9, !dbg !20
  %29 = shl nsw i32 %26, 9, !dbg !20
  %30 = add i32 %15, %28, !dbg !21
  %31 = add i32 %29, %15, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %20) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = shl i32 %6, 10, !dbg !24
  %47 = shl i32 %8, 9, !dbg !24
  %48 = add i32 %15, %46, !dbg !25
  %49 = add i32 %15, %47, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %20) #2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %20) #2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !27
  %64 = add i32 %15, 2048, !dbg !28
  %65 = add i32 %64, %28, !dbg !29
  %66 = add i32 %64, %29, !dbg !29
  %67 = sext i32 %65 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !30
  %69 = sext i32 %66 to i64, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %20) #2, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %20) #2, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !31
  %81 = add i32 %15, 8388608, !dbg !32
  %82 = add i32 %81, %46, !dbg !33
  %83 = add i32 %81, %47, !dbg !33
  %84 = sext i32 %82 to i64, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !34
  %86 = sext i32 %83 to i64, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !34
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %20) #2, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !35
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %20) #2, !dbg !35
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !35
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !35
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !35
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !35
  %98 = add i32 %15, 4096, !dbg !36
  %99 = add i32 %98, %28, !dbg !37
  %100 = add i32 %98, %29, !dbg !37
  %101 = sext i32 %99 to i64, !dbg !38
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !38
  %103 = sext i32 %100 to i64, !dbg !38
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !38
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !39
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !39
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !39
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %20) #2, !dbg !39
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !39
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !39
  %115 = add i32 %15, 16777216, !dbg !40
  %116 = add i32 %115, %46, !dbg !41
  %117 = add i32 %115, %47, !dbg !41
  %118 = sext i32 %116 to i64, !dbg !42
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !42
  %120 = sext i32 %117 to i64, !dbg !42
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !42
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %20) #2, !dbg !43
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !43
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !43
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %20) #2, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !43
  %132 = add i32 %15, 6144, !dbg !44
  %133 = add i32 %132, %28, !dbg !45
  %134 = add i32 %132, %29, !dbg !45
  %135 = sext i32 %133 to i64, !dbg !46
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !46
  %137 = sext i32 %134 to i64, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !46
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %20) #2, !dbg !47
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !47
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !47
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %20) #2, !dbg !47
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !47
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !47
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !47
  %149 = add i32 %15, 25165824, !dbg !48
  %150 = add i32 %149, %46, !dbg !49
  %151 = add i32 %149, %47, !dbg !49
  %152 = sext i32 %150 to i64, !dbg !50
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !50
  %154 = sext i32 %151 to i64, !dbg !50
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !50
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %20) #2, !dbg !51
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !51
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !51
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !51
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !51
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %20) #2, !dbg !51
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !51
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !51
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !51
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !51
  %166 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %167 = insertelement <2 x i32> %166, i32 %72, i64 1, !dbg !23
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !23
  %169 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !27
  %170 = insertelement <2 x i32> %169, i32 %89, i64 1, !dbg !27
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !27
  %172 = fmul <2 x float> %168, %171, !dbg !52
  %173 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %174 = insertelement <2 x i32> %173, i32 %73, i64 1, !dbg !23
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !23
  %176 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !27
  %177 = insertelement <2 x i32> %176, i32 %90, i64 1, !dbg !27
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !27
  %179 = fmul <2 x float> %175, %178, !dbg !52
  %180 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %181 = insertelement <2 x i32> %180, i32 %74, i64 1, !dbg !23
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !23
  %183 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %184 = insertelement <2 x i32> %183, i32 %91, i64 1, !dbg !27
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !27
  %186 = fmul <2 x float> %182, %185, !dbg !52
  %187 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %188 = insertelement <2 x i32> %187, i32 %75, i64 1, !dbg !23
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !23
  %190 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !27
  %191 = insertelement <2 x i32> %190, i32 %92, i64 1, !dbg !27
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !27
  %193 = fmul <2 x float> %189, %192, !dbg !52
  %194 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !23
  %195 = insertelement <2 x i32> %194, i32 %77, i64 1, !dbg !23
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !23
  %197 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !27
  %198 = insertelement <2 x i32> %197, i32 %94, i64 1, !dbg !27
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !27
  %200 = fmul <2 x float> %196, %199, !dbg !52
  %201 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %202 = insertelement <2 x i32> %201, i32 %78, i64 1, !dbg !23
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !23
  %204 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !27
  %205 = insertelement <2 x i32> %204, i32 %95, i64 1, !dbg !27
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !27
  %207 = fmul <2 x float> %203, %206, !dbg !52
  %208 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !23
  %209 = insertelement <2 x i32> %208, i32 %79, i64 1, !dbg !23
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !23
  %211 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !27
  %212 = insertelement <2 x i32> %211, i32 %96, i64 1, !dbg !27
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !27
  %214 = fmul <2 x float> %210, %213, !dbg !52
  %215 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !23
  %216 = insertelement <2 x i32> %215, i32 %80, i64 1, !dbg !23
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !23
  %218 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !27
  %219 = insertelement <2 x i32> %218, i32 %97, i64 1, !dbg !27
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !27
  %221 = fmul <2 x float> %217, %220, !dbg !52
  %shift = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %222 = fadd <2 x float> %172, %shift, !dbg !53
  %shift15 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %223 = fadd <2 x float> %179, %shift15, !dbg !53
  %shift16 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %224 = fadd <2 x float> %186, %shift16, !dbg !53
  %shift17 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %225 = fadd <2 x float> %193, %shift17, !dbg !53
  %shift18 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %226 = fadd <2 x float> %200, %shift18, !dbg !53
  %shift19 = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %227 = fadd <2 x float> %207, %shift19, !dbg !53
  %shift20 = shufflevector <2 x float> %214, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %228 = fadd <2 x float> %214, %shift20, !dbg !53
  %shift21 = shufflevector <2 x float> %221, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %229 = fadd <2 x float> %221, %shift21, !dbg !53
  %230 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !39
  %231 = insertelement <2 x i32> %230, i32 %140, i64 1, !dbg !39
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !39
  %233 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !43
  %234 = insertelement <2 x i32> %233, i32 %157, i64 1, !dbg !43
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !43
  %236 = fmul <2 x float> %232, %235, !dbg !54
  %237 = fadd <2 x float> %222, %236, !dbg !55
  %238 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !39
  %239 = insertelement <2 x i32> %238, i32 %141, i64 1, !dbg !39
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !39
  %241 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !43
  %242 = insertelement <2 x i32> %241, i32 %158, i64 1, !dbg !43
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !43
  %244 = fmul <2 x float> %240, %243, !dbg !54
  %245 = fadd <2 x float> %223, %244, !dbg !55
  %246 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !39
  %247 = insertelement <2 x i32> %246, i32 %142, i64 1, !dbg !39
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !39
  %249 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !43
  %250 = insertelement <2 x i32> %249, i32 %159, i64 1, !dbg !43
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !43
  %252 = fmul <2 x float> %248, %251, !dbg !54
  %253 = fadd <2 x float> %224, %252, !dbg !55
  %254 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !39
  %255 = insertelement <2 x i32> %254, i32 %143, i64 1, !dbg !39
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !39
  %257 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !43
  %258 = insertelement <2 x i32> %257, i32 %160, i64 1, !dbg !43
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !43
  %260 = fmul <2 x float> %256, %259, !dbg !54
  %261 = fadd <2 x float> %225, %260, !dbg !55
  %262 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !39
  %263 = insertelement <2 x i32> %262, i32 %145, i64 1, !dbg !39
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !39
  %265 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !43
  %266 = insertelement <2 x i32> %265, i32 %162, i64 1, !dbg !43
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !43
  %268 = fmul <2 x float> %264, %267, !dbg !54
  %269 = fadd <2 x float> %226, %268, !dbg !55
  %270 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !39
  %271 = insertelement <2 x i32> %270, i32 %146, i64 1, !dbg !39
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !39
  %273 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !43
  %274 = insertelement <2 x i32> %273, i32 %163, i64 1, !dbg !43
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !43
  %276 = fmul <2 x float> %272, %275, !dbg !54
  %277 = fadd <2 x float> %227, %276, !dbg !55
  %278 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !39
  %279 = insertelement <2 x i32> %278, i32 %147, i64 1, !dbg !39
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !39
  %281 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !43
  %282 = insertelement <2 x i32> %281, i32 %164, i64 1, !dbg !43
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !43
  %284 = fmul <2 x float> %280, %283, !dbg !54
  %285 = fadd <2 x float> %228, %284, !dbg !55
  %286 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !39
  %287 = insertelement <2 x i32> %286, i32 %148, i64 1, !dbg !39
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !39
  %289 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !43
  %290 = insertelement <2 x i32> %289, i32 %165, i64 1, !dbg !43
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !43
  %292 = fmul <2 x float> %288, %291, !dbg !54
  %293 = fadd <2 x float> %229, %292, !dbg !55
  %shift22 = shufflevector <2 x float> %236, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %294 = fadd <2 x float> %237, %shift22, !dbg !56
  %295 = extractelement <2 x float> %294, i64 0, !dbg !56
  %shift23 = shufflevector <2 x float> %244, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %296 = fadd <2 x float> %245, %shift23, !dbg !56
  %297 = extractelement <2 x float> %296, i64 0, !dbg !56
  %shift24 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %298 = fadd <2 x float> %253, %shift24, !dbg !56
  %299 = extractelement <2 x float> %298, i64 0, !dbg !56
  %shift25 = shufflevector <2 x float> %260, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %300 = fadd <2 x float> %261, %shift25, !dbg !56
  %301 = extractelement <2 x float> %300, i64 0, !dbg !56
  %shift26 = shufflevector <2 x float> %268, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %302 = fadd <2 x float> %269, %shift26, !dbg !56
  %303 = extractelement <2 x float> %302, i64 0, !dbg !56
  %shift27 = shufflevector <2 x float> %276, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %304 = fadd <2 x float> %277, %shift27, !dbg !56
  %305 = extractelement <2 x float> %304, i64 0, !dbg !56
  %shift28 = shufflevector <2 x float> %284, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %306 = fadd <2 x float> %285, %shift28, !dbg !56
  %307 = extractelement <2 x float> %306, i64 0, !dbg !56
  %shift29 = shufflevector <2 x float> %292, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %308 = fadd <2 x float> %293, %shift29, !dbg !56
  %309 = extractelement <2 x float> %308, i64 0, !dbg !56
  %310 = shl i32 %16, 12, !dbg !57
  %311 = shl i32 %17, 12, !dbg !57
  %312 = shl i32 %18, 12, !dbg !57
  %313 = shl i32 %19, 12, !dbg !57
  %314 = shl i32 %25, 21, !dbg !58
  %315 = add i32 %314, %.decomposed, !dbg !59
  %316 = add i32 %315, %310, !dbg !60
  %317 = add i32 %315, %311, !dbg !60
  %318 = add i32 %315, %312, !dbg !60
  %319 = add i32 %315, %313, !dbg !60
  %320 = sext i32 %316 to i64, !dbg !61
  %321 = getelementptr float, ptr addrspace(1) %2, i64 %320, !dbg !61
  %322 = sext i32 %317 to i64, !dbg !61
  %323 = getelementptr float, ptr addrspace(1) %2, i64 %322, !dbg !61
  %324 = sext i32 %318 to i64, !dbg !61
  %325 = getelementptr float, ptr addrspace(1) %2, i64 %324, !dbg !61
  %326 = sext i32 %319 to i64, !dbg !61
  %327 = getelementptr float, ptr addrspace(1) %2, i64 %326, !dbg !61
  %328 = shl i32 %11, 3, !dbg !62
  %329 = and i32 %328, 1016, !dbg !62
  %330 = shl i32 %11, 1, !dbg !62
  %331 = and i32 %330, 254, !dbg !62
  %.idx = shl nuw nsw i32 %329, 3, !dbg !62
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !62
  %333 = bitcast float %295 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !62
  %334 = shl nuw nsw i32 %329, 1, !dbg !62
  %335 = or disjoint i32 %334, 4, !dbg !62
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %335, !dbg !62
  %337 = bitcast float %297 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #2, !dbg !62
  %338 = or disjoint i32 %334, 8, !dbg !62
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !62
  %340 = bitcast float %299 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #2, !dbg !62
  %341 = or disjoint i32 %334, 12, !dbg !62
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !62
  %343 = bitcast float %301 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #2, !dbg !62
  %344 = or disjoint i32 %329, 1, !dbg !62
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !62
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %344, !dbg !62
  %347 = bitcast float %303 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !62
  %348 = or disjoint i32 %329, 3, !dbg !62
  %349 = or disjoint i32 %329, 2, !dbg !62
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !62
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %348, !dbg !62
  %352 = bitcast float %305 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #2, !dbg !62
  %353 = or disjoint i32 %329, 5, !dbg !62
  %354 = or disjoint i32 %329, 4, !dbg !62
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !62
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %353, !dbg !62
  %357 = bitcast float %307 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #2, !dbg !62
  %358 = or disjoint i32 %329, 7, !dbg !62
  %359 = or disjoint i32 %329, 6, !dbg !62
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !62
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %358, !dbg !62
  %362 = bitcast float %309 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !62
  %364 = getelementptr float, ptr addrspace(3) %363, i32 %331, !dbg !62
  %365 = or disjoint i32 %331, 256, !dbg !62
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !62
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %365, !dbg !62
  %368 = load <2 x i32>, ptr addrspace(3) %367, align 8, !dbg !62
  %369 = or disjoint i32 %331, 512, !dbg !62
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i32 %369, !dbg !62
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %369, !dbg !62
  %372 = load <2 x i32>, ptr addrspace(3) %371, align 8, !dbg !62
  %373 = or disjoint i32 %331, 768, !dbg !62
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %373, !dbg !62
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %373, !dbg !62
  %376 = load <2 x i32>, ptr addrspace(3) %375, align 8, !dbg !62
  %.extract = load i32, ptr addrspace(3) %364, align 8, !dbg !62
  %377 = getelementptr inbounds i8, ptr addrspace(3) %364, i32 4, !dbg !62
  %.extract8 = load i32, ptr addrspace(3) %377, align 4, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %321, i1 %21) #2, !dbg !62
  %.extract9 = extractelement <2 x i32> %368, i64 0, !dbg !62
  %.extract10 = extractelement <2 x i32> %368, i64 1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %323, i1 %22) #2, !dbg !62
  %.extract11 = extractelement <2 x i32> %372, i64 0, !dbg !62
  %.extract12 = extractelement <2 x i32> %372, i64 1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %325, i1 %23) #2, !dbg !62
  %.extract13 = extractelement <2 x i32> %376, i64 0, !dbg !62
  %.extract14 = extractelement <2 x i32> %376, i64 1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %327, i1 %24) #2, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3api6onjseajvp6qxcdvzkpjeo73u5r6t76ylynvqyrjhahbfcd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_12", linkageName: "triton_poi_fused__softmax_mul_sum_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 37, scope: !7)
!29 = !DILocation(line: 34, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 40, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 54, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 51, scope: !7)
!40 = !DILocation(line: 37, column: 41, scope: !7)
!41 = !DILocation(line: 37, column: 46, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 55, scope: !7)
!44 = !DILocation(line: 38, column: 38, scope: !7)
!45 = !DILocation(line: 38, column: 43, scope: !7)
!46 = !DILocation(line: 38, column: 31, scope: !7)
!47 = !DILocation(line: 38, column: 52, scope: !7)
!48 = !DILocation(line: 39, column: 42, scope: !7)
!49 = !DILocation(line: 39, column: 47, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 56, scope: !7)
!52 = !DILocation(line: 40, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 46, column: 20, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 47, column: 48, scope: !7)
!59 = !DILocation(line: 47, column: 30, scope: !7)
!60 = !DILocation(line: 47, column: 40, scope: !7)
!61 = !DILocation(line: 47, column: 25, scope: !7)
!62 = !DILocation(line: 47, column: 60, scope: !7)
!63 = !DILocation(line: 47, column: 4, scope: !7)
