; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = and i32 %17, 127, !dbg !12
  %21 = or disjoint i32 %16, %19, !dbg !13
  %22 = or disjoint i32 %16, %20, !dbg !13
  %23 = or disjoint i32 %22, 128, !dbg !13
  %24 = or disjoint i32 %22, 256, !dbg !13
  %25 = or disjoint i32 %22, 384, !dbg !13
  %26 = icmp slt i32 %21, 512, !dbg !14
  %27 = icmp slt i32 %22, 512, !dbg !14
  %28 = icmp slt i32 %23, 512, !dbg !14
  %29 = icmp slt i32 %24, 512, !dbg !14
  %30 = icmp slt i32 %25, 512, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 1, !dbg !16
  %33 = or disjoint i32 %32, 1, !dbg !17
  %34 = icmp slt i32 %32, 256, !dbg !18
  %35 = icmp slt i32 %33, 256, !dbg !18
  %.frozen = freeze i32 %32, !dbg !19
  %36 = sdiv i32 %.frozen, 16, !dbg !19
  %.frozen1 = freeze i32 %33, !dbg !19
  %37 = sdiv i32 %.frozen1, 16, !dbg !19
  %38 = mul i32 %36, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %39 = mul i32 %37, 16, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %39, !dbg !20
  %.frozen3 = freeze i32 %21, !dbg !21
  %40 = sdiv i32 %.frozen3, 128, !dbg !21
  %41 = mul i32 %40, 128, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %41, !dbg !22
  %42 = sext i32 %36 to i64, !dbg !23
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %37 to i64, !dbg !23
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %34) #2, !dbg !24
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %34) #2, !dbg !24
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %34) #2, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %34) #2, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %35) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %35) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %35) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %35) #2, !dbg !24
  %54 = sext i32 %.decomposed to i64, !dbg !25
  %55 = getelementptr i64, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = sext i32 %.decomposed2 to i64, !dbg !25
  %57 = getelementptr i64, ptr addrspace(1) %1, i64 %56, !dbg !25
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !26
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !26
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !26
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !26
  %66 = getelementptr i64, ptr addrspace(1) %3, i64 %54, !dbg !27
  %67 = getelementptr i64, ptr addrspace(1) %3, i64 %56, !dbg !27
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %34) #2, !dbg !28
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %34) #2, !dbg !28
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %34) #2, !dbg !28
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %34) #2, !dbg !28
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %35) #2, !dbg !28
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %35) #2, !dbg !28
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %35) #2, !dbg !28
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %35) #2, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #2, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #2, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #2, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %34) #2, !dbg !30
  %82 = bitcast i32 %81 to float, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %35) #2, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %35) #2, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %35) #2, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %35) #2, !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !31
  %89 = getelementptr i64, ptr addrspace(1) %5, i64 %44, !dbg !31
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %34) #2, !dbg !32
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %34) #2, !dbg !32
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %34) #2, !dbg !32
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %34) #2, !dbg !32
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %35) #2, !dbg !32
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %35) #2, !dbg !32
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %35) #2, !dbg !32
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %35) #2, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !33
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %34) #2, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %34) #2, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %34) #2, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %34) #2, !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %35) #2, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %35) #2, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %35) #2, !dbg !34
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %35) #2, !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = lshr i64 %61, 61, !dbg !35
  %111 = and i64 %110, 4, !dbg !35
  %112 = add i64 %111, %61, !dbg !35
  %113 = lshr i64 %65, 61, !dbg !35
  %114 = and i64 %113, 4, !dbg !35
  %115 = add i64 %114, %65, !dbg !35
  %116 = shl i64 %112, 7, !dbg !36
  %117 = shl i64 %115, 7, !dbg !36
  %118 = shl i32 %40, 11, !dbg !37
  %119 = and i1 %34, %26, !dbg !38
  %120 = and i1 %26, %35, !dbg !38
  %121 = and i1 %34, %27, !dbg !38
  %122 = and i1 %28, %34, !dbg !38
  %123 = and i1 %29, %34, !dbg !38
  %124 = and i1 %30, %34, !dbg !38
  %125 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !39
  %126 = insertelement <2 x i32> %125, i32 %.decomposed4, i64 1, !dbg !39
  %127 = sext <2 x i32> %126 to <2 x i64>, !dbg !39
  %128 = extractelement <2 x i64> %127, i64 1, !dbg !40
  %129 = add i64 %116, %128, !dbg !40
  %130 = add i64 %117, %128, !dbg !40
  %131 = insertelement <2 x i64> poison, i64 %49, i64 0, !dbg !41
  %132 = insertelement <2 x i64> %131, i64 %71, i64 1, !dbg !41
  %133 = lshr <2 x i64> %132, splat (i64 61), !dbg !41
  %134 = and <2 x i64> %133, splat (i64 4), !dbg !41
  %135 = add <2 x i64> %134, %132, !dbg !41
  %136 = shl <2 x i64> %135, <i64 9, i64 7>, !dbg !42
  %137 = add <2 x i64> %136, %127, !dbg !43
  %138 = extractelement <2 x i64> %137, i64 0, !dbg !44
  %139 = add i64 %138, %129, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !45
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %119) #2, !dbg !46
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !46
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !46
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !46
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !46
  %146 = insertelement <2 x i64> poison, i64 %53, i64 0, !dbg !41
  %147 = insertelement <2 x i64> %146, i64 %75, i64 1, !dbg !41
  %148 = lshr <2 x i64> %147, splat (i64 61), !dbg !41
  %149 = and <2 x i64> %148, splat (i64 4), !dbg !41
  %150 = add <2 x i64> %149, %147, !dbg !41
  %151 = shl <2 x i64> %150, <i64 9, i64 7>, !dbg !42
  %152 = add <2 x i64> %151, %127, !dbg !43
  %153 = extractelement <2 x i64> %152, i64 0, !dbg !44
  %154 = add i64 %153, %130, !dbg !39
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !45
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %120) #2, !dbg !46
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !46
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !46
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !46
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !46
  %161 = extractelement <2 x i64> %137, i64 1, !dbg !44
  %162 = add i64 %138, %161, !dbg !44
  %163 = extractelement <2 x i64> %152, i64 1, !dbg !44
  %164 = add i64 %153, %163, !dbg !44
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !47
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %119) #2, !dbg !48
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !48
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !48
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !48
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !48
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %120) #2, !dbg !48
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !48
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !48
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !48
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !48
  %177 = lshr i64 %93, 61, !dbg !49
  %178 = and i64 %177, 4, !dbg !49
  %179 = add i64 %178, %93, !dbg !49
  %180 = lshr i64 %97, 61, !dbg !49
  %181 = and i64 %180, 4, !dbg !49
  %182 = add i64 %181, %97, !dbg !49
  %183 = shl i64 %179, 9, !dbg !50
  %184 = shl i64 %182, 9, !dbg !50
  %185 = extractelement <2 x i64> %127, i64 0, !dbg !51
  %186 = add i64 %129, %185, !dbg !51
  %187 = add i64 %186, %183, !dbg !52
  %188 = add i64 %130, %185, !dbg !51
  %189 = add i64 %188, %184, !dbg !52
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !53
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !53
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %119) #2, !dbg !54
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !54
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !54
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !54
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !54
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %120) #2, !dbg !54
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !54
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !54
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !54
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !54
  %202 = add i64 %161, %185, !dbg !55
  %203 = add i64 %202, %183, !dbg !56
  %204 = add i64 %163, %185, !dbg !55
  %205 = add i64 %204, %184, !dbg !56
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !57
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !57
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %119) #2, !dbg !58
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !58
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !58
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !58
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !58
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %120) #2, !dbg !58
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !58
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !58
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !58
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !58
  %218 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !54
  %219 = insertelement <2 x i32> %218, i32 %142, i64 1, !dbg !54
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !54
  %221 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !58
  %222 = insertelement <2 x i32> %221, i32 %168, i64 1, !dbg !58
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !58
  %224 = fsub <2 x float> %223, %220, !dbg !59
  %225 = insertelement <2 x float> poison, float %82, i64 0, !dbg !60
  %226 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %227 = fmul <2 x float> %224, %226, !dbg !60
  %228 = fadd <2 x float> %227, %220, !dbg !61
  %229 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !54
  %230 = insertelement <2 x i32> %229, i32 %143, i64 1, !dbg !54
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !54
  %232 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !58
  %233 = insertelement <2 x i32> %232, i32 %169, i64 1, !dbg !58
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !58
  %235 = fsub <2 x float> %234, %231, !dbg !59
  %236 = fmul <2 x float> %235, %226, !dbg !60
  %237 = fadd <2 x float> %236, %231, !dbg !61
  %238 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !54
  %239 = insertelement <2 x i32> %238, i32 %144, i64 1, !dbg !54
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !54
  %241 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !58
  %242 = insertelement <2 x i32> %241, i32 %170, i64 1, !dbg !58
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !58
  %244 = fsub <2 x float> %243, %240, !dbg !59
  %245 = fmul <2 x float> %244, %226, !dbg !60
  %246 = fadd <2 x float> %245, %240, !dbg !61
  %247 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !54
  %248 = insertelement <2 x i32> %247, i32 %145, i64 1, !dbg !54
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !54
  %250 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !58
  %251 = insertelement <2 x i32> %250, i32 %171, i64 1, !dbg !58
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !58
  %253 = fsub <2 x float> %252, %249, !dbg !59
  %254 = fmul <2 x float> %253, %226, !dbg !60
  %255 = fadd <2 x float> %254, %249, !dbg !61
  %256 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !54
  %257 = insertelement <2 x i32> %256, i32 %157, i64 1, !dbg !54
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !54
  %259 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !58
  %260 = insertelement <2 x i32> %259, i32 %173, i64 1, !dbg !58
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !58
  %262 = fsub <2 x float> %261, %258, !dbg !59
  %263 = insertelement <2 x float> poison, float %87, i64 0, !dbg !60
  %264 = shufflevector <2 x float> %263, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %265 = fmul <2 x float> %262, %264, !dbg !60
  %266 = fadd <2 x float> %265, %258, !dbg !61
  %267 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !54
  %268 = insertelement <2 x i32> %267, i32 %158, i64 1, !dbg !54
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !54
  %270 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !58
  %271 = insertelement <2 x i32> %270, i32 %174, i64 1, !dbg !58
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !58
  %273 = fsub <2 x float> %272, %269, !dbg !59
  %274 = fmul <2 x float> %273, %264, !dbg !60
  %275 = fadd <2 x float> %274, %269, !dbg !61
  %276 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !54
  %277 = insertelement <2 x i32> %276, i32 %159, i64 1, !dbg !54
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !54
  %279 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !58
  %280 = insertelement <2 x i32> %279, i32 %175, i64 1, !dbg !58
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !58
  %282 = fsub <2 x float> %281, %278, !dbg !59
  %283 = fmul <2 x float> %282, %264, !dbg !60
  %284 = fadd <2 x float> %283, %278, !dbg !61
  %285 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !54
  %286 = insertelement <2 x i32> %285, i32 %160, i64 1, !dbg !54
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !54
  %288 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !58
  %289 = insertelement <2 x i32> %288, i32 %176, i64 1, !dbg !58
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !58
  %291 = fsub <2 x float> %290, %287, !dbg !59
  %292 = fmul <2 x float> %291, %264, !dbg !60
  %293 = fadd <2 x float> %292, %287, !dbg !61
  %294 = extractelement <2 x float> %228, i64 0, !dbg !62
  %295 = extractelement <2 x float> %228, i64 1, !dbg !63
  %296 = fsub float %294, %295, !dbg !62
  %297 = extractelement <2 x float> %237, i64 0, !dbg !62
  %298 = extractelement <2 x float> %237, i64 1, !dbg !63
  %299 = fsub float %297, %298, !dbg !62
  %300 = extractelement <2 x float> %246, i64 0, !dbg !62
  %301 = extractelement <2 x float> %246, i64 1, !dbg !63
  %302 = fsub float %300, %301, !dbg !62
  %303 = extractelement <2 x float> %255, i64 0, !dbg !62
  %304 = extractelement <2 x float> %255, i64 1, !dbg !63
  %305 = fsub float %303, %304, !dbg !62
  %306 = extractelement <2 x float> %266, i64 0, !dbg !62
  %307 = extractelement <2 x float> %266, i64 1, !dbg !63
  %308 = fsub float %306, %307, !dbg !62
  %309 = extractelement <2 x float> %275, i64 0, !dbg !62
  %310 = extractelement <2 x float> %275, i64 1, !dbg !63
  %311 = fsub float %309, %310, !dbg !62
  %312 = extractelement <2 x float> %284, i64 0, !dbg !62
  %313 = extractelement <2 x float> %284, i64 1, !dbg !63
  %314 = fsub float %312, %313, !dbg !62
  %315 = extractelement <2 x float> %293, i64 0, !dbg !62
  %316 = extractelement <2 x float> %293, i64 1, !dbg !63
  %317 = fsub float %315, %316, !dbg !62
  %318 = fmul float %296, %104, !dbg !64
  %319 = fmul float %299, %104, !dbg !64
  %320 = fmul float %302, %104, !dbg !64
  %321 = fmul float %305, %104, !dbg !64
  %322 = fmul float %308, %109, !dbg !64
  %323 = fmul float %311, %109, !dbg !64
  %324 = fmul float %314, %109, !dbg !64
  %325 = fmul float %317, %109, !dbg !64
  %326 = fadd float %295, %318, !dbg !63
  %327 = fadd float %298, %319, !dbg !63
  %328 = fadd float %301, %320, !dbg !63
  %329 = fadd float %304, %321, !dbg !63
  %330 = fadd float %307, %322, !dbg !63
  %331 = fadd float %310, %323, !dbg !63
  %332 = fadd float %313, %324, !dbg !63
  %333 = fadd float %316, %325, !dbg !63
  %334 = fsub float 0.000000e+00, %326, !dbg !65
  %335 = fsub float 0.000000e+00, %327, !dbg !65
  %336 = fsub float 0.000000e+00, %328, !dbg !65
  %337 = fsub float 0.000000e+00, %329, !dbg !65
  %338 = fsub float 0.000000e+00, %330, !dbg !65
  %339 = fsub float 0.000000e+00, %331, !dbg !65
  %340 = fsub float 0.000000e+00, %332, !dbg !65
  %341 = fsub float 0.000000e+00, %333, !dbg !65
  %342 = fmul float %334, 0x3FF7154760000000, !dbg !69
  %343 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %342) #2, !dbg !69
  %344 = fmul float %335, 0x3FF7154760000000, !dbg !69
  %345 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %344) #2, !dbg !69
  %346 = fmul float %336, 0x3FF7154760000000, !dbg !69
  %347 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %346) #2, !dbg !69
  %348 = fmul float %337, 0x3FF7154760000000, !dbg !69
  %349 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %348) #2, !dbg !69
  %350 = fmul float %338, 0x3FF7154760000000, !dbg !69
  %351 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %350) #2, !dbg !69
  %352 = fmul float %339, 0x3FF7154760000000, !dbg !69
  %353 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %352) #2, !dbg !69
  %354 = fmul float %340, 0x3FF7154760000000, !dbg !69
  %355 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %354) #2, !dbg !69
  %356 = fmul float %341, 0x3FF7154760000000, !dbg !69
  %357 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %356) #2, !dbg !69
  %358 = fadd float %343, 1.000000e+00, !dbg !70
  %359 = fadd float %345, 1.000000e+00, !dbg !70
  %360 = fadd float %347, 1.000000e+00, !dbg !70
  %361 = fadd float %349, 1.000000e+00, !dbg !70
  %362 = fadd float %351, 1.000000e+00, !dbg !70
  %363 = fadd float %353, 1.000000e+00, !dbg !70
  %364 = fadd float %355, 1.000000e+00, !dbg !70
  %365 = fadd float %357, 1.000000e+00, !dbg !70
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %358) #2, !dbg !71
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %359) #2, !dbg !71
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %360) #2, !dbg !71
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %361) #2, !dbg !71
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %362) #2, !dbg !71
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %363) #2, !dbg !71
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %364) #2, !dbg !71
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %365) #2, !dbg !71
  %374 = getelementptr float, ptr addrspace(1) %7, i64 %139, !dbg !72
  %375 = getelementptr float, ptr addrspace(1) %7, i64 %154, !dbg !72
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %374, i1 %119) #2, !dbg !73
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !73
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !73
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !73
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !73
  %381 = bitcast i32 %377 to float, !dbg !73
  %382 = bitcast i32 %378 to float, !dbg !73
  %383 = bitcast i32 %379 to float, !dbg !73
  %384 = bitcast i32 %380 to float, !dbg !73
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %375, i1 %120) #2, !dbg !73
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !73
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !73
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !73
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !73
  %390 = bitcast i32 %386 to float, !dbg !73
  %391 = bitcast i32 %387 to float, !dbg !73
  %392 = bitcast i32 %388 to float, !dbg !73
  %393 = bitcast i32 %389 to float, !dbg !73
  %394 = getelementptr float, ptr addrspace(1) %8, i64 %139, !dbg !74
  %395 = getelementptr float, ptr addrspace(1) %8, i64 %154, !dbg !74
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %394, i1 %119) #2, !dbg !75
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !75
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !75
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !75
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !75
  %401 = bitcast i32 %397 to float, !dbg !75
  %402 = bitcast i32 %398 to float, !dbg !75
  %403 = bitcast i32 %399 to float, !dbg !75
  %404 = bitcast i32 %400 to float, !dbg !75
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %395, i1 %120) #2, !dbg !75
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !75
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !75
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !75
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !75
  %410 = bitcast i32 %406 to float, !dbg !75
  %411 = bitcast i32 %407 to float, !dbg !75
  %412 = bitcast i32 %408 to float, !dbg !75
  %413 = bitcast i32 %409 to float, !dbg !75
  %414 = fsub float 0.000000e+00, %401, !dbg !76
  %415 = fsub float 0.000000e+00, %402, !dbg !76
  %416 = fsub float 0.000000e+00, %403, !dbg !76
  %417 = fsub float 0.000000e+00, %404, !dbg !76
  %418 = fsub float 0.000000e+00, %410, !dbg !76
  %419 = fsub float 0.000000e+00, %411, !dbg !76
  %420 = fsub float 0.000000e+00, %412, !dbg !76
  %421 = fsub float 0.000000e+00, %413, !dbg !76
  %422 = fmul float %414, 0x3FF7154760000000, !dbg !78
  %423 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %422) #2, !dbg !78
  %424 = fmul float %415, 0x3FF7154760000000, !dbg !78
  %425 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %424) #2, !dbg !78
  %426 = fmul float %416, 0x3FF7154760000000, !dbg !78
  %427 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %426) #2, !dbg !78
  %428 = fmul float %417, 0x3FF7154760000000, !dbg !78
  %429 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %428) #2, !dbg !78
  %430 = fmul float %418, 0x3FF7154760000000, !dbg !78
  %431 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %430) #2, !dbg !78
  %432 = fmul float %419, 0x3FF7154760000000, !dbg !78
  %433 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %432) #2, !dbg !78
  %434 = fmul float %420, 0x3FF7154760000000, !dbg !78
  %435 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %434) #2, !dbg !78
  %436 = fmul float %421, 0x3FF7154760000000, !dbg !78
  %437 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %436) #2, !dbg !78
  %438 = fadd float %423, 1.000000e+00, !dbg !79
  %439 = fadd float %425, 1.000000e+00, !dbg !79
  %440 = fadd float %427, 1.000000e+00, !dbg !79
  %441 = fadd float %429, 1.000000e+00, !dbg !79
  %442 = fadd float %431, 1.000000e+00, !dbg !79
  %443 = fadd float %433, 1.000000e+00, !dbg !79
  %444 = fadd float %435, 1.000000e+00, !dbg !79
  %445 = fadd float %437, 1.000000e+00, !dbg !79
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %438) #2, !dbg !80
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %439) #2, !dbg !80
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %440) #2, !dbg !80
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %441) #2, !dbg !80
  %450 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %442) #2, !dbg !80
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %443) #2, !dbg !80
  %452 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %444) #2, !dbg !80
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %445) #2, !dbg !80
  %454 = fmul float %446, %381, !dbg !81
  %455 = fmul float %447, %382, !dbg !81
  %456 = fmul float %448, %383, !dbg !81
  %457 = fmul float %449, %384, !dbg !81
  %458 = fmul float %450, %390, !dbg !81
  %459 = fmul float %451, %391, !dbg !81
  %460 = fmul float %452, %392, !dbg !81
  %461 = fmul float %453, %393, !dbg !81
  %462 = getelementptr float, ptr addrspace(1) %7, i64 %162, !dbg !82
  %463 = getelementptr float, ptr addrspace(1) %7, i64 %164, !dbg !82
  %464 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %119) #2, !dbg !83
  %465 = extractvalue { i32, i32, i32, i32 } %464, 0, !dbg !83
  %466 = extractvalue { i32, i32, i32, i32 } %464, 1, !dbg !83
  %467 = extractvalue { i32, i32, i32, i32 } %464, 2, !dbg !83
  %468 = extractvalue { i32, i32, i32, i32 } %464, 3, !dbg !83
  %469 = bitcast i32 %465 to float, !dbg !83
  %470 = bitcast i32 %466 to float, !dbg !83
  %471 = bitcast i32 %467 to float, !dbg !83
  %472 = bitcast i32 %468 to float, !dbg !83
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %463, i1 %120) #2, !dbg !83
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !83
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !83
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !83
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !83
  %478 = bitcast i32 %474 to float, !dbg !83
  %479 = bitcast i32 %475 to float, !dbg !83
  %480 = bitcast i32 %476 to float, !dbg !83
  %481 = bitcast i32 %477 to float, !dbg !83
  %482 = getelementptr float, ptr addrspace(1) %8, i64 %162, !dbg !84
  %483 = getelementptr float, ptr addrspace(1) %8, i64 %164, !dbg !84
  %484 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %482, i1 %119) #2, !dbg !85
  %485 = extractvalue { i32, i32, i32, i32 } %484, 0, !dbg !85
  %486 = extractvalue { i32, i32, i32, i32 } %484, 1, !dbg !85
  %487 = extractvalue { i32, i32, i32, i32 } %484, 2, !dbg !85
  %488 = extractvalue { i32, i32, i32, i32 } %484, 3, !dbg !85
  %489 = bitcast i32 %485 to float, !dbg !85
  %490 = bitcast i32 %486 to float, !dbg !85
  %491 = bitcast i32 %487 to float, !dbg !85
  %492 = bitcast i32 %488 to float, !dbg !85
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %483, i1 %120) #2, !dbg !85
  %494 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !85
  %495 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !85
  %496 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !85
  %497 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !85
  %498 = bitcast i32 %494 to float, !dbg !85
  %499 = bitcast i32 %495 to float, !dbg !85
  %500 = bitcast i32 %496 to float, !dbg !85
  %501 = bitcast i32 %497 to float, !dbg !85
  %502 = fsub float 0.000000e+00, %489, !dbg !86
  %503 = fsub float 0.000000e+00, %490, !dbg !86
  %504 = fsub float 0.000000e+00, %491, !dbg !86
  %505 = fsub float 0.000000e+00, %492, !dbg !86
  %506 = fsub float 0.000000e+00, %498, !dbg !86
  %507 = fsub float 0.000000e+00, %499, !dbg !86
  %508 = fsub float 0.000000e+00, %500, !dbg !86
  %509 = fsub float 0.000000e+00, %501, !dbg !86
  %510 = fmul float %502, 0x3FF7154760000000, !dbg !88
  %511 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %510) #2, !dbg !88
  %512 = fmul float %503, 0x3FF7154760000000, !dbg !88
  %513 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %512) #2, !dbg !88
  %514 = fmul float %504, 0x3FF7154760000000, !dbg !88
  %515 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %514) #2, !dbg !88
  %516 = fmul float %505, 0x3FF7154760000000, !dbg !88
  %517 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %516) #2, !dbg !88
  %518 = fmul float %506, 0x3FF7154760000000, !dbg !88
  %519 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %518) #2, !dbg !88
  %520 = fmul float %507, 0x3FF7154760000000, !dbg !88
  %521 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %520) #2, !dbg !88
  %522 = fmul float %508, 0x3FF7154760000000, !dbg !88
  %523 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %522) #2, !dbg !88
  %524 = fmul float %509, 0x3FF7154760000000, !dbg !88
  %525 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %524) #2, !dbg !88
  %526 = fadd float %511, 1.000000e+00, !dbg !89
  %527 = fadd float %513, 1.000000e+00, !dbg !89
  %528 = fadd float %515, 1.000000e+00, !dbg !89
  %529 = fadd float %517, 1.000000e+00, !dbg !89
  %530 = fadd float %519, 1.000000e+00, !dbg !89
  %531 = fadd float %521, 1.000000e+00, !dbg !89
  %532 = fadd float %523, 1.000000e+00, !dbg !89
  %533 = fadd float %525, 1.000000e+00, !dbg !89
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %526) #2, !dbg !90
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %527) #2, !dbg !90
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %528) #2, !dbg !90
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %529) #2, !dbg !90
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %530) #2, !dbg !90
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %531) #2, !dbg !90
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %532) #2, !dbg !90
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %533) #2, !dbg !90
  %542 = fmul float %534, %469, !dbg !91
  %543 = fmul float %535, %470, !dbg !91
  %544 = fmul float %536, %471, !dbg !91
  %545 = fmul float %537, %472, !dbg !91
  %546 = fmul float %538, %478, !dbg !91
  %547 = fmul float %539, %479, !dbg !91
  %548 = fmul float %540, %480, !dbg !91
  %549 = fmul float %541, %481, !dbg !91
  %550 = fsub float %542, %454, !dbg !92
  %551 = fsub float %543, %455, !dbg !92
  %552 = fsub float %544, %456, !dbg !92
  %553 = fsub float %545, %457, !dbg !92
  %554 = fsub float %546, %458, !dbg !92
  %555 = fsub float %547, %459, !dbg !92
  %556 = fsub float %548, %460, !dbg !92
  %557 = fsub float %549, %461, !dbg !92
  %558 = fmul float %550, %82, !dbg !93
  %559 = fmul float %551, %82, !dbg !93
  %560 = fmul float %552, %82, !dbg !93
  %561 = fmul float %553, %82, !dbg !93
  %562 = fmul float %554, %87, !dbg !93
  %563 = fmul float %555, %87, !dbg !93
  %564 = fmul float %556, %87, !dbg !93
  %565 = fmul float %557, %87, !dbg !93
  %566 = fadd float %454, %558, !dbg !94
  %567 = fadd float %455, %559, !dbg !94
  %568 = fadd float %456, %560, !dbg !94
  %569 = fadd float %457, %561, !dbg !94
  %570 = fadd float %458, %562, !dbg !94
  %571 = fadd float %459, %563, !dbg !94
  %572 = fadd float %460, %564, !dbg !94
  %573 = fadd float %461, %565, !dbg !94
  %574 = getelementptr float, ptr addrspace(1) %7, i64 %187, !dbg !95
  %575 = getelementptr float, ptr addrspace(1) %7, i64 %189, !dbg !95
  %576 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %574, i1 %119) #2, !dbg !96
  %577 = extractvalue { i32, i32, i32, i32 } %576, 0, !dbg !96
  %578 = extractvalue { i32, i32, i32, i32 } %576, 1, !dbg !96
  %579 = extractvalue { i32, i32, i32, i32 } %576, 2, !dbg !96
  %580 = extractvalue { i32, i32, i32, i32 } %576, 3, !dbg !96
  %581 = bitcast i32 %577 to float, !dbg !96
  %582 = bitcast i32 %578 to float, !dbg !96
  %583 = bitcast i32 %579 to float, !dbg !96
  %584 = bitcast i32 %580 to float, !dbg !96
  %585 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %575, i1 %120) #2, !dbg !96
  %586 = extractvalue { i32, i32, i32, i32 } %585, 0, !dbg !96
  %587 = extractvalue { i32, i32, i32, i32 } %585, 1, !dbg !96
  %588 = extractvalue { i32, i32, i32, i32 } %585, 2, !dbg !96
  %589 = extractvalue { i32, i32, i32, i32 } %585, 3, !dbg !96
  %590 = bitcast i32 %586 to float, !dbg !96
  %591 = bitcast i32 %587 to float, !dbg !96
  %592 = bitcast i32 %588 to float, !dbg !96
  %593 = bitcast i32 %589 to float, !dbg !96
  %594 = getelementptr float, ptr addrspace(1) %8, i64 %187, !dbg !97
  %595 = getelementptr float, ptr addrspace(1) %8, i64 %189, !dbg !97
  %596 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %594, i1 %119) #2, !dbg !98
  %597 = extractvalue { i32, i32, i32, i32 } %596, 0, !dbg !98
  %598 = extractvalue { i32, i32, i32, i32 } %596, 1, !dbg !98
  %599 = extractvalue { i32, i32, i32, i32 } %596, 2, !dbg !98
  %600 = extractvalue { i32, i32, i32, i32 } %596, 3, !dbg !98
  %601 = bitcast i32 %597 to float, !dbg !98
  %602 = bitcast i32 %598 to float, !dbg !98
  %603 = bitcast i32 %599 to float, !dbg !98
  %604 = bitcast i32 %600 to float, !dbg !98
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %595, i1 %120) #2, !dbg !98
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !98
  %607 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !98
  %608 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !98
  %609 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !98
  %610 = bitcast i32 %606 to float, !dbg !98
  %611 = bitcast i32 %607 to float, !dbg !98
  %612 = bitcast i32 %608 to float, !dbg !98
  %613 = bitcast i32 %609 to float, !dbg !98
  %614 = fsub float 0.000000e+00, %601, !dbg !99
  %615 = fsub float 0.000000e+00, %602, !dbg !99
  %616 = fsub float 0.000000e+00, %603, !dbg !99
  %617 = fsub float 0.000000e+00, %604, !dbg !99
  %618 = fsub float 0.000000e+00, %610, !dbg !99
  %619 = fsub float 0.000000e+00, %611, !dbg !99
  %620 = fsub float 0.000000e+00, %612, !dbg !99
  %621 = fsub float 0.000000e+00, %613, !dbg !99
  %622 = fmul float %614, 0x3FF7154760000000, !dbg !101
  %623 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %622) #2, !dbg !101
  %624 = fmul float %615, 0x3FF7154760000000, !dbg !101
  %625 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %624) #2, !dbg !101
  %626 = fmul float %616, 0x3FF7154760000000, !dbg !101
  %627 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %626) #2, !dbg !101
  %628 = fmul float %617, 0x3FF7154760000000, !dbg !101
  %629 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %628) #2, !dbg !101
  %630 = fmul float %618, 0x3FF7154760000000, !dbg !101
  %631 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %630) #2, !dbg !101
  %632 = fmul float %619, 0x3FF7154760000000, !dbg !101
  %633 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %632) #2, !dbg !101
  %634 = fmul float %620, 0x3FF7154760000000, !dbg !101
  %635 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %634) #2, !dbg !101
  %636 = fmul float %621, 0x3FF7154760000000, !dbg !101
  %637 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %636) #2, !dbg !101
  %638 = fadd float %623, 1.000000e+00, !dbg !102
  %639 = fadd float %625, 1.000000e+00, !dbg !102
  %640 = fadd float %627, 1.000000e+00, !dbg !102
  %641 = fadd float %629, 1.000000e+00, !dbg !102
  %642 = fadd float %631, 1.000000e+00, !dbg !102
  %643 = fadd float %633, 1.000000e+00, !dbg !102
  %644 = fadd float %635, 1.000000e+00, !dbg !102
  %645 = fadd float %637, 1.000000e+00, !dbg !102
  %646 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %638) #2, !dbg !103
  %647 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %639) #2, !dbg !103
  %648 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %640) #2, !dbg !103
  %649 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %641) #2, !dbg !103
  %650 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %642) #2, !dbg !103
  %651 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %643) #2, !dbg !103
  %652 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %644) #2, !dbg !103
  %653 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %645) #2, !dbg !103
  %654 = fmul float %646, %581, !dbg !104
  %655 = fmul float %647, %582, !dbg !104
  %656 = fmul float %648, %583, !dbg !104
  %657 = fmul float %649, %584, !dbg !104
  %658 = fmul float %650, %590, !dbg !104
  %659 = fmul float %651, %591, !dbg !104
  %660 = fmul float %652, %592, !dbg !104
  %661 = fmul float %653, %593, !dbg !104
  %662 = getelementptr float, ptr addrspace(1) %7, i64 %203, !dbg !105
  %663 = getelementptr float, ptr addrspace(1) %7, i64 %205, !dbg !105
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %662, i1 %119) #2, !dbg !106
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !106
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !106
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !106
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !106
  %669 = bitcast i32 %665 to float, !dbg !106
  %670 = bitcast i32 %666 to float, !dbg !106
  %671 = bitcast i32 %667 to float, !dbg !106
  %672 = bitcast i32 %668 to float, !dbg !106
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %663, i1 %120) #2, !dbg !106
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !106
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !106
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !106
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !106
  %678 = bitcast i32 %674 to float, !dbg !106
  %679 = bitcast i32 %675 to float, !dbg !106
  %680 = bitcast i32 %676 to float, !dbg !106
  %681 = bitcast i32 %677 to float, !dbg !106
  %682 = getelementptr float, ptr addrspace(1) %8, i64 %203, !dbg !107
  %683 = getelementptr float, ptr addrspace(1) %8, i64 %205, !dbg !107
  %684 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %682, i1 %119) #2, !dbg !108
  %685 = extractvalue { i32, i32, i32, i32 } %684, 0, !dbg !108
  %686 = extractvalue { i32, i32, i32, i32 } %684, 1, !dbg !108
  %687 = extractvalue { i32, i32, i32, i32 } %684, 2, !dbg !108
  %688 = extractvalue { i32, i32, i32, i32 } %684, 3, !dbg !108
  %689 = bitcast i32 %685 to float, !dbg !108
  %690 = bitcast i32 %686 to float, !dbg !108
  %691 = bitcast i32 %687 to float, !dbg !108
  %692 = bitcast i32 %688 to float, !dbg !108
  %693 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %683, i1 %120) #2, !dbg !108
  %694 = extractvalue { i32, i32, i32, i32 } %693, 0, !dbg !108
  %695 = extractvalue { i32, i32, i32, i32 } %693, 1, !dbg !108
  %696 = extractvalue { i32, i32, i32, i32 } %693, 2, !dbg !108
  %697 = extractvalue { i32, i32, i32, i32 } %693, 3, !dbg !108
  %698 = bitcast i32 %694 to float, !dbg !108
  %699 = bitcast i32 %695 to float, !dbg !108
  %700 = bitcast i32 %696 to float, !dbg !108
  %701 = bitcast i32 %697 to float, !dbg !108
  %702 = fsub float 0.000000e+00, %689, !dbg !109
  %703 = fsub float 0.000000e+00, %690, !dbg !109
  %704 = fsub float 0.000000e+00, %691, !dbg !109
  %705 = fsub float 0.000000e+00, %692, !dbg !109
  %706 = fsub float 0.000000e+00, %698, !dbg !109
  %707 = fsub float 0.000000e+00, %699, !dbg !109
  %708 = fsub float 0.000000e+00, %700, !dbg !109
  %709 = fsub float 0.000000e+00, %701, !dbg !109
  %710 = fmul float %702, 0x3FF7154760000000, !dbg !111
  %711 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %710) #2, !dbg !111
  %712 = fmul float %703, 0x3FF7154760000000, !dbg !111
  %713 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %712) #2, !dbg !111
  %714 = fmul float %704, 0x3FF7154760000000, !dbg !111
  %715 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %714) #2, !dbg !111
  %716 = fmul float %705, 0x3FF7154760000000, !dbg !111
  %717 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %716) #2, !dbg !111
  %718 = fmul float %706, 0x3FF7154760000000, !dbg !111
  %719 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %718) #2, !dbg !111
  %720 = fmul float %707, 0x3FF7154760000000, !dbg !111
  %721 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %720) #2, !dbg !111
  %722 = fmul float %708, 0x3FF7154760000000, !dbg !111
  %723 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %722) #2, !dbg !111
  %724 = fmul float %709, 0x3FF7154760000000, !dbg !111
  %725 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %724) #2, !dbg !111
  %726 = fadd float %711, 1.000000e+00, !dbg !112
  %727 = fadd float %713, 1.000000e+00, !dbg !112
  %728 = fadd float %715, 1.000000e+00, !dbg !112
  %729 = fadd float %717, 1.000000e+00, !dbg !112
  %730 = fadd float %719, 1.000000e+00, !dbg !112
  %731 = fadd float %721, 1.000000e+00, !dbg !112
  %732 = fadd float %723, 1.000000e+00, !dbg !112
  %733 = fadd float %725, 1.000000e+00, !dbg !112
  %734 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %726) #2, !dbg !113
  %735 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %727) #2, !dbg !113
  %736 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %728) #2, !dbg !113
  %737 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %729) #2, !dbg !113
  %738 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %730) #2, !dbg !113
  %739 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %731) #2, !dbg !113
  %740 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %732) #2, !dbg !113
  %741 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %733) #2, !dbg !113
  %742 = fmul float %734, %669, !dbg !114
  %743 = fmul float %735, %670, !dbg !114
  %744 = fmul float %736, %671, !dbg !114
  %745 = fmul float %737, %672, !dbg !114
  %746 = fmul float %738, %678, !dbg !114
  %747 = fmul float %739, %679, !dbg !114
  %748 = fmul float %740, %680, !dbg !114
  %749 = fmul float %741, %681, !dbg !114
  %750 = fsub float %742, %654, !dbg !115
  %751 = fsub float %743, %655, !dbg !115
  %752 = fsub float %744, %656, !dbg !115
  %753 = fsub float %745, %657, !dbg !115
  %754 = fsub float %746, %658, !dbg !115
  %755 = fsub float %747, %659, !dbg !115
  %756 = fsub float %748, %660, !dbg !115
  %757 = fsub float %749, %661, !dbg !115
  %758 = fmul float %750, %82, !dbg !116
  %759 = fmul float %751, %82, !dbg !116
  %760 = fmul float %752, %82, !dbg !116
  %761 = fmul float %753, %82, !dbg !116
  %762 = fmul float %754, %87, !dbg !116
  %763 = fmul float %755, %87, !dbg !116
  %764 = fmul float %756, %87, !dbg !116
  %765 = fmul float %757, %87, !dbg !116
  %766 = fadd float %654, %758, !dbg !117
  %767 = fadd float %655, %759, !dbg !117
  %768 = fadd float %656, %760, !dbg !117
  %769 = fadd float %657, %761, !dbg !117
  %770 = fadd float %658, %762, !dbg !117
  %771 = fadd float %659, %763, !dbg !117
  %772 = fadd float %660, %764, !dbg !117
  %773 = fadd float %661, %765, !dbg !117
  %774 = fsub float %766, %566, !dbg !118
  %775 = fsub float %767, %567, !dbg !118
  %776 = fsub float %768, %568, !dbg !118
  %777 = fsub float %769, %569, !dbg !118
  %778 = fsub float %770, %570, !dbg !118
  %779 = fsub float %771, %571, !dbg !118
  %780 = fsub float %772, %572, !dbg !118
  %781 = fsub float %773, %573, !dbg !118
  %782 = shl i32 %31, 8, !dbg !119
  %783 = shl i32 %33, 7, !dbg !119
  %784 = shl i32 %40, 15, !dbg !120
  %785 = add i32 %784, %.decomposed4, !dbg !121
  %786 = add i32 %785, %782, !dbg !122
  %787 = add i32 %785, %783, !dbg !122
  %788 = sext i32 %786 to i64, !dbg !123
  %789 = getelementptr float, ptr addrspace(1) %9, i64 %788, !dbg !123
  %790 = sext i32 %787 to i64, !dbg !123
  %791 = getelementptr float, ptr addrspace(1) %9, i64 %790, !dbg !123
  %792 = bitcast float %366 to i32, !dbg !124
  %793 = bitcast float %367 to i32, !dbg !124
  %794 = bitcast float %368 to i32, !dbg !124
  %795 = bitcast float %369 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %792, i32 %793, i32 %794, i32 %795, ptr addrspace(1) %789, i1 %119) #2, !dbg !124
  %796 = bitcast float %370 to i32, !dbg !124
  %797 = bitcast float %371 to i32, !dbg !124
  %798 = bitcast float %372 to i32, !dbg !124
  %799 = bitcast float %373 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %796, i32 %797, i32 %798, i32 %799, ptr addrspace(1) %791, i1 %120) #2, !dbg !124
  %800 = shl i32 %22, 8, !dbg !125
  %801 = shl i32 %23, 8, !dbg !125
  %802 = shl i32 %24, 8, !dbg !125
  %803 = shl i32 %25, 8, !dbg !125
  %804 = add i32 %800, %32, !dbg !126
  %805 = add i32 %32, %801, !dbg !126
  %806 = add i32 %32, %802, !dbg !126
  %807 = add i32 %32, %803, !dbg !126
  %808 = sext i32 %804 to i64, !dbg !127
  %809 = getelementptr float, ptr addrspace(1) %10, i64 %808, !dbg !127
  %810 = sext i32 %805 to i64, !dbg !127
  %811 = getelementptr float, ptr addrspace(1) %10, i64 %810, !dbg !127
  %812 = sext i32 %806 to i64, !dbg !127
  %813 = getelementptr float, ptr addrspace(1) %10, i64 %812, !dbg !127
  %814 = sext i32 %807 to i64, !dbg !127
  %815 = getelementptr float, ptr addrspace(1) %10, i64 %814, !dbg !127
  %816 = shl i32 %17, 3, !dbg !128
  %817 = and i32 %816, 1016, !dbg !128
  %818 = shl i32 %17, 1, !dbg !128
  %819 = and i32 %818, 254, !dbg !128
  %820 = lshr exact i32 %817, 1, !dbg !128
  %821 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %820, !dbg !128
  %822 = getelementptr inbounds float, ptr addrspace(3) %821, i32 %817, !dbg !128
  %823 = bitcast float %566 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %823, i1 true) #2, !dbg !128
  %824 = or disjoint i32 %817, 2, !dbg !128
  %825 = lshr exact i32 %824, 1, !dbg !128
  %826 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %825, !dbg !128
  %827 = getelementptr inbounds float, ptr addrspace(3) %826, i32 %824, !dbg !128
  %828 = bitcast float %567 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %827, <1 x i32> %828, i1 true) #2, !dbg !128
  %829 = or disjoint i32 %817, 4, !dbg !128
  %830 = lshr exact i32 %829, 1, !dbg !128
  %831 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %830, !dbg !128
  %832 = getelementptr inbounds float, ptr addrspace(3) %831, i32 %829, !dbg !128
  %833 = bitcast float %568 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %833, i1 true) #2, !dbg !128
  %834 = or disjoint i32 %817, 6, !dbg !128
  %835 = lshr exact i32 %834, 1, !dbg !128
  %836 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %835, !dbg !128
  %837 = getelementptr inbounds float, ptr addrspace(3) %836, i32 %834, !dbg !128
  %838 = bitcast float %569 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %838, i1 true) #2, !dbg !128
  %839 = or disjoint i32 %817, 1, !dbg !128
  %840 = getelementptr inbounds float, ptr addrspace(3) %821, i32 %839, !dbg !128
  %841 = bitcast float %570 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %841, i1 true) #2, !dbg !128
  %842 = or disjoint i32 %817, 3, !dbg !128
  %843 = lshr i32 %842, 1, !dbg !128
  %844 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %843, !dbg !128
  %845 = getelementptr inbounds float, ptr addrspace(3) %844, i32 %842, !dbg !128
  %846 = bitcast float %571 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %846, i1 true) #2, !dbg !128
  %847 = or disjoint i32 %817, 5, !dbg !128
  %848 = lshr i32 %847, 1, !dbg !128
  %849 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %848, !dbg !128
  %850 = getelementptr inbounds float, ptr addrspace(3) %849, i32 %847, !dbg !128
  %851 = bitcast float %572 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %851, i1 true) #2, !dbg !128
  %852 = or disjoint i32 %817, 7, !dbg !128
  %853 = lshr i32 %852, 1, !dbg !128
  %854 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %853, !dbg !128
  %855 = getelementptr inbounds float, ptr addrspace(3) %854, i32 %852, !dbg !128
  %856 = bitcast float %573 to <1 x i32>, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %855, <1 x i32> %856, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %857 = lshr exact i32 %819, 1, !dbg !128
  %858 = getelementptr float, ptr addrspace(3) @global_smem, i32 %857, !dbg !128
  %859 = getelementptr float, ptr addrspace(3) %858, i32 %819, !dbg !128
  %860 = load i32, ptr addrspace(3) %859, align 4, !dbg !128
  %861 = or disjoint i32 %819, 1, !dbg !128
  %862 = getelementptr float, ptr addrspace(3) %858, i32 %861, !dbg !128
  %863 = load i32, ptr addrspace(3) %862, align 4, !dbg !128
  %864 = or disjoint i32 %819, 256, !dbg !128
  %865 = lshr exact i32 %864, 1, !dbg !128
  %866 = getelementptr float, ptr addrspace(3) @global_smem, i32 %865, !dbg !128
  %867 = getelementptr float, ptr addrspace(3) %866, i32 %864, !dbg !128
  %868 = load i32, ptr addrspace(3) %867, align 4, !dbg !128
  %869 = or disjoint i32 %819, 257, !dbg !128
  %870 = lshr i32 %869, 1, !dbg !128
  %871 = getelementptr float, ptr addrspace(3) @global_smem, i32 %870, !dbg !128
  %872 = getelementptr float, ptr addrspace(3) %871, i32 %869, !dbg !128
  %873 = load i32, ptr addrspace(3) %872, align 4, !dbg !128
  %874 = or disjoint i32 %819, 512, !dbg !128
  %875 = lshr exact i32 %874, 1, !dbg !128
  %876 = getelementptr float, ptr addrspace(3) @global_smem, i32 %875, !dbg !128
  %877 = getelementptr float, ptr addrspace(3) %876, i32 %874, !dbg !128
  %878 = load i32, ptr addrspace(3) %877, align 4, !dbg !128
  %879 = or disjoint i32 %819, 513, !dbg !128
  %880 = lshr i32 %879, 1, !dbg !128
  %881 = getelementptr float, ptr addrspace(3) @global_smem, i32 %880, !dbg !128
  %882 = getelementptr float, ptr addrspace(3) %881, i32 %879, !dbg !128
  %883 = load i32, ptr addrspace(3) %882, align 4, !dbg !128
  %884 = or disjoint i32 %819, 768, !dbg !128
  %885 = lshr exact i32 %884, 1, !dbg !128
  %886 = getelementptr float, ptr addrspace(3) @global_smem, i32 %885, !dbg !128
  %887 = getelementptr float, ptr addrspace(3) %886, i32 %884, !dbg !128
  %888 = load i32, ptr addrspace(3) %887, align 4, !dbg !128
  %889 = or disjoint i32 %819, 769, !dbg !128
  %890 = lshr i32 %889, 1, !dbg !128
  %891 = getelementptr float, ptr addrspace(3) @global_smem, i32 %890, !dbg !128
  %892 = getelementptr float, ptr addrspace(3) %891, i32 %889, !dbg !128
  %893 = load i32, ptr addrspace(3) %892, align 4, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %860, i32 %863, ptr addrspace(1) %809, i1 %121) #2, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %868, i32 %873, ptr addrspace(1) %811, i1 %122) #2, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %878, i32 %883, ptr addrspace(1) %813, i1 %123) #2, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %888, i32 %893, ptr addrspace(1) %815, i1 %124) #2, !dbg !128
  %894 = getelementptr float, ptr addrspace(1) %11, i64 %808, !dbg !129
  %895 = getelementptr float, ptr addrspace(1) %11, i64 %810, !dbg !129
  %896 = getelementptr float, ptr addrspace(1) %11, i64 %812, !dbg !129
  %897 = getelementptr float, ptr addrspace(1) %11, i64 %814, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %898 = bitcast float %774 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %898, i1 true) #2, !dbg !130
  %899 = bitcast float %775 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %827, <1 x i32> %899, i1 true) #2, !dbg !130
  %900 = bitcast float %776 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %900, i1 true) #2, !dbg !130
  %901 = bitcast float %777 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %901, i1 true) #2, !dbg !130
  %902 = bitcast float %778 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %902, i1 true) #2, !dbg !130
  %903 = bitcast float %779 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %903, i1 true) #2, !dbg !130
  %904 = bitcast float %780 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %904, i1 true) #2, !dbg !130
  %905 = bitcast float %781 to <1 x i32>, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %855, <1 x i32> %905, i1 true) #2, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %906 = load i32, ptr addrspace(3) %859, align 4, !dbg !130
  %907 = load i32, ptr addrspace(3) %862, align 4, !dbg !130
  %908 = load i32, ptr addrspace(3) %867, align 4, !dbg !130
  %909 = load i32, ptr addrspace(3) %872, align 4, !dbg !130
  %910 = load i32, ptr addrspace(3) %877, align 4, !dbg !130
  %911 = load i32, ptr addrspace(3) %882, align 4, !dbg !130
  %912 = load i32, ptr addrspace(3) %887, align 4, !dbg !130
  %913 = load i32, ptr addrspace(3) %892, align 4, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %906, i32 %907, ptr addrspace(1) %894, i1 %121) #2, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %908, i32 %909, ptr addrspace(1) %895, i1 %122) #2, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %910, i32 %911, ptr addrspace(1) %896, i1 %123) #2, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %912, i32 %913, ptr addrspace(1) %897, i1 %124) #2, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py", directory: "inductor_cache/47")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 46, column: 32, scope: !7)
!36 = !DILocation(line: 47, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 62, scope: !7)
!38 = !DILocation(line: 47, column: 75, scope: !7)
!39 = !DILocation(line: 47, column: 57, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 43, column: 32, scope: !7)
!42 = !DILocation(line: 47, column: 50, scope: !7)
!43 = !DILocation(line: 47, column: 46, scope: !7)
!44 = !DILocation(line: 51, column: 59, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !7)
!46 = !DILocation(line: 47, column: 67, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 69, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 58, column: 51, scope: !7)
!51 = !DILocation(line: 58, column: 47, scope: !7)
!52 = !DILocation(line: 58, column: 59, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 69, scope: !7)
!55 = !DILocation(line: 59, column: 48, scope: !7)
!56 = !DILocation(line: 59, column: 60, scope: !7)
!57 = !DILocation(line: 59, column: 31, scope: !7)
!58 = !DILocation(line: 59, column: 70, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 66, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 67, column: 31, scope: !7)
!73 = !DILocation(line: 67, column: 68, scope: !7)
!74 = !DILocation(line: 68, column: 31, scope: !7)
!75 = !DILocation(line: 68, column: 68, scope: !7)
!76 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !77)
!77 = !DILocation(line: 69, column: 23, scope: !7)
!78 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !77)
!79 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !77)
!80 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !77)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 31, scope: !7)
!83 = !DILocation(line: 71, column: 69, scope: !7)
!84 = !DILocation(line: 72, column: 31, scope: !7)
!85 = !DILocation(line: 72, column: 69, scope: !7)
!86 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !87)
!87 = !DILocation(line: 73, column: 23, scope: !7)
!88 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !87)
!89 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !87)
!90 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !87)
!91 = !DILocation(line: 74, column: 20, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 76, column: 20, scope: !7)
!94 = !DILocation(line: 77, column: 20, scope: !7)
!95 = !DILocation(line: 78, column: 31, scope: !7)
!96 = !DILocation(line: 78, column: 69, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 69, scope: !7)
!99 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 23, scope: !7)
!101 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !100)
!102 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !100)
!103 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !100)
!104 = !DILocation(line: 81, column: 20, scope: !7)
!105 = !DILocation(line: 82, column: 31, scope: !7)
!106 = !DILocation(line: 82, column: 70, scope: !7)
!107 = !DILocation(line: 83, column: 31, scope: !7)
!108 = !DILocation(line: 83, column: 70, scope: !7)
!109 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !110)
!110 = !DILocation(line: 84, column: 23, scope: !7)
!111 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !110)
!112 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !110)
!113 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !110)
!114 = !DILocation(line: 85, column: 20, scope: !7)
!115 = !DILocation(line: 86, column: 20, scope: !7)
!116 = !DILocation(line: 87, column: 20, scope: !7)
!117 = !DILocation(line: 88, column: 20, scope: !7)
!118 = !DILocation(line: 89, column: 20, scope: !7)
!119 = !DILocation(line: 90, column: 34, scope: !7)
!120 = !DILocation(line: 90, column: 45, scope: !7)
!121 = !DILocation(line: 90, column: 30, scope: !7)
!122 = !DILocation(line: 90, column: 39, scope: !7)
!123 = !DILocation(line: 90, column: 25, scope: !7)
!124 = !DILocation(line: 90, column: 57, scope: !7)
!125 = !DILocation(line: 91, column: 34, scope: !7)
!126 = !DILocation(line: 91, column: 30, scope: !7)
!127 = !DILocation(line: 91, column: 25, scope: !7)
!128 = !DILocation(line: 91, column: 46, scope: !7)
!129 = !DILocation(line: 92, column: 25, scope: !7)
!130 = !DILocation(line: 92, column: 46, scope: !7)
!131 = !DILocation(line: 92, column: 4, scope: !7)
