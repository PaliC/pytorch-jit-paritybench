; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = lshr i32 %10, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %19 = or disjoint i32 %18, %14, !dbg !16
  %20 = or disjoint i32 %18, %12, !dbg !16
  %21 = icmp slt i32 %19, 16, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %23 = sdiv i32 %.frozen, 512, !dbg !18
  %24 = mul i32 %23, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = shl i32 %19, 9, !dbg !20
  %26 = add i32 %25, %.decomposed, !dbg !21
  %27 = shl i32 %23, 13, !dbg !22
  %28 = add i32 %26, %27, !dbg !23
  %29 = sext i32 %28 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %21) #2, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !28
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #2, !dbg !29
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !29
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !29
  %47 = bitcast i32 %45 to float, !dbg !29
  %48 = bitcast i32 %46 to float, !dbg !29
  %49 = fadd float %34, %41, !dbg !30
  %50 = fadd float %35, %42, !dbg !30
  %51 = fcmp olt float %49, 0.000000e+00, !dbg !31
  %52 = fcmp olt float %50, 0.000000e+00, !dbg !31
  %53 = select i1 %51, float 0.000000e+00, float %49, !dbg !35
  %54 = select i1 %52, float 0.000000e+00, float %50, !dbg !35
  %55 = fadd float %41, %47, !dbg !36
  %56 = fadd float %42, %48, !dbg !36
  %57 = fcmp olt float %55, 0.000000e+00, !dbg !37
  %58 = fcmp olt float %56, 0.000000e+00, !dbg !37
  %59 = select i1 %57, float 0.000000e+00, float %55, !dbg !39
  %60 = select i1 %58, float 0.000000e+00, float %56, !dbg !39
  %61 = shl i32 %16, 4, !dbg !40
  %62 = add i32 %20, %61, !dbg !41
  %63 = sext i32 %62 to i64, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !42
  %65 = shl i32 %10, 5, !dbg !43
  %66 = and i32 %65, 224, !dbg !43
  %67 = or disjoint i32 %66, %14, !dbg !43
  %68 = and i32 %11, 254, !dbg !43
  %69 = lshr exact i32 %66, 2, !dbg !43
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !43
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %67, !dbg !43
  %72 = bitcast float %53 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !43
  %73 = or disjoint i32 %67, 16, !dbg !43
  %74 = lshr i32 %73, 4, !dbg !43
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !43
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !43
  %77 = bitcast float %54 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %78 = lshr i32 %68, 4, !dbg !43
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !43
  %80 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %68, !dbg !43
  %81 = load i32, ptr addrspace(3) %80, align 4, !dbg !43
  %82 = or disjoint i32 %68, 1, !dbg !43
  %83 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %82, !dbg !43
  %84 = load i32, ptr addrspace(3) %83, align 4, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %81, i32 %84, ptr addrspace(1) %64, i1 %22) #2, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %86 = bitcast float %59 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %86, i1 true) #2, !dbg !45
  %87 = bitcast float %60 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %87, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %88 = load i32, ptr addrspace(3) %80, align 4, !dbg !45
  %89 = load i32, ptr addrspace(3) %83, align 4, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %85, i1 %22) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxclhtnkdrz3qlighzdc5m25sekv34sq3ovdcd2vhulaoniupw6b.py", directory: "inductor_cache/xc")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_34", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 37, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !38)
!38 = !DILocation(line: 39, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !38)
!40 = !DILocation(line: 40, column: 33, scope: !7)
!41 = !DILocation(line: 40, column: 30, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 44, scope: !7)
!44 = !DILocation(line: 41, column: 25, scope: !7)
!45 = !DILocation(line: 41, column: 44, scope: !7)
!46 = !DILocation(line: 41, column: 4, scope: !7)
