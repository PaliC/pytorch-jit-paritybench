; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hz/chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp7 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_permute_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = lshr i32 %10, 2, !dbg !14
  %12 = and i32 %10, 255, !dbg !14
  %13 = or disjoint i32 %9, %12, !dbg !15
  %14 = icmp slt i32 %13, 256, !dbg !16
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %16 = shl i32 %15, 4, !dbg !18
  %17 = shl i32 %10, 2, !dbg !19
  %18 = and i32 %17, 12, !dbg !19
  %19 = or disjoint i32 %16, %18, !dbg !20
  %20 = or disjoint i32 %19, 2, !dbg !20
  %21 = icmp slt i32 %19, 256, !dbg !21
  %22 = srem i32 %13, 64, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %.idx = shl nuw nsw i32 %12, 3, !dbg !24
  %25 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !24
  %26 = and i32 %11, 63, !dbg !14
  %27 = or disjoint i32 %26, 64, !dbg !14
  %28 = or disjoint i32 %26, 128, !dbg !14
  %29 = or disjoint i32 %26, 192, !dbg !14
  %30 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !15
  %31 = shufflevector <4 x i32> %30, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %32 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !15
  %33 = insertelement <4 x i32> %32, i32 %27, i64 1, !dbg !15
  %34 = insertelement <4 x i32> %33, i32 %28, i64 2, !dbg !15
  %35 = insertelement <4 x i32> %34, i32 %29, i64 3, !dbg !15
  %36 = or disjoint <4 x i32> %31, %35, !dbg !15
  %37 = icmp slt <4 x i32> %36, splat (i32 256), !dbg !16
  %38 = extractelement <4 x i32> %36, i64 0, !dbg !25
  %.frozen31 = freeze i32 %38, !dbg !26
  %39 = sdiv i32 %.frozen31, 64, !dbg !26
  %40 = extractelement <4 x i32> %36, i64 1, !dbg !25
  %.frozen29 = freeze i32 %40, !dbg !26
  %41 = sdiv i32 %.frozen29, 64, !dbg !26
  %42 = extractelement <4 x i32> %36, i64 2, !dbg !25
  %.frozen27 = freeze i32 %42, !dbg !26
  %43 = sdiv i32 %.frozen27, 64, !dbg !26
  %44 = extractelement <4 x i32> %36, i64 3, !dbg !25
  %.frozen = freeze i32 %44, !dbg !26
  %45 = sdiv i32 %.frozen, 64, !dbg !26
  %46 = shl i32 %38, 8, !dbg !25
  %47 = shl i32 %40, 8, !dbg !25
  %48 = shl i32 %42, 8, !dbg !25
  %49 = shl i32 %44, 8, !dbg !25
  %50 = add i32 %19, %46, !dbg !27
  %51 = add i32 %19, %47, !dbg !27
  %52 = add i32 %19, %48, !dbg !27
  %53 = add i32 %19, %49, !dbg !27
  %54 = sext i32 %50 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = sext i32 %51 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !28
  %58 = sext i32 %52 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !28
  %60 = sext i32 %53 to i64, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !28
  %62 = insertelement <4 x i1> poison, i1 %21, i64 0, !dbg !29
  %63 = shufflevector <4 x i1> %62, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !29
  %64 = and <4 x i1> %37, %63, !dbg !29
  %65 = extractelement <4 x i1> %64, i64 0, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %65) #3, !dbg !31
  %67 = extractelement <4 x i1> %64, i64 1, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %67) #3, !dbg !31
  %69 = extractelement <4 x i1> %64, i64 2, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %69) #3, !dbg !31
  %71 = extractelement <4 x i1> %64, i64 3, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %71) #3, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !32
  %74 = shl i32 %39, 8, !dbg !33
  %75 = shl i32 %41, 8, !dbg !33
  %76 = shl i32 %43, 8, !dbg !33
  %77 = shl i32 %45, 8, !dbg !33
  %78 = add i32 %74, %19, !dbg !34
  %79 = add i32 %74, %20, !dbg !34
  %80 = add i32 %75, %19, !dbg !34
  %81 = add i32 %75, %20, !dbg !34
  %82 = add i32 %76, %19, !dbg !34
  %83 = add i32 %76, %20, !dbg !34
  %84 = add i32 %77, %19, !dbg !34
  %85 = add i32 %77, %20, !dbg !34
  %86 = sext i32 %78 to i64, !dbg !35
  %87 = getelementptr i64, ptr addrspace(1) %2, i64 %86, !dbg !35
  %88 = sext i32 %79 to i64, !dbg !35
  %89 = getelementptr i64, ptr addrspace(1) %2, i64 %88, !dbg !35
  %90 = sext i32 %80 to i64, !dbg !35
  %91 = getelementptr i64, ptr addrspace(1) %2, i64 %90, !dbg !35
  %92 = sext i32 %81 to i64, !dbg !35
  %93 = getelementptr i64, ptr addrspace(1) %2, i64 %92, !dbg !35
  %94 = sext i32 %82 to i64, !dbg !35
  %95 = getelementptr i64, ptr addrspace(1) %2, i64 %94, !dbg !35
  %96 = sext i32 %83 to i64, !dbg !35
  %97 = getelementptr i64, ptr addrspace(1) %2, i64 %96, !dbg !35
  %98 = sext i32 %84 to i64, !dbg !35
  %99 = getelementptr i64, ptr addrspace(1) %2, i64 %98, !dbg !35
  %100 = sext i32 %85 to i64, !dbg !35
  %101 = getelementptr i64, ptr addrspace(1) %2, i64 %100, !dbg !35
  %102 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %87, i1 %65) #3, !dbg !30
  %103 = extractvalue { i64, i64 } %102, 0, !dbg !30
  %104 = extractvalue { i64, i64 } %102, 1, !dbg !30
  %105 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %89, i1 %65) #3, !dbg !30
  %106 = extractvalue { i64, i64 } %105, 0, !dbg !30
  %107 = extractvalue { i64, i64 } %105, 1, !dbg !30
  %108 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %91, i1 %67) #3, !dbg !30
  %109 = extractvalue { i64, i64 } %108, 0, !dbg !30
  %110 = extractvalue { i64, i64 } %108, 1, !dbg !30
  %111 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %93, i1 %67) #3, !dbg !30
  %112 = extractvalue { i64, i64 } %111, 0, !dbg !30
  %113 = extractvalue { i64, i64 } %111, 1, !dbg !30
  %114 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %95, i1 %69) #3, !dbg !30
  %115 = extractvalue { i64, i64 } %114, 0, !dbg !30
  %116 = extractvalue { i64, i64 } %114, 1, !dbg !30
  %117 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %97, i1 %69) #3, !dbg !30
  %118 = extractvalue { i64, i64 } %117, 0, !dbg !30
  %119 = extractvalue { i64, i64 } %117, 1, !dbg !30
  %120 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %99, i1 %71) #3, !dbg !30
  %121 = extractvalue { i64, i64 } %120, 0, !dbg !30
  %122 = extractvalue { i64, i64 } %120, 1, !dbg !30
  %123 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %101, i1 %71) #3, !dbg !30
  %124 = extractvalue { i64, i64 } %123, 0, !dbg !30
  %125 = extractvalue { i64, i64 } %123, 1, !dbg !30
  %126 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %126, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %127 = insertelement <4 x i64> poison, i64 %103, i64 0, !dbg !36
  %128 = insertelement <4 x i64> %127, i64 %109, i64 1, !dbg !36
  %129 = insertelement <4 x i64> %128, i64 %115, i64 2, !dbg !36
  %130 = insertelement <4 x i64> %129, i64 %121, i64 3, !dbg !36
  %131 = lshr <4 x i64> %130, splat (i64 53), !dbg !36
  %132 = and <4 x i64> %131, splat (i64 1024), !dbg !36
  %133 = add <4 x i64> %132, %130, !dbg !36
  %134 = insertelement <4 x i64> poison, i64 %104, i64 0, !dbg !36
  %135 = insertelement <4 x i64> %134, i64 %110, i64 1, !dbg !36
  %136 = insertelement <4 x i64> %135, i64 %116, i64 2, !dbg !36
  %137 = insertelement <4 x i64> %136, i64 %122, i64 3, !dbg !36
  %138 = lshr <4 x i64> %137, splat (i64 53), !dbg !36
  %139 = and <4 x i64> %138, splat (i64 1024), !dbg !36
  %140 = add <4 x i64> %139, %137, !dbg !36
  %141 = insertelement <4 x i64> poison, i64 %106, i64 0, !dbg !36
  %142 = insertelement <4 x i64> %141, i64 %112, i64 1, !dbg !36
  %143 = insertelement <4 x i64> %142, i64 %118, i64 2, !dbg !36
  %144 = insertelement <4 x i64> %143, i64 %124, i64 3, !dbg !36
  %145 = lshr <4 x i64> %144, splat (i64 53), !dbg !36
  %146 = and <4 x i64> %145, splat (i64 1024), !dbg !36
  %147 = add <4 x i64> %146, %144, !dbg !36
  %148 = insertelement <4 x i64> poison, i64 %107, i64 0, !dbg !36
  %149 = insertelement <4 x i64> %148, i64 %113, i64 1, !dbg !36
  %150 = insertelement <4 x i64> %149, i64 %119, i64 2, !dbg !36
  %151 = insertelement <4 x i64> %150, i64 %125, i64 3, !dbg !36
  %152 = lshr <4 x i64> %151, splat (i64 53), !dbg !36
  %153 = and <4 x i64> %152, splat (i64 1024), !dbg !36
  %154 = add <4 x i64> %153, %151, !dbg !36
  %155 = or <4 x i64> %133, %140, !dbg !37
  %156 = or <4 x i64> %155, %147, !dbg !37
  %157 = or <4 x i64> %156, %154, !dbg !37
  %158 = icmp ugt <4 x i64> %157, splat (i64 1023), !dbg !37
  %159 = and <4 x i1> %64, %158, !dbg !37
  %160 = bitcast <4 x i1> %159 to i4, !dbg !37
  %.not = icmp eq i4 %160, 0, !dbg !37
  br i1 %.not, label %162, label %161, !dbg !37

161:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !37
  unreachable, !dbg !37

162:                                              ; preds = %7
  %163 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %164 = bitcast i32 %163 to float, !dbg !31
  %.idx6 = shl nuw nsw i32 %29, 3, !dbg !24
  %165 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !24
  %166 = load float, ptr addrspace(3) %165, align 8, !dbg !24
  %167 = fadd float %166, %164, !dbg !24
  %168 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fadd float %166, %169, !dbg !24
  %171 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = fadd float %166, %172, !dbg !24
  %174 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %175 = bitcast i32 %174 to float, !dbg !31
  %176 = fadd float %166, %175, !dbg !24
  %177 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %.idx5 = shl nuw nsw i32 %28, 3, !dbg !24
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !24
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !24
  %181 = fadd float %180, %178, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = fadd float %180, %183, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = fadd float %180, %186, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = fadd float %180, %189, !dbg !24
  %191 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %192 = bitcast i32 %191 to float, !dbg !31
  %.idx4 = shl nuw nsw i32 %27, 3, !dbg !24
  %193 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !24
  %194 = load float, ptr addrspace(3) %193, align 8, !dbg !24
  %195 = fadd float %194, %192, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %197 = bitcast i32 %196 to float, !dbg !31
  %198 = fadd float %194, %197, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = fadd float %194, %200, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %203 = bitcast i32 %202 to float, !dbg !31
  %204 = fadd float %194, %203, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %206 = bitcast i32 %205 to float, !dbg !31
  %.idx3 = shl nuw nsw i32 %26, 3, !dbg !24
  %207 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !24
  %208 = load float, ptr addrspace(3) %207, align 8, !dbg !24
  %209 = fadd float %208, %206, !dbg !24
  %210 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %211 = bitcast i32 %210 to float, !dbg !31
  %212 = fadd float %208, %211, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %214 = bitcast i32 %213 to float, !dbg !31
  %215 = fadd float %208, %214, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %217 = bitcast i32 %216 to float, !dbg !31
  %218 = fadd float %208, %217, !dbg !24
  %219 = mul i32 %45, 64, !dbg !22
  %.decomposed = sub i32 %.frozen, %219, !dbg !22
  %220 = mul i32 %43, 64, !dbg !22
  %.decomposed28 = sub i32 %.frozen27, %220, !dbg !22
  %221 = mul i32 %41, 64, !dbg !22
  %.decomposed30 = sub i32 %.frozen29, %221, !dbg !22
  %222 = mul i32 %39, 64, !dbg !22
  %.decomposed32 = sub i32 %.frozen31, %222, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %223 = shl nsw i32 %.decomposed32, 10, !dbg !38
  %224 = shl nsw i32 %.decomposed30, 10, !dbg !38
  %225 = shl nsw i32 %.decomposed28, 10, !dbg !38
  %226 = shl nsw i32 %.decomposed, 10, !dbg !38
  %227 = sext i32 %223 to i64, !dbg !39
  %228 = sext i32 %224 to i64, !dbg !39
  %229 = sext i32 %225 to i64, !dbg !39
  %230 = sext i32 %226 to i64, !dbg !39
  %231 = extractelement <4 x i64> %133, i64 0, !dbg !40
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %231, !dbg !40
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %227, !dbg !40
  %234 = extractelement <4 x i64> %140, i64 0, !dbg !40
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !40
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %227, !dbg !40
  %237 = extractelement <4 x i64> %147, i64 0, !dbg !40
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %237, !dbg !40
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %227, !dbg !40
  %240 = extractelement <4 x i64> %154, i64 0, !dbg !40
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !40
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %227, !dbg !40
  %243 = extractelement <4 x i64> %133, i64 1, !dbg !40
  %244 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !40
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %228, !dbg !40
  %246 = extractelement <4 x i64> %140, i64 1, !dbg !40
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !40
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %228, !dbg !40
  %249 = extractelement <4 x i64> %147, i64 1, !dbg !40
  %250 = getelementptr float, ptr addrspace(1) %3, i64 %249, !dbg !40
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %228, !dbg !40
  %252 = extractelement <4 x i64> %154, i64 1, !dbg !40
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !40
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %228, !dbg !40
  %255 = extractelement <4 x i64> %133, i64 2, !dbg !40
  %256 = getelementptr float, ptr addrspace(1) %3, i64 %255, !dbg !40
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %229, !dbg !40
  %258 = extractelement <4 x i64> %140, i64 2, !dbg !40
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %258, !dbg !40
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %229, !dbg !40
  %261 = extractelement <4 x i64> %147, i64 2, !dbg !40
  %262 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !40
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %229, !dbg !40
  %264 = extractelement <4 x i64> %154, i64 2, !dbg !40
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !40
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %229, !dbg !40
  %267 = extractelement <4 x i64> %133, i64 3, !dbg !40
  %268 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !40
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %230, !dbg !40
  %270 = extractelement <4 x i64> %140, i64 3, !dbg !40
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !40
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %230, !dbg !40
  %273 = extractelement <4 x i64> %147, i64 3, !dbg !40
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %273, !dbg !40
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %230, !dbg !40
  %276 = extractelement <4 x i64> %154, i64 3, !dbg !40
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !40
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %230, !dbg !40
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %65) #3, !dbg !41
  %280 = bitcast i32 %279 to float, !dbg !41
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %65) #3, !dbg !41
  %282 = bitcast i32 %281 to float, !dbg !41
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %65) #3, !dbg !41
  %284 = bitcast i32 %283 to float, !dbg !41
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %65) #3, !dbg !41
  %286 = bitcast i32 %285 to float, !dbg !41
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %67) #3, !dbg !41
  %288 = bitcast i32 %287 to float, !dbg !41
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %67) #3, !dbg !41
  %290 = bitcast i32 %289 to float, !dbg !41
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %67) #3, !dbg !41
  %292 = bitcast i32 %291 to float, !dbg !41
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %67) #3, !dbg !41
  %294 = bitcast i32 %293 to float, !dbg !41
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %69) #3, !dbg !41
  %296 = bitcast i32 %295 to float, !dbg !41
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %69) #3, !dbg !41
  %298 = bitcast i32 %297 to float, !dbg !41
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %69) #3, !dbg !41
  %300 = bitcast i32 %299 to float, !dbg !41
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 %69) #3, !dbg !41
  %302 = bitcast i32 %301 to float, !dbg !41
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %71) #3, !dbg !41
  %304 = bitcast i32 %303 to float, !dbg !41
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 %71) #3, !dbg !41
  %306 = bitcast i32 %305 to float, !dbg !41
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %71) #3, !dbg !41
  %308 = bitcast i32 %307 to float, !dbg !41
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %71) #3, !dbg !41
  %310 = bitcast i32 %309 to float, !dbg !41
  %311 = fsub float %280, %218, !dbg !42
  %312 = fsub float %282, %215, !dbg !42
  %313 = fsub float %284, %212, !dbg !42
  %314 = fsub float %286, %209, !dbg !42
  %315 = fsub float %288, %204, !dbg !42
  %316 = fsub float %290, %201, !dbg !42
  %317 = fsub float %292, %198, !dbg !42
  %318 = fsub float %294, %195, !dbg !42
  %319 = fsub float %296, %190, !dbg !42
  %320 = fsub float %298, %187, !dbg !42
  %321 = fsub float %300, %184, !dbg !42
  %322 = fsub float %302, %181, !dbg !42
  %323 = fsub float %304, %176, !dbg !42
  %324 = fsub float %306, %173, !dbg !42
  %325 = fsub float %308, %170, !dbg !42
  %326 = fsub float %310, %167, !dbg !42
  %327 = fadd float %218, %311, !dbg !43
  %328 = fadd float %215, %312, !dbg !43
  %329 = fadd float %212, %313, !dbg !43
  %330 = fadd float %209, %314, !dbg !43
  %331 = fadd float %204, %315, !dbg !43
  %332 = fadd float %201, %316, !dbg !43
  %333 = fadd float %198, %317, !dbg !43
  %334 = fadd float %195, %318, !dbg !43
  %335 = fadd float %190, %319, !dbg !43
  %336 = fadd float %187, %320, !dbg !43
  %337 = fadd float %184, %321, !dbg !43
  %338 = fadd float %181, %322, !dbg !43
  %339 = fadd float %176, %323, !dbg !43
  %340 = fadd float %173, %324, !dbg !43
  %341 = fadd float %170, %325, !dbg !43
  %342 = fadd float %167, %326, !dbg !43
  %343 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !44
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !44
  %345 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !44
  %346 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !44
  %347 = bitcast float %327 to i32, !dbg !45
  %348 = bitcast float %328 to i32, !dbg !45
  %349 = bitcast float %329 to i32, !dbg !45
  %350 = bitcast float %330 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %343, i1 %65) #3, !dbg !45
  %351 = bitcast float %331 to i32, !dbg !45
  %352 = bitcast float %332 to i32, !dbg !45
  %353 = bitcast float %333 to i32, !dbg !45
  %354 = bitcast float %334 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %352, i32 %353, i32 %354, ptr addrspace(1) %344, i1 %67) #3, !dbg !45
  %355 = bitcast float %335 to i32, !dbg !45
  %356 = bitcast float %336 to i32, !dbg !45
  %357 = bitcast float %337 to i32, !dbg !45
  %358 = bitcast float %338 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %356, i32 %357, i32 %358, ptr addrspace(1) %345, i1 %69) #3, !dbg !45
  %359 = bitcast float %339 to i32, !dbg !45
  %360 = bitcast float %340 to i32, !dbg !45
  %361 = bitcast float %341 to i32, !dbg !45
  %362 = bitcast float %342 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %359, i32 %360, i32 %361, i32 %362, ptr addrspace(1) %346, i1 %71) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_permute_sub_11", linkageName: "triton_poi_fused_add_embedding_permute_sub_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 44, scope: !11)
!20 = !DILocation(line: 26, column: 23, scope: !11)
!21 = !DILocation(line: 27, column: 21, scope: !11)
!22 = !DILocation(line: 30, column: 19, scope: !11)
!23 = !DILocation(line: 33, column: 30, scope: !11)
!24 = !DILocation(line: 35, column: 18, scope: !11)
!25 = !DILocation(line: 32, column: 39, scope: !11)
!26 = !DILocation(line: 31, column: 19, scope: !11)
!27 = !DILocation(line: 32, column: 35, scope: !11)
!28 = !DILocation(line: 32, column: 30, scope: !11)
!29 = !DILocation(line: 32, column: 52, scope: !11)
!30 = !DILocation(line: 34, column: 44, scope: !11)
!31 = !DILocation(line: 32, column: 44, scope: !11)
!32 = !DILocation(line: 33, column: 35, scope: !11)
!33 = !DILocation(line: 34, column: 39, scope: !11)
!34 = !DILocation(line: 34, column: 35, scope: !11)
!35 = !DILocation(line: 34, column: 30, scope: !11)
!36 = !DILocation(line: 39, column: 32, scope: !11)
!37 = !DILocation(line: 40, column: 71, scope: !11)
!38 = !DILocation(line: 41, column: 42, scope: !11)
!39 = !DILocation(line: 41, column: 37, scope: !11)
!40 = !DILocation(line: 41, column: 30, scope: !11)
!41 = !DILocation(line: 41, column: 47, scope: !11)
!42 = !DILocation(line: 42, column: 19, scope: !11)
!43 = !DILocation(line: 43, column: 19, scope: !11)
!44 = !DILocation(line: 44, column: 25, scope: !11)
!45 = !DILocation(line: 44, column: 46, scope: !11)
!46 = !DILocation(line: 44, column: 4, scope: !11)
