; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 1024, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen, 16, !dbg !15
  %23 = srem i32 %22, 16, !dbg !16
  %24 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = sdiv i32 %20, 256, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %30 = sext i32 %.decomposed to i64, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !22
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !22
  %35 = getelementptr i64, ptr addrspace(1) %4, i64 %30, !dbg !23
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 %21) #3, !dbg !24
  %37 = extractvalue { i64, i64 } %36, 0, !dbg !24
  %38 = extractvalue { i64, i64 } %36, 1, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !26
  %41 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !27
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %21) #3, !dbg !28
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %21) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %47 = sext i32 %20 to i64, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %21) #3, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !36
  %55 = lshr i64 %28, 60, !dbg !37
  %56 = and i64 %55, 8, !dbg !37
  %57 = add i64 %56, %28, !dbg !37
  %58 = lshr i64 %33, 60, !dbg !38
  %59 = and i64 %58, 8, !dbg !38
  %60 = lshr i64 %34, 60, !dbg !38
  %61 = and i64 %60, 8, !dbg !38
  %62 = shl i64 %57, 3, !dbg !39
  %63 = shl nsw i32 %25, 6, !dbg !40
  %64 = sext i32 %63 to i64, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %59, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %62, !dbg !42
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %64, !dbg !42
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %61, !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %62, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %64, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %21) #3, !dbg !43
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #3, !dbg !43
  %75 = lshr i64 %37, 60, !dbg !44
  %76 = and i64 %75, 8, !dbg !44
  %77 = lshr i64 %38, 60, !dbg !44
  %78 = and i64 %77, 8, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !45
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %62, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %64, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !45
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %78, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %62, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %64, !dbg !45
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #3, !dbg !46
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #3, !dbg !46
  %89 = lshr i64 %42, 60, !dbg !47
  %90 = and i64 %89, 8, !dbg !47
  %91 = add i64 %90, %42, !dbg !47
  %92 = shl i64 %91, 3, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %66, i64 %92, !dbg !49
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %64, !dbg !49
  %95 = getelementptr float, ptr addrspace(1) %70, i64 %92, !dbg !49
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %64, !dbg !49
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %21) #3, !dbg !50
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %21) #3, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %80, i64 %92, !dbg !51
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %64, !dbg !51
  %101 = getelementptr float, ptr addrspace(1) %84, i64 %92, !dbg !51
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %64, !dbg !51
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %21) #3, !dbg !52
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #3, !dbg !52
  %105 = fadd float %52, 0x3EE4F8B580000000, !dbg !53
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %106, 0, !dbg !54
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %107, 0, !dbg !54
  br i1 %.not.i, label %113, label %108, !dbg !54

108:                                              ; preds = %14
  br i1 %.not1.i, label %111, label %109, !dbg !54

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

113:                                              ; preds = %14
  br i1 %.not1.i, label %116, label %114, !dbg !54

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !54
  %118 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %119 = bitcast i32 %118 to float, !dbg !32
  %120 = bitcast i32 %50 to float, !dbg !33
  %121 = fsub float %119, %120, !dbg !55
  %122 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %123 = bitcast i32 %122 to float, !dbg !32
  %124 = fsub float %123, %120, !dbg !55
  %125 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !52
  %126 = insertelement <2 x i32> %125, i32 %88, i64 1, !dbg !52
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !52
  %128 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !50
  %129 = insertelement <2 x i32> %128, i32 %74, i64 1, !dbg !50
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !50
  %131 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %132 = fsub <2 x float> %127, %130, !dbg !56
  %133 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !57
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !57
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %136 = fmul <2 x float> %132, %135, !dbg !57
  %137 = fadd <2 x float> %136, %130, !dbg !58
  %138 = extractelement <2 x float> %137, i64 0, !dbg !59
  %139 = extractelement <2 x float> %137, i64 1, !dbg !60
  %140 = fsub float %138, %139, !dbg !59
  %141 = bitcast i32 %46 to float, !dbg !30
  %142 = fmul float %140, %141, !dbg !61
  %143 = fadd float %139, %142, !dbg !60
  %144 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !52
  %145 = insertelement <2 x i32> %144, i32 %87, i64 1, !dbg !52
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !52
  %147 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !50
  %148 = insertelement <2 x i32> %147, i32 %73, i64 1, !dbg !50
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !50
  %150 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %151 = fsub <2 x float> %146, %149, !dbg !56
  %152 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !57
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !57
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %155 = fmul <2 x float> %151, %154, !dbg !57
  %156 = fadd <2 x float> %155, %149, !dbg !58
  %157 = extractelement <2 x float> %156, i64 0, !dbg !59
  %158 = extractelement <2 x float> %156, i64 1, !dbg !60
  %159 = fsub float %157, %158, !dbg !59
  %160 = bitcast i32 %45 to float, !dbg !30
  %161 = fmul float %159, %160, !dbg !61
  %162 = fadd float %158, %161, !dbg !60
  %163 = bitcast i32 %54 to float, !dbg !36
  %164 = bitcast i32 %53 to float, !dbg !35
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !62
  %166 = fmul float %124, %165, !dbg !63
  %167 = fmul float %121, %165, !dbg !63
  %168 = fmul float %166, %164, !dbg !64
  %169 = fmul float %167, %164, !dbg !64
  %170 = fadd float %168, %163, !dbg !65
  %171 = fadd float %169, %163, !dbg !65
  %172 = fcmp olt float %170, 0.000000e+00, !dbg !66
  %173 = fcmp olt float %171, 0.000000e+00, !dbg !66
  %174 = select i1 %172, float 0.000000e+00, float %170, !dbg !70
  %175 = select i1 %173, float 0.000000e+00, float %171, !dbg !70
  %176 = fadd float %162, %174, !dbg !71
  %177 = fadd float %143, %175, !dbg !71
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !72
  %179 = bitcast float %176 to i32, !dbg !73
  %180 = bitcast float %177 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 %21) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavgwty6jibrot63tclrahn7455ggjpqyqwszwzroyidcobe24ia.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 20, scope: !7)
!34 = !DILocation(line: 37, column: 20, scope: !7)
!35 = !DILocation(line: 39, column: 20, scope: !7)
!36 = !DILocation(line: 41, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 32, scope: !7)
!38 = !DILocation(line: 49, column: 32, scope: !7)
!39 = !DILocation(line: 50, column: 39, scope: !7)
!40 = !DILocation(line: 50, column: 49, scope: !7)
!41 = !DILocation(line: 50, column: 46, scope: !7)
!42 = !DILocation(line: 50, column: 30, scope: !7)
!43 = !DILocation(line: 50, column: 54, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 56, scope: !7)
!47 = !DILocation(line: 60, column: 35, scope: !7)
!48 = !DILocation(line: 61, column: 40, scope: !7)
!49 = !DILocation(line: 61, column: 31, scope: !7)
!50 = !DILocation(line: 61, column: 56, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 57, scope: !7)
!53 = !DILocation(line: 71, column: 20, scope: !7)
!54 = !DILocation(line: 72, column: 27, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 77, column: 20, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 79, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 81, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 82, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 28, scope: !7)
!73 = !DILocation(line: 83, column: 40, scope: !7)
!74 = !DILocation(line: 83, column: 4, scope: !7)
