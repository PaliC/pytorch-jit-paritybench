; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 256, !dbg !14
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = lshr i32 %8, 3, !dbg !17
  %33 = and i32 %32, 15, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 16, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 961, !dbg !19
  %39 = icmp slt i32 %36, 961, !dbg !19
  %40 = icmp slt i32 %37, 961, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %41 = sdiv i32 %.frozen, 64, !dbg !20
  %42 = mul i32 %41, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %43 = sdiv i32 %13, 64, !dbg !20
  %44 = sdiv i32 %14, 64, !dbg !20
  %45 = sdiv i32 %15, 64, !dbg !20
  %46 = sdiv i32 %16, 64, !dbg !20
  %47 = sdiv i32 %17, 64, !dbg !20
  %48 = sdiv i32 %18, 64, !dbg !20
  %49 = sdiv i32 %19, 64, !dbg !20
  %50 = sdiv i32 %20, 64, !dbg !20
  %51 = shl i32 %35, 6, !dbg !22
  %52 = shl i32 %36, 6, !dbg !22
  %53 = mul i32 %41, 61504, !dbg !23
  %54 = add i32 %53, %.decomposed, !dbg !24
  %55 = add i32 %54, %51, !dbg !25
  %56 = add i32 %54, %52, !dbg !25
  %57 = sext i32 %55 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = and i1 %21, %38, !dbg !27
  %62 = and i1 %39, %21, !dbg !27
  %63 = and i1 %22, %40, !dbg !27
  %64 = and i1 %23, %40, !dbg !27
  %65 = and i1 %24, %40, !dbg !27
  %66 = and i1 %25, %40, !dbg !27
  %67 = and i1 %26, %40, !dbg !27
  %68 = and i1 %27, %40, !dbg !27
  %69 = and i1 %28, %40, !dbg !27
  %70 = and i1 %29, %40, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #4, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #4, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %81 = shl i32 %8, 7, !dbg !28
  %82 = and i32 %81, 896, !dbg !28
  %83 = or disjoint i32 %82, %33, !dbg !28
  %84 = and i32 %8, 127, !dbg !28
  %85 = lshr exact i32 %82, 5, !dbg !28
  %86 = add nuw nsw i32 %85, %83, !dbg !28
  %87 = zext nneg i32 %86 to i64, !dbg !28
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !28
  %89 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !28
  %90 = or disjoint i32 %83, 32, !dbg !28
  %91 = lshr i32 %90, 5, !dbg !28
  %92 = add nuw nsw i32 %91, %90, !dbg !28
  %93 = zext nneg i32 %92 to i64, !dbg !28
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !28
  %95 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #4, !dbg !28
  %96 = or disjoint i32 %83, 64, !dbg !28
  %97 = lshr i32 %96, 5, !dbg !28
  %98 = add nuw nsw i32 %97, %96, !dbg !28
  %99 = zext nneg i32 %98 to i64, !dbg !28
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !28
  %101 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !28
  %102 = or disjoint i32 %83, 96, !dbg !28
  %103 = lshr i32 %102, 5, !dbg !28
  %104 = add nuw nsw i32 %103, %102, !dbg !28
  %105 = zext nneg i32 %104 to i64, !dbg !28
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %105, !dbg !28
  %107 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !28
  %108 = or disjoint i32 %83, 16, !dbg !28
  %109 = add nuw nsw i32 %108, %85, !dbg !28
  %110 = zext nneg i32 %109 to i64, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !28
  %112 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #4, !dbg !28
  %113 = or disjoint i32 %83, 48, !dbg !28
  %114 = lshr i32 %113, 5, !dbg !28
  %115 = add nuw nsw i32 %114, %113, !dbg !28
  %116 = zext nneg i32 %115 to i64, !dbg !28
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !28
  %118 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !28
  %119 = or disjoint i32 %83, 80, !dbg !28
  %120 = lshr i32 %119, 5, !dbg !28
  %121 = add nuw nsw i32 %120, %119, !dbg !28
  %122 = zext nneg i32 %121 to i64, !dbg !28
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !28
  %124 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !28
  %125 = or disjoint i32 %83, 112, !dbg !28
  %126 = lshr i32 %125, 5, !dbg !28
  %127 = add nuw nsw i32 %126, %125, !dbg !28
  %128 = zext nneg i32 %127 to i64, !dbg !28
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !28
  %130 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %131 = lshr i32 %84, 5, !dbg !28
  %132 = add nuw nsw i32 %131, %84, !dbg !28
  %133 = zext nneg i32 %132 to i64, !dbg !28
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !28
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !28
  %136 = or disjoint i32 %84, 128, !dbg !28
  %137 = lshr i32 %136, 5, !dbg !28
  %138 = add nuw nsw i32 %137, %136, !dbg !28
  %139 = zext nneg i32 %138 to i64, !dbg !28
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !28
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !28
  %142 = or disjoint i32 %84, 256, !dbg !28
  %143 = lshr i32 %142, 5, !dbg !28
  %144 = add nuw nsw i32 %143, %142, !dbg !28
  %145 = zext nneg i32 %144 to i64, !dbg !28
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !28
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !28
  %148 = or disjoint i32 %84, 384, !dbg !28
  %149 = lshr i32 %148, 5, !dbg !28
  %150 = add nuw nsw i32 %149, %148, !dbg !28
  %151 = zext nneg i32 %150 to i64, !dbg !28
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !28
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !28
  %154 = or disjoint i32 %84, 512, !dbg !28
  %155 = lshr i32 %154, 5, !dbg !28
  %156 = add nuw nsw i32 %155, %154, !dbg !28
  %157 = zext nneg i32 %156 to i64, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !28
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !28
  %160 = or disjoint i32 %84, 640, !dbg !28
  %161 = lshr i32 %160, 5, !dbg !28
  %162 = add nuw nsw i32 %161, %160, !dbg !28
  %163 = zext nneg i32 %162 to i64, !dbg !28
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !28
  %165 = load float, ptr addrspace(3) %164, align 4, !dbg !28
  %166 = or disjoint i32 %84, 768, !dbg !28
  %167 = lshr i32 %166, 5, !dbg !28
  %168 = add nuw nsw i32 %167, %166, !dbg !28
  %169 = zext nneg i32 %168 to i64, !dbg !28
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !28
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !28
  %172 = or disjoint i32 %84, 896, !dbg !28
  %173 = lshr i32 %172, 5, !dbg !28
  %174 = add nuw nsw i32 %173, %172, !dbg !28
  %175 = zext nneg i32 %174 to i64, !dbg !28
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !28
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !28
  %178 = mul i32 %43, 961, !dbg !29
  %179 = mul i32 %44, 961, !dbg !29
  %180 = mul i32 %45, 961, !dbg !29
  %181 = mul i32 %46, 961, !dbg !29
  %182 = mul i32 %47, 961, !dbg !29
  %183 = mul i32 %48, 961, !dbg !29
  %184 = mul i32 %49, 961, !dbg !29
  %185 = mul i32 %50, 961, !dbg !29
  %186 = add i32 %178, %37, !dbg !30
  %187 = add i32 %37, %179, !dbg !30
  %188 = add i32 %37, %180, !dbg !30
  %189 = add i32 %37, %181, !dbg !30
  %190 = add i32 %37, %182, !dbg !30
  %191 = add i32 %37, %183, !dbg !30
  %192 = add i32 %37, %184, !dbg !30
  %193 = add i32 %37, %185, !dbg !30
  %194 = sext i32 %186 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !31
  %196 = sext i32 %187 to i64, !dbg !31
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !31
  %198 = sext i32 %188 to i64, !dbg !31
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !31
  %200 = sext i32 %189 to i64, !dbg !31
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !31
  %202 = sext i32 %190 to i64, !dbg !31
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !31
  %204 = sext i32 %191 to i64, !dbg !31
  %205 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !31
  %206 = sext i32 %192 to i64, !dbg !31
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !31
  %208 = sext i32 %193 to i64, !dbg !31
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !31
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %63) #4, !dbg !32
  %211 = bitcast i32 %210 to float, !dbg !32
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %64) #4, !dbg !32
  %213 = bitcast i32 %212 to float, !dbg !32
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %65) #4, !dbg !32
  %215 = bitcast i32 %214 to float, !dbg !32
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %66) #4, !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %67) #4, !dbg !32
  %219 = bitcast i32 %218 to float, !dbg !32
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %68) #4, !dbg !32
  %221 = bitcast i32 %220 to float, !dbg !32
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %69) #4, !dbg !32
  %223 = bitcast i32 %222 to float, !dbg !32
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %70) #4, !dbg !32
  %225 = bitcast i32 %224 to float, !dbg !32
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %226, 0, !dbg !33
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %227, 0, !dbg !33
  br i1 %.not.i, label %233, label %228, !dbg !33

228:                                              ; preds = %5
  br i1 %.not1.i, label %231, label %229, !dbg !33

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

233:                                              ; preds = %5
  br i1 %.not1.i, label %236, label %234, !dbg !33

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %229, %231, %234, %236
  %.0.i = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !33
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i4 = icmp eq i32 %238, 0, !dbg !33
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i7 = icmp eq i32 %239, 0, !dbg !33
  br i1 %.not.i4, label %245, label %240, !dbg !33

240:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %243, label %241, !dbg !33

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

245:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %248, label %246, !dbg !33

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

__nv_sqrtf.exit8:                                 ; preds = %241, %243, %246, %248
  %.0.i6 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !33
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i9 = icmp eq i32 %250, 0, !dbg !33
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i12 = icmp eq i32 %251, 0, !dbg !33
  br i1 %.not.i9, label %257, label %252, !dbg !33

252:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %255, label %253, !dbg !33

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

257:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %260, label %258, !dbg !33

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

__nv_sqrtf.exit13:                                ; preds = %253, %255, %258, %260
  %.0.i11 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !33
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i14 = icmp eq i32 %262, 0, !dbg !33
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i17 = icmp eq i32 %263, 0, !dbg !33
  br i1 %.not.i14, label %269, label %264, !dbg !33

264:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %267, label %265, !dbg !33

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

269:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %272, label %270, !dbg !33

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

__nv_sqrtf.exit18:                                ; preds = %265, %267, %270, %272
  %.0.i16 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !33
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i19 = icmp eq i32 %274, 0, !dbg !33
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i22 = icmp eq i32 %275, 0, !dbg !33
  br i1 %.not.i19, label %281, label %276, !dbg !33

276:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %279, label %277, !dbg !33

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

281:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %284, label %282, !dbg !33

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

__nv_sqrtf.exit23:                                ; preds = %277, %279, %282, %284
  %.0.i21 = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !33
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i24 = icmp eq i32 %286, 0, !dbg !33
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i27 = icmp eq i32 %287, 0, !dbg !33
  br i1 %.not.i24, label %293, label %288, !dbg !33

288:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %291, label %289, !dbg !33

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

293:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %296, label %294, !dbg !33

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

__nv_sqrtf.exit28:                                ; preds = %289, %291, %294, %296
  %.0.i26 = phi float [ %290, %289 ], [ %292, %291 ], [ %295, %294 ], [ %297, %296 ], !dbg !33
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i29 = icmp eq i32 %298, 0, !dbg !33
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i32 = icmp eq i32 %299, 0, !dbg !33
  br i1 %.not.i29, label %305, label %300, !dbg !33

300:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %303, label %301, !dbg !33

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

305:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %308, label %306, !dbg !33

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

__nv_sqrtf.exit33:                                ; preds = %301, %303, %306, %308
  %.0.i31 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !33
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i34 = icmp eq i32 %310, 0, !dbg !33
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i37 = icmp eq i32 %311, 0, !dbg !33
  br i1 %.not.i34, label %317, label %312, !dbg !33

312:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %315, label %313, !dbg !33

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

317:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %320, label %318, !dbg !33

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

__nv_sqrtf.exit38:                                ; preds = %313, %315, %318, %320
  %.0.i36 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !33
  %322 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !34
  %323 = fadd float %.0.i6, 0x3DDB7CDFE0000000, !dbg !34
  %324 = fadd float %.0.i11, 0x3DDB7CDFE0000000, !dbg !34
  %325 = fadd float %.0.i16, 0x3DDB7CDFE0000000, !dbg !34
  %326 = fadd float %.0.i21, 0x3DDB7CDFE0000000, !dbg !34
  %327 = fadd float %.0.i26, 0x3DDB7CDFE0000000, !dbg !34
  %328 = fadd float %.0.i31, 0x3DDB7CDFE0000000, !dbg !34
  %329 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !34
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %322) #4, !dbg !35
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %323) #4, !dbg !35
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %324) #4, !dbg !35
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %325) #4, !dbg !35
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %326) #4, !dbg !35
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %327) #4, !dbg !35
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %328) #4, !dbg !35
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %329) #4, !dbg !35
  %338 = mul i32 %13, 961, !dbg !36
  %339 = mul i32 %14, 961, !dbg !36
  %340 = mul i32 %15, 961, !dbg !36
  %341 = mul i32 %16, 961, !dbg !36
  %342 = mul i32 %17, 961, !dbg !36
  %343 = mul i32 %18, 961, !dbg !36
  %344 = mul i32 %19, 961, !dbg !36
  %345 = mul i32 %20, 961, !dbg !36
  %346 = add i32 %37, %338, !dbg !37
  %347 = add i32 %37, %339, !dbg !37
  %348 = add i32 %37, %340, !dbg !37
  %349 = add i32 %37, %341, !dbg !37
  %350 = add i32 %37, %342, !dbg !37
  %351 = add i32 %37, %343, !dbg !37
  %352 = add i32 %37, %344, !dbg !37
  %353 = add i32 %37, %345, !dbg !37
  %354 = sext i32 %346 to i64, !dbg !38
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %354, !dbg !38
  %356 = sext i32 %347 to i64, !dbg !38
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %356, !dbg !38
  %358 = sext i32 %348 to i64, !dbg !38
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %358, !dbg !38
  %360 = sext i32 %349 to i64, !dbg !38
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %360, !dbg !38
  %362 = sext i32 %350 to i64, !dbg !38
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %362, !dbg !38
  %364 = sext i32 %351 to i64, !dbg !38
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %364, !dbg !38
  %366 = sext i32 %352 to i64, !dbg !38
  %367 = getelementptr float, ptr addrspace(1) %2, i64 %366, !dbg !38
  %368 = sext i32 %353 to i64, !dbg !38
  %369 = getelementptr float, ptr addrspace(1) %2, i64 %368, !dbg !38
  %370 = bitcast float %330 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %355, i1 %63) #4, !dbg !39
  %371 = bitcast float %331 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %371, ptr addrspace(1) %357, i1 %64) #4, !dbg !39
  %372 = bitcast float %332 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %372, ptr addrspace(1) %359, i1 %65) #4, !dbg !39
  %373 = bitcast float %333 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %361, i1 %66) #4, !dbg !39
  %374 = bitcast float %334 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %363, i1 %67) #4, !dbg !39
  %375 = bitcast float %335 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %365, i1 %68) #4, !dbg !39
  %376 = bitcast float %336 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %367, i1 %69) #4, !dbg !39
  %377 = bitcast float %337 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %369, i1 %70) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4jxggu4ejfyryo2bzvrfpxjahc443vzfccnhi6go3ohuyq3kcez.py", directory: "inductor_cache/4j")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 26, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 34, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 45, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
