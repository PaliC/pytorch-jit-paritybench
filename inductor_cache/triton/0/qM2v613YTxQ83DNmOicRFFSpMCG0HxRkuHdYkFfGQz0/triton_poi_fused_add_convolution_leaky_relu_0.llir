; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_leaky_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = srem i32 %12, 50, !dbg !15
  %15 = srem i32 %13, 50, !dbg !15
  %16 = sext i32 %10 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = sext i32 %11 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %30 = sext i32 %14 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %15 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !21
  %54 = insertelement <8 x i32> poison, i32 %29, i64 0, !dbg !17
  %55 = insertelement <8 x i32> %54, i32 %28, i64 1, !dbg !17
  %56 = insertelement <8 x i32> %55, i32 %27, i64 2, !dbg !17
  %57 = insertelement <8 x i32> %56, i32 %26, i64 3, !dbg !17
  %58 = insertelement <8 x i32> %57, i32 %24, i64 4, !dbg !17
  %59 = insertelement <8 x i32> %58, i32 %23, i64 5, !dbg !17
  %60 = insertelement <8 x i32> %59, i32 %22, i64 6, !dbg !17
  %61 = insertelement <8 x i32> %60, i32 %21, i64 7, !dbg !17
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !17
  %63 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !19
  %64 = insertelement <8 x i32> %63, i32 %40, i64 1, !dbg !19
  %65 = insertelement <8 x i32> %64, i32 %39, i64 2, !dbg !19
  %66 = insertelement <8 x i32> %65, i32 %38, i64 3, !dbg !19
  %67 = insertelement <8 x i32> %66, i32 %37, i64 4, !dbg !19
  %68 = insertelement <8 x i32> %67, i32 %36, i64 5, !dbg !19
  %69 = insertelement <8 x i32> %68, i32 %35, i64 6, !dbg !19
  %70 = insertelement <8 x i32> %69, i32 %34, i64 7, !dbg !19
  %71 = bitcast <8 x i32> %70 to <8 x float>, !dbg !19
  %72 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !21
  %73 = insertelement <8 x i32> %72, i32 %52, i64 1, !dbg !21
  %74 = insertelement <8 x i32> %73, i32 %51, i64 2, !dbg !21
  %75 = insertelement <8 x i32> %74, i32 %50, i64 3, !dbg !21
  %76 = insertelement <8 x i32> %75, i32 %48, i64 4, !dbg !21
  %77 = insertelement <8 x i32> %76, i32 %47, i64 5, !dbg !21
  %78 = insertelement <8 x i32> %77, i32 %46, i64 6, !dbg !21
  %79 = insertelement <8 x i32> %78, i32 %45, i64 7, !dbg !21
  %80 = bitcast <8 x i32> %79 to <8 x float>, !dbg !21
  %81 = fadd <8 x float> %62, %71, !dbg !22
  %82 = fadd <8 x float> %81, %80, !dbg !23
  %83 = fcmp ogt <8 x float> %82, zeroinitializer, !dbg !24
  %84 = extractelement <8 x float> %82, i64 7, !dbg !25
  %85 = fmul float %84, 0x3FA99999A0000000, !dbg !26
  %86 = extractelement <8 x float> %82, i64 6, !dbg !25
  %87 = fmul float %86, 0x3FA99999A0000000, !dbg !26
  %88 = extractelement <8 x float> %82, i64 5, !dbg !25
  %89 = fmul float %88, 0x3FA99999A0000000, !dbg !26
  %90 = extractelement <8 x float> %82, i64 4, !dbg !25
  %91 = fmul float %90, 0x3FA99999A0000000, !dbg !26
  %92 = extractelement <8 x float> %82, i64 3, !dbg !25
  %93 = fmul float %92, 0x3FA99999A0000000, !dbg !26
  %94 = extractelement <8 x float> %82, i64 2, !dbg !25
  %95 = fmul float %94, 0x3FA99999A0000000, !dbg !26
  %96 = extractelement <8 x float> %82, i64 1, !dbg !25
  %97 = fmul float %96, 0x3FA99999A0000000, !dbg !26
  %98 = extractelement <8 x float> %82, i64 0, !dbg !25
  %99 = fmul float %98, 0x3FA99999A0000000, !dbg !26
  %100 = extractelement <8 x i1> %83, i64 7, !dbg !25
  %101 = select i1 %100, float %84, float %85, !dbg !25
  %102 = extractelement <8 x i1> %83, i64 6, !dbg !25
  %103 = select i1 %102, float %86, float %87, !dbg !25
  %104 = extractelement <8 x i1> %83, i64 5, !dbg !25
  %105 = select i1 %104, float %88, float %89, !dbg !25
  %106 = extractelement <8 x i1> %83, i64 4, !dbg !25
  %107 = select i1 %106, float %90, float %91, !dbg !25
  %108 = extractelement <8 x i1> %83, i64 3, !dbg !25
  %109 = select i1 %108, float %92, float %93, !dbg !25
  %110 = extractelement <8 x i1> %83, i64 2, !dbg !25
  %111 = select i1 %110, float %94, float %95, !dbg !25
  %112 = extractelement <8 x i1> %83, i64 1, !dbg !25
  %113 = select i1 %112, float %96, float %97, !dbg !25
  %114 = extractelement <8 x i1> %83, i64 0, !dbg !25
  %115 = select i1 %114, float %98, float %99, !dbg !25
  %116 = bitcast float %101 to i32, !dbg !27
  %117 = bitcast float %103 to i32, !dbg !27
  %118 = bitcast float %105 to i32, !dbg !27
  %119 = bitcast float %107 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %117, i32 %118, i32 %119, ptr addrspace(1) %17, i1 true) #1, !dbg !27
  %120 = bitcast float %109 to i32, !dbg !27
  %121 = bitcast float %111 to i32, !dbg !27
  %122 = bitcast float %113 to i32, !dbg !27
  %123 = bitcast float %115 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %121, i32 %122, i32 %123, ptr addrspace(1) %19, i1 true) #1, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqiqse22dupydkpgnvmscg2zppmnoqbrzvui3pkjje4qqhf7kkok.py", directory: "inductor_cache/qi")
!4 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_leaky_relu_0", linkageName: "triton_poi_fused_add_convolution_leaky_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 32, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 39, scope: !7)
!28 = !DILocation(line: 36, column: 4, scope: !7)
