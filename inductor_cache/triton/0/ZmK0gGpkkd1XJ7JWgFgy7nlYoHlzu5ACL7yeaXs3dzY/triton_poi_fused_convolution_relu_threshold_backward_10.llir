; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 4, !dbg !12
  %11 = and i32 %10, 240, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = and i32 %9, 255, !dbg !12
  %18 = or disjoint i32 %8, %11, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = or disjoint i32 %18, 8, !dbg !13
  %21 = or disjoint i32 %18, 12, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %14, !dbg !13
  %24 = or disjoint i32 %8, %15, !dbg !13
  %25 = or disjoint i32 %8, %16, !dbg !13
  %26 = or disjoint i32 %8, %17, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = shl i32 %27, 4, !dbg !15
  %29 = lshr i32 %9, 4, !dbg !16
  %30 = and i32 %29, 15, !dbg !16
  %31 = shl i32 %9, 2, !dbg !16
  %32 = and i32 %31, 12, !dbg !16
  %33 = or disjoint i32 %28, %30, !dbg !17
  %34 = or disjoint i32 %28, %32, !dbg !17
  %35 = icmp slt i32 %33, 16, !dbg !18
  %36 = icmp slt i32 %34, 16, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %37 = sdiv i32 %.frozen, 512, !dbg !19
  %38 = mul i32 %37, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %39 = srem i32 %19, 512, !dbg !20
  %40 = srem i32 %20, 512, !dbg !20
  %41 = srem i32 %21, 512, !dbg !20
  %42 = srem i32 %26, 512, !dbg !20
  %43 = shl i32 %33, 9, !dbg !21
  %44 = shl i32 %37, 13, !dbg !22
  %45 = add i32 %44, %43, !dbg !23
  %46 = add i32 %45, %.decomposed, !dbg !24
  %47 = add i32 %45, %39, !dbg !24
  %48 = add i32 %45, %40, !dbg !24
  %49 = add i32 %45, %41, !dbg !24
  %50 = sext i32 %46 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %47 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %48 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %49 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %35) #2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %35) #2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %35) #2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = shl i32 %9, 8, !dbg !26
  %79 = and i32 %78, 3840, !dbg !26
  %80 = or disjoint i32 %79, %30, !dbg !26
  %81 = and i32 %31, 1020, !dbg !26
  %82 = lshr exact i32 %79, 2, !dbg !26
  %83 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %80, !dbg !26
  %85 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !26
  %86 = or disjoint i32 %80, 16, !dbg !26
  %87 = lshr i32 %86, 4, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !26
  %90 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !26
  %91 = or disjoint i32 %80, 32, !dbg !26
  %92 = lshr i32 %91, 4, !dbg !26
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !26
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !26
  %95 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !26
  %96 = or disjoint i32 %80, 48, !dbg !26
  %97 = lshr i32 %96, 4, !dbg !26
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !26
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !26
  %100 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !26
  %101 = or disjoint i32 %80, 64, !dbg !26
  %102 = lshr i32 %101, 4, !dbg !26
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !26
  %105 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !26
  %106 = or disjoint i32 %80, 80, !dbg !26
  %107 = lshr i32 %106, 4, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !26
  %111 = or disjoint i32 %80, 96, !dbg !26
  %112 = lshr i32 %111, 4, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !26
  %115 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !26
  %116 = or disjoint i32 %80, 112, !dbg !26
  %117 = lshr i32 %116, 4, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !26
  %120 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !26
  %121 = or disjoint i32 %80, 128, !dbg !26
  %122 = lshr i32 %121, 4, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !26
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !26
  %125 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !26
  %126 = or disjoint i32 %80, 144, !dbg !26
  %127 = lshr i32 %126, 4, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !26
  %130 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !26
  %131 = or disjoint i32 %80, 160, !dbg !26
  %132 = lshr i32 %131, 4, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !26
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !26
  %135 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !26
  %136 = or disjoint i32 %80, 176, !dbg !26
  %137 = lshr i32 %136, 4, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !26
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !26
  %140 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !26
  %141 = or disjoint i32 %80, 192, !dbg !26
  %142 = lshr i32 %141, 4, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !26
  %146 = or disjoint i32 %80, 208, !dbg !26
  %147 = lshr i32 %146, 4, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !26
  %150 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !26
  %151 = or disjoint i32 %80, 224, !dbg !26
  %152 = lshr i32 %151, 4, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !26
  %155 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !26
  %156 = or disjoint i32 %80, 240, !dbg !26
  %157 = lshr i32 %156, 4, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %161 = lshr i32 %81, 4, !dbg !26
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %81, !dbg !26
  %164 = or disjoint i32 %81, 1024, !dbg !26
  %165 = lshr i32 %164, 4, !dbg !26
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !26
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %164, !dbg !26
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !26
  %169 = or disjoint i32 %81, 1025, !dbg !26
  %170 = lshr i32 %169, 4, !dbg !26
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !26
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %169, !dbg !26
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !26
  %174 = or disjoint i32 %81, 1026, !dbg !26
  %175 = lshr i32 %174, 4, !dbg !26
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !26
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %174, !dbg !26
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !26
  %179 = or disjoint i32 %81, 1027, !dbg !26
  %180 = lshr i32 %179, 4, !dbg !26
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !26
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %179, !dbg !26
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !26
  %184 = or disjoint i32 %81, 2048, !dbg !26
  %185 = lshr i32 %184, 4, !dbg !26
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !26
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !26
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !26
  %189 = or disjoint i32 %81, 2049, !dbg !26
  %190 = lshr i32 %189, 4, !dbg !26
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !26
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !26
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !26
  %194 = or disjoint i32 %81, 2050, !dbg !26
  %195 = lshr i32 %194, 4, !dbg !26
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !26
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !26
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !26
  %199 = or disjoint i32 %81, 2051, !dbg !26
  %200 = lshr i32 %199, 4, !dbg !26
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !26
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !26
  %204 = or disjoint i32 %81, 3072, !dbg !26
  %205 = lshr i32 %204, 4, !dbg !26
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !26
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !26
  %209 = or disjoint i32 %81, 3073, !dbg !26
  %210 = lshr i32 %209, 4, !dbg !26
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !26
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !26
  %214 = or disjoint i32 %81, 3074, !dbg !26
  %215 = lshr i32 %214, 4, !dbg !26
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !26
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !26
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !26
  %219 = or disjoint i32 %81, 3075, !dbg !26
  %220 = lshr i32 %219, 4, !dbg !26
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !26
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !26
  %224 = and i32 %10, 4080, !dbg !26
  %225 = and i32 %9, 240, !dbg !26
  %226 = add nuw nsw i32 %224, %225, !dbg !26
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %228 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 16, !dbg !26
  %229 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 32, !dbg !26
  %230 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 48, !dbg !26
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !26
  %232 = add nuw nsw i32 %17, 272, !dbg !26
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !26
  %234 = add nuw nsw i32 %17, 544, !dbg !26
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !26
  %236 = add nuw nsw i32 %17, 816, !dbg !26
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !26
  %238 = add nuw nsw i32 %17, 1088, !dbg !26
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !26
  %240 = add nuw nsw i32 %17, 1360, !dbg !26
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !26
  %242 = add nuw nsw i32 %17, 1632, !dbg !26
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !26
  %244 = add nuw nsw i32 %17, 1904, !dbg !26
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !26
  %246 = add nuw nsw i32 %17, 2176, !dbg !26
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !26
  %248 = add nuw nsw i32 %17, 2448, !dbg !26
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !26
  %250 = add nuw nsw i32 %17, 2720, !dbg !26
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !26
  %252 = add nuw nsw i32 %17, 2992, !dbg !26
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !26
  %254 = add nuw nsw i32 %17, 3264, !dbg !26
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !26
  %256 = add nuw nsw i32 %17, 3536, !dbg !26
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !26
  %258 = add nuw nsw i32 %17, 3808, !dbg !26
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !26
  %260 = add nuw nsw i32 %17, 4080, !dbg !26
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !26
  %262 = sext i32 %42 to i64, !dbg !27
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !27
  %.idx = shl nuw nsw i32 %17, 3, !dbg !28
  %264 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !28
  %265 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !28
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !28
  %266 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !28
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !28
  %267 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !28
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !28
  %268 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !28
  %269 = load <4 x float>, ptr addrspace(3) %163, align 4, !dbg !26
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %227, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %228, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %229, i32 %69, i32 %70, i32 %71, i32 %72, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %230, i32 %74, i32 %75, i32 %76, i32 %77, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %271 = load float, ptr addrspace(3) %231, align 4, !dbg !26
  %272 = load float, ptr addrspace(3) %233, align 4, !dbg !26
  %273 = load float, ptr addrspace(3) %235, align 4, !dbg !26
  %274 = load float, ptr addrspace(3) %237, align 4, !dbg !26
  %275 = load float, ptr addrspace(3) %239, align 4, !dbg !26
  %276 = load float, ptr addrspace(3) %241, align 4, !dbg !26
  %277 = load float, ptr addrspace(3) %243, align 4, !dbg !26
  %278 = load float, ptr addrspace(3) %245, align 4, !dbg !26
  %279 = load float, ptr addrspace(3) %247, align 4, !dbg !26
  %280 = load float, ptr addrspace(3) %249, align 4, !dbg !26
  %281 = load float, ptr addrspace(3) %251, align 4, !dbg !26
  %282 = load float, ptr addrspace(3) %253, align 4, !dbg !26
  %283 = load float, ptr addrspace(3) %255, align 4, !dbg !26
  %284 = load float, ptr addrspace(3) %257, align 4, !dbg !26
  %285 = load float, ptr addrspace(3) %259, align 4, !dbg !26
  %286 = load float, ptr addrspace(3) %261, align 4, !dbg !26
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %288 = insertelement <1 x i32> poison, i32 %287, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %288, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %289 = load float, ptr addrspace(3) %265, align 8, !dbg !28
  %290 = load float, ptr addrspace(3) %266, align 8, !dbg !28
  %291 = load float, ptr addrspace(3) %267, align 8, !dbg !28
  %292 = load float, ptr addrspace(3) %268, align 8, !dbg !28
  %293 = insertelement <32 x float> poison, float %286, i64 0, !dbg !33
  %294 = insertelement <32 x float> %293, float %285, i64 1, !dbg !33
  %295 = insertelement <32 x float> %294, float %284, i64 2, !dbg !33
  %296 = insertelement <32 x float> %295, float %283, i64 3, !dbg !33
  %297 = insertelement <32 x float> %296, float %282, i64 4, !dbg !33
  %298 = insertelement <32 x float> %297, float %281, i64 5, !dbg !33
  %299 = insertelement <32 x float> %298, float %280, i64 6, !dbg !33
  %300 = insertelement <32 x float> %299, float %279, i64 7, !dbg !33
  %301 = insertelement <32 x float> %300, float %278, i64 8, !dbg !33
  %302 = insertelement <32 x float> %301, float %277, i64 9, !dbg !33
  %303 = insertelement <32 x float> %302, float %276, i64 10, !dbg !33
  %304 = insertelement <32 x float> %303, float %275, i64 11, !dbg !33
  %305 = insertelement <32 x float> %304, float %274, i64 12, !dbg !33
  %306 = insertelement <32 x float> %305, float %273, i64 13, !dbg !33
  %307 = insertelement <32 x float> %306, float %272, i64 14, !dbg !33
  %308 = insertelement <32 x float> %307, float %271, i64 15, !dbg !33
  %309 = insertelement <32 x float> %308, float %223, i64 16, !dbg !33
  %310 = insertelement <32 x float> %309, float %218, i64 17, !dbg !33
  %311 = insertelement <32 x float> %310, float %213, i64 18, !dbg !33
  %312 = insertelement <32 x float> %311, float %208, i64 19, !dbg !33
  %313 = insertelement <32 x float> %312, float %203, i64 20, !dbg !33
  %314 = insertelement <32 x float> %313, float %198, i64 21, !dbg !33
  %315 = insertelement <32 x float> %314, float %193, i64 22, !dbg !33
  %316 = insertelement <32 x float> %315, float %188, i64 23, !dbg !33
  %317 = insertelement <32 x float> %316, float %183, i64 24, !dbg !33
  %318 = insertelement <32 x float> %317, float %178, i64 25, !dbg !33
  %319 = insertelement <32 x float> %318, float %173, i64 26, !dbg !33
  %320 = insertelement <32 x float> %319, float %168, i64 27, !dbg !33
  %321 = shufflevector <4 x float> %270, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %322 = shufflevector <32 x float> %320, <32 x float> %321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 34, i32 35>, !dbg !33
  %323 = insertelement <32 x i32> poison, i32 %287, i64 0, !dbg !33
  %324 = bitcast <32 x i32> %323 to <32 x float>, !dbg !33
  %325 = insertelement <32 x float> %324, float %292, i64 16, !dbg !33
  %326 = insertelement <32 x float> %325, float %291, i64 20, !dbg !33
  %327 = insertelement <32 x float> %326, float %290, i64 24, !dbg !33
  %328 = insertelement <32 x float> %327, float %289, i64 28, !dbg !33
  %329 = shufflevector <32 x float> %328, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 20, i32 20, i32 20, i32 20, i32 24, i32 24, i32 24, i32 24, i32 28, i32 28, i32 28, i32 28>, !dbg !33
  %330 = fadd <32 x float> %322, %329, !dbg !33
  %331 = fcmp olt <32 x float> %330, zeroinitializer, !dbg !34
  %332 = extractelement <32 x i1> %331, i64 31, !dbg !28
  %333 = extractelement <32 x i1> %331, i64 30, !dbg !28
  %334 = extractelement <32 x i1> %331, i64 29, !dbg !28
  %335 = extractelement <32 x i1> %331, i64 28, !dbg !28
  %336 = extractelement <32 x i1> %331, i64 27, !dbg !28
  %337 = extractelement <32 x i1> %331, i64 26, !dbg !28
  %338 = extractelement <32 x i1> %331, i64 25, !dbg !28
  %339 = extractelement <32 x i1> %331, i64 24, !dbg !28
  %340 = extractelement <32 x i1> %331, i64 23, !dbg !28
  %341 = extractelement <32 x i1> %331, i64 22, !dbg !28
  %342 = extractelement <32 x i1> %331, i64 21, !dbg !28
  %343 = extractelement <32 x i1> %331, i64 20, !dbg !28
  %344 = extractelement <32 x i1> %331, i64 19, !dbg !28
  %345 = extractelement <32 x i1> %331, i64 18, !dbg !28
  %346 = extractelement <32 x i1> %331, i64 17, !dbg !28
  %347 = extractelement <32 x i1> %331, i64 16, !dbg !28
  %348 = shufflevector <32 x i1> %331, <32 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !28
  %349 = shufflevector <32 x float> %330, <32 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !28
  %350 = fcmp ole <16 x float> %349, zeroinitializer, !dbg !35
  %351 = select <16 x i1> %348, <16 x i1> splat (i1 true), <16 x i1> %350, !dbg !28
  %352 = shl i32 %22, 4, !dbg !36
  %353 = shl i32 %23, 4, !dbg !36
  %354 = shl i32 %24, 4, !dbg !36
  %355 = shl i32 %25, 4, !dbg !36
  %356 = add i32 %34, %352, !dbg !37
  %357 = add i32 %34, %353, !dbg !37
  %358 = add i32 %34, %354, !dbg !37
  %359 = add i32 %34, %355, !dbg !37
  %360 = sext i32 %356 to i64, !dbg !38
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %360, !dbg !38
  %362 = sext i32 %357 to i64, !dbg !38
  %363 = getelementptr float, ptr addrspace(1) %2, i64 %362, !dbg !38
  %364 = sext i32 %358 to i64, !dbg !38
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %364, !dbg !38
  %366 = sext i32 %359 to i64, !dbg !38
  %367 = getelementptr float, ptr addrspace(1) %2, i64 %366, !dbg !38
  %bc = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %368 = extractelement <32 x i32> %bc, i64 31, !dbg !39
  %369 = select i1 %332, i32 0, i32 %368, !dbg !28
  %bc16 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %370 = extractelement <32 x i32> %bc16, i64 30, !dbg !39
  %371 = select i1 %333, i32 0, i32 %370, !dbg !28
  %bc17 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %372 = extractelement <32 x i32> %bc17, i64 29, !dbg !39
  %373 = select i1 %334, i32 0, i32 %372, !dbg !28
  %bc18 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %374 = extractelement <32 x i32> %bc18, i64 28, !dbg !39
  %375 = select i1 %335, i32 0, i32 %374, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %371, i32 %373, i32 %375, ptr addrspace(1) %361, i1 %36) #2, !dbg !39
  %bc19 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %376 = extractelement <32 x i32> %bc19, i64 27, !dbg !39
  %377 = select i1 %336, i32 0, i32 %376, !dbg !28
  %bc20 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %378 = extractelement <32 x i32> %bc20, i64 26, !dbg !39
  %379 = select i1 %337, i32 0, i32 %378, !dbg !28
  %bc21 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %380 = extractelement <32 x i32> %bc21, i64 25, !dbg !39
  %381 = select i1 %338, i32 0, i32 %380, !dbg !28
  %bc22 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %382 = extractelement <32 x i32> %bc22, i64 24, !dbg !39
  %383 = select i1 %339, i32 0, i32 %382, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %379, i32 %381, i32 %383, ptr addrspace(1) %363, i1 %36) #2, !dbg !39
  %bc23 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %384 = extractelement <32 x i32> %bc23, i64 23, !dbg !39
  %385 = select i1 %340, i32 0, i32 %384, !dbg !28
  %bc24 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %386 = extractelement <32 x i32> %bc24, i64 22, !dbg !39
  %387 = select i1 %341, i32 0, i32 %386, !dbg !28
  %bc25 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %388 = extractelement <32 x i32> %bc25, i64 21, !dbg !39
  %389 = select i1 %342, i32 0, i32 %388, !dbg !28
  %bc26 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %390 = extractelement <32 x i32> %bc26, i64 20, !dbg !39
  %391 = select i1 %343, i32 0, i32 %390, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %387, i32 %389, i32 %391, ptr addrspace(1) %365, i1 %36) #2, !dbg !39
  %bc27 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %392 = extractelement <32 x i32> %bc27, i64 19, !dbg !39
  %393 = select i1 %344, i32 0, i32 %392, !dbg !28
  %bc28 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %394 = extractelement <32 x i32> %bc28, i64 18, !dbg !39
  %395 = select i1 %345, i32 0, i32 %394, !dbg !28
  %bc29 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %396 = extractelement <32 x i32> %bc29, i64 17, !dbg !39
  %397 = select i1 %346, i32 0, i32 %396, !dbg !28
  %bc30 = bitcast <32 x float> %330 to <32 x i32>, !dbg !39
  %398 = extractelement <32 x i32> %bc30, i64 16, !dbg !39
  %399 = select i1 %347, i32 0, i32 %398, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %393, i32 %395, i32 %397, i32 %399, ptr addrspace(1) %367, i1 %36) #2, !dbg !39
  %400 = getelementptr i1, ptr addrspace(1) %3, i64 %50, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %401 = extractelement <16 x i1> %351, i64 15, !dbg !41
  %402 = zext i1 %401 to i8, !dbg !41
  %403 = extractelement <16 x i1> %351, i64 14, !dbg !41
  %404 = zext i1 %403 to i8, !dbg !41
  %405 = extractelement <16 x i1> %351, i64 13, !dbg !41
  %406 = zext i1 %405 to i8, !dbg !41
  %407 = extractelement <16 x i1> %351, i64 12, !dbg !41
  %408 = zext i1 %407 to i8, !dbg !41
  %409 = extractelement <16 x i1> %351, i64 11, !dbg !41
  %410 = zext i1 %409 to i8, !dbg !41
  %411 = extractelement <16 x i1> %351, i64 10, !dbg !41
  %412 = zext i1 %411 to i8, !dbg !41
  %413 = extractelement <16 x i1> %351, i64 9, !dbg !41
  %414 = zext i1 %413 to i8, !dbg !41
  %415 = extractelement <16 x i1> %351, i64 8, !dbg !41
  %416 = zext i1 %415 to i8, !dbg !41
  %417 = extractelement <16 x i1> %351, i64 7, !dbg !41
  %418 = zext i1 %417 to i8, !dbg !41
  %419 = extractelement <16 x i1> %351, i64 6, !dbg !41
  %420 = zext i1 %419 to i8, !dbg !41
  %421 = extractelement <16 x i1> %351, i64 5, !dbg !41
  %422 = zext i1 %421 to i8, !dbg !41
  %423 = extractelement <16 x i1> %351, i64 4, !dbg !41
  %424 = zext i1 %423 to i8, !dbg !41
  %425 = extractelement <16 x i1> %351, i64 3, !dbg !41
  %426 = zext i1 %425 to i8, !dbg !41
  %427 = extractelement <16 x i1> %351, i64 2, !dbg !41
  %428 = zext i1 %427 to i8, !dbg !41
  %429 = extractelement <16 x i1> %351, i64 1, !dbg !41
  %430 = zext i1 %429 to i8, !dbg !41
  %431 = extractelement <16 x i1> %351, i64 0, !dbg !41
  %432 = zext i1 %431 to i8, !dbg !41
  %433 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !41
  %434 = insertelement <1 x i8> poison, i8 %402, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %433, <1 x i8> %434, i1 true) #2, !dbg !41
  %435 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %232, !dbg !41
  %436 = insertelement <1 x i8> poison, i8 %404, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %435, <1 x i8> %436, i1 true) #2, !dbg !41
  %437 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %234, !dbg !41
  %438 = insertelement <1 x i8> poison, i8 %406, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %437, <1 x i8> %438, i1 true) #2, !dbg !41
  %439 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %236, !dbg !41
  %440 = insertelement <1 x i8> poison, i8 %408, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %439, <1 x i8> %440, i1 true) #2, !dbg !41
  %441 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %238, !dbg !41
  %442 = insertelement <1 x i8> poison, i8 %410, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %441, <1 x i8> %442, i1 true) #2, !dbg !41
  %443 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %240, !dbg !41
  %444 = insertelement <1 x i8> poison, i8 %412, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %443, <1 x i8> %444, i1 true) #2, !dbg !41
  %445 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %242, !dbg !41
  %446 = insertelement <1 x i8> poison, i8 %414, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %445, <1 x i8> %446, i1 true) #2, !dbg !41
  %447 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %244, !dbg !41
  %448 = insertelement <1 x i8> poison, i8 %416, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %447, <1 x i8> %448, i1 true) #2, !dbg !41
  %449 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %246, !dbg !41
  %450 = insertelement <1 x i8> poison, i8 %418, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %449, <1 x i8> %450, i1 true) #2, !dbg !41
  %451 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %248, !dbg !41
  %452 = insertelement <1 x i8> poison, i8 %420, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %451, <1 x i8> %452, i1 true) #2, !dbg !41
  %453 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %250, !dbg !41
  %454 = insertelement <1 x i8> poison, i8 %422, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %453, <1 x i8> %454, i1 true) #2, !dbg !41
  %455 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !41
  %456 = insertelement <1 x i8> poison, i8 %424, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %455, <1 x i8> %456, i1 true) #2, !dbg !41
  %457 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %254, !dbg !41
  %458 = insertelement <1 x i8> poison, i8 %426, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %457, <1 x i8> %458, i1 true) #2, !dbg !41
  %459 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !41
  %460 = insertelement <1 x i8> poison, i8 %428, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %459, <1 x i8> %460, i1 true) #2, !dbg !41
  %461 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %258, !dbg !41
  %462 = insertelement <1 x i8> poison, i8 %430, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %461, <1 x i8> %462, i1 true) #2, !dbg !41
  %463 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %260, !dbg !41
  %464 = insertelement <1 x i8> poison, i8 %432, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %463, <1 x i8> %464, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %465 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %226, !dbg !41
  %466 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !41
  %467 = bitcast <4 x i32> %466 to <128 x i1>, !dbg !41
  %468 = extractelement <128 x i1> %467, i64 24, !dbg !41
  %469 = extractelement <128 x i1> %467, i64 56, !dbg !41
  %470 = extractelement <128 x i1> %467, i64 88, !dbg !41
  %471 = extractelement <128 x i1> %467, i64 120, !dbg !41
  %472 = bitcast <4 x i32> %466 to <16 x i8>, !dbg !41
  %473 = extractelement <16 x i8> %472, i64 0, !dbg !41
  %474 = and i8 %473, 1, !dbg !41
  %475 = shufflevector <16 x i8> %472, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !41
  %476 = and <2 x i8> %475, splat (i8 1), !dbg !41
  %477 = zext i1 %468 to i8, !dbg !41
  %478 = extractelement <16 x i8> %472, i64 4, !dbg !41
  %479 = and i8 %478, 1, !dbg !41
  %480 = shufflevector <16 x i8> %472, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !41
  %481 = and <2 x i8> %480, splat (i8 1), !dbg !41
  %482 = zext i1 %469 to i8, !dbg !41
  %483 = extractelement <16 x i8> %472, i64 8, !dbg !41
  %484 = and i8 %483, 1, !dbg !41
  %485 = shufflevector <16 x i8> %472, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !41
  %486 = and <2 x i8> %485, splat (i8 1), !dbg !41
  %487 = zext i1 %470 to i8, !dbg !41
  %488 = extractelement <16 x i8> %472, i64 12, !dbg !41
  %489 = and i8 %488, 1, !dbg !41
  %490 = shufflevector <16 x i8> %472, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !41
  %491 = and <2 x i8> %490, splat (i8 1), !dbg !41
  %492 = zext i1 %471 to i8, !dbg !41
  %493 = insertelement <4 x i8> poison, i8 %474, i64 0, !dbg !41
  %494 = shufflevector <2 x i8> %476, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %495 = shufflevector <4 x i8> %493, <4 x i8> %494, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !41
  %496 = insertelement <4 x i8> %495, i8 %477, i64 3, !dbg !41
  %497 = bitcast <4 x i8> %496 to i32, !dbg !41
  %498 = insertelement <4 x i8> poison, i8 %479, i64 0, !dbg !41
  %499 = shufflevector <2 x i8> %481, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %500 = shufflevector <4 x i8> %498, <4 x i8> %499, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !41
  %501 = insertelement <4 x i8> %500, i8 %482, i64 3, !dbg !41
  %502 = bitcast <4 x i8> %501 to i32, !dbg !41
  %503 = insertelement <4 x i8> poison, i8 %484, i64 0, !dbg !41
  %504 = shufflevector <2 x i8> %486, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %505 = shufflevector <4 x i8> %503, <4 x i8> %504, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !41
  %506 = insertelement <4 x i8> %505, i8 %487, i64 3, !dbg !41
  %507 = bitcast <4 x i8> %506 to i32, !dbg !41
  %508 = insertelement <4 x i8> poison, i8 %489, i64 0, !dbg !41
  %509 = shufflevector <2 x i8> %491, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %510 = shufflevector <4 x i8> %508, <4 x i8> %509, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !41
  %511 = insertelement <4 x i8> %510, i8 %492, i64 3, !dbg !41
  %512 = bitcast <4 x i8> %511 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %497, i32 %502, i32 %507, i32 %512, ptr addrspace(1) %400, i1 %35) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cogtftrspe4nw2qadlcdlgqvlbjkemhxle5wzshwsyphtvbhsgft.py", directory: "inductor_cache/og")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_10", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 39, column: 33, scope: !7)
!37 = !DILocation(line: 39, column: 30, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 44, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 55, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
