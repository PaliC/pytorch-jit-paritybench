; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %18 = insertelement <2 x i32> %17, i32 %15, i64 1, !dbg !14
  %19 = sdiv <2 x i32> %18, splat (i32 32768), !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 124), !dbg !15
  %21 = srem i32 %15, 32768, !dbg !16
  %22 = srem i32 %16, 32768, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen, 4063232, !dbg !17
  %.frozen51 = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen51, 4063232, !dbg !17
  %25 = extractelement <2 x i32> %20, i64 1, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = extractelement <2 x i32> %20, i64 0, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %77 = icmp slt <2 x i32> %20, splat (i32 112), !dbg !27
  %78 = mul i32 %23, 4063232, !dbg !28
  %srem.decomposed = sub i32 %.frozen, %78, !dbg !28
  %79 = mul i32 %24, 4063232, !dbg !28
  %srem1.decomposed = sub i32 %.frozen51, %79, !dbg !28
  %80 = mul nsw i32 %23, 3670016, !dbg !29
  %81 = mul nsw i32 %24, 3670016, !dbg !29
  %82 = add nsw i32 %80, %srem.decomposed, !dbg !30
  %83 = add nsw i32 %81, %srem1.decomposed, !dbg !30
  %84 = sext i32 %82 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !31
  %86 = sext i32 %83 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !31
  %88 = extractelement <2 x i1> %77, i64 1, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !32
  %90 = extractelement <2 x i1> %77, i64 0, !dbg !32
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #3, !dbg !32
  %92 = icmp sgt i32 %25, 111, !dbg !33
  %93 = icmp sgt i32 %28, 111, !dbg !33
  %94 = shl nsw i32 %25, 15, !dbg !18
  %95 = shl nsw i32 %28, 15, !dbg !18
  %96 = mul nsw i32 %23, 393216, !dbg !34
  %97 = mul nsw i32 %24, 393216, !dbg !34
  %98 = add nsw i32 %21, -3670016, !dbg !18
  %99 = add nsw i32 %98, %96, !dbg !35
  %100 = add nsw i32 %99, %94, !dbg !36
  %101 = add nsw i32 %22, -3670016, !dbg !18
  %102 = add nsw i32 %101, %97, !dbg !35
  %103 = add nsw i32 %102, %95, !dbg !36
  %104 = sext i32 %100 to i64, !dbg !37
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !37
  %106 = sext i32 %103 to i64, !dbg !37
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !37
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #3, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !38
  %110 = fadd float %42, 0x3EE4F8B580000000, !dbg !39
  %111 = fadd float %44, 0x3EE4F8B580000000, !dbg !39
  %112 = fadd float %46, 0x3EE4F8B580000000, !dbg !39
  %113 = fadd float %48, 0x3EE4F8B580000000, !dbg !39
  %114 = fadd float %50, 0x3EE4F8B580000000, !dbg !39
  %115 = fadd float %52, 0x3EE4F8B580000000, !dbg !39
  %116 = fadd float %54, 0x3EE4F8B580000000, !dbg !39
  %117 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %118, 0, !dbg !40
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %119, 0, !dbg !40
  br i1 %.not.i, label %125, label %120, !dbg !40

120:                                              ; preds = %9
  br i1 %.not1.i, label %123, label %121, !dbg !40

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

125:                                              ; preds = %9
  br i1 %.not1.i, label %128, label %126, !dbg !40

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %121, %123, %126, %128
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !40
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i9 = icmp eq i32 %130, 0, !dbg !40
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i12 = icmp eq i32 %131, 0, !dbg !40
  br i1 %.not.i9, label %137, label %132, !dbg !40

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %135, label %133, !dbg !40

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

137:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %140, label %138, !dbg !40

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit13, !dbg !40

__nv_sqrtf.exit13:                                ; preds = %133, %135, %138, %140
  %.0.i11 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !40
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i14 = icmp eq i32 %142, 0, !dbg !40
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i17 = icmp eq i32 %143, 0, !dbg !40
  br i1 %.not.i14, label %149, label %144, !dbg !40

144:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %147, label %145, !dbg !40

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

149:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %152, label %150, !dbg !40

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit18, !dbg !40

__nv_sqrtf.exit18:                                ; preds = %145, %147, %150, %152
  %.0.i16 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !40
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i19 = icmp eq i32 %154, 0, !dbg !40
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i22 = icmp eq i32 %155, 0, !dbg !40
  br i1 %.not.i19, label %161, label %156, !dbg !40

156:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %159, label %157, !dbg !40

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit23, !dbg !40

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit23, !dbg !40

161:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %164, label %162, !dbg !40

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit23, !dbg !40

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit23, !dbg !40

__nv_sqrtf.exit23:                                ; preds = %157, %159, %162, %164
  %.0.i21 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !40
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i24 = icmp eq i32 %166, 0, !dbg !40
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i27 = icmp eq i32 %167, 0, !dbg !40
  br i1 %.not.i24, label %173, label %168, !dbg !40

168:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %171, label %169, !dbg !40

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit28, !dbg !40

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit28, !dbg !40

173:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %176, label %174, !dbg !40

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit28, !dbg !40

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit28, !dbg !40

__nv_sqrtf.exit28:                                ; preds = %169, %171, %174, %176
  %.0.i26 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !40
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i29 = icmp eq i32 %178, 0, !dbg !40
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i32 = icmp eq i32 %179, 0, !dbg !40
  br i1 %.not.i29, label %185, label %180, !dbg !40

180:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %183, label %181, !dbg !40

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit33, !dbg !40

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit33, !dbg !40

185:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %188, label %186, !dbg !40

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit33, !dbg !40

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit33, !dbg !40

__nv_sqrtf.exit33:                                ; preds = %181, %183, %186, %188
  %.0.i31 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !40
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i34 = icmp eq i32 %190, 0, !dbg !40
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i37 = icmp eq i32 %191, 0, !dbg !40
  br i1 %.not.i34, label %197, label %192, !dbg !40

192:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %195, label %193, !dbg !40

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

197:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %200, label %198, !dbg !40

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

__nv_sqrtf.exit38:                                ; preds = %193, %195, %198, %200
  %.0.i36 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !40
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i39 = icmp eq i32 %202, 0, !dbg !40
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i42 = icmp eq i32 %203, 0, !dbg !40
  br i1 %.not.i39, label %209, label %204, !dbg !40

204:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %207, label %205, !dbg !40

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

209:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %212, label %210, !dbg !40

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

__nv_sqrtf.exit43:                                ; preds = %205, %207, %210, %212
  %.0.i41 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !40
  %214 = shufflevector <2 x i1> %77, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %215 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %216 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !38
  %217 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !20
  %218 = insertelement <8 x i32> %217, i32 %37, i64 1, !dbg !20
  %219 = insertelement <8 x i32> %218, i32 %36, i64 2, !dbg !20
  %220 = insertelement <8 x i32> %219, i32 %35, i64 3, !dbg !20
  %221 = insertelement <8 x i32> %220, i32 %34, i64 4, !dbg !20
  %222 = insertelement <8 x i32> %221, i32 %33, i64 5, !dbg !20
  %223 = insertelement <8 x i32> %222, i32 %32, i64 6, !dbg !20
  %224 = insertelement <8 x i32> %223, i32 %31, i64 7, !dbg !20
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !20
  %226 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !38
  %228 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %229 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !38
  %230 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %231 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !38
  %232 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !32
  %233 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !38
  %234 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !32
  %235 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !38
  %236 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !32
  %237 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !38
  %238 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !32
  %239 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !38
  %240 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !26
  %241 = insertelement <8 x i32> %240, i32 %75, i64 1, !dbg !26
  %242 = insertelement <8 x i32> %241, i32 %74, i64 2, !dbg !26
  %243 = insertelement <8 x i32> %242, i32 %73, i64 3, !dbg !26
  %244 = insertelement <8 x i32> %243, i32 %72, i64 4, !dbg !26
  %245 = insertelement <8 x i32> %244, i32 %71, i64 5, !dbg !26
  %246 = insertelement <8 x i32> %245, i32 %70, i64 6, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %69, i64 7, !dbg !26
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !26
  %249 = insertelement <8 x i32> poison, i32 %66, i64 0, !dbg !24
  %250 = insertelement <8 x i32> %249, i32 %65, i64 1, !dbg !24
  %251 = insertelement <8 x i32> %250, i32 %64, i64 2, !dbg !24
  %252 = insertelement <8 x i32> %251, i32 %63, i64 3, !dbg !24
  %253 = insertelement <8 x i32> %252, i32 %62, i64 4, !dbg !24
  %254 = insertelement <8 x i32> %253, i32 %61, i64 5, !dbg !24
  %255 = insertelement <8 x i32> %254, i32 %60, i64 6, !dbg !24
  %256 = insertelement <8 x i32> %255, i32 %59, i64 7, !dbg !24
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !24
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !41
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !41
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !41
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !41
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !41
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !41
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #3, !dbg !41
  %266 = insertelement <8 x i32> poison, i32 %215, i64 0, !dbg !42
  %267 = insertelement <8 x i32> %266, i32 %226, i64 1, !dbg !42
  %268 = insertelement <8 x i32> %267, i32 %228, i64 2, !dbg !42
  %269 = insertelement <8 x i32> %268, i32 %230, i64 3, !dbg !42
  %270 = insertelement <8 x i32> %269, i32 %232, i64 4, !dbg !42
  %271 = insertelement <8 x i32> %270, i32 %234, i64 5, !dbg !42
  %272 = insertelement <8 x i32> %271, i32 %236, i64 6, !dbg !42
  %273 = insertelement <8 x i32> %272, i32 %238, i64 7, !dbg !42
  %274 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !42
  %275 = insertelement <8 x i32> %274, i32 %227, i64 1, !dbg !42
  %276 = insertelement <8 x i32> %275, i32 %229, i64 2, !dbg !42
  %277 = insertelement <8 x i32> %276, i32 %231, i64 3, !dbg !42
  %278 = insertelement <8 x i32> %277, i32 %233, i64 4, !dbg !42
  %279 = insertelement <8 x i32> %278, i32 %235, i64 5, !dbg !42
  %280 = insertelement <8 x i32> %279, i32 %237, i64 6, !dbg !42
  %281 = insertelement <8 x i32> %280, i32 %239, i64 7, !dbg !42
  %282 = select <8 x i1> %214, <8 x i32> %273, <8 x i32> %281, !dbg !42
  %283 = bitcast <8 x i32> %282 to <8 x float>, !dbg !42
  %284 = fsub <8 x float> %283, %225, !dbg !43
  %285 = insertelement <8 x float> poison, float %265, i64 0, !dbg !44
  %286 = insertelement <8 x float> %285, float %264, i64 1, !dbg !44
  %287 = insertelement <8 x float> %286, float %263, i64 2, !dbg !44
  %288 = insertelement <8 x float> %287, float %262, i64 3, !dbg !44
  %289 = insertelement <8 x float> %288, float %261, i64 4, !dbg !44
  %290 = insertelement <8 x float> %289, float %260, i64 5, !dbg !44
  %291 = insertelement <8 x float> %290, float %259, i64 6, !dbg !44
  %292 = insertelement <8 x float> %291, float %258, i64 7, !dbg !44
  %293 = fmul <8 x float> %284, %292, !dbg !44
  %294 = fmul <8 x float> %293, %257, !dbg !45
  %295 = fadd <8 x float> %294, %248, !dbg !46
  %296 = fcmp olt <8 x float> %295, zeroinitializer, !dbg !47
  %297 = extractelement <8 x i1> %296, i64 7, !dbg !51
  %298 = extractelement <8 x i1> %296, i64 6, !dbg !51
  %299 = extractelement <8 x i1> %296, i64 5, !dbg !51
  %300 = extractelement <8 x i1> %296, i64 4, !dbg !51
  %301 = extractelement <8 x i1> %296, i64 3, !dbg !51
  %302 = extractelement <8 x i1> %296, i64 2, !dbg !51
  %303 = extractelement <8 x i1> %296, i64 1, !dbg !51
  %304 = extractelement <8 x i1> %296, i64 0, !dbg !51
  %305 = sext i32 %15 to i64, !dbg !52
  %306 = getelementptr float, ptr addrspace(1) %6, i64 %305, !dbg !52
  %307 = sext i32 %16 to i64, !dbg !52
  %308 = getelementptr float, ptr addrspace(1) %6, i64 %307, !dbg !52
  %309 = extractelement <8 x i32> %282, i64 4, !dbg !53
  %310 = extractelement <8 x i32> %282, i64 5, !dbg !53
  %311 = extractelement <8 x i32> %282, i64 6, !dbg !53
  %312 = extractelement <8 x i32> %282, i64 7, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %311, i32 %310, i32 %309, ptr addrspace(1) %306, i1 true) #3, !dbg !53
  %313 = extractelement <8 x i32> %282, i64 0, !dbg !53
  %314 = extractelement <8 x i32> %282, i64 1, !dbg !53
  %315 = extractelement <8 x i32> %282, i64 2, !dbg !53
  %316 = extractelement <8 x i32> %282, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %315, i32 %314, i32 %313, ptr addrspace(1) %308, i1 true) #3, !dbg !53
  %317 = getelementptr float, ptr addrspace(1) %7, i64 %305, !dbg !54
  %318 = getelementptr float, ptr addrspace(1) %7, i64 %307, !dbg !54
  %bc = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %319 = extractelement <8 x i32> %bc, i64 7, !dbg !55
  %320 = select i1 %297, i32 0, i32 %319, !dbg !51
  %bc44 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %321 = extractelement <8 x i32> %bc44, i64 6, !dbg !55
  %322 = select i1 %298, i32 0, i32 %321, !dbg !51
  %bc45 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %323 = extractelement <8 x i32> %bc45, i64 5, !dbg !55
  %324 = select i1 %299, i32 0, i32 %323, !dbg !51
  %bc46 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %325 = extractelement <8 x i32> %bc46, i64 4, !dbg !55
  %326 = select i1 %300, i32 0, i32 %325, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %322, i32 %324, i32 %326, ptr addrspace(1) %317, i1 true) #3, !dbg !55
  %bc47 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %327 = extractelement <8 x i32> %bc47, i64 3, !dbg !55
  %328 = select i1 %301, i32 0, i32 %327, !dbg !51
  %bc48 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %329 = extractelement <8 x i32> %bc48, i64 2, !dbg !55
  %330 = select i1 %302, i32 0, i32 %329, !dbg !51
  %bc49 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %331 = extractelement <8 x i32> %bc49, i64 1, !dbg !55
  %332 = select i1 %303, i32 0, i32 %331, !dbg !51
  %bc50 = bitcast <8 x float> %295 to <8 x i32>, !dbg !55
  %333 = extractelement <8 x i32> %bc50, i64 0, !dbg !55
  %334 = select i1 %304, i32 0, i32 %333, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %328, i32 %330, i32 %332, i32 %334, ptr addrspace(1) %318, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6s4lnbwyyflfwej3ypkl3soczhooldwoucwa3mpm6il3zlr7kjx.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 41, column: 42, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 56, scope: !7)
!30 = !DILocation(line: 37, column: 48, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 64, scope: !7)
!35 = !DILocation(line: 41, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 57, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 69, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 27, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 33, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 55, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 56, column: 25, scope: !7)
!53 = !DILocation(line: 56, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 37, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
