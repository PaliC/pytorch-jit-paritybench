; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_40(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %12, !dbg !17
  %22 = or disjoint i32 %20, %9, !dbg !17
  %23 = or disjoint i32 %20, %10, !dbg !17
  %24 = icmp slt i32 %21, 768, !dbg !18
  %25 = icmp slt i32 %22, 768, !dbg !18
  %26 = icmp slt i32 %23, 768, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 8, !dbg !19
  %28 = mul i32 %27, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen15 = freeze i32 %14, !dbg !19
  %29 = sdiv i32 %.frozen15, 8, !dbg !19
  %30 = mul i32 %29, 8, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %30, !dbg !20
  %31 = srem i32 %27, 8, !dbg !21
  %32 = srem i32 %29, 8, !dbg !21
  %33 = sdiv i32 %13, 64, !dbg !22
  %34 = sdiv i32 %14, 64, !dbg !22
  %.frozen17 = freeze i32 %15, !dbg !22
  %35 = sdiv i32 %.frozen17, 64, !dbg !22
  %36 = mul i32 %35, 64, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %36, !dbg !23
  %37 = mul nsw i32 %.decomposed, 1536, !dbg !24
  %38 = mul nsw i32 %.decomposed16, 1536, !dbg !24
  %39 = mul nsw i32 %31, 26112, !dbg !25
  %40 = mul nsw i32 %32, 26112, !dbg !25
  %41 = mul i32 %33, 221952, !dbg !26
  %42 = mul i32 %34, 221952, !dbg !26
  %43 = add i32 %41, %37, !dbg !27
  %44 = add i32 %43, %21, !dbg !28
  %45 = add i32 %44, %39, !dbg !29
  %46 = add i32 %42, %38, !dbg !27
  %47 = add i32 %46, %21, !dbg !28
  %48 = add i32 %47, %40, !dbg !29
  %49 = sext i32 %45 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = sext i32 %48 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = and i1 %16, %24, !dbg !31
  %54 = and i1 %17, %24, !dbg !31
  %55 = and i1 %18, %25, !dbg !31
  %56 = and i1 %18, %26, !dbg !31
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !32
  %62 = bitcast i32 %58 to float, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #2, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %71 = bitcast i32 %67 to float, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = add i32 %21, 768, !dbg !33
  %76 = add i32 %43, %75, !dbg !34
  %77 = add i32 %76, %39, !dbg !35
  %78 = add i32 %46, %75, !dbg !34
  %79 = add i32 %78, %40, !dbg !35
  %80 = sext i32 %77 to i64, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !36
  %82 = sext i32 %79 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !36
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %53) #2, !dbg !37
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !37
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !37
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !37
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !37
  %89 = bitcast i32 %85 to float, !dbg !37
  %90 = bitcast i32 %86 to float, !dbg !37
  %91 = bitcast i32 %87 to float, !dbg !37
  %92 = bitcast i32 %88 to float, !dbg !37
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %54) #2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !37
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !37
  %98 = bitcast i32 %94 to float, !dbg !37
  %99 = bitcast i32 %95 to float, !dbg !37
  %100 = bitcast i32 %96 to float, !dbg !37
  %101 = bitcast i32 %97 to float, !dbg !37
  %102 = add i32 %21, 1536, !dbg !38
  %103 = add i32 %43, %102, !dbg !39
  %104 = add i32 %103, %39, !dbg !40
  %105 = add i32 %46, %102, !dbg !39
  %106 = add i32 %105, %40, !dbg !40
  %107 = sext i32 %104 to i64, !dbg !41
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !41
  %109 = sext i32 %106 to i64, !dbg !41
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !41
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %53) #2, !dbg !42
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !42
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !42
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !42
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !42
  %116 = bitcast i32 %112 to float, !dbg !42
  %117 = bitcast i32 %113 to float, !dbg !42
  %118 = bitcast i32 %114 to float, !dbg !42
  %119 = bitcast i32 %115 to float, !dbg !42
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %54) #2, !dbg !42
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !42
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !42
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !42
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !42
  %125 = bitcast i32 %121 to float, !dbg !42
  %126 = bitcast i32 %122 to float, !dbg !42
  %127 = bitcast i32 %123 to float, !dbg !42
  %128 = bitcast i32 %124 to float, !dbg !42
  %129 = add i32 %21, 13056, !dbg !43
  %130 = add i32 %43, %129, !dbg !44
  %131 = add i32 %130, %39, !dbg !45
  %132 = add i32 %46, %129, !dbg !44
  %133 = add i32 %132, %40, !dbg !45
  %134 = sext i32 %131 to i64, !dbg !46
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !46
  %136 = sext i32 %133 to i64, !dbg !46
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !46
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %53) #2, !dbg !47
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !47
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !47
  %143 = bitcast i32 %139 to float, !dbg !47
  %144 = bitcast i32 %140 to float, !dbg !47
  %145 = bitcast i32 %141 to float, !dbg !47
  %146 = bitcast i32 %142 to float, !dbg !47
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %54) #2, !dbg !47
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !47
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !47
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !47
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !47
  %152 = bitcast i32 %148 to float, !dbg !47
  %153 = bitcast i32 %149 to float, !dbg !47
  %154 = bitcast i32 %150 to float, !dbg !47
  %155 = bitcast i32 %151 to float, !dbg !47
  %156 = add i32 %21, 13824, !dbg !48
  %157 = add i32 %43, %156, !dbg !49
  %158 = add i32 %157, %39, !dbg !50
  %159 = add i32 %46, %156, !dbg !49
  %160 = add i32 %159, %40, !dbg !50
  %161 = sext i32 %158 to i64, !dbg !51
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !51
  %163 = sext i32 %160 to i64, !dbg !51
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !51
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %53) #2, !dbg !52
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !52
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !52
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !52
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !52
  %170 = bitcast i32 %166 to float, !dbg !52
  %171 = bitcast i32 %167 to float, !dbg !52
  %172 = bitcast i32 %168 to float, !dbg !52
  %173 = bitcast i32 %169 to float, !dbg !52
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %54) #2, !dbg !52
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !52
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !52
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !52
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !52
  %179 = bitcast i32 %175 to float, !dbg !52
  %180 = bitcast i32 %176 to float, !dbg !52
  %181 = bitcast i32 %177 to float, !dbg !52
  %182 = bitcast i32 %178 to float, !dbg !52
  %183 = add i32 %21, 14592, !dbg !53
  %184 = add i32 %43, %183, !dbg !54
  %185 = add i32 %184, %39, !dbg !55
  %186 = add i32 %46, %183, !dbg !54
  %187 = add i32 %186, %40, !dbg !55
  %188 = sext i32 %185 to i64, !dbg !56
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !56
  %190 = sext i32 %187 to i64, !dbg !56
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !56
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %53) #2, !dbg !57
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !57
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !57
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !57
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !57
  %197 = bitcast i32 %193 to float, !dbg !57
  %198 = bitcast i32 %194 to float, !dbg !57
  %199 = bitcast i32 %195 to float, !dbg !57
  %200 = bitcast i32 %196 to float, !dbg !57
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %54) #2, !dbg !57
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !57
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !57
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !57
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !57
  %206 = bitcast i32 %202 to float, !dbg !57
  %207 = bitcast i32 %203 to float, !dbg !57
  %208 = bitcast i32 %204 to float, !dbg !57
  %209 = bitcast i32 %205 to float, !dbg !57
  %210 = add i32 %21, 26112, !dbg !58
  %211 = add i32 %43, %210, !dbg !59
  %212 = add i32 %211, %39, !dbg !60
  %213 = add i32 %46, %210, !dbg !59
  %214 = add i32 %213, %40, !dbg !60
  %215 = sext i32 %212 to i64, !dbg !61
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !61
  %217 = sext i32 %214 to i64, !dbg !61
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !61
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %53) #2, !dbg !62
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !62
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !62
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !62
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !62
  %224 = bitcast i32 %220 to float, !dbg !62
  %225 = bitcast i32 %221 to float, !dbg !62
  %226 = bitcast i32 %222 to float, !dbg !62
  %227 = bitcast i32 %223 to float, !dbg !62
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %54) #2, !dbg !62
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !62
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !62
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !62
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !62
  %233 = bitcast i32 %229 to float, !dbg !62
  %234 = bitcast i32 %230 to float, !dbg !62
  %235 = bitcast i32 %231 to float, !dbg !62
  %236 = bitcast i32 %232 to float, !dbg !62
  %237 = add i32 %21, 26880, !dbg !63
  %238 = add i32 %43, %237, !dbg !64
  %239 = add i32 %238, %39, !dbg !65
  %240 = add i32 %46, %237, !dbg !64
  %241 = add i32 %240, %40, !dbg !65
  %242 = sext i32 %239 to i64, !dbg !66
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !66
  %244 = sext i32 %241 to i64, !dbg !66
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !66
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 %53) #2, !dbg !67
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !67
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !67
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !67
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !67
  %251 = bitcast i32 %247 to float, !dbg !67
  %252 = bitcast i32 %248 to float, !dbg !67
  %253 = bitcast i32 %249 to float, !dbg !67
  %254 = bitcast i32 %250 to float, !dbg !67
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 %54) #2, !dbg !67
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !67
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !67
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !67
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !67
  %260 = bitcast i32 %256 to float, !dbg !67
  %261 = bitcast i32 %257 to float, !dbg !67
  %262 = bitcast i32 %258 to float, !dbg !67
  %263 = bitcast i32 %259 to float, !dbg !67
  %264 = add i32 %21, 27648, !dbg !68
  %265 = add i32 %43, %264, !dbg !69
  %266 = add i32 %265, %39, !dbg !70
  %267 = add i32 %46, %264, !dbg !69
  %268 = add i32 %267, %40, !dbg !70
  %269 = sext i32 %266 to i64, !dbg !71
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !71
  %271 = sext i32 %268 to i64, !dbg !71
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !71
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %53) #2, !dbg !72
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !72
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !72
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !72
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !72
  %278 = bitcast i32 %274 to float, !dbg !72
  %279 = bitcast i32 %275 to float, !dbg !72
  %280 = bitcast i32 %276 to float, !dbg !72
  %281 = bitcast i32 %277 to float, !dbg !72
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %54) #2, !dbg !72
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !72
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !72
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !72
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !72
  %287 = bitcast i32 %283 to float, !dbg !72
  %288 = bitcast i32 %284 to float, !dbg !72
  %289 = bitcast i32 %285 to float, !dbg !72
  %290 = bitcast i32 %286 to float, !dbg !72
  %291 = fcmp ogt float %89, %62, !dbg !73
  %292 = fcmp ogt float %90, %63, !dbg !73
  %293 = fcmp ogt float %91, %64, !dbg !73
  %294 = fcmp ogt float %92, %65, !dbg !73
  %295 = fcmp ogt float %98, %71, !dbg !73
  %296 = fcmp ogt float %99, %72, !dbg !73
  %297 = fcmp ogt float %100, %73, !dbg !73
  %298 = fcmp ogt float %101, %74, !dbg !73
  %299 = fcmp uno float %89, 0.000000e+00, !dbg !77
  %300 = fcmp uno float %90, 0.000000e+00, !dbg !77
  %301 = fcmp uno float %91, 0.000000e+00, !dbg !77
  %302 = fcmp uno float %92, 0.000000e+00, !dbg !77
  %303 = fcmp uno float %98, 0.000000e+00, !dbg !77
  %304 = fcmp uno float %99, 0.000000e+00, !dbg !77
  %305 = fcmp uno float %100, 0.000000e+00, !dbg !77
  %306 = fcmp uno float %101, 0.000000e+00, !dbg !77
  %307 = or i1 %291, %299, !dbg !78
  %308 = or i1 %292, %300, !dbg !78
  %309 = or i1 %293, %301, !dbg !78
  %310 = or i1 %294, %302, !dbg !78
  %311 = or i1 %295, %303, !dbg !78
  %312 = or i1 %296, %304, !dbg !78
  %313 = or i1 %297, %305, !dbg !78
  %314 = or i1 %298, %306, !dbg !78
  %315 = select i1 %307, float %89, float %62, !dbg !79
  %316 = select i1 %308, float %90, float %63, !dbg !79
  %317 = select i1 %309, float %91, float %64, !dbg !79
  %318 = select i1 %310, float %92, float %65, !dbg !79
  %319 = select i1 %311, float %98, float %71, !dbg !79
  %320 = select i1 %312, float %99, float %72, !dbg !79
  %321 = select i1 %313, float %100, float %73, !dbg !79
  %322 = select i1 %314, float %101, float %74, !dbg !79
  %323 = fcmp olt float %315, %116, !dbg !80
  %324 = fcmp olt float %316, %117, !dbg !80
  %325 = fcmp olt float %317, %118, !dbg !80
  %326 = fcmp olt float %318, %119, !dbg !80
  %327 = fcmp olt float %319, %125, !dbg !80
  %328 = fcmp olt float %320, %126, !dbg !80
  %329 = fcmp olt float %321, %127, !dbg !80
  %330 = fcmp olt float %322, %128, !dbg !80
  %331 = fcmp uno float %116, 0.000000e+00, !dbg !82
  %332 = fcmp uno float %117, 0.000000e+00, !dbg !82
  %333 = fcmp uno float %118, 0.000000e+00, !dbg !82
  %334 = fcmp uno float %119, 0.000000e+00, !dbg !82
  %335 = fcmp uno float %125, 0.000000e+00, !dbg !82
  %336 = fcmp uno float %126, 0.000000e+00, !dbg !82
  %337 = fcmp uno float %127, 0.000000e+00, !dbg !82
  %338 = fcmp uno float %128, 0.000000e+00, !dbg !82
  %339 = or i1 %331, %323, !dbg !83
  %340 = or i1 %332, %324, !dbg !83
  %341 = or i1 %333, %325, !dbg !83
  %342 = or i1 %334, %326, !dbg !83
  %343 = or i1 %335, %327, !dbg !83
  %344 = or i1 %336, %328, !dbg !83
  %345 = or i1 %337, %329, !dbg !83
  %346 = or i1 %338, %330, !dbg !83
  %347 = select i1 %339, float %116, float %315, !dbg !84
  %348 = select i1 %340, float %117, float %316, !dbg !84
  %349 = select i1 %341, float %118, float %317, !dbg !84
  %350 = select i1 %342, float %119, float %318, !dbg !84
  %351 = select i1 %343, float %125, float %319, !dbg !84
  %352 = select i1 %344, float %126, float %320, !dbg !84
  %353 = select i1 %345, float %127, float %321, !dbg !84
  %354 = select i1 %346, float %128, float %322, !dbg !84
  %355 = fcmp olt float %347, %143, !dbg !85
  %356 = fcmp olt float %348, %144, !dbg !85
  %357 = fcmp olt float %349, %145, !dbg !85
  %358 = fcmp olt float %350, %146, !dbg !85
  %359 = fcmp olt float %351, %152, !dbg !85
  %360 = fcmp olt float %352, %153, !dbg !85
  %361 = fcmp olt float %353, %154, !dbg !85
  %362 = fcmp olt float %354, %155, !dbg !85
  %363 = fcmp uno float %143, 0.000000e+00, !dbg !87
  %364 = fcmp uno float %144, 0.000000e+00, !dbg !87
  %365 = fcmp uno float %145, 0.000000e+00, !dbg !87
  %366 = fcmp uno float %146, 0.000000e+00, !dbg !87
  %367 = fcmp uno float %152, 0.000000e+00, !dbg !87
  %368 = fcmp uno float %153, 0.000000e+00, !dbg !87
  %369 = fcmp uno float %154, 0.000000e+00, !dbg !87
  %370 = fcmp uno float %155, 0.000000e+00, !dbg !87
  %371 = or i1 %363, %355, !dbg !88
  %372 = or i1 %364, %356, !dbg !88
  %373 = or i1 %365, %357, !dbg !88
  %374 = or i1 %366, %358, !dbg !88
  %375 = or i1 %367, %359, !dbg !88
  %376 = or i1 %368, %360, !dbg !88
  %377 = or i1 %369, %361, !dbg !88
  %378 = or i1 %370, %362, !dbg !88
  %379 = select i1 %371, float %143, float %347, !dbg !89
  %380 = select i1 %372, float %144, float %348, !dbg !89
  %381 = select i1 %373, float %145, float %349, !dbg !89
  %382 = select i1 %374, float %146, float %350, !dbg !89
  %383 = select i1 %375, float %152, float %351, !dbg !89
  %384 = select i1 %376, float %153, float %352, !dbg !89
  %385 = select i1 %377, float %154, float %353, !dbg !89
  %386 = select i1 %378, float %155, float %354, !dbg !89
  %387 = fcmp olt float %379, %170, !dbg !90
  %388 = fcmp olt float %380, %171, !dbg !90
  %389 = fcmp olt float %381, %172, !dbg !90
  %390 = fcmp olt float %382, %173, !dbg !90
  %391 = fcmp olt float %383, %179, !dbg !90
  %392 = fcmp olt float %384, %180, !dbg !90
  %393 = fcmp olt float %385, %181, !dbg !90
  %394 = fcmp olt float %386, %182, !dbg !90
  %395 = fcmp uno float %170, 0.000000e+00, !dbg !92
  %396 = fcmp uno float %171, 0.000000e+00, !dbg !92
  %397 = fcmp uno float %172, 0.000000e+00, !dbg !92
  %398 = fcmp uno float %173, 0.000000e+00, !dbg !92
  %399 = fcmp uno float %179, 0.000000e+00, !dbg !92
  %400 = fcmp uno float %180, 0.000000e+00, !dbg !92
  %401 = fcmp uno float %181, 0.000000e+00, !dbg !92
  %402 = fcmp uno float %182, 0.000000e+00, !dbg !92
  %403 = or i1 %395, %387, !dbg !93
  %404 = or i1 %396, %388, !dbg !93
  %405 = or i1 %397, %389, !dbg !93
  %406 = or i1 %398, %390, !dbg !93
  %407 = or i1 %399, %391, !dbg !93
  %408 = or i1 %400, %392, !dbg !93
  %409 = or i1 %401, %393, !dbg !93
  %410 = or i1 %402, %394, !dbg !93
  %411 = select i1 %403, float %170, float %379, !dbg !94
  %412 = select i1 %404, float %171, float %380, !dbg !94
  %413 = select i1 %405, float %172, float %381, !dbg !94
  %414 = select i1 %406, float %173, float %382, !dbg !94
  %415 = select i1 %407, float %179, float %383, !dbg !94
  %416 = select i1 %408, float %180, float %384, !dbg !94
  %417 = select i1 %409, float %181, float %385, !dbg !94
  %418 = select i1 %410, float %182, float %386, !dbg !94
  %419 = fcmp olt float %411, %197, !dbg !95
  %420 = fcmp olt float %412, %198, !dbg !95
  %421 = fcmp olt float %413, %199, !dbg !95
  %422 = fcmp olt float %414, %200, !dbg !95
  %423 = fcmp olt float %415, %206, !dbg !95
  %424 = fcmp olt float %416, %207, !dbg !95
  %425 = fcmp olt float %417, %208, !dbg !95
  %426 = fcmp olt float %418, %209, !dbg !95
  %427 = fcmp uno float %197, 0.000000e+00, !dbg !97
  %428 = fcmp uno float %198, 0.000000e+00, !dbg !97
  %429 = fcmp uno float %199, 0.000000e+00, !dbg !97
  %430 = fcmp uno float %200, 0.000000e+00, !dbg !97
  %431 = fcmp uno float %206, 0.000000e+00, !dbg !97
  %432 = fcmp uno float %207, 0.000000e+00, !dbg !97
  %433 = fcmp uno float %208, 0.000000e+00, !dbg !97
  %434 = fcmp uno float %209, 0.000000e+00, !dbg !97
  %435 = or i1 %427, %419, !dbg !98
  %436 = or i1 %428, %420, !dbg !98
  %437 = or i1 %429, %421, !dbg !98
  %438 = or i1 %430, %422, !dbg !98
  %439 = or i1 %431, %423, !dbg !98
  %440 = or i1 %432, %424, !dbg !98
  %441 = or i1 %433, %425, !dbg !98
  %442 = or i1 %434, %426, !dbg !98
  %443 = select i1 %435, float %197, float %411, !dbg !99
  %444 = select i1 %436, float %198, float %412, !dbg !99
  %445 = select i1 %437, float %199, float %413, !dbg !99
  %446 = select i1 %438, float %200, float %414, !dbg !99
  %447 = select i1 %439, float %206, float %415, !dbg !99
  %448 = select i1 %440, float %207, float %416, !dbg !99
  %449 = select i1 %441, float %208, float %417, !dbg !99
  %450 = select i1 %442, float %209, float %418, !dbg !99
  %451 = fcmp olt float %443, %224, !dbg !100
  %452 = fcmp olt float %444, %225, !dbg !100
  %453 = fcmp olt float %445, %226, !dbg !100
  %454 = fcmp olt float %446, %227, !dbg !100
  %455 = fcmp olt float %447, %233, !dbg !100
  %456 = fcmp olt float %448, %234, !dbg !100
  %457 = fcmp olt float %449, %235, !dbg !100
  %458 = fcmp olt float %450, %236, !dbg !100
  %459 = fcmp uno float %224, 0.000000e+00, !dbg !102
  %460 = fcmp uno float %225, 0.000000e+00, !dbg !102
  %461 = fcmp uno float %226, 0.000000e+00, !dbg !102
  %462 = fcmp uno float %227, 0.000000e+00, !dbg !102
  %463 = fcmp uno float %233, 0.000000e+00, !dbg !102
  %464 = fcmp uno float %234, 0.000000e+00, !dbg !102
  %465 = fcmp uno float %235, 0.000000e+00, !dbg !102
  %466 = fcmp uno float %236, 0.000000e+00, !dbg !102
  %467 = or i1 %459, %451, !dbg !103
  %468 = or i1 %460, %452, !dbg !103
  %469 = or i1 %461, %453, !dbg !103
  %470 = or i1 %462, %454, !dbg !103
  %471 = or i1 %463, %455, !dbg !103
  %472 = or i1 %464, %456, !dbg !103
  %473 = or i1 %465, %457, !dbg !103
  %474 = or i1 %466, %458, !dbg !103
  %475 = select i1 %467, float %224, float %443, !dbg !104
  %476 = select i1 %468, float %225, float %444, !dbg !104
  %477 = select i1 %469, float %226, float %445, !dbg !104
  %478 = select i1 %470, float %227, float %446, !dbg !104
  %479 = select i1 %471, float %233, float %447, !dbg !104
  %480 = select i1 %472, float %234, float %448, !dbg !104
  %481 = select i1 %473, float %235, float %449, !dbg !104
  %482 = select i1 %474, float %236, float %450, !dbg !104
  %483 = fcmp olt float %475, %251, !dbg !105
  %484 = fcmp olt float %476, %252, !dbg !105
  %485 = fcmp olt float %477, %253, !dbg !105
  %486 = fcmp olt float %478, %254, !dbg !105
  %487 = fcmp olt float %479, %260, !dbg !105
  %488 = fcmp olt float %480, %261, !dbg !105
  %489 = fcmp olt float %481, %262, !dbg !105
  %490 = fcmp olt float %482, %263, !dbg !105
  %491 = fcmp uno float %251, 0.000000e+00, !dbg !107
  %492 = fcmp uno float %252, 0.000000e+00, !dbg !107
  %493 = fcmp uno float %253, 0.000000e+00, !dbg !107
  %494 = fcmp uno float %254, 0.000000e+00, !dbg !107
  %495 = fcmp uno float %260, 0.000000e+00, !dbg !107
  %496 = fcmp uno float %261, 0.000000e+00, !dbg !107
  %497 = fcmp uno float %262, 0.000000e+00, !dbg !107
  %498 = fcmp uno float %263, 0.000000e+00, !dbg !107
  %499 = or i1 %491, %483, !dbg !108
  %500 = or i1 %492, %484, !dbg !108
  %501 = or i1 %493, %485, !dbg !108
  %502 = or i1 %494, %486, !dbg !108
  %503 = or i1 %495, %487, !dbg !108
  %504 = or i1 %496, %488, !dbg !108
  %505 = or i1 %497, %489, !dbg !108
  %506 = or i1 %498, %490, !dbg !108
  %507 = select i1 %499, float %251, float %475, !dbg !109
  %508 = select i1 %500, float %252, float %476, !dbg !109
  %509 = select i1 %501, float %253, float %477, !dbg !109
  %510 = select i1 %502, float %254, float %478, !dbg !109
  %511 = select i1 %503, float %260, float %479, !dbg !109
  %512 = select i1 %504, float %261, float %480, !dbg !109
  %513 = select i1 %505, float %262, float %481, !dbg !109
  %514 = select i1 %506, float %263, float %482, !dbg !109
  %515 = fcmp olt float %507, %278, !dbg !110
  %516 = fcmp olt float %508, %279, !dbg !110
  %517 = fcmp olt float %509, %280, !dbg !110
  %518 = fcmp olt float %510, %281, !dbg !110
  %519 = fcmp olt float %511, %287, !dbg !110
  %520 = fcmp olt float %512, %288, !dbg !110
  %521 = fcmp olt float %513, %289, !dbg !110
  %522 = fcmp olt float %514, %290, !dbg !110
  %523 = fcmp uno float %278, 0.000000e+00, !dbg !112
  %524 = fcmp uno float %279, 0.000000e+00, !dbg !112
  %525 = fcmp uno float %280, 0.000000e+00, !dbg !112
  %526 = fcmp uno float %281, 0.000000e+00, !dbg !112
  %527 = fcmp uno float %287, 0.000000e+00, !dbg !112
  %528 = fcmp uno float %288, 0.000000e+00, !dbg !112
  %529 = fcmp uno float %289, 0.000000e+00, !dbg !112
  %530 = fcmp uno float %290, 0.000000e+00, !dbg !112
  %531 = or i1 %523, %515, !dbg !113
  %532 = or i1 %524, %516, !dbg !113
  %533 = or i1 %525, %517, !dbg !113
  %534 = or i1 %526, %518, !dbg !113
  %535 = or i1 %527, %519, !dbg !113
  %536 = or i1 %528, %520, !dbg !113
  %537 = or i1 %529, %521, !dbg !113
  %538 = or i1 %530, %522, !dbg !113
  %539 = shl i32 %22, 6, !dbg !114
  %540 = shl i32 %23, 6, !dbg !114
  %541 = mul i32 %35, 81920, !dbg !115
  %542 = add i32 %541, %.decomposed18, !dbg !116
  %543 = add i32 %542, %539, !dbg !117
  %544 = add i32 %542, %540, !dbg !117
  %545 = sext i32 %543 to i64, !dbg !118
  %546 = getelementptr float, ptr addrspace(1) %1, i64 %545, !dbg !118
  %547 = sext i32 %544 to i64, !dbg !118
  %548 = getelementptr float, ptr addrspace(1) %1, i64 %547, !dbg !118
  %549 = shl i32 %7, 7, !dbg !119
  %550 = and i32 %549, 896, !dbg !119
  %551 = or disjoint i32 %550, %9, !dbg !119
  %552 = and i32 %11, 508, !dbg !119
  %553 = lshr exact i32 %550, 1, !dbg !119
  %554 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %553, !dbg !119
  %555 = getelementptr float, ptr addrspace(3) %554, i32 %551, !dbg !119
  %556 = bitcast float %507 to i32, !dbg !119
  %557 = select i1 %531, i32 %274, i32 %556, !dbg !120
  %558 = insertelement <1 x i32> poison, i32 %557, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %558, i1 true) #2, !dbg !119
  %559 = or disjoint i32 %551, 32, !dbg !119
  %560 = lshr i32 %559, 3, !dbg !119
  %561 = and i32 %560, 116, !dbg !119
  %562 = getelementptr float, ptr addrspace(3) @global_smem, i32 %561, !dbg !119
  %563 = getelementptr float, ptr addrspace(3) %562, i32 %559, !dbg !119
  %564 = bitcast float %508 to i32, !dbg !119
  %565 = select i1 %532, i32 %275, i32 %564, !dbg !120
  %566 = insertelement <1 x i32> poison, i32 %565, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, <1 x i32> %566, i1 true) #2, !dbg !119
  %567 = or disjoint i32 %551, 64, !dbg !119
  %568 = lshr i32 %567, 3, !dbg !119
  %569 = and i32 %568, 120, !dbg !119
  %570 = getelementptr float, ptr addrspace(3) @global_smem, i32 %569, !dbg !119
  %571 = getelementptr float, ptr addrspace(3) %570, i32 %567, !dbg !119
  %572 = bitcast float %509 to i32, !dbg !119
  %573 = select i1 %533, i32 %276, i32 %572, !dbg !120
  %574 = insertelement <1 x i32> poison, i32 %573, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %574, i1 true) #2, !dbg !119
  %575 = or disjoint i32 %551, 96, !dbg !119
  %576 = lshr i32 %575, 3, !dbg !119
  %577 = and i32 %576, 124, !dbg !119
  %578 = getelementptr float, ptr addrspace(3) @global_smem, i32 %577, !dbg !119
  %579 = getelementptr float, ptr addrspace(3) %578, i32 %575, !dbg !119
  %580 = bitcast float %510 to i32, !dbg !119
  %581 = select i1 %534, i32 %277, i32 %580, !dbg !120
  %582 = insertelement <1 x i32> poison, i32 %581, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %582, i1 true) #2, !dbg !119
  %583 = or disjoint i32 %551, 16, !dbg !119
  %584 = getelementptr float, ptr addrspace(3) %554, i32 %583, !dbg !119
  %585 = bitcast float %511 to i32, !dbg !119
  %586 = select i1 %535, i32 %283, i32 %585, !dbg !120
  %587 = insertelement <1 x i32> poison, i32 %586, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %584, <1 x i32> %587, i1 true) #2, !dbg !119
  %588 = or disjoint i32 %551, 48, !dbg !119
  %589 = lshr i32 %588, 3, !dbg !119
  %590 = and i32 %589, 116, !dbg !119
  %591 = getelementptr float, ptr addrspace(3) @global_smem, i32 %590, !dbg !119
  %592 = getelementptr float, ptr addrspace(3) %591, i32 %588, !dbg !119
  %593 = bitcast float %512 to i32, !dbg !119
  %594 = select i1 %536, i32 %284, i32 %593, !dbg !120
  %595 = insertelement <1 x i32> poison, i32 %594, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %595, i1 true) #2, !dbg !119
  %596 = or disjoint i32 %551, 80, !dbg !119
  %597 = lshr i32 %596, 3, !dbg !119
  %598 = and i32 %597, 120, !dbg !119
  %599 = getelementptr float, ptr addrspace(3) @global_smem, i32 %598, !dbg !119
  %600 = getelementptr float, ptr addrspace(3) %599, i32 %596, !dbg !119
  %601 = bitcast float %513 to i32, !dbg !119
  %602 = select i1 %537, i32 %285, i32 %601, !dbg !120
  %603 = insertelement <1 x i32> poison, i32 %602, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %600, <1 x i32> %603, i1 true) #2, !dbg !119
  %604 = or disjoint i32 %551, 112, !dbg !119
  %605 = lshr i32 %604, 3, !dbg !119
  %606 = and i32 %605, 124, !dbg !119
  %607 = getelementptr float, ptr addrspace(3) @global_smem, i32 %606, !dbg !119
  %608 = getelementptr float, ptr addrspace(3) %607, i32 %604, !dbg !119
  %609 = bitcast float %514 to i32, !dbg !119
  %610 = select i1 %538, i32 %286, i32 %609, !dbg !120
  %611 = insertelement <1 x i32> poison, i32 %610, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %608, <1 x i32> %611, i1 true) #2, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %612 = lshr i32 %11, 3, !dbg !119
  %613 = and i32 %612, 60, !dbg !119
  %614 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %613, !dbg !119
  %615 = getelementptr inbounds float, ptr addrspace(3) %614, i32 %552, !dbg !119
  %616 = or disjoint i32 %552, 512, !dbg !119
  %617 = lshr i32 %616, 3, !dbg !119
  %618 = and i32 %617, 124, !dbg !119
  %619 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %618, !dbg !119
  %620 = getelementptr inbounds float, ptr addrspace(3) %619, i32 %616, !dbg !119
  %621 = load <4 x i32>, ptr addrspace(3) %620, align 16, !dbg !119
  %.extract = load i32, ptr addrspace(3) %615, align 16, !dbg !119
  %622 = getelementptr inbounds i8, ptr addrspace(3) %615, i32 4, !dbg !119
  %.extract8 = load i32, ptr addrspace(3) %622, align 4, !dbg !119
  %623 = getelementptr inbounds i8, ptr addrspace(3) %615, i32 8, !dbg !119
  %.extract9 = load i32, ptr addrspace(3) %623, align 8, !dbg !119
  %624 = getelementptr inbounds i8, ptr addrspace(3) %615, i32 12, !dbg !119
  %.extract10 = load i32, ptr addrspace(3) %624, align 4, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %546, i1 %55) #2, !dbg !119
  %.extract11 = extractelement <4 x i32> %621, i64 0, !dbg !119
  %.extract12 = extractelement <4 x i32> %621, i64 1, !dbg !119
  %.extract13 = extractelement <4 x i32> %621, i64 2, !dbg !119
  %.extract14 = extractelement <4 x i32> %621, i64 3, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %548, i1 %56) #2, !dbg !119
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7kcyuvrd4srcb4hmw2shklo2f6a6ph7volzg3jsuvtleomlful.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_40", linkageName: "triton_poi_fused_max_pool2d_with_indices_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 40, scope: !7)
!25 = !DILocation(line: 33, column: 51, scope: !7)
!26 = !DILocation(line: 33, column: 63, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 45, scope: !7)
!29 = !DILocation(line: 33, column: 56, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 76, scope: !7)
!32 = !DILocation(line: 33, column: 68, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 34, column: 51, scope: !7)
!35 = !DILocation(line: 34, column: 62, scope: !7)
!36 = !DILocation(line: 34, column: 30, scope: !7)
!37 = !DILocation(line: 34, column: 74, scope: !7)
!38 = !DILocation(line: 35, column: 37, scope: !7)
!39 = !DILocation(line: 35, column: 52, scope: !7)
!40 = !DILocation(line: 35, column: 63, scope: !7)
!41 = !DILocation(line: 35, column: 30, scope: !7)
!42 = !DILocation(line: 35, column: 75, scope: !7)
!43 = !DILocation(line: 36, column: 38, scope: !7)
!44 = !DILocation(line: 36, column: 53, scope: !7)
!45 = !DILocation(line: 36, column: 64, scope: !7)
!46 = !DILocation(line: 36, column: 30, scope: !7)
!47 = !DILocation(line: 36, column: 76, scope: !7)
!48 = !DILocation(line: 37, column: 38, scope: !7)
!49 = !DILocation(line: 37, column: 53, scope: !7)
!50 = !DILocation(line: 37, column: 64, scope: !7)
!51 = !DILocation(line: 37, column: 30, scope: !7)
!52 = !DILocation(line: 37, column: 76, scope: !7)
!53 = !DILocation(line: 38, column: 38, scope: !7)
!54 = !DILocation(line: 38, column: 53, scope: !7)
!55 = !DILocation(line: 38, column: 64, scope: !7)
!56 = !DILocation(line: 38, column: 30, scope: !7)
!57 = !DILocation(line: 38, column: 76, scope: !7)
!58 = !DILocation(line: 39, column: 39, scope: !7)
!59 = !DILocation(line: 39, column: 54, scope: !7)
!60 = !DILocation(line: 39, column: 65, scope: !7)
!61 = !DILocation(line: 39, column: 31, scope: !7)
!62 = !DILocation(line: 39, column: 77, scope: !7)
!63 = !DILocation(line: 40, column: 39, scope: !7)
!64 = !DILocation(line: 40, column: 54, scope: !7)
!65 = !DILocation(line: 40, column: 65, scope: !7)
!66 = !DILocation(line: 40, column: 31, scope: !7)
!67 = !DILocation(line: 40, column: 77, scope: !7)
!68 = !DILocation(line: 41, column: 39, scope: !7)
!69 = !DILocation(line: 41, column: 54, scope: !7)
!70 = !DILocation(line: 41, column: 65, scope: !7)
!71 = !DILocation(line: 41, column: 31, scope: !7)
!72 = !DILocation(line: 41, column: 77, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 42, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 43, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 44, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 45, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 46, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 47, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 48, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 49, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 50, column: 33, scope: !7)
!115 = !DILocation(line: 50, column: 44, scope: !7)
!116 = !DILocation(line: 50, column: 30, scope: !7)
!117 = !DILocation(line: 50, column: 38, scope: !7)
!118 = !DILocation(line: 50, column: 25, scope: !7)
!119 = !DILocation(line: 50, column: 56, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!121 = !DILocation(line: 50, column: 4, scope: !7)
