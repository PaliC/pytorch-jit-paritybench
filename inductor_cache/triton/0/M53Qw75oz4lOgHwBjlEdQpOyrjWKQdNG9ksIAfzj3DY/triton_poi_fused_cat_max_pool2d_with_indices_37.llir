; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_max_pool2d_with_indices_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 2048, !dbg !14
  %13 = srem i32 %11, 128, !dbg !15
  %14 = sext i32 %11 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %12) #1, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = add i32 %11, -768, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !20
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %25 = add i32 %11, -640, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !23
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !23
  %31 = add i32 %11, -512, !dbg !24
  %32 = sext i32 %31 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !26
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !26
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !26
  %37 = add i32 %11, -384, !dbg !27
  %38 = sext i32 %37 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !29
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %43 = add i32 %11, -256, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !32
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !33
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %52 = add i32 %11, -128, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !35
  %55 = add i32 %11, 128, !dbg !36
  %56 = sext i32 %55 to i64, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !37
  %58 = add i32 %11, 256, !dbg !38
  %59 = sext i32 %58 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !39
  %61 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !40
  %62 = shufflevector <2 x i32> %61, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !40
  %63 = sdiv <2 x i32> %62, <i32 256, i32 128>, !dbg !40
  %64 = srem <2 x i32> %63, splat (i32 2), !dbg !41
  %65 = extractelement <2 x i32> %64, i64 1, !dbg !42
  %66 = icmp sgt i32 %65, 0, !dbg !43
  %67 = icmp sgt i32 %65, -1, !dbg !44
  %68 = icmp ugt i32 %65, -3, !dbg !45
  %69 = extractelement <2 x i32> %64, i64 0, !dbg !42
  %70 = icmp sgt i32 %69, 0, !dbg !46
  %71 = and i1 %70, %66, !dbg !47
  %72 = and i1 %12, %71, !dbg !48
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #1, !dbg !49
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !49
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !49
  %76 = and i1 %70, %67, !dbg !50
  %77 = and i1 %12, %76, !dbg !51
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #1, !dbg !52
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !52
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !52
  %81 = icmp slt <2 x i32> %64, splat (i32 1), !dbg !53
  %82 = extractelement <2 x i1> %81, i64 1, !dbg !54
  %83 = and i1 %70, %82, !dbg !54
  %84 = and i1 %12, %83, !dbg !55
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #1, !dbg !56
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !56
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !56
  %88 = and i1 %70, %68, !dbg !57
  %89 = and i1 %12, %88, !dbg !58
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #1, !dbg !59
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !59
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !59
  %93 = icmp sgt i32 %69, -1, !dbg !60
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !61
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !61
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !61
  %97 = and i1 %93, %66, !dbg !62
  %98 = and i1 %12, %97, !dbg !63
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #1, !dbg !64
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !64
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !64
  %102 = or i32 %69, %65, !dbg !65
  %103 = icmp sgt i32 %102, -1, !dbg !65
  %104 = and i1 %12, %103, !dbg !66
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %104, i32 -8388608, i1 %104, i32 -8388608, i1 %104) #1, !dbg !67
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !67
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !67
  %108 = and i1 %93, %82, !dbg !68
  %109 = and i1 %12, %108, !dbg !69
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #1, !dbg !70
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !70
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !70
  %113 = and i1 %93, %68, !dbg !71
  %114 = and i1 %12, %113, !dbg !72
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114) #1, !dbg !73
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !73
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !73
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !74
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !74
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !74
  %121 = extractelement <2 x i1> %81, i64 0, !dbg !75
  %122 = and i1 %121, %66, !dbg !75
  %123 = and i1 %12, %122, !dbg !76
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %123, i32 -8388608, i1 %123, i32 -8388608, i1 %123) #1, !dbg !77
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !77
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !77
  %127 = and i1 %121, %67, !dbg !78
  %128 = and i1 %12, %127, !dbg !79
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #1, !dbg !80
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !80
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !80
  %132 = and i1 %121, %82, !dbg !81
  %133 = add i32 %11, 384, !dbg !82
  %134 = sext i32 %133 to i64, !dbg !83
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !83
  %136 = and i1 %12, %132, !dbg !84
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %135, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #1, !dbg !85
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !85
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !85
  %140 = and i1 %121, %68, !dbg !86
  %141 = add i32 %11, 512, !dbg !87
  %142 = sext i32 %141 to i64, !dbg !88
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !88
  %144 = and i1 %12, %140, !dbg !89
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %143, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #1, !dbg !90
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !90
  %147 = extractvalue { i32, i32 } %145, 1, !dbg !90
  %148 = icmp ugt i32 %69, -3, !dbg !91
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !92
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !92
  %151 = extractvalue { i32, i32 } %149, 1, !dbg !92
  %152 = and i1 %148, %66, !dbg !93
  %153 = and i1 %12, %152, !dbg !94
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %135, i1 %153, i32 -8388608, i1 %153, i32 -8388608, i1 %153) #1, !dbg !95
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !95
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !95
  %157 = and i1 %148, %67, !dbg !96
  %158 = and i1 %12, %157, !dbg !97
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %143, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #1, !dbg !98
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !98
  %161 = extractvalue { i32, i32 } %159, 1, !dbg !98
  %162 = and i1 %148, %82, !dbg !99
  %163 = add i32 %11, 640, !dbg !100
  %164 = sext i32 %163 to i64, !dbg !101
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !101
  %166 = and i1 %12, %162, !dbg !102
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %165, i1 %166, i32 -8388608, i1 %166, i32 -8388608, i1 %166) #1, !dbg !103
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !103
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !103
  %170 = and i32 %69, %65, !dbg !42
  %171 = icmp ugt i32 %170, -3, !dbg !42
  %172 = add i32 %11, 768, !dbg !104
  %173 = sext i32 %172 to i64, !dbg !105
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !105
  %175 = and i1 %12, %171, !dbg !106
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %174, i1 %175, i32 -8388608, i1 %175, i32 -8388608, i1 %175) #1, !dbg !107
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !107
  %178 = extractvalue { i32, i32 } %176, 1, !dbg !107
  %179 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !20
  %180 = insertelement <2 x i32> %179, i32 %24, i64 1, !dbg !20
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !20
  %182 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !23
  %183 = insertelement <2 x i32> %182, i32 %30, i64 1, !dbg !23
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !23
  %185 = fcmp ogt <2 x float> %184, %181, !dbg !108
  %186 = fcmp uno <2 x float> %184, zeroinitializer, !dbg !112
  %187 = or <2 x i1> %185, %186, !dbg !113
  %.v = select <2 x i1> %187, <2 x i32> %183, <2 x i32> %180, !dbg !114
  %188 = bitcast <2 x i32> %.v to <2 x float>, !dbg !114
  %189 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %190 = insertelement <2 x i32> %189, i32 %36, i64 1, !dbg !26
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !26
  %192 = fcmp olt <2 x float> %188, %191, !dbg !115
  %193 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !29
  %194 = insertelement <2 x i32> %193, i32 %42, i64 1, !dbg !29
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !29
  %196 = fcmp uno <2 x float> %191, zeroinitializer, !dbg !117
  %197 = or <2 x i1> %196, %192, !dbg !118
  %.v1 = select <2 x i1> %197, <2 x i32> %190, <2 x i32> %.v, !dbg !119
  %198 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !119
  %199 = fcmp olt <2 x float> %198, %195, !dbg !120
  %200 = fcmp uno <2 x float> %195, zeroinitializer, !dbg !122
  %201 = or <2 x i1> %200, %199, !dbg !123
  %.v2 = select <2 x i1> %201, <2 x i32> %194, <2 x i32> %.v1, !dbg !124
  %202 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !124
  %203 = zext <2 x i1> %185 to <2 x i8>, !dbg !125
  %204 = select <2 x i1> %192, <2 x i8> splat (i8 2), <2 x i8> %203, !dbg !126
  %205 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !32
  %206 = insertelement <2 x i32> %205, i32 %48, i64 1, !dbg !32
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !32
  %208 = fcmp uno <2 x float> %207, zeroinitializer, !dbg !127
  %209 = fcmp olt <2 x float> %202, %207, !dbg !129
  %210 = or <2 x i1> %208, %209, !dbg !130
  %.v3 = select <2 x i1> %210, <2 x i32> %206, <2 x i32> %.v2, !dbg !131
  %211 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !131
  %212 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !33
  %213 = insertelement <2 x i32> %212, i32 %51, i64 1, !dbg !33
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !33
  %215 = fcmp olt <2 x float> %211, %214, !dbg !132
  %216 = fcmp uno <2 x float> %214, zeroinitializer, !dbg !134
  %217 = or <2 x i1> %216, %215, !dbg !135
  %.v4 = select <2 x i1> %217, <2 x i32> %213, <2 x i32> %.v3, !dbg !136
  %218 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !136
  %219 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !49
  %220 = insertelement <2 x i32> %219, i32 %75, i64 1, !dbg !49
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !49
  %222 = fcmp olt <2 x float> %218, %221, !dbg !137
  %223 = fcmp uno <2 x float> %221, zeroinitializer, !dbg !139
  %224 = or <2 x i1> %223, %222, !dbg !140
  %.v5 = select <2 x i1> %224, <2 x i32> %220, <2 x i32> %.v4, !dbg !141
  %225 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !141
  %226 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !52
  %227 = insertelement <2 x i32> %226, i32 %80, i64 1, !dbg !52
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !52
  %229 = fcmp olt <2 x float> %225, %228, !dbg !142
  %230 = fcmp uno <2 x float> %228, zeroinitializer, !dbg !144
  %231 = or <2 x i1> %230, %229, !dbg !145
  %.v6 = select <2 x i1> %231, <2 x i32> %227, <2 x i32> %.v5, !dbg !146
  %232 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !146
  %233 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !56
  %234 = insertelement <2 x i32> %233, i32 %87, i64 1, !dbg !56
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !56
  %236 = fcmp olt <2 x float> %232, %235, !dbg !147
  %237 = fcmp uno <2 x float> %235, zeroinitializer, !dbg !149
  %238 = or <2 x i1> %237, %236, !dbg !150
  %.v7 = select <2 x i1> %238, <2 x i32> %234, <2 x i32> %.v6, !dbg !151
  %239 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !151
  %240 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !59
  %241 = insertelement <2 x i32> %240, i32 %92, i64 1, !dbg !59
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !59
  %243 = fcmp olt <2 x float> %239, %242, !dbg !152
  %244 = fcmp uno <2 x float> %242, zeroinitializer, !dbg !154
  %245 = or <2 x i1> %244, %243, !dbg !155
  %.v8 = select <2 x i1> %245, <2 x i32> %241, <2 x i32> %.v7, !dbg !156
  %246 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !156
  %247 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !61
  %248 = insertelement <2 x i32> %247, i32 %96, i64 1, !dbg !61
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !61
  %250 = fcmp olt <2 x float> %246, %249, !dbg !157
  %251 = fcmp uno <2 x float> %249, zeroinitializer, !dbg !159
  %252 = or <2 x i1> %251, %250, !dbg !160
  %.v9 = select <2 x i1> %252, <2 x i32> %248, <2 x i32> %.v8, !dbg !161
  %253 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !161
  %254 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !64
  %255 = insertelement <2 x i32> %254, i32 %101, i64 1, !dbg !64
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !64
  %257 = fcmp olt <2 x float> %253, %256, !dbg !162
  %258 = fcmp uno <2 x float> %256, zeroinitializer, !dbg !164
  %259 = or <2 x i1> %258, %257, !dbg !165
  %.v10 = select <2 x i1> %259, <2 x i32> %255, <2 x i32> %.v9, !dbg !166
  %260 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !166
  %261 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !67
  %262 = insertelement <2 x i32> %261, i32 %107, i64 1, !dbg !67
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !67
  %264 = fcmp olt <2 x float> %260, %263, !dbg !167
  %265 = fcmp uno <2 x float> %263, zeroinitializer, !dbg !169
  %266 = or <2 x i1> %265, %264, !dbg !170
  %.v11 = select <2 x i1> %266, <2 x i32> %262, <2 x i32> %.v10, !dbg !171
  %267 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !171
  %268 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !70
  %269 = insertelement <2 x i32> %268, i32 %112, i64 1, !dbg !70
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !70
  %271 = fcmp olt <2 x float> %267, %270, !dbg !172
  %272 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !73
  %273 = insertelement <2 x i32> %272, i32 %117, i64 1, !dbg !73
  %274 = bitcast <2 x i32> %273 to <2 x float>, !dbg !73
  %275 = fcmp uno <2 x float> %270, zeroinitializer, !dbg !174
  %276 = or <2 x i1> %275, %271, !dbg !175
  %.v12 = select <2 x i1> %276, <2 x i32> %269, <2 x i32> %.v11, !dbg !176
  %277 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !176
  %278 = fcmp olt <2 x float> %277, %274, !dbg !177
  %279 = fcmp uno <2 x float> %274, zeroinitializer, !dbg !179
  %280 = or <2 x i1> %279, %278, !dbg !180
  %.v13 = select <2 x i1> %280, <2 x i32> %273, <2 x i32> %.v12, !dbg !181
  %281 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !181
  %282 = select <2 x i1> %199, <2 x i8> splat (i8 3), <2 x i8> %204, !dbg !182
  %283 = select <2 x i1> %209, <2 x i8> splat (i8 4), <2 x i8> %282, !dbg !183
  %284 = select <2 x i1> %215, <2 x i8> splat (i8 5), <2 x i8> %283, !dbg !184
  %285 = select <2 x i1> %222, <2 x i8> splat (i8 6), <2 x i8> %284, !dbg !185
  %286 = select <2 x i1> %229, <2 x i8> splat (i8 7), <2 x i8> %285, !dbg !186
  %287 = select <2 x i1> %236, <2 x i8> splat (i8 8), <2 x i8> %286, !dbg !187
  %288 = select <2 x i1> %243, <2 x i8> splat (i8 9), <2 x i8> %287, !dbg !188
  %289 = select <2 x i1> %250, <2 x i8> splat (i8 10), <2 x i8> %288, !dbg !189
  %290 = select <2 x i1> %257, <2 x i8> splat (i8 11), <2 x i8> %289, !dbg !190
  %291 = select <2 x i1> %264, <2 x i8> splat (i8 12), <2 x i8> %290, !dbg !191
  %292 = select <2 x i1> %271, <2 x i8> splat (i8 13), <2 x i8> %291, !dbg !192
  %293 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !74
  %294 = insertelement <2 x i32> %293, i32 %120, i64 1, !dbg !74
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !74
  %296 = fcmp uno <2 x float> %295, zeroinitializer, !dbg !193
  %297 = fcmp olt <2 x float> %281, %295, !dbg !195
  %298 = or <2 x i1> %296, %297, !dbg !196
  %.v14 = select <2 x i1> %298, <2 x i32> %294, <2 x i32> %.v13, !dbg !197
  %299 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !197
  %300 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !77
  %301 = insertelement <2 x i32> %300, i32 %126, i64 1, !dbg !77
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !77
  %303 = fcmp olt <2 x float> %299, %302, !dbg !198
  %304 = fcmp uno <2 x float> %302, zeroinitializer, !dbg !200
  %305 = or <2 x i1> %304, %303, !dbg !201
  %.v15 = select <2 x i1> %305, <2 x i32> %301, <2 x i32> %.v14, !dbg !202
  %306 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !202
  %307 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !80
  %308 = insertelement <2 x i32> %307, i32 %131, i64 1, !dbg !80
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !80
  %310 = fcmp olt <2 x float> %306, %309, !dbg !203
  %311 = fcmp uno <2 x float> %309, zeroinitializer, !dbg !205
  %312 = or <2 x i1> %311, %310, !dbg !206
  %.v16 = select <2 x i1> %312, <2 x i32> %308, <2 x i32> %.v15, !dbg !207
  %313 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !207
  %314 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !85
  %315 = insertelement <2 x i32> %314, i32 %139, i64 1, !dbg !85
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !85
  %317 = fcmp olt <2 x float> %313, %316, !dbg !208
  %318 = fcmp uno <2 x float> %316, zeroinitializer, !dbg !210
  %319 = or <2 x i1> %318, %317, !dbg !211
  %.v17 = select <2 x i1> %319, <2 x i32> %315, <2 x i32> %.v16, !dbg !212
  %320 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !212
  %321 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !90
  %322 = insertelement <2 x i32> %321, i32 %147, i64 1, !dbg !90
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !90
  %324 = fcmp olt <2 x float> %320, %323, !dbg !213
  %325 = fcmp uno <2 x float> %323, zeroinitializer, !dbg !215
  %326 = or <2 x i1> %325, %324, !dbg !216
  %.v18 = select <2 x i1> %326, <2 x i32> %322, <2 x i32> %.v17, !dbg !217
  %327 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !217
  %328 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !92
  %329 = insertelement <2 x i32> %328, i32 %151, i64 1, !dbg !92
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !92
  %331 = fcmp olt <2 x float> %327, %330, !dbg !218
  %332 = fcmp uno <2 x float> %330, zeroinitializer, !dbg !220
  %333 = or <2 x i1> %332, %331, !dbg !221
  %.v19 = select <2 x i1> %333, <2 x i32> %329, <2 x i32> %.v18, !dbg !222
  %334 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !222
  %335 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !95
  %336 = insertelement <2 x i32> %335, i32 %156, i64 1, !dbg !95
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !95
  %338 = fcmp olt <2 x float> %334, %337, !dbg !223
  %339 = fcmp uno <2 x float> %337, zeroinitializer, !dbg !225
  %340 = or <2 x i1> %339, %338, !dbg !226
  %.v20 = select <2 x i1> %340, <2 x i32> %336, <2 x i32> %.v19, !dbg !227
  %341 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !227
  %342 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !98
  %343 = insertelement <2 x i32> %342, i32 %161, i64 1, !dbg !98
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !98
  %345 = fcmp olt <2 x float> %341, %344, !dbg !228
  %346 = fcmp uno <2 x float> %344, zeroinitializer, !dbg !230
  %347 = or <2 x i1> %346, %345, !dbg !231
  %.v21 = select <2 x i1> %347, <2 x i32> %343, <2 x i32> %.v20, !dbg !232
  %348 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !232
  %349 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !103
  %350 = insertelement <2 x i32> %349, i32 %169, i64 1, !dbg !103
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !103
  %352 = fcmp olt <2 x float> %348, %351, !dbg !233
  %353 = fcmp uno <2 x float> %351, zeroinitializer, !dbg !235
  %354 = or <2 x i1> %353, %352, !dbg !236
  %.v22 = select <2 x i1> %354, <2 x i32> %350, <2 x i32> %.v21, !dbg !237
  %355 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !237
  %356 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !107
  %357 = insertelement <2 x i32> %356, i32 %178, i64 1, !dbg !107
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !107
  %359 = fcmp olt <2 x float> %355, %358, !dbg !238
  %360 = bitcast i32 %177 to float, !dbg !240
  %361 = fcmp uno float %360, 0.000000e+00, !dbg !240
  %362 = bitcast i32 %178 to float, !dbg !240
  %363 = fcmp uno float %362, 0.000000e+00, !dbg !240
  %364 = extractelement <2 x i1> %359, i64 0, !dbg !241
  %365 = or i1 %361, %364, !dbg !241
  %366 = extractelement <2 x i1> %359, i64 1, !dbg !241
  %367 = or i1 %363, %366, !dbg !241
  %368 = select <2 x i1> %278, <2 x i8> splat (i8 14), <2 x i8> %292, !dbg !242
  %369 = select <2 x i1> %297, <2 x i8> splat (i8 15), <2 x i8> %368, !dbg !243
  %370 = select <2 x i1> %303, <2 x i8> splat (i8 16), <2 x i8> %369, !dbg !244
  %371 = select <2 x i1> %310, <2 x i8> splat (i8 17), <2 x i8> %370, !dbg !245
  %372 = select <2 x i1> %317, <2 x i8> splat (i8 18), <2 x i8> %371, !dbg !246
  %373 = select <2 x i1> %324, <2 x i8> splat (i8 19), <2 x i8> %372, !dbg !247
  %374 = select <2 x i1> %331, <2 x i8> splat (i8 20), <2 x i8> %373, !dbg !248
  %375 = select <2 x i1> %338, <2 x i8> splat (i8 21), <2 x i8> %374, !dbg !249
  %376 = select <2 x i1> %345, <2 x i8> splat (i8 22), <2 x i8> %375, !dbg !250
  %377 = select <2 x i1> %352, <2 x i8> splat (i8 23), <2 x i8> %376, !dbg !251
  %378 = select <2 x i1> %359, <2 x i8> splat (i8 24), <2 x i8> %377, !dbg !252
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !253
  %380 = extractelement <2 x i32> %.v22, i64 0, !dbg !254
  %381 = select i1 %365, i32 %177, i32 %380, !dbg !255
  %382 = extractelement <2 x i32> %.v22, i64 1, !dbg !254
  %383 = select i1 %367, i32 %178, i32 %382, !dbg !255
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %381, i32 %383, ptr addrspace(1) %379, i1 %12) #1, !dbg !254
  %384 = getelementptr i8, ptr addrspace(1) %2, i64 %14, !dbg !256
  %385 = bitcast <2 x i8> %378 to i16, !dbg !257
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %385, ptr addrspace(1) %384, i1 %12) #1, !dbg !257
  %386 = extractelement <2 x i32> %63, i64 1, !dbg !258
  %387 = shl i32 %386, 9, !dbg !258
  %388 = add i32 %387, %13, !dbg !259
  %389 = sext i32 %388 to i64, !dbg !260
  %390 = getelementptr float, ptr addrspace(1) %3, i64 %389, !dbg !260
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %17, i32 %18, ptr addrspace(1) %390, i1 %12) #1, !dbg !261
  ret void, !dbg !262
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceufclx4evkx3xpd2xv2qb3vuuudmx3bfuz5fyhmr76zci3dliir.py", directory: "inductor_cache/eu")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_37", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 32, scope: !7)
!17 = !DILocation(line: 29, column: 37, scope: !7)
!18 = !DILocation(line: 41, column: 40, scope: !7)
!19 = !DILocation(line: 41, column: 31, scope: !7)
!20 = !DILocation(line: 41, column: 45, scope: !7)
!21 = !DILocation(line: 47, column: 40, scope: !7)
!22 = !DILocation(line: 47, column: 31, scope: !7)
!23 = !DILocation(line: 47, column: 45, scope: !7)
!24 = !DILocation(line: 54, column: 40, scope: !7)
!25 = !DILocation(line: 54, column: 31, scope: !7)
!26 = !DILocation(line: 54, column: 45, scope: !7)
!27 = !DILocation(line: 61, column: 40, scope: !7)
!28 = !DILocation(line: 61, column: 31, scope: !7)
!29 = !DILocation(line: 61, column: 45, scope: !7)
!30 = !DILocation(line: 68, column: 40, scope: !7)
!31 = !DILocation(line: 68, column: 31, scope: !7)
!32 = !DILocation(line: 68, column: 45, scope: !7)
!33 = !DILocation(line: 75, column: 45, scope: !7)
!34 = !DILocation(line: 84, column: 40, scope: !7)
!35 = !DILocation(line: 84, column: 31, scope: !7)
!36 = !DILocation(line: 103, column: 37, scope: !7)
!37 = !DILocation(line: 103, column: 31, scope: !7)
!38 = !DILocation(line: 106, column: 37, scope: !7)
!39 = !DILocation(line: 106, column: 31, scope: !7)
!40 = !DILocation(line: 24, column: 21, scope: !7)
!41 = !DILocation(line: 24, column: 28, scope: !7)
!42 = !DILocation(line: 143, column: 22, scope: !7)
!43 = !DILocation(line: 43, column: 21, scope: !7)
!44 = !DILocation(line: 50, column: 21, scope: !7)
!45 = !DILocation(line: 65, column: 20, scope: !7)
!46 = !DILocation(line: 71, column: 21, scope: !7)
!47 = !DILocation(line: 77, column: 20, scope: !7)
!48 = !DILocation(line: 78, column: 53, scope: !7)
!49 = !DILocation(line: 78, column: 45, scope: !7)
!50 = !DILocation(line: 80, column: 20, scope: !7)
!51 = !DILocation(line: 81, column: 53, scope: !7)
!52 = !DILocation(line: 81, column: 45, scope: !7)
!53 = !DILocation(line: 110, column: 20, scope: !7)
!54 = !DILocation(line: 83, column: 20, scope: !7)
!55 = !DILocation(line: 84, column: 53, scope: !7)
!56 = !DILocation(line: 84, column: 45, scope: !7)
!57 = !DILocation(line: 86, column: 20, scope: !7)
!58 = !DILocation(line: 87, column: 44, scope: !7)
!59 = !DILocation(line: 87, column: 36, scope: !7)
!60 = !DILocation(line: 90, column: 21, scope: !7)
!61 = !DILocation(line: 94, column: 45, scope: !7)
!62 = !DILocation(line: 96, column: 20, scope: !7)
!63 = !DILocation(line: 97, column: 53, scope: !7)
!64 = !DILocation(line: 97, column: 45, scope: !7)
!65 = !DILocation(line: 99, column: 20, scope: !7)
!66 = !DILocation(line: 100, column: 44, scope: !7)
!67 = !DILocation(line: 100, column: 36, scope: !7)
!68 = !DILocation(line: 102, column: 20, scope: !7)
!69 = !DILocation(line: 103, column: 50, scope: !7)
!70 = !DILocation(line: 103, column: 42, scope: !7)
!71 = !DILocation(line: 105, column: 20, scope: !7)
!72 = !DILocation(line: 106, column: 50, scope: !7)
!73 = !DILocation(line: 106, column: 42, scope: !7)
!74 = !DILocation(line: 113, column: 36, scope: !7)
!75 = !DILocation(line: 115, column: 20, scope: !7)
!76 = !DILocation(line: 116, column: 50, scope: !7)
!77 = !DILocation(line: 116, column: 42, scope: !7)
!78 = !DILocation(line: 118, column: 20, scope: !7)
!79 = !DILocation(line: 119, column: 50, scope: !7)
!80 = !DILocation(line: 119, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 20, scope: !7)
!82 = !DILocation(line: 122, column: 37, scope: !7)
!83 = !DILocation(line: 122, column: 31, scope: !7)
!84 = !DILocation(line: 122, column: 50, scope: !7)
!85 = !DILocation(line: 122, column: 42, scope: !7)
!86 = !DILocation(line: 124, column: 20, scope: !7)
!87 = !DILocation(line: 125, column: 37, scope: !7)
!88 = !DILocation(line: 125, column: 31, scope: !7)
!89 = !DILocation(line: 125, column: 50, scope: !7)
!90 = !DILocation(line: 125, column: 42, scope: !7)
!91 = !DILocation(line: 129, column: 20, scope: !7)
!92 = !DILocation(line: 132, column: 43, scope: !7)
!93 = !DILocation(line: 134, column: 22, scope: !7)
!94 = !DILocation(line: 135, column: 52, scope: !7)
!95 = !DILocation(line: 135, column: 43, scope: !7)
!96 = !DILocation(line: 137, column: 22, scope: !7)
!97 = !DILocation(line: 138, column: 52, scope: !7)
!98 = !DILocation(line: 138, column: 43, scope: !7)
!99 = !DILocation(line: 140, column: 22, scope: !7)
!100 = !DILocation(line: 141, column: 38, scope: !7)
!101 = !DILocation(line: 141, column: 32, scope: !7)
!102 = !DILocation(line: 141, column: 52, scope: !7)
!103 = !DILocation(line: 141, column: 43, scope: !7)
!104 = !DILocation(line: 144, column: 38, scope: !7)
!105 = !DILocation(line: 144, column: 32, scope: !7)
!106 = !DILocation(line: 144, column: 52, scope: !7)
!107 = !DILocation(line: 144, column: 43, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !111)
!109 = distinct !DILexicalBlockFile(scope: !7, file: !110, discriminator: 0)
!110 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!111 = !DILocation(line: 48, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !111)
!115 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !116)
!116 = !DILocation(line: 55, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !121)
!121 = !DILocation(line: 62, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !121)
!125 = !DILocation(line: 149, column: 38, scope: !7)
!126 = !DILocation(line: 152, column: 38, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !128)
!128 = !DILocation(line: 69, column: 42, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !133)
!133 = !DILocation(line: 76, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !138)
!138 = !DILocation(line: 79, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !138)
!142 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !143)
!143 = !DILocation(line: 82, column: 42, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !143)
!145 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !143)
!146 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !143)
!147 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !148)
!148 = !DILocation(line: 85, column: 42, scope: !7)
!149 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !148)
!150 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !148)
!151 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !148)
!152 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !153)
!153 = !DILocation(line: 88, column: 42, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !153)
!155 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !153)
!156 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !153)
!157 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !158)
!158 = !DILocation(line: 95, column: 42, scope: !7)
!159 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !158)
!160 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !158)
!161 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !158)
!162 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !163)
!163 = !DILocation(line: 98, column: 42, scope: !7)
!164 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !163)
!165 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !163)
!166 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !163)
!167 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !168)
!168 = !DILocation(line: 101, column: 42, scope: !7)
!169 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !168)
!170 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !168)
!171 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !168)
!172 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !173)
!173 = !DILocation(line: 104, column: 42, scope: !7)
!174 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !173)
!175 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !173)
!176 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !173)
!177 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !178)
!178 = !DILocation(line: 107, column: 42, scope: !7)
!179 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !178)
!180 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !178)
!181 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !178)
!182 = !DILocation(line: 155, column: 38, scope: !7)
!183 = !DILocation(line: 158, column: 38, scope: !7)
!184 = !DILocation(line: 161, column: 38, scope: !7)
!185 = !DILocation(line: 164, column: 38, scope: !7)
!186 = !DILocation(line: 167, column: 38, scope: !7)
!187 = !DILocation(line: 170, column: 38, scope: !7)
!188 = !DILocation(line: 173, column: 38, scope: !7)
!189 = !DILocation(line: 176, column: 38, scope: !7)
!190 = !DILocation(line: 179, column: 38, scope: !7)
!191 = !DILocation(line: 182, column: 38, scope: !7)
!192 = !DILocation(line: 185, column: 38, scope: !7)
!193 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !194)
!194 = !DILocation(line: 114, column: 42, scope: !7)
!195 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !194)
!196 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !194)
!197 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !194)
!198 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !199)
!199 = !DILocation(line: 117, column: 42, scope: !7)
!200 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !199)
!201 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !199)
!202 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !199)
!203 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !204)
!204 = !DILocation(line: 120, column: 42, scope: !7)
!205 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !204)
!206 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !204)
!207 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !204)
!208 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !209)
!209 = !DILocation(line: 123, column: 42, scope: !7)
!210 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !209)
!211 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !209)
!212 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !209)
!213 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !214)
!214 = !DILocation(line: 126, column: 42, scope: !7)
!215 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !214)
!216 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !214)
!217 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !214)
!218 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !219)
!219 = !DILocation(line: 133, column: 44, scope: !7)
!220 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !219)
!221 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !219)
!222 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !219)
!223 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !224)
!224 = !DILocation(line: 136, column: 44, scope: !7)
!225 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !224)
!226 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !224)
!227 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !224)
!228 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !229)
!229 = !DILocation(line: 139, column: 44, scope: !7)
!230 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !229)
!231 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !229)
!232 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !229)
!233 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !234)
!234 = !DILocation(line: 142, column: 44, scope: !7)
!235 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !234)
!236 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !234)
!237 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !234)
!238 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !239)
!239 = !DILocation(line: 145, column: 44, scope: !7)
!240 = !DILocation(line: 120, column: 21, scope: !109, inlinedAt: !239)
!241 = !DILocation(line: 120, column: 16, scope: !109, inlinedAt: !239)
!242 = !DILocation(line: 188, column: 38, scope: !7)
!243 = !DILocation(line: 191, column: 38, scope: !7)
!244 = !DILocation(line: 194, column: 38, scope: !7)
!245 = !DILocation(line: 197, column: 38, scope: !7)
!246 = !DILocation(line: 200, column: 38, scope: !7)
!247 = !DILocation(line: 203, column: 38, scope: !7)
!248 = !DILocation(line: 206, column: 38, scope: !7)
!249 = !DILocation(line: 209, column: 38, scope: !7)
!250 = !DILocation(line: 212, column: 38, scope: !7)
!251 = !DILocation(line: 215, column: 38, scope: !7)
!252 = !DILocation(line: 218, column: 38, scope: !7)
!253 = !DILocation(line: 219, column: 25, scope: !7)
!254 = !DILocation(line: 219, column: 38, scope: !7)
!255 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !239)
!256 = !DILocation(line: 220, column: 25, scope: !7)
!257 = !DILocation(line: 220, column: 38, scope: !7)
!258 = !DILocation(line: 221, column: 34, scope: !7)
!259 = !DILocation(line: 221, column: 30, scope: !7)
!260 = !DILocation(line: 221, column: 25, scope: !7)
!261 = !DILocation(line: 221, column: 47, scope: !7)
!262 = !DILocation(line: 221, column: 4, scope: !7)
