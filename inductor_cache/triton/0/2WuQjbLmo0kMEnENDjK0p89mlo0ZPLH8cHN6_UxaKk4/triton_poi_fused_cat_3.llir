; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = icmp slt i32 %.decomposed, 2, !dbg !17
  %15 = shl nsw i32 %12, 2, !dbg !18
  %16 = add i32 %15, %.decomposed, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = and i1 %11, %14, !dbg !21
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !22
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !22
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !22
  %23 = bitcast i32 %21 to float, !dbg !22
  %24 = bitcast i32 %22 to float, !dbg !22
  %25 = fmul float %23, 0x3FE6A09E60000000, !dbg !23
  %26 = fmul float %24, 0x3FE6A09E60000000, !dbg !23
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %27, 0, !dbg !24
  %28 = tail call float @llvm.nvvm.fabs.ftz.f(float %25) #3, !dbg !24
  %29 = tail call float @llvm.nvvm.fabs.f(float %25) #3, !dbg !24
  %.0.i = select i1 %.not.i, float %29, float %28, !dbg !24
  %30 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !24
  br i1 %30, label %__nv_fabsf.exit1.i, label %32, !dbg !24

__nv_fabsf.exit1.i:                               ; preds = %4
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not1.i = icmp eq i32 %31, 0, !dbg !24
  %.01.i = select i1 %.not1.i, float %29, float %28, !dbg !24
  br label %__internal_fmad.exit.i, !dbg !24

32:                                               ; preds = %4
  %33 = fmul float %25, %25, !dbg !24
  br label %__internal_fmad.exit.i, !dbg !24

__internal_fmad.exit.i:                           ; preds = %32, %__nv_fabsf.exit1.i
  %34 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %32 ], !dbg !24
  %35 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %32 ], !dbg !24
  %36 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %32 ], !dbg !24
  %37 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %32 ], !dbg !24
  %38 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %32 ], !dbg !24
  %39 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %32 ], !dbg !24
  %40 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %32 ], !dbg !24
  %41 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %33, %32 ], !dbg !24
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not2.i = icmp eq i32 %42, 0, !dbg !24
  %43 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %40, float %41, float %39) #3, !dbg !24
  %44 = tail call float @llvm.nvvm.fma.rn.f(float %40, float %41, float %39) #3, !dbg !24
  %.02.i = select i1 %.not2.i, float %44, float %43, !dbg !24
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not3.i = icmp eq i32 %45, 0, !dbg !24
  %46 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %41, float %38) #3, !dbg !24
  %47 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %41, float %38) #3, !dbg !24
  %.03.i = select i1 %.not3.i, float %47, float %46, !dbg !24
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not4.i = icmp eq i32 %48, 0, !dbg !24
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %41, float %37) #3, !dbg !24
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %41, float %37) #3, !dbg !24
  %.04.i = select i1 %.not4.i, float %50, float %49, !dbg !24
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not5.i = icmp eq i32 %51, 0, !dbg !24
  %52 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %41, float %36) #3, !dbg !24
  %53 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %41, float %36) #3, !dbg !24
  %.05.i = select i1 %.not5.i, float %53, float %52, !dbg !24
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not6.i = icmp eq i32 %54, 0, !dbg !24
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %41, float %35) #3, !dbg !24
  %56 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %41, float %35) #3, !dbg !24
  %.06.i = select i1 %.not6.i, float %56, float %55, !dbg !24
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not7.i = icmp eq i32 %57, 0, !dbg !24
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %41, float %34) #3, !dbg !24
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %41, float %34) #3, !dbg !24
  %.07.i = select i1 %.not7.i, float %59, float %58, !dbg !24
  %60 = fneg float %41, !dbg !24
  %61 = select i1 %30, float %60, float %25, !dbg !24
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not8.i = icmp eq i32 %62, 0, !dbg !24
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %61, float %61) #3, !dbg !24
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %61, float %61) #3, !dbg !24
  %.08.i = select i1 %.not8.i, float %64, float %63, !dbg !24
  br i1 %30, label %65, label %__nv_erff.exit, !dbg !24

65:                                               ; preds = %__internal_fmad.exit.i
  %66 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !24
  %67 = fsub float 1.000000e+00, %66, !dbg !24
  %68 = bitcast float %67 to i32, !dbg !24
  %69 = bitcast float %25 to i32, !dbg !24
  %70 = and i32 %69, -2147483648, !dbg !24
  %71 = or i32 %70, %68, !dbg !24
  %72 = bitcast i32 %71 to float, !dbg !24
  br label %__nv_erff.exit, !dbg !24

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %65
  %r.0.i = phi float [ %72, %65 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !24
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %73, 0, !dbg !24
  %74 = tail call float @llvm.nvvm.fabs.ftz.f(float %26) #3, !dbg !24
  %75 = tail call float @llvm.nvvm.fabs.f(float %26) #3, !dbg !24
  %.0.i2 = select i1 %.not.i1, float %75, float %74, !dbg !24
  %76 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !24
  br i1 %76, label %__nv_fabsf.exit1.i19, label %78, !dbg !24

__nv_fabsf.exit1.i19:                             ; preds = %__nv_erff.exit
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not1.i20 = icmp eq i32 %77, 0, !dbg !24
  %.01.i21 = select i1 %.not1.i20, float %75, float %74, !dbg !24
  br label %__internal_fmad.exit.i3, !dbg !24

78:                                               ; preds = %__nv_erff.exit
  %79 = fmul float %26, %26, !dbg !24
  br label %__internal_fmad.exit.i3, !dbg !24

__internal_fmad.exit.i3:                          ; preds = %78, %__nv_fabsf.exit1.i19
  %80 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i19 ], [ 0x3FC06EBA60000000, %78 ], !dbg !24
  %81 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i19 ], [ 0xBFD8127580000000, %78 ], !dbg !24
  %82 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i19 ], [ 0x3FBCE315E0000000, %78 ], !dbg !24
  %83 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i19 ], [ 0xBF9B837CE0000000, %78 ], !dbg !24
  %84 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i19 ], [ 0x3F755ABD40000000, %78 ], !dbg !24
  %85 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i19 ], [ 0xBF4AE9A400000000, %78 ], !dbg !24
  %86 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i19 ], [ 0x3F163D2D40000000, %78 ], !dbg !24
  %87 = phi float [ %.01.i21, %__nv_fabsf.exit1.i19 ], [ %79, %78 ], !dbg !24
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not2.i4 = icmp eq i32 %88, 0, !dbg !24
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %86, float %87, float %85) #3, !dbg !24
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %86, float %87, float %85) #3, !dbg !24
  %.02.i5 = select i1 %.not2.i4, float %90, float %89, !dbg !24
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not3.i6 = icmp eq i32 %91, 0, !dbg !24
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i5, float %87, float %84) #3, !dbg !24
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i5, float %87, float %84) #3, !dbg !24
  %.03.i7 = select i1 %.not3.i6, float %93, float %92, !dbg !24
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not4.i8 = icmp eq i32 %94, 0, !dbg !24
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i7, float %87, float %83) #3, !dbg !24
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i7, float %87, float %83) #3, !dbg !24
  %.04.i9 = select i1 %.not4.i8, float %96, float %95, !dbg !24
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not5.i10 = icmp eq i32 %97, 0, !dbg !24
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i9, float %87, float %82) #3, !dbg !24
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i9, float %87, float %82) #3, !dbg !24
  %.05.i11 = select i1 %.not5.i10, float %99, float %98, !dbg !24
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not6.i12 = icmp eq i32 %100, 0, !dbg !24
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i11, float %87, float %81) #3, !dbg !24
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i11, float %87, float %81) #3, !dbg !24
  %.06.i13 = select i1 %.not6.i12, float %102, float %101, !dbg !24
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not7.i14 = icmp eq i32 %103, 0, !dbg !24
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i13, float %87, float %80) #3, !dbg !24
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i13, float %87, float %80) #3, !dbg !24
  %.07.i15 = select i1 %.not7.i14, float %105, float %104, !dbg !24
  %106 = fneg float %87, !dbg !24
  %107 = select i1 %76, float %106, float %26, !dbg !24
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not8.i16 = icmp eq i32 %108, 0, !dbg !24
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i15, float %107, float %107) #3, !dbg !24
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i15, float %107, float %107) #3, !dbg !24
  %.08.i17 = select i1 %.not8.i16, float %110, float %109, !dbg !24
  br i1 %76, label %111, label %__nv_erff.exit22, !dbg !24

111:                                              ; preds = %__internal_fmad.exit.i3
  %112 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i17) #3, !dbg !24
  %113 = fsub float 1.000000e+00, %112, !dbg !24
  %114 = bitcast float %113 to i32, !dbg !24
  %115 = bitcast float %26 to i32, !dbg !24
  %116 = and i32 %115, -2147483648, !dbg !24
  %117 = or i32 %116, %114, !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  br label %__nv_erff.exit22, !dbg !24

__nv_erff.exit22:                                 ; preds = %__internal_fmad.exit.i3, %111
  %r.0.i18 = phi float [ %118, %111 ], [ %.08.i17, %__internal_fmad.exit.i3 ], !dbg !24
  %119 = fmul float %24, 5.000000e-01, !dbg !25
  %120 = fmul float %23, 5.000000e-01, !dbg !25
  %121 = sdiv i32 %10, 16, !dbg !26
  %122 = fadd float %r.0.i, 1.000000e+00, !dbg !27
  %123 = fadd float %r.0.i18, 1.000000e+00, !dbg !27
  %124 = fmul float %120, %122, !dbg !28
  %125 = fmul float %119, %123, !dbg !28
  %126 = icmp sgt i32 %.decomposed, 1, !dbg !29
  %127 = shl nsw i32 %121, 1, !dbg !30
  %128 = add nsw i32 %.decomposed, -2, !dbg !31
  %129 = add nsw i32 %128, %127, !dbg !32
  %130 = sext i32 %129 to i64, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !33
  %132 = and i1 %11, %126, !dbg !34
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !35
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !35
  %135 = extractvalue { i32, i32 } %133, 1, !dbg !35
  %136 = sext i32 %10 to i64, !dbg !36
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !36
  %138 = bitcast float %124 to i32, !dbg !37
  %139 = select i1 %14, i32 %138, i32 %134, !dbg !38
  %140 = bitcast float %125 to i32, !dbg !37
  %141 = select i1 %14, i32 %140, i32 %135, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %139, i32 %141, ptr addrspace(1) %137, i1 %11) #3, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2s3kxoazagbedsliikltyd3wrx65igbvuuzlvorpleepcskfoq6.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 38, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 51, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 26, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 26, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 20, scope: !7)
!30 = !DILocation(line: 47, column: 33, scope: !7)
!31 = !DILocation(line: 47, column: 46, scope: !7)
!32 = !DILocation(line: 47, column: 39, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 60, scope: !7)
!35 = !DILocation(line: 47, column: 52, scope: !7)
!36 = !DILocation(line: 49, column: 25, scope: !7)
!37 = !DILocation(line: 49, column: 37, scope: !7)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 49, column: 4, scope: !7)
