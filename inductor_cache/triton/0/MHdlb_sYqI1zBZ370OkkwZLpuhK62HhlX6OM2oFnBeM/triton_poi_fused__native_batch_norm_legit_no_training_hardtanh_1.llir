; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = srem i32 %13, 9, !dbg !14
  %16 = srem i32 %14, 9, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = sext i32 %15 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = sext i32 %16 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %40 = fadd float %29, 0x3EE4F8B580000000, !dbg !25
  %41 = fadd float %31, 0x3EE4F8B580000000, !dbg !25
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %42, 0, !dbg !26
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %43, 0, !dbg !26
  br i1 %.not.i, label %49, label %44, !dbg !26

44:                                               ; preds = %7
  br i1 %.not1.i, label %47, label %45, !dbg !26

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

49:                                               ; preds = %7
  br i1 %.not1.i, label %52, label %50, !dbg !26

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %45, %47, %50, %52
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], [ %51, %50 ], [ %53, %52 ], !dbg !26
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i2 = icmp eq i32 %54, 0, !dbg !26
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i5 = icmp eq i32 %55, 0, !dbg !26
  br i1 %.not.i2, label %61, label %56, !dbg !26

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %59, label %57, !dbg !26

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit6, !dbg !26

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit6, !dbg !26

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %64, label %62, !dbg !26

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit6, !dbg !26

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit6, !dbg !26

__nv_sqrtf.exit6:                                 ; preds = %57, %59, %62, %64
  %.0.i4 = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !26
  %66 = extractvalue { i32, i32 } %19, 1, !dbg !16
  %67 = bitcast i32 %66 to float, !dbg !16
  %68 = bitcast i32 %25 to float, !dbg !18
  %69 = fsub float %67, %68, !dbg !27
  %70 = extractvalue { i32, i32 } %19, 0, !dbg !16
  %71 = bitcast i32 %70 to float, !dbg !16
  %72 = bitcast i32 %24 to float, !dbg !18
  %73 = fsub float %71, %72, !dbg !27
  %74 = bitcast i32 %39 to float, !dbg !24
  %75 = bitcast i32 %38 to float, !dbg !24
  %76 = bitcast i32 %35 to float, !dbg !22
  %77 = bitcast i32 %34 to float, !dbg !22
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !28
  %80 = fmul float %73, %78, !dbg !29
  %81 = fmul float %69, %79, !dbg !29
  %82 = fmul float %80, %77, !dbg !30
  %83 = fmul float %81, %76, !dbg !30
  %84 = fadd float %82, %75, !dbg !31
  %85 = fadd float %83, %74, !dbg !31
  %.inv = fcmp ole float %84, 0.000000e+00, !dbg !32
  %86 = select i1 %.inv, float 0.000000e+00, float %84, !dbg !32
  %.inv1 = fcmp ole float %85, 0.000000e+00, !dbg !32
  %87 = select i1 %.inv1, float 0.000000e+00, float %85, !dbg !32
  %88 = fcmp olt float %86, 6.000000e+00, !dbg !36
  %89 = fcmp olt float %87, 6.000000e+00, !dbg !36
  %90 = fcmp uno float %86, 0.000000e+00, !dbg !38
  %91 = fcmp uno float %87, 0.000000e+00, !dbg !38
  %92 = or i1 %88, %90, !dbg !39
  %93 = or i1 %89, %91, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !40
  %95 = bitcast float %86 to i32, !dbg !41
  %96 = select i1 %92, i32 %95, i32 1086324736, !dbg !42
  %97 = bitcast float %87 to i32, !dbg !41
  %98 = select i1 %93, i32 %97, i32 1086324736, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %98, ptr addrspace(1) %94, i1 true) #3, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijlylagsvsu4ieo66zbykkgrnewu4gu2lfiygll4p2egwpuj5mh.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 43, column: 42, scope: !7)
!36 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !37)
!39 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !37)
!40 = !DILocation(line: 46, column: 25, scope: !7)
!41 = !DILocation(line: 46, column: 37, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !37)
!43 = !DILocation(line: 46, column: 4, scope: !7)
