; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = and i32 %19, 127, !dbg !12
  %23 = or disjoint i32 %22, 128, !dbg !12
  %24 = or disjoint i32 %18, %21, !dbg !13
  %25 = or disjoint i32 %18, %22, !dbg !13
  %26 = or disjoint i32 %18, %23, !dbg !13
  %.frozen = freeze i32 %24, !dbg !14
  %27 = sdiv i32 %.frozen, 64, !dbg !14
  %28 = srem i32 %27, 64, !dbg !15
  %29 = mul i32 %27, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %29, !dbg !16
  %30 = sdiv i32 %24, 4096, !dbg !17
  %31 = sext i32 %28 to i64, !dbg !18
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !19
  %35 = sext i32 %.decomposed to i64, !dbg !20
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !21
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !21
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %4, i64 %35, !dbg !23
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !24
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !24
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !25
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !26
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !26
  %49 = getelementptr i64, ptr addrspace(1) %6, i64 %31, !dbg !27
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #2, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #2, !dbg !32
  %59 = lshr i64 %33, 61, !dbg !33
  %60 = and i64 %59, 4, !dbg !33
  %61 = add i64 %60, %33, !dbg !33
  %62 = lshr i64 %38, 61, !dbg !34
  %63 = and i64 %62, 4, !dbg !34
  %64 = add i64 %63, %38, !dbg !34
  %65 = lshr i64 %39, 61, !dbg !34
  %66 = and i64 %65, 4, !dbg !34
  %67 = add i64 %66, %39, !dbg !34
  %68 = shl i64 %61, 2, !dbg !35
  %69 = shl nsw i32 %30, 4, !dbg !36
  %70 = sext i32 %69 to i64, !dbg !37
  %71 = add i64 %68, %70, !dbg !38
  %72 = add i64 %71, %64, !dbg !37
  %73 = add i64 %71, %67, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !40
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #2, !dbg !40
  %78 = lshr i64 %43, 61, !dbg !41
  %79 = and i64 %78, 4, !dbg !41
  %80 = add i64 %79, %43, !dbg !41
  %81 = lshr i64 %44, 61, !dbg !41
  %82 = and i64 %81, 4, !dbg !41
  %83 = add i64 %82, %44, !dbg !41
  %84 = add i64 %71, %80, !dbg !42
  %85 = add i64 %71, %83, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !44
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !44
  %90 = lshr i64 %50, 61, !dbg !45
  %91 = and i64 %90, 4, !dbg !45
  %92 = add i64 %91, %50, !dbg !45
  %93 = shl i64 %92, 2, !dbg !46
  %94 = add i64 %93, %70, !dbg !47
  %95 = add i64 %94, %64, !dbg !48
  %96 = add i64 %94, %67, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !49
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !49
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !50
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !50
  %101 = add i64 %94, %80, !dbg !51
  %102 = add i64 %94, %83, !dbg !51
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !52
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !52
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !53
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !53
  %107 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !50
  %108 = insertelement <2 x i32> %107, i32 %76, i64 1, !dbg !50
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !50
  %110 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !54
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !54
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %113 = fadd <2 x float> %112, %109, !dbg !54
  %114 = fcmp olt <2 x float> %113, zeroinitializer, !dbg !55
  %115 = select <2 x i1> %114, <2 x float> zeroinitializer, <2 x float> %113, !dbg !59
  %116 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !53
  %117 = insertelement <2 x i32> %116, i32 %88, i64 1, !dbg !53
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !53
  %119 = fadd <2 x float> %112, %118, !dbg !60
  %120 = fcmp olt <2 x float> %119, zeroinitializer, !dbg !61
  %121 = select <2 x i1> %120, <2 x float> zeroinitializer, <2 x float> %119, !dbg !63
  %122 = fsub <2 x float> %121, %115, !dbg !64
  %123 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !65
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !65
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %126 = fmul <2 x float> %122, %125, !dbg !65
  %127 = fadd <2 x float> %115, %126, !dbg !66
  %128 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !50
  %129 = insertelement <2 x i32> %128, i32 %77, i64 1, !dbg !50
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !50
  %131 = fadd <2 x float> %112, %130, !dbg !54
  %132 = fcmp olt <2 x float> %131, zeroinitializer, !dbg !55
  %133 = select <2 x i1> %132, <2 x float> zeroinitializer, <2 x float> %131, !dbg !59
  %134 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !53
  %135 = insertelement <2 x i32> %134, i32 %89, i64 1, !dbg !53
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !53
  %137 = fadd <2 x float> %112, %136, !dbg !60
  %138 = fcmp olt <2 x float> %137, zeroinitializer, !dbg !61
  %139 = select <2 x i1> %138, <2 x float> zeroinitializer, <2 x float> %137, !dbg !63
  %140 = fsub <2 x float> %139, %133, !dbg !64
  %141 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !65
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !65
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %144 = fmul <2 x float> %140, %143, !dbg !65
  %145 = fadd <2 x float> %133, %144, !dbg !66
  %146 = extractelement <2 x float> %127, i64 0, !dbg !67
  %147 = extractelement <2 x float> %127, i64 1, !dbg !68
  %148 = fsub float %146, %147, !dbg !67
  %149 = extractelement <2 x float> %145, i64 0, !dbg !67
  %150 = extractelement <2 x float> %145, i64 1, !dbg !68
  %151 = fsub float %149, %150, !dbg !67
  %152 = fmul float %148, %54, !dbg !69
  %153 = fmul float %151, %56, !dbg !69
  %154 = fadd float %147, %152, !dbg !68
  %155 = fadd float %150, %153, !dbg !68
  %156 = getelementptr float, ptr addrspace(1) %8, i64 %72, !dbg !70
  %157 = getelementptr float, ptr addrspace(1) %8, i64 %73, !dbg !70
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !71
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #2, !dbg !71
  %160 = getelementptr float, ptr addrspace(1) %8, i64 %84, !dbg !72
  %161 = getelementptr float, ptr addrspace(1) %8, i64 %85, !dbg !72
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !73
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #2, !dbg !73
  %164 = getelementptr float, ptr addrspace(1) %8, i64 %95, !dbg !74
  %165 = getelementptr float, ptr addrspace(1) %8, i64 %96, !dbg !74
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !75
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #2, !dbg !75
  %168 = getelementptr float, ptr addrspace(1) %8, i64 %101, !dbg !76
  %169 = getelementptr float, ptr addrspace(1) %8, i64 %102, !dbg !76
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !77
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #2, !dbg !77
  %172 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !75
  %173 = insertelement <2 x i32> %172, i32 %158, i64 1, !dbg !75
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !75
  %175 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !78
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !78
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %178 = fadd <2 x float> %177, %174, !dbg !78
  %179 = fcmp olt <2 x float> %178, zeroinitializer, !dbg !79
  %180 = select <2 x i1> %179, <2 x float> zeroinitializer, <2 x float> %178, !dbg !81
  %181 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !77
  %182 = insertelement <2 x i32> %181, i32 %162, i64 1, !dbg !77
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !77
  %184 = fadd <2 x float> %177, %183, !dbg !82
  %185 = fcmp olt <2 x float> %184, zeroinitializer, !dbg !83
  %186 = select <2 x i1> %185, <2 x float> zeroinitializer, <2 x float> %184, !dbg !85
  %187 = fsub <2 x float> %186, %180, !dbg !86
  %188 = fmul <2 x float> %187, %125, !dbg !87
  %189 = fadd <2 x float> %180, %188, !dbg !88
  %190 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !75
  %191 = insertelement <2 x i32> %190, i32 %159, i64 1, !dbg !75
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !75
  %193 = fadd <2 x float> %177, %192, !dbg !78
  %194 = fcmp olt <2 x float> %193, zeroinitializer, !dbg !79
  %195 = select <2 x i1> %194, <2 x float> zeroinitializer, <2 x float> %193, !dbg !81
  %196 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !77
  %197 = insertelement <2 x i32> %196, i32 %163, i64 1, !dbg !77
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !77
  %199 = fadd <2 x float> %177, %198, !dbg !82
  %200 = fcmp olt <2 x float> %199, zeroinitializer, !dbg !83
  %201 = select <2 x i1> %200, <2 x float> zeroinitializer, <2 x float> %199, !dbg !85
  %202 = fsub <2 x float> %201, %195, !dbg !86
  %203 = fmul <2 x float> %202, %143, !dbg !87
  %204 = fadd <2 x float> %195, %203, !dbg !88
  %205 = extractelement <2 x float> %189, i64 0, !dbg !89
  %206 = extractelement <2 x float> %189, i64 1, !dbg !90
  %207 = fsub float %205, %206, !dbg !89
  %208 = extractelement <2 x float> %204, i64 0, !dbg !89
  %209 = extractelement <2 x float> %204, i64 1, !dbg !90
  %210 = fsub float %208, %209, !dbg !89
  %211 = fmul float %207, %54, !dbg !91
  %212 = fmul float %210, %56, !dbg !91
  %213 = fadd float %206, %211, !dbg !90
  %214 = fadd float %209, %212, !dbg !90
  %215 = getelementptr float, ptr addrspace(1) %10, i64 %72, !dbg !92
  %216 = getelementptr float, ptr addrspace(1) %10, i64 %73, !dbg !92
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 true) #2, !dbg !93
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #2, !dbg !93
  %219 = getelementptr float, ptr addrspace(1) %10, i64 %84, !dbg !94
  %220 = getelementptr float, ptr addrspace(1) %10, i64 %85, !dbg !94
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 true) #2, !dbg !95
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !95
  %223 = getelementptr float, ptr addrspace(1) %10, i64 %95, !dbg !96
  %224 = getelementptr float, ptr addrspace(1) %10, i64 %96, !dbg !96
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #2, !dbg !97
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #2, !dbg !97
  %227 = getelementptr float, ptr addrspace(1) %10, i64 %101, !dbg !98
  %228 = getelementptr float, ptr addrspace(1) %10, i64 %102, !dbg !98
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #2, !dbg !99
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !99
  %231 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !97
  %232 = insertelement <2 x i32> %231, i32 %217, i64 1, !dbg !97
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !97
  %234 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !100
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !100
  %236 = shufflevector <2 x float> %235, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %237 = fadd <2 x float> %236, %233, !dbg !100
  %238 = fcmp olt <2 x float> %237, zeroinitializer, !dbg !101
  %239 = select <2 x i1> %238, <2 x float> zeroinitializer, <2 x float> %237, !dbg !103
  %240 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !99
  %241 = insertelement <2 x i32> %240, i32 %221, i64 1, !dbg !99
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !99
  %243 = fadd <2 x float> %236, %242, !dbg !104
  %244 = fcmp olt <2 x float> %243, zeroinitializer, !dbg !105
  %245 = select <2 x i1> %244, <2 x float> zeroinitializer, <2 x float> %243, !dbg !107
  %246 = fsub <2 x float> %245, %239, !dbg !108
  %247 = fmul <2 x float> %246, %125, !dbg !109
  %248 = fadd <2 x float> %239, %247, !dbg !110
  %249 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !97
  %250 = insertelement <2 x i32> %249, i32 %218, i64 1, !dbg !97
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !97
  %252 = fadd <2 x float> %236, %251, !dbg !100
  %253 = fcmp olt <2 x float> %252, zeroinitializer, !dbg !101
  %254 = select <2 x i1> %253, <2 x float> zeroinitializer, <2 x float> %252, !dbg !103
  %255 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !99
  %256 = insertelement <2 x i32> %255, i32 %222, i64 1, !dbg !99
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !99
  %258 = fadd <2 x float> %236, %257, !dbg !104
  %259 = fcmp olt <2 x float> %258, zeroinitializer, !dbg !105
  %260 = select <2 x i1> %259, <2 x float> zeroinitializer, <2 x float> %258, !dbg !107
  %261 = fsub <2 x float> %260, %254, !dbg !108
  %262 = fmul <2 x float> %261, %143, !dbg !109
  %263 = fadd <2 x float> %254, %262, !dbg !110
  %264 = extractelement <2 x float> %248, i64 0, !dbg !111
  %265 = extractelement <2 x float> %248, i64 1, !dbg !112
  %266 = fsub float %264, %265, !dbg !111
  %267 = extractelement <2 x float> %263, i64 0, !dbg !111
  %268 = extractelement <2 x float> %263, i64 1, !dbg !112
  %269 = fsub float %267, %268, !dbg !111
  %270 = fmul float %266, %54, !dbg !113
  %271 = fmul float %269, %56, !dbg !113
  %272 = fadd float %265, %270, !dbg !112
  %273 = fadd float %268, %271, !dbg !112
  %274 = mul i32 %25, 13, !dbg !114
  %275 = mul i32 %26, 13, !dbg !114
  %276 = sext i32 %274 to i64, !dbg !115
  %277 = getelementptr float, ptr addrspace(1) %12, i64 %276, !dbg !115
  %278 = sext i32 %275 to i64, !dbg !115
  %279 = getelementptr float, ptr addrspace(1) %12, i64 %278, !dbg !115
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !116
  %281 = bitcast float %154 to i32, !dbg !116
  %282 = bitcast float %155 to i32, !dbg !116
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %280, i32 %281, i32 %282, i1 true) #2, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !116
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !116
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !116
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %277, i1 true) #2, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %279, i1 true) #2, !dbg !116
  %287 = getelementptr float, ptr addrspace(1) %13, i64 %276, !dbg !117
  %288 = getelementptr float, ptr addrspace(1) %13, i64 %278, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %289 = bitcast float %213 to i32, !dbg !118
  %290 = bitcast float %214 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %280, i32 %289, i32 %290, i1 true) #2, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %291 = load i32, ptr addrspace(3) %283, align 4, !dbg !118
  %292 = load i32, ptr addrspace(3) %285, align 4, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %287, i1 true) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %292, ptr addrspace(1) %288, i1 true) #2, !dbg !118
  %293 = getelementptr float, ptr addrspace(1) %14, i64 %276, !dbg !119
  %294 = getelementptr float, ptr addrspace(1) %14, i64 %278, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %295 = bitcast float %272 to i32, !dbg !120
  %296 = bitcast float %273 to i32, !dbg !120
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %280, i32 %295, i32 %296, i1 true) #2, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %297 = load i32, ptr addrspace(3) %283, align 4, !dbg !120
  %298 = load i32, ptr addrspace(3) %285, align 4, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %297, ptr addrspace(1) %293, i1 true) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %294, i1 true) #2, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2tjz2ei33os7ffvaepxt4vddjme2lwdlmxs4p66g5vchnzcku5n.py", directory: "inductor_cache/2t")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_40", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 20, scope: !7)
!32 = !DILocation(line: 38, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 32, scope: !7)
!34 = !DILocation(line: 46, column: 32, scope: !7)
!35 = !DILocation(line: 47, column: 39, scope: !7)
!36 = !DILocation(line: 47, column: 49, scope: !7)
!37 = !DILocation(line: 47, column: 46, scope: !7)
!38 = !DILocation(line: 47, column: 37, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !7)
!40 = !DILocation(line: 47, column: 54, scope: !7)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 54, column: 48, scope: !7)
!43 = !DILocation(line: 54, column: 31, scope: !7)
!44 = !DILocation(line: 54, column: 56, scope: !7)
!45 = !DILocation(line: 62, column: 35, scope: !7)
!46 = !DILocation(line: 63, column: 40, scope: !7)
!47 = !DILocation(line: 63, column: 38, scope: !7)
!48 = !DILocation(line: 63, column: 48, scope: !7)
!49 = !DILocation(line: 63, column: 31, scope: !7)
!50 = !DILocation(line: 63, column: 56, scope: !7)
!51 = !DILocation(line: 66, column: 49, scope: !7)
!52 = !DILocation(line: 66, column: 31, scope: !7)
!53 = !DILocation(line: 66, column: 57, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 65, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 68, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 75, column: 31, scope: !7)
!71 = !DILocation(line: 75, column: 55, scope: !7)
!72 = !DILocation(line: 78, column: 31, scope: !7)
!73 = !DILocation(line: 78, column: 56, scope: !7)
!74 = !DILocation(line: 84, column: 31, scope: !7)
!75 = !DILocation(line: 84, column: 56, scope: !7)
!76 = !DILocation(line: 87, column: 31, scope: !7)
!77 = !DILocation(line: 87, column: 57, scope: !7)
!78 = !DILocation(line: 85, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !80)
!80 = !DILocation(line: 86, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !80)
!82 = !DILocation(line: 88, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !84)
!84 = !DILocation(line: 89, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !84)
!86 = !DILocation(line: 90, column: 20, scope: !7)
!87 = !DILocation(line: 91, column: 20, scope: !7)
!88 = !DILocation(line: 92, column: 20, scope: !7)
!89 = !DILocation(line: 93, column: 20, scope: !7)
!90 = !DILocation(line: 95, column: 20, scope: !7)
!91 = !DILocation(line: 94, column: 20, scope: !7)
!92 = !DILocation(line: 96, column: 32, scope: !7)
!93 = !DILocation(line: 96, column: 56, scope: !7)
!94 = !DILocation(line: 99, column: 32, scope: !7)
!95 = !DILocation(line: 99, column: 57, scope: !7)
!96 = !DILocation(line: 105, column: 32, scope: !7)
!97 = !DILocation(line: 105, column: 57, scope: !7)
!98 = !DILocation(line: 108, column: 32, scope: !7)
!99 = !DILocation(line: 108, column: 58, scope: !7)
!100 = !DILocation(line: 106, column: 20, scope: !7)
!101 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 42, scope: !7)
!103 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !102)
!104 = !DILocation(line: 109, column: 20, scope: !7)
!105 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !106)
!106 = !DILocation(line: 110, column: 42, scope: !7)
!107 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !106)
!108 = !DILocation(line: 111, column: 20, scope: !7)
!109 = !DILocation(line: 112, column: 20, scope: !7)
!110 = !DILocation(line: 113, column: 20, scope: !7)
!111 = !DILocation(line: 114, column: 20, scope: !7)
!112 = !DILocation(line: 116, column: 20, scope: !7)
!113 = !DILocation(line: 115, column: 20, scope: !7)
!114 = !DILocation(line: 117, column: 28, scope: !7)
!115 = !DILocation(line: 117, column: 25, scope: !7)
!116 = !DILocation(line: 117, column: 40, scope: !7)
!117 = !DILocation(line: 118, column: 25, scope: !7)
!118 = !DILocation(line: 118, column: 40, scope: !7)
!119 = !DILocation(line: 119, column: 25, scope: !7)
!120 = !DILocation(line: 119, column: 40, scope: !7)
!121 = !DILocation(line: 119, column: 4, scope: !7)
