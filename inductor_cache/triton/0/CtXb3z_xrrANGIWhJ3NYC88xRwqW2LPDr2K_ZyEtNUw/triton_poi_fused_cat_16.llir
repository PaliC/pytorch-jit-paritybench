; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 34112, !dbg !14
  %.frozen19 = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen19, 16, !dbg !15
  %17 = srem i32 %16, 533, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen, 8528, !dbg !17
  %19 = icmp slt i32 %17, 512, !dbg !18
  %20 = mul i32 %18, 8528, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %20, !dbg !19
  %21 = shl nsw i32 %18, 13, !dbg !20
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = and i1 %15, %19, !dbg !23
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %27 = sext i32 %17 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %37 = bitcast i32 %36 to float, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = fadd float %35, 0x3EE4F8B580000000, !dbg !29
  %43 = fadd float %37, 0x3EE4F8B580000000, !dbg !29
  %44 = fadd float %39, 0x3EE4F8B580000000, !dbg !29
  %45 = fadd float %41, 0x3EE4F8B580000000, !dbg !29
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %46, 0, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %47, 0, !dbg !30
  br i1 %.not.i, label %53, label %48, !dbg !30

48:                                               ; preds = %8
  br i1 %.not1.i, label %51, label %49, !dbg !30

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

53:                                               ; preds = %8
  br i1 %.not1.i, label %56, label %54, !dbg !30

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %58, 0, !dbg !30
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !30
  br i1 %.not.i1, label %65, label %60, !dbg !30

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !30

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !30

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %70, 0, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %71, 0, !dbg !30
  br i1 %.not.i6, label %77, label %72, !dbg !30

72:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %75, label %73, !dbg !30

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !30

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %73, %75, %78, %80
  %.0.i8 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %82, 0, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %83, 0, !dbg !30
  br i1 %.not.i11, label %89, label %84, !dbg !30

84:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %87, label %85, !dbg !30

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !30

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %85, %87, %90, %92
  %.0.i13 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !24
  %95 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !26
  %96 = insertelement <4 x i32> %95, i32 %31, i64 1, !dbg !26
  %97 = insertelement <4 x i32> %96, i32 %30, i64 2, !dbg !26
  %98 = insertelement <4 x i32> %97, i32 %29, i64 3, !dbg !26
  %99 = bitcast <4 x i32> %98 to <4 x float>, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !24
  %101 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !24
  %103 = mul i32 %16, 16, !dbg !31
  %.decomposed = sub i32 %.frozen19, %103, !dbg !31
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !33
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !35
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %25, i32 0, i1 %25) #3, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %25, i32 0, i1 %25) #3, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %25, i32 0, i1 %25) #3, !dbg !36
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %25, i32 0, i1 %25) #3, !dbg !36
  %118 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !24
  %119 = insertelement <4 x i32> %118, i32 %100, i64 1, !dbg !24
  %120 = insertelement <4 x i32> %119, i32 %101, i64 2, !dbg !24
  %121 = insertelement <4 x i32> %120, i32 %102, i64 3, !dbg !24
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !24
  %123 = fsub <4 x float> %122, %99, !dbg !37
  %124 = insertelement <4 x float> poison, float %107, i64 0, !dbg !38
  %125 = insertelement <4 x float> %124, float %106, i64 1, !dbg !38
  %126 = insertelement <4 x float> %125, float %105, i64 2, !dbg !38
  %127 = insertelement <4 x float> %126, float %104, i64 3, !dbg !38
  %128 = fmul <4 x float> %123, %127, !dbg !38
  %129 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !34
  %130 = insertelement <4 x i32> %129, i32 %111, i64 1, !dbg !34
  %131 = insertelement <4 x i32> %130, i32 %110, i64 2, !dbg !34
  %132 = insertelement <4 x i32> %131, i32 %109, i64 3, !dbg !34
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !34
  %134 = fmul <4 x float> %128, %133, !dbg !39
  %135 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !36
  %136 = insertelement <4 x i32> %135, i32 %116, i64 1, !dbg !36
  %137 = insertelement <4 x i32> %136, i32 %115, i64 2, !dbg !36
  %138 = insertelement <4 x i32> %137, i32 %114, i64 3, !dbg !36
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !36
  %140 = fadd <4 x float> %134, %139, !dbg !40
  %141 = fcmp olt <4 x float> %140, zeroinitializer, !dbg !41
  %142 = extractelement <4 x i1> %141, i64 3, !dbg !45
  %143 = extractelement <4 x i1> %141, i64 2, !dbg !45
  %144 = extractelement <4 x i1> %141, i64 1, !dbg !45
  %145 = extractelement <4 x i1> %141, i64 0, !dbg !45
  %146 = icmp sgt i32 %17, 511, !dbg !46
  %147 = shl nsw i32 %17, 4, !dbg !47
  %148 = mul nsw i32 %18, 336, !dbg !48
  %149 = add nsw i32 %.decomposed, -8192, !dbg !47
  %150 = add nsw i32 %149, %148, !dbg !49
  %151 = add nsw i32 %150, %147, !dbg !50
  %152 = sext i32 %151 to i64, !dbg !51
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !51
  %154 = and i1 %15, %146, !dbg !52
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #3, !dbg !53
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !53
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !53
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !53
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !53
  %160 = sext i32 %14 to i64, !dbg !54
  %161 = getelementptr float, ptr addrspace(1) %6, i64 %160, !dbg !54
  %bc = bitcast <4 x float> %140 to <4 x i32>, !dbg !55
  %162 = extractelement <4 x i32> %bc, i64 3, !dbg !55
  %163 = select i1 %142, i32 0, i32 %162, !dbg !45
  %164 = select i1 %19, i32 %163, i32 %156, !dbg !56
  %bc16 = bitcast <4 x float> %140 to <4 x i32>, !dbg !55
  %165 = extractelement <4 x i32> %bc16, i64 2, !dbg !55
  %166 = select i1 %143, i32 0, i32 %165, !dbg !45
  %167 = select i1 %19, i32 %166, i32 %157, !dbg !56
  %bc17 = bitcast <4 x float> %140 to <4 x i32>, !dbg !55
  %168 = extractelement <4 x i32> %bc17, i64 1, !dbg !55
  %169 = select i1 %144, i32 0, i32 %168, !dbg !45
  %170 = select i1 %19, i32 %169, i32 %158, !dbg !56
  %bc18 = bitcast <4 x float> %140 to <4 x i32>, !dbg !55
  %171 = extractelement <4 x i32> %bc18, i64 0, !dbg !55
  %172 = select i1 %145, i32 0, i32 %171, !dbg !45
  %173 = select i1 %19, i32 %172, i32 %159, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %167, i32 %170, i32 %173, ptr addrspace(1) %161, i1 %15) #3, !dbg !55
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxzbga7h2r75ojkqbwcd4b4m2hrxhszfwycskzvb4sgy26kbrzci.py", directory: "inductor_cache/xz")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 62, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 25, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 50, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 40, scope: !7)
!48 = !DILocation(line: 56, column: 59, scope: !7)
!49 = !DILocation(line: 56, column: 36, scope: !7)
!50 = !DILocation(line: 56, column: 55, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 72, scope: !7)
!53 = !DILocation(line: 56, column: 64, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 37, scope: !7)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 58, column: 4, scope: !7)
