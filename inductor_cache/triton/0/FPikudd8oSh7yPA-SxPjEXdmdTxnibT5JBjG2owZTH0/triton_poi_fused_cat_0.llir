; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 192, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 12, !dbg !15
  %11 = mul i32 %10, 12, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = icmp slt i32 %.decomposed, 4, !dbg !17
  %13 = shl nsw i32 %.decomposed, 2, !dbg !18
  %14 = shl i32 %10, 4, !dbg !19
  %15 = add i32 %13, %14, !dbg !20
  %16 = sext i32 %15 to i64, !dbg !21
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !21
  %18 = and i1 %9, %12, !dbg !22
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18) #1, !dbg !23
  %20 = bitcast i32 %19 to float, !dbg !23
  %21 = or disjoint i32 %15, 1, !dbg !24
  %22 = sext i32 %21 to i64, !dbg !25
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !25
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18) #1, !dbg !26
  %25 = bitcast i32 %24 to float, !dbg !26
  %26 = fcmp olt float %20, %25, !dbg !27
  %27 = fcmp uno float %20, 0.000000e+00, !dbg !31
  %28 = or i1 %27, %26, !dbg !32
  %29 = select i1 %28, float %20, float %25, !dbg !33
  %30 = or disjoint i32 %15, 2, !dbg !34
  %31 = sext i32 %30 to i64, !dbg !35
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !35
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18) #1, !dbg !36
  %34 = bitcast i32 %33 to float, !dbg !36
  %35 = fcmp olt float %29, %34, !dbg !37
  %36 = fcmp uno float %29, 0.000000e+00, !dbg !39
  %37 = or i1 %35, %36, !dbg !40
  %38 = select i1 %37, float %29, float %34, !dbg !41
  %39 = or disjoint i32 %15, 3, !dbg !42
  %40 = sext i32 %39 to i64, !dbg !43
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !43
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #1, !dbg !44
  %43 = bitcast i32 %42 to float, !dbg !44
  %44 = fcmp olt float %38, %43, !dbg !45
  %45 = fcmp uno float %38, 0.000000e+00, !dbg !47
  %46 = or i1 %44, %45, !dbg !48
  %47 = select i1 %46, float %38, float %43, !dbg !49
  %48 = and i32 %.decomposed, -4, !dbg !50
  %49 = icmp eq i32 %48, 4, !dbg !50
  %50 = add i32 %15, -16, !dbg !51
  %51 = sext i32 %50 to i64, !dbg !52
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !52
  %53 = and i1 %9, %49, !dbg !53
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #1, !dbg !54
  %55 = bitcast i32 %54 to float, !dbg !54
  %56 = add i32 %15, -15, !dbg !55
  %57 = sext i32 %56 to i64, !dbg !56
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !56
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %53, i32 0, i1 %53) #1, !dbg !57
  %60 = bitcast i32 %59 to float, !dbg !57
  %61 = fadd float %55, %60, !dbg !58
  %62 = add i32 %15, -14, !dbg !59
  %63 = sext i32 %62 to i64, !dbg !60
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !60
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %53, i32 0, i1 %53) #1, !dbg !61
  %66 = bitcast i32 %65 to float, !dbg !61
  %67 = fadd float %61, %66, !dbg !62
  %68 = add i32 %15, -13, !dbg !63
  %69 = sext i32 %68 to i64, !dbg !64
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !64
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %53, i32 0, i1 %53) #1, !dbg !65
  %72 = bitcast i32 %71 to float, !dbg !65
  %73 = fadd float %67, %72, !dbg !66
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 4.000000e+00) #1, !dbg !67
  %75 = icmp sgt i32 %.decomposed, 7, !dbg !68
  %76 = add i32 %15, -32, !dbg !69
  %77 = sext i32 %76 to i64, !dbg !70
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !70
  %79 = and i1 %9, %75, !dbg !71
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #1, !dbg !72
  %81 = bitcast i32 %80 to float, !dbg !72
  %82 = add i32 %15, -31, !dbg !73
  %83 = sext i32 %82 to i64, !dbg !74
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !74
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %79, i32 0, i1 %79) #1, !dbg !75
  %86 = bitcast i32 %85 to float, !dbg !75
  %87 = fcmp ogt float %81, %86, !dbg !76
  %88 = fcmp uno float %81, 0.000000e+00, !dbg !78
  %89 = or i1 %88, %87, !dbg !79
  %90 = select i1 %89, float %81, float %86, !dbg !80
  %91 = add i32 %15, -30, !dbg !81
  %92 = sext i32 %91 to i64, !dbg !82
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !82
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %79, i32 0, i1 %79) #1, !dbg !83
  %95 = bitcast i32 %94 to float, !dbg !83
  %96 = fcmp ogt float %90, %95, !dbg !84
  %97 = fcmp uno float %90, 0.000000e+00, !dbg !86
  %98 = or i1 %96, %97, !dbg !87
  %99 = select i1 %98, float %90, float %95, !dbg !88
  %100 = add i32 %15, -29, !dbg !89
  %101 = sext i32 %100 to i64, !dbg !90
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !90
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %79, i32 0, i1 %79) #1, !dbg !91
  %104 = bitcast i32 %103 to float, !dbg !91
  %105 = fcmp ogt float %99, %104, !dbg !92
  %106 = fcmp uno float %99, 0.000000e+00, !dbg !94
  %107 = or i1 %105, %106, !dbg !95
  %108 = select i1 %107, float %99, float %104, !dbg !96
  %109 = select i1 %75, float %108, float 0.000000e+00, !dbg !97
  %110 = select i1 %49, float %74, float %109, !dbg !98
  %111 = select i1 %12, float %47, float %110, !dbg !98
  %112 = sext i32 %8 to i64, !dbg !99
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !99
  %114 = bitcast float %111 to i32, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %9) #1, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgp7tatfa5qd5cjcbyx6cztrt6y3sxbi5jvfeldpn56662j2fegp.py", directory: "inductor_cache/gp")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 33, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 51, scope: !7)
!27 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 34, column: 40, scope: !7)
!31 = !DILocation(line: 112, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 112, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 51, scope: !7)
!37 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !28, inlinedAt: !38)
!40 = !DILocation(line: 112, column: 16, scope: !28, inlinedAt: !38)
!41 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !38)
!42 = !DILocation(line: 37, column: 44, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 52, scope: !7)
!45 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !46)
!46 = !DILocation(line: 38, column: 41, scope: !7)
!47 = !DILocation(line: 112, column: 21, scope: !28, inlinedAt: !46)
!48 = !DILocation(line: 112, column: 16, scope: !28, inlinedAt: !46)
!49 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !46)
!50 = !DILocation(line: 44, column: 20, scope: !7)
!51 = !DILocation(line: 45, column: 47, scope: !7)
!52 = !DILocation(line: 45, column: 31, scope: !7)
!53 = !DILocation(line: 45, column: 63, scope: !7)
!54 = !DILocation(line: 45, column: 55, scope: !7)
!55 = !DILocation(line: 46, column: 51, scope: !7)
!56 = !DILocation(line: 46, column: 31, scope: !7)
!57 = !DILocation(line: 46, column: 59, scope: !7)
!58 = !DILocation(line: 47, column: 20, scope: !7)
!59 = !DILocation(line: 48, column: 51, scope: !7)
!60 = !DILocation(line: 48, column: 31, scope: !7)
!61 = !DILocation(line: 48, column: 59, scope: !7)
!62 = !DILocation(line: 49, column: 20, scope: !7)
!63 = !DILocation(line: 50, column: 51, scope: !7)
!64 = !DILocation(line: 50, column: 31, scope: !7)
!65 = !DILocation(line: 50, column: 59, scope: !7)
!66 = !DILocation(line: 51, column: 20, scope: !7)
!67 = !DILocation(line: 53, column: 20, scope: !7)
!68 = !DILocation(line: 56, column: 20, scope: !7)
!69 = !DILocation(line: 59, column: 47, scope: !7)
!70 = !DILocation(line: 59, column: 31, scope: !7)
!71 = !DILocation(line: 59, column: 63, scope: !7)
!72 = !DILocation(line: 59, column: 55, scope: !7)
!73 = !DILocation(line: 60, column: 51, scope: !7)
!74 = !DILocation(line: 60, column: 31, scope: !7)
!75 = !DILocation(line: 60, column: 59, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !77)
!77 = !DILocation(line: 61, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !77)
!81 = !DILocation(line: 62, column: 51, scope: !7)
!82 = !DILocation(line: 62, column: 31, scope: !7)
!83 = !DILocation(line: 62, column: 59, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !85)
!85 = !DILocation(line: 63, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !85)
!89 = !DILocation(line: 64, column: 51, scope: !7)
!90 = !DILocation(line: 64, column: 31, scope: !7)
!91 = !DILocation(line: 64, column: 59, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !93)
!93 = !DILocation(line: 65, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !93)
!97 = !DILocation(line: 67, column: 35, scope: !7)
!98 = !DILocation(line: 0, scope: !7)
!99 = !DILocation(line: 70, column: 25, scope: !7)
!100 = !DILocation(line: 70, column: 37, scope: !7)
!101 = !DILocation(line: 70, column: 4, scope: !7)
