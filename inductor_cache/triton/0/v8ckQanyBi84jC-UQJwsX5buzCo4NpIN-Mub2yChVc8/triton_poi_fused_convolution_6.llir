; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %.lobit1 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = icmp slt i32 %11, 16, !dbg !14
  %17 = icmp slt i32 %12, 16, !dbg !14
  %18 = icmp slt i32 %13, 16, !dbg !14
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = lshr i32 %7, 2, !dbg !17
  %24 = and i32 %23, 31, !dbg !17
  %25 = and i32 %7, 31, !dbg !17
  %26 = or disjoint i32 %22, %24, !dbg !18
  %27 = or disjoint i32 %22, %25, !dbg !18
  %28 = icmp slt i32 %26, 17, !dbg !19
  %29 = icmp slt i32 %27, 17, !dbg !19
  %30 = ashr exact i32 %11, 2, !dbg !20
  %31 = shl i32 %26, 2, !dbg !21
  %32 = mul i32 %30, 68, !dbg !22
  %33 = add i32 %31, %32, !dbg !23
  %34 = sext i32 %33 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = and i1 %16, %28, !dbg !25
  %37 = and i1 %17, %29, !dbg !25
  %38 = and i1 %18, %29, !dbg !25
  %39 = and i1 %19, %29, !dbg !25
  %40 = and i1 %20, %29, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = mul i32 %12, 17, !dbg !27
  %47 = mul i32 %13, 17, !dbg !27
  %48 = mul i32 %14, 17, !dbg !27
  %49 = mul i32 %15, 17, !dbg !27
  %50 = add i32 %27, %46, !dbg !28
  %51 = add i32 %27, %47, !dbg !28
  %52 = add i32 %27, %48, !dbg !28
  %53 = add i32 %27, %49, !dbg !28
  %54 = sext i32 %50 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = sext i32 %51 to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = sext i32 %52 to i64, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !29
  %60 = sext i32 %53 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !29
  %62 = shl i32 %7, 7, !dbg !30
  %63 = and i32 %62, 384, !dbg !30
  %64 = or disjoint i32 %63, %24, !dbg !30
  %65 = and i32 %7, 127, !dbg !30
  %66 = lshr exact i32 %63, 5, !dbg !30
  %67 = add nuw nsw i32 %66, %64, !dbg !30
  %68 = zext nneg i32 %67 to i64, !dbg !30
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !30
  %70 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !30
  %71 = or disjoint i32 %64, 32, !dbg !30
  %72 = lshr i32 %71, 5, !dbg !30
  %73 = add nuw nsw i32 %72, %71, !dbg !30
  %74 = zext nneg i32 %73 to i64, !dbg !30
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !30
  %76 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !30
  %77 = or disjoint i32 %64, 64, !dbg !30
  %78 = lshr i32 %77, 5, !dbg !30
  %79 = add nuw nsw i32 %78, %77, !dbg !30
  %80 = zext nneg i32 %79 to i64, !dbg !30
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !30
  %82 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !30
  %83 = or disjoint i32 %64, 96, !dbg !30
  %84 = lshr i32 %83, 5, !dbg !30
  %85 = add nuw nsw i32 %84, %83, !dbg !30
  %86 = zext nneg i32 %85 to i64, !dbg !30
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !30
  %88 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %89 = lshr i32 %65, 5, !dbg !30
  %90 = add nuw nsw i32 %89, %65, !dbg !30
  %91 = zext nneg i32 %90 to i64, !dbg !30
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !30
  %93 = load i32, ptr addrspace(3) %92, align 4, !dbg !30
  %94 = or disjoint i32 %65, 128, !dbg !30
  %95 = lshr i32 %94, 5, !dbg !30
  %96 = add nuw nsw i32 %95, %94, !dbg !30
  %97 = zext nneg i32 %96 to i64, !dbg !30
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !30
  %99 = load i32, ptr addrspace(3) %98, align 4, !dbg !30
  %100 = or disjoint i32 %65, 256, !dbg !30
  %101 = lshr i32 %100, 5, !dbg !30
  %102 = add nuw nsw i32 %101, %100, !dbg !30
  %103 = zext nneg i32 %102 to i64, !dbg !30
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !30
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !30
  %106 = or disjoint i32 %65, 384, !dbg !30
  %107 = lshr i32 %106, 5, !dbg !30
  %108 = add nuw nsw i32 %107, %106, !dbg !30
  %109 = zext nneg i32 %108 to i64, !dbg !30
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !30
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %55, i1 %37) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %57, i1 %38) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %59, i1 %39) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %61, i1 %40) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjz2dpb576mn2ksiqabtbbwwfi3mey64mkaooondzyctdfdswznf.py", directory: "inductor_cache/jz")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 32, column: 50, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
