; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = sdiv i32 %23, 4096, !dbg !14
  %26 = sdiv i32 %24, 4096, !dbg !14
  %27 = srem i32 %25, 32, !dbg !15
  %28 = srem i32 %26, 32, !dbg !15
  %29 = sext i32 %23 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !16
  %31 = sext i32 %24 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !17
  %35 = sext i32 %27 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = sext i32 %28 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %62 = bitcast i32 %61 to float, !dbg !21
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !21
  %64 = bitcast i32 %63 to float, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !26
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %9, i64 %37, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !33
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !33
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !33
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !33
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %10, i64 %37, !dbg !34
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !35
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !35
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !35
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !35
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !36
  %138 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !36
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !37
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %12, i64 %35, !dbg !38
  %142 = getelementptr float, ptr addrspace(1) %12, i64 %37, !dbg !38
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !39
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !39
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !39
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !39
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !39
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !39
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !39
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !40
  %152 = getelementptr float, ptr addrspace(1) %13, i64 %37, !dbg !40
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !41
  %154 = bitcast i32 %153 to float, !dbg !41
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !41
  %156 = bitcast i32 %155 to float, !dbg !41
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !41
  %158 = bitcast i32 %157 to float, !dbg !41
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !41
  %160 = bitcast i32 %159 to float, !dbg !41
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !41
  %164 = bitcast i32 %163 to float, !dbg !41
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !41
  %168 = bitcast i32 %167 to float, !dbg !41
  %169 = getelementptr float, ptr addrspace(1) %14, i64 %35, !dbg !42
  %170 = getelementptr float, ptr addrspace(1) %14, i64 %37, !dbg !42
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !43
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !43
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #3, !dbg !43
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !43
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !43
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !43
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !43
  %179 = getelementptr float, ptr addrspace(1) %15, i64 %35, !dbg !44
  %180 = getelementptr float, ptr addrspace(1) %15, i64 %37, !dbg !44
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !45
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !45
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !45
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !45
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !45
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !45
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !45
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !45
  %189 = fadd float %50, 0x3EE4F8B580000000, !dbg !46
  %190 = fadd float %52, 0x3EE4F8B580000000, !dbg !46
  %191 = fadd float %54, 0x3EE4F8B580000000, !dbg !46
  %192 = fadd float %56, 0x3EE4F8B580000000, !dbg !46
  %193 = fadd float %58, 0x3EE4F8B580000000, !dbg !46
  %194 = fadd float %60, 0x3EE4F8B580000000, !dbg !46
  %195 = fadd float %62, 0x3EE4F8B580000000, !dbg !46
  %196 = fadd float %64, 0x3EE4F8B580000000, !dbg !46
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %197, 0, !dbg !47
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %198, 0, !dbg !47
  br i1 %.not.i, label %204, label %199, !dbg !47

199:                                              ; preds = %17
  br i1 %.not1.i, label %202, label %200, !dbg !47

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

204:                                              ; preds = %17
  br i1 %.not1.i, label %207, label %205, !dbg !47

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %200, %202, %205, %207
  %.0.i = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !47
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %209, 0, !dbg !47
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %210, 0, !dbg !47
  br i1 %.not.i1, label %216, label %211, !dbg !47

211:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %214, label %212, !dbg !47

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

216:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %219, label %217, !dbg !47

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %212, %214, %217, %219
  %.0.i3 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !47
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %221, 0, !dbg !47
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %222, 0, !dbg !47
  br i1 %.not.i6, label %228, label %223, !dbg !47

223:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %226, label %224, !dbg !47

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

228:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %231, label %229, !dbg !47

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %224, %226, %229, %231
  %.0.i8 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !47
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %233, 0, !dbg !47
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %234, 0, !dbg !47
  br i1 %.not.i11, label %240, label %235, !dbg !47

235:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %238, label %236, !dbg !47

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

240:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %243, label %241, !dbg !47

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %236, %238, %241, %243
  %.0.i13 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !47
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i16 = icmp eq i32 %245, 0, !dbg !47
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i19 = icmp eq i32 %246, 0, !dbg !47
  br i1 %.not.i16, label %252, label %247, !dbg !47

247:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %250, label %248, !dbg !47

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

252:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %255, label %253, !dbg !47

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !47
  br label %__nv_sqrtf.exit20, !dbg !47

__nv_sqrtf.exit20:                                ; preds = %248, %250, %253, %255
  %.0.i18 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !47
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i21 = icmp eq i32 %257, 0, !dbg !47
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i24 = icmp eq i32 %258, 0, !dbg !47
  br i1 %.not.i21, label %264, label %259, !dbg !47

259:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %262, label %260, !dbg !47

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

264:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %267, label %265, !dbg !47

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !47
  br label %__nv_sqrtf.exit25, !dbg !47

__nv_sqrtf.exit25:                                ; preds = %260, %262, %265, %267
  %.0.i23 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !47
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i26 = icmp eq i32 %269, 0, !dbg !47
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i29 = icmp eq i32 %270, 0, !dbg !47
  br i1 %.not.i26, label %276, label %271, !dbg !47

271:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %274, label %272, !dbg !47

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

276:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %279, label %277, !dbg !47

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !47
  br label %__nv_sqrtf.exit30, !dbg !47

__nv_sqrtf.exit30:                                ; preds = %272, %274, %277, %279
  %.0.i28 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !47
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i31 = icmp eq i32 %281, 0, !dbg !47
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i34 = icmp eq i32 %282, 0, !dbg !47
  br i1 %.not.i31, label %288, label %283, !dbg !47

283:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %286, label %284, !dbg !47

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

288:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %291, label %289, !dbg !47

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !47
  br label %__nv_sqrtf.exit35, !dbg !47

__nv_sqrtf.exit35:                                ; preds = %284, %286, %289, %291
  %.0.i33 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !47
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !48
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !48
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !48
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !48
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !48
  %301 = fadd float %102, 0x3EE4F8B580000000, !dbg !49
  %302 = fadd float %104, 0x3EE4F8B580000000, !dbg !49
  %303 = fadd float %106, 0x3EE4F8B580000000, !dbg !49
  %304 = fadd float %108, 0x3EE4F8B580000000, !dbg !49
  %305 = fadd float %110, 0x3EE4F8B580000000, !dbg !49
  %306 = fadd float %112, 0x3EE4F8B580000000, !dbg !49
  %307 = fadd float %114, 0x3EE4F8B580000000, !dbg !49
  %308 = fadd float %116, 0x3EE4F8B580000000, !dbg !49
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i36 = icmp eq i32 %309, 0, !dbg !50
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i39 = icmp eq i32 %310, 0, !dbg !50
  br i1 %.not.i36, label %316, label %311, !dbg !50

311:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %314, label %312, !dbg !50

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

316:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %319, label %317, !dbg !50

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

__nv_sqrtf.exit40:                                ; preds = %312, %314, %317, %319
  %.0.i38 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !50
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i41 = icmp eq i32 %321, 0, !dbg !50
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i44 = icmp eq i32 %322, 0, !dbg !50
  br i1 %.not.i41, label %328, label %323, !dbg !50

323:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %326, label %324, !dbg !50

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

328:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %331, label %329, !dbg !50

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

__nv_sqrtf.exit45:                                ; preds = %324, %326, %329, %331
  %.0.i43 = phi float [ %325, %324 ], [ %327, %326 ], [ %330, %329 ], [ %332, %331 ], !dbg !50
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i46 = icmp eq i32 %333, 0, !dbg !50
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i49 = icmp eq i32 %334, 0, !dbg !50
  br i1 %.not.i46, label %340, label %335, !dbg !50

335:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %338, label %336, !dbg !50

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %303) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %303) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

340:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %343, label %341, !dbg !50

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.f(float %303) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.f(float %303) #3, !dbg !50
  br label %__nv_sqrtf.exit50, !dbg !50

__nv_sqrtf.exit50:                                ; preds = %336, %338, %341, %343
  %.0.i48 = phi float [ %337, %336 ], [ %339, %338 ], [ %342, %341 ], [ %344, %343 ], !dbg !50
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i51 = icmp eq i32 %345, 0, !dbg !50
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i54 = icmp eq i32 %346, 0, !dbg !50
  br i1 %.not.i51, label %352, label %347, !dbg !50

347:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %350, label %348, !dbg !50

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %304) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %304) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

352:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %355, label %353, !dbg !50

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.f(float %304) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.f(float %304) #3, !dbg !50
  br label %__nv_sqrtf.exit55, !dbg !50

__nv_sqrtf.exit55:                                ; preds = %348, %350, %353, %355
  %.0.i53 = phi float [ %349, %348 ], [ %351, %350 ], [ %354, %353 ], [ %356, %355 ], !dbg !50
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i56 = icmp eq i32 %357, 0, !dbg !50
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i59 = icmp eq i32 %358, 0, !dbg !50
  br i1 %.not.i56, label %364, label %359, !dbg !50

359:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %362, label %360, !dbg !50

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %305) #3, !dbg !50
  br label %__nv_sqrtf.exit60, !dbg !50

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %305) #3, !dbg !50
  br label %__nv_sqrtf.exit60, !dbg !50

364:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %367, label %365, !dbg !50

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %305) #3, !dbg !50
  br label %__nv_sqrtf.exit60, !dbg !50

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %305) #3, !dbg !50
  br label %__nv_sqrtf.exit60, !dbg !50

__nv_sqrtf.exit60:                                ; preds = %360, %362, %365, %367
  %.0.i58 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !50
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i61 = icmp eq i32 %369, 0, !dbg !50
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i64 = icmp eq i32 %370, 0, !dbg !50
  br i1 %.not.i61, label %376, label %371, !dbg !50

371:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %374, label %372, !dbg !50

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %306) #3, !dbg !50
  br label %__nv_sqrtf.exit65, !dbg !50

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %306) #3, !dbg !50
  br label %__nv_sqrtf.exit65, !dbg !50

376:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %379, label %377, !dbg !50

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %306) #3, !dbg !50
  br label %__nv_sqrtf.exit65, !dbg !50

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %306) #3, !dbg !50
  br label %__nv_sqrtf.exit65, !dbg !50

__nv_sqrtf.exit65:                                ; preds = %372, %374, %377, %379
  %.0.i63 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !50
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i66 = icmp eq i32 %381, 0, !dbg !50
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i69 = icmp eq i32 %382, 0, !dbg !50
  br i1 %.not.i66, label %388, label %383, !dbg !50

383:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %386, label %384, !dbg !50

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %307) #3, !dbg !50
  br label %__nv_sqrtf.exit70, !dbg !50

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %307) #3, !dbg !50
  br label %__nv_sqrtf.exit70, !dbg !50

388:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %391, label %389, !dbg !50

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %307) #3, !dbg !50
  br label %__nv_sqrtf.exit70, !dbg !50

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %307) #3, !dbg !50
  br label %__nv_sqrtf.exit70, !dbg !50

__nv_sqrtf.exit70:                                ; preds = %384, %386, %389, %391
  %.0.i68 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !50
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i71 = icmp eq i32 %393, 0, !dbg !50
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i74 = icmp eq i32 %394, 0, !dbg !50
  br i1 %.not.i71, label %400, label %395, !dbg !50

395:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %398, label %396, !dbg !50

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %308) #3, !dbg !50
  br label %__nv_sqrtf.exit75, !dbg !50

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %308) #3, !dbg !50
  br label %__nv_sqrtf.exit75, !dbg !50

400:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %403, label %401, !dbg !50

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %308) #3, !dbg !50
  br label %__nv_sqrtf.exit75, !dbg !50

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %308) #3, !dbg !50
  br label %__nv_sqrtf.exit75, !dbg !50

__nv_sqrtf.exit75:                                ; preds = %396, %398, %401, %403
  %.0.i73 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !50
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !51
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !51
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !51
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !51
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !51
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !51
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !51
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !51
  %413 = fadd float %154, 0x3EE4F8B580000000, !dbg !52
  %414 = fadd float %156, 0x3EE4F8B580000000, !dbg !52
  %415 = fadd float %158, 0x3EE4F8B580000000, !dbg !52
  %416 = fadd float %160, 0x3EE4F8B580000000, !dbg !52
  %417 = fadd float %162, 0x3EE4F8B580000000, !dbg !52
  %418 = fadd float %164, 0x3EE4F8B580000000, !dbg !52
  %419 = fadd float %166, 0x3EE4F8B580000000, !dbg !52
  %420 = fadd float %168, 0x3EE4F8B580000000, !dbg !52
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i76 = icmp eq i32 %421, 0, !dbg !53
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i79 = icmp eq i32 %422, 0, !dbg !53
  br i1 %.not.i76, label %428, label %423, !dbg !53

423:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %426, label %424, !dbg !53

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %413) #3, !dbg !53
  br label %__nv_sqrtf.exit80, !dbg !53

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %413) #3, !dbg !53
  br label %__nv_sqrtf.exit80, !dbg !53

428:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %431, label %429, !dbg !53

429:                                              ; preds = %428
  %430 = tail call float @llvm.nvvm.sqrt.rn.f(float %413) #3, !dbg !53
  br label %__nv_sqrtf.exit80, !dbg !53

431:                                              ; preds = %428
  %432 = tail call float @llvm.nvvm.sqrt.approx.f(float %413) #3, !dbg !53
  br label %__nv_sqrtf.exit80, !dbg !53

__nv_sqrtf.exit80:                                ; preds = %424, %426, %429, %431
  %.0.i78 = phi float [ %425, %424 ], [ %427, %426 ], [ %430, %429 ], [ %432, %431 ], !dbg !53
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i81 = icmp eq i32 %433, 0, !dbg !53
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i84 = icmp eq i32 %434, 0, !dbg !53
  br i1 %.not.i81, label %440, label %435, !dbg !53

435:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %438, label %436, !dbg !53

436:                                              ; preds = %435
  %437 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %414) #3, !dbg !53
  br label %__nv_sqrtf.exit85, !dbg !53

438:                                              ; preds = %435
  %439 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %414) #3, !dbg !53
  br label %__nv_sqrtf.exit85, !dbg !53

440:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %443, label %441, !dbg !53

441:                                              ; preds = %440
  %442 = tail call float @llvm.nvvm.sqrt.rn.f(float %414) #3, !dbg !53
  br label %__nv_sqrtf.exit85, !dbg !53

443:                                              ; preds = %440
  %444 = tail call float @llvm.nvvm.sqrt.approx.f(float %414) #3, !dbg !53
  br label %__nv_sqrtf.exit85, !dbg !53

__nv_sqrtf.exit85:                                ; preds = %436, %438, %441, %443
  %.0.i83 = phi float [ %437, %436 ], [ %439, %438 ], [ %442, %441 ], [ %444, %443 ], !dbg !53
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i86 = icmp eq i32 %445, 0, !dbg !53
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i89 = icmp eq i32 %446, 0, !dbg !53
  br i1 %.not.i86, label %452, label %447, !dbg !53

447:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %450, label %448, !dbg !53

448:                                              ; preds = %447
  %449 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %415) #3, !dbg !53
  br label %__nv_sqrtf.exit90, !dbg !53

450:                                              ; preds = %447
  %451 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %415) #3, !dbg !53
  br label %__nv_sqrtf.exit90, !dbg !53

452:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %455, label %453, !dbg !53

453:                                              ; preds = %452
  %454 = tail call float @llvm.nvvm.sqrt.rn.f(float %415) #3, !dbg !53
  br label %__nv_sqrtf.exit90, !dbg !53

455:                                              ; preds = %452
  %456 = tail call float @llvm.nvvm.sqrt.approx.f(float %415) #3, !dbg !53
  br label %__nv_sqrtf.exit90, !dbg !53

__nv_sqrtf.exit90:                                ; preds = %448, %450, %453, %455
  %.0.i88 = phi float [ %449, %448 ], [ %451, %450 ], [ %454, %453 ], [ %456, %455 ], !dbg !53
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i91 = icmp eq i32 %457, 0, !dbg !53
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i94 = icmp eq i32 %458, 0, !dbg !53
  br i1 %.not.i91, label %464, label %459, !dbg !53

459:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %462, label %460, !dbg !53

460:                                              ; preds = %459
  %461 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %416) #3, !dbg !53
  br label %__nv_sqrtf.exit95, !dbg !53

462:                                              ; preds = %459
  %463 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %416) #3, !dbg !53
  br label %__nv_sqrtf.exit95, !dbg !53

464:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %467, label %465, !dbg !53

465:                                              ; preds = %464
  %466 = tail call float @llvm.nvvm.sqrt.rn.f(float %416) #3, !dbg !53
  br label %__nv_sqrtf.exit95, !dbg !53

467:                                              ; preds = %464
  %468 = tail call float @llvm.nvvm.sqrt.approx.f(float %416) #3, !dbg !53
  br label %__nv_sqrtf.exit95, !dbg !53

__nv_sqrtf.exit95:                                ; preds = %460, %462, %465, %467
  %.0.i93 = phi float [ %461, %460 ], [ %463, %462 ], [ %466, %465 ], [ %468, %467 ], !dbg !53
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i96 = icmp eq i32 %469, 0, !dbg !53
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i99 = icmp eq i32 %470, 0, !dbg !53
  br i1 %.not.i96, label %476, label %471, !dbg !53

471:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %474, label %472, !dbg !53

472:                                              ; preds = %471
  %473 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %417) #3, !dbg !53
  br label %__nv_sqrtf.exit100, !dbg !53

474:                                              ; preds = %471
  %475 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %417) #3, !dbg !53
  br label %__nv_sqrtf.exit100, !dbg !53

476:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %479, label %477, !dbg !53

477:                                              ; preds = %476
  %478 = tail call float @llvm.nvvm.sqrt.rn.f(float %417) #3, !dbg !53
  br label %__nv_sqrtf.exit100, !dbg !53

479:                                              ; preds = %476
  %480 = tail call float @llvm.nvvm.sqrt.approx.f(float %417) #3, !dbg !53
  br label %__nv_sqrtf.exit100, !dbg !53

__nv_sqrtf.exit100:                               ; preds = %472, %474, %477, %479
  %.0.i98 = phi float [ %473, %472 ], [ %475, %474 ], [ %478, %477 ], [ %480, %479 ], !dbg !53
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i101 = icmp eq i32 %481, 0, !dbg !53
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i104 = icmp eq i32 %482, 0, !dbg !53
  br i1 %.not.i101, label %488, label %483, !dbg !53

483:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %486, label %484, !dbg !53

484:                                              ; preds = %483
  %485 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %418) #3, !dbg !53
  br label %__nv_sqrtf.exit105, !dbg !53

486:                                              ; preds = %483
  %487 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %418) #3, !dbg !53
  br label %__nv_sqrtf.exit105, !dbg !53

488:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %491, label %489, !dbg !53

489:                                              ; preds = %488
  %490 = tail call float @llvm.nvvm.sqrt.rn.f(float %418) #3, !dbg !53
  br label %__nv_sqrtf.exit105, !dbg !53

491:                                              ; preds = %488
  %492 = tail call float @llvm.nvvm.sqrt.approx.f(float %418) #3, !dbg !53
  br label %__nv_sqrtf.exit105, !dbg !53

__nv_sqrtf.exit105:                               ; preds = %484, %486, %489, %491
  %.0.i103 = phi float [ %485, %484 ], [ %487, %486 ], [ %490, %489 ], [ %492, %491 ], !dbg !53
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i106 = icmp eq i32 %493, 0, !dbg !53
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i109 = icmp eq i32 %494, 0, !dbg !53
  br i1 %.not.i106, label %500, label %495, !dbg !53

495:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %498, label %496, !dbg !53

496:                                              ; preds = %495
  %497 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %419) #3, !dbg !53
  br label %__nv_sqrtf.exit110, !dbg !53

498:                                              ; preds = %495
  %499 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %419) #3, !dbg !53
  br label %__nv_sqrtf.exit110, !dbg !53

500:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %503, label %501, !dbg !53

501:                                              ; preds = %500
  %502 = tail call float @llvm.nvvm.sqrt.rn.f(float %419) #3, !dbg !53
  br label %__nv_sqrtf.exit110, !dbg !53

503:                                              ; preds = %500
  %504 = tail call float @llvm.nvvm.sqrt.approx.f(float %419) #3, !dbg !53
  br label %__nv_sqrtf.exit110, !dbg !53

__nv_sqrtf.exit110:                               ; preds = %496, %498, %501, %503
  %.0.i108 = phi float [ %497, %496 ], [ %499, %498 ], [ %502, %501 ], [ %504, %503 ], !dbg !53
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i111 = icmp eq i32 %505, 0, !dbg !53
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i114 = icmp eq i32 %506, 0, !dbg !53
  br i1 %.not.i111, label %512, label %507, !dbg !53

507:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %510, label %508, !dbg !53

508:                                              ; preds = %507
  %509 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %420) #3, !dbg !53
  br label %__nv_sqrtf.exit115, !dbg !53

510:                                              ; preds = %507
  %511 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %420) #3, !dbg !53
  br label %__nv_sqrtf.exit115, !dbg !53

512:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %515, label %513, !dbg !53

513:                                              ; preds = %512
  %514 = tail call float @llvm.nvvm.sqrt.rn.f(float %420) #3, !dbg !53
  br label %__nv_sqrtf.exit115, !dbg !53

515:                                              ; preds = %512
  %516 = tail call float @llvm.nvvm.sqrt.approx.f(float %420) #3, !dbg !53
  br label %__nv_sqrtf.exit115, !dbg !53

__nv_sqrtf.exit115:                               ; preds = %508, %510, %513, %515
  %.0.i113 = phi float [ %509, %508 ], [ %511, %510 ], [ %514, %513 ], [ %516, %515 ], !dbg !53
  %517 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !37
  %518 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !19
  %519 = insertelement <2 x i32> %518, i32 %150, i64 1, !dbg !19
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !19
  %521 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !37
  %522 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !19
  %523 = insertelement <2 x i32> %522, i32 %149, i64 1, !dbg !19
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !19
  %525 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !37
  %526 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !19
  %527 = insertelement <2 x i32> %526, i32 %148, i64 1, !dbg !19
  %528 = bitcast <2 x i32> %527 to <2 x float>, !dbg !19
  %529 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !37
  %530 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %531 = insertelement <2 x i32> %530, i32 %147, i64 1, !dbg !19
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !19
  %533 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !37
  %534 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !19
  %535 = insertelement <2 x i32> %534, i32 %146, i64 1, !dbg !19
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !19
  %537 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !37
  %538 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %539 = insertelement <2 x i32> %538, i32 %145, i64 1, !dbg !19
  %540 = bitcast <2 x i32> %539 to <2 x float>, !dbg !19
  %541 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !37
  %542 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %543 = insertelement <2 x i32> %542, i32 %144, i64 1, !dbg !19
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !19
  %545 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !37
  %546 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %547 = insertelement <2 x i32> %546, i32 %143, i64 1, !dbg !19
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !19
  %549 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %550 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !23
  %551 = insertelement <2 x i32> %550, i32 %178, i64 1, !dbg !23
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !23
  %553 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !25
  %554 = insertelement <2 x i32> %553, i32 %188, i64 1, !dbg !25
  %555 = bitcast <2 x i32> %554 to <2 x float>, !dbg !25
  %556 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !27
  %557 = bitcast i32 %556 to float, !dbg !27
  %558 = bitcast i32 %98 to float, !dbg !29
  %559 = fsub float %557, %558, !dbg !54
  %560 = fmul float %559, %412, !dbg !55
  %561 = bitcast i32 %126 to float, !dbg !33
  %562 = fmul float %560, %561, !dbg !56
  %563 = bitcast i32 %136 to float, !dbg !35
  %564 = fadd float %562, %563, !dbg !57
  %565 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %566 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !23
  %567 = insertelement <2 x i32> %566, i32 %177, i64 1, !dbg !23
  %568 = bitcast <2 x i32> %567 to <2 x float>, !dbg !23
  %569 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !25
  %570 = insertelement <2 x i32> %569, i32 %187, i64 1, !dbg !25
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !25
  %572 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !27
  %573 = bitcast i32 %572 to float, !dbg !27
  %574 = bitcast i32 %97 to float, !dbg !29
  %575 = fsub float %573, %574, !dbg !54
  %576 = fmul float %575, %411, !dbg !55
  %577 = bitcast i32 %125 to float, !dbg !33
  %578 = fmul float %576, %577, !dbg !56
  %579 = bitcast i32 %135 to float, !dbg !35
  %580 = fadd float %578, %579, !dbg !57
  %581 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %582 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !23
  %583 = insertelement <2 x i32> %582, i32 %176, i64 1, !dbg !23
  %584 = bitcast <2 x i32> %583 to <2 x float>, !dbg !23
  %585 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !25
  %586 = insertelement <2 x i32> %585, i32 %186, i64 1, !dbg !25
  %587 = bitcast <2 x i32> %586 to <2 x float>, !dbg !25
  %588 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !27
  %589 = bitcast i32 %588 to float, !dbg !27
  %590 = bitcast i32 %96 to float, !dbg !29
  %591 = fsub float %589, %590, !dbg !54
  %592 = fmul float %591, %410, !dbg !55
  %593 = bitcast i32 %124 to float, !dbg !33
  %594 = fmul float %592, %593, !dbg !56
  %595 = bitcast i32 %134 to float, !dbg !35
  %596 = fadd float %594, %595, !dbg !57
  %597 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %598 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !23
  %599 = insertelement <2 x i32> %598, i32 %175, i64 1, !dbg !23
  %600 = bitcast <2 x i32> %599 to <2 x float>, !dbg !23
  %601 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !25
  %602 = insertelement <2 x i32> %601, i32 %185, i64 1, !dbg !25
  %603 = bitcast <2 x i32> %602 to <2 x float>, !dbg !25
  %604 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !27
  %605 = bitcast i32 %604 to float, !dbg !27
  %606 = bitcast i32 %95 to float, !dbg !29
  %607 = fsub float %605, %606, !dbg !54
  %608 = fmul float %607, %409, !dbg !55
  %609 = bitcast i32 %123 to float, !dbg !33
  %610 = fmul float %608, %609, !dbg !56
  %611 = bitcast i32 %133 to float, !dbg !35
  %612 = fadd float %610, %611, !dbg !57
  %613 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %614 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !23
  %615 = insertelement <2 x i32> %614, i32 %174, i64 1, !dbg !23
  %616 = bitcast <2 x i32> %615 to <2 x float>, !dbg !23
  %617 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !25
  %618 = insertelement <2 x i32> %617, i32 %184, i64 1, !dbg !25
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !25
  %620 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !27
  %621 = bitcast i32 %620 to float, !dbg !27
  %622 = bitcast i32 %94 to float, !dbg !29
  %623 = fsub float %621, %622, !dbg !54
  %624 = fmul float %623, %408, !dbg !55
  %625 = bitcast i32 %122 to float, !dbg !33
  %626 = fmul float %624, %625, !dbg !56
  %627 = bitcast i32 %132 to float, !dbg !35
  %628 = fadd float %626, %627, !dbg !57
  %629 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %630 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !23
  %631 = insertelement <2 x i32> %630, i32 %173, i64 1, !dbg !23
  %632 = bitcast <2 x i32> %631 to <2 x float>, !dbg !23
  %633 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !25
  %634 = insertelement <2 x i32> %633, i32 %183, i64 1, !dbg !25
  %635 = bitcast <2 x i32> %634 to <2 x float>, !dbg !25
  %636 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !27
  %637 = bitcast i32 %636 to float, !dbg !27
  %638 = bitcast i32 %93 to float, !dbg !29
  %639 = fsub float %637, %638, !dbg !54
  %640 = fmul float %639, %407, !dbg !55
  %641 = bitcast i32 %121 to float, !dbg !33
  %642 = fmul float %640, %641, !dbg !56
  %643 = bitcast i32 %131 to float, !dbg !35
  %644 = fadd float %642, %643, !dbg !57
  %645 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %646 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %647 = insertelement <2 x i32> %646, i32 %172, i64 1, !dbg !23
  %648 = bitcast <2 x i32> %647 to <2 x float>, !dbg !23
  %649 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !25
  %650 = insertelement <2 x i32> %649, i32 %182, i64 1, !dbg !25
  %651 = bitcast <2 x i32> %650 to <2 x float>, !dbg !25
  %652 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !27
  %653 = bitcast i32 %652 to float, !dbg !27
  %654 = bitcast i32 %92 to float, !dbg !29
  %655 = fsub float %653, %654, !dbg !54
  %656 = fmul float %655, %406, !dbg !55
  %657 = bitcast i32 %120 to float, !dbg !33
  %658 = fmul float %656, %657, !dbg !56
  %659 = bitcast i32 %130 to float, !dbg !35
  %660 = fadd float %658, %659, !dbg !57
  %661 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %662 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !23
  %663 = insertelement <2 x i32> %662, i32 %171, i64 1, !dbg !23
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !23
  %665 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !25
  %666 = insertelement <2 x i32> %665, i32 %181, i64 1, !dbg !25
  %667 = bitcast <2 x i32> %666 to <2 x float>, !dbg !25
  %668 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !27
  %669 = bitcast i32 %668 to float, !dbg !27
  %670 = bitcast i32 %91 to float, !dbg !29
  %671 = fsub float %669, %670, !dbg !54
  %672 = fmul float %671, %405, !dbg !55
  %673 = bitcast i32 %119 to float, !dbg !33
  %674 = fmul float %672, %673, !dbg !56
  %675 = bitcast i32 %129 to float, !dbg !35
  %676 = fadd float %674, %675, !dbg !57
  %677 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #3, !dbg !58
  %678 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #3, !dbg !58
  %679 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #3, !dbg !58
  %680 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i93) #3, !dbg !58
  %681 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i98) #3, !dbg !58
  %682 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i103) #3, !dbg !58
  %683 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i108) #3, !dbg !58
  %684 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i113) #3, !dbg !58
  %685 = insertelement <2 x i32> poison, i32 %661, i64 0, !dbg !17
  %686 = insertelement <2 x i32> %685, i32 %545, i64 1, !dbg !17
  %687 = bitcast <2 x i32> %686 to <2 x float>, !dbg !17
  %688 = fsub <2 x float> %687, %548, !dbg !59
  %689 = insertelement <2 x float> poison, float %293, i64 0, !dbg !60
  %690 = insertelement <2 x float> %689, float %677, i64 1, !dbg !60
  %691 = fmul <2 x float> %688, %690, !dbg !60
  %692 = fmul <2 x float> %691, %664, !dbg !61
  %693 = fadd <2 x float> %692, %667, !dbg !62
  %694 = extractelement <2 x float> %693, i64 0, !dbg !63
  %695 = fadd float %694, %676, !dbg !63
  %696 = insertelement <2 x i32> poison, i32 %645, i64 0, !dbg !17
  %697 = insertelement <2 x i32> %696, i32 %541, i64 1, !dbg !17
  %698 = bitcast <2 x i32> %697 to <2 x float>, !dbg !17
  %699 = fsub <2 x float> %698, %544, !dbg !59
  %700 = insertelement <2 x float> poison, float %294, i64 0, !dbg !60
  %701 = insertelement <2 x float> %700, float %678, i64 1, !dbg !60
  %702 = fmul <2 x float> %699, %701, !dbg !60
  %703 = fmul <2 x float> %702, %648, !dbg !61
  %704 = fadd <2 x float> %703, %651, !dbg !62
  %705 = extractelement <2 x float> %704, i64 0, !dbg !63
  %706 = fadd float %705, %660, !dbg !63
  %707 = insertelement <2 x i32> poison, i32 %629, i64 0, !dbg !17
  %708 = insertelement <2 x i32> %707, i32 %537, i64 1, !dbg !17
  %709 = bitcast <2 x i32> %708 to <2 x float>, !dbg !17
  %710 = fsub <2 x float> %709, %540, !dbg !59
  %711 = insertelement <2 x float> poison, float %295, i64 0, !dbg !60
  %712 = insertelement <2 x float> %711, float %679, i64 1, !dbg !60
  %713 = fmul <2 x float> %710, %712, !dbg !60
  %714 = fmul <2 x float> %713, %632, !dbg !61
  %715 = fadd <2 x float> %714, %635, !dbg !62
  %716 = extractelement <2 x float> %715, i64 0, !dbg !63
  %717 = fadd float %716, %644, !dbg !63
  %718 = insertelement <2 x i32> poison, i32 %613, i64 0, !dbg !17
  %719 = insertelement <2 x i32> %718, i32 %533, i64 1, !dbg !17
  %720 = bitcast <2 x i32> %719 to <2 x float>, !dbg !17
  %721 = fsub <2 x float> %720, %536, !dbg !59
  %722 = insertelement <2 x float> poison, float %296, i64 0, !dbg !60
  %723 = insertelement <2 x float> %722, float %680, i64 1, !dbg !60
  %724 = fmul <2 x float> %721, %723, !dbg !60
  %725 = fmul <2 x float> %724, %616, !dbg !61
  %726 = fadd <2 x float> %725, %619, !dbg !62
  %727 = extractelement <2 x float> %726, i64 0, !dbg !63
  %728 = fadd float %727, %628, !dbg !63
  %729 = insertelement <2 x i32> poison, i32 %597, i64 0, !dbg !17
  %730 = insertelement <2 x i32> %729, i32 %529, i64 1, !dbg !17
  %731 = bitcast <2 x i32> %730 to <2 x float>, !dbg !17
  %732 = fsub <2 x float> %731, %532, !dbg !59
  %733 = insertelement <2 x float> poison, float %297, i64 0, !dbg !60
  %734 = insertelement <2 x float> %733, float %681, i64 1, !dbg !60
  %735 = fmul <2 x float> %732, %734, !dbg !60
  %736 = fmul <2 x float> %735, %600, !dbg !61
  %737 = fadd <2 x float> %736, %603, !dbg !62
  %738 = extractelement <2 x float> %737, i64 0, !dbg !63
  %739 = fadd float %738, %612, !dbg !63
  %740 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !17
  %741 = insertelement <2 x i32> %740, i32 %525, i64 1, !dbg !17
  %742 = bitcast <2 x i32> %741 to <2 x float>, !dbg !17
  %743 = fsub <2 x float> %742, %528, !dbg !59
  %744 = insertelement <2 x float> poison, float %298, i64 0, !dbg !60
  %745 = insertelement <2 x float> %744, float %682, i64 1, !dbg !60
  %746 = fmul <2 x float> %743, %745, !dbg !60
  %747 = fmul <2 x float> %746, %584, !dbg !61
  %748 = fadd <2 x float> %747, %587, !dbg !62
  %749 = extractelement <2 x float> %748, i64 0, !dbg !63
  %750 = fadd float %749, %596, !dbg !63
  %751 = insertelement <2 x i32> poison, i32 %565, i64 0, !dbg !17
  %752 = insertelement <2 x i32> %751, i32 %521, i64 1, !dbg !17
  %753 = bitcast <2 x i32> %752 to <2 x float>, !dbg !17
  %754 = fsub <2 x float> %753, %524, !dbg !59
  %755 = insertelement <2 x float> poison, float %299, i64 0, !dbg !60
  %756 = insertelement <2 x float> %755, float %683, i64 1, !dbg !60
  %757 = fmul <2 x float> %754, %756, !dbg !60
  %758 = fmul <2 x float> %757, %568, !dbg !61
  %759 = fadd <2 x float> %758, %571, !dbg !62
  %760 = extractelement <2 x float> %759, i64 0, !dbg !63
  %761 = fadd float %760, %580, !dbg !63
  %762 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !17
  %763 = insertelement <2 x i32> %762, i32 %517, i64 1, !dbg !17
  %764 = bitcast <2 x i32> %763 to <2 x float>, !dbg !17
  %765 = fsub <2 x float> %764, %520, !dbg !59
  %766 = insertelement <2 x float> poison, float %300, i64 0, !dbg !60
  %767 = insertelement <2 x float> %766, float %684, i64 1, !dbg !60
  %768 = fmul <2 x float> %765, %767, !dbg !60
  %769 = fmul <2 x float> %768, %552, !dbg !61
  %770 = fadd <2 x float> %769, %555, !dbg !62
  %771 = extractelement <2 x float> %770, i64 0, !dbg !63
  %772 = fadd float %771, %564, !dbg !63
  %773 = extractelement <2 x float> %693, i64 1, !dbg !64
  %774 = fadd float %695, %773, !dbg !64
  %775 = extractelement <2 x float> %704, i64 1, !dbg !64
  %776 = fadd float %706, %775, !dbg !64
  %777 = extractelement <2 x float> %715, i64 1, !dbg !64
  %778 = fadd float %717, %777, !dbg !64
  %779 = extractelement <2 x float> %726, i64 1, !dbg !64
  %780 = fadd float %728, %779, !dbg !64
  %781 = extractelement <2 x float> %737, i64 1, !dbg !64
  %782 = fadd float %739, %781, !dbg !64
  %783 = extractelement <2 x float> %748, i64 1, !dbg !64
  %784 = fadd float %750, %783, !dbg !64
  %785 = extractelement <2 x float> %759, i64 1, !dbg !64
  %786 = fadd float %761, %785, !dbg !64
  %787 = extractelement <2 x float> %770, i64 1, !dbg !64
  %788 = fadd float %772, %787, !dbg !64
  %789 = fsub float 0.000000e+00, %774, !dbg !65
  %790 = fsub float 0.000000e+00, %776, !dbg !65
  %791 = fsub float 0.000000e+00, %778, !dbg !65
  %792 = fsub float 0.000000e+00, %780, !dbg !65
  %793 = fsub float 0.000000e+00, %782, !dbg !65
  %794 = fsub float 0.000000e+00, %784, !dbg !65
  %795 = fsub float 0.000000e+00, %786, !dbg !65
  %796 = fsub float 0.000000e+00, %788, !dbg !65
  %797 = fmul float %789, 0x3FF7154760000000, !dbg !69
  %798 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %797) #3, !dbg !69
  %799 = fmul float %790, 0x3FF7154760000000, !dbg !69
  %800 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %799) #3, !dbg !69
  %801 = fmul float %791, 0x3FF7154760000000, !dbg !69
  %802 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %801) #3, !dbg !69
  %803 = fmul float %792, 0x3FF7154760000000, !dbg !69
  %804 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %803) #3, !dbg !69
  %805 = fmul float %793, 0x3FF7154760000000, !dbg !69
  %806 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %805) #3, !dbg !69
  %807 = fmul float %794, 0x3FF7154760000000, !dbg !69
  %808 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %807) #3, !dbg !69
  %809 = fmul float %795, 0x3FF7154760000000, !dbg !69
  %810 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %809) #3, !dbg !69
  %811 = fmul float %796, 0x3FF7154760000000, !dbg !69
  %812 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %811) #3, !dbg !69
  %813 = fadd float %798, 1.000000e+00, !dbg !70
  %814 = fadd float %800, 1.000000e+00, !dbg !70
  %815 = fadd float %802, 1.000000e+00, !dbg !70
  %816 = fadd float %804, 1.000000e+00, !dbg !70
  %817 = fadd float %806, 1.000000e+00, !dbg !70
  %818 = fadd float %808, 1.000000e+00, !dbg !70
  %819 = fadd float %810, 1.000000e+00, !dbg !70
  %820 = fadd float %812, 1.000000e+00, !dbg !70
  %821 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %813) #3, !dbg !71
  %822 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %814) #3, !dbg !71
  %823 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %815) #3, !dbg !71
  %824 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %816) #3, !dbg !71
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %817) #3, !dbg !71
  %826 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %818) #3, !dbg !71
  %827 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %819) #3, !dbg !71
  %828 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %820) #3, !dbg !71
  %829 = fmul float %774, %821, !dbg !72
  %830 = fmul float %776, %822, !dbg !72
  %831 = fmul float %778, %823, !dbg !72
  %832 = fmul float %780, %824, !dbg !72
  %833 = fmul float %782, %825, !dbg !72
  %834 = fmul float %784, %826, !dbg !72
  %835 = fmul float %786, %827, !dbg !72
  %836 = fmul float %788, %828, !dbg !72
  %837 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !73
  %838 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !73
  %839 = bitcast float %829 to i32, !dbg !74
  %840 = bitcast float %830 to i32, !dbg !74
  %841 = bitcast float %831 to i32, !dbg !74
  %842 = bitcast float %832 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %839, i32 %840, i32 %841, i32 %842, ptr addrspace(1) %837, i1 true) #3, !dbg !74
  %843 = bitcast float %833 to i32, !dbg !74
  %844 = bitcast float %834 to i32, !dbg !74
  %845 = bitcast float %835 to i32, !dbg !74
  %846 = bitcast float %836 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %843, i32 %844, i32 %845, i32 %846, ptr addrspace(1) %838, i1 true) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccbrtbm4u5vinik2zxc45nuq423cisxlqtmsugoxykbskv6l4pvd.py", directory: "inductor_cache/cb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 26, scope: !7)
!48 = !DILocation(line: 46, column: 18, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 27, scope: !7)
!51 = !DILocation(line: 55, column: 19, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 27, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 19, scope: !7)
!59 = !DILocation(line: 41, column: 18, scope: !7)
!60 = !DILocation(line: 49, column: 19, scope: !7)
!61 = !DILocation(line: 50, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 70, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 28, scope: !7)
!74 = !DILocation(line: 72, column: 40, scope: !7)
!75 = !DILocation(line: 72, column: 4, scope: !7)
