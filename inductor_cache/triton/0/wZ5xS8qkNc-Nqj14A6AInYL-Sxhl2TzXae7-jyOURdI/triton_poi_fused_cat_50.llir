; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %30 = sdiv i32 %.frozen, 729, !dbg !14
  %.frozen37 = freeze i32 %29, !dbg !14
  %31 = sdiv i32 %.frozen37, 729, !dbg !14
  %32 = srem i32 %30, 1024, !dbg !15
  %33 = srem i32 %31, 1024, !dbg !15
  %34 = mul i32 %30, 729, !dbg !16
  %.decomposed = sub i32 %.frozen, %34, !dbg !16
  %35 = mul i32 %31, 729, !dbg !16
  %.decomposed38 = sub i32 %.frozen37, %35, !dbg !16
  %.frozen39 = freeze i32 %28, !dbg !17
  %36 = sdiv i32 %.frozen39, 746496, !dbg !17
  %37 = icmp slt i32 %32, 384, !dbg !18
  %38 = icmp slt i32 %33, 384, !dbg !18
  %39 = mul i32 %36, 746496, !dbg !19
  %srem.decomposed = sub i32 %.frozen39, %39, !dbg !19
  %srem1 = srem i32 %29, 746496, !dbg !19
  %40 = mul nsw i32 %36, 279936, !dbg !20
  %41 = add nsw i32 %40, %srem.decomposed, !dbg !21
  %42 = add nsw i32 %40, %srem1, !dbg !21
  %43 = sext i32 %41 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %42 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %37, i32 0, i1 %37) #3, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %38, i32 0, i1 %38) #3, !dbg !23
  %49 = sext i32 %32 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = sext i32 %33 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %37, i32 0, i1 %37) #3, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %38, i32 0, i1 %38) #3, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %37, i32 0, i1 %37) #3, !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !27
  %60 = bitcast i32 %59 to float, !dbg !27
  %61 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %62 = fadd float %60, 0x3EE4F8B580000000, !dbg !28
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %63, 0, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %64, 0, !dbg !29
  br i1 %.not.i, label %70, label %65, !dbg !29

65:                                               ; preds = %22
  br i1 %.not1.i, label %68, label %66, !dbg !29

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

70:                                               ; preds = %22
  br i1 %.not1.i, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !29
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i2 = icmp eq i32 %75, 0, !dbg !29
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i5 = icmp eq i32 %76, 0, !dbg !29
  br i1 %.not.i2, label %82, label %77, !dbg !29

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %80, label %78, !dbg !29

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

__nv_sqrtf.exit6:                                 ; preds = %78, %80, %83, %85
  %.0.i4 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !29
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %37, i32 0, i1 %37) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %97 = add nsw i32 %32, -384, !dbg !35
  %98 = icmp ult i32 %97, 384, !dbg !35
  %99 = add nsw i32 %33, -384, !dbg !35
  %100 = icmp ult i32 %99, 384, !dbg !35
  %101 = mul nsw i32 %97, 729, !dbg !36
  %102 = mul nsw i32 %99, 729, !dbg !36
  %103 = add nsw i32 %102, %.decomposed38, !dbg !37
  %104 = add nsw i32 %40, %.decomposed, !dbg !37
  %105 = add nsw i32 %104, %101, !dbg !38
  %106 = add nsw i32 %103, %40, !dbg !38
  %107 = sext i32 %105 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !39
  %109 = sext i32 %106 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !39
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %98, i32 0, i1 %98) #3, !dbg !40
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %100, i32 0, i1 %100) #3, !dbg !40
  %113 = sext i32 %97 to i64, !dbg !41
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %113, !dbg !41
  %115 = sext i32 %99 to i64, !dbg !41
  %116 = getelementptr float, ptr addrspace(1) %6, i64 %115, !dbg !41
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %98, i32 0, i1 %98) #3, !dbg !42
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %100, i32 0, i1 %100) #3, !dbg !42
  %119 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %7, i64 %115, !dbg !43
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %98, i32 0, i1 %98) #3, !dbg !44
  %122 = bitcast i32 %121 to float, !dbg !44
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %100, i32 0, i1 %100) #3, !dbg !44
  %124 = bitcast i32 %123 to float, !dbg !44
  %125 = fadd float %122, 0x3EE4F8B580000000, !dbg !45
  %126 = fadd float %124, 0x3EE4F8B580000000, !dbg !45
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i7 = icmp eq i32 %127, 0, !dbg !46
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i10 = icmp eq i32 %128, 0, !dbg !46
  br i1 %.not.i7, label %134, label %129, !dbg !46

129:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %132, label %130, !dbg !46

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

134:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %137, label %135, !dbg !46

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit11, !dbg !46

__nv_sqrtf.exit11:                                ; preds = %130, %132, %135, %137
  %.0.i9 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !46
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i12 = icmp eq i32 %139, 0, !dbg !46
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i15 = icmp eq i32 %140, 0, !dbg !46
  br i1 %.not.i12, label %146, label %141, !dbg !46

141:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %144, label %142, !dbg !46

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

146:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %149, label %147, !dbg !46

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit16, !dbg !46

__nv_sqrtf.exit16:                                ; preds = %142, %144, %147, %149
  %.0.i14 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !46
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !47
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !47
  %153 = getelementptr float, ptr addrspace(1) %8, i64 %113, !dbg !48
  %154 = getelementptr float, ptr addrspace(1) %8, i64 %115, !dbg !48
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %98, i32 0, i1 %98) #3, !dbg !49
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %100, i32 0, i1 %100) #3, !dbg !49
  %157 = getelementptr float, ptr addrspace(1) %9, i64 %113, !dbg !50
  %158 = getelementptr float, ptr addrspace(1) %9, i64 %115, !dbg !50
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %98, i32 0, i1 %98) #3, !dbg !51
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %100, i32 0, i1 %100) #3, !dbg !51
  %161 = and i32 %32, -128, !dbg !52
  %162 = icmp eq i32 %161, 768, !dbg !52
  %163 = and i32 %33, -128, !dbg !52
  %164 = icmp eq i32 %163, 768, !dbg !52
  %165 = add nsw i32 %32, -768, !dbg !53
  %166 = add nsw i32 %33, -768, !dbg !53
  %167 = mul nsw i32 %165, 729, !dbg !54
  %168 = mul nsw i32 %166, 729, !dbg !54
  %169 = mul nsw i32 %36, 93312, !dbg !55
  %170 = add nsw i32 %169, %.decomposed, !dbg !56
  %171 = add nsw i32 %170, %167, !dbg !57
  %172 = add nsw i32 %169, %.decomposed38, !dbg !56
  %173 = add nsw i32 %172, %168, !dbg !57
  %174 = sext i32 %171 to i64, !dbg !58
  %175 = getelementptr float, ptr addrspace(1) %10, i64 %174, !dbg !58
  %176 = sext i32 %173 to i64, !dbg !58
  %177 = getelementptr float, ptr addrspace(1) %10, i64 %176, !dbg !58
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %162, i32 0, i1 %162) #3, !dbg !59
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %164, i32 0, i1 %164) #3, !dbg !59
  %180 = sext i32 %165 to i64, !dbg !60
  %181 = getelementptr float, ptr addrspace(1) %11, i64 %180, !dbg !60
  %182 = sext i32 %166 to i64, !dbg !60
  %183 = getelementptr float, ptr addrspace(1) %11, i64 %182, !dbg !60
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %162, i32 0, i1 %162) #3, !dbg !61
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %164, i32 0, i1 %164) #3, !dbg !61
  %186 = getelementptr float, ptr addrspace(1) %12, i64 %180, !dbg !62
  %187 = getelementptr float, ptr addrspace(1) %12, i64 %182, !dbg !62
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %162, i32 0, i1 %162) #3, !dbg !63
  %189 = bitcast i32 %188 to float, !dbg !63
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %164, i32 0, i1 %164) #3, !dbg !63
  %191 = bitcast i32 %190 to float, !dbg !63
  %192 = fadd float %189, 0x3EE4F8B580000000, !dbg !64
  %193 = fadd float %191, 0x3EE4F8B580000000, !dbg !64
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i17 = icmp eq i32 %194, 0, !dbg !65
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i20 = icmp eq i32 %195, 0, !dbg !65
  br i1 %.not.i17, label %201, label %196, !dbg !65

196:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %199, label %197, !dbg !65

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit21, !dbg !65

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit21, !dbg !65

201:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %204, label %202, !dbg !65

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit21, !dbg !65

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit21, !dbg !65

__nv_sqrtf.exit21:                                ; preds = %197, %199, %202, %204
  %.0.i19 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !65
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i22 = icmp eq i32 %206, 0, !dbg !65
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i25 = icmp eq i32 %207, 0, !dbg !65
  br i1 %.not.i22, label %213, label %208, !dbg !65

208:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %211, label %209, !dbg !65

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !65
  br label %__nv_sqrtf.exit26, !dbg !65

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !65
  br label %__nv_sqrtf.exit26, !dbg !65

213:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %216, label %214, !dbg !65

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !65
  br label %__nv_sqrtf.exit26, !dbg !65

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !65
  br label %__nv_sqrtf.exit26, !dbg !65

__nv_sqrtf.exit26:                                ; preds = %209, %211, %214, %216
  %.0.i24 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !65
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !66
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !66
  %220 = getelementptr float, ptr addrspace(1) %13, i64 %180, !dbg !67
  %221 = getelementptr float, ptr addrspace(1) %13, i64 %182, !dbg !67
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %162, i32 0, i1 %162) #3, !dbg !68
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %164, i32 0, i1 %164) #3, !dbg !68
  %224 = getelementptr float, ptr addrspace(1) %14, i64 %180, !dbg !69
  %225 = getelementptr float, ptr addrspace(1) %14, i64 %182, !dbg !69
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %162, i32 0, i1 %162) #3, !dbg !70
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %164, i32 0, i1 %164) #3, !dbg !70
  %228 = icmp sgt i32 %32, 895, !dbg !71
  %229 = icmp sgt i32 %33, 895, !dbg !71
  %230 = add nsw i32 %32, -896, !dbg !72
  %231 = add nsw i32 %33, -896, !dbg !72
  %232 = mul nsw i32 %230, 729, !dbg !73
  %233 = mul nsw i32 %231, 729, !dbg !73
  %234 = add nsw i32 %233, %.decomposed38, !dbg !74
  %235 = add nsw i32 %170, %232, !dbg !75
  %236 = add nsw i32 %234, %169, !dbg !75
  %237 = sext i32 %235 to i64, !dbg !76
  %238 = getelementptr float, ptr addrspace(1) %15, i64 %237, !dbg !76
  %239 = sext i32 %236 to i64, !dbg !76
  %240 = getelementptr float, ptr addrspace(1) %15, i64 %239, !dbg !76
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %228, i32 0, i1 %228) #3, !dbg !77
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %229, i32 0, i1 %229) #3, !dbg !77
  %243 = sext i32 %230 to i64, !dbg !78
  %244 = getelementptr float, ptr addrspace(1) %16, i64 %243, !dbg !78
  %245 = sext i32 %231 to i64, !dbg !78
  %246 = getelementptr float, ptr addrspace(1) %16, i64 %245, !dbg !78
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %228, i32 0, i1 %228) #3, !dbg !79
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %229, i32 0, i1 %229) #3, !dbg !79
  %249 = getelementptr float, ptr addrspace(1) %17, i64 %243, !dbg !80
  %250 = getelementptr float, ptr addrspace(1) %17, i64 %245, !dbg !80
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %228, i32 0, i1 %228) #3, !dbg !81
  %252 = bitcast i32 %251 to float, !dbg !81
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %229, i32 0, i1 %229) #3, !dbg !81
  %254 = bitcast i32 %253 to float, !dbg !81
  %255 = fadd float %252, 0x3EE4F8B580000000, !dbg !82
  %256 = fadd float %254, 0x3EE4F8B580000000, !dbg !82
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !83
  %.not.i27 = icmp eq i32 %257, 0, !dbg !83
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !83
  %.not1.i30 = icmp eq i32 %258, 0, !dbg !83
  br i1 %.not.i27, label %264, label %259, !dbg !83

259:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %262, label %260, !dbg !83

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #3, !dbg !83
  br label %__nv_sqrtf.exit31, !dbg !83

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #3, !dbg !83
  br label %__nv_sqrtf.exit31, !dbg !83

264:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %267, label %265, !dbg !83

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #3, !dbg !83
  br label %__nv_sqrtf.exit31, !dbg !83

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #3, !dbg !83
  br label %__nv_sqrtf.exit31, !dbg !83

__nv_sqrtf.exit31:                                ; preds = %260, %262, %265, %267
  %.0.i29 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !83
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !83
  %.not.i32 = icmp eq i32 %269, 0, !dbg !83
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !83
  %.not1.i35 = icmp eq i32 %270, 0, !dbg !83
  br i1 %.not.i32, label %276, label %271, !dbg !83

271:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %274, label %272, !dbg !83

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #3, !dbg !83
  br label %__nv_sqrtf.exit36, !dbg !83

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #3, !dbg !83
  br label %__nv_sqrtf.exit36, !dbg !83

276:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %279, label %277, !dbg !83

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #3, !dbg !83
  br label %__nv_sqrtf.exit36, !dbg !83

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #3, !dbg !83
  br label %__nv_sqrtf.exit36, !dbg !83

__nv_sqrtf.exit36:                                ; preds = %272, %274, %277, %279
  %.0.i34 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !83
  %281 = insertelement <8 x i32> poison, i32 %242, i64 0, !dbg !77
  %282 = insertelement <8 x i32> %281, i32 %241, i64 1, !dbg !77
  %283 = insertelement <8 x i32> %282, i32 %47, i64 2, !dbg !77
  %284 = insertelement <8 x i32> %283, i32 %48, i64 3, !dbg !77
  %285 = insertelement <8 x i32> %284, i32 %111, i64 4, !dbg !77
  %286 = insertelement <8 x i32> %285, i32 %112, i64 5, !dbg !77
  %287 = insertelement <8 x i32> %286, i32 %178, i64 6, !dbg !77
  %288 = insertelement <8 x i32> %287, i32 %179, i64 7, !dbg !77
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !77
  %290 = insertelement <8 x i32> poison, i32 %248, i64 0, !dbg !79
  %291 = insertelement <8 x i32> %290, i32 %247, i64 1, !dbg !79
  %292 = insertelement <8 x i32> %291, i32 %53, i64 2, !dbg !79
  %293 = insertelement <8 x i32> %292, i32 %54, i64 3, !dbg !79
  %294 = insertelement <8 x i32> %293, i32 %117, i64 4, !dbg !79
  %295 = insertelement <8 x i32> %294, i32 %118, i64 5, !dbg !79
  %296 = insertelement <8 x i32> %295, i32 %184, i64 6, !dbg !79
  %297 = insertelement <8 x i32> %296, i32 %185, i64 7, !dbg !79
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !79
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !84
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !84
  %301 = getelementptr float, ptr addrspace(1) %18, i64 %243, !dbg !85
  %302 = getelementptr float, ptr addrspace(1) %18, i64 %245, !dbg !85
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %301, i1 %228, i32 0, i1 %228) #3, !dbg !86
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %229, i32 0, i1 %229) #3, !dbg !86
  %305 = getelementptr float, ptr addrspace(1) %19, i64 %243, !dbg !87
  %306 = getelementptr float, ptr addrspace(1) %19, i64 %245, !dbg !87
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %228, i32 0, i1 %228) #3, !dbg !88
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 %229, i32 0, i1 %229) #3, !dbg !88
  %309 = fsub <8 x float> %289, %298, !dbg !89
  %310 = insertelement <8 x float> poison, float %300, i64 0, !dbg !90
  %311 = insertelement <8 x float> %310, float %299, i64 1, !dbg !90
  %312 = insertelement <8 x float> %311, float %87, i64 2, !dbg !90
  %313 = insertelement <8 x float> %312, float %88, i64 3, !dbg !90
  %314 = insertelement <8 x float> %313, float %151, i64 4, !dbg !90
  %315 = insertelement <8 x float> %314, float %152, i64 5, !dbg !90
  %316 = insertelement <8 x float> %315, float %218, i64 6, !dbg !90
  %317 = insertelement <8 x float> %316, float %219, i64 7, !dbg !90
  %318 = fmul <8 x float> %309, %317, !dbg !90
  %319 = insertelement <8 x i32> poison, i32 %304, i64 0, !dbg !86
  %320 = insertelement <8 x i32> %319, i32 %303, i64 1, !dbg !86
  %321 = insertelement <8 x i32> %320, i32 %91, i64 2, !dbg !86
  %322 = insertelement <8 x i32> %321, i32 %92, i64 3, !dbg !86
  %323 = insertelement <8 x i32> %322, i32 %155, i64 4, !dbg !86
  %324 = insertelement <8 x i32> %323, i32 %156, i64 5, !dbg !86
  %325 = insertelement <8 x i32> %324, i32 %222, i64 6, !dbg !86
  %326 = insertelement <8 x i32> %325, i32 %223, i64 7, !dbg !86
  %327 = bitcast <8 x i32> %326 to <8 x float>, !dbg !86
  %328 = fmul <8 x float> %318, %327, !dbg !91
  %329 = insertelement <8 x i32> poison, i32 %308, i64 0, !dbg !88
  %330 = insertelement <8 x i32> %329, i32 %307, i64 1, !dbg !88
  %331 = insertelement <8 x i32> %330, i32 %95, i64 2, !dbg !88
  %332 = insertelement <8 x i32> %331, i32 %96, i64 3, !dbg !88
  %333 = insertelement <8 x i32> %332, i32 %159, i64 4, !dbg !88
  %334 = insertelement <8 x i32> %333, i32 %160, i64 5, !dbg !88
  %335 = insertelement <8 x i32> %334, i32 %226, i64 6, !dbg !88
  %336 = insertelement <8 x i32> %335, i32 %227, i64 7, !dbg !88
  %337 = bitcast <8 x i32> %336 to <8 x float>, !dbg !88
  %338 = fadd <8 x float> %328, %337, !dbg !92
  %339 = fcmp olt <8 x float> %338, zeroinitializer, !dbg !93
  %340 = extractelement <8 x i1> %339, i64 7, !dbg !97
  %341 = extractelement <8 x float> %338, i64 7, !dbg !97
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !97
  %343 = extractelement <8 x i1> %339, i64 6, !dbg !97
  %344 = extractelement <8 x float> %338, i64 6, !dbg !97
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !97
  %346 = extractelement <8 x i1> %339, i64 5, !dbg !99
  %347 = extractelement <8 x float> %338, i64 5, !dbg !99
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !99
  %349 = extractelement <8 x i1> %339, i64 4, !dbg !99
  %350 = extractelement <8 x float> %338, i64 4, !dbg !99
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !99
  %352 = extractelement <8 x i1> %339, i64 3, !dbg !101
  %353 = extractelement <8 x float> %338, i64 3, !dbg !101
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !101
  %355 = extractelement <8 x i1> %339, i64 2, !dbg !101
  %356 = extractelement <8 x float> %338, i64 2, !dbg !101
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !101
  %358 = extractelement <8 x i1> %339, i64 1, !dbg !103
  %359 = extractelement <8 x float> %338, i64 1, !dbg !103
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !103
  %361 = extractelement <8 x i1> %339, i64 0, !dbg !103
  %362 = extractelement <8 x float> %338, i64 0, !dbg !103
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !103
  %364 = select i1 %228, float %360, float 0.000000e+00, !dbg !104
  %365 = select i1 %229, float %363, float 0.000000e+00, !dbg !104
  %366 = select i1 %162, float %345, float %364, !dbg !105
  %367 = select i1 %164, float %342, float %365, !dbg !105
  %368 = select i1 %98, float %351, float %366, !dbg !105
  %369 = select i1 %100, float %348, float %367, !dbg !105
  %370 = select i1 %37, float %357, float %368, !dbg !105
  %371 = select i1 %38, float %354, float %369, !dbg !105
  %372 = sext i32 %28 to i64, !dbg !106
  %373 = getelementptr float, ptr addrspace(1) %20, i64 %372, !dbg !106
  %374 = bitcast float %370 to i32, !dbg !107
  %375 = bitcast float %371 to i32, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %374, i32 %375, ptr addrspace(1) %373, i1 true) #3, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmtp4yeyr5k77xfkdd2tivrrhxgwhc36r3cyb32vlmz57l3uolr.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_cat_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_50, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_50", linkageName: "triton_poi_fused_cat_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 58, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 56, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 41, scope: !7)
!37 = !DILocation(line: 57, column: 36, scope: !7)
!38 = !DILocation(line: 57, column: 56, scope: !7)
!39 = !DILocation(line: 57, column: 31, scope: !7)
!40 = !DILocation(line: 57, column: 68, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 45, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 45, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 27, scope: !7)
!47 = !DILocation(line: 65, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 31, scope: !7)
!49 = !DILocation(line: 69, column: 45, scope: !7)
!50 = !DILocation(line: 71, column: 31, scope: !7)
!51 = !DILocation(line: 71, column: 45, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 81, column: 51, scope: !7)
!54 = !DILocation(line: 81, column: 42, scope: !7)
!55 = !DILocation(line: 81, column: 63, scope: !7)
!56 = !DILocation(line: 81, column: 37, scope: !7)
!57 = !DILocation(line: 81, column: 57, scope: !7)
!58 = !DILocation(line: 81, column: 32, scope: !7)
!59 = !DILocation(line: 81, column: 68, scope: !7)
!60 = !DILocation(line: 82, column: 32, scope: !7)
!61 = !DILocation(line: 82, column: 46, scope: !7)
!62 = !DILocation(line: 84, column: 32, scope: !7)
!63 = !DILocation(line: 84, column: 46, scope: !7)
!64 = !DILocation(line: 86, column: 20, scope: !7)
!65 = !DILocation(line: 87, column: 27, scope: !7)
!66 = !DILocation(line: 89, column: 20, scope: !7)
!67 = !DILocation(line: 93, column: 32, scope: !7)
!68 = !DILocation(line: 93, column: 46, scope: !7)
!69 = !DILocation(line: 95, column: 32, scope: !7)
!70 = !DILocation(line: 95, column: 46, scope: !7)
!71 = !DILocation(line: 101, column: 20, scope: !7)
!72 = !DILocation(line: 104, column: 51, scope: !7)
!73 = !DILocation(line: 104, column: 42, scope: !7)
!74 = !DILocation(line: 104, column: 37, scope: !7)
!75 = !DILocation(line: 104, column: 57, scope: !7)
!76 = !DILocation(line: 104, column: 32, scope: !7)
!77 = !DILocation(line: 104, column: 68, scope: !7)
!78 = !DILocation(line: 105, column: 32, scope: !7)
!79 = !DILocation(line: 105, column: 46, scope: !7)
!80 = !DILocation(line: 107, column: 32, scope: !7)
!81 = !DILocation(line: 107, column: 46, scope: !7)
!82 = !DILocation(line: 109, column: 20, scope: !7)
!83 = !DILocation(line: 110, column: 27, scope: !7)
!84 = !DILocation(line: 112, column: 20, scope: !7)
!85 = !DILocation(line: 116, column: 32, scope: !7)
!86 = !DILocation(line: 116, column: 46, scope: !7)
!87 = !DILocation(line: 118, column: 32, scope: !7)
!88 = !DILocation(line: 118, column: 46, scope: !7)
!89 = !DILocation(line: 106, column: 20, scope: !7)
!90 = !DILocation(line: 115, column: 20, scope: !7)
!91 = !DILocation(line: 117, column: 20, scope: !7)
!92 = !DILocation(line: 119, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !94, inlinedAt: !96)
!94 = distinct !DILexicalBlockFile(scope: !7, file: !95, discriminator: 0)
!95 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!96 = !DILocation(line: 121, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !94, inlinedAt: !98)
!98 = !DILocation(line: 98, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !94, inlinedAt: !100)
!100 = !DILocation(line: 74, column: 42, scope: !7)
!101 = !DILocation(line: 121, column: 29, scope: !94, inlinedAt: !102)
!102 = !DILocation(line: 50, column: 42, scope: !7)
!103 = !DILocation(line: 121, column: 29, scope: !94, inlinedAt: !96)
!104 = !DILocation(line: 123, column: 35, scope: !7)
!105 = !DILocation(line: 0, scope: !7)
!106 = !DILocation(line: 127, column: 25, scope: !7)
!107 = !DILocation(line: 127, column: 37, scope: !7)
!108 = !DILocation(line: 127, column: 4, scope: !7)
