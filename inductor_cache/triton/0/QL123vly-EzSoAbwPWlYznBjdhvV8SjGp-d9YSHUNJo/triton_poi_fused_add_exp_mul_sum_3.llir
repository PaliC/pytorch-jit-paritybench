; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_exp_mul_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 4, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr double, ptr addrspace(1) %1, i64 %13, !dbg !15
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %12) #2, !dbg !16
  %16 = getelementptr double, ptr addrspace(1) %2, i64 %13, !dbg !17
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %12) #2, !dbg !18
  %18 = bitcast i64 %17 to double, !dbg !18
  %19 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !19
  %20 = add i32 %11, 4, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr double, ptr addrspace(1) %2, i64 %21, !dbg !21
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %12) #2, !dbg !22
  %24 = bitcast i64 %23 to double, !dbg !22
  %25 = getelementptr i8, ptr addrspace(1) %3, i64 1, !dbg !23
  %26 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 true) #2, !dbg !24
  %27 = add i32 %11, 8, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr double, ptr addrspace(1) %2, i64 %28, !dbg !26
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %12) #2, !dbg !27
  %31 = bitcast i64 %30 to double, !dbg !27
  %32 = getelementptr i8, ptr addrspace(1) %3, i64 2, !dbg !28
  %33 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !29
  %34 = add i32 %11, 12, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr double, ptr addrspace(1) %2, i64 %35, !dbg !31
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %12) #2, !dbg !32
  %38 = bitcast i64 %37 to double, !dbg !32
  %39 = getelementptr i8, ptr addrspace(1) %3, i64 3, !dbg !33
  %40 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !34
  %41 = getelementptr double, ptr addrspace(1) %4, i64 %13, !dbg !35
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %12) #2, !dbg !36
  %43 = getelementptr double, ptr addrspace(1) %4, i64 %21, !dbg !37
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %12) #2, !dbg !38
  %45 = getelementptr double, ptr addrspace(1) %4, i64 %28, !dbg !39
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %12) #2, !dbg !40
  %47 = getelementptr double, ptr addrspace(1) %4, i64 %35, !dbg !41
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %12) #2, !dbg !42
  %49 = tail call double @llvm.nvvm.fma.rn.d(double %18, double 0x3FF71547652B82FE, double 0x4338000000000000) #2, !dbg !43
  %50 = tail call i32 @llvm.nvvm.d2i.lo(double %49) #2, !dbg !43
  %51 = tail call double @llvm.nvvm.add.rn.d(double %49, double 0xC338000000000000) #2, !dbg !43
  %52 = tail call double @llvm.nvvm.fma.rn.d(double %51, double 0xBFE62E42FEFA39EF, double %18) #2, !dbg !43
  %53 = tail call double @llvm.nvvm.fma.rn.d(double %51, double 0xBC7ABC9E3B39803F, double %52) #2, !dbg !43
  %54 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %53, double 0x3E928AF3FCA213EA) #2, !dbg !43
  %55 = tail call double @llvm.nvvm.fma.rn.d(double %54, double %53, double 0x3EC71DEE62401315) #2, !dbg !43
  %56 = tail call double @llvm.nvvm.fma.rn.d(double %55, double %53, double 0x3EFA01997C89EB71) #2, !dbg !43
  %57 = tail call double @llvm.nvvm.fma.rn.d(double %56, double %53, double 0x3F2A01A014761F65) #2, !dbg !43
  %58 = tail call double @llvm.nvvm.fma.rn.d(double %57, double %53, double 0x3F56C16C1852B7AF) #2, !dbg !43
  %59 = tail call double @llvm.nvvm.fma.rn.d(double %58, double %53, double 0x3F81111111122322) #2, !dbg !43
  %60 = tail call double @llvm.nvvm.fma.rn.d(double %59, double %53, double 0x3FA55555555502A1) #2, !dbg !43
  %61 = tail call double @llvm.nvvm.fma.rn.d(double %60, double %53, double 0x3FC5555555555511) #2, !dbg !43
  %62 = tail call double @llvm.nvvm.fma.rn.d(double %61, double %53, double 0x3FE000000000000B) #2, !dbg !43
  %63 = tail call double @llvm.nvvm.fma.rn.d(double %62, double %53, double 1.000000e+00) #2, !dbg !43
  %64 = tail call double @llvm.nvvm.fma.rn.d(double %63, double %53, double 1.000000e+00) #2, !dbg !43
  %65 = tail call i32 @llvm.nvvm.d2i.lo(double %64) #2, !dbg !43
  %66 = tail call i32 @llvm.nvvm.d2i.hi(double %64) #2, !dbg !43
  %67 = shl i32 %50, 20, !dbg !43
  %68 = add i32 %66, %67, !dbg !43
  %69 = tail call double @llvm.nvvm.lohi.i2d(i32 %65, i32 %68) #2, !dbg !43
  %70 = tail call i32 @llvm.nvvm.d2i.hi(double %18) #2, !dbg !43
  %71 = bitcast i32 %70 to float, !dbg !43
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !43
  %.not.i = icmp eq i32 %72, 0, !dbg !43
  %73 = tail call float @llvm.nvvm.fabs.ftz.f(float %71) #2, !dbg !43
  %74 = tail call float @llvm.nvvm.fabs.f(float %71) #2, !dbg !43
  %.01.i = select i1 %.not.i, float %74, float %73, !dbg !43
  %75 = fcmp olt float %.01.i, 0x4010C46560000000, !dbg !43
  br i1 %75, label %__nv_exp.exit, label %__internal_fast_icmp_abs_lt.exit.i, !dbg !43

__internal_fast_icmp_abs_lt.exit.i:               ; preds = %6
  %76 = fcmp olt double %18, 0.000000e+00, !dbg !43
  %77 = fadd double %18, 0x7FF0000000000000, !dbg !43
  %z.0.i = select i1 %76, double 0.000000e+00, double %77, !dbg !43
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !43
  %.not1.i = icmp eq i32 %78, 0, !dbg !43
  %.0.i = select i1 %.not1.i, float %74, float %73, !dbg !43
  %79 = fcmp olt float %.0.i, 0x4010E90000000000, !dbg !43
  br i1 %79, label %80, label %__nv_exp.exit, !dbg !43

80:                                               ; preds = %__internal_fast_icmp_abs_lt.exit.i
  %81 = sdiv i32 %50, 2, !dbg !43
  %82 = shl i32 %81, 20, !dbg !43
  %83 = add i32 %66, %82, !dbg !43
  %84 = tail call double @llvm.nvvm.lohi.i2d(i32 %65, i32 %83) #2, !dbg !43
  %85 = sub nsw i32 %50, %81, !dbg !43
  %86 = shl i32 %85, 20, !dbg !43
  %87 = add nsw i32 %86, 1072693248, !dbg !43
  %88 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %87) #2, !dbg !43
  %89 = fmul double %88, %84, !dbg !43
  br label %__nv_exp.exit, !dbg !43

__nv_exp.exit:                                    ; preds = %6, %__internal_fast_icmp_abs_lt.exit.i, %80
  %z.2.i = phi double [ %69, %6 ], [ %89, %80 ], [ %z.0.i, %__internal_fast_icmp_abs_lt.exit.i ], !dbg !43
  %90 = tail call double @llvm.nvvm.fma.rn.d(double %24, double 0x3FF71547652B82FE, double 0x4338000000000000) #2, !dbg !44
  %91 = tail call i32 @llvm.nvvm.d2i.lo(double %90) #2, !dbg !44
  %92 = tail call double @llvm.nvvm.add.rn.d(double %90, double 0xC338000000000000) #2, !dbg !44
  %93 = tail call double @llvm.nvvm.fma.rn.d(double %92, double 0xBFE62E42FEFA39EF, double %24) #2, !dbg !44
  %94 = tail call double @llvm.nvvm.fma.rn.d(double %92, double 0xBC7ABC9E3B39803F, double %93) #2, !dbg !44
  %95 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %94, double 0x3E928AF3FCA213EA) #2, !dbg !44
  %96 = tail call double @llvm.nvvm.fma.rn.d(double %95, double %94, double 0x3EC71DEE62401315) #2, !dbg !44
  %97 = tail call double @llvm.nvvm.fma.rn.d(double %96, double %94, double 0x3EFA01997C89EB71) #2, !dbg !44
  %98 = tail call double @llvm.nvvm.fma.rn.d(double %97, double %94, double 0x3F2A01A014761F65) #2, !dbg !44
  %99 = tail call double @llvm.nvvm.fma.rn.d(double %98, double %94, double 0x3F56C16C1852B7AF) #2, !dbg !44
  %100 = tail call double @llvm.nvvm.fma.rn.d(double %99, double %94, double 0x3F81111111122322) #2, !dbg !44
  %101 = tail call double @llvm.nvvm.fma.rn.d(double %100, double %94, double 0x3FA55555555502A1) #2, !dbg !44
  %102 = tail call double @llvm.nvvm.fma.rn.d(double %101, double %94, double 0x3FC5555555555511) #2, !dbg !44
  %103 = tail call double @llvm.nvvm.fma.rn.d(double %102, double %94, double 0x3FE000000000000B) #2, !dbg !44
  %104 = tail call double @llvm.nvvm.fma.rn.d(double %103, double %94, double 1.000000e+00) #2, !dbg !44
  %105 = tail call double @llvm.nvvm.fma.rn.d(double %104, double %94, double 1.000000e+00) #2, !dbg !44
  %106 = tail call i32 @llvm.nvvm.d2i.lo(double %105) #2, !dbg !44
  %107 = tail call i32 @llvm.nvvm.d2i.hi(double %105) #2, !dbg !44
  %108 = shl i32 %91, 20, !dbg !44
  %109 = add i32 %107, %108, !dbg !44
  %110 = tail call double @llvm.nvvm.lohi.i2d(i32 %106, i32 %109) #2, !dbg !44
  %111 = tail call i32 @llvm.nvvm.d2i.hi(double %24) #2, !dbg !44
  %112 = bitcast i32 %111 to float, !dbg !44
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !44
  %.not.i1 = icmp eq i32 %113, 0, !dbg !44
  %114 = tail call float @llvm.nvvm.fabs.ftz.f(float %112) #2, !dbg !44
  %115 = tail call float @llvm.nvvm.fabs.f(float %112) #2, !dbg !44
  %.01.i2 = select i1 %.not.i1, float %115, float %114, !dbg !44
  %116 = fcmp olt float %.01.i2, 0x4010C46560000000, !dbg !44
  br i1 %116, label %__nv_exp.exit8, label %__internal_fast_icmp_abs_lt.exit.i3, !dbg !44

__internal_fast_icmp_abs_lt.exit.i3:              ; preds = %__nv_exp.exit
  %117 = fcmp olt double %24, 0.000000e+00, !dbg !44
  %118 = fadd double %24, 0x7FF0000000000000, !dbg !44
  %z.0.i4 = select i1 %117, double 0.000000e+00, double %118, !dbg !44
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !44
  %.not1.i5 = icmp eq i32 %119, 0, !dbg !44
  %.0.i6 = select i1 %.not1.i5, float %115, float %114, !dbg !44
  %120 = fcmp olt float %.0.i6, 0x4010E90000000000, !dbg !44
  br i1 %120, label %121, label %__nv_exp.exit8, !dbg !44

121:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i3
  %122 = sdiv i32 %91, 2, !dbg !44
  %123 = shl i32 %122, 20, !dbg !44
  %124 = add i32 %107, %123, !dbg !44
  %125 = tail call double @llvm.nvvm.lohi.i2d(i32 %106, i32 %124) #2, !dbg !44
  %126 = sub nsw i32 %91, %122, !dbg !44
  %127 = shl i32 %126, 20, !dbg !44
  %128 = add nsw i32 %127, 1072693248, !dbg !44
  %129 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %128) #2, !dbg !44
  %130 = fmul double %129, %125, !dbg !44
  br label %__nv_exp.exit8, !dbg !44

__nv_exp.exit8:                                   ; preds = %__nv_exp.exit, %__internal_fast_icmp_abs_lt.exit.i3, %121
  %z.2.i7 = phi double [ %110, %__nv_exp.exit ], [ %130, %121 ], [ %z.0.i4, %__internal_fast_icmp_abs_lt.exit.i3 ], !dbg !44
  %131 = tail call double @llvm.nvvm.fma.rn.d(double %31, double 0x3FF71547652B82FE, double 0x4338000000000000) #2, !dbg !45
  %132 = tail call i32 @llvm.nvvm.d2i.lo(double %131) #2, !dbg !45
  %133 = tail call double @llvm.nvvm.add.rn.d(double %131, double 0xC338000000000000) #2, !dbg !45
  %134 = tail call double @llvm.nvvm.fma.rn.d(double %133, double 0xBFE62E42FEFA39EF, double %31) #2, !dbg !45
  %135 = tail call double @llvm.nvvm.fma.rn.d(double %133, double 0xBC7ABC9E3B39803F, double %134) #2, !dbg !45
  %136 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %135, double 0x3E928AF3FCA213EA) #2, !dbg !45
  %137 = tail call double @llvm.nvvm.fma.rn.d(double %136, double %135, double 0x3EC71DEE62401315) #2, !dbg !45
  %138 = tail call double @llvm.nvvm.fma.rn.d(double %137, double %135, double 0x3EFA01997C89EB71) #2, !dbg !45
  %139 = tail call double @llvm.nvvm.fma.rn.d(double %138, double %135, double 0x3F2A01A014761F65) #2, !dbg !45
  %140 = tail call double @llvm.nvvm.fma.rn.d(double %139, double %135, double 0x3F56C16C1852B7AF) #2, !dbg !45
  %141 = tail call double @llvm.nvvm.fma.rn.d(double %140, double %135, double 0x3F81111111122322) #2, !dbg !45
  %142 = tail call double @llvm.nvvm.fma.rn.d(double %141, double %135, double 0x3FA55555555502A1) #2, !dbg !45
  %143 = tail call double @llvm.nvvm.fma.rn.d(double %142, double %135, double 0x3FC5555555555511) #2, !dbg !45
  %144 = tail call double @llvm.nvvm.fma.rn.d(double %143, double %135, double 0x3FE000000000000B) #2, !dbg !45
  %145 = tail call double @llvm.nvvm.fma.rn.d(double %144, double %135, double 1.000000e+00) #2, !dbg !45
  %146 = tail call double @llvm.nvvm.fma.rn.d(double %145, double %135, double 1.000000e+00) #2, !dbg !45
  %147 = tail call i32 @llvm.nvvm.d2i.lo(double %146) #2, !dbg !45
  %148 = tail call i32 @llvm.nvvm.d2i.hi(double %146) #2, !dbg !45
  %149 = shl i32 %132, 20, !dbg !45
  %150 = add i32 %148, %149, !dbg !45
  %151 = tail call double @llvm.nvvm.lohi.i2d(i32 %147, i32 %150) #2, !dbg !45
  %152 = tail call i32 @llvm.nvvm.d2i.hi(double %31) #2, !dbg !45
  %153 = bitcast i32 %152 to float, !dbg !45
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not.i9 = icmp eq i32 %154, 0, !dbg !45
  %155 = tail call float @llvm.nvvm.fabs.ftz.f(float %153) #2, !dbg !45
  %156 = tail call float @llvm.nvvm.fabs.f(float %153) #2, !dbg !45
  %.01.i10 = select i1 %.not.i9, float %156, float %155, !dbg !45
  %157 = fcmp olt float %.01.i10, 0x4010C46560000000, !dbg !45
  br i1 %157, label %__nv_exp.exit16, label %__internal_fast_icmp_abs_lt.exit.i11, !dbg !45

__internal_fast_icmp_abs_lt.exit.i11:             ; preds = %__nv_exp.exit8
  %158 = fcmp olt double %31, 0.000000e+00, !dbg !45
  %159 = fadd double %31, 0x7FF0000000000000, !dbg !45
  %z.0.i12 = select i1 %158, double 0.000000e+00, double %159, !dbg !45
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !45
  %.not1.i13 = icmp eq i32 %160, 0, !dbg !45
  %.0.i14 = select i1 %.not1.i13, float %156, float %155, !dbg !45
  %161 = fcmp olt float %.0.i14, 0x4010E90000000000, !dbg !45
  br i1 %161, label %162, label %__nv_exp.exit16, !dbg !45

162:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i11
  %163 = sdiv i32 %132, 2, !dbg !45
  %164 = shl i32 %163, 20, !dbg !45
  %165 = add i32 %148, %164, !dbg !45
  %166 = tail call double @llvm.nvvm.lohi.i2d(i32 %147, i32 %165) #2, !dbg !45
  %167 = sub nsw i32 %132, %163, !dbg !45
  %168 = shl i32 %167, 20, !dbg !45
  %169 = add nsw i32 %168, 1072693248, !dbg !45
  %170 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %169) #2, !dbg !45
  %171 = fmul double %170, %166, !dbg !45
  br label %__nv_exp.exit16, !dbg !45

__nv_exp.exit16:                                  ; preds = %__nv_exp.exit8, %__internal_fast_icmp_abs_lt.exit.i11, %162
  %z.2.i15 = phi double [ %151, %__nv_exp.exit8 ], [ %171, %162 ], [ %z.0.i12, %__internal_fast_icmp_abs_lt.exit.i11 ], !dbg !45
  %172 = tail call double @llvm.nvvm.fma.rn.d(double %38, double 0x3FF71547652B82FE, double 0x4338000000000000) #2, !dbg !46
  %173 = tail call i32 @llvm.nvvm.d2i.lo(double %172) #2, !dbg !46
  %174 = tail call double @llvm.nvvm.add.rn.d(double %172, double 0xC338000000000000) #2, !dbg !46
  %175 = tail call double @llvm.nvvm.fma.rn.d(double %174, double 0xBFE62E42FEFA39EF, double %38) #2, !dbg !46
  %176 = tail call double @llvm.nvvm.fma.rn.d(double %174, double 0xBC7ABC9E3B39803F, double %175) #2, !dbg !46
  %177 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %176, double 0x3E928AF3FCA213EA) #2, !dbg !46
  %178 = tail call double @llvm.nvvm.fma.rn.d(double %177, double %176, double 0x3EC71DEE62401315) #2, !dbg !46
  %179 = tail call double @llvm.nvvm.fma.rn.d(double %178, double %176, double 0x3EFA01997C89EB71) #2, !dbg !46
  %180 = tail call double @llvm.nvvm.fma.rn.d(double %179, double %176, double 0x3F2A01A014761F65) #2, !dbg !46
  %181 = tail call double @llvm.nvvm.fma.rn.d(double %180, double %176, double 0x3F56C16C1852B7AF) #2, !dbg !46
  %182 = tail call double @llvm.nvvm.fma.rn.d(double %181, double %176, double 0x3F81111111122322) #2, !dbg !46
  %183 = tail call double @llvm.nvvm.fma.rn.d(double %182, double %176, double 0x3FA55555555502A1) #2, !dbg !46
  %184 = tail call double @llvm.nvvm.fma.rn.d(double %183, double %176, double 0x3FC5555555555511) #2, !dbg !46
  %185 = tail call double @llvm.nvvm.fma.rn.d(double %184, double %176, double 0x3FE000000000000B) #2, !dbg !46
  %186 = tail call double @llvm.nvvm.fma.rn.d(double %185, double %176, double 1.000000e+00) #2, !dbg !46
  %187 = tail call double @llvm.nvvm.fma.rn.d(double %186, double %176, double 1.000000e+00) #2, !dbg !46
  %188 = tail call i32 @llvm.nvvm.d2i.lo(double %187) #2, !dbg !46
  %189 = tail call i32 @llvm.nvvm.d2i.hi(double %187) #2, !dbg !46
  %190 = shl i32 %173, 20, !dbg !46
  %191 = add i32 %189, %190, !dbg !46
  %192 = tail call double @llvm.nvvm.lohi.i2d(i32 %188, i32 %191) #2, !dbg !46
  %193 = tail call i32 @llvm.nvvm.d2i.hi(double %38) #2, !dbg !46
  %194 = bitcast i32 %193 to float, !dbg !46
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !46
  %.not.i17 = icmp eq i32 %195, 0, !dbg !46
  %196 = tail call float @llvm.nvvm.fabs.ftz.f(float %194) #2, !dbg !46
  %197 = tail call float @llvm.nvvm.fabs.f(float %194) #2, !dbg !46
  %.01.i18 = select i1 %.not.i17, float %197, float %196, !dbg !46
  %198 = fcmp olt float %.01.i18, 0x4010C46560000000, !dbg !46
  br i1 %198, label %__nv_exp.exit24, label %__internal_fast_icmp_abs_lt.exit.i19, !dbg !46

__internal_fast_icmp_abs_lt.exit.i19:             ; preds = %__nv_exp.exit16
  %199 = fcmp olt double %38, 0.000000e+00, !dbg !46
  %200 = fadd double %38, 0x7FF0000000000000, !dbg !46
  %z.0.i20 = select i1 %199, double 0.000000e+00, double %200, !dbg !46
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !46
  %.not1.i21 = icmp eq i32 %201, 0, !dbg !46
  %.0.i22 = select i1 %.not1.i21, float %197, float %196, !dbg !46
  %202 = fcmp olt float %.0.i22, 0x4010E90000000000, !dbg !46
  br i1 %202, label %203, label %__nv_exp.exit24, !dbg !46

203:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i19
  %204 = sdiv i32 %173, 2, !dbg !46
  %205 = shl i32 %204, 20, !dbg !46
  %206 = add i32 %189, %205, !dbg !46
  %207 = tail call double @llvm.nvvm.lohi.i2d(i32 %188, i32 %206) #2, !dbg !46
  %208 = sub nsw i32 %173, %204, !dbg !46
  %209 = shl i32 %208, 20, !dbg !46
  %210 = add nsw i32 %209, 1072693248, !dbg !46
  %211 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %210) #2, !dbg !46
  %212 = fmul double %211, %207, !dbg !46
  br label %__nv_exp.exit24, !dbg !46

__nv_exp.exit24:                                  ; preds = %__nv_exp.exit16, %__internal_fast_icmp_abs_lt.exit.i19, %203
  %z.2.i23 = phi double [ %192, %__nv_exp.exit16 ], [ %212, %203 ], [ %z.0.i20, %__internal_fast_icmp_abs_lt.exit.i19 ], !dbg !46
  %213 = insertelement <2 x i8> poison, i8 %19, i64 0, !dbg !24
  %214 = insertelement <2 x i8> %213, i8 %26, i64 1, !dbg !24
  %215 = icmp ne <2 x i8> %214, zeroinitializer, !dbg !24
  %216 = icmp ne i8 %33, 0, !dbg !29
  %217 = uitofp i1 %216 to double, !dbg !47
  %218 = bitcast i64 %48 to double, !dbg !42
  %219 = bitcast i64 %46 to double, !dbg !40
  %220 = bitcast i64 %44 to double, !dbg !38
  %221 = icmp ne i8 %40, 0, !dbg !34
  %222 = bitcast i64 %15 to double, !dbg !16
  %223 = and i32 %9, 28, !dbg !12
  %224 = uitofp i1 %221 to double, !dbg !48
  %225 = uitofp <2 x i1> %215 to <2 x double>, !dbg !49
  %226 = insertelement <2 x i64> poison, i64 %42, i64 0, !dbg !50
  %227 = bitcast <2 x i64> %226 to <2 x double>, !dbg !50
  %228 = insertelement <2 x double> %227, double %z.2.i7, i64 1, !dbg !50
  %229 = fmul <2 x double> %228, %225, !dbg !50
  %230 = shufflevector <2 x double> %229, <2 x double> poison, <2 x i32> <i32 1, i32 0>, !dbg !50
  %231 = insertelement <2 x double> poison, double %z.2.i, i64 0, !dbg !51
  %232 = insertelement <2 x double> %231, double %220, i64 1, !dbg !51
  %233 = fmul <2 x double> %232, %225, !dbg !51
  %234 = fadd <2 x double> %233, %230, !dbg !52
  %235 = insertelement <2 x double> poison, double %217, i64 0, !dbg !53
  %236 = shufflevector <2 x double> %235, <2 x double> poison, <2 x i32> zeroinitializer, !dbg !53
  %237 = insertelement <2 x double> poison, double %z.2.i15, i64 0, !dbg !53
  %238 = insertelement <2 x double> %237, double %219, i64 1, !dbg !53
  %239 = fmul <2 x double> %236, %238, !dbg !53
  %240 = fadd <2 x double> %234, %239, !dbg !54
  %241 = insertelement <2 x double> poison, double %224, i64 0, !dbg !55
  %242 = shufflevector <2 x double> %241, <2 x double> poison, <2 x i32> zeroinitializer, !dbg !55
  %243 = insertelement <2 x double> poison, double %z.2.i23, i64 0, !dbg !55
  %244 = insertelement <2 x double> %243, double %218, i64 1, !dbg !55
  %245 = fmul <2 x double> %242, %244, !dbg !55
  %246 = fadd <2 x double> %240, %245, !dbg !56
  %247 = extractelement <2 x double> %246, i64 0, !dbg !57
  %248 = fmul double %247, %222, !dbg !57
  %249 = extractelement <2 x double> %246, i64 1, !dbg !58
  %250 = fadd double %249, %248, !dbg !58
  %251 = getelementptr double, ptr addrspace(1) %0, i64 %13, !dbg !59
  %252 = icmp eq i32 %223, 0, !dbg !60
  %253 = bitcast double %250 to i64, !dbg !60
  %254 = and i1 %252, %12, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %253, ptr addrspace(1) %251, i1 %254) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.fma.rn.d(double, double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.lo(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.add.rn.d(double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.hi(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.lohi.i2d(i32, i32) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py", directory: "inductor_cache/fp")
!4 = !{ptr @triton_poi_fused_add_exp_mul_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_exp_mul_sum_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_exp_mul_sum_3", linkageName: "triton_poi_fused_add_exp_mul_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 20, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 20, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 41, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 20, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 31, scope: !7)
!38 = !DILocation(line: 39, column: 40, scope: !7)
!39 = !DILocation(line: 40, column: 31, scope: !7)
!40 = !DILocation(line: 40, column: 40, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 41, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 25, scope: !7)
!45 = !DILocation(line: 51, column: 26, scope: !7)
!46 = !DILocation(line: 56, column: 26, scope: !7)
!47 = !DILocation(line: 53, column: 21, scope: !7)
!48 = !DILocation(line: 58, column: 21, scope: !7)
!49 = !DILocation(line: 48, column: 21, scope: !7)
!50 = !DILocation(line: 62, column: 20, scope: !7)
!51 = !DILocation(line: 63, column: 20, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 68, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 19, scope: !7)
!58 = !DILocation(line: 69, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 28, scope: !7)
!60 = !DILocation(line: 70, column: 40, scope: !7)
!61 = !DILocation(line: 70, column: 4, scope: !7)
