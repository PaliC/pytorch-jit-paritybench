#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_exp_mul_sum_3(%arg0: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0), %arg1: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0), %arg2: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0), %arg3: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0), %arg4: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0), %arg5: i32 loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":19:0)) attributes {noinline = false} {
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst = arith.constant dense<12> : tensor<4xi32, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<4xi32, #blocked> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i8 = arith.constant 0 : i8 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<4xi32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<4xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<4xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<4xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f64> -> tensor<4x!tt.ptr<f64>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f64> -> tensor<4x!tt.ptr<f64>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %4 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc9)
    %11 = tt.load %10, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc10)
    %12 = tt.addptr %arg3, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc11)
    %13 = tt.bitcast %12 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc12)
    %14 = tt.load %13 : !tt.ptr<i8> loc(#loc12)
    %15 = arith.cmpi ne, %14, %c0_i8 : i8 loc(#loc12)
    %16 = arith.addi %4, %cst_1 : tensor<4xi32, #blocked> loc(#loc13)
    %17 = tt.addptr %9, %16 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc14)
    %18 = tt.load %17, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc15)
    %19 = tt.addptr %arg3, %c1_i32 : !tt.ptr<i1>, i32 loc(#loc16)
    %20 = tt.bitcast %19 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc17)
    %21 = tt.load %20 : !tt.ptr<i8> loc(#loc17)
    %22 = arith.cmpi ne, %21, %c0_i8 : i8 loc(#loc17)
    %23 = arith.addi %4, %cst_0 : tensor<4xi32, #blocked> loc(#loc18)
    %24 = tt.addptr %9, %23 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc19)
    %25 = tt.load %24, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc20)
    %26 = tt.addptr %arg3, %c2_i32 : !tt.ptr<i1>, i32 loc(#loc21)
    %27 = tt.bitcast %26 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc22)
    %28 = tt.load %27 : !tt.ptr<i8> loc(#loc22)
    %29 = arith.cmpi ne, %28, %c0_i8 : i8 loc(#loc22)
    %30 = arith.addi %4, %cst : tensor<4xi32, #blocked> loc(#loc23)
    %31 = tt.addptr %9, %30 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc24)
    %32 = tt.load %31, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc25)
    %33 = tt.addptr %arg3, %c3_i32 : !tt.ptr<i1>, i32 loc(#loc26)
    %34 = tt.bitcast %33 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc27)
    %35 = tt.load %34 : !tt.ptr<i8> loc(#loc27)
    %36 = arith.cmpi ne, %35, %c0_i8 : i8 loc(#loc27)
    %37 = tt.splat %arg4 : !tt.ptr<f64> -> tensor<4x!tt.ptr<f64>, #blocked> loc(#loc28)
    %38 = tt.addptr %37, %4 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc28)
    %39 = tt.load %38, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc29)
    %40 = tt.addptr %37, %16 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc30)
    %41 = tt.load %40, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc31)
    %42 = tt.addptr %37, %23 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc32)
    %43 = tt.load %42, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc33)
    %44 = tt.addptr %37, %30 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc34)
    %45 = tt.load %44, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc35)
    %46 = tt.extern_elementwise %11 {libname = "", libpath = "", pure = true, symbol = "__nv_exp"} : (tensor<4xf64, #blocked>) -> tensor<4xf64, #blocked> loc(#loc36)
    %47 = arith.extui %15 : i1 to i64 loc(#loc37)
    %48 = arith.sitofp %47 : i64 to f64 loc(#loc38)
    %49 = tt.splat %48 : f64 -> tensor<4xf64, #blocked> loc(#loc38)
    %50 = arith.mulf %46, %49 : tensor<4xf64, #blocked> loc(#loc39)
    %51 = tt.extern_elementwise %18 {libname = "", libpath = "", pure = true, symbol = "__nv_exp"} : (tensor<4xf64, #blocked>) -> tensor<4xf64, #blocked> loc(#loc40)
    %52 = arith.extui %22 : i1 to i64 loc(#loc41)
    %53 = arith.sitofp %52 : i64 to f64 loc(#loc42)
    %54 = tt.splat %53 : f64 -> tensor<4xf64, #blocked> loc(#loc42)
    %55 = arith.mulf %51, %54 : tensor<4xf64, #blocked> loc(#loc43)
    %56 = arith.addf %50, %55 : tensor<4xf64, #blocked> loc(#loc44)
    %57 = tt.extern_elementwise %25 {libname = "", libpath = "", pure = true, symbol = "__nv_exp"} : (tensor<4xf64, #blocked>) -> tensor<4xf64, #blocked> loc(#loc45)
    %58 = arith.extui %29 : i1 to i64 loc(#loc46)
    %59 = arith.sitofp %58 : i64 to f64 loc(#loc47)
    %60 = tt.splat %59 : f64 -> tensor<4xf64, #blocked> loc(#loc47)
    %61 = arith.mulf %57, %60 : tensor<4xf64, #blocked> loc(#loc48)
    %62 = arith.addf %56, %61 : tensor<4xf64, #blocked> loc(#loc49)
    %63 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_exp"} : (tensor<4xf64, #blocked>) -> tensor<4xf64, #blocked> loc(#loc50)
    %64 = arith.extui %36 : i1 to i64 loc(#loc51)
    %65 = arith.sitofp %64 : i64 to f64 loc(#loc52)
    %66 = tt.splat %65 : f64 -> tensor<4xf64, #blocked> loc(#loc52)
    %67 = arith.mulf %63, %66 : tensor<4xf64, #blocked> loc(#loc53)
    %68 = arith.addf %62, %67 : tensor<4xf64, #blocked> loc(#loc54)
    %69 = arith.mulf %8, %68 : tensor<4xf64, #blocked> loc(#loc55)
    %70 = arith.mulf %39, %49 : tensor<4xf64, #blocked> loc(#loc56)
    %71 = arith.mulf %41, %54 : tensor<4xf64, #blocked> loc(#loc57)
    %72 = arith.addf %70, %71 : tensor<4xf64, #blocked> loc(#loc58)
    %73 = arith.mulf %43, %60 : tensor<4xf64, #blocked> loc(#loc59)
    %74 = arith.addf %72, %73 : tensor<4xf64, #blocked> loc(#loc60)
    %75 = arith.mulf %45, %66 : tensor<4xf64, #blocked> loc(#loc61)
    %76 = arith.addf %74, %75 : tensor<4xf64, #blocked> loc(#loc62)
    %77 = arith.addf %69, %76 : tensor<4xf64, #blocked> loc(#loc63)
    %78 = tt.splat %arg0 : !tt.ptr<f64> -> tensor<4x!tt.ptr<f64>, #blocked> loc(#loc64)
    %79 = tt.addptr %78, %4 : tensor<4x!tt.ptr<f64>, #blocked>, tensor<4xi32, #blocked> loc(#loc64)
    tt.store %79, %77, %5 : tensor<4x!tt.ptr<f64>, #blocked> loc(#loc65)
    tt.return loc(#loc66)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":21:28)
#loc3 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":21:33)
#loc4 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":22:36)
#loc5 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":22:23)
#loc6 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":23:21)
#loc7 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":25:30)
#loc8 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":25:35)
#loc9 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":26:30)
#loc10 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":26:35)
#loc11 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":27:30)
#loc12 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":27:19)
#loc13 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":29:34)
#loc14 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":29:30)
#loc15 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":29:39)
#loc16 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":30:31)
#loc17 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":30:20)
#loc18 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":32:35)
#loc19 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":32:31)
#loc20 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":32:40)
#loc21 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":33:31)
#loc22 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":33:20)
#loc23 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":35:36)
#loc24 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":35:31)
#loc25 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":35:41)
#loc26 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":36:31)
#loc27 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":36:20)
#loc28 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":38:31)
#loc29 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":38:36)
#loc30 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":39:31)
#loc31 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":39:40)
#loc32 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":40:31)
#loc33 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":40:40)
#loc34 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":41:31)
#loc35 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":41:41)
#loc36 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":42:25)
#loc37 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":43:19)
#loc38 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":44:19)
#loc39 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":45:18)
#loc40 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":46:25)
#loc41 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":47:21)
#loc42 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":48:21)
#loc43 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":49:19)
#loc44 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":50:19)
#loc45 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":51:26)
#loc46 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":52:21)
#loc47 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":53:21)
#loc48 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":54:20)
#loc49 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":55:20)
#loc50 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":56:26)
#loc51 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":57:21)
#loc52 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":58:21)
#loc53 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":59:20)
#loc54 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":60:20)
#loc55 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":61:19)
#loc56 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":62:20)
#loc57 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":63:20)
#loc58 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":64:20)
#loc59 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":65:20)
#loc60 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":66:20)
#loc61 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":67:20)
#loc62 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":68:20)
#loc63 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":69:20)
#loc64 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":70:28)
#loc65 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":70:40)
#loc66 = loc("inductor_cache/fp/cfp2qa45gjgdhnhdxkfe5ad343rbapjmk4qtmyx4y7xotobc4yfn.py":70:4)
