; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 256, !dbg !14
  %21 = srem i32 %20, 128, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %22 = sdiv i32 %.frozen, 16, !dbg !16
  %23 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %22, 16, !dbg !18
  %25 = sext i32 %19 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = sext i32 %21 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %.lhs.trunc = trunc nsw i32 %24 to i8, !dbg !31
  %46 = sdiv i8 %.lhs.trunc, 2, !dbg !31
  %.sext = sext i8 %46 to i32, !dbg !31
  %47 = shl nsw i32 %.sext, 4, !dbg !32
  %48 = mul i8 %46, 2, !dbg !33
  %.decomposed20 = sub i8 %.lhs.trunc, %48, !dbg !33
  %.sext17 = sext i8 %.decomposed20 to i32, !dbg !33
  %49 = shl nsw i32 %.sext17, 7, !dbg !34
  %50 = shl nsw i32 %20, 8, !dbg !35
  %51 = add i32 %50, %.decomposed, !dbg !36
  %52 = add i32 %51, %47, !dbg !37
  %53 = add i32 %52, %49, !dbg !38
  %54 = sext i32 %53 to i64, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %6, i64 %54, !dbg !39
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !41
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !42
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !42
  %60 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !43
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !44
  %62 = bitcast i32 %61 to float, !dbg !44
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !44
  %64 = bitcast i32 %63 to float, !dbg !44
  %65 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !45
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !46
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !46
  %68 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !47
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !48
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !48
  %71 = fadd float %37, 0x3EE4F8B580000000, !dbg !49
  %72 = fadd float %39, 0x3EE4F8B580000000, !dbg !49
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %73, 0, !dbg !50
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %74, 0, !dbg !50
  br i1 %.not.i, label %80, label %75, !dbg !50

75:                                               ; preds = %13
  br i1 %.not1.i, label %78, label %76, !dbg !50

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

80:                                               ; preds = %13
  br i1 %.not1.i, label %83, label %81, !dbg !50

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !50
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %85, 0, !dbg !50
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !50
  br i1 %.not.i1, label %92, label %87, !dbg !50

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !50

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !50

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !50
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %99 = fadd float %62, 0x3EE4F8B580000000, !dbg !52
  %100 = fadd float %64, 0x3EE4F8B580000000, !dbg !52
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %101, 0, !dbg !53
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !53
  br i1 %.not.i6, label %108, label %103, !dbg !53

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !53

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !53

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !53
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %113, 0, !dbg !53
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %114, 0, !dbg !53
  br i1 %.not.i11, label %120, label %115, !dbg !53

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !53

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !53

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %116, %118, %121, %123
  %.0.i13 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !53
  %125 = extractvalue { i32, i32 } %56, 1, !dbg !40
  %126 = bitcast i32 %125 to float, !dbg !40
  %127 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %128 = insertelement <2 x i32> %127, i32 %59, i64 1, !dbg !24
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !24
  %130 = extractvalue { i32, i32 } %56, 0, !dbg !40
  %131 = bitcast i32 %130 to float, !dbg !40
  %132 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !24
  %133 = insertelement <2 x i32> %132, i32 %58, i64 1, !dbg !24
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !24
  %135 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %136 = bitcast i32 %135 to float, !dbg !20
  %137 = bitcast i32 %31 to float, !dbg !22
  %138 = fadd float %136, %137, !dbg !54
  %139 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !28
  %140 = insertelement <2 x i32> %139, i32 %67, i64 1, !dbg !28
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !28
  %142 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !30
  %143 = insertelement <2 x i32> %142, i32 %70, i64 1, !dbg !30
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !30
  %145 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %146 = bitcast i32 %145 to float, !dbg !20
  %147 = bitcast i32 %30 to float, !dbg !22
  %148 = fadd float %146, %147, !dbg !54
  %149 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !28
  %150 = insertelement <2 x i32> %149, i32 %66, i64 1, !dbg !28
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !28
  %152 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %153 = insertelement <2 x i32> %152, i32 %69, i64 1, !dbg !30
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !30
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !55
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !55
  %157 = insertelement <2 x float> poison, float %148, i64 0, !dbg !56
  %158 = insertelement <2 x float> %157, float %131, i64 1, !dbg !56
  %159 = fsub <2 x float> %158, %134, !dbg !56
  %160 = insertelement <2 x float> poison, float %97, i64 0, !dbg !57
  %161 = insertelement <2 x float> %160, float %155, i64 1, !dbg !57
  %162 = fmul <2 x float> %159, %161, !dbg !57
  %163 = fmul <2 x float> %162, %151, !dbg !58
  %164 = fadd <2 x float> %163, %154, !dbg !59
  %165 = insertelement <2 x float> poison, float %138, i64 0, !dbg !56
  %166 = insertelement <2 x float> %165, float %126, i64 1, !dbg !56
  %167 = fsub <2 x float> %166, %129, !dbg !56
  %168 = insertelement <2 x float> poison, float %98, i64 0, !dbg !57
  %169 = insertelement <2 x float> %168, float %156, i64 1, !dbg !57
  %170 = fmul <2 x float> %167, %169, !dbg !57
  %171 = fmul <2 x float> %170, %141, !dbg !58
  %172 = fadd <2 x float> %171, %144, !dbg !59
  %shift = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %173 = fadd <2 x float> %164, %shift, !dbg !60
  %shift18 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %174 = fadd <2 x float> %172, %shift18, !dbg !60
  %175 = bitcast float %148 to i32, !dbg !61
  %176 = bitcast float %138 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %26, i1 true) #3, !dbg !61
  %177 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !62
  %bc = bitcast <2 x float> %173 to <2 x i32>, !dbg !63
  %178 = extractelement <2 x i32> %bc, i64 0, !dbg !63
  %bc19 = bitcast <2 x float> %174 to <2 x i32>, !dbg !63
  %179 = extractelement <2 x i32> %bc19, i64 0, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 true) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnzopanezgtfwk2gtycyxipzgws7zz65nbu6aumrfaeozpnmjsz5.py", directory: "inductor_cache/nz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 46, scope: !7)
!32 = !DILocation(line: 35, column: 40, scope: !7)
!33 = !DILocation(line: 35, column: 62, scope: !7)
!34 = !DILocation(line: 35, column: 57, scope: !7)
!35 = !DILocation(line: 35, column: 72, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 51, scope: !7)
!38 = !DILocation(line: 35, column: 68, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 77, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 36, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 36, scope: !7)
!49 = !DILocation(line: 43, column: 18, scope: !7)
!50 = !DILocation(line: 44, column: 26, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 27, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 55, column: 19, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
