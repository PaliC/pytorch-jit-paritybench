; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 2048, !dbg !14
  %13 = lshr i32 %9, 5, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %15 = sdiv i32 %.frozen, 8, !dbg !16
  %16 = mul i32 %15, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = srem i32 %15, 64, !dbg !18
  %18 = sdiv i32 %11, 512, !dbg !19
  %19 = shl nsw i32 %.decomposed, 3, !dbg !20
  %20 = shl nsw i32 %17, 7, !dbg !21
  %21 = or disjoint i32 %20, %14, !dbg !22
  %22 = or disjoint i32 %21, 8, !dbg !22
  %23 = or disjoint i32 %21, 16, !dbg !22
  %24 = or disjoint i32 %21, 24, !dbg !22
  %25 = or disjoint i32 %21, 32, !dbg !22
  %26 = or disjoint i32 %21, 40, !dbg !22
  %27 = or disjoint i32 %21, 48, !dbg !22
  %28 = or disjoint i32 %21, 56, !dbg !22
  %29 = or disjoint i32 %21, 64, !dbg !22
  %30 = or disjoint i32 %21, 72, !dbg !22
  %31 = or disjoint i32 %21, 80, !dbg !22
  %32 = or disjoint i32 %21, 88, !dbg !22
  %33 = or disjoint i32 %21, 96, !dbg !22
  %34 = or disjoint i32 %21, 104, !dbg !22
  %35 = or disjoint i32 %21, 112, !dbg !22
  %36 = or disjoint i32 %21, 120, !dbg !22
  %37 = sdiv i32 %21, 1024, !dbg !23
  %38 = mul i32 %37, 1024, !dbg !24
  %.decomposed1 = sub i32 %21, %38, !dbg !24
  %39 = sdiv i32 %22, 1024, !dbg !23
  %40 = mul i32 %39, 1024, !dbg !24
  %.decomposed2 = sub i32 %22, %40, !dbg !24
  %41 = sdiv i32 %23, 1024, !dbg !23
  %42 = mul i32 %41, 1024, !dbg !24
  %.decomposed3 = sub i32 %23, %42, !dbg !24
  %43 = sdiv i32 %24, 1024, !dbg !23
  %44 = mul i32 %43, 1024, !dbg !24
  %.decomposed4 = sub i32 %24, %44, !dbg !24
  %45 = sdiv i32 %25, 1024, !dbg !23
  %46 = mul i32 %45, 1024, !dbg !24
  %.decomposed5 = sub i32 %25, %46, !dbg !24
  %47 = sdiv i32 %26, 1024, !dbg !23
  %48 = mul i32 %47, 1024, !dbg !24
  %.decomposed6 = sub i32 %26, %48, !dbg !24
  %49 = sdiv i32 %27, 1024, !dbg !23
  %50 = mul i32 %49, 1024, !dbg !24
  %.decomposed7 = sub i32 %27, %50, !dbg !24
  %51 = sdiv i32 %28, 1024, !dbg !23
  %52 = mul i32 %51, 1024, !dbg !24
  %.decomposed8 = sub i32 %28, %52, !dbg !24
  %53 = sdiv i32 %29, 1024, !dbg !23
  %54 = mul i32 %53, 1024, !dbg !24
  %.decomposed9 = sub i32 %29, %54, !dbg !24
  %55 = sdiv i32 %30, 1024, !dbg !23
  %56 = mul i32 %55, 1024, !dbg !24
  %.decomposed10 = sub i32 %30, %56, !dbg !24
  %57 = sdiv i32 %31, 1024, !dbg !23
  %58 = mul i32 %57, 1024, !dbg !24
  %.decomposed11 = sub i32 %31, %58, !dbg !24
  %59 = sdiv i32 %32, 1024, !dbg !23
  %60 = mul i32 %59, 1024, !dbg !24
  %.decomposed12 = sub i32 %32, %60, !dbg !24
  %61 = sdiv i32 %33, 1024, !dbg !23
  %62 = mul i32 %61, 1024, !dbg !24
  %.decomposed13 = sub i32 %33, %62, !dbg !24
  %63 = sdiv i32 %34, 1024, !dbg !23
  %64 = mul i32 %63, 1024, !dbg !24
  %.decomposed14 = sub i32 %34, %64, !dbg !24
  %65 = sdiv i32 %35, 1024, !dbg !23
  %66 = mul i32 %65, 1024, !dbg !24
  %.decomposed15 = sub i32 %35, %66, !dbg !24
  %67 = sdiv i32 %36, 1024, !dbg !23
  %68 = mul i32 %67, 1024, !dbg !24
  %.decomposed16 = sub i32 %36, %68, !dbg !24
  %69 = shl nsw i32 %.decomposed1, 6, !dbg !25
  %70 = shl nsw i32 %.decomposed2, 6, !dbg !25
  %71 = shl nsw i32 %.decomposed3, 6, !dbg !25
  %72 = shl nsw i32 %.decomposed4, 6, !dbg !25
  %73 = shl nsw i32 %.decomposed5, 6, !dbg !25
  %74 = shl nsw i32 %.decomposed6, 6, !dbg !25
  %75 = shl nsw i32 %.decomposed7, 6, !dbg !25
  %76 = shl nsw i32 %.decomposed8, 6, !dbg !25
  %77 = shl nsw i32 %.decomposed9, 6, !dbg !25
  %78 = shl nsw i32 %.decomposed10, 6, !dbg !25
  %79 = shl nsw i32 %.decomposed11, 6, !dbg !25
  %80 = shl nsw i32 %.decomposed12, 6, !dbg !25
  %81 = shl nsw i32 %.decomposed13, 6, !dbg !25
  %82 = shl nsw i32 %.decomposed14, 6, !dbg !25
  %83 = shl nsw i32 %.decomposed15, 6, !dbg !25
  %84 = shl nsw i32 %.decomposed16, 6, !dbg !25
  %85 = shl i32 %18, 16, !dbg !26
  %86 = add i32 %85, %19, !dbg !27
  %87 = add i32 %86, %37, !dbg !28
  %88 = add i32 %87, %69, !dbg !29
  %89 = add i32 %86, %39, !dbg !28
  %90 = add i32 %89, %70, !dbg !29
  %91 = add i32 %86, %41, !dbg !28
  %92 = add i32 %91, %71, !dbg !29
  %93 = add i32 %86, %43, !dbg !28
  %94 = add i32 %93, %72, !dbg !29
  %95 = add i32 %86, %45, !dbg !28
  %96 = add i32 %95, %73, !dbg !29
  %97 = add i32 %86, %47, !dbg !28
  %98 = add i32 %97, %74, !dbg !29
  %99 = add i32 %86, %49, !dbg !28
  %100 = add i32 %99, %75, !dbg !29
  %101 = add i32 %86, %51, !dbg !28
  %102 = add i32 %101, %76, !dbg !29
  %103 = add i32 %86, %53, !dbg !28
  %104 = add i32 %103, %77, !dbg !29
  %105 = add i32 %86, %55, !dbg !28
  %106 = add i32 %105, %78, !dbg !29
  %107 = add i32 %86, %57, !dbg !28
  %108 = add i32 %107, %79, !dbg !29
  %109 = add i32 %86, %59, !dbg !28
  %110 = add i32 %109, %80, !dbg !29
  %111 = add i32 %86, %61, !dbg !28
  %112 = add i32 %111, %81, !dbg !29
  %113 = add i32 %86, %63, !dbg !28
  %114 = add i32 %113, %82, !dbg !29
  %115 = add i32 %86, %65, !dbg !28
  %116 = add i32 %115, %83, !dbg !29
  %117 = add i32 %86, %67, !dbg !28
  %118 = add i32 %117, %84, !dbg !29
  %119 = sext i32 %88 to i64, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !30
  %121 = sext i32 %90 to i64, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !30
  %123 = sext i32 %92 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !30
  %125 = sext i32 %94 to i64, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !30
  %127 = sext i32 %96 to i64, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !30
  %129 = sext i32 %98 to i64, !dbg !30
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !30
  %131 = sext i32 %100 to i64, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !30
  %133 = sext i32 %102 to i64, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !30
  %135 = sext i32 %104 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !30
  %137 = sext i32 %106 to i64, !dbg !30
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !30
  %139 = sext i32 %108 to i64, !dbg !30
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !30
  %141 = sext i32 %110 to i64, !dbg !30
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !30
  %143 = sext i32 %112 to i64, !dbg !30
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !30
  %145 = sext i32 %114 to i64, !dbg !30
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !30
  %147 = sext i32 %116 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %149 = sext i32 %118 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !30
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %152 = bitcast i32 %151 to float, !dbg !31
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %154 = bitcast i32 %153 to float, !dbg !31
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %156 = bitcast i32 %155 to float, !dbg !31
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %160 = bitcast i32 %159 to float, !dbg !31
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %162 = bitcast i32 %161 to float, !dbg !31
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %164 = bitcast i32 %163 to float, !dbg !31
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %166 = bitcast i32 %165 to float, !dbg !31
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %168 = bitcast i32 %167 to float, !dbg !31
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %170 = bitcast i32 %169 to float, !dbg !31
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %174 = bitcast i32 %173 to float, !dbg !31
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %176 = bitcast i32 %175 to float, !dbg !31
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %180 = bitcast i32 %179 to float, !dbg !31
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %12, i32 0, i1 %12) #3, !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = fadd float %152, %154, !dbg !32
  %184 = fadd float %183, %156, !dbg !32
  %185 = fadd float %184, %158, !dbg !32
  %186 = fadd float %185, %160, !dbg !32
  %187 = fadd float %186, %162, !dbg !32
  %188 = fadd float %187, %164, !dbg !32
  %189 = fadd float %188, %166, !dbg !32
  %190 = fadd float %189, %168, !dbg !32
  %191 = fadd float %190, %170, !dbg !32
  %192 = fadd float %191, %172, !dbg !32
  %193 = fadd float %192, %174, !dbg !32
  %194 = fadd float %193, %176, !dbg !32
  %195 = fadd float %194, %178, !dbg !32
  %196 = fadd float %195, %180, !dbg !32
  %197 = fadd float %196, %182, !dbg !32
  %198 = shl nuw nsw i32 %10, 3, !dbg !37
  %199 = or disjoint i32 %198, %14, !dbg !37
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !37
  %201 = bitcast float %197 to i32, !dbg !37
  %202 = select i1 %12, i32 %201, i32 0, !dbg !32
  %203 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %203, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %204 = icmp slt i32 %9, 256, !dbg !37
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !37
  %206 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %205, i1 %204) #3, !dbg !37
  %207 = bitcast i32 %206 to float, !dbg !37
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !37
  %209 = bitcast i32 %208 to float, !dbg !37
  %210 = fadd float %207, %209, !dbg !32
  %211 = bitcast float %210 to i32, !dbg !37
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !37
  %213 = bitcast i32 %212 to float, !dbg !37
  %214 = fadd float %210, %213, !dbg !32
  %215 = bitcast float %214 to i32, !dbg !37
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !37
  %217 = bitcast i32 %216 to float, !dbg !37
  %218 = fadd float %214, %217, !dbg !32
  %219 = and i32 %9, 7, !dbg !37
  %220 = icmp eq i32 %219, 0, !dbg !37
  %221 = and i1 %204, %220, !dbg !37
  %222 = bitcast float %218 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %222, i1 %221) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !37
  %224 = load float, ptr addrspace(3) %223, align 16, !dbg !37
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 1.280000e+02) #3, !dbg !38
  %226 = fsub float %152, %225, !dbg !39
  %227 = fsub float %154, %225, !dbg !39
  %228 = fsub float %156, %225, !dbg !39
  %229 = fsub float %158, %225, !dbg !39
  %230 = fsub float %160, %225, !dbg !39
  %231 = fsub float %162, %225, !dbg !39
  %232 = fsub float %164, %225, !dbg !39
  %233 = fsub float %166, %225, !dbg !39
  %234 = fsub float %168, %225, !dbg !39
  %235 = fsub float %170, %225, !dbg !39
  %236 = fsub float %172, %225, !dbg !39
  %237 = fsub float %174, %225, !dbg !39
  %238 = fsub float %176, %225, !dbg !39
  %239 = fsub float %178, %225, !dbg !39
  %240 = fsub float %180, %225, !dbg !39
  %241 = fsub float %182, %225, !dbg !39
  %242 = fmul float %226, %226, !dbg !40
  %243 = fmul float %227, %227, !dbg !40
  %244 = fmul float %228, %228, !dbg !40
  %245 = fmul float %229, %229, !dbg !40
  %246 = fmul float %230, %230, !dbg !40
  %247 = fmul float %231, %231, !dbg !40
  %248 = fmul float %232, %232, !dbg !40
  %249 = fmul float %233, %233, !dbg !40
  %250 = fmul float %234, %234, !dbg !40
  %251 = fmul float %235, %235, !dbg !40
  %252 = fmul float %236, %236, !dbg !40
  %253 = fmul float %237, %237, !dbg !40
  %254 = fmul float %238, %238, !dbg !40
  %255 = fmul float %239, %239, !dbg !40
  %256 = fmul float %240, %240, !dbg !40
  %257 = fmul float %241, %241, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %258 = fadd float %242, %243, !dbg !43
  %259 = fadd float %244, %258, !dbg !43
  %260 = fadd float %245, %259, !dbg !43
  %261 = fadd float %246, %260, !dbg !43
  %262 = fadd float %247, %261, !dbg !43
  %263 = fadd float %248, %262, !dbg !43
  %264 = fadd float %249, %263, !dbg !43
  %265 = fadd float %250, %264, !dbg !43
  %266 = fadd float %251, %265, !dbg !43
  %267 = fadd float %252, %266, !dbg !43
  %268 = fadd float %253, %267, !dbg !43
  %269 = fadd float %254, %268, !dbg !43
  %270 = fadd float %255, %269, !dbg !43
  %271 = fadd float %256, %270, !dbg !43
  %272 = fadd float %257, %271, !dbg !43
  %273 = bitcast float %272 to i32, !dbg !41
  %274 = select i1 %12, i32 %273, i32 0, !dbg !43
  %275 = insertelement <1 x i32> poison, i32 %274, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %275, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %276 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %205, i1 %204) #3, !dbg !41
  %277 = bitcast i32 %276 to float, !dbg !41
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 4, i32 31), !dbg !41
  %279 = bitcast i32 %278 to float, !dbg !41
  %280 = fadd float %277, %279, !dbg !43
  %281 = bitcast float %280 to i32, !dbg !41
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !41
  %283 = bitcast i32 %282 to float, !dbg !41
  %284 = fadd float %280, %283, !dbg !43
  %285 = bitcast float %284 to i32, !dbg !41
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !41
  %287 = bitcast i32 %286 to float, !dbg !41
  %288 = fadd float %284, %287, !dbg !43
  %289 = bitcast float %288 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %289, i1 %221) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %290 = load i32, ptr addrspace(3) %223, align 16, !dbg !41
  %291 = sext i32 %11 to i64, !dbg !44
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %291, !dbg !44
  %293 = icmp eq i32 %14, 0, !dbg !45
  %294 = bitcast float %225 to i32, !dbg !45
  %295 = and i1 %293, %12, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %292, i1 %295) #3, !dbg !45
  %296 = getelementptr float, ptr addrspace(1) %2, i64 %291, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %290, ptr addrspace(1) %296, i1 %295) #3, !dbg !47
  %297 = getelementptr float, ptr addrspace(1) %3, i64 %291, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %297, i1 %295) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu25qegcjiwknbanwn23iq3hdqj4jk7ajw74cjrq6mxas6t66cea.py", directory: "inductor_cache/u2")
!4 = !{ptr @triton_per_fused_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_6", linkageName: "triton_per_fused_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 26, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 32, scope: !7)
!21 = !DILocation(line: 34, column: 52, scope: !7)
!22 = !DILocation(line: 34, column: 48, scope: !7)
!23 = !DILocation(line: 34, column: 96, scope: !7)
!24 = !DILocation(line: 34, column: 58, scope: !7)
!25 = !DILocation(line: 34, column: 42, scope: !7)
!26 = !DILocation(line: 34, column: 73, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 34, column: 67, scope: !7)
!29 = !DILocation(line: 34, column: 79, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 104, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 47, column: 26, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 36, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
