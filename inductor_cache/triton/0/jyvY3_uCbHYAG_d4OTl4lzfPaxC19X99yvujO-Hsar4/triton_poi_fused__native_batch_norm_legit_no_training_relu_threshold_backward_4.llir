; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !11
  %12 = shl i32 %11, 10, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = and i32 %13, 127, !dbg !13
  %15 = or disjoint i32 %12, %14, !dbg !14
  %16 = or disjoint i32 %15, 128, !dbg !14
  %17 = or disjoint i32 %15, 256, !dbg !14
  %18 = or disjoint i32 %15, 384, !dbg !14
  %19 = or disjoint i32 %15, 512, !dbg !14
  %20 = or disjoint i32 %15, 640, !dbg !14
  %21 = or disjoint i32 %15, 768, !dbg !14
  %22 = or disjoint i32 %15, 896, !dbg !14
  %23 = icmp slt i32 %15, 2025, !dbg !15
  %24 = icmp slt i32 %16, 2025, !dbg !15
  %25 = icmp slt i32 %17, 2025, !dbg !15
  %26 = icmp slt i32 %18, 2025, !dbg !15
  %27 = icmp slt i32 %19, 2025, !dbg !15
  %28 = icmp slt i32 %20, 2025, !dbg !15
  %29 = icmp slt i32 %21, 2025, !dbg !15
  %30 = icmp slt i32 %22, 2025, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %31 = sdiv i32 %.frozen, 256, !dbg !16
  %32 = mul i32 %31, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = shl i32 %15, 8, !dbg !18
  %34 = shl i32 %16, 8, !dbg !18
  %35 = shl i32 %17, 8, !dbg !18
  %36 = shl i32 %18, 8, !dbg !18
  %37 = shl i32 %19, 8, !dbg !18
  %38 = shl i32 %20, 8, !dbg !18
  %39 = shl i32 %21, 8, !dbg !18
  %40 = shl i32 %22, 8, !dbg !18
  %41 = mul i32 %31, 518400, !dbg !19
  %42 = add i32 %41, %.decomposed, !dbg !20
  %43 = add i32 %42, %33, !dbg !21
  %44 = add i32 %42, %34, !dbg !21
  %45 = add i32 %42, %35, !dbg !21
  %46 = add i32 %42, %36, !dbg !21
  %47 = add i32 %42, %37, !dbg !21
  %48 = add i32 %42, %38, !dbg !21
  %49 = add i32 %42, %39, !dbg !21
  %50 = add i32 %42, %40, !dbg !21
  %51 = sext i32 %43 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %44 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %45 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %46 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %47 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %48 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = sext i32 %49 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = sext i32 %50 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %24) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %26) #3, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %27) #3, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #3, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %29) #3, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %30) #3, !dbg !23
  %75 = sext i32 %.decomposed to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %80 = bitcast i32 %79 to float, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !31
  %85 = fadd float %80, 0x3EE4F8B580000000, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %86, 0, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %87, 0, !dbg !33
  br i1 %.not.i, label %93, label %88, !dbg !33

88:                                               ; preds = %9
  br i1 %.not1.i, label %91, label %89, !dbg !33

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

93:                                               ; preds = %9
  br i1 %.not1.i, label %96, label %94, !dbg !33

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !33
  %98 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !23
  %99 = insertelement <8 x i32> %98, i32 %73, i64 1, !dbg !23
  %100 = insertelement <8 x i32> %99, i32 %72, i64 2, !dbg !23
  %101 = insertelement <8 x i32> %100, i32 %71, i64 3, !dbg !23
  %102 = insertelement <8 x i32> %101, i32 %70, i64 4, !dbg !23
  %103 = insertelement <8 x i32> %102, i32 %69, i64 5, !dbg !23
  %104 = insertelement <8 x i32> %103, i32 %68, i64 6, !dbg !23
  %105 = insertelement <8 x i32> %104, i32 %67, i64 7, !dbg !23
  %106 = bitcast <8 x i32> %105 to <8 x float>, !dbg !23
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %108 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !35
  %109 = bitcast <8 x i32> %108 to <8 x float>, !dbg !35
  %110 = shufflevector <8 x float> %109, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %111 = fsub <8 x float> %106, %110, !dbg !35
  %112 = insertelement <8 x float> poison, float %107, i64 0, !dbg !36
  %113 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %114 = fmul <8 x float> %111, %113, !dbg !36
  %115 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !37
  %116 = bitcast <8 x i32> %115 to <8 x float>, !dbg !37
  %117 = shufflevector <8 x float> %116, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %118 = fmul <8 x float> %114, %117, !dbg !37
  %119 = insertelement <8 x i32> poison, i32 %84, i64 0, !dbg !38
  %120 = bitcast <8 x i32> %119 to <8 x float>, !dbg !38
  %121 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %122 = fadd <8 x float> %118, %121, !dbg !38
  %123 = fcmp olt <8 x float> %122, zeroinitializer, !dbg !39
  %124 = select <8 x i1> %123, <8 x float> zeroinitializer, <8 x float> %122, !dbg !43
  %125 = fcmp ole <8 x float> %124, zeroinitializer, !dbg !44
  %126 = mul i32 %10, 2025, !dbg !45
  %127 = add i32 %15, %126, !dbg !46
  %128 = add i32 %126, %16, !dbg !46
  %129 = add i32 %126, %17, !dbg !46
  %130 = add i32 %126, %18, !dbg !46
  %131 = add i32 %126, %19, !dbg !46
  %132 = add i32 %126, %20, !dbg !46
  %133 = add i32 %126, %21, !dbg !46
  %134 = add i32 %126, %22, !dbg !46
  %135 = sext i32 %127 to i64, !dbg !47
  %136 = getelementptr float, ptr addrspace(1) %5, i64 %135, !dbg !47
  %137 = sext i32 %128 to i64, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %5, i64 %137, !dbg !47
  %139 = sext i32 %129 to i64, !dbg !47
  %140 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !47
  %141 = sext i32 %130 to i64, !dbg !47
  %142 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !47
  %143 = sext i32 %131 to i64, !dbg !47
  %144 = getelementptr float, ptr addrspace(1) %5, i64 %143, !dbg !47
  %145 = sext i32 %132 to i64, !dbg !47
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %145, !dbg !47
  %147 = sext i32 %133 to i64, !dbg !47
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !47
  %149 = sext i32 %134 to i64, !dbg !47
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !47
  %bc = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %151 = extractelement <8 x i32> %bc, i64 7, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %136, i1 %23) #3, !dbg !48
  %bc1 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %152 = extractelement <8 x i32> %bc1, i64 6, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %138, i1 %24) #3, !dbg !48
  %bc2 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %153 = extractelement <8 x i32> %bc2, i64 5, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %140, i1 %25) #3, !dbg !48
  %bc3 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %154 = extractelement <8 x i32> %bc3, i64 4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %142, i1 %26) #3, !dbg !48
  %bc4 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %155 = extractelement <8 x i32> %bc4, i64 3, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %144, i1 %27) #3, !dbg !48
  %bc5 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %156 = extractelement <8 x i32> %bc5, i64 2, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %146, i1 %28) #3, !dbg !48
  %bc6 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %157 = extractelement <8 x i32> %bc6, i64 1, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %148, i1 %29) #3, !dbg !48
  %bc7 = bitcast <8 x float> %124 to <8 x i32>, !dbg !48
  %158 = extractelement <8 x i32> %bc7, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %150, i1 %30) #3, !dbg !48
  %159 = getelementptr i1, ptr addrspace(1) %6, i64 %51, !dbg !49
  %160 = getelementptr i1, ptr addrspace(1) %6, i64 %53, !dbg !49
  %161 = getelementptr i1, ptr addrspace(1) %6, i64 %55, !dbg !49
  %162 = getelementptr i1, ptr addrspace(1) %6, i64 %57, !dbg !49
  %163 = getelementptr i1, ptr addrspace(1) %6, i64 %59, !dbg !49
  %164 = getelementptr i1, ptr addrspace(1) %6, i64 %61, !dbg !49
  %165 = getelementptr i1, ptr addrspace(1) %6, i64 %63, !dbg !49
  %166 = getelementptr i1, ptr addrspace(1) %6, i64 %65, !dbg !49
  %167 = extractelement <8 x i1> %125, i64 7, !dbg !50
  %168 = zext i1 %167 to i8, !dbg !50
  %169 = extractelement <8 x i1> %125, i64 6, !dbg !50
  %170 = zext i1 %169 to i8, !dbg !50
  %171 = extractelement <8 x i1> %125, i64 5, !dbg !50
  %172 = zext i1 %171 to i8, !dbg !50
  %173 = extractelement <8 x i1> %125, i64 4, !dbg !50
  %174 = zext i1 %173 to i8, !dbg !50
  %175 = extractelement <8 x i1> %125, i64 3, !dbg !50
  %176 = zext i1 %175 to i8, !dbg !50
  %177 = extractelement <8 x i1> %125, i64 2, !dbg !50
  %178 = zext i1 %177 to i8, !dbg !50
  %179 = extractelement <8 x i1> %125, i64 1, !dbg !50
  %180 = zext i1 %179 to i8, !dbg !50
  %181 = extractelement <8 x i1> %125, i64 0, !dbg !50
  %182 = zext i1 %181 to i8, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %168, ptr addrspace(1) %159, i1 %23) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %170, ptr addrspace(1) %160, i1 %24) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %172, ptr addrspace(1) %161, i1 %25) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %174, ptr addrspace(1) %162, i1 %26) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %176, ptr addrspace(1) %163, i1 %27) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %178, ptr addrspace(1) %164, i1 %28) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %180, ptr addrspace(1) %165, i1 %29) #3, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %182, ptr addrspace(1) %166, i1 %30) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnw6ask2s37dovb4xs7mawn655piofwkeeex7p4b3scs73uqabh.py", directory: "inductor_cache/cn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 49, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 51, column: 21, scope: !7)
!45 = !DILocation(line: 52, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 30, scope: !7)
!47 = !DILocation(line: 52, column: 25, scope: !7)
!48 = !DILocation(line: 52, column: 47, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 58, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
