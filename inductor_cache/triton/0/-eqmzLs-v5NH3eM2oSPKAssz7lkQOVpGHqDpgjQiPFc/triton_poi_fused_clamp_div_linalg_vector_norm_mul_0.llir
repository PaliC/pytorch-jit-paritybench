; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_div_linalg_vector_norm_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sext i32 %10 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !18
  %17 = shl nsw i32 %12, 2, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %11) #3, !dbg !21
  %21 = bitcast i32 %20 to float, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %11) #3, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = or disjoint i32 %17, 1, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #3, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #3, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = or disjoint i32 %17, 2, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #3, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #3, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = or disjoint i32 %17, 3, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #3, !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #3, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = sext i32 %.decomposed to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %11) #3, !dbg !32
  %48 = fmul float %21, %21, !dbg !33
  %49 = fmul float %23, %23, !dbg !33
  %50 = fmul float %28, %28, !dbg !34
  %51 = fmul float %30, %30, !dbg !34
  %52 = fadd float %48, %50, !dbg !35
  %53 = fadd float %49, %51, !dbg !35
  %54 = fmul float %35, %35, !dbg !36
  %55 = fmul float %37, %37, !dbg !36
  %56 = fadd float %52, %54, !dbg !37
  %57 = fadd float %53, %55, !dbg !37
  %58 = fmul float %42, %42, !dbg !38
  %59 = fmul float %44, %44, !dbg !38
  %60 = fadd float %56, %58, !dbg !39
  %61 = fadd float %57, %59, !dbg !39
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %62, 0, !dbg !40
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %63, 0, !dbg !40
  br i1 %.not.i, label %69, label %64, !dbg !40

64:                                               ; preds = %4
  br i1 %.not1.i, label %67, label %65, !dbg !40

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

69:                                               ; preds = %4
  br i1 %.not1.i, label %72, label %70, !dbg !40

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !40
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %74, 0, !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !40
  br i1 %.not.i1, label %81, label %76, !dbg !40

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !40

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !40

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !40
  %86 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %89 = bitcast i32 %88 to float, !dbg !32
  %90 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %91 = bitcast i32 %90 to float, !dbg !18
  %92 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %93 = bitcast i32 %92 to float, !dbg !18
  %94 = fmul float %.0.i, 5.000000e-01, !dbg !41
  %95 = fmul float %.0.i3, 5.000000e-01, !dbg !41
  %96 = fcmp ogt float %94, 0x3E45798EE0000000, !dbg !42
  %97 = fcmp ogt float %95, 0x3E45798EE0000000, !dbg !42
  %98 = fcmp uno float %94, 0.000000e+00, !dbg !46
  %99 = fcmp uno float %95, 0.000000e+00, !dbg !46
  %100 = or i1 %96, %98, !dbg !47
  %101 = or i1 %97, %99, !dbg !47
  %102 = select i1 %100, float %94, float 0x3E45798EE0000000, !dbg !48
  %103 = select i1 %101, float %95, float 0x3E45798EE0000000, !dbg !48
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %102) #3, !dbg !49
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %103) #3, !dbg !49
  %106 = fmul float %104, %89, !dbg !50
  %107 = fmul float %105, %87, !dbg !50
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !51
  %109 = bitcast float %106 to i32, !dbg !52
  %110 = bitcast float %107 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %11) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctvn2wt4s4j6mvgjynhauw2cbqwxtkmmirtismunlm3pzrvbsv4y.py", directory: "inductor_cache/tv")
!4 = !{ptr @triton_poi_fused_clamp_div_linalg_vector_norm_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_div_linalg_vector_norm_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_div_linalg_vector_norm_mul_0", linkageName: "triton_poi_fused_clamp_div_linalg_vector_norm_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 29, column: 34, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 30, column: 34, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 34, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 41, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 19, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 40, column: 27, scope: !7)
!41 = !DILocation(line: 42, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 44, column: 42, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 45, column: 19, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 25, scope: !7)
!52 = !DILocation(line: 47, column: 37, scope: !7)
!53 = !DILocation(line: 47, column: 4, scope: !7)
