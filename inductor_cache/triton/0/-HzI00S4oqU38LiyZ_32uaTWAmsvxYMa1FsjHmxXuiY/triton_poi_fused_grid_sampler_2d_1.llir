; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_7 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp135 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_6 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp130 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_5 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp118 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_4 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp113 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp97 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp91 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp78 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp72 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %6 = shl i32 %5, 8, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 254, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %10, 1, !dbg !15
  %12 = icmp slt i32 %10, 256, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %13 = sdiv i32 %.frozen, 16, !dbg !17
  %14 = mul i32 %13, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %14, !dbg !18
  %15 = srem i32 %11, 16, !dbg !18
  %16 = sdiv i32 %10, 64, !dbg !19
  %17 = mul nsw i32 %.decomposed, 6, !dbg !20
  %18 = mul nsw i32 %15, 6, !dbg !20
  %19 = mul i32 %16, 96, !dbg !21
  %20 = add i32 %19, %17, !dbg !22
  %21 = or disjoint i32 %20, 3, !dbg !23
  %22 = add i32 %19, %18, !dbg !22
  %23 = add i32 %22, 3, !dbg !23
  %24 = sext i32 %21 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %26 = sext i32 %23 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #6, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = add i32 %20, 4, !dbg !26
  %33 = add i32 %22, 4, !dbg !26
  %34 = sext i32 %32 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !27
  %36 = sext i32 %33 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #6, !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #6, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = add i32 %20, 5, !dbg !29
  %43 = add i32 %22, 5, !dbg !29
  %44 = sext i32 %42 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = sext i32 %43 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #6, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %12) #6, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = sext i32 %20 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !32
  %54 = sext i32 %22 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %12) #6, !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #6, !dbg !33
  %59 = bitcast i32 %58 to float, !dbg !33
  %60 = or disjoint i32 %20, 1, !dbg !34
  %61 = or disjoint i32 %22, 1, !dbg !34
  %62 = sext i32 %60 to i64, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !35
  %64 = sext i32 %61 to i64, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %12) #6, !dbg !36
  %67 = bitcast i32 %66 to float, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #6, !dbg !36
  %69 = bitcast i32 %68 to float, !dbg !36
  %70 = or disjoint i32 %20, 2, !dbg !37
  %71 = add i32 %22, 2, !dbg !37
  %72 = sext i32 %70 to i64, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !38
  %74 = sext i32 %71 to i64, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !38
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %12) #6, !dbg !39
  %77 = bitcast i32 %76 to float, !dbg !39
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %12) #6, !dbg !39
  %79 = bitcast i32 %78 to float, !dbg !39
  %80 = fadd float %29, %39, !dbg !40
  %81 = fadd float %31, %41, !dbg !40
  %82 = fadd float %80, %49, !dbg !41
  %83 = fadd float %81, %51, !dbg !41
  %84 = fmul float %82, 2.000000e+00, !dbg !42
  %85 = fmul float %83, 2.000000e+00, !dbg !42
  %86 = fadd float %84, 1.500000e+00, !dbg !43
  %87 = fadd float %85, 1.500000e+00, !dbg !43
  %88 = fadd float %86, 5.000000e-01, !dbg !44
  %89 = fadd float %87, 5.000000e-01, !dbg !44
  %90 = tail call float @llvm.fabs.f32(float %88), !dbg !45
  %91 = tail call float @llvm.fabs.f32(float %89), !dbg !45
  %92 = fmul float %90, 2.500000e-01, !dbg !46
  %93 = fmul float %91, 2.500000e-01, !dbg !46
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i = icmp eq i32 %94, 0, !dbg !47
  %95 = tail call float @llvm.nvvm.floor.ftz.f(float %92), !dbg !47
  %96 = tail call float @llvm.nvvm.floor.f(float %92), !dbg !47
  %.0.i = select i1 %.not.i, float %96, float %95, !dbg !47
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i35 = icmp eq i32 %97, 0, !dbg !47
  %98 = tail call float @llvm.nvvm.floor.ftz.f(float %93), !dbg !47
  %99 = tail call float @llvm.nvvm.floor.f(float %93), !dbg !47
  %.0.i36 = select i1 %.not.i35, float %99, float %98, !dbg !47
  %100 = fptosi float %.0.i to i8, !dbg !48
  %101 = fptosi float %.0.i36 to i8, !dbg !48
  %102 = and i8 %100, 1, !dbg !49
  %103 = and i8 %101, 1, !dbg !49
  %104 = icmp eq i8 %102, 0, !dbg !50
  %105 = icmp eq i8 %103, 0, !dbg !50
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i49 = icmp eq i32 %106, 0, !dbg !51
  %107 = tail call float @llvm.nvvm.fabs.ftz.f(float 4.000000e+00) #6, !dbg !51
  %108 = tail call float @llvm.nvvm.fabs.f(float 4.000000e+00) #6, !dbg !51
  %.0.i50 = select i1 %.not.i49, float %108, float %107, !dbg !51
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not16.i = icmp eq i32 %109, 0, !dbg !51
  %110 = tail call float @llvm.nvvm.fabs.ftz.f(float %90) #6, !dbg !51
  %111 = tail call float @llvm.nvvm.fabs.f(float %90) #6, !dbg !51
  %.01.i = select i1 %.not16.i, float %111, float %110, !dbg !51
  %112 = fcmp olt float %.01.i, %.0.i50, !dbg !51
  br i1 %112, label %__internal_fmodf_kernel.exit.i, label %113, !dbg !51

113:                                              ; preds = %4
  %114 = fmul float %.0.i50, 0x4160000000000000, !dbg !51
  %115 = fcmp ugt float %.01.i, %114, !dbg !51
  br i1 %115, label %146, label %116, !dbg !51

116:                                              ; preds = %113
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not23.i = icmp eq i32 %117, 0, !dbg !51
  br i1 %.not23.i, label %120, label %118, !dbg !51

118:                                              ; preds = %116
  %119 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i, float %.0.i50) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i, !dbg !51

120:                                              ; preds = %116
  %121 = tail call float @llvm.nvvm.div.approx.f(float %.01.i, float %.0.i50) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i, !dbg !51

__nv_fast_fdividef.exit.i.i.i:                    ; preds = %120, %118
  %.02.i = phi float [ %119, %118 ], [ %121, %120 ], !dbg !51
  %122 = tail call float @llvm.nvvm.trunc.f(float %.02.i) #6, !dbg !51
  %123 = fneg float %.0.i50, !dbg !51
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %123, float %122, float %.01.i) #6, !dbg !51
  %125 = bitcast float %124 to i32, !dbg !51
  %126 = bitcast float %.0.i50 to i32, !dbg !51
  %.not24.i = icmp ult i32 %125, %126, !dbg !51
  br i1 %.not24.i, label %__internal_fmodf_fastpath_quot.exit.i.i, label %127, !dbg !51

127:                                              ; preds = %__nv_fast_fdividef.exit.i.i.i
  %128 = icmp ugt i32 %125, -2147483648, !dbg !51
  br i1 %128, label %129, label %133, !dbg !51

129:                                              ; preds = %127
  %130 = fadd float %122, -1.000000e+00, !dbg !51
  %131 = fcmp olt float %124, %123, !dbg !51
  %132 = fadd float %130, -1.000000e+00, !dbg !51
  %quotient.i.i.0.i = select i1 %131, float %132, float %130, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i, !dbg !51

133:                                              ; preds = %127
  %134 = fadd float %122, 1.000000e+00, !dbg !51
  %135 = fmul float %.0.i50, 2.000000e+00, !dbg !51
  %136 = fcmp ult float %124, %135, !dbg !51
  br i1 %136, label %__internal_fmodf_fastpath_quot.exit.i.i, label %__nv_fmaf_rn.exit.i.i.i, !dbg !51

__nv_fmaf_rn.exit.i.i.i:                          ; preds = %133
  %137 = fadd float %134, 1.000000e+00, !dbg !51
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not25.i = icmp eq i32 %138, 0, !dbg !51
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i50, float %124) #6, !dbg !51
  %140 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i50, float %124) #6, !dbg !51
  %.03.i = select i1 %.not25.i, float %140, float %139, !dbg !51
  %141 = fcmp oge float %.03.i, 0.000000e+00, !dbg !51
  %142 = fadd float %137, 1.000000e+00, !dbg !51
  %quotient.i.i.1.i = select i1 %141, float %142, float %137, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i, !dbg !51

__internal_fmodf_fastpath_quot.exit.i.i:          ; preds = %__nv_fmaf_rn.exit.i.i.i, %133, %129, %__nv_fast_fdividef.exit.i.i.i
  %quotient.i.i.4.i = phi float [ %122, %__nv_fast_fdividef.exit.i.i.i ], [ %quotient.i.i.0.i, %129 ], [ %quotient.i.i.1.i, %__nv_fmaf_rn.exit.i.i.i ], [ %134, %133 ], !dbg !51
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not26.i = icmp eq i32 %143, 0, !dbg !51
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %123, float %quotient.i.i.4.i, float %.01.i) #6, !dbg !51
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %123, float %quotient.i.i.4.i, float %.01.i) #6, !dbg !51
  %.04.i = select i1 %.not26.i, float %145, float %144, !dbg !51
  br label %__internal_fmodf_kernel.exit.i, !dbg !51

146:                                              ; preds = %113
  %147 = bitcast float %.01.i to i32, !dbg !51
  %148 = bitcast float %114 to i32, !dbg !51
  %149 = and i32 %148, -8388608, !dbg !51
  %150 = and i32 %147, 8388607, !dbg !51
  %151 = or disjoint i32 %150, 1065353216, !dbg !51
  %152 = and i32 %148, 8388607, !dbg !51
  %153 = or disjoint i32 %152, 1065353216, !dbg !51
  %154 = bitcast i32 %151 to float, !dbg !51
  %155 = bitcast i32 %153 to float, !dbg !51
  %156 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %155) #7, !dbg !51, !srcloc !52
  %.neg180 = add i32 %147, 192937984, !dbg !51
  %157 = sub i32 %.neg180, %149, !dbg !51
  %158 = and i32 %157, -8388608, !dbg !51
  %.not = icmp eq i32 %158, 0, !dbg !51
  br i1 %.not, label %__internal_fmodf_slowpath_mod.exit.i.i, label %__nv_fmaf_rn.exit4.i.i.i.lr.ph, !dbg !51

__nv_fmaf_rn.exit4.i.i.i.lr.ph:                   ; preds = %146
  %159 = fneg float %155
  br label %__nv_fmaf_rn.exit4.i.i.i, !dbg !51

__nv_fmaf_rn.exit4.i.i.i:                         ; preds = %__nv_fmaf_rn.exit4.i.i.i.lr.ph, %__nv_fmaf_rn.exit4.i.i.i
  %ux.i.i.0.i189 = phi i32 [ %151, %__nv_fmaf_rn.exit4.i.i.i.lr.ph ], [ %182, %__nv_fmaf_rn.exit4.i.i.i ]
  %i.i.i.0.i188 = phi i32 [ %158, %__nv_fmaf_rn.exit4.i.i.i.lr.ph ], [ %181, %__nv_fmaf_rn.exit4.i.i.i ]
  %min2.i = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i188, i32 192937984), !dbg !51
  %160 = add i32 %ux.i.i.0.i189, %min2.i, !dbg !51
  %161 = bitcast i32 %160 to float, !dbg !51
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not17.i = icmp eq i32 %162, 0, !dbg !51
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %161, float %156, float -0.000000e+00) #6, !dbg !51
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %161, float %156, float -0.000000e+00) #6, !dbg !51
  %.010.i = select i1 %.not17.i, float %164, float %163, !dbg !51
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not18.i = icmp eq i32 %165, 0, !dbg !51
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %159, float %.010.i, float %161) #6, !dbg !51
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %159, float %.010.i, float %161) #6, !dbg !51
  %.011.i = select i1 %.not18.i, float %167, float %166, !dbg !51
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not19.i = icmp eq i32 %168, 0, !dbg !51
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %156, float %.010.i) #6, !dbg !51
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %156, float %.010.i) #6, !dbg !51
  %.012.i = select i1 %.not19.i, float %170, float %169, !dbg !51
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not20.i = icmp eq i32 %171, 0, !dbg !51
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %159, float %.012.i, float %161) #6, !dbg !51
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %159, float %.012.i, float %161) #6, !dbg !51
  %.09.i = select i1 %.not20.i, float %173, float %172, !dbg !51
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not21.i = icmp eq i32 %174, 0, !dbg !51
  %175 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i, float %156, float %.012.i) #6, !dbg !51
  %176 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i, float %156, float %.012.i) #6, !dbg !51
  %.08.i = select i1 %.not21.i, float %176, float %175, !dbg !51
  %177 = tail call float @llvm.nvvm.trunc.f(float %.08.i) #6, !dbg !51
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not22.i = icmp eq i32 %178, 0, !dbg !51
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %159, float %177, float %161) #6, !dbg !51
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %159, float %177, float %161) #6, !dbg !51
  %.07.i = select i1 %.not22.i, float %180, float %179, !dbg !51
  %181 = sub i32 %i.i.i.0.i188, %min2.i, !dbg !51
  %182 = bitcast float %.07.i to i32, !dbg !51
  %183 = icmp ne i32 %181, 0, !dbg !51
  %184 = icmp ne i32 %182, 0, !dbg !51
  %spec.select.i = select i1 %183, i1 %184, i1 false, !dbg !51
  br i1 %spec.select.i, label %__nv_fmaf_rn.exit4.i.i.i, label %__internal_fmodf_slowpath_mod.exit.i.i, !dbg !51

__internal_fmodf_slowpath_mod.exit.i.i:           ; preds = %__nv_fmaf_rn.exit4.i.i.i, %146
  %.06.i.lcssa = phi float [ %154, %146 ], [ %.07.i, %__nv_fmaf_rn.exit4.i.i.i ], !dbg !51
  %185 = bitcast i32 %149 to float, !dbg !51
  %186 = fcmp ule float %.0.i50, 0.000000e+00, !dbg !51
  %187 = icmp ugt i32 %147, 2139095039, !dbg !51
  %or.cond.i = or i1 %186, %187, !dbg !51
  %188 = select i1 %or.cond.i, float 0x7FFFFFFFE0000000, float %185, !dbg !51
  %189 = fmul float %.06.i.lcssa, 0x3E80000000000000, !dbg !51
  %190 = fmul float %188, %189, !dbg !51
  br label %__internal_fmodf_kernel.exit.i, !dbg !51

__internal_fmodf_kernel.exit.i:                   ; preds = %__internal_fmodf_slowpath_mod.exit.i.i, %__internal_fmodf_fastpath_quot.exit.i.i, %4
  %ans.i.1.i = phi float [ %.01.i, %4 ], [ %.04.i, %__internal_fmodf_fastpath_quot.exit.i.i ], [ %190, %__internal_fmodf_slowpath_mod.exit.i.i ], !dbg !51
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i51 = icmp eq i32 %192, 0, !dbg !51
  %.0.i52 = select i1 %.not.i51, float %108, float %107, !dbg !51
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not16.i53 = icmp eq i32 %193, 0, !dbg !51
  %194 = tail call float @llvm.nvvm.fabs.ftz.f(float %91) #6, !dbg !51
  %195 = tail call float @llvm.nvvm.fabs.f(float %91) #6, !dbg !51
  %.01.i54 = select i1 %.not16.i53, float %195, float %194, !dbg !51
  %196 = fcmp olt float %.01.i54, %.0.i52, !dbg !51
  br i1 %196, label %__internal_fmodf_kernel.exit.i67, label %197, !dbg !51

197:                                              ; preds = %__internal_fmodf_kernel.exit.i
  %198 = fmul float %.0.i52, 0x4160000000000000, !dbg !51
  %199 = fcmp ugt float %.01.i54, %198, !dbg !51
  br i1 %199, label %230, label %200, !dbg !51

200:                                              ; preds = %197
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not23.i55 = icmp eq i32 %201, 0, !dbg !51
  br i1 %.not23.i55, label %204, label %202, !dbg !51

202:                                              ; preds = %200
  %203 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i54, float %.0.i52) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i56, !dbg !51

204:                                              ; preds = %200
  %205 = tail call float @llvm.nvvm.div.approx.f(float %.01.i54, float %.0.i52) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i56, !dbg !51

__nv_fast_fdividef.exit.i.i.i56:                  ; preds = %204, %202
  %.02.i57 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !51
  %206 = tail call float @llvm.nvvm.trunc.f(float %.02.i57) #6, !dbg !51
  %207 = fneg float %.0.i52, !dbg !51
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %207, float %206, float %.01.i54) #6, !dbg !51
  %209 = bitcast float %208 to i32, !dbg !51
  %210 = bitcast float %.0.i52 to i32, !dbg !51
  %.not24.i58 = icmp ult i32 %209, %210, !dbg !51
  br i1 %.not24.i58, label %__internal_fmodf_fastpath_quot.exit.i.i63, label %211, !dbg !51

211:                                              ; preds = %__nv_fast_fdividef.exit.i.i.i56
  %212 = icmp ugt i32 %209, -2147483648, !dbg !51
  br i1 %212, label %213, label %217, !dbg !51

213:                                              ; preds = %211
  %214 = fadd float %206, -1.000000e+00, !dbg !51
  %215 = fcmp olt float %208, %207, !dbg !51
  %216 = fadd float %214, -1.000000e+00, !dbg !51
  %quotient.i.i.0.i71 = select i1 %215, float %216, float %214, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i63, !dbg !51

217:                                              ; preds = %211
  %218 = fadd float %206, 1.000000e+00, !dbg !51
  %219 = fmul float %.0.i52, 2.000000e+00, !dbg !51
  %220 = fcmp ult float %208, %219, !dbg !51
  br i1 %220, label %__internal_fmodf_fastpath_quot.exit.i.i63, label %__nv_fmaf_rn.exit.i.i.i59, !dbg !51

__nv_fmaf_rn.exit.i.i.i59:                        ; preds = %217
  %221 = fadd float %218, 1.000000e+00, !dbg !51
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not25.i60 = icmp eq i32 %222, 0, !dbg !51
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i52, float %208) #6, !dbg !51
  %224 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i52, float %208) #6, !dbg !51
  %.03.i61 = select i1 %.not25.i60, float %224, float %223, !dbg !51
  %225 = fcmp oge float %.03.i61, 0.000000e+00, !dbg !51
  %226 = fadd float %221, 1.000000e+00, !dbg !51
  %quotient.i.i.1.i62 = select i1 %225, float %226, float %221, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i63, !dbg !51

__internal_fmodf_fastpath_quot.exit.i.i63:        ; preds = %__nv_fmaf_rn.exit.i.i.i59, %217, %213, %__nv_fast_fdividef.exit.i.i.i56
  %quotient.i.i.4.i64 = phi float [ %206, %__nv_fast_fdividef.exit.i.i.i56 ], [ %quotient.i.i.0.i71, %213 ], [ %quotient.i.i.1.i62, %__nv_fmaf_rn.exit.i.i.i59 ], [ %218, %217 ], !dbg !51
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not26.i65 = icmp eq i32 %227, 0, !dbg !51
  %228 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %207, float %quotient.i.i.4.i64, float %.01.i54) #6, !dbg !51
  %229 = tail call float @llvm.nvvm.fma.rn.f(float %207, float %quotient.i.i.4.i64, float %.01.i54) #6, !dbg !51
  %.04.i66 = select i1 %.not26.i65, float %229, float %228, !dbg !51
  br label %__internal_fmodf_kernel.exit.i67, !dbg !51

230:                                              ; preds = %197
  %231 = bitcast float %.01.i54 to i32, !dbg !51
  %232 = bitcast float %198 to i32, !dbg !51
  %233 = and i32 %232, -8388608, !dbg !51
  %234 = and i32 %231, 8388607, !dbg !51
  %235 = or disjoint i32 %234, 1065353216, !dbg !51
  %236 = and i32 %232, 8388607, !dbg !51
  %237 = or disjoint i32 %236, 1065353216, !dbg !51
  %238 = bitcast i32 %235 to float, !dbg !51
  %239 = bitcast i32 %237 to float, !dbg !51
  %240 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %239) #7, !dbg !51, !srcloc !52
  %.neg182 = add i32 %231, 192937984, !dbg !51
  %241 = sub i32 %.neg182, %233, !dbg !51
  %242 = and i32 %241, -8388608, !dbg !51
  %.not202 = icmp eq i32 %242, 0, !dbg !51
  br i1 %.not202, label %__internal_fmodf_slowpath_mod.exit.i.i77, label %__nv_fmaf_rn.exit4.i.i.i79.lr.ph, !dbg !51

__nv_fmaf_rn.exit4.i.i.i79.lr.ph:                 ; preds = %230
  %243 = fneg float %239
  br label %__nv_fmaf_rn.exit4.i.i.i79, !dbg !51

__nv_fmaf_rn.exit4.i.i.i79:                       ; preds = %__nv_fmaf_rn.exit4.i.i.i79.lr.ph, %__nv_fmaf_rn.exit4.i.i.i79
  %ux.i.i.0.i75192 = phi i32 [ %235, %__nv_fmaf_rn.exit4.i.i.i79.lr.ph ], [ %266, %__nv_fmaf_rn.exit4.i.i.i79 ]
  %i.i.i.0.i74191 = phi i32 [ %242, %__nv_fmaf_rn.exit4.i.i.i79.lr.ph ], [ %265, %__nv_fmaf_rn.exit4.i.i.i79 ]
  %min2.i80 = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i74191, i32 192937984), !dbg !51
  %244 = add i32 %ux.i.i.0.i75192, %min2.i80, !dbg !51
  %245 = bitcast i32 %244 to float, !dbg !51
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not17.i81 = icmp eq i32 %246, 0, !dbg !51
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %245, float %240, float -0.000000e+00) #6, !dbg !51
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %245, float %240, float -0.000000e+00) #6, !dbg !51
  %.010.i82 = select i1 %.not17.i81, float %248, float %247, !dbg !51
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not18.i83 = icmp eq i32 %249, 0, !dbg !51
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %243, float %.010.i82, float %245) #6, !dbg !51
  %251 = tail call float @llvm.nvvm.fma.rn.f(float %243, float %.010.i82, float %245) #6, !dbg !51
  %.011.i84 = select i1 %.not18.i83, float %251, float %250, !dbg !51
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not19.i85 = icmp eq i32 %252, 0, !dbg !51
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i84, float %240, float %.010.i82) #6, !dbg !51
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i84, float %240, float %.010.i82) #6, !dbg !51
  %.012.i86 = select i1 %.not19.i85, float %254, float %253, !dbg !51
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not20.i87 = icmp eq i32 %255, 0, !dbg !51
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %243, float %.012.i86, float %245) #6, !dbg !51
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %243, float %.012.i86, float %245) #6, !dbg !51
  %.09.i88 = select i1 %.not20.i87, float %257, float %256, !dbg !51
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not21.i89 = icmp eq i32 %258, 0, !dbg !51
  %259 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i88, float %240, float %.012.i86) #6, !dbg !51
  %260 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i88, float %240, float %.012.i86) #6, !dbg !51
  %.08.i90 = select i1 %.not21.i89, float %260, float %259, !dbg !51
  %261 = tail call float @llvm.nvvm.trunc.f(float %.08.i90) #6, !dbg !51
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not22.i91 = icmp eq i32 %262, 0, !dbg !51
  %263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %243, float %261, float %245) #6, !dbg !51
  %264 = tail call float @llvm.nvvm.fma.rn.f(float %243, float %261, float %245) #6, !dbg !51
  %.07.i92 = select i1 %.not22.i91, float %264, float %263, !dbg !51
  %265 = sub i32 %i.i.i.0.i74191, %min2.i80, !dbg !51
  %266 = bitcast float %.07.i92 to i32, !dbg !51
  %267 = icmp ne i32 %265, 0, !dbg !51
  %268 = icmp ne i32 %266, 0, !dbg !51
  %spec.select.i76 = select i1 %267, i1 %268, i1 false, !dbg !51
  br i1 %spec.select.i76, label %__nv_fmaf_rn.exit4.i.i.i79, label %__internal_fmodf_slowpath_mod.exit.i.i77, !dbg !51

__internal_fmodf_slowpath_mod.exit.i.i77:         ; preds = %__nv_fmaf_rn.exit4.i.i.i79, %230
  %.06.i72.lcssa = phi float [ %238, %230 ], [ %.07.i92, %__nv_fmaf_rn.exit4.i.i.i79 ], !dbg !51
  %269 = bitcast i32 %233 to float, !dbg !51
  %270 = fcmp ule float %.0.i52, 0.000000e+00, !dbg !51
  %271 = icmp ugt i32 %231, 2139095039, !dbg !51
  %or.cond.i78 = or i1 %270, %271, !dbg !51
  %272 = select i1 %or.cond.i78, float 0x7FFFFFFFE0000000, float %269, !dbg !51
  %273 = fmul float %.06.i72.lcssa, 0x3E80000000000000, !dbg !51
  %274 = fmul float %272, %273, !dbg !51
  br label %__internal_fmodf_kernel.exit.i67, !dbg !51

__internal_fmodf_kernel.exit.i67:                 ; preds = %__internal_fmodf_slowpath_mod.exit.i.i77, %__internal_fmodf_fastpath_quot.exit.i.i63, %__internal_fmodf_kernel.exit.i
  %ans.i.1.i68 = phi float [ %.01.i54, %__internal_fmodf_kernel.exit.i ], [ %.04.i66, %__internal_fmodf_fastpath_quot.exit.i.i63 ], [ %274, %__internal_fmodf_slowpath_mod.exit.i.i77 ], !dbg !51
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %276 = fadd float %ans.i.1.i, -5.000000e-01, !dbg !53
  %277 = fadd float %ans.i.1.i68, -5.000000e-01, !dbg !53
  %278 = fsub float 3.500000e+00, %ans.i.1.i, !dbg !54
  %279 = fsub float 3.500000e+00, %ans.i.1.i68, !dbg !54
  %280 = select i1 %104, float %276, float %278, !dbg !55
  %281 = select i1 %105, float %277, float %279, !dbg !55
  %.inv = fcmp ole float %280, 0.000000e+00, !dbg !56
  %282 = select i1 %.inv, float 0.000000e+00, float %280, !dbg !56
  %.inv1 = fcmp ole float %281, 0.000000e+00, !dbg !56
  %283 = select i1 %.inv1, float 0.000000e+00, float %281, !dbg !56
  %284 = fcmp olt float %282, 3.000000e+00, !dbg !60
  %285 = fcmp olt float %283, 3.000000e+00, !dbg !60
  %286 = fcmp uno float %282, 0.000000e+00, !dbg !62
  %287 = fcmp uno float %283, 0.000000e+00, !dbg !62
  %288 = or i1 %284, %286, !dbg !63
  %289 = or i1 %285, %287, !dbg !63
  %290 = select i1 %288, float %282, float 3.000000e+00, !dbg !64
  %291 = select i1 %289, float %283, float 3.000000e+00, !dbg !64
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !65
  %.not.i37 = icmp eq i32 %292, 0, !dbg !65
  %293 = tail call float @llvm.nvvm.floor.ftz.f(float %290), !dbg !65
  %294 = tail call float @llvm.nvvm.floor.f(float %290), !dbg !65
  %.0.i38 = select i1 %.not.i37, float %294, float %293, !dbg !65
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !65
  %.not.i39 = icmp eq i32 %295, 0, !dbg !65
  %296 = tail call float @llvm.nvvm.floor.ftz.f(float %291), !dbg !65
  %297 = tail call float @llvm.nvvm.floor.f(float %291), !dbg !65
  %.0.i40 = select i1 %.not.i39, float %297, float %296, !dbg !65
  %298 = fadd float %57, %67, !dbg !66
  %299 = fadd float %59, %69, !dbg !66
  %300 = fadd float %298, %77, !dbg !67
  %301 = fadd float %299, %79, !dbg !67
  %302 = fmul float %300, 2.000000e+00, !dbg !68
  %303 = fmul float %301, 2.000000e+00, !dbg !68
  %304 = fadd float %302, 1.500000e+00, !dbg !69
  %305 = fadd float %303, 1.500000e+00, !dbg !69
  %306 = fadd float %304, 5.000000e-01, !dbg !70
  %307 = fadd float %305, 5.000000e-01, !dbg !70
  %308 = tail call float @llvm.fabs.f32(float %306), !dbg !71
  %309 = tail call float @llvm.fabs.f32(float %307), !dbg !71
  %310 = fmul float %308, 2.500000e-01, !dbg !72
  %311 = fmul float %309, 2.500000e-01, !dbg !72
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i41 = icmp eq i32 %312, 0, !dbg !73
  %313 = tail call float @llvm.nvvm.floor.ftz.f(float %310), !dbg !73
  %314 = tail call float @llvm.nvvm.floor.f(float %310), !dbg !73
  %.0.i42 = select i1 %.not.i41, float %314, float %313, !dbg !73
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i43 = icmp eq i32 %315, 0, !dbg !73
  %316 = tail call float @llvm.nvvm.floor.ftz.f(float %311), !dbg !73
  %317 = tail call float @llvm.nvvm.floor.f(float %311), !dbg !73
  %.0.i44 = select i1 %.not.i43, float %317, float %316, !dbg !73
  %318 = fptosi float %.0.i42 to i8, !dbg !74
  %319 = fptosi float %.0.i44 to i8, !dbg !74
  %320 = and i8 %318, 1, !dbg !75
  %321 = and i8 %319, 1, !dbg !75
  %322 = icmp eq i8 %320, 0, !dbg !76
  %323 = icmp eq i8 %321, 0, !dbg !76
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i94 = icmp eq i32 %324, 0, !dbg !77
  %.0.i95 = select i1 %.not.i94, float %108, float %107, !dbg !77
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not16.i96 = icmp eq i32 %325, 0, !dbg !77
  %326 = tail call float @llvm.nvvm.fabs.ftz.f(float %308) #6, !dbg !77
  %327 = tail call float @llvm.nvvm.fabs.f(float %308) #6, !dbg !77
  %.01.i97 = select i1 %.not16.i96, float %327, float %326, !dbg !77
  %328 = fcmp olt float %.01.i97, %.0.i95, !dbg !77
  br i1 %328, label %__internal_fmodf_kernel.exit.i110, label %329, !dbg !77

329:                                              ; preds = %__internal_fmodf_kernel.exit.i67
  %330 = fmul float %.0.i95, 0x4160000000000000, !dbg !77
  %331 = fcmp ugt float %.01.i97, %330, !dbg !77
  br i1 %331, label %362, label %332, !dbg !77

332:                                              ; preds = %329
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not23.i98 = icmp eq i32 %333, 0, !dbg !77
  br i1 %.not23.i98, label %336, label %334, !dbg !77

334:                                              ; preds = %332
  %335 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i97, float %.0.i95) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i99, !dbg !77

336:                                              ; preds = %332
  %337 = tail call float @llvm.nvvm.div.approx.f(float %.01.i97, float %.0.i95) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i99, !dbg !77

__nv_fast_fdividef.exit.i.i.i99:                  ; preds = %336, %334
  %.02.i100 = phi float [ %335, %334 ], [ %337, %336 ], !dbg !77
  %338 = tail call float @llvm.nvvm.trunc.f(float %.02.i100) #6, !dbg !77
  %339 = fneg float %.0.i95, !dbg !77
  %340 = tail call float @llvm.nvvm.fma.rn.f(float %339, float %338, float %.01.i97) #6, !dbg !77
  %341 = bitcast float %340 to i32, !dbg !77
  %342 = bitcast float %.0.i95 to i32, !dbg !77
  %.not24.i101 = icmp ult i32 %341, %342, !dbg !77
  br i1 %.not24.i101, label %__internal_fmodf_fastpath_quot.exit.i.i106, label %343, !dbg !77

343:                                              ; preds = %__nv_fast_fdividef.exit.i.i.i99
  %344 = icmp ugt i32 %341, -2147483648, !dbg !77
  br i1 %344, label %345, label %349, !dbg !77

345:                                              ; preds = %343
  %346 = fadd float %338, -1.000000e+00, !dbg !77
  %347 = fcmp olt float %340, %339, !dbg !77
  %348 = fadd float %346, -1.000000e+00, !dbg !77
  %quotient.i.i.0.i114 = select i1 %347, float %348, float %346, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i106, !dbg !77

349:                                              ; preds = %343
  %350 = fadd float %338, 1.000000e+00, !dbg !77
  %351 = fmul float %.0.i95, 2.000000e+00, !dbg !77
  %352 = fcmp ult float %340, %351, !dbg !77
  br i1 %352, label %__internal_fmodf_fastpath_quot.exit.i.i106, label %__nv_fmaf_rn.exit.i.i.i102, !dbg !77

__nv_fmaf_rn.exit.i.i.i102:                       ; preds = %349
  %353 = fadd float %350, 1.000000e+00, !dbg !77
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not25.i103 = icmp eq i32 %354, 0, !dbg !77
  %355 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i95, float %340) #6, !dbg !77
  %356 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i95, float %340) #6, !dbg !77
  %.03.i104 = select i1 %.not25.i103, float %356, float %355, !dbg !77
  %357 = fcmp oge float %.03.i104, 0.000000e+00, !dbg !77
  %358 = fadd float %353, 1.000000e+00, !dbg !77
  %quotient.i.i.1.i105 = select i1 %357, float %358, float %353, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i106, !dbg !77

__internal_fmodf_fastpath_quot.exit.i.i106:       ; preds = %__nv_fmaf_rn.exit.i.i.i102, %349, %345, %__nv_fast_fdividef.exit.i.i.i99
  %quotient.i.i.4.i107 = phi float [ %338, %__nv_fast_fdividef.exit.i.i.i99 ], [ %quotient.i.i.0.i114, %345 ], [ %quotient.i.i.1.i105, %__nv_fmaf_rn.exit.i.i.i102 ], [ %350, %349 ], !dbg !77
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not26.i108 = icmp eq i32 %359, 0, !dbg !77
  %360 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %339, float %quotient.i.i.4.i107, float %.01.i97) #6, !dbg !77
  %361 = tail call float @llvm.nvvm.fma.rn.f(float %339, float %quotient.i.i.4.i107, float %.01.i97) #6, !dbg !77
  %.04.i109 = select i1 %.not26.i108, float %361, float %360, !dbg !77
  br label %__internal_fmodf_kernel.exit.i110, !dbg !77

362:                                              ; preds = %329
  %363 = bitcast float %.01.i97 to i32, !dbg !77
  %364 = bitcast float %330 to i32, !dbg !77
  %365 = and i32 %364, -8388608, !dbg !77
  %366 = and i32 %363, 8388607, !dbg !77
  %367 = or disjoint i32 %366, 1065353216, !dbg !77
  %368 = and i32 %364, 8388607, !dbg !77
  %369 = or disjoint i32 %368, 1065353216, !dbg !77
  %370 = bitcast i32 %367 to float, !dbg !77
  %371 = bitcast i32 %369 to float, !dbg !77
  %372 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %371) #7, !dbg !77, !srcloc !52
  %.neg184 = add i32 %363, 192937984, !dbg !77
  %373 = sub i32 %.neg184, %365, !dbg !77
  %374 = and i32 %373, -8388608, !dbg !77
  %.not203 = icmp eq i32 %374, 0, !dbg !77
  br i1 %.not203, label %__internal_fmodf_slowpath_mod.exit.i.i120, label %__nv_fmaf_rn.exit4.i.i.i122.lr.ph, !dbg !77

__nv_fmaf_rn.exit4.i.i.i122.lr.ph:                ; preds = %362
  %375 = fneg float %371
  br label %__nv_fmaf_rn.exit4.i.i.i122, !dbg !77

__nv_fmaf_rn.exit4.i.i.i122:                      ; preds = %__nv_fmaf_rn.exit4.i.i.i122.lr.ph, %__nv_fmaf_rn.exit4.i.i.i122
  %ux.i.i.0.i118196 = phi i32 [ %367, %__nv_fmaf_rn.exit4.i.i.i122.lr.ph ], [ %398, %__nv_fmaf_rn.exit4.i.i.i122 ]
  %i.i.i.0.i117195 = phi i32 [ %374, %__nv_fmaf_rn.exit4.i.i.i122.lr.ph ], [ %397, %__nv_fmaf_rn.exit4.i.i.i122 ]
  %min2.i123 = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i117195, i32 192937984), !dbg !77
  %376 = add i32 %ux.i.i.0.i118196, %min2.i123, !dbg !77
  %377 = bitcast i32 %376 to float, !dbg !77
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not17.i124 = icmp eq i32 %378, 0, !dbg !77
  %379 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %377, float %372, float -0.000000e+00) #6, !dbg !77
  %380 = tail call float @llvm.nvvm.fma.rn.f(float %377, float %372, float -0.000000e+00) #6, !dbg !77
  %.010.i125 = select i1 %.not17.i124, float %380, float %379, !dbg !77
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not18.i126 = icmp eq i32 %381, 0, !dbg !77
  %382 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %375, float %.010.i125, float %377) #6, !dbg !77
  %383 = tail call float @llvm.nvvm.fma.rn.f(float %375, float %.010.i125, float %377) #6, !dbg !77
  %.011.i127 = select i1 %.not18.i126, float %383, float %382, !dbg !77
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not19.i128 = icmp eq i32 %384, 0, !dbg !77
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i127, float %372, float %.010.i125) #6, !dbg !77
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i127, float %372, float %.010.i125) #6, !dbg !77
  %.012.i129 = select i1 %.not19.i128, float %386, float %385, !dbg !77
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not20.i130 = icmp eq i32 %387, 0, !dbg !77
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %375, float %.012.i129, float %377) #6, !dbg !77
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %375, float %.012.i129, float %377) #6, !dbg !77
  %.09.i131 = select i1 %.not20.i130, float %389, float %388, !dbg !77
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not21.i132 = icmp eq i32 %390, 0, !dbg !77
  %391 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i131, float %372, float %.012.i129) #6, !dbg !77
  %392 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i131, float %372, float %.012.i129) #6, !dbg !77
  %.08.i133 = select i1 %.not21.i132, float %392, float %391, !dbg !77
  %393 = tail call float @llvm.nvvm.trunc.f(float %.08.i133) #6, !dbg !77
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not22.i134 = icmp eq i32 %394, 0, !dbg !77
  %395 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %375, float %393, float %377) #6, !dbg !77
  %396 = tail call float @llvm.nvvm.fma.rn.f(float %375, float %393, float %377) #6, !dbg !77
  %.07.i135 = select i1 %.not22.i134, float %396, float %395, !dbg !77
  %397 = sub i32 %i.i.i.0.i117195, %min2.i123, !dbg !77
  %398 = bitcast float %.07.i135 to i32, !dbg !77
  %399 = icmp ne i32 %397, 0, !dbg !77
  %400 = icmp ne i32 %398, 0, !dbg !77
  %spec.select.i119 = select i1 %399, i1 %400, i1 false, !dbg !77
  br i1 %spec.select.i119, label %__nv_fmaf_rn.exit4.i.i.i122, label %__internal_fmodf_slowpath_mod.exit.i.i120, !dbg !77

__internal_fmodf_slowpath_mod.exit.i.i120:        ; preds = %__nv_fmaf_rn.exit4.i.i.i122, %362
  %.06.i115.lcssa = phi float [ %370, %362 ], [ %.07.i135, %__nv_fmaf_rn.exit4.i.i.i122 ], !dbg !77
  %401 = bitcast i32 %365 to float, !dbg !77
  %402 = fcmp ule float %.0.i95, 0.000000e+00, !dbg !77
  %403 = icmp ugt i32 %363, 2139095039, !dbg !77
  %or.cond.i121 = or i1 %402, %403, !dbg !77
  %404 = select i1 %or.cond.i121, float 0x7FFFFFFFE0000000, float %401, !dbg !77
  %405 = fmul float %.06.i115.lcssa, 0x3E80000000000000, !dbg !77
  %406 = fmul float %404, %405, !dbg !77
  br label %__internal_fmodf_kernel.exit.i110, !dbg !77

__internal_fmodf_kernel.exit.i110:                ; preds = %__internal_fmodf_slowpath_mod.exit.i.i120, %__internal_fmodf_fastpath_quot.exit.i.i106, %__internal_fmodf_kernel.exit.i67
  %ans.i.1.i111 = phi float [ %.01.i97, %__internal_fmodf_kernel.exit.i67 ], [ %.04.i109, %__internal_fmodf_fastpath_quot.exit.i.i106 ], [ %406, %__internal_fmodf_slowpath_mod.exit.i.i120 ], !dbg !77
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i137 = icmp eq i32 %408, 0, !dbg !77
  %.0.i138 = select i1 %.not.i137, float %108, float %107, !dbg !77
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not16.i139 = icmp eq i32 %409, 0, !dbg !77
  %410 = tail call float @llvm.nvvm.fabs.ftz.f(float %309) #6, !dbg !77
  %411 = tail call float @llvm.nvvm.fabs.f(float %309) #6, !dbg !77
  %.01.i140 = select i1 %.not16.i139, float %411, float %410, !dbg !77
  %412 = fcmp olt float %.01.i140, %.0.i138, !dbg !77
  br i1 %412, label %__internal_fmodf_kernel.exit.i153, label %413, !dbg !77

413:                                              ; preds = %__internal_fmodf_kernel.exit.i110
  %414 = fmul float %.0.i138, 0x4160000000000000, !dbg !77
  %415 = fcmp ugt float %.01.i140, %414, !dbg !77
  br i1 %415, label %446, label %416, !dbg !77

416:                                              ; preds = %413
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not23.i141 = icmp eq i32 %417, 0, !dbg !77
  br i1 %.not23.i141, label %420, label %418, !dbg !77

418:                                              ; preds = %416
  %419 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i140, float %.0.i138) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i142, !dbg !77

420:                                              ; preds = %416
  %421 = tail call float @llvm.nvvm.div.approx.f(float %.01.i140, float %.0.i138) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i142, !dbg !77

__nv_fast_fdividef.exit.i.i.i142:                 ; preds = %420, %418
  %.02.i143 = phi float [ %419, %418 ], [ %421, %420 ], !dbg !77
  %422 = tail call float @llvm.nvvm.trunc.f(float %.02.i143) #6, !dbg !77
  %423 = fneg float %.0.i138, !dbg !77
  %424 = tail call float @llvm.nvvm.fma.rn.f(float %423, float %422, float %.01.i140) #6, !dbg !77
  %425 = bitcast float %424 to i32, !dbg !77
  %426 = bitcast float %.0.i138 to i32, !dbg !77
  %.not24.i144 = icmp ult i32 %425, %426, !dbg !77
  br i1 %.not24.i144, label %__internal_fmodf_fastpath_quot.exit.i.i149, label %427, !dbg !77

427:                                              ; preds = %__nv_fast_fdividef.exit.i.i.i142
  %428 = icmp ugt i32 %425, -2147483648, !dbg !77
  br i1 %428, label %429, label %433, !dbg !77

429:                                              ; preds = %427
  %430 = fadd float %422, -1.000000e+00, !dbg !77
  %431 = fcmp olt float %424, %423, !dbg !77
  %432 = fadd float %430, -1.000000e+00, !dbg !77
  %quotient.i.i.0.i157 = select i1 %431, float %432, float %430, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i149, !dbg !77

433:                                              ; preds = %427
  %434 = fadd float %422, 1.000000e+00, !dbg !77
  %435 = fmul float %.0.i138, 2.000000e+00, !dbg !77
  %436 = fcmp ult float %424, %435, !dbg !77
  br i1 %436, label %__internal_fmodf_fastpath_quot.exit.i.i149, label %__nv_fmaf_rn.exit.i.i.i145, !dbg !77

__nv_fmaf_rn.exit.i.i.i145:                       ; preds = %433
  %437 = fadd float %434, 1.000000e+00, !dbg !77
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not25.i146 = icmp eq i32 %438, 0, !dbg !77
  %439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i138, float %424) #6, !dbg !77
  %440 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i138, float %424) #6, !dbg !77
  %.03.i147 = select i1 %.not25.i146, float %440, float %439, !dbg !77
  %441 = fcmp oge float %.03.i147, 0.000000e+00, !dbg !77
  %442 = fadd float %437, 1.000000e+00, !dbg !77
  %quotient.i.i.1.i148 = select i1 %441, float %442, float %437, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i149, !dbg !77

__internal_fmodf_fastpath_quot.exit.i.i149:       ; preds = %__nv_fmaf_rn.exit.i.i.i145, %433, %429, %__nv_fast_fdividef.exit.i.i.i142
  %quotient.i.i.4.i150 = phi float [ %422, %__nv_fast_fdividef.exit.i.i.i142 ], [ %quotient.i.i.0.i157, %429 ], [ %quotient.i.i.1.i148, %__nv_fmaf_rn.exit.i.i.i145 ], [ %434, %433 ], !dbg !77
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not26.i151 = icmp eq i32 %443, 0, !dbg !77
  %444 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %423, float %quotient.i.i.4.i150, float %.01.i140) #6, !dbg !77
  %445 = tail call float @llvm.nvvm.fma.rn.f(float %423, float %quotient.i.i.4.i150, float %.01.i140) #6, !dbg !77
  %.04.i152 = select i1 %.not26.i151, float %445, float %444, !dbg !77
  br label %__internal_fmodf_kernel.exit.i153, !dbg !77

446:                                              ; preds = %413
  %447 = bitcast float %.01.i140 to i32, !dbg !77
  %448 = bitcast float %414 to i32, !dbg !77
  %449 = and i32 %448, -8388608, !dbg !77
  %450 = and i32 %447, 8388607, !dbg !77
  %451 = or disjoint i32 %450, 1065353216, !dbg !77
  %452 = and i32 %448, 8388607, !dbg !77
  %453 = or disjoint i32 %452, 1065353216, !dbg !77
  %454 = bitcast i32 %451 to float, !dbg !77
  %455 = bitcast i32 %453 to float, !dbg !77
  %456 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %455) #7, !dbg !77, !srcloc !52
  %.neg186 = add i32 %447, 192937984, !dbg !77
  %457 = sub i32 %.neg186, %449, !dbg !77
  %458 = and i32 %457, -8388608, !dbg !77
  %.not204 = icmp eq i32 %458, 0, !dbg !77
  br i1 %.not204, label %__internal_fmodf_slowpath_mod.exit.i.i163, label %__nv_fmaf_rn.exit4.i.i.i165.lr.ph, !dbg !77

__nv_fmaf_rn.exit4.i.i.i165.lr.ph:                ; preds = %446
  %459 = fneg float %455
  br label %__nv_fmaf_rn.exit4.i.i.i165, !dbg !77

__nv_fmaf_rn.exit4.i.i.i165:                      ; preds = %__nv_fmaf_rn.exit4.i.i.i165.lr.ph, %__nv_fmaf_rn.exit4.i.i.i165
  %ux.i.i.0.i161200 = phi i32 [ %451, %__nv_fmaf_rn.exit4.i.i.i165.lr.ph ], [ %482, %__nv_fmaf_rn.exit4.i.i.i165 ]
  %i.i.i.0.i160199 = phi i32 [ %458, %__nv_fmaf_rn.exit4.i.i.i165.lr.ph ], [ %481, %__nv_fmaf_rn.exit4.i.i.i165 ]
  %min2.i166 = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i160199, i32 192937984), !dbg !77
  %460 = add i32 %ux.i.i.0.i161200, %min2.i166, !dbg !77
  %461 = bitcast i32 %460 to float, !dbg !77
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not17.i167 = icmp eq i32 %462, 0, !dbg !77
  %463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %461, float %456, float -0.000000e+00) #6, !dbg !77
  %464 = tail call float @llvm.nvvm.fma.rn.f(float %461, float %456, float -0.000000e+00) #6, !dbg !77
  %.010.i168 = select i1 %.not17.i167, float %464, float %463, !dbg !77
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not18.i169 = icmp eq i32 %465, 0, !dbg !77
  %466 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %459, float %.010.i168, float %461) #6, !dbg !77
  %467 = tail call float @llvm.nvvm.fma.rn.f(float %459, float %.010.i168, float %461) #6, !dbg !77
  %.011.i170 = select i1 %.not18.i169, float %467, float %466, !dbg !77
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not19.i171 = icmp eq i32 %468, 0, !dbg !77
  %469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i170, float %456, float %.010.i168) #6, !dbg !77
  %470 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i170, float %456, float %.010.i168) #6, !dbg !77
  %.012.i172 = select i1 %.not19.i171, float %470, float %469, !dbg !77
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not20.i173 = icmp eq i32 %471, 0, !dbg !77
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %459, float %.012.i172, float %461) #6, !dbg !77
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %459, float %.012.i172, float %461) #6, !dbg !77
  %.09.i174 = select i1 %.not20.i173, float %473, float %472, !dbg !77
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not21.i175 = icmp eq i32 %474, 0, !dbg !77
  %475 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i174, float %456, float %.012.i172) #6, !dbg !77
  %476 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i174, float %456, float %.012.i172) #6, !dbg !77
  %.08.i176 = select i1 %.not21.i175, float %476, float %475, !dbg !77
  %477 = tail call float @llvm.nvvm.trunc.f(float %.08.i176) #6, !dbg !77
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not22.i177 = icmp eq i32 %478, 0, !dbg !77
  %479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %459, float %477, float %461) #6, !dbg !77
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %459, float %477, float %461) #6, !dbg !77
  %.07.i178 = select i1 %.not22.i177, float %480, float %479, !dbg !77
  %481 = sub i32 %i.i.i.0.i160199, %min2.i166, !dbg !77
  %482 = bitcast float %.07.i178 to i32, !dbg !77
  %483 = icmp ne i32 %481, 0, !dbg !77
  %484 = icmp ne i32 %482, 0, !dbg !77
  %spec.select.i162 = select i1 %483, i1 %484, i1 false, !dbg !77
  br i1 %spec.select.i162, label %__nv_fmaf_rn.exit4.i.i.i165, label %__internal_fmodf_slowpath_mod.exit.i.i163, !dbg !77

__internal_fmodf_slowpath_mod.exit.i.i163:        ; preds = %__nv_fmaf_rn.exit4.i.i.i165, %446
  %.06.i158.lcssa = phi float [ %454, %446 ], [ %.07.i178, %__nv_fmaf_rn.exit4.i.i.i165 ], !dbg !77
  %485 = bitcast i32 %449 to float, !dbg !77
  %486 = fcmp ule float %.0.i138, 0.000000e+00, !dbg !77
  %487 = icmp ugt i32 %447, 2139095039, !dbg !77
  %or.cond.i164 = or i1 %486, %487, !dbg !77
  %488 = select i1 %or.cond.i164, float 0x7FFFFFFFE0000000, float %485, !dbg !77
  %489 = fmul float %.06.i158.lcssa, 0x3E80000000000000, !dbg !77
  %490 = fmul float %488, %489, !dbg !77
  br label %__internal_fmodf_kernel.exit.i153, !dbg !77

__internal_fmodf_kernel.exit.i153:                ; preds = %__internal_fmodf_slowpath_mod.exit.i.i163, %__internal_fmodf_fastpath_quot.exit.i.i149, %__internal_fmodf_kernel.exit.i110
  %ans.i.1.i154 = phi float [ %.01.i140, %__internal_fmodf_kernel.exit.i110 ], [ %.04.i152, %__internal_fmodf_fastpath_quot.exit.i.i149 ], [ %490, %__internal_fmodf_slowpath_mod.exit.i.i163 ], !dbg !77
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %492 = fadd float %ans.i.1.i111, -5.000000e-01, !dbg !78
  %493 = fadd float %ans.i.1.i154, -5.000000e-01, !dbg !78
  %494 = fsub float 3.500000e+00, %ans.i.1.i111, !dbg !79
  %495 = fsub float 3.500000e+00, %ans.i.1.i154, !dbg !79
  %496 = select i1 %322, float %492, float %494, !dbg !80
  %497 = select i1 %323, float %493, float %495, !dbg !80
  %.inv2 = fcmp ole float %496, 0.000000e+00, !dbg !81
  %498 = select i1 %.inv2, float 0.000000e+00, float %496, !dbg !81
  %.inv3 = fcmp ole float %497, 0.000000e+00, !dbg !81
  %499 = select i1 %.inv3, float 0.000000e+00, float %497, !dbg !81
  %500 = fcmp olt float %498, 3.000000e+00, !dbg !83
  %501 = fcmp olt float %499, 3.000000e+00, !dbg !83
  %502 = fcmp uno float %498, 0.000000e+00, !dbg !85
  %503 = fcmp uno float %499, 0.000000e+00, !dbg !85
  %504 = or i1 %500, %502, !dbg !86
  %505 = or i1 %501, %503, !dbg !86
  %506 = select i1 %504, float %498, float 3.000000e+00, !dbg !87
  %507 = select i1 %505, float %499, float 3.000000e+00, !dbg !87
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !88
  %.not.i45 = icmp eq i32 %508, 0, !dbg !88
  %509 = tail call float @llvm.nvvm.floor.ftz.f(float %506), !dbg !88
  %510 = tail call float @llvm.nvvm.floor.f(float %506), !dbg !88
  %.0.i46 = select i1 %.not.i45, float %510, float %509, !dbg !88
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !88
  %.not.i47 = icmp eq i32 %511, 0, !dbg !88
  %512 = tail call float @llvm.nvvm.floor.ftz.f(float %507), !dbg !88
  %513 = tail call float @llvm.nvvm.floor.f(float %507), !dbg !88
  %.0.i48 = select i1 %.not.i47, float %513, float %512, !dbg !88
  %514 = fadd float %.0.i46, 1.000000e+00, !dbg !89
  %515 = fadd float %.0.i48, 1.000000e+00, !dbg !89
  %516 = fadd float %.0.i38, 1.000000e+00, !dbg !90
  %517 = fadd float %.0.i40, 1.000000e+00, !dbg !90
  %518 = fcmp oge float %.0.i46, 0.000000e+00, !dbg !91
  %519 = fcmp oge float %.0.i48, 0.000000e+00, !dbg !91
  %520 = fcmp olt float %.0.i46, 4.000000e+00, !dbg !92
  %521 = fcmp olt float %.0.i48, 4.000000e+00, !dbg !92
  %522 = fcmp oge float %.0.i38, 0.000000e+00, !dbg !93
  %523 = fcmp oge float %.0.i40, 0.000000e+00, !dbg !93
  %524 = fcmp olt float %.0.i38, 4.000000e+00, !dbg !94
  %525 = fcmp olt float %.0.i40, 4.000000e+00, !dbg !94
  %526 = and i1 %522, %524, !dbg !95
  %527 = and i1 %523, %525, !dbg !95
  %528 = and i1 %526, %520, !dbg !96
  %529 = and i1 %527, %521, !dbg !96
  %530 = and i1 %518, %528, !dbg !97
  %531 = and i1 %519, %529, !dbg !97
  %532 = fptosi float %.0.i38 to i64, !dbg !98
  %533 = fptosi float %.0.i40 to i64, !dbg !98
  %534 = select i1 %530, i64 %532, i64 0, !dbg !99
  %535 = select i1 %531, i64 %533, i64 0, !dbg !99
  %536 = lshr i64 %534, 61, !dbg !100
  %537 = and i64 %536, 4, !dbg !100
  %538 = add i64 %537, %534, !dbg !100
  %539 = lshr i64 %535, 61, !dbg !100
  %540 = and i64 %539, 4, !dbg !100
  %541 = add i64 %540, %535, !dbg !100
  %542 = or i64 %541, %538, !dbg !101
  %.not46 = icmp ugt i64 %542, 3, !dbg !101
  %543 = and i1 %12, %.not46, !dbg !101
  br i1 %543, label %544, label %545, !dbg !101

544:                                              ; preds = %__internal_fmodf_kernel.exit.i153
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 101, ptr nonnull @assertFunc_0, i64 1), !dbg !101
  unreachable, !dbg !101

545:                                              ; preds = %__internal_fmodf_kernel.exit.i153
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %546 = fptosi float %.0.i46 to i64, !dbg !102
  %547 = fptosi float %.0.i48 to i64, !dbg !102
  %548 = select i1 %530, i64 %546, i64 0, !dbg !103
  %549 = select i1 %531, i64 %547, i64 0, !dbg !103
  %550 = lshr i64 %548, 61, !dbg !104
  %551 = and i64 %550, 4, !dbg !104
  %552 = add i64 %551, %548, !dbg !104
  %553 = lshr i64 %549, 61, !dbg !104
  %554 = and i64 %553, 4, !dbg !104
  %555 = add i64 %554, %549, !dbg !104
  %556 = or i64 %555, %552, !dbg !105
  %.not79 = icmp ugt i64 %556, 3, !dbg !105
  %557 = and i1 %12, %.not79, !dbg !105
  br i1 %557, label %558, label %559, !dbg !105

558:                                              ; preds = %545
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 107, ptr nonnull @assertFunc_1, i64 1), !dbg !105
  unreachable, !dbg !105

559:                                              ; preds = %545
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %560 = shl nsw i32 %13, 4, !dbg !106
  %561 = sext i32 %560 to i64, !dbg !107
  %562 = getelementptr float, ptr addrspace(1) %2, i64 %552, !dbg !108
  %.idx = shl i64 %538, 4, !dbg !108
  %563 = getelementptr i8, ptr addrspace(1) %562, i64 %.idx, !dbg !108
  %564 = getelementptr float, ptr addrspace(1) %563, i64 %561, !dbg !108
  %565 = getelementptr float, ptr addrspace(1) %2, i64 %555, !dbg !108
  %.idx10 = shl i64 %541, 4, !dbg !108
  %566 = getelementptr i8, ptr addrspace(1) %565, i64 %.idx10, !dbg !108
  %567 = getelementptr float, ptr addrspace(1) %566, i64 %561, !dbg !108
  %568 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 %12) #6, !dbg !109
  %569 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %567, i1 %12) #6, !dbg !109
  %570 = fcmp oge float %514, 0.000000e+00, !dbg !110
  %571 = fcmp oge float %515, 0.000000e+00, !dbg !110
  %572 = fcmp olt float %514, 4.000000e+00, !dbg !111
  %573 = fcmp olt float %515, 4.000000e+00, !dbg !111
  %574 = and i1 %526, %572, !dbg !112
  %575 = and i1 %527, %573, !dbg !112
  %576 = and i1 %570, %574, !dbg !113
  %577 = and i1 %571, %575, !dbg !113
  %578 = select i1 %576, i64 %532, i64 0, !dbg !114
  %579 = select i1 %577, i64 %533, i64 0, !dbg !114
  %580 = lshr i64 %578, 61, !dbg !115
  %581 = and i64 %580, 4, !dbg !115
  %582 = add i64 %581, %578, !dbg !115
  %583 = lshr i64 %579, 61, !dbg !115
  %584 = and i64 %583, 4, !dbg !115
  %585 = add i64 %584, %579, !dbg !115
  %586 = or i64 %585, %582, !dbg !116
  %.not1113 = icmp ugt i64 %586, 3, !dbg !116
  %587 = and i1 %12, %.not1113, !dbg !116
  br i1 %587, label %588, label %589, !dbg !116

588:                                              ; preds = %559
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 120, ptr nonnull @assertFunc_2, i64 1), !dbg !116
  unreachable, !dbg !116

589:                                              ; preds = %559
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %590 = fptosi float %514 to i64, !dbg !117
  %591 = fptosi float %515 to i64, !dbg !117
  %592 = select i1 %576, i64 %590, i64 0, !dbg !118
  %593 = select i1 %577, i64 %591, i64 0, !dbg !118
  %594 = lshr i64 %592, 61, !dbg !119
  %595 = and i64 %594, 4, !dbg !119
  %596 = add i64 %595, %592, !dbg !119
  %597 = lshr i64 %593, 61, !dbg !119
  %598 = and i64 %597, 4, !dbg !119
  %599 = add i64 %598, %593, !dbg !119
  %600 = or i64 %599, %596, !dbg !120
  %.not1416 = icmp ugt i64 %600, 3, !dbg !120
  %601 = and i1 %12, %.not1416, !dbg !120
  br i1 %601, label %602, label %603, !dbg !120

602:                                              ; preds = %589
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 126, ptr nonnull @assertFunc_3, i64 1), !dbg !120
  unreachable, !dbg !120

603:                                              ; preds = %589
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %604 = getelementptr float, ptr addrspace(1) %2, i64 %596, !dbg !121
  %.idx17 = shl i64 %582, 4, !dbg !121
  %605 = getelementptr i8, ptr addrspace(1) %604, i64 %.idx17, !dbg !121
  %606 = getelementptr float, ptr addrspace(1) %605, i64 %561, !dbg !121
  %607 = getelementptr float, ptr addrspace(1) %2, i64 %599, !dbg !121
  %.idx18 = shl i64 %585, 4, !dbg !121
  %608 = getelementptr i8, ptr addrspace(1) %607, i64 %.idx18, !dbg !121
  %609 = getelementptr float, ptr addrspace(1) %608, i64 %561, !dbg !121
  %610 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %606, i1 %12) #6, !dbg !122
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %609, i1 %12) #6, !dbg !122
  %612 = fcmp oge float %516, 0.000000e+00, !dbg !123
  %613 = fcmp oge float %517, 0.000000e+00, !dbg !123
  %614 = fcmp olt float %516, 4.000000e+00, !dbg !124
  %615 = fcmp olt float %517, 4.000000e+00, !dbg !124
  %616 = and i1 %612, %614, !dbg !125
  %617 = and i1 %613, %615, !dbg !125
  %618 = and i1 %616, %520, !dbg !126
  %619 = and i1 %617, %521, !dbg !126
  %620 = and i1 %518, %618, !dbg !127
  %621 = and i1 %519, %619, !dbg !127
  %622 = fptosi float %516 to i64, !dbg !128
  %623 = fptosi float %517 to i64, !dbg !128
  %624 = select i1 %620, i64 %622, i64 0, !dbg !129
  %625 = select i1 %621, i64 %623, i64 0, !dbg !129
  %626 = lshr i64 %624, 61, !dbg !130
  %627 = and i64 %626, 4, !dbg !130
  %628 = add i64 %627, %624, !dbg !130
  %629 = lshr i64 %625, 61, !dbg !130
  %630 = and i64 %629, 4, !dbg !130
  %631 = add i64 %630, %625, !dbg !130
  %632 = or i64 %631, %628, !dbg !131
  %.not1921 = icmp ugt i64 %632, 3, !dbg !131
  %633 = and i1 %12, %.not1921, !dbg !131
  br i1 %633, label %634, label %635, !dbg !131

634:                                              ; preds = %603
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 142, ptr nonnull @assertFunc_4, i64 1), !dbg !131
  unreachable, !dbg !131

635:                                              ; preds = %603
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %636 = select i1 %620, i64 %546, i64 0, !dbg !132
  %637 = select i1 %621, i64 %547, i64 0, !dbg !132
  %638 = lshr i64 %636, 61, !dbg !133
  %639 = and i64 %638, 4, !dbg !133
  %640 = add i64 %639, %636, !dbg !133
  %641 = lshr i64 %637, 61, !dbg !133
  %642 = and i64 %641, 4, !dbg !133
  %643 = add i64 %642, %637, !dbg !133
  %644 = or i64 %643, %640, !dbg !134
  %.not2224 = icmp ugt i64 %644, 3, !dbg !134
  %645 = and i1 %12, %.not2224, !dbg !134
  br i1 %645, label %646, label %647, !dbg !134

646:                                              ; preds = %635
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 147, ptr nonnull @assertFunc_5, i64 1), !dbg !134
  unreachable, !dbg !134

647:                                              ; preds = %635
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %648 = getelementptr float, ptr addrspace(1) %2, i64 %640, !dbg !135
  %.idx25 = shl i64 %628, 4, !dbg !135
  %649 = getelementptr i8, ptr addrspace(1) %648, i64 %.idx25, !dbg !135
  %650 = getelementptr float, ptr addrspace(1) %649, i64 %561, !dbg !135
  %651 = getelementptr float, ptr addrspace(1) %2, i64 %643, !dbg !135
  %.idx26 = shl i64 %631, 4, !dbg !135
  %652 = getelementptr i8, ptr addrspace(1) %651, i64 %.idx26, !dbg !135
  %653 = getelementptr float, ptr addrspace(1) %652, i64 %561, !dbg !135
  %654 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %650, i1 %12) #6, !dbg !136
  %655 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %653, i1 %12) #6, !dbg !136
  %656 = and i1 %616, %572, !dbg !137
  %657 = and i1 %617, %573, !dbg !137
  %658 = and i1 %570, %656, !dbg !138
  %659 = and i1 %571, %657, !dbg !138
  %660 = select i1 %658, i64 %622, i64 0, !dbg !139
  %661 = select i1 %659, i64 %623, i64 0, !dbg !139
  %662 = lshr i64 %660, 61, !dbg !140
  %663 = and i64 %662, 4, !dbg !140
  %664 = add i64 %663, %660, !dbg !140
  %665 = lshr i64 %661, 61, !dbg !140
  %666 = and i64 %665, 4, !dbg !140
  %667 = add i64 %666, %661, !dbg !140
  %668 = or i64 %667, %664, !dbg !141
  %.not2729 = icmp ugt i64 %668, 3, !dbg !141
  %669 = and i1 %12, %.not2729, !dbg !141
  br i1 %669, label %670, label %671, !dbg !141

670:                                              ; preds = %647
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 159, ptr nonnull @assertFunc_6, i64 1), !dbg !141
  unreachable, !dbg !141

671:                                              ; preds = %647
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %672 = select i1 %658, i64 %590, i64 0, !dbg !142
  %673 = select i1 %659, i64 %591, i64 0, !dbg !142
  %674 = lshr i64 %672, 61, !dbg !143
  %675 = and i64 %674, 4, !dbg !143
  %676 = add i64 %675, %672, !dbg !143
  %677 = lshr i64 %673, 61, !dbg !143
  %678 = and i64 %677, 4, !dbg !143
  %679 = add i64 %678, %673, !dbg !143
  %680 = or i64 %679, %676, !dbg !144
  %.not3032 = icmp ugt i64 %680, 3, !dbg !144
  %681 = and i1 %12, %.not3032, !dbg !144
  br i1 %681, label %682, label %683, !dbg !144

682:                                              ; preds = %671
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 164, ptr nonnull @assertFunc_7, i64 1), !dbg !144
  unreachable, !dbg !144

683:                                              ; preds = %671
  %684 = fsub float %515, %507, !dbg !145
  %685 = fsub float %517, %291, !dbg !146
  %686 = fmul float %685, %684, !dbg !147
  %687 = select i1 %531, float %686, float 0.000000e+00, !dbg !148
  %688 = bitcast i32 %569 to float, !dbg !109
  %689 = fmul float %687, %688, !dbg !149
  %690 = fsub float %507, %.0.i48, !dbg !150
  %691 = fmul float %685, %690, !dbg !151
  %692 = select i1 %577, float %691, float 0.000000e+00, !dbg !152
  %693 = bitcast i32 %611 to float, !dbg !122
  %694 = fmul float %692, %693, !dbg !153
  %695 = fadd float %689, %694, !dbg !154
  %696 = fsub float %291, %.0.i40, !dbg !155
  %697 = fmul float %696, %684, !dbg !156
  %698 = select i1 %621, float %697, float 0.000000e+00, !dbg !157
  %699 = bitcast i32 %655 to float, !dbg !136
  %700 = fmul float %698, %699, !dbg !158
  %701 = fadd float %695, %700, !dbg !159
  %702 = fsub float %514, %506, !dbg !145
  %703 = fsub float %516, %290, !dbg !146
  %704 = fmul float %703, %702, !dbg !147
  %705 = select i1 %530, float %704, float 0.000000e+00, !dbg !148
  %706 = bitcast i32 %568 to float, !dbg !109
  %707 = fmul float %705, %706, !dbg !149
  %708 = fsub float %506, %.0.i46, !dbg !150
  %709 = fmul float %703, %708, !dbg !151
  %710 = select i1 %576, float %709, float 0.000000e+00, !dbg !152
  %711 = bitcast i32 %610 to float, !dbg !122
  %712 = fmul float %710, %711, !dbg !153
  %713 = fadd float %707, %712, !dbg !154
  %714 = fsub float %290, %.0.i38, !dbg !155
  %715 = fmul float %714, %702, !dbg !156
  %716 = select i1 %620, float %715, float 0.000000e+00, !dbg !157
  %717 = bitcast i32 %654 to float, !dbg !136
  %718 = fmul float %716, %717, !dbg !158
  %719 = fadd float %713, %718, !dbg !159
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %720 = getelementptr float, ptr addrspace(1) %2, i64 %676, !dbg !160
  %.idx33 = shl i64 %664, 4, !dbg !160
  %721 = getelementptr i8, ptr addrspace(1) %720, i64 %.idx33, !dbg !160
  %722 = getelementptr float, ptr addrspace(1) %721, i64 %561, !dbg !160
  %723 = getelementptr float, ptr addrspace(1) %2, i64 %679, !dbg !160
  %.idx34 = shl i64 %667, 4, !dbg !160
  %724 = getelementptr i8, ptr addrspace(1) %723, i64 %.idx34, !dbg !160
  %725 = getelementptr float, ptr addrspace(1) %724, i64 %561, !dbg !160
  %726 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %722, i1 %12) #6, !dbg !161
  %727 = bitcast i32 %726 to float, !dbg !161
  %728 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %725, i1 %12) #6, !dbg !161
  %729 = bitcast i32 %728 to float, !dbg !161
  %730 = fmul float %714, %708, !dbg !162
  %731 = fmul float %696, %690, !dbg !162
  %732 = select i1 %658, float %730, float 0.000000e+00, !dbg !163
  %733 = select i1 %659, float %731, float 0.000000e+00, !dbg !163
  %734 = fmul float %732, %727, !dbg !164
  %735 = fmul float %733, %729, !dbg !164
  %736 = fadd float %719, %734, !dbg !165
  %737 = fadd float %701, %735, !dbg !165
  %738 = sext i32 %10 to i64, !dbg !166
  %739 = getelementptr float, ptr addrspace(1) %0, i64 %738, !dbg !166
  %740 = bitcast float %736 to i32, !dbg !167
  %741 = bitcast float %737 to i32, !dbg !167
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %740, i32 %741, ptr addrspace(1) %739, i1 %12) #6, !dbg !167
  ret void, !dbg !168
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.approx.ftz.f(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.approx.f(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.trunc.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rz.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rz.f(float, float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #5

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }
attributes #7 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py", directory: "inductor_cache/bi")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 27, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 36, scope: !11)
!21 = !DILocation(line: 28, column: 44, scope: !11)
!22 = !DILocation(line: 28, column: 34, scope: !11)
!23 = !DILocation(line: 28, column: 41, scope: !11)
!24 = !DILocation(line: 28, column: 30, scope: !11)
!25 = !DILocation(line: 28, column: 49, scope: !11)
!26 = !DILocation(line: 29, column: 41, scope: !11)
!27 = !DILocation(line: 29, column: 30, scope: !11)
!28 = !DILocation(line: 29, column: 49, scope: !11)
!29 = !DILocation(line: 30, column: 41, scope: !11)
!30 = !DILocation(line: 30, column: 30, scope: !11)
!31 = !DILocation(line: 30, column: 49, scope: !11)
!32 = !DILocation(line: 31, column: 31, scope: !11)
!33 = !DILocation(line: 31, column: 46, scope: !11)
!34 = !DILocation(line: 32, column: 42, scope: !11)
!35 = !DILocation(line: 32, column: 31, scope: !11)
!36 = !DILocation(line: 32, column: 50, scope: !11)
!37 = !DILocation(line: 33, column: 42, scope: !11)
!38 = !DILocation(line: 33, column: 31, scope: !11)
!39 = !DILocation(line: 33, column: 50, scope: !11)
!40 = !DILocation(line: 34, column: 18, scope: !11)
!41 = !DILocation(line: 35, column: 18, scope: !11)
!42 = !DILocation(line: 37, column: 18, scope: !11)
!43 = !DILocation(line: 39, column: 18, scope: !11)
!44 = !DILocation(line: 41, column: 19, scope: !11)
!45 = !DILocation(line: 42, column: 24, scope: !11)
!46 = !DILocation(line: 44, column: 20, scope: !11)
!47 = !DILocation(line: 45, column: 28, scope: !11)
!48 = !DILocation(line: 46, column: 21, scope: !11)
!49 = !DILocation(line: 48, column: 20, scope: !11)
!50 = !DILocation(line: 50, column: 21, scope: !11)
!51 = !DILocation(line: 52, column: 34, scope: !11)
!52 = !{i32 21046}
!53 = !DILocation(line: 53, column: 20, scope: !11)
!54 = !DILocation(line: 55, column: 20, scope: !11)
!55 = !DILocation(line: 56, column: 35, scope: !11)
!56 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !11, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 58, column: 42, scope: !11)
!60 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !61)
!61 = !DILocation(line: 60, column: 42, scope: !11)
!62 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !61)
!63 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !61)
!64 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !61)
!65 = !DILocation(line: 61, column: 28, scope: !11)
!66 = !DILocation(line: 62, column: 20, scope: !11)
!67 = !DILocation(line: 63, column: 20, scope: !11)
!68 = !DILocation(line: 64, column: 20, scope: !11)
!69 = !DILocation(line: 65, column: 20, scope: !11)
!70 = !DILocation(line: 66, column: 20, scope: !11)
!71 = !DILocation(line: 67, column: 24, scope: !11)
!72 = !DILocation(line: 68, column: 20, scope: !11)
!73 = !DILocation(line: 69, column: 28, scope: !11)
!74 = !DILocation(line: 70, column: 21, scope: !11)
!75 = !DILocation(line: 71, column: 20, scope: !11)
!76 = !DILocation(line: 72, column: 21, scope: !11)
!77 = !DILocation(line: 73, column: 34, scope: !11)
!78 = !DILocation(line: 74, column: 20, scope: !11)
!79 = !DILocation(line: 75, column: 20, scope: !11)
!80 = !DILocation(line: 76, column: 35, scope: !11)
!81 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !82)
!82 = !DILocation(line: 77, column: 42, scope: !11)
!83 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !84)
!84 = !DILocation(line: 78, column: 42, scope: !11)
!85 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !84)
!86 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !84)
!87 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !84)
!88 = !DILocation(line: 79, column: 28, scope: !11)
!89 = !DILocation(line: 81, column: 20, scope: !11)
!90 = !DILocation(line: 84, column: 20, scope: !11)
!91 = !DILocation(line: 87, column: 21, scope: !11)
!92 = !DILocation(line: 88, column: 20, scope: !11)
!93 = !DILocation(line: 89, column: 21, scope: !11)
!94 = !DILocation(line: 90, column: 20, scope: !11)
!95 = !DILocation(line: 91, column: 20, scope: !11)
!96 = !DILocation(line: 92, column: 20, scope: !11)
!97 = !DILocation(line: 93, column: 20, scope: !11)
!98 = !DILocation(line: 94, column: 21, scope: !11)
!99 = !DILocation(line: 96, column: 35, scope: !11)
!100 = !DILocation(line: 100, column: 35, scope: !11)
!101 = !DILocation(line: 101, column: 62, scope: !11)
!102 = !DILocation(line: 102, column: 21, scope: !11)
!103 = !DILocation(line: 103, column: 35, scope: !11)
!104 = !DILocation(line: 106, column: 35, scope: !11)
!105 = !DILocation(line: 107, column: 62, scope: !11)
!106 = !DILocation(line: 108, column: 52, scope: !11)
!107 = !DILocation(line: 108, column: 49, scope: !11)
!108 = !DILocation(line: 108, column: 31, scope: !11)
!109 = !DILocation(line: 108, column: 57, scope: !11)
!110 = !DILocation(line: 112, column: 21, scope: !11)
!111 = !DILocation(line: 113, column: 20, scope: !11)
!112 = !DILocation(line: 114, column: 20, scope: !11)
!113 = !DILocation(line: 115, column: 20, scope: !11)
!114 = !DILocation(line: 116, column: 35, scope: !11)
!115 = !DILocation(line: 119, column: 35, scope: !11)
!116 = !DILocation(line: 120, column: 62, scope: !11)
!117 = !DILocation(line: 121, column: 21, scope: !11)
!118 = !DILocation(line: 122, column: 35, scope: !11)
!119 = !DILocation(line: 125, column: 35, scope: !11)
!120 = !DILocation(line: 126, column: 62, scope: !11)
!121 = !DILocation(line: 127, column: 31, scope: !11)
!122 = !DILocation(line: 127, column: 57, scope: !11)
!123 = !DILocation(line: 132, column: 22, scope: !11)
!124 = !DILocation(line: 133, column: 21, scope: !11)
!125 = !DILocation(line: 134, column: 22, scope: !11)
!126 = !DILocation(line: 135, column: 21, scope: !11)
!127 = !DILocation(line: 136, column: 21, scope: !11)
!128 = !DILocation(line: 137, column: 22, scope: !11)
!129 = !DILocation(line: 138, column: 38, scope: !11)
!130 = !DILocation(line: 141, column: 38, scope: !11)
!131 = !DILocation(line: 142, column: 64, scope: !11)
!132 = !DILocation(line: 143, column: 37, scope: !11)
!133 = !DILocation(line: 146, column: 38, scope: !11)
!134 = !DILocation(line: 147, column: 64, scope: !11)
!135 = !DILocation(line: 148, column: 32, scope: !11)
!136 = !DILocation(line: 148, column: 60, scope: !11)
!137 = !DILocation(line: 153, column: 21, scope: !11)
!138 = !DILocation(line: 154, column: 21, scope: !11)
!139 = !DILocation(line: 155, column: 38, scope: !11)
!140 = !DILocation(line: 158, column: 38, scope: !11)
!141 = !DILocation(line: 159, column: 64, scope: !11)
!142 = !DILocation(line: 160, column: 37, scope: !11)
!143 = !DILocation(line: 163, column: 38, scope: !11)
!144 = !DILocation(line: 164, column: 64, scope: !11)
!145 = !DILocation(line: 82, column: 20, scope: !11)
!146 = !DILocation(line: 85, column: 20, scope: !11)
!147 = !DILocation(line: 109, column: 20, scope: !11)
!148 = !DILocation(line: 110, column: 35, scope: !11)
!149 = !DILocation(line: 111, column: 20, scope: !11)
!150 = !DILocation(line: 86, column: 20, scope: !11)
!151 = !DILocation(line: 128, column: 21, scope: !11)
!152 = !DILocation(line: 129, column: 37, scope: !11)
!153 = !DILocation(line: 130, column: 21, scope: !11)
!154 = !DILocation(line: 131, column: 21, scope: !11)
!155 = !DILocation(line: 83, column: 20, scope: !11)
!156 = !DILocation(line: 149, column: 21, scope: !11)
!157 = !DILocation(line: 150, column: 38, scope: !11)
!158 = !DILocation(line: 151, column: 22, scope: !11)
!159 = !DILocation(line: 152, column: 22, scope: !11)
!160 = !DILocation(line: 165, column: 32, scope: !11)
!161 = !DILocation(line: 165, column: 60, scope: !11)
!162 = !DILocation(line: 166, column: 21, scope: !11)
!163 = !DILocation(line: 167, column: 38, scope: !11)
!164 = !DILocation(line: 168, column: 22, scope: !11)
!165 = !DILocation(line: 169, column: 22, scope: !11)
!166 = !DILocation(line: 170, column: 28, scope: !11)
!167 = !DILocation(line: 170, column: 41, scope: !11)
!168 = !DILocation(line: 170, column: 4, scope: !11)
