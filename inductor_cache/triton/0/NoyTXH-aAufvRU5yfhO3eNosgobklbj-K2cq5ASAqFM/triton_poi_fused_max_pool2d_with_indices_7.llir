; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = or disjoint i32 %6, %10, !dbg !13
  %23 = or disjoint i32 %6, %11, !dbg !13
  %24 = or disjoint i32 %6, %12, !dbg !13
  %25 = or disjoint i32 %6, %13, !dbg !13
  %26 = or disjoint i32 %22, 512, !dbg !13
  %27 = or disjoint i32 %22, 640, !dbg !13
  %28 = or disjoint i32 %22, 768, !dbg !13
  %29 = or disjoint i32 %22, 896, !dbg !13
  %30 = icmp slt i32 %14, 2857728, !dbg !14
  %31 = icmp slt i32 %18, 2857728, !dbg !14
  %32 = icmp slt i32 %22, 2857728, !dbg !14
  %33 = icmp slt i32 %23, 2857728, !dbg !14
  %34 = icmp slt i32 %24, 2857728, !dbg !14
  %35 = icmp slt i32 %25, 2857728, !dbg !14
  %36 = icmp slt i32 %26, 2857728, !dbg !14
  %37 = icmp slt i32 %27, 2857728, !dbg !14
  %38 = icmp slt i32 %28, 2857728, !dbg !14
  %39 = icmp slt i32 %29, 2857728, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %40 = sdiv i32 %.frozen, 61, !dbg !15
  %41 = mul i32 %40, 61, !dbg !16
  %.decomposed = sub i32 %.frozen, %41, !dbg !16
  %.frozen1 = freeze i32 %15, !dbg !15
  %42 = sdiv i32 %.frozen1, 61, !dbg !15
  %43 = mul i32 %42, 61, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %43, !dbg !16
  %.frozen3 = freeze i32 %16, !dbg !15
  %44 = sdiv i32 %.frozen3, 61, !dbg !15
  %45 = mul i32 %44, 61, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %45, !dbg !16
  %.frozen5 = freeze i32 %17, !dbg !15
  %46 = sdiv i32 %.frozen5, 61, !dbg !15
  %47 = mul i32 %46, 61, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %47, !dbg !16
  %.frozen7 = freeze i32 %18, !dbg !15
  %48 = sdiv i32 %.frozen7, 61, !dbg !15
  %49 = mul i32 %48, 61, !dbg !16
  %.decomposed8 = sub i32 %.frozen7, %49, !dbg !16
  %.frozen9 = freeze i32 %19, !dbg !15
  %50 = sdiv i32 %.frozen9, 61, !dbg !15
  %51 = mul i32 %50, 61, !dbg !16
  %.decomposed10 = sub i32 %.frozen9, %51, !dbg !16
  %.frozen11 = freeze i32 %20, !dbg !15
  %52 = sdiv i32 %.frozen11, 61, !dbg !15
  %53 = mul i32 %52, 61, !dbg !16
  %.decomposed12 = sub i32 %.frozen11, %53, !dbg !16
  %.frozen13 = freeze i32 %21, !dbg !15
  %54 = sdiv i32 %.frozen13, 61, !dbg !15
  %55 = mul i32 %54, 61, !dbg !16
  %.decomposed14 = sub i32 %.frozen13, %55, !dbg !16
  %56 = srem i32 %40, 61, !dbg !17
  %57 = srem i32 %42, 61, !dbg !17
  %58 = srem i32 %44, 61, !dbg !17
  %59 = srem i32 %46, 61, !dbg !17
  %60 = srem i32 %48, 61, !dbg !17
  %61 = srem i32 %50, 61, !dbg !17
  %62 = srem i32 %52, 61, !dbg !17
  %63 = srem i32 %54, 61, !dbg !17
  %64 = sdiv i32 %14, 3721, !dbg !18
  %65 = sdiv i32 %15, 3721, !dbg !18
  %66 = sdiv i32 %16, 3721, !dbg !18
  %67 = sdiv i32 %17, 3721, !dbg !18
  %68 = sdiv i32 %18, 3721, !dbg !18
  %69 = sdiv i32 %19, 3721, !dbg !18
  %70 = sdiv i32 %20, 3721, !dbg !18
  %71 = sdiv i32 %21, 3721, !dbg !18
  %.frozen19 = freeze i32 %22, !dbg !18
  %72 = sdiv i32 %.frozen19, 3721, !dbg !18
  %.frozen21 = freeze i32 %23, !dbg !18
  %73 = sdiv i32 %.frozen21, 3721, !dbg !18
  %.frozen23 = freeze i32 %24, !dbg !18
  %74 = sdiv i32 %.frozen23, 3721, !dbg !18
  %.frozen25 = freeze i32 %25, !dbg !18
  %75 = sdiv i32 %.frozen25, 3721, !dbg !18
  %.frozen27 = freeze i32 %26, !dbg !18
  %76 = sdiv i32 %.frozen27, 3721, !dbg !18
  %.frozen29 = freeze i32 %27, !dbg !18
  %77 = sdiv i32 %.frozen29, 3721, !dbg !18
  %.frozen31 = freeze i32 %28, !dbg !18
  %78 = sdiv i32 %.frozen31, 3721, !dbg !18
  %.frozen33 = freeze i32 %29, !dbg !18
  %79 = sdiv i32 %.frozen33, 3721, !dbg !18
  %.frozen15 = freeze i32 %14, !dbg !19
  %80 = sdiv i32 %.frozen15, 714432, !dbg !19
  %.frozen17 = freeze i32 %18, !dbg !19
  %81 = sdiv i32 %.frozen17, 714432, !dbg !19
  %82 = mul i32 %80, 714432, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %82, !dbg !20
  %83 = mul i32 %81, 714432, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %83, !dbg !20
  %84 = mul i32 %72, 3721, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %84, !dbg !21
  %85 = mul i32 %73, 3721, !dbg !21
  %.decomposed22 = sub i32 %.frozen21, %85, !dbg !21
  %86 = mul i32 %74, 3721, !dbg !21
  %.decomposed24 = sub i32 %.frozen23, %86, !dbg !21
  %87 = mul i32 %75, 3721, !dbg !21
  %.decomposed26 = sub i32 %.frozen25, %87, !dbg !21
  %88 = mul i32 %76, 3721, !dbg !21
  %.decomposed28 = sub i32 %.frozen27, %88, !dbg !21
  %89 = mul i32 %77, 3721, !dbg !21
  %.decomposed30 = sub i32 %.frozen29, %89, !dbg !21
  %90 = mul i32 %78, 3721, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %90, !dbg !21
  %91 = mul i32 %79, 3721, !dbg !21
  %.decomposed34 = sub i32 %.frozen33, %91, !dbg !21
  %92 = shl nsw i32 %.decomposed, 1, !dbg !22
  %93 = shl nsw i32 %.decomposed2, 1, !dbg !22
  %94 = shl nsw i32 %.decomposed4, 1, !dbg !22
  %95 = shl nsw i32 %.decomposed6, 1, !dbg !22
  %96 = shl nsw i32 %.decomposed8, 1, !dbg !22
  %97 = shl nsw i32 %.decomposed10, 1, !dbg !22
  %98 = shl nsw i32 %.decomposed12, 1, !dbg !22
  %99 = shl nsw i32 %.decomposed14, 1, !dbg !22
  %100 = mul nsw i32 %56, 248, !dbg !23
  %101 = mul nsw i32 %57, 248, !dbg !23
  %102 = mul nsw i32 %58, 248, !dbg !23
  %103 = mul nsw i32 %59, 248, !dbg !23
  %104 = mul nsw i32 %60, 248, !dbg !23
  %105 = mul nsw i32 %61, 248, !dbg !23
  %106 = mul nsw i32 %62, 248, !dbg !23
  %107 = mul nsw i32 %63, 248, !dbg !23
  %108 = mul i32 %64, 15376, !dbg !24
  %109 = mul i32 %65, 15376, !dbg !24
  %110 = mul i32 %66, 15376, !dbg !24
  %111 = mul i32 %67, 15376, !dbg !24
  %112 = mul i32 %68, 15376, !dbg !24
  %113 = mul i32 %69, 15376, !dbg !24
  %114 = mul i32 %70, 15376, !dbg !24
  %115 = mul i32 %71, 15376, !dbg !24
  %116 = add i32 %100, %108, !dbg !25
  %117 = add i32 %116, %92, !dbg !26
  %118 = add i32 %101, %109, !dbg !25
  %119 = add i32 %118, %93, !dbg !26
  %120 = add i32 %102, %110, !dbg !25
  %121 = add i32 %120, %94, !dbg !26
  %122 = add i32 %103, %111, !dbg !25
  %123 = add i32 %122, %95, !dbg !26
  %124 = add i32 %104, %112, !dbg !25
  %125 = add i32 %124, %96, !dbg !26
  %126 = add i32 %105, %113, !dbg !25
  %127 = add i32 %126, %97, !dbg !26
  %128 = add i32 %106, %114, !dbg !25
  %129 = add i32 %128, %98, !dbg !26
  %130 = add i32 %107, %115, !dbg !25
  %131 = add i32 %130, %99, !dbg !26
  %132 = sext i32 %117 to i64, !dbg !27
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !27
  %134 = sext i32 %119 to i64, !dbg !27
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !27
  %136 = sext i32 %121 to i64, !dbg !27
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !27
  %138 = sext i32 %123 to i64, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !27
  %140 = sext i32 %125 to i64, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !27
  %142 = sext i32 %127 to i64, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !27
  %144 = sext i32 %129 to i64, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !27
  %146 = sext i32 %131 to i64, !dbg !27
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !27
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %30) #2, !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %30) #2, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %30) #2, !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %30) #2, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %31) #2, !dbg !28
  %157 = bitcast i32 %156 to float, !dbg !28
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %31) #2, !dbg !28
  %159 = bitcast i32 %158 to float, !dbg !28
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %31) #2, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %31) #2, !dbg !28
  %163 = bitcast i32 %162 to float, !dbg !28
  %164 = or disjoint i32 %116, 1, !dbg !29
  %165 = add i32 %164, %92, !dbg !30
  %166 = or disjoint i32 %118, 1, !dbg !29
  %167 = add i32 %166, %93, !dbg !30
  %168 = or disjoint i32 %120, 1, !dbg !29
  %169 = add i32 %168, %94, !dbg !30
  %170 = or disjoint i32 %122, 1, !dbg !29
  %171 = add i32 %170, %95, !dbg !30
  %172 = or disjoint i32 %124, 1, !dbg !29
  %173 = add i32 %172, %96, !dbg !30
  %174 = or disjoint i32 %126, 1, !dbg !29
  %175 = add i32 %174, %97, !dbg !30
  %176 = or disjoint i32 %128, 1, !dbg !29
  %177 = add i32 %176, %98, !dbg !30
  %178 = or disjoint i32 %130, 1, !dbg !29
  %179 = add i32 %178, %99, !dbg !30
  %180 = sext i32 %165 to i64, !dbg !31
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !31
  %182 = sext i32 %167 to i64, !dbg !31
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !31
  %184 = sext i32 %169 to i64, !dbg !31
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !31
  %186 = sext i32 %171 to i64, !dbg !31
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !31
  %188 = sext i32 %173 to i64, !dbg !31
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !31
  %190 = sext i32 %175 to i64, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !31
  %192 = sext i32 %177 to i64, !dbg !31
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !31
  %194 = sext i32 %179 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !31
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %30) #2, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %30) #2, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %30) #2, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %30) #2, !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %31) #2, !dbg !32
  %205 = bitcast i32 %204 to float, !dbg !32
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %31) #2, !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %31) #2, !dbg !32
  %209 = bitcast i32 %208 to float, !dbg !32
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %31) #2, !dbg !32
  %211 = bitcast i32 %210 to float, !dbg !32
  %212 = or disjoint i32 %116, 2, !dbg !33
  %213 = add i32 %212, %92, !dbg !34
  %214 = or disjoint i32 %118, 2, !dbg !33
  %215 = add i32 %214, %93, !dbg !34
  %216 = or disjoint i32 %120, 2, !dbg !33
  %217 = add i32 %216, %94, !dbg !34
  %218 = or disjoint i32 %122, 2, !dbg !33
  %219 = add i32 %218, %95, !dbg !34
  %220 = or disjoint i32 %124, 2, !dbg !33
  %221 = add i32 %220, %96, !dbg !34
  %222 = or disjoint i32 %126, 2, !dbg !33
  %223 = add i32 %222, %97, !dbg !34
  %224 = or disjoint i32 %128, 2, !dbg !33
  %225 = add i32 %224, %98, !dbg !34
  %226 = or disjoint i32 %130, 2, !dbg !33
  %227 = add i32 %226, %99, !dbg !34
  %228 = sext i32 %213 to i64, !dbg !35
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !35
  %230 = sext i32 %215 to i64, !dbg !35
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !35
  %232 = sext i32 %217 to i64, !dbg !35
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !35
  %234 = sext i32 %219 to i64, !dbg !35
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !35
  %236 = sext i32 %221 to i64, !dbg !35
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !35
  %238 = sext i32 %223 to i64, !dbg !35
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !35
  %240 = sext i32 %225 to i64, !dbg !35
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !35
  %242 = sext i32 %227 to i64, !dbg !35
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !35
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %30) #2, !dbg !36
  %245 = bitcast i32 %244 to float, !dbg !36
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %30) #2, !dbg !36
  %247 = bitcast i32 %246 to float, !dbg !36
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %30) #2, !dbg !36
  %249 = bitcast i32 %248 to float, !dbg !36
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %30) #2, !dbg !36
  %251 = bitcast i32 %250 to float, !dbg !36
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %31) #2, !dbg !36
  %253 = bitcast i32 %252 to float, !dbg !36
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %31) #2, !dbg !36
  %255 = bitcast i32 %254 to float, !dbg !36
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %31) #2, !dbg !36
  %257 = bitcast i32 %256 to float, !dbg !36
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %31) #2, !dbg !36
  %259 = bitcast i32 %258 to float, !dbg !36
  %260 = add i32 %116, 124, !dbg !37
  %261 = add i32 %260, %92, !dbg !38
  %262 = add i32 %118, 124, !dbg !37
  %263 = add i32 %262, %93, !dbg !38
  %264 = add i32 %120, 124, !dbg !37
  %265 = add i32 %264, %94, !dbg !38
  %266 = add i32 %122, 124, !dbg !37
  %267 = add i32 %266, %95, !dbg !38
  %268 = add i32 %124, 124, !dbg !37
  %269 = add i32 %268, %96, !dbg !38
  %270 = add i32 %126, 124, !dbg !37
  %271 = add i32 %270, %97, !dbg !38
  %272 = add i32 %128, 124, !dbg !37
  %273 = add i32 %272, %98, !dbg !38
  %274 = add i32 %130, 124, !dbg !37
  %275 = add i32 %274, %99, !dbg !38
  %276 = sext i32 %261 to i64, !dbg !39
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !39
  %278 = sext i32 %263 to i64, !dbg !39
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !39
  %280 = sext i32 %265 to i64, !dbg !39
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !39
  %282 = sext i32 %267 to i64, !dbg !39
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !39
  %284 = sext i32 %269 to i64, !dbg !39
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !39
  %286 = sext i32 %271 to i64, !dbg !39
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !39
  %288 = sext i32 %273 to i64, !dbg !39
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !39
  %290 = sext i32 %275 to i64, !dbg !39
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !39
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %30) #2, !dbg !40
  %293 = bitcast i32 %292 to float, !dbg !40
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %30) #2, !dbg !40
  %295 = bitcast i32 %294 to float, !dbg !40
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %30) #2, !dbg !40
  %297 = bitcast i32 %296 to float, !dbg !40
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %30) #2, !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %31) #2, !dbg !40
  %301 = bitcast i32 %300 to float, !dbg !40
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %31) #2, !dbg !40
  %303 = bitcast i32 %302 to float, !dbg !40
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %31) #2, !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %31) #2, !dbg !40
  %307 = bitcast i32 %306 to float, !dbg !40
  %308 = add i32 %116, 125, !dbg !41
  %309 = add i32 %308, %92, !dbg !42
  %310 = add i32 %118, 125, !dbg !41
  %311 = add i32 %310, %93, !dbg !42
  %312 = add i32 %120, 125, !dbg !41
  %313 = add i32 %312, %94, !dbg !42
  %314 = add i32 %122, 125, !dbg !41
  %315 = add i32 %314, %95, !dbg !42
  %316 = add i32 %124, 125, !dbg !41
  %317 = add i32 %316, %96, !dbg !42
  %318 = add i32 %126, 125, !dbg !41
  %319 = add i32 %318, %97, !dbg !42
  %320 = add i32 %128, 125, !dbg !41
  %321 = add i32 %320, %98, !dbg !42
  %322 = add i32 %130, 125, !dbg !41
  %323 = add i32 %322, %99, !dbg !42
  %324 = sext i32 %309 to i64, !dbg !43
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !43
  %326 = sext i32 %311 to i64, !dbg !43
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !43
  %328 = sext i32 %313 to i64, !dbg !43
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !43
  %330 = sext i32 %315 to i64, !dbg !43
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !43
  %332 = sext i32 %317 to i64, !dbg !43
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !43
  %334 = sext i32 %319 to i64, !dbg !43
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !43
  %336 = sext i32 %321 to i64, !dbg !43
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !43
  %338 = sext i32 %323 to i64, !dbg !43
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !43
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %30) #2, !dbg !44
  %341 = bitcast i32 %340 to float, !dbg !44
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %30) #2, !dbg !44
  %343 = bitcast i32 %342 to float, !dbg !44
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %30) #2, !dbg !44
  %345 = bitcast i32 %344 to float, !dbg !44
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %30) #2, !dbg !44
  %347 = bitcast i32 %346 to float, !dbg !44
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %31) #2, !dbg !44
  %349 = bitcast i32 %348 to float, !dbg !44
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %31) #2, !dbg !44
  %351 = bitcast i32 %350 to float, !dbg !44
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %31) #2, !dbg !44
  %353 = bitcast i32 %352 to float, !dbg !44
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %31) #2, !dbg !44
  %355 = bitcast i32 %354 to float, !dbg !44
  %356 = add i32 %116, 126, !dbg !45
  %357 = add i32 %356, %92, !dbg !46
  %358 = add i32 %118, 126, !dbg !45
  %359 = add i32 %358, %93, !dbg !46
  %360 = add i32 %120, 126, !dbg !45
  %361 = add i32 %360, %94, !dbg !46
  %362 = add i32 %122, 126, !dbg !45
  %363 = add i32 %362, %95, !dbg !46
  %364 = add i32 %124, 126, !dbg !45
  %365 = add i32 %364, %96, !dbg !46
  %366 = add i32 %126, 126, !dbg !45
  %367 = add i32 %366, %97, !dbg !46
  %368 = add i32 %128, 126, !dbg !45
  %369 = add i32 %368, %98, !dbg !46
  %370 = add i32 %130, 126, !dbg !45
  %371 = add i32 %370, %99, !dbg !46
  %372 = sext i32 %357 to i64, !dbg !47
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !47
  %374 = sext i32 %359 to i64, !dbg !47
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !47
  %376 = sext i32 %361 to i64, !dbg !47
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !47
  %378 = sext i32 %363 to i64, !dbg !47
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !47
  %380 = sext i32 %365 to i64, !dbg !47
  %381 = getelementptr float, ptr addrspace(1) %0, i64 %380, !dbg !47
  %382 = sext i32 %367 to i64, !dbg !47
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !47
  %384 = sext i32 %369 to i64, !dbg !47
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !47
  %386 = sext i32 %371 to i64, !dbg !47
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !47
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %30) #2, !dbg !48
  %389 = bitcast i32 %388 to float, !dbg !48
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %30) #2, !dbg !48
  %391 = bitcast i32 %390 to float, !dbg !48
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %30) #2, !dbg !48
  %393 = bitcast i32 %392 to float, !dbg !48
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 %30) #2, !dbg !48
  %395 = bitcast i32 %394 to float, !dbg !48
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %381, i1 %31) #2, !dbg !48
  %397 = bitcast i32 %396 to float, !dbg !48
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %383, i1 %31) #2, !dbg !48
  %399 = bitcast i32 %398 to float, !dbg !48
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %385, i1 %31) #2, !dbg !48
  %401 = bitcast i32 %400 to float, !dbg !48
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 %31) #2, !dbg !48
  %403 = bitcast i32 %402 to float, !dbg !48
  %404 = add i32 %116, 248, !dbg !49
  %405 = add i32 %404, %92, !dbg !50
  %406 = add i32 %118, 248, !dbg !49
  %407 = add i32 %406, %93, !dbg !50
  %408 = add i32 %120, 248, !dbg !49
  %409 = add i32 %408, %94, !dbg !50
  %410 = add i32 %122, 248, !dbg !49
  %411 = add i32 %410, %95, !dbg !50
  %412 = add i32 %124, 248, !dbg !49
  %413 = add i32 %412, %96, !dbg !50
  %414 = add i32 %126, 248, !dbg !49
  %415 = add i32 %414, %97, !dbg !50
  %416 = add i32 %128, 248, !dbg !49
  %417 = add i32 %416, %98, !dbg !50
  %418 = add i32 %130, 248, !dbg !49
  %419 = add i32 %418, %99, !dbg !50
  %420 = sext i32 %405 to i64, !dbg !51
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !51
  %422 = sext i32 %407 to i64, !dbg !51
  %423 = getelementptr float, ptr addrspace(1) %0, i64 %422, !dbg !51
  %424 = sext i32 %409 to i64, !dbg !51
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %424, !dbg !51
  %426 = sext i32 %411 to i64, !dbg !51
  %427 = getelementptr float, ptr addrspace(1) %0, i64 %426, !dbg !51
  %428 = sext i32 %413 to i64, !dbg !51
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !51
  %430 = sext i32 %415 to i64, !dbg !51
  %431 = getelementptr float, ptr addrspace(1) %0, i64 %430, !dbg !51
  %432 = sext i32 %417 to i64, !dbg !51
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !51
  %434 = sext i32 %419 to i64, !dbg !51
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !51
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %421, i1 %30) #2, !dbg !52
  %437 = bitcast i32 %436 to float, !dbg !52
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %423, i1 %30) #2, !dbg !52
  %439 = bitcast i32 %438 to float, !dbg !52
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %30) #2, !dbg !52
  %441 = bitcast i32 %440 to float, !dbg !52
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 %30) #2, !dbg !52
  %443 = bitcast i32 %442 to float, !dbg !52
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 %31) #2, !dbg !52
  %445 = bitcast i32 %444 to float, !dbg !52
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %431, i1 %31) #2, !dbg !52
  %447 = bitcast i32 %446 to float, !dbg !52
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %433, i1 %31) #2, !dbg !52
  %449 = bitcast i32 %448 to float, !dbg !52
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 %31) #2, !dbg !52
  %451 = bitcast i32 %450 to float, !dbg !52
  %452 = add i32 %116, 249, !dbg !53
  %453 = add i32 %452, %92, !dbg !54
  %454 = add i32 %118, 249, !dbg !53
  %455 = add i32 %454, %93, !dbg !54
  %456 = add i32 %120, 249, !dbg !53
  %457 = add i32 %456, %94, !dbg !54
  %458 = add i32 %122, 249, !dbg !53
  %459 = add i32 %458, %95, !dbg !54
  %460 = add i32 %124, 249, !dbg !53
  %461 = add i32 %460, %96, !dbg !54
  %462 = add i32 %126, 249, !dbg !53
  %463 = add i32 %462, %97, !dbg !54
  %464 = add i32 %128, 249, !dbg !53
  %465 = add i32 %464, %98, !dbg !54
  %466 = add i32 %130, 249, !dbg !53
  %467 = add i32 %466, %99, !dbg !54
  %468 = sext i32 %453 to i64, !dbg !55
  %469 = getelementptr float, ptr addrspace(1) %0, i64 %468, !dbg !55
  %470 = sext i32 %455 to i64, !dbg !55
  %471 = getelementptr float, ptr addrspace(1) %0, i64 %470, !dbg !55
  %472 = sext i32 %457 to i64, !dbg !55
  %473 = getelementptr float, ptr addrspace(1) %0, i64 %472, !dbg !55
  %474 = sext i32 %459 to i64, !dbg !55
  %475 = getelementptr float, ptr addrspace(1) %0, i64 %474, !dbg !55
  %476 = sext i32 %461 to i64, !dbg !55
  %477 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !55
  %478 = sext i32 %463 to i64, !dbg !55
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !55
  %480 = sext i32 %465 to i64, !dbg !55
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !55
  %482 = sext i32 %467 to i64, !dbg !55
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !55
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %469, i1 %30) #2, !dbg !56
  %485 = bitcast i32 %484 to float, !dbg !56
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %471, i1 %30) #2, !dbg !56
  %487 = bitcast i32 %486 to float, !dbg !56
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %473, i1 %30) #2, !dbg !56
  %489 = bitcast i32 %488 to float, !dbg !56
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %475, i1 %30) #2, !dbg !56
  %491 = bitcast i32 %490 to float, !dbg !56
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %477, i1 %31) #2, !dbg !56
  %493 = bitcast i32 %492 to float, !dbg !56
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %479, i1 %31) #2, !dbg !56
  %495 = bitcast i32 %494 to float, !dbg !56
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %481, i1 %31) #2, !dbg !56
  %497 = bitcast i32 %496 to float, !dbg !56
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %483, i1 %31) #2, !dbg !56
  %499 = bitcast i32 %498 to float, !dbg !56
  %500 = add i32 %116, 250, !dbg !57
  %501 = add i32 %500, %92, !dbg !58
  %502 = add i32 %118, 250, !dbg !57
  %503 = add i32 %502, %93, !dbg !58
  %504 = add i32 %120, 250, !dbg !57
  %505 = add i32 %504, %94, !dbg !58
  %506 = add i32 %122, 250, !dbg !57
  %507 = add i32 %506, %95, !dbg !58
  %508 = add i32 %124, 250, !dbg !57
  %509 = add i32 %508, %96, !dbg !58
  %510 = add i32 %126, 250, !dbg !57
  %511 = add i32 %510, %97, !dbg !58
  %512 = add i32 %128, 250, !dbg !57
  %513 = add i32 %512, %98, !dbg !58
  %514 = add i32 %130, 250, !dbg !57
  %515 = add i32 %514, %99, !dbg !58
  %516 = sext i32 %501 to i64, !dbg !59
  %517 = getelementptr float, ptr addrspace(1) %0, i64 %516, !dbg !59
  %518 = sext i32 %503 to i64, !dbg !59
  %519 = getelementptr float, ptr addrspace(1) %0, i64 %518, !dbg !59
  %520 = sext i32 %505 to i64, !dbg !59
  %521 = getelementptr float, ptr addrspace(1) %0, i64 %520, !dbg !59
  %522 = sext i32 %507 to i64, !dbg !59
  %523 = getelementptr float, ptr addrspace(1) %0, i64 %522, !dbg !59
  %524 = sext i32 %509 to i64, !dbg !59
  %525 = getelementptr float, ptr addrspace(1) %0, i64 %524, !dbg !59
  %526 = sext i32 %511 to i64, !dbg !59
  %527 = getelementptr float, ptr addrspace(1) %0, i64 %526, !dbg !59
  %528 = sext i32 %513 to i64, !dbg !59
  %529 = getelementptr float, ptr addrspace(1) %0, i64 %528, !dbg !59
  %530 = sext i32 %515 to i64, !dbg !59
  %531 = getelementptr float, ptr addrspace(1) %0, i64 %530, !dbg !59
  %532 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %517, i1 %30) #2, !dbg !60
  %533 = bitcast i32 %532 to float, !dbg !60
  %534 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %519, i1 %30) #2, !dbg !60
  %535 = bitcast i32 %534 to float, !dbg !60
  %536 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %521, i1 %30) #2, !dbg !60
  %537 = bitcast i32 %536 to float, !dbg !60
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %523, i1 %30) #2, !dbg !60
  %539 = bitcast i32 %538 to float, !dbg !60
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %525, i1 %31) #2, !dbg !60
  %541 = bitcast i32 %540 to float, !dbg !60
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %527, i1 %31) #2, !dbg !60
  %543 = bitcast i32 %542 to float, !dbg !60
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %529, i1 %31) #2, !dbg !60
  %545 = bitcast i32 %544 to float, !dbg !60
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %531, i1 %31) #2, !dbg !60
  %547 = bitcast i32 %546 to float, !dbg !60
  %548 = fcmp ogt float %197, %149, !dbg !61
  %549 = fcmp ogt float %199, %151, !dbg !61
  %550 = fcmp ogt float %201, %153, !dbg !61
  %551 = fcmp ogt float %203, %155, !dbg !61
  %552 = fcmp ogt float %205, %157, !dbg !61
  %553 = fcmp ogt float %207, %159, !dbg !61
  %554 = fcmp ogt float %209, %161, !dbg !61
  %555 = fcmp ogt float %211, %163, !dbg !61
  %556 = fcmp uno float %197, 0.000000e+00, !dbg !65
  %557 = fcmp uno float %199, 0.000000e+00, !dbg !65
  %558 = fcmp uno float %201, 0.000000e+00, !dbg !65
  %559 = fcmp uno float %203, 0.000000e+00, !dbg !65
  %560 = fcmp uno float %205, 0.000000e+00, !dbg !65
  %561 = fcmp uno float %207, 0.000000e+00, !dbg !65
  %562 = fcmp uno float %209, 0.000000e+00, !dbg !65
  %563 = fcmp uno float %211, 0.000000e+00, !dbg !65
  %564 = or i1 %548, %556, !dbg !66
  %565 = or i1 %549, %557, !dbg !66
  %566 = or i1 %550, %558, !dbg !66
  %567 = or i1 %551, %559, !dbg !66
  %568 = or i1 %552, %560, !dbg !66
  %569 = or i1 %553, %561, !dbg !66
  %570 = or i1 %554, %562, !dbg !66
  %571 = or i1 %555, %563, !dbg !66
  %572 = select i1 %564, float %197, float %149, !dbg !67
  %573 = select i1 %565, float %199, float %151, !dbg !67
  %574 = select i1 %566, float %201, float %153, !dbg !67
  %575 = select i1 %567, float %203, float %155, !dbg !67
  %576 = select i1 %568, float %205, float %157, !dbg !67
  %577 = select i1 %569, float %207, float %159, !dbg !67
  %578 = select i1 %570, float %209, float %161, !dbg !67
  %579 = select i1 %571, float %211, float %163, !dbg !67
  %580 = fcmp olt float %572, %245, !dbg !68
  %581 = fcmp olt float %573, %247, !dbg !68
  %582 = fcmp olt float %574, %249, !dbg !68
  %583 = fcmp olt float %575, %251, !dbg !68
  %584 = fcmp olt float %576, %253, !dbg !68
  %585 = fcmp olt float %577, %255, !dbg !68
  %586 = fcmp olt float %578, %257, !dbg !68
  %587 = fcmp olt float %579, %259, !dbg !68
  %588 = fcmp uno float %245, 0.000000e+00, !dbg !70
  %589 = fcmp uno float %247, 0.000000e+00, !dbg !70
  %590 = fcmp uno float %249, 0.000000e+00, !dbg !70
  %591 = fcmp uno float %251, 0.000000e+00, !dbg !70
  %592 = fcmp uno float %253, 0.000000e+00, !dbg !70
  %593 = fcmp uno float %255, 0.000000e+00, !dbg !70
  %594 = fcmp uno float %257, 0.000000e+00, !dbg !70
  %595 = fcmp uno float %259, 0.000000e+00, !dbg !70
  %596 = or i1 %580, %588, !dbg !71
  %597 = or i1 %581, %589, !dbg !71
  %598 = or i1 %582, %590, !dbg !71
  %599 = or i1 %583, %591, !dbg !71
  %600 = or i1 %584, %592, !dbg !71
  %601 = or i1 %585, %593, !dbg !71
  %602 = or i1 %586, %594, !dbg !71
  %603 = or i1 %587, %595, !dbg !71
  %604 = select i1 %596, float %245, float %572, !dbg !72
  %605 = select i1 %597, float %247, float %573, !dbg !72
  %606 = select i1 %598, float %249, float %574, !dbg !72
  %607 = select i1 %599, float %251, float %575, !dbg !72
  %608 = select i1 %600, float %253, float %576, !dbg !72
  %609 = select i1 %601, float %255, float %577, !dbg !72
  %610 = select i1 %602, float %257, float %578, !dbg !72
  %611 = select i1 %603, float %259, float %579, !dbg !72
  %612 = fcmp olt float %604, %293, !dbg !73
  %613 = fcmp olt float %605, %295, !dbg !73
  %614 = fcmp olt float %606, %297, !dbg !73
  %615 = fcmp olt float %607, %299, !dbg !73
  %616 = fcmp olt float %608, %301, !dbg !73
  %617 = fcmp olt float %609, %303, !dbg !73
  %618 = fcmp olt float %610, %305, !dbg !73
  %619 = fcmp olt float %611, %307, !dbg !73
  %620 = fcmp uno float %293, 0.000000e+00, !dbg !75
  %621 = fcmp uno float %295, 0.000000e+00, !dbg !75
  %622 = fcmp uno float %297, 0.000000e+00, !dbg !75
  %623 = fcmp uno float %299, 0.000000e+00, !dbg !75
  %624 = fcmp uno float %301, 0.000000e+00, !dbg !75
  %625 = fcmp uno float %303, 0.000000e+00, !dbg !75
  %626 = fcmp uno float %305, 0.000000e+00, !dbg !75
  %627 = fcmp uno float %307, 0.000000e+00, !dbg !75
  %628 = or i1 %612, %620, !dbg !76
  %629 = or i1 %613, %621, !dbg !76
  %630 = or i1 %614, %622, !dbg !76
  %631 = or i1 %615, %623, !dbg !76
  %632 = or i1 %616, %624, !dbg !76
  %633 = or i1 %617, %625, !dbg !76
  %634 = or i1 %618, %626, !dbg !76
  %635 = or i1 %619, %627, !dbg !76
  %636 = select i1 %628, float %293, float %604, !dbg !77
  %637 = select i1 %629, float %295, float %605, !dbg !77
  %638 = select i1 %630, float %297, float %606, !dbg !77
  %639 = select i1 %631, float %299, float %607, !dbg !77
  %640 = select i1 %632, float %301, float %608, !dbg !77
  %641 = select i1 %633, float %303, float %609, !dbg !77
  %642 = select i1 %634, float %305, float %610, !dbg !77
  %643 = select i1 %635, float %307, float %611, !dbg !77
  %644 = fcmp olt float %636, %341, !dbg !78
  %645 = fcmp olt float %637, %343, !dbg !78
  %646 = fcmp olt float %638, %345, !dbg !78
  %647 = fcmp olt float %639, %347, !dbg !78
  %648 = fcmp olt float %640, %349, !dbg !78
  %649 = fcmp olt float %641, %351, !dbg !78
  %650 = fcmp olt float %642, %353, !dbg !78
  %651 = fcmp olt float %643, %355, !dbg !78
  %652 = fcmp uno float %341, 0.000000e+00, !dbg !80
  %653 = fcmp uno float %343, 0.000000e+00, !dbg !80
  %654 = fcmp uno float %345, 0.000000e+00, !dbg !80
  %655 = fcmp uno float %347, 0.000000e+00, !dbg !80
  %656 = fcmp uno float %349, 0.000000e+00, !dbg !80
  %657 = fcmp uno float %351, 0.000000e+00, !dbg !80
  %658 = fcmp uno float %353, 0.000000e+00, !dbg !80
  %659 = fcmp uno float %355, 0.000000e+00, !dbg !80
  %660 = or i1 %644, %652, !dbg !81
  %661 = or i1 %645, %653, !dbg !81
  %662 = or i1 %646, %654, !dbg !81
  %663 = or i1 %647, %655, !dbg !81
  %664 = or i1 %648, %656, !dbg !81
  %665 = or i1 %649, %657, !dbg !81
  %666 = or i1 %650, %658, !dbg !81
  %667 = or i1 %651, %659, !dbg !81
  %668 = select i1 %660, float %341, float %636, !dbg !82
  %669 = select i1 %661, float %343, float %637, !dbg !82
  %670 = select i1 %662, float %345, float %638, !dbg !82
  %671 = select i1 %663, float %347, float %639, !dbg !82
  %672 = select i1 %664, float %349, float %640, !dbg !82
  %673 = select i1 %665, float %351, float %641, !dbg !82
  %674 = select i1 %666, float %353, float %642, !dbg !82
  %675 = select i1 %667, float %355, float %643, !dbg !82
  %676 = fcmp olt float %668, %389, !dbg !83
  %677 = fcmp olt float %669, %391, !dbg !83
  %678 = fcmp olt float %670, %393, !dbg !83
  %679 = fcmp olt float %671, %395, !dbg !83
  %680 = fcmp olt float %672, %397, !dbg !83
  %681 = fcmp olt float %673, %399, !dbg !83
  %682 = fcmp olt float %674, %401, !dbg !83
  %683 = fcmp olt float %675, %403, !dbg !83
  %684 = fcmp uno float %389, 0.000000e+00, !dbg !85
  %685 = fcmp uno float %391, 0.000000e+00, !dbg !85
  %686 = fcmp uno float %393, 0.000000e+00, !dbg !85
  %687 = fcmp uno float %395, 0.000000e+00, !dbg !85
  %688 = fcmp uno float %397, 0.000000e+00, !dbg !85
  %689 = fcmp uno float %399, 0.000000e+00, !dbg !85
  %690 = fcmp uno float %401, 0.000000e+00, !dbg !85
  %691 = fcmp uno float %403, 0.000000e+00, !dbg !85
  %692 = or i1 %676, %684, !dbg !86
  %693 = or i1 %677, %685, !dbg !86
  %694 = or i1 %678, %686, !dbg !86
  %695 = or i1 %679, %687, !dbg !86
  %696 = or i1 %680, %688, !dbg !86
  %697 = or i1 %681, %689, !dbg !86
  %698 = or i1 %682, %690, !dbg !86
  %699 = or i1 %683, %691, !dbg !86
  %700 = select i1 %692, float %389, float %668, !dbg !87
  %701 = select i1 %693, float %391, float %669, !dbg !87
  %702 = select i1 %694, float %393, float %670, !dbg !87
  %703 = select i1 %695, float %395, float %671, !dbg !87
  %704 = select i1 %696, float %397, float %672, !dbg !87
  %705 = select i1 %697, float %399, float %673, !dbg !87
  %706 = select i1 %698, float %401, float %674, !dbg !87
  %707 = select i1 %699, float %403, float %675, !dbg !87
  %708 = fcmp olt float %700, %437, !dbg !88
  %709 = fcmp olt float %701, %439, !dbg !88
  %710 = fcmp olt float %702, %441, !dbg !88
  %711 = fcmp olt float %703, %443, !dbg !88
  %712 = fcmp olt float %704, %445, !dbg !88
  %713 = fcmp olt float %705, %447, !dbg !88
  %714 = fcmp olt float %706, %449, !dbg !88
  %715 = fcmp olt float %707, %451, !dbg !88
  %716 = fcmp uno float %437, 0.000000e+00, !dbg !90
  %717 = fcmp uno float %439, 0.000000e+00, !dbg !90
  %718 = fcmp uno float %441, 0.000000e+00, !dbg !90
  %719 = fcmp uno float %443, 0.000000e+00, !dbg !90
  %720 = fcmp uno float %445, 0.000000e+00, !dbg !90
  %721 = fcmp uno float %447, 0.000000e+00, !dbg !90
  %722 = fcmp uno float %449, 0.000000e+00, !dbg !90
  %723 = fcmp uno float %451, 0.000000e+00, !dbg !90
  %724 = or i1 %708, %716, !dbg !91
  %725 = or i1 %709, %717, !dbg !91
  %726 = or i1 %710, %718, !dbg !91
  %727 = or i1 %711, %719, !dbg !91
  %728 = or i1 %712, %720, !dbg !91
  %729 = or i1 %713, %721, !dbg !91
  %730 = or i1 %714, %722, !dbg !91
  %731 = or i1 %715, %723, !dbg !91
  %732 = select i1 %724, float %437, float %700, !dbg !92
  %733 = select i1 %725, float %439, float %701, !dbg !92
  %734 = select i1 %726, float %441, float %702, !dbg !92
  %735 = select i1 %727, float %443, float %703, !dbg !92
  %736 = select i1 %728, float %445, float %704, !dbg !92
  %737 = select i1 %729, float %447, float %705, !dbg !92
  %738 = select i1 %730, float %449, float %706, !dbg !92
  %739 = select i1 %731, float %451, float %707, !dbg !92
  %740 = fcmp olt float %732, %485, !dbg !93
  %741 = fcmp olt float %733, %487, !dbg !93
  %742 = fcmp olt float %734, %489, !dbg !93
  %743 = fcmp olt float %735, %491, !dbg !93
  %744 = fcmp olt float %736, %493, !dbg !93
  %745 = fcmp olt float %737, %495, !dbg !93
  %746 = fcmp olt float %738, %497, !dbg !93
  %747 = fcmp olt float %739, %499, !dbg !93
  %748 = fcmp uno float %485, 0.000000e+00, !dbg !95
  %749 = fcmp uno float %487, 0.000000e+00, !dbg !95
  %750 = fcmp uno float %489, 0.000000e+00, !dbg !95
  %751 = fcmp uno float %491, 0.000000e+00, !dbg !95
  %752 = fcmp uno float %493, 0.000000e+00, !dbg !95
  %753 = fcmp uno float %495, 0.000000e+00, !dbg !95
  %754 = fcmp uno float %497, 0.000000e+00, !dbg !95
  %755 = fcmp uno float %499, 0.000000e+00, !dbg !95
  %756 = or i1 %740, %748, !dbg !96
  %757 = or i1 %741, %749, !dbg !96
  %758 = or i1 %742, %750, !dbg !96
  %759 = or i1 %743, %751, !dbg !96
  %760 = or i1 %744, %752, !dbg !96
  %761 = or i1 %745, %753, !dbg !96
  %762 = or i1 %746, %754, !dbg !96
  %763 = or i1 %747, %755, !dbg !96
  %764 = select i1 %756, float %485, float %732, !dbg !97
  %765 = select i1 %757, float %487, float %733, !dbg !97
  %766 = select i1 %758, float %489, float %734, !dbg !97
  %767 = select i1 %759, float %491, float %735, !dbg !97
  %768 = select i1 %760, float %493, float %736, !dbg !97
  %769 = select i1 %761, float %495, float %737, !dbg !97
  %770 = select i1 %762, float %497, float %738, !dbg !97
  %771 = select i1 %763, float %499, float %739, !dbg !97
  %772 = fcmp olt float %764, %533, !dbg !98
  %773 = fcmp olt float %765, %535, !dbg !98
  %774 = fcmp olt float %766, %537, !dbg !98
  %775 = fcmp olt float %767, %539, !dbg !98
  %776 = fcmp olt float %768, %541, !dbg !98
  %777 = fcmp olt float %769, %543, !dbg !98
  %778 = fcmp olt float %770, %545, !dbg !98
  %779 = fcmp olt float %771, %547, !dbg !98
  %780 = fcmp uno float %533, 0.000000e+00, !dbg !100
  %781 = fcmp uno float %535, 0.000000e+00, !dbg !100
  %782 = fcmp uno float %537, 0.000000e+00, !dbg !100
  %783 = fcmp uno float %539, 0.000000e+00, !dbg !100
  %784 = fcmp uno float %541, 0.000000e+00, !dbg !100
  %785 = fcmp uno float %543, 0.000000e+00, !dbg !100
  %786 = fcmp uno float %545, 0.000000e+00, !dbg !100
  %787 = fcmp uno float %547, 0.000000e+00, !dbg !100
  %788 = or i1 %772, %780, !dbg !101
  %789 = or i1 %773, %781, !dbg !101
  %790 = or i1 %774, %782, !dbg !101
  %791 = or i1 %775, %783, !dbg !101
  %792 = or i1 %776, %784, !dbg !101
  %793 = or i1 %777, %785, !dbg !101
  %794 = or i1 %778, %786, !dbg !101
  %795 = or i1 %779, %787, !dbg !101
  %796 = zext i1 %548 to i8, !dbg !102
  %797 = zext i1 %549 to i8, !dbg !102
  %798 = zext i1 %550 to i8, !dbg !102
  %799 = zext i1 %551 to i8, !dbg !102
  %800 = zext i1 %552 to i8, !dbg !102
  %801 = zext i1 %553 to i8, !dbg !102
  %802 = zext i1 %554 to i8, !dbg !102
  %803 = zext i1 %555 to i8, !dbg !102
  %804 = select i1 %580, i8 2, i8 %796, !dbg !103
  %805 = select i1 %581, i8 2, i8 %797, !dbg !103
  %806 = select i1 %582, i8 2, i8 %798, !dbg !103
  %807 = select i1 %583, i8 2, i8 %799, !dbg !103
  %808 = select i1 %584, i8 2, i8 %800, !dbg !103
  %809 = select i1 %585, i8 2, i8 %801, !dbg !103
  %810 = select i1 %586, i8 2, i8 %802, !dbg !103
  %811 = select i1 %587, i8 2, i8 %803, !dbg !103
  %812 = select i1 %612, i8 3, i8 %804, !dbg !104
  %813 = select i1 %613, i8 3, i8 %805, !dbg !104
  %814 = select i1 %614, i8 3, i8 %806, !dbg !104
  %815 = select i1 %615, i8 3, i8 %807, !dbg !104
  %816 = select i1 %616, i8 3, i8 %808, !dbg !104
  %817 = select i1 %617, i8 3, i8 %809, !dbg !104
  %818 = select i1 %618, i8 3, i8 %810, !dbg !104
  %819 = select i1 %619, i8 3, i8 %811, !dbg !104
  %820 = select i1 %644, i8 4, i8 %812, !dbg !105
  %821 = select i1 %645, i8 4, i8 %813, !dbg !105
  %822 = select i1 %646, i8 4, i8 %814, !dbg !105
  %823 = select i1 %647, i8 4, i8 %815, !dbg !105
  %824 = select i1 %648, i8 4, i8 %816, !dbg !105
  %825 = select i1 %649, i8 4, i8 %817, !dbg !105
  %826 = select i1 %650, i8 4, i8 %818, !dbg !105
  %827 = select i1 %651, i8 4, i8 %819, !dbg !105
  %828 = select i1 %676, i8 5, i8 %820, !dbg !106
  %829 = select i1 %677, i8 5, i8 %821, !dbg !106
  %830 = select i1 %678, i8 5, i8 %822, !dbg !106
  %831 = select i1 %679, i8 5, i8 %823, !dbg !106
  %832 = select i1 %680, i8 5, i8 %824, !dbg !106
  %833 = select i1 %681, i8 5, i8 %825, !dbg !106
  %834 = select i1 %682, i8 5, i8 %826, !dbg !106
  %835 = select i1 %683, i8 5, i8 %827, !dbg !106
  %836 = select i1 %708, i8 6, i8 %828, !dbg !107
  %837 = select i1 %709, i8 6, i8 %829, !dbg !107
  %838 = select i1 %710, i8 6, i8 %830, !dbg !107
  %839 = select i1 %711, i8 6, i8 %831, !dbg !107
  %840 = select i1 %712, i8 6, i8 %832, !dbg !107
  %841 = select i1 %713, i8 6, i8 %833, !dbg !107
  %842 = select i1 %714, i8 6, i8 %834, !dbg !107
  %843 = select i1 %715, i8 6, i8 %835, !dbg !107
  %844 = select i1 %740, i8 7, i8 %836, !dbg !108
  %845 = select i1 %741, i8 7, i8 %837, !dbg !108
  %846 = select i1 %742, i8 7, i8 %838, !dbg !108
  %847 = select i1 %743, i8 7, i8 %839, !dbg !108
  %848 = select i1 %744, i8 7, i8 %840, !dbg !108
  %849 = select i1 %745, i8 7, i8 %841, !dbg !108
  %850 = select i1 %746, i8 7, i8 %842, !dbg !108
  %851 = select i1 %747, i8 7, i8 %843, !dbg !108
  %852 = select i1 %772, i8 8, i8 %844, !dbg !109
  %853 = select i1 %773, i8 8, i8 %845, !dbg !109
  %854 = select i1 %774, i8 8, i8 %846, !dbg !109
  %855 = select i1 %775, i8 8, i8 %847, !dbg !109
  %856 = select i1 %776, i8 8, i8 %848, !dbg !109
  %857 = select i1 %777, i8 8, i8 %849, !dbg !109
  %858 = select i1 %778, i8 8, i8 %850, !dbg !109
  %859 = select i1 %779, i8 8, i8 %851, !dbg !109
  %860 = mul i32 %80, 1428864, !dbg !110
  %861 = mul i32 %81, 1428864, !dbg !110
  %862 = add i32 %860, %.decomposed16, !dbg !111
  %863 = add i32 %861, %.decomposed18, !dbg !111
  %864 = sext i32 %862 to i64, !dbg !112
  %865 = getelementptr float, ptr addrspace(1) %1, i64 %864, !dbg !112
  %866 = sext i32 %863 to i64, !dbg !112
  %867 = getelementptr float, ptr addrspace(1) %1, i64 %866, !dbg !112
  %868 = bitcast float %764 to i32, !dbg !113
  %869 = select i1 %788, i32 %532, i32 %868, !dbg !114
  %870 = bitcast float %765 to i32, !dbg !113
  %871 = select i1 %789, i32 %534, i32 %870, !dbg !114
  %872 = bitcast float %766 to i32, !dbg !113
  %873 = select i1 %790, i32 %536, i32 %872, !dbg !114
  %874 = bitcast float %767 to i32, !dbg !113
  %875 = select i1 %791, i32 %538, i32 %874, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %869, i32 %871, i32 %873, i32 %875, ptr addrspace(1) %865, i1 %30) #2, !dbg !113
  %876 = bitcast float %768 to i32, !dbg !113
  %877 = select i1 %792, i32 %540, i32 %876, !dbg !114
  %878 = bitcast float %769 to i32, !dbg !113
  %879 = select i1 %793, i32 %542, i32 %878, !dbg !114
  %880 = bitcast float %770 to i32, !dbg !113
  %881 = select i1 %794, i32 %544, i32 %880, !dbg !114
  %882 = bitcast float %771 to i32, !dbg !113
  %883 = select i1 %795, i32 %546, i32 %882, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %877, i32 %879, i32 %881, i32 %883, ptr addrspace(1) %867, i1 %31) #2, !dbg !113
  %884 = mul i32 %72, 3840, !dbg !115
  %885 = mul i32 %73, 3840, !dbg !115
  %886 = mul i32 %74, 3840, !dbg !115
  %887 = mul i32 %75, 3840, !dbg !115
  %888 = mul i32 %76, 3840, !dbg !115
  %889 = mul i32 %77, 3840, !dbg !115
  %890 = mul i32 %78, 3840, !dbg !115
  %891 = mul i32 %79, 3840, !dbg !115
  %892 = add i32 %884, %.decomposed20, !dbg !116
  %893 = add i32 %885, %.decomposed22, !dbg !116
  %894 = add i32 %886, %.decomposed24, !dbg !116
  %895 = add i32 %887, %.decomposed26, !dbg !116
  %896 = add i32 %888, %.decomposed28, !dbg !116
  %897 = add i32 %889, %.decomposed30, !dbg !116
  %898 = add i32 %890, %.decomposed32, !dbg !116
  %899 = add i32 %891, %.decomposed34, !dbg !116
  %900 = sext i32 %892 to i64, !dbg !117
  %901 = getelementptr i8, ptr addrspace(1) %2, i64 %900, !dbg !117
  %902 = sext i32 %893 to i64, !dbg !117
  %903 = getelementptr i8, ptr addrspace(1) %2, i64 %902, !dbg !117
  %904 = sext i32 %894 to i64, !dbg !117
  %905 = getelementptr i8, ptr addrspace(1) %2, i64 %904, !dbg !117
  %906 = sext i32 %895 to i64, !dbg !117
  %907 = getelementptr i8, ptr addrspace(1) %2, i64 %906, !dbg !117
  %908 = sext i32 %896 to i64, !dbg !117
  %909 = getelementptr i8, ptr addrspace(1) %2, i64 %908, !dbg !117
  %910 = sext i32 %897 to i64, !dbg !117
  %911 = getelementptr i8, ptr addrspace(1) %2, i64 %910, !dbg !117
  %912 = sext i32 %898 to i64, !dbg !117
  %913 = getelementptr i8, ptr addrspace(1) %2, i64 %912, !dbg !117
  %914 = sext i32 %899 to i64, !dbg !117
  %915 = getelementptr i8, ptr addrspace(1) %2, i64 %914, !dbg !117
  %916 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !118
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %916, i8 %852, i8 %853, i8 %854, i8 %855, i1 true) #2, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %917 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !118
  %918 = load i8, ptr addrspace(3) %917, align 1, !dbg !118
  %919 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !118
  %920 = load i8, ptr addrspace(3) %919, align 1, !dbg !118
  %921 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !118
  %922 = load i8, ptr addrspace(3) %921, align 1, !dbg !118
  %923 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !118
  %924 = load i8, ptr addrspace(3) %923, align 1, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %916, i8 %856, i8 %857, i8 %858, i8 %859, i1 true) #2, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %925 = load i8, ptr addrspace(3) %917, align 1, !dbg !118
  %926 = load i8, ptr addrspace(3) %919, align 1, !dbg !118
  %927 = load i8, ptr addrspace(3) %921, align 1, !dbg !118
  %928 = load i8, ptr addrspace(3) %923, align 1, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %918, ptr addrspace(1) %901, i1 %32) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %920, ptr addrspace(1) %903, i1 %33) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %922, ptr addrspace(1) %905, i1 %34) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %924, ptr addrspace(1) %907, i1 %35) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %925, ptr addrspace(1) %909, i1 %36) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %926, ptr addrspace(1) %911, i1 %37) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %927, ptr addrspace(1) %913, i1 %38) #2, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %928, ptr addrspace(1) %915, i1 %39) #2, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx2tckj6cllfdx4rg3cbsamwqjucolxvt5bsi4cgzqjf3qwemwwq.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 52, scope: !7)
!25 = !DILocation(line: 30, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 46, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 57, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 50, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 61, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 50, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 61, scope: !7)
!37 = !DILocation(line: 33, column: 43, scope: !7)
!38 = !DILocation(line: 33, column: 52, scope: !7)
!39 = !DILocation(line: 33, column: 30, scope: !7)
!40 = !DILocation(line: 33, column: 63, scope: !7)
!41 = !DILocation(line: 34, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 52, scope: !7)
!43 = !DILocation(line: 34, column: 30, scope: !7)
!44 = !DILocation(line: 34, column: 63, scope: !7)
!45 = !DILocation(line: 35, column: 43, scope: !7)
!46 = !DILocation(line: 35, column: 52, scope: !7)
!47 = !DILocation(line: 35, column: 30, scope: !7)
!48 = !DILocation(line: 35, column: 63, scope: !7)
!49 = !DILocation(line: 36, column: 44, scope: !7)
!50 = !DILocation(line: 36, column: 53, scope: !7)
!51 = !DILocation(line: 36, column: 31, scope: !7)
!52 = !DILocation(line: 36, column: 64, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 37, column: 53, scope: !7)
!55 = !DILocation(line: 37, column: 31, scope: !7)
!56 = !DILocation(line: 37, column: 64, scope: !7)
!57 = !DILocation(line: 38, column: 44, scope: !7)
!58 = !DILocation(line: 38, column: 53, scope: !7)
!59 = !DILocation(line: 38, column: 31, scope: !7)
!60 = !DILocation(line: 38, column: 64, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 39, column: 40, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !69)
!69 = !DILocation(line: 40, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 41, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !79)
!79 = !DILocation(line: 42, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !84)
!84 = !DILocation(line: 43, column: 41, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !89)
!89 = !DILocation(line: 44, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !94)
!94 = !DILocation(line: 45, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !99)
!99 = !DILocation(line: 46, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !99)
!102 = !DILocation(line: 50, column: 35, scope: !7)
!103 = !DILocation(line: 53, column: 35, scope: !7)
!104 = !DILocation(line: 56, column: 35, scope: !7)
!105 = !DILocation(line: 59, column: 35, scope: !7)
!106 = !DILocation(line: 62, column: 35, scope: !7)
!107 = !DILocation(line: 65, column: 35, scope: !7)
!108 = !DILocation(line: 68, column: 35, scope: !7)
!109 = !DILocation(line: 71, column: 35, scope: !7)
!110 = !DILocation(line: 72, column: 38, scope: !7)
!111 = !DILocation(line: 72, column: 30, scope: !7)
!112 = !DILocation(line: 72, column: 25, scope: !7)
!113 = !DILocation(line: 72, column: 50, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !99)
!115 = !DILocation(line: 73, column: 35, scope: !7)
!116 = !DILocation(line: 73, column: 30, scope: !7)
!117 = !DILocation(line: 73, column: 25, scope: !7)
!118 = !DILocation(line: 73, column: 47, scope: !7)
!119 = !DILocation(line: 73, column: 4, scope: !7)
