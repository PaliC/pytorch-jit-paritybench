; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = or disjoint i32 %9, 32, !dbg !12
  %12 = or disjoint i32 %9, 48, !dbg !12
  %13 = or disjoint i32 %9, 64, !dbg !12
  %14 = or disjoint i32 %9, 80, !dbg !12
  %15 = or disjoint i32 %9, 96, !dbg !12
  %16 = or disjoint i32 %9, 112, !dbg !12
  %17 = and i32 %7, 15, !dbg !12
  %18 = and i32 %7, 127, !dbg !12
  %19 = or disjoint i32 %6, %9, !dbg !13
  %20 = or disjoint i32 %6, %10, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = or disjoint i32 %6, %13, !dbg !13
  %24 = or disjoint i32 %6, %14, !dbg !13
  %25 = or disjoint i32 %6, %15, !dbg !13
  %26 = or disjoint i32 %6, %16, !dbg !13
  %27 = or disjoint i32 %6, %18, !dbg !13
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = icmp slt i32 %21, 256, !dbg !14
  %31 = icmp slt i32 %22, 256, !dbg !14
  %32 = icmp slt i32 %23, 256, !dbg !14
  %33 = icmp slt i32 %24, 256, !dbg !14
  %34 = icmp slt i32 %25, 256, !dbg !14
  %35 = icmp slt i32 %26, 256, !dbg !14
  %36 = icmp slt i32 %27, 256, !dbg !14
  %37 = icmp samesign ult i32 %17, 9, !dbg !15
  %38 = mul i32 %19, 9, !dbg !16
  %39 = mul i32 %20, 9, !dbg !16
  %40 = mul i32 %21, 9, !dbg !16
  %41 = mul i32 %22, 9, !dbg !16
  %42 = mul i32 %23, 9, !dbg !16
  %43 = mul i32 %24, 9, !dbg !16
  %44 = mul i32 %25, 9, !dbg !16
  %45 = mul i32 %26, 9, !dbg !16
  %46 = add i32 %38, %17, !dbg !17
  %47 = add i32 %39, %17, !dbg !17
  %48 = add i32 %40, %17, !dbg !17
  %49 = add i32 %41, %17, !dbg !17
  %50 = add i32 %42, %17, !dbg !17
  %51 = add i32 %43, %17, !dbg !17
  %52 = add i32 %44, %17, !dbg !17
  %53 = add i32 %45, %17, !dbg !17
  %54 = sext i32 %46 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = sext i32 %47 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = sext i32 %48 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %49 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %50 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = sext i32 %51 to i64, !dbg !18
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = sext i32 %52 to i64, !dbg !18
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !18
  %68 = sext i32 %53 to i64, !dbg !18
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = and i1 %37, %28, !dbg !19
  %71 = and i1 %37, %29, !dbg !19
  %72 = and i1 %37, %30, !dbg !19
  %73 = and i1 %37, %31, !dbg !19
  %74 = and i1 %37, %32, !dbg !19
  %75 = and i1 %37, %33, !dbg !19
  %76 = and i1 %37, %34, !dbg !19
  %77 = and i1 %37, %35, !dbg !19
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %70, i32 0, i1 %70) #3, !dbg !20
  %79 = bitcast i32 %78 to float, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %71, i32 0, i1 %71) #3, !dbg !20
  %81 = bitcast i32 %80 to float, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %72, i32 0, i1 %72) #3, !dbg !20
  %83 = bitcast i32 %82 to float, !dbg !20
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %73, i32 0, i1 %73) #3, !dbg !20
  %85 = bitcast i32 %84 to float, !dbg !20
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %74, i32 0, i1 %74) #3, !dbg !20
  %87 = bitcast i32 %86 to float, !dbg !20
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %75, i32 0, i1 %75) #3, !dbg !20
  %89 = bitcast i32 %88 to float, !dbg !20
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %76, i32 0, i1 %76) #3, !dbg !20
  %91 = bitcast i32 %90 to float, !dbg !20
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %77, i32 0, i1 %77) #3, !dbg !20
  %93 = bitcast i32 %92 to float, !dbg !20
  %94 = select i1 %70, float %79, float 0.000000e+00, !dbg !21
  %95 = select i1 %71, float %81, float 0.000000e+00, !dbg !21
  %96 = select i1 %72, float %83, float 0.000000e+00, !dbg !21
  %97 = select i1 %73, float %85, float 0.000000e+00, !dbg !21
  %98 = select i1 %74, float %87, float 0.000000e+00, !dbg !21
  %99 = select i1 %75, float %89, float 0.000000e+00, !dbg !21
  %100 = select i1 %76, float %91, float 0.000000e+00, !dbg !21
  %101 = select i1 %77, float %93, float 0.000000e+00, !dbg !21
  %102 = bitcast float %94 to i32, !dbg !22
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !22
  %104 = bitcast i32 %103 to float, !dbg !22
  %105 = fadd float %94, %104, !dbg !26
  %106 = bitcast float %105 to i32, !dbg !22
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !22
  %108 = bitcast i32 %107 to float, !dbg !22
  %109 = fadd float %105, %108, !dbg !26
  %110 = bitcast float %109 to i32, !dbg !22
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !22
  %112 = bitcast i32 %111 to float, !dbg !22
  %113 = fadd float %109, %112, !dbg !26
  %114 = bitcast float %113 to i32, !dbg !22
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !22
  %116 = bitcast i32 %115 to float, !dbg !22
  %117 = fadd float %113, %116, !dbg !26
  %118 = bitcast float %95 to i32, !dbg !22
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !22
  %120 = bitcast i32 %119 to float, !dbg !22
  %121 = fadd float %95, %120, !dbg !26
  %122 = bitcast float %121 to i32, !dbg !22
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !22
  %124 = bitcast i32 %123 to float, !dbg !22
  %125 = fadd float %121, %124, !dbg !26
  %126 = bitcast float %125 to i32, !dbg !22
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !22
  %128 = bitcast i32 %127 to float, !dbg !22
  %129 = fadd float %125, %128, !dbg !26
  %130 = bitcast float %129 to i32, !dbg !22
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !22
  %132 = bitcast i32 %131 to float, !dbg !22
  %133 = fadd float %129, %132, !dbg !26
  %134 = bitcast float %96 to i32, !dbg !22
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !22
  %136 = bitcast i32 %135 to float, !dbg !22
  %137 = fadd float %96, %136, !dbg !26
  %138 = bitcast float %137 to i32, !dbg !22
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !22
  %140 = bitcast i32 %139 to float, !dbg !22
  %141 = fadd float %137, %140, !dbg !26
  %142 = bitcast float %141 to i32, !dbg !22
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !22
  %144 = bitcast i32 %143 to float, !dbg !22
  %145 = fadd float %141, %144, !dbg !26
  %146 = bitcast float %145 to i32, !dbg !22
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !22
  %148 = bitcast i32 %147 to float, !dbg !22
  %149 = fadd float %145, %148, !dbg !26
  %150 = bitcast float %97 to i32, !dbg !22
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !22
  %152 = bitcast i32 %151 to float, !dbg !22
  %153 = fadd float %97, %152, !dbg !26
  %154 = bitcast float %153 to i32, !dbg !22
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !22
  %156 = bitcast i32 %155 to float, !dbg !22
  %157 = fadd float %153, %156, !dbg !26
  %158 = bitcast float %157 to i32, !dbg !22
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !22
  %160 = bitcast i32 %159 to float, !dbg !22
  %161 = fadd float %157, %160, !dbg !26
  %162 = bitcast float %161 to i32, !dbg !22
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !22
  %164 = bitcast i32 %163 to float, !dbg !22
  %165 = fadd float %161, %164, !dbg !26
  %166 = bitcast float %98 to i32, !dbg !22
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !22
  %168 = bitcast i32 %167 to float, !dbg !22
  %169 = fadd float %98, %168, !dbg !26
  %170 = bitcast float %169 to i32, !dbg !22
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !22
  %172 = bitcast i32 %171 to float, !dbg !22
  %173 = fadd float %169, %172, !dbg !26
  %174 = bitcast float %173 to i32, !dbg !22
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !22
  %176 = bitcast i32 %175 to float, !dbg !22
  %177 = fadd float %173, %176, !dbg !26
  %178 = bitcast float %177 to i32, !dbg !22
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !22
  %180 = bitcast i32 %179 to float, !dbg !22
  %181 = fadd float %177, %180, !dbg !26
  %182 = bitcast float %99 to i32, !dbg !22
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !22
  %184 = bitcast i32 %183 to float, !dbg !22
  %185 = fadd float %99, %184, !dbg !26
  %186 = bitcast float %185 to i32, !dbg !22
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !22
  %188 = bitcast i32 %187 to float, !dbg !22
  %189 = fadd float %185, %188, !dbg !26
  %190 = bitcast float %189 to i32, !dbg !22
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !22
  %192 = bitcast i32 %191 to float, !dbg !22
  %193 = fadd float %189, %192, !dbg !26
  %194 = bitcast float %193 to i32, !dbg !22
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !22
  %196 = bitcast i32 %195 to float, !dbg !22
  %197 = fadd float %193, %196, !dbg !26
  %198 = bitcast float %100 to i32, !dbg !22
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !22
  %200 = bitcast i32 %199 to float, !dbg !22
  %201 = fadd float %100, %200, !dbg !26
  %202 = bitcast float %201 to i32, !dbg !22
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !22
  %204 = bitcast i32 %203 to float, !dbg !22
  %205 = fadd float %201, %204, !dbg !26
  %206 = bitcast float %205 to i32, !dbg !22
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !22
  %208 = bitcast i32 %207 to float, !dbg !22
  %209 = fadd float %205, %208, !dbg !26
  %210 = bitcast float %209 to i32, !dbg !22
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !22
  %212 = bitcast i32 %211 to float, !dbg !22
  %213 = fadd float %209, %212, !dbg !26
  %214 = bitcast float %101 to i32, !dbg !22
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !22
  %216 = bitcast i32 %215 to float, !dbg !22
  %217 = fadd float %101, %216, !dbg !26
  %218 = bitcast float %217 to i32, !dbg !22
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !22
  %220 = bitcast i32 %219 to float, !dbg !22
  %221 = fadd float %217, %220, !dbg !26
  %222 = bitcast float %221 to i32, !dbg !22
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !22
  %224 = bitcast i32 %223 to float, !dbg !22
  %225 = fadd float %221, %224, !dbg !26
  %226 = bitcast float %225 to i32, !dbg !22
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !22
  %228 = bitcast i32 %227 to float, !dbg !22
  %229 = fadd float %225, %228, !dbg !26
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %231 = bitcast float %117 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #3, !dbg !28
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %233 = bitcast float %133 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #3, !dbg !28
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %235 = bitcast float %149 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #3, !dbg !28
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !28
  %237 = bitcast float %165 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #3, !dbg !28
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %239 = bitcast float %181 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #3, !dbg !28
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %241 = bitcast float %197 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #3, !dbg !28
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %243 = bitcast float %213 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #3, !dbg !28
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %245 = bitcast float %229 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !28
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !28
  %248 = sext i32 %27 to i64, !dbg !29
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !29
  %250 = and i32 %7, 128, !dbg !30
  %251 = icmp eq i32 %250, 0, !dbg !30
  %252 = and i1 %251, %36, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %249, i1 %252) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chwl32g5f4s4i6tkyuzmlme55jj3aag4b3v62oqaz6dmwszr3lv4.py", directory: "inductor_cache/hw")
!4 = !{ptr @triton_per_fused_mv_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_18", linkageName: "triton_per_fused_mv_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 50, scope: !7)
!20 = !DILocation(line: 31, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 41, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 34, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 34, column: 27, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
