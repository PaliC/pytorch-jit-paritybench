//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused_convolution_div_8 // -- Begin function triton_poi_fused_convolution_div_8
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_poi_fused_convolution_div_8
.visible .entry triton_poi_fused_convolution_div_8(
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_div_8_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_div_8_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_div_8_param_2,
	.param .u64 .ptr .global .align 1 triton_poi_fused_convolution_div_8_param_3,
	.param .u32 triton_poi_fused_convolution_div_8_param_4,
	.param .u32 triton_poi_fused_convolution_div_8_param_5
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<13>;
	.reg .b32 	%r<68>;
	.reg .b64 	%rd<12>;
	.loc	1 19 0                          // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:19:0

// %bb.0:
	ld.param.u64 	%rd6, [triton_poi_fused_convolution_div_8_param_0];
	ld.param.u64 	%rd2, [triton_poi_fused_convolution_div_8_param_1];
$L__tmp0:
	.loc	1 22 28                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:22:28
	// begin inline asm
	mov.u32 %r1, %ctaid.y;
	// end inline asm
	.loc	1 22 33                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:22:33
	shl.b32 	%r20, %r1, 2;
	ld.param.u64 	%rd7, [triton_poi_fused_convolution_div_8_param_2];
	ld.param.u64 	%rd8, [triton_poi_fused_convolution_div_8_param_3];
	.loc	1 23 44                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:23:44
	mov.u32 	%r21, %tid.x;
	and.b32  	%r22, %r21, 1;
	shl.b32 	%r23, %r22, 1;
	and.b32  	%r24, %r21, 64;
	bfe.u32 	%r25, %r21, 6, 1;
	.loc	1 23 23                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:23:23
	or.b32  	%r26, %r20, %r23;
	or.b32  	%r27, %r20, %r25;
	or.b32  	%r28, %r27, 2;
	.loc	1 24 21                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:24:21
	setp.lt.s32 	%p8, %r26, 256;
	setp.lt.s32 	%p9, %r27, 256;
	setp.lt.s32 	%p10, %r28, 256;
	.loc	1 25 28                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:25:28
	// begin inline asm
	mov.u32 %r2, %ctaid.x;
	// end inline asm
	.loc	1 25 33                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:25:33
	shl.b32 	%r29, %r2, 6;
	.loc	1 26 44                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:26:44
	bfe.u32 	%r30, %r21, 1, 5;
	shr.u32 	%r31, %r24, 1;
	or.b32  	%r32, %r30, %r31;
	and.b32  	%r33, %r21, 63;
	.loc	1 26 23                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:26:23
	or.b32  	%r34, %r32, %r29;
	or.b32  	%r35, %r29, %r33;
	.loc	1 27 21                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:27:21
	setp.lt.s32 	%p11, %r34, 49;
	setp.lt.s32 	%p12, %r35, 49;
	.loc	1 30 19                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:30:19
	shr.s32 	%r37, %r26, 31;
	shr.u32 	%r38, %r37, 30;
	add.s32 	%r39, %r26, %r38;
	shr.s32 	%r40, %r39, 2;
	.loc	1 29 19                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:29:19
	and.b32  	%r41, %r39, -4;
	sub.s32 	%r42, %r26, %r41;
	.loc	1 32 37                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:37
	shl.b32 	%r43, %r34, 2;
	.loc	1 32 35                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:35
	add.s32 	%r44, %r43, %r42;
	.loc	1 32 42                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:42
	mad.lo.s32 	%r45, %r40, 196, %r44;
	.loc	1 32 30                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:30
	mul.wide.s32 	%rd9, %r45, 4;
	add.s64 	%rd1, %rd6, %rd9;
	.loc	1 32 59                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:59
	and.pred  	%p1, %p8, %p11;
	and.pred  	%p5, %p9, %p12;
	and.pred  	%p6, %p10, %p12;
	.loc	1 32 51                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:32:51
	// begin inline asm
	mov.u32 %r7, 0x0;
	mov.u32 %r10, 0x0;
	@%p1 ld.global.L1::evict_last.v2.b32 { %r7, %r10 }, [ %rd1 + 0 ];
	// end inline asm
	mov.pred 	%p2, -1;
	.loc	1 33 19                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:33:19
	// begin inline asm
	mov.u32 %r8, 0x0;
	@%p2 ld.global.b32 { %r8 }, [ %rd2 + 0 ];
	// end inline asm
	.loc	1 35 18                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:35:18
	// begin inline asm
	div.full.f32 %r13, %r7, %r8;
	// end inline asm
	// begin inline asm
	div.full.f32 %r15, %r10, %r8;
	// end inline asm
	.loc	1 36 30                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:36:30
	mad.lo.s32 	%r46, %r27, 49, %r35;
	add.s32 	%r47, %r46, 98;
	.loc	1 36 25                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:36:25
	mul.wide.s32 	%rd10, %r46, 4;
	add.s64 	%rd3, %rd7, %rd10;
	mul.wide.s32 	%rd11, %r47, 4;
	add.s64 	%rd4, %rd7, %rd11;
	.loc	1 36 44                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:36:44
	shl.b32 	%r48, %r22, 7;
	or.b32  	%r49, %r32, %r48;
	and.b32  	%r50, %r21, 127;
	shl.b32 	%r51, %r22, 3;
	mov.u32 	%r52, global_smem;
	add.s32 	%r53, %r52, %r51;
	shl.b32 	%r54, %r49, 2;
	add.s32 	%r12, %r53, %r54;
	// begin inline asm
	@%p2 st.shared.b32 [ %r12 + 0 ], %r13;
	// end inline asm
	shr.u32 	%r55, %r48, 4;
	add.s32 	%r56, %r52, %r55;
	add.s32 	%r57, %r56, %r54;
	add.s32 	%r14, %r57, 260;
	// begin inline asm
	@%p2 st.shared.b32 [ %r14 + 0 ], %r15;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r58, %r21, 4;
	and.b32  	%r59, %r58, 4;
	add.s32 	%r60, %r52, %r59;
	shl.b32 	%r61, %r50, 2;
	add.s32 	%r62, %r60, %r61;
	ld.shared.u32 	%r16, [%r62];
	or.b32  	%r63, %r50, 128;
	shr.u32 	%r64, %r63, 4;
	and.b32  	%r65, %r64, 12;
	add.s32 	%r66, %r52, %r65;
	add.s32 	%r67, %r66, %r61;
	ld.shared.u32 	%r17, [%r67+512];
	// begin inline asm
	@%p5 st.global.b32 [ %rd3 + 0 ], { %r16 };
	// end inline asm
	// begin inline asm
	@%p6 st.global.b32 [ %rd4 + 0 ], { %r17 };
	// end inline asm
	.loc	1 37 25                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:37:25
	add.s64 	%rd5, %rd8, %rd9;
	.loc	1 37 52                         // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:37:52
	// begin inline asm
	@%p1 st.global.v2.b32 [ %rd5 + 0 ], { %r13, %r15 };
	// end inline asm
	.loc	1 37 4                          // ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py:37:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/td/ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 116
.b8 100
.b8 104
.b8 97
.b8 116
.b8 99
.b8 109
.b8 102
.b8 117
.b8 106
.b8 98
.b8 114
.b8 102
.b8 98
.b8 53
.b8 99
.b8 112
.b8 54
.b8 100
.b8 53
.b8 119
.b8 114
.b8 116
.b8 114
.b8 104
.b8 111
.b8 52
.b8 98
.b8 52
.b8 109
.b8 103
.b8 98
.b8 108
.b8 51
.b8 50
.b8 106
.b8 119
.b8 52
.b8 108
.b8 97
.b8 52
.b8 108
.b8 104
.b8 103
.b8 102
.b8 100
.b8 54
.b8 113
.b8 51
.b8 55
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 116
.b8 100
.b8 0
	}
	.section	.debug_macinfo	{	}
