; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %.lobit130 = lshr i32 %13, 7, !dbg !12
  %15 = and i32 %.lobit130, 3, !dbg !12
  %16 = or disjoint i32 %12, %14, !dbg !13
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = and i32 %13, 511, !dbg !15
  %23 = lshr i32 %13, 3, !dbg !15
  %24 = and i32 %23, 15, !dbg !15
  %25 = lshr i32 %13, 3, !dbg !15
  %26 = and i32 %25, 16, !dbg !15
  %27 = lshr i32 %13, 3, !dbg !15
  %28 = and i32 %27, 32, !dbg !15
  %29 = or disjoint i32 %26, %24, !dbg !15
  %30 = or disjoint i32 %29, %28, !dbg !15
  %31 = shl i32 %13, 2, !dbg !15
  %32 = and i32 %31, 508, !dbg !15
  %33 = srem i32 %16, 64, !dbg !16
  %34 = shl nsw i32 %33, 1, !dbg !17
  %35 = shl i32 %17, 13, !dbg !18
  %36 = shl i32 %18, 13, !dbg !18
  %37 = shl i32 %16, 10, !dbg !19
  %38 = sext i32 %37 to i64, !dbg !20
  %39 = lshr i32 %13, 4
  %40 = and i32 %39, 15
  %41 = and i32 %13, 15
  %invariant.gep = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !21
  %invariant.gep43 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %42 = zext nneg i32 %40 to i64
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42
  %44 = zext nneg i32 %41 to i64
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44
  %46 = shl i32 %13, 5
  %47 = and i32 %46, 4064
  %.reass = or disjoint i32 %47, %15
  %48 = lshr exact i32 %47, 1
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %.reass
  %51 = or disjoint i32 %.reass, 8
  %52 = lshr i32 %51, 3
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52
  %54 = getelementptr inbounds float, ptr addrspace(3) %53, i32 %51
  %55 = or disjoint i32 %.reass, 16
  %56 = lshr i32 %55, 3
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %55
  %59 = or disjoint i32 %.reass, 24
  %60 = lshr i32 %59, 3
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %59
  %63 = or disjoint i32 %.reass, 4
  %64 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %63
  %65 = or disjoint i32 %.reass, 12
  %66 = lshr i32 %65, 3
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %65
  %69 = or disjoint i32 %.reass, 20
  %70 = lshr i32 %69, 3
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %69
  %73 = or disjoint i32 %.reass, 28
  %74 = lshr i32 %73, 3
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %73
  %77 = lshr i32 %22, 3
  %gep = getelementptr inbounds float, ptr addrspace(3) %invariant.gep, i32 %77
  %78 = or disjoint i32 %22, 512
  %79 = lshr i32 %78, 3
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %78
  %82 = or disjoint i32 %22, 1024
  %83 = lshr i32 %82, 3
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83
  %85 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %82
  %86 = or disjoint i32 %22, 1536
  %87 = lshr i32 %86, 3
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86
  %90 = or disjoint i32 %22, 2048
  %91 = lshr i32 %90, 3
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %90
  %94 = or disjoint i32 %22, 2560
  %95 = lshr i32 %94, 3
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94
  %98 = or disjoint i32 %22, 3072
  %99 = lshr i32 %98, 3
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %98
  %102 = or disjoint i32 %22, 3584
  %103 = lshr i32 %102, 3
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %102
  %.idx = shl nuw nsw i32 %22, 4
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %.idx4 = shl nuw nsw i32 %30, 4
  %107 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %.idx5 = or disjoint i32 %.idx4, 1024
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5
  %.idx6 = or disjoint i32 %.idx4, 2048
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6
  %.idx7 = or disjoint i32 %.idx4, 3072
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7
  %.idx8 = or disjoint i32 %.idx4, 4096
  %111 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8
  %.idx9 = or disjoint i32 %.idx4, 5120
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9
  %.idx10 = or disjoint i32 %.idx4, 6144
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10
  %.idx11 = or disjoint i32 %.idx4, 7168
  %114 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11
  %115 = shl i32 %13, 9
  %116 = and i32 %115, 3584
  %117 = or disjoint i32 %28, %24
  %118 = or disjoint i32 %117, %26
  %.reass60 = or disjoint i32 %118, %116
  %119 = and i32 %31, 2044
  %120 = lshr exact i32 %116, 5
  %121 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %120
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %.reass60
  %123 = or disjoint i32 %.reass60, 64
  %124 = getelementptr float, ptr addrspace(3) %121, i32 %123
  %125 = or disjoint i32 %.reass60, 128
  %126 = getelementptr float, ptr addrspace(3) %121, i32 %125
  %127 = or disjoint i32 %.reass60, 192
  %128 = getelementptr float, ptr addrspace(3) %121, i32 %127
  %129 = or disjoint i32 %.reass60, 256
  %130 = getelementptr float, ptr addrspace(3) %121, i32 %129
  %131 = or disjoint i32 %.reass60, 320
  %132 = getelementptr float, ptr addrspace(3) %121, i32 %131
  %133 = or disjoint i32 %.reass60, 384
  %134 = getelementptr float, ptr addrspace(3) %121, i32 %133
  %135 = or disjoint i32 %.reass60, 448
  %136 = getelementptr float, ptr addrspace(3) %121, i32 %135
  %137 = lshr i32 %31, 7
  %138 = and i32 %137, 12
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138
  %140 = getelementptr inbounds float, ptr addrspace(3) %139, i32 %119
  %141 = or disjoint i32 %119, 2048
  %142 = lshr i32 %141, 7
  %143 = and i32 %142, 28
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %141
  %146 = zext nneg i32 %32 to i64, !dbg !21
  %147 = sext i32 %35 to i64, !dbg !21
  %148 = sext i32 %36 to i64, !dbg !21
  %149 = getelementptr inbounds i8, ptr addrspace(3) %140, i32 4
  %150 = getelementptr inbounds i8, ptr addrspace(3) %140, i32 8
  %151 = getelementptr inbounds i8, ptr addrspace(3) %140, i32 12
  %152 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !22
  %153 = shufflevector <8 x i1> %152, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !22
  br label %154, !dbg !21

154:                                              ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %155 = phi float [ 0.000000e+00, %10 ], [ %387, %._crit_edge ]
  %156 = phi float [ 0.000000e+00, %10 ], [ %388, %._crit_edge ]
  %157 = phi float [ 0.000000e+00, %10 ], [ %389, %._crit_edge ]
  %158 = phi float [ 0.000000e+00, %10 ], [ %390, %._crit_edge ]
  %159 = phi float [ 0.000000e+00, %10 ], [ %391, %._crit_edge ]
  %160 = phi float [ 0.000000e+00, %10 ], [ %392, %._crit_edge ]
  %161 = phi float [ 0.000000e+00, %10 ], [ %393, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %10 ], [ %394, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %10 ], [ %379, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %10 ], [ %380, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %10 ], [ %381, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %10 ], [ %382, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %10 ], [ %383, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %10 ], [ %384, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %10 ], [ %385, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %10 ], [ %386, %._crit_edge ]
  %171 = phi <8 x float> [ zeroinitializer, %10 ], [ %378, %._crit_edge ]
  %172 = or disjoint i64 %indvars.iv, %146, !dbg !23
  %173 = trunc i64 %indvars.iv to i32, !dbg !24
  %174 = or disjoint i32 %22, %173, !dbg !24
  %175 = lshr i32 %174, 8, !dbg !24
  %176 = and i32 %175, 15, !dbg !24
  %177 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !25
  %178 = lshr i32 %177, 12, !dbg !25
  %179 = zext nneg i32 %176 to i64, !dbg !26
  %180 = getelementptr i64, ptr addrspace(1) %0, i64 %179, !dbg !26
  %181 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %180, i1 true, i1 true) #3, !dbg !27
  %182 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 true, i1 true) #3, !dbg !28
  %183 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %45, i1 true, i1 true) #3, !dbg !29
  %184 = or disjoint i32 %178, %34, !dbg !30
  %185 = sext i32 %184 to i64, !dbg !31
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !31
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %195 = add nuw nsw i64 %172, %147, !dbg !33
  %196 = add nuw nsw i64 %172, %148, !dbg !33
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !34
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %196, !dbg !34
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !35
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !35
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !35
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !35
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !35
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !35
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %209 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %209, i1 true) #3, !dbg !35
  %210 = insertelement <1 x i32> poison, i32 %201, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %210, i1 true) #3, !dbg !35
  %211 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %211, i1 true) #3, !dbg !35
  %212 = insertelement <1 x i32> poison, i32 %203, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %212, i1 true) #3, !dbg !35
  %213 = insertelement <1 x i32> poison, i32 %205, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %213, i1 true) #3, !dbg !35
  %214 = insertelement <1 x i32> poison, i32 %206, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %214, i1 true) #3, !dbg !35
  %215 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %215, i1 true) #3, !dbg !35
  %216 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %216, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %217 = load float, ptr addrspace(3) %gep, align 4, !dbg !35
  %218 = load float, ptr addrspace(3) %81, align 4, !dbg !35
  %219 = load float, ptr addrspace(3) %85, align 4, !dbg !35
  %220 = load float, ptr addrspace(3) %89, align 4, !dbg !35
  %221 = load float, ptr addrspace(3) %93, align 4, !dbg !35
  %222 = load float, ptr addrspace(3) %97, align 4, !dbg !35
  %223 = load float, ptr addrspace(3) %101, align 4, !dbg !35
  %224 = load float, ptr addrspace(3) %105, align 4, !dbg !35
  %225 = lshr i64 %183, 60, !dbg !36
  %226 = and i64 %225, 8, !dbg !36
  %227 = insertelement <2 x i64> poison, i64 %181, i64 0, !dbg !37
  %228 = insertelement <2 x i64> %227, i64 %182, i64 1, !dbg !37
  %229 = lshr <2 x i64> %228, splat (i64 60), !dbg !37
  %230 = and <2 x i64> %229, splat (i64 8), !dbg !37
  %231 = add <2 x i64> %230, %228, !dbg !37
  %232 = shl <2 x i64> %231, <i64 6, i64 3>, !dbg !38
  %233 = lshr exact i64 %indvars.iv, 3, !dbg !39
  %234 = and i64 %233, 512, !dbg !39
  %235 = add i64 %183, %234, !dbg !36
  %236 = add i64 %235, %226, !dbg !40
  %237 = extractelement <2 x i64> %232, i64 0, !dbg !41
  %238 = add i64 %236, %237, !dbg !41
  %239 = extractelement <2 x i64> %232, i64 1, !dbg !42
  %240 = add i64 %238, %239, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %241 = insertelement <1 x i64> poison, i64 %240, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %106, <1 x i64> %241, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %242 = load i64, ptr addrspace(3) %107, align 16, !dbg !43
  %243 = load i64, ptr addrspace(3) %108, align 16, !dbg !43
  %244 = load i64, ptr addrspace(3) %109, align 16, !dbg !43
  %245 = load i64, ptr addrspace(3) %110, align 16, !dbg !43
  %246 = load i64, ptr addrspace(3) %111, align 16, !dbg !43
  %247 = load i64, ptr addrspace(3) %112, align 16, !dbg !43
  %248 = load i64, ptr addrspace(3) %113, align 16, !dbg !43
  %249 = load i64, ptr addrspace(3) %114, align 16, !dbg !43
  %gep44 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %242, !dbg !43
  %gep46 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %243, !dbg !43
  %gep48 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %244, !dbg !43
  %gep50 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %245, !dbg !43
  %gep52 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %246, !dbg !43
  %gep54 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %247, !dbg !43
  %gep56 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %248, !dbg !43
  %gep58 = getelementptr float, ptr addrspace(1) %invariant.gep43, i64 %249, !dbg !43
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep44, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep46, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep48, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep50, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep52, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep54, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep56, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep58, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %258 = insertelement <8 x i32> poison, i32 %187, i64 0, !dbg !32
  %259 = insertelement <8 x i32> %258, i32 %188, i64 1, !dbg !32
  %260 = insertelement <8 x i32> %259, i32 %189, i64 2, !dbg !32
  %261 = insertelement <8 x i32> %260, i32 %190, i64 3, !dbg !32
  %262 = insertelement <8 x i32> %261, i32 %191, i64 4, !dbg !32
  %263 = insertelement <8 x i32> %262, i32 %192, i64 5, !dbg !32
  %264 = insertelement <8 x i32> %263, i32 %193, i64 6, !dbg !32
  %265 = insertelement <8 x i32> %264, i32 %194, i64 7, !dbg !32
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !32
  %267 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !44
  %268 = insertelement <8 x i32> %267, i32 %251, i64 1, !dbg !44
  %269 = insertelement <8 x i32> %268, i32 %252, i64 2, !dbg !44
  %270 = insertelement <8 x i32> %269, i32 %253, i64 3, !dbg !44
  %271 = insertelement <8 x i32> %270, i32 %254, i64 4, !dbg !44
  %272 = insertelement <8 x i32> %271, i32 %255, i64 5, !dbg !44
  %273 = insertelement <8 x i32> %272, i32 %256, i64 6, !dbg !44
  %274 = insertelement <8 x i32> %273, i32 %257, i64 7, !dbg !44
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !44
  %276 = fadd <8 x float> %266, %275, !dbg !45
  %277 = insertelement <8 x float> poison, float %217, i64 0, !dbg !46
  %278 = insertelement <8 x float> %277, float %218, i64 1, !dbg !46
  %279 = insertelement <8 x float> %278, float %219, i64 2, !dbg !46
  %280 = insertelement <8 x float> %279, float %220, i64 3, !dbg !46
  %281 = insertelement <8 x float> %280, float %221, i64 4, !dbg !46
  %282 = insertelement <8 x float> %281, float %222, i64 5, !dbg !46
  %283 = insertelement <8 x float> %282, float %223, i64 6, !dbg !46
  %284 = insertelement <8 x float> %283, float %224, i64 7, !dbg !46
  %285 = fadd <8 x float> %284, %276, !dbg !46
  %286 = icmp eq i64 %indvars.iv, 0, !dbg !47
  br i1 %286, label %._crit_edge, label %287, !dbg !48

287:                                              ; preds = %154
  %288 = fsub <8 x float> %285, %171, !dbg !52
  %289 = extractelement <8 x float> %288, i64 0, !dbg !52
  %290 = fsub <8 x float> %285, %171, !dbg !52
  %291 = extractelement <8 x float> %290, i64 1, !dbg !52
  %292 = fsub <8 x float> %285, %171, !dbg !52
  %293 = extractelement <8 x float> %292, i64 2, !dbg !52
  %294 = fsub <8 x float> %285, %171, !dbg !52
  %295 = extractelement <8 x float> %294, i64 3, !dbg !52
  %296 = fsub <8 x float> %285, %171, !dbg !52
  %297 = extractelement <8 x float> %296, i64 4, !dbg !52
  %298 = fsub <8 x float> %285, %171, !dbg !52
  %299 = extractelement <8 x float> %298, i64 5, !dbg !52
  %300 = fsub <8 x float> %285, %171, !dbg !52
  %301 = extractelement <8 x float> %300, i64 6, !dbg !52
  %302 = fsub <8 x float> %285, %171, !dbg !52
  %303 = extractelement <8 x float> %302, i64 7, !dbg !52
  %304 = fadd float %155, 1.000000e+00, !dbg !53
  %305 = fadd float %156, 1.000000e+00, !dbg !53
  %306 = fadd float %157, 1.000000e+00, !dbg !53
  %307 = fadd float %158, 1.000000e+00, !dbg !53
  %308 = fadd float %159, 1.000000e+00, !dbg !53
  %309 = fadd float %160, 1.000000e+00, !dbg !53
  %310 = fadd float %161, 1.000000e+00, !dbg !53
  %311 = fadd float %162, 1.000000e+00, !dbg !53
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %304) #3, !dbg !54
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %305) #3, !dbg !54
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %306) #3, !dbg !54
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %307) #3, !dbg !54
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %308) #3, !dbg !54
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %309) #3, !dbg !54
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %310) #3, !dbg !54
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %311) #3, !dbg !54
  %320 = insertelement <8 x float> poison, float %312, i64 0, !dbg !55
  %321 = insertelement <8 x float> %320, float %313, i64 1, !dbg !55
  %322 = insertelement <8 x float> %321, float %314, i64 2, !dbg !55
  %323 = insertelement <8 x float> %322, float %315, i64 3, !dbg !55
  %324 = insertelement <8 x float> %323, float %316, i64 4, !dbg !55
  %325 = insertelement <8 x float> %324, float %317, i64 5, !dbg !55
  %326 = insertelement <8 x float> %325, float %318, i64 6, !dbg !55
  %327 = insertelement <8 x float> %326, float %319, i64 7, !dbg !55
  %328 = fadd <8 x float> %171, %327, !dbg !55
  %329 = fsub <8 x float> %285, %328, !dbg !56
  %330 = fsub <8 x float> %285, %328, !dbg !56
  %331 = fsub <8 x float> %285, %328, !dbg !56
  %332 = fsub <8 x float> %285, %328, !dbg !56
  %333 = fsub <8 x float> %285, %328, !dbg !56
  %334 = fsub <8 x float> %285, %328, !dbg !56
  %335 = fsub <8 x float> %285, %328, !dbg !56
  %336 = fsub <8 x float> %285, %328, !dbg !56
  %337 = fmul <8 x float> %288, %329, !dbg !57
  %338 = extractelement <8 x float> %337, i64 0, !dbg !57
  %339 = fmul <8 x float> %290, %330, !dbg !57
  %340 = extractelement <8 x float> %339, i64 1, !dbg !57
  %341 = fmul <8 x float> %292, %331, !dbg !57
  %342 = extractelement <8 x float> %341, i64 2, !dbg !57
  %343 = fmul <8 x float> %294, %332, !dbg !57
  %344 = extractelement <8 x float> %343, i64 3, !dbg !57
  %345 = fmul <8 x float> %296, %333, !dbg !57
  %346 = extractelement <8 x float> %345, i64 4, !dbg !57
  %347 = fmul <8 x float> %298, %334, !dbg !57
  %348 = extractelement <8 x float> %347, i64 5, !dbg !57
  %349 = fmul <8 x float> %300, %335, !dbg !57
  %350 = extractelement <8 x float> %349, i64 6, !dbg !57
  %351 = fmul <8 x float> %302, %336, !dbg !57
  %352 = extractelement <8 x float> %351, i64 7, !dbg !57
  %353 = fadd float %163, %338, !dbg !58
  %354 = fadd float %164, %340, !dbg !58
  %355 = fadd float %165, %342, !dbg !58
  %356 = fadd float %166, %344, !dbg !58
  %357 = fadd float %167, %346, !dbg !58
  %358 = fadd float %168, %348, !dbg !58
  %359 = fadd float %169, %350, !dbg !58
  %360 = fadd float %170, %352, !dbg !58
  br label %._crit_edge, !dbg !48

._crit_edge:                                      ; preds = %154, %287
  %361 = phi float [ %353, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %362 = phi float [ %354, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %363 = phi float [ %355, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %364 = phi float [ %356, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %365 = phi float [ %357, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %366 = phi float [ %358, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %367 = phi float [ %359, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %368 = phi float [ %360, %287 ], [ 0.000000e+00, %154 ], !dbg !51
  %369 = phi float [ %304, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %370 = phi float [ %305, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %371 = phi float [ %306, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %372 = phi float [ %307, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %373 = phi float [ %308, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %374 = phi float [ %309, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %375 = phi float [ %310, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %376 = phi float [ %311, %287 ], [ 1.000000e+00, %154 ], !dbg !51
  %377 = phi <8 x float> [ %328, %287 ], [ %285, %154 ]
  %378 = select <8 x i1> %153, <8 x float> %377, <8 x float> %171, !dbg !22
  %379 = select i1 %19, float %361, float %163, !dbg !59
  %380 = select i1 %19, float %362, float %164, !dbg !59
  %381 = select i1 %19, float %363, float %165, !dbg !59
  %382 = select i1 %19, float %364, float %166, !dbg !59
  %383 = select i1 %19, float %365, float %167, !dbg !59
  %384 = select i1 %19, float %366, float %168, !dbg !59
  %385 = select i1 %19, float %367, float %169, !dbg !59
  %386 = select i1 %19, float %368, float %170, !dbg !59
  %387 = select i1 %19, float %369, float %155, !dbg !60
  %388 = select i1 %19, float %370, float %156, !dbg !60
  %389 = select i1 %19, float %371, float %157, !dbg !60
  %390 = select i1 %19, float %372, float %158, !dbg !60
  %391 = select i1 %19, float %373, float %159, !dbg !60
  %392 = select i1 %19, float %374, float %160, !dbg !60
  %393 = select i1 %19, float %375, float %161, !dbg !60
  %394 = select i1 %19, float %376, float %162, !dbg !60
  %395 = getelementptr float, ptr addrspace(1) %4, i64 %195, !dbg !61
  %396 = getelementptr float, ptr addrspace(1) %4, i64 %196, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %397 = extractelement <8 x float> %285, i64 0, !dbg !62
  %398 = bitcast float %397 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %398, i1 true) #3, !dbg !62
  %399 = extractelement <8 x float> %285, i64 1, !dbg !62
  %400 = bitcast float %399 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %400, i1 true) #3, !dbg !62
  %401 = extractelement <8 x float> %285, i64 2, !dbg !62
  %402 = bitcast float %401 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %402, i1 true) #3, !dbg !62
  %403 = extractelement <8 x float> %285, i64 3, !dbg !62
  %404 = bitcast float %403 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %404, i1 true) #3, !dbg !62
  %405 = extractelement <8 x float> %285, i64 4, !dbg !62
  %406 = bitcast float %405 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %406, i1 true) #3, !dbg !62
  %407 = extractelement <8 x float> %285, i64 5, !dbg !62
  %408 = bitcast float %407 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %408, i1 true) #3, !dbg !62
  %409 = extractelement <8 x float> %285, i64 6, !dbg !62
  %410 = bitcast float %409 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %410, i1 true) #3, !dbg !62
  %411 = extractelement <8 x float> %285, i64 7, !dbg !62
  %412 = bitcast float %411 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %412, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %413 = load <4 x i32>, ptr addrspace(3) %145, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %140, align 16, !dbg !62
  %.extract34 = load i32, ptr addrspace(3) %149, align 4, !dbg !62
  %.extract35 = load i32, ptr addrspace(3) %150, align 8, !dbg !62
  %.extract36 = load i32, ptr addrspace(3) %151, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %395, i1 %20) #3, !dbg !62
  %.extract37 = extractelement <4 x i32> %413, i64 0, !dbg !62
  %.extract38 = extractelement <4 x i32> %413, i64 1, !dbg !62
  %.extract39 = extractelement <4 x i32> %413, i64 2, !dbg !62
  %.extract40 = extractelement <4 x i32> %413, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %396, i1 %21) #3, !dbg !62
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !21
  %414 = icmp samesign ult i64 %indvars.iv, 7680, !dbg !21
  br i1 %414, label %154, label %415, !dbg !21

415:                                              ; preds = %._crit_edge
  %416 = lshr i32 %13, 5, !dbg !12
  %417 = and i32 %13, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %418 = extractelement <8 x float> %378, i64 0, !dbg !65
  %419 = extractelement <8 x float> %378, i64 1, !dbg !65
  %420 = fsub float %419, %418, !dbg !65
  %421 = fadd float %387, %388, !dbg !67
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !68
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float %421) #3, !dbg !69
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !70
  %425 = fmul float %420, %424, !dbg !71
  %426 = fadd float %418, %425, !dbg !72
  %427 = fadd float %379, %380, !dbg !73
  %428 = fmul float %420, %420, !dbg !74
  %429 = fmul float %428, %387, !dbg !75
  %430 = fmul float %429, %424, !dbg !76
  %431 = fadd float %427, %430, !dbg !77
  %432 = extractelement <8 x float> %378, i64 2, !dbg !65
  %433 = fsub float %432, %426, !dbg !65
  %434 = fadd float %389, %421, !dbg !67
  %435 = fcmp oeq float %434, 0.000000e+00, !dbg !68
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %434) #3, !dbg !69
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !70
  %438 = fmul float %437, %433, !dbg !71
  %439 = fadd float %426, %438, !dbg !72
  %440 = fadd float %381, %431, !dbg !73
  %441 = fmul float %433, %433, !dbg !74
  %442 = fmul float %421, %441, !dbg !75
  %443 = fmul float %437, %442, !dbg !76
  %444 = fadd float %440, %443, !dbg !77
  %445 = extractelement <8 x float> %378, i64 3, !dbg !65
  %446 = fsub float %445, %439, !dbg !65
  %447 = fadd float %390, %434, !dbg !67
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !68
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float %447) #3, !dbg !69
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !70
  %451 = fmul float %450, %446, !dbg !71
  %452 = fadd float %439, %451, !dbg !72
  %453 = fadd float %382, %444, !dbg !73
  %454 = fmul float %446, %446, !dbg !74
  %455 = fmul float %434, %454, !dbg !75
  %456 = fmul float %450, %455, !dbg !76
  %457 = fadd float %453, %456, !dbg !77
  %458 = extractelement <8 x float> %378, i64 4, !dbg !65
  %459 = fsub float %458, %452, !dbg !65
  %460 = fadd float %391, %447, !dbg !67
  %461 = fcmp oeq float %460, 0.000000e+00, !dbg !68
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %460) #3, !dbg !69
  %463 = select i1 %461, float 0.000000e+00, float %462, !dbg !70
  %464 = fmul float %463, %459, !dbg !71
  %465 = fadd float %452, %464, !dbg !72
  %466 = fadd float %383, %457, !dbg !73
  %467 = fmul float %459, %459, !dbg !74
  %468 = fmul float %447, %467, !dbg !75
  %469 = fmul float %463, %468, !dbg !76
  %470 = fadd float %466, %469, !dbg !77
  %471 = extractelement <8 x float> %378, i64 5, !dbg !65
  %472 = fsub float %471, %465, !dbg !65
  %473 = fadd float %392, %460, !dbg !67
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !68
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float %473) #3, !dbg !69
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !70
  %477 = fmul float %476, %472, !dbg !71
  %478 = fadd float %465, %477, !dbg !72
  %479 = fadd float %384, %470, !dbg !73
  %480 = fmul float %472, %472, !dbg !74
  %481 = fmul float %460, %480, !dbg !75
  %482 = fmul float %476, %481, !dbg !76
  %483 = fadd float %479, %482, !dbg !77
  %484 = extractelement <8 x float> %378, i64 6, !dbg !65
  %485 = fsub float %484, %478, !dbg !65
  %486 = fadd float %393, %473, !dbg !67
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !68
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %486) #3, !dbg !69
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !70
  %490 = fmul float %489, %485, !dbg !71
  %491 = fadd float %478, %490, !dbg !72
  %492 = fadd float %385, %483, !dbg !73
  %493 = fmul float %485, %485, !dbg !74
  %494 = fmul float %473, %493, !dbg !75
  %495 = fmul float %489, %494, !dbg !76
  %496 = fadd float %492, %495, !dbg !77
  %497 = extractelement <8 x float> %378, i64 7, !dbg !65
  %498 = fsub float %497, %491, !dbg !65
  %499 = fadd float %394, %486, !dbg !67
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !68
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %499) #3, !dbg !69
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !70
  %503 = fmul float %502, %498, !dbg !71
  %504 = fadd float %491, %503, !dbg !72
  %505 = fadd float %386, %496, !dbg !73
  %506 = fmul float %498, %498, !dbg !74
  %507 = fmul float %486, %506, !dbg !75
  %508 = fmul float %502, %507, !dbg !76
  %509 = fadd float %505, %508, !dbg !77
  %510 = bitcast float %504 to i32, !dbg !63
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 16, i32 31), !dbg !63
  %512 = bitcast i32 %511 to float, !dbg !63
  %513 = bitcast float %509 to i32, !dbg !63
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 16, i32 31), !dbg !63
  %515 = bitcast i32 %514 to float, !dbg !63
  %516 = bitcast float %499 to i32, !dbg !63
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 16, i32 31), !dbg !63
  %518 = bitcast i32 %517 to float, !dbg !63
  %519 = fsub float %512, %504, !dbg !65
  %520 = fadd float %499, %518, !dbg !67
  %521 = fcmp oeq float %520, 0.000000e+00, !dbg !68
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %518, float %520) #3, !dbg !69
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !70
  %524 = fmul float %523, %519, !dbg !71
  %525 = fadd float %504, %524, !dbg !72
  %526 = fadd float %509, %515, !dbg !73
  %527 = fmul float %519, %519, !dbg !74
  %528 = fmul float %499, %527, !dbg !75
  %529 = fmul float %523, %528, !dbg !76
  %530 = fadd float %526, %529, !dbg !77
  %531 = bitcast float %525 to i32, !dbg !63
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 8, i32 31), !dbg !63
  %533 = bitcast i32 %532 to float, !dbg !63
  %534 = bitcast float %530 to i32, !dbg !63
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 8, i32 31), !dbg !63
  %536 = bitcast i32 %535 to float, !dbg !63
  %537 = bitcast float %520 to i32, !dbg !63
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 8, i32 31), !dbg !63
  %539 = bitcast i32 %538 to float, !dbg !63
  %540 = fsub float %533, %525, !dbg !65
  %541 = fadd float %520, %539, !dbg !67
  %542 = fcmp oeq float %541, 0.000000e+00, !dbg !68
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %539, float %541) #3, !dbg !69
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !70
  %545 = fmul float %544, %540, !dbg !71
  %546 = fadd float %525, %545, !dbg !72
  %547 = fadd float %530, %536, !dbg !73
  %548 = fmul float %540, %540, !dbg !74
  %549 = fmul float %520, %548, !dbg !75
  %550 = fmul float %544, %549, !dbg !76
  %551 = fadd float %547, %550, !dbg !77
  %552 = lshr i32 %417, 3, !dbg !63
  %553 = icmp samesign ult i32 %417, 8, !dbg !63
  %554 = and i32 %416, 15, !dbg !63
  %555 = shl nuw nsw i32 %14, 4, !dbg !63
  %556 = or disjoint i32 %555, %554, !dbg !63
  %557 = getelementptr float, ptr addrspace(3) @global_smem, i32 %556, !dbg !63
  %558 = bitcast float %546 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %557, <1 x i32> %558, i1 %553) #3, !dbg !63
  %559 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %556, !dbg !63
  %560 = bitcast float %551 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %560, i1 %553) #3, !dbg !63
  %561 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %556, !dbg !63
  %562 = bitcast float %541 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 %553) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %563 = icmp slt i32 %13, 128, !dbg !63
  %564 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !63
  %565 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %564, i1 %563) #3, !dbg !63
  %566 = bitcast i32 %565 to float, !dbg !63
  %567 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %13, !dbg !63
  %568 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %567, i1 %563) #3, !dbg !63
  %569 = bitcast i32 %568 to float, !dbg !63
  %570 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %13, !dbg !63
  %571 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %570, i1 %563) #3, !dbg !63
  %572 = bitcast i32 %571 to float, !dbg !63
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 8, i32 31), !dbg !63
  %574 = bitcast i32 %573 to float, !dbg !63
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 8, i32 31), !dbg !63
  %576 = bitcast i32 %575 to float, !dbg !63
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 8, i32 31), !dbg !63
  %578 = bitcast i32 %577 to float, !dbg !63
  %579 = fsub float %574, %566, !dbg !65
  %580 = fadd float %572, %578, !dbg !67
  %581 = fcmp oeq float %580, 0.000000e+00, !dbg !68
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %578, float %580) #3, !dbg !69
  %583 = select i1 %581, float 0.000000e+00, float %582, !dbg !70
  %584 = fmul float %579, %583, !dbg !71
  %585 = fadd float %584, %566, !dbg !72
  %586 = fadd float %569, %576, !dbg !73
  %587 = fmul float %579, %579, !dbg !74
  %588 = fmul float %587, %572, !dbg !75
  %589 = fmul float %588, %583, !dbg !76
  %590 = fadd float %586, %589, !dbg !77
  %591 = bitcast float %585 to i32, !dbg !63
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 4, i32 31), !dbg !63
  %593 = bitcast i32 %592 to float, !dbg !63
  %594 = bitcast float %590 to i32, !dbg !63
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 4, i32 31), !dbg !63
  %596 = bitcast i32 %595 to float, !dbg !63
  %597 = bitcast float %580 to i32, !dbg !63
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 4, i32 31), !dbg !63
  %599 = bitcast i32 %598 to float, !dbg !63
  %600 = fsub float %593, %585, !dbg !65
  %601 = fadd float %580, %599, !dbg !67
  %602 = fcmp oeq float %601, 0.000000e+00, !dbg !68
  %603 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %599, float %601) #3, !dbg !69
  %604 = select i1 %602, float 0.000000e+00, float %603, !dbg !70
  %605 = fmul float %600, %604, !dbg !71
  %606 = fadd float %585, %605, !dbg !72
  %607 = fadd float %590, %596, !dbg !73
  %608 = fmul float %600, %600, !dbg !74
  %609 = fmul float %580, %608, !dbg !75
  %610 = fmul float %604, %609, !dbg !76
  %611 = fadd float %607, %610, !dbg !77
  %612 = bitcast float %606 to i32, !dbg !63
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 2, i32 31), !dbg !63
  %614 = bitcast i32 %613 to float, !dbg !63
  %615 = bitcast float %611 to i32, !dbg !63
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 2, i32 31), !dbg !63
  %617 = bitcast i32 %616 to float, !dbg !63
  %618 = bitcast float %601 to i32, !dbg !63
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 2, i32 31), !dbg !63
  %620 = bitcast i32 %619 to float, !dbg !63
  %621 = fsub float %614, %606, !dbg !65
  %622 = fadd float %601, %620, !dbg !67
  %623 = fcmp oeq float %622, 0.000000e+00, !dbg !68
  %624 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %620, float %622) #3, !dbg !69
  %625 = select i1 %623, float 0.000000e+00, float %624, !dbg !70
  %626 = fmul float %621, %625, !dbg !71
  %627 = fadd float %606, %626, !dbg !72
  %628 = fadd float %611, %617, !dbg !73
  %629 = fmul float %621, %621, !dbg !74
  %630 = fmul float %601, %629, !dbg !75
  %631 = fmul float %625, %630, !dbg !76
  %632 = fadd float %628, %631, !dbg !77
  %633 = bitcast float %627 to i32, !dbg !63
  %634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 1, i32 31), !dbg !63
  %635 = bitcast i32 %634 to float, !dbg !63
  %636 = bitcast float %632 to i32, !dbg !63
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 1, i32 31), !dbg !63
  %638 = bitcast i32 %637 to float, !dbg !63
  %639 = bitcast float %622 to i32, !dbg !63
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !63
  %641 = bitcast i32 %640 to float, !dbg !63
  %642 = fsub float %635, %627, !dbg !65
  %643 = fadd float %622, %641, !dbg !67
  %644 = fcmp oeq float %643, 0.000000e+00, !dbg !68
  %645 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %641, float %643) #3, !dbg !69
  %646 = select i1 %644, float 0.000000e+00, float %645, !dbg !70
  %647 = fmul float %642, %646, !dbg !71
  %648 = fadd float %627, %647, !dbg !72
  %649 = fadd float %632, %638, !dbg !73
  %650 = fmul float %642, %642, !dbg !74
  %651 = fmul float %622, %650, !dbg !75
  %652 = fmul float %646, %651, !dbg !76
  %653 = fadd float %649, %652, !dbg !77
  %654 = icmp eq i32 %41, 0, !dbg !63
  %655 = and i1 %563, %654, !dbg !63
  %656 = bitcast float %648 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %656, i1 %655) #3, !dbg !63
  %657 = bitcast float %653 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %657, i1 %655) #3, !dbg !63
  %658 = bitcast float %643 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %658, i1 %655) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %659 = getelementptr float, ptr addrspace(3) @global_smem, i32 %555, !dbg !63
  %660 = load i32, ptr addrspace(3) %659, align 16, !dbg !63
  %661 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %555, !dbg !63
  %662 = load i32, ptr addrspace(3) %661, align 16, !dbg !63
  %663 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %555, !dbg !63
  %664 = load i32, ptr addrspace(3) %663, align 16, !dbg !63
  %665 = sext i32 %16 to i64, !dbg !78
  %666 = getelementptr float, ptr addrspace(1) %5, i64 %665, !dbg !78
  %667 = shl nuw nsw i32 %554, 2, !dbg !79
  %668 = or disjoint i32 %667, %552, !dbg !79
  %669 = icmp eq i32 %668, 0, !dbg !79
  %670 = and i1 %669, %19, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %660, ptr addrspace(1) %666, i1 %670) #3, !dbg !79
  %671 = getelementptr float, ptr addrspace(1) %6, i64 %665, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %662, ptr addrspace(1) %671, i1 %670) #3, !dbg !81
  %672 = getelementptr float, ptr addrspace(1) %7, i64 %665, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %664, ptr addrspace(1) %672, i1 %670) #3, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnhk2r467eoeoptdlq6oaxcbntq3dkpsvrynoq6gnxejh5fsqdg.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 43, column: 45, scope: !7)
!19 = !DILocation(line: 54, column: 76, scope: !7)
!20 = !DILocation(line: 54, column: 71, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 61, column: 62, scope: !7)
!23 = !DILocation(line: 32, column: 27, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 37, column: 23, scope: !7)
!26 = !DILocation(line: 39, column: 34, scope: !7)
!27 = !DILocation(line: 39, column: 39, scope: !7)
!28 = !DILocation(line: 40, column: 39, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 42, column: 40, scope: !7)
!31 = !DILocation(line: 42, column: 35, scope: !7)
!32 = !DILocation(line: 42, column: 47, scope: !7)
!33 = !DILocation(line: 43, column: 40, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 43, column: 50, scope: !7)
!36 = !DILocation(line: 53, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 54, column: 55, scope: !7)
!39 = !DILocation(line: 54, column: 66, scope: !7)
!40 = !DILocation(line: 54, column: 43, scope: !7)
!41 = !DILocation(line: 54, column: 52, scope: !7)
!42 = !DILocation(line: 54, column: 62, scope: !7)
!43 = !DILocation(line: 54, column: 35, scope: !7)
!44 = !DILocation(line: 54, column: 81, scope: !7)
!45 = !DILocation(line: 55, column: 24, scope: !7)
!46 = !DILocation(line: 56, column: 24, scope: !7)
!47 = !DILocation(line: 59, column: 66, scope: !7)
!48 = !DILocation(line: 178, column: 7, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 59, column: 55, scope: !7)
!52 = !DILocation(line: 183, column: 24, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 184, column: 30, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 185, column: 34, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 185, column: 26, scope: !49, inlinedAt: !51)
!56 = !DILocation(line: 186, column: 39, scope: !49, inlinedAt: !51)
!57 = !DILocation(line: 186, column: 31, scope: !49, inlinedAt: !51)
!58 = !DILocation(line: 186, column: 22, scope: !49, inlinedAt: !51)
!59 = !DILocation(line: 62, column: 58, scope: !7)
!60 = !DILocation(line: 63, column: 66, scope: !7)
!61 = !DILocation(line: 64, column: 29, scope: !7)
!62 = !DILocation(line: 64, column: 51, scope: !7)
!63 = !DILocation(line: 204, column: 46, scope: !49, inlinedAt: !64)
!64 = !DILocation(line: 66, column: 44, scope: !7)
!65 = !DILocation(line: 192, column: 21, scope: !66, inlinedAt: !64)
!66 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!67 = !DILocation(line: 193, column: 28, scope: !66, inlinedAt: !64)
!68 = !DILocation(line: 194, column: 39, scope: !66, inlinedAt: !64)
!69 = !DILocation(line: 194, column: 60, scope: !66, inlinedAt: !64)
!70 = !DILocation(line: 194, column: 49, scope: !66, inlinedAt: !64)
!71 = !DILocation(line: 196, column: 25, scope: !66, inlinedAt: !64)
!72 = !DILocation(line: 196, column: 17, scope: !66, inlinedAt: !64)
!73 = !DILocation(line: 197, column: 15, scope: !66, inlinedAt: !64)
!74 = !DILocation(line: 197, column: 30, scope: !66, inlinedAt: !64)
!75 = !DILocation(line: 197, column: 38, scope: !66, inlinedAt: !64)
!76 = !DILocation(line: 197, column: 49, scope: !66, inlinedAt: !64)
!77 = !DILocation(line: 197, column: 22, scope: !66, inlinedAt: !64)
!78 = !DILocation(line: 71, column: 25, scope: !7)
!79 = !DILocation(line: 71, column: 37, scope: !7)
!80 = !DILocation(line: 72, column: 25, scope: !7)
!81 = !DILocation(line: 72, column: 37, scope: !7)
!82 = !DILocation(line: 73, column: 25, scope: !7)
!83 = !DILocation(line: 73, column: 37, scope: !7)
!84 = !DILocation(line: 73, column: 4, scope: !7)
