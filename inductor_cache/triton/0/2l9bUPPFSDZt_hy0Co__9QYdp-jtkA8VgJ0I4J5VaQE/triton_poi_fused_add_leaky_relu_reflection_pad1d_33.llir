; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_leaky_relu_reflection_pad1d_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 4120, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 1030, !dbg !15
  %17 = mul i32 %16, 1030, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 1030, !dbg !16
  %19 = add nsw i32 %.decomposed, -3, !dbg !17
  %20 = add nsw i32 %18, -3, !dbg !17
  %21 = tail call i32 @llvm.abs.i32(i32 %19, i1 true), !dbg !18
  %22 = tail call i32 @llvm.abs.i32(i32 %20, i1 true), !dbg !18
  %23 = add nsw i32 %21, -1023, !dbg !19
  %24 = add nsw i32 %22, -1023, !dbg !19
  %25 = tail call i32 @llvm.abs.i32(i32 %23, i1 true), !dbg !20
  %26 = tail call i32 @llvm.abs.i32(i32 %24, i1 true), !dbg !20
  %27 = shl nsw i32 %16, 10, !dbg !21
  %reass.sub = or disjoint i32 %27, 1023, !dbg !22
  %28 = sub nuw i32 %reass.sub, %25, !dbg !22
  %reass.sub4 = sub nsw i32 %27, %26, !dbg !22
  %29 = add nsw i32 %reass.sub4, 1023, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr i1, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr i1, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %15) #1, !dbg !24
  %35 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %15) #1, !dbg !24
  %.not = icmp eq i8 %34, 0, !dbg !24
  %.not2 = icmp eq i8 %35, 0, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %15) #1, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #1, !dbg !26
  %40 = sext i32 %16 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #1, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #1, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #1, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #1, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #1, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #1, !dbg !32
  %51 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %52 = insertelement <2 x i32> %51, i32 %46, i64 1, !dbg !26
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !26
  %54 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !28
  %55 = insertelement <2 x i32> %54, i32 %49, i64 1, !dbg !28
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !28
  %57 = fadd <2 x float> %53, %56, !dbg !33
  %58 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %59 = insertelement <2 x i32> %58, i32 %47, i64 1, !dbg !26
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !26
  %61 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !28
  %62 = insertelement <2 x i32> %61, i32 %50, i64 1, !dbg !28
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !28
  %64 = fadd <2 x float> %60, %63, !dbg !33
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %65 = fadd <2 x float> %57, %shift, !dbg !34
  %66 = extractelement <2 x float> %65, i64 0, !dbg !34
  %shift5 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %67 = fadd <2 x float> %64, %shift5, !dbg !34
  %68 = extractelement <2 x float> %67, i64 0, !dbg !34
  %69 = fmul float %66, 0x3FC99999A0000000, !dbg !35
  %70 = fmul float %68, 0x3FC99999A0000000, !dbg !35
  %71 = select i1 %.not, float %69, float %66, !dbg !36
  %72 = select i1 %.not2, float %70, float %68, !dbg !36
  %73 = sext i32 %13 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !37
  %75 = bitcast float %71 to i32, !dbg !38
  %76 = bitcast float %72 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %74, i1 %15) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chd7dn3w6cjv5qp4vlnmo7ogzhyv3733ey6ylhbsmkcu2pfcdxio.py", directory: "inductor_cache/hd")
!4 = !{ptr @triton_poi_fused_add_leaky_relu_reflection_pad1d_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_leaky_relu_reflection_pad1d_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_leaky_relu_reflection_pad1d_33", linkageName: "triton_poi_fused_add_leaky_relu_reflection_pad1d_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 84, scope: !7)
!18 = !DILocation(line: 27, column: 77, scope: !7)
!19 = !DILocation(line: 27, column: 65, scope: !7)
!20 = !DILocation(line: 27, column: 55, scope: !7)
!21 = !DILocation(line: 27, column: 97, scope: !7)
!22 = !DILocation(line: 27, column: 92, scope: !7)
!23 = !DILocation(line: 27, column: 30, scope: !7)
!24 = !DILocation(line: 27, column: 102, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 102, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 102, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 33, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
