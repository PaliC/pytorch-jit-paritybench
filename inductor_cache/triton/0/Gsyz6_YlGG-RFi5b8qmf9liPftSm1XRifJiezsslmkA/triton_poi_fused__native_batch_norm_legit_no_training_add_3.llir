; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = icmp slt i32 %17, 115200, !dbg !14
  %20 = icmp slt i32 %18, 115200, !dbg !14
  %21 = sdiv i32 %17, 900, !dbg !15
  %22 = sdiv i32 %18, 900, !dbg !15
  %23 = srem i32 %21, 32, !dbg !16
  %24 = srem i32 %22, 32, !dbg !16
  %25 = sext i32 %17 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %18 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #3, !dbg !18
  %31 = sext i32 %23 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = sext i32 %24 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %20) #3, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %20) #3, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %20) #3, !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %20) #3, !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %19) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #3, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #3, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #3, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #3, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !27
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %19) #3, !dbg !28
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %20) #3, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %20) #3, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %20) #3, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %20) #3, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %20) #3, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %19) #3, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %19) #3, !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %19) #3, !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %19) #3, !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #3, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #3, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #3, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #3, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %19) #3, !dbg !34
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %19) #3, !dbg !34
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %19) #3, !dbg !34
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %19) #3, !dbg !34
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #3, !dbg !34
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #3, !dbg !34
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #3, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %20) #3, !dbg !34
  %123 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %124 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %125 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %126 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %127 = fadd float %54, 0x3EE4F8B580000000, !dbg !35
  %128 = fadd float %56, 0x3EE4F8B580000000, !dbg !35
  %129 = fadd float %58, 0x3EE4F8B580000000, !dbg !35
  %130 = fadd float %60, 0x3EE4F8B580000000, !dbg !35
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %131, 0, !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %132, 0, !dbg !36
  br i1 %.not.i, label %138, label %133, !dbg !36

133:                                              ; preds = %11
  br i1 %.not1.i, label %136, label %134, !dbg !36

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

138:                                              ; preds = %11
  br i1 %.not1.i, label %141, label %139, !dbg !36

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !36
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %143, 0, !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %144, 0, !dbg !36
  br i1 %.not.i1, label %150, label %145, !dbg !36

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %153, label %151, !dbg !36

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %146, %148, %151, %153
  %.0.i3 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !36
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %155, 0, !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %156, 0, !dbg !36
  br i1 %.not.i6, label %162, label %157, !dbg !36

157:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %160, label %158, !dbg !36

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

162:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %165, label %163, !dbg !36

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %158, %160, %163, %165
  %.0.i8 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !36
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %167, 0, !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %168, 0, !dbg !36
  br i1 %.not.i11, label %174, label %169, !dbg !36

169:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %172, label %170, !dbg !36

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

174:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %177, label %175, !dbg !36

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %170, %172, %175, %177
  %.0.i13 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !36
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %179, 0, !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %180, 0, !dbg !36
  br i1 %.not.i16, label %186, label %181, !dbg !36

181:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %184, label %182, !dbg !36

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

186:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %189, label %187, !dbg !36

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %182, %184, %187, %189
  %.0.i18 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !36
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %191, 0, !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %192, 0, !dbg !36
  br i1 %.not.i21, label %198, label %193, !dbg !36

193:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %196, label %194, !dbg !36

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

198:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %201, label %199, !dbg !36

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %194, %196, %199, %201
  %.0.i23 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !36
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %203, 0, !dbg !36
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %204, 0, !dbg !36
  br i1 %.not.i26, label %210, label %205, !dbg !36

205:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %208, label %206, !dbg !36

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

210:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %213, label %211, !dbg !36

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %206, %208, %211, %213
  %.0.i28 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !36
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %215, 0, !dbg !36
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %216, 0, !dbg !36
  br i1 %.not.i31, label %222, label %217, !dbg !36

217:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %220, label %218, !dbg !36

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

222:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %225, label %223, !dbg !36

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %218, %220, %223, %225
  %.0.i33 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !36
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %235 = fadd float %98, 0x3EE4F8B580000000, !dbg !38
  %236 = fadd float %100, 0x3EE4F8B580000000, !dbg !38
  %237 = fadd float %102, 0x3EE4F8B580000000, !dbg !38
  %238 = fadd float %104, 0x3EE4F8B580000000, !dbg !38
  %239 = fadd float %106, 0x3EE4F8B580000000, !dbg !38
  %240 = fadd float %108, 0x3EE4F8B580000000, !dbg !38
  %241 = fadd float %110, 0x3EE4F8B580000000, !dbg !38
  %242 = fadd float %112, 0x3EE4F8B580000000, !dbg !38
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i36 = icmp eq i32 %243, 0, !dbg !39
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i39 = icmp eq i32 %244, 0, !dbg !39
  br i1 %.not.i36, label %250, label %245, !dbg !39

245:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %248, label %246, !dbg !39

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

250:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %253, label %251, !dbg !39

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

__nv_sqrtf.exit40:                                ; preds = %246, %248, %251, %253
  %.0.i38 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !39
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i41 = icmp eq i32 %255, 0, !dbg !39
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i44 = icmp eq i32 %256, 0, !dbg !39
  br i1 %.not.i41, label %262, label %257, !dbg !39

257:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %260, label %258, !dbg !39

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

262:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %265, label %263, !dbg !39

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

__nv_sqrtf.exit45:                                ; preds = %258, %260, %263, %265
  %.0.i43 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !39
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i46 = icmp eq i32 %267, 0, !dbg !39
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i49 = icmp eq i32 %268, 0, !dbg !39
  br i1 %.not.i46, label %274, label %269, !dbg !39

269:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %272, label %270, !dbg !39

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

274:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %277, label %275, !dbg !39

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

__nv_sqrtf.exit50:                                ; preds = %270, %272, %275, %277
  %.0.i48 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !39
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i51 = icmp eq i32 %279, 0, !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i54 = icmp eq i32 %280, 0, !dbg !39
  br i1 %.not.i51, label %286, label %281, !dbg !39

281:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %284, label %282, !dbg !39

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

286:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %289, label %287, !dbg !39

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

__nv_sqrtf.exit55:                                ; preds = %282, %284, %287, %289
  %.0.i53 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !39
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i56 = icmp eq i32 %291, 0, !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i59 = icmp eq i32 %292, 0, !dbg !39
  br i1 %.not.i56, label %298, label %293, !dbg !39

293:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %296, label %294, !dbg !39

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

298:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %301, label %299, !dbg !39

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

__nv_sqrtf.exit60:                                ; preds = %294, %296, %299, %301
  %.0.i58 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !39
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i61 = icmp eq i32 %303, 0, !dbg !39
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i64 = icmp eq i32 %304, 0, !dbg !39
  br i1 %.not.i61, label %310, label %305, !dbg !39

305:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %308, label %306, !dbg !39

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

310:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %313, label %311, !dbg !39

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

__nv_sqrtf.exit65:                                ; preds = %306, %308, %311, %313
  %.0.i63 = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !39
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i66 = icmp eq i32 %315, 0, !dbg !39
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i69 = icmp eq i32 %316, 0, !dbg !39
  br i1 %.not.i66, label %322, label %317, !dbg !39

317:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %320, label %318, !dbg !39

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

322:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %325, label %323, !dbg !39

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

__nv_sqrtf.exit70:                                ; preds = %318, %320, %323, %325
  %.0.i68 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !39
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i71 = icmp eq i32 %327, 0, !dbg !39
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i74 = icmp eq i32 %328, 0, !dbg !39
  br i1 %.not.i71, label %334, label %329, !dbg !39

329:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %332, label %330, !dbg !39

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %242) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %242) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

334:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %337, label %335, !dbg !39

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %242) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %242) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

__nv_sqrtf.exit75:                                ; preds = %330, %332, %335, %337
  %.0.i73 = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !39
  %339 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %340 = bitcast i32 %339 to float, !dbg !18
  %341 = bitcast i32 %42 to float, !dbg !20
  %342 = fsub float %340, %341, !dbg !40
  %343 = fmul float %342, %234, !dbg !41
  %344 = bitcast i32 %70 to float, !dbg !24
  %345 = fmul float %343, %344, !dbg !42
  %346 = bitcast i32 %80 to float, !dbg !26
  %347 = fadd float %345, %346, !dbg !43
  %348 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !28
  %349 = bitcast i32 %348 to float, !dbg !28
  %350 = fadd float %347, %349, !dbg !44
  %351 = bitcast i32 %94 to float, !dbg !30
  %352 = fsub float %350, %351, !dbg !45
  %353 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %354 = bitcast i32 %353 to float, !dbg !18
  %355 = bitcast i32 %41 to float, !dbg !20
  %356 = fsub float %354, %355, !dbg !40
  %357 = fmul float %356, %233, !dbg !41
  %358 = bitcast i32 %69 to float, !dbg !24
  %359 = fmul float %357, %358, !dbg !42
  %360 = bitcast i32 %79 to float, !dbg !26
  %361 = fadd float %359, %360, !dbg !43
  %362 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !28
  %363 = bitcast i32 %362 to float, !dbg !28
  %364 = fadd float %361, %363, !dbg !44
  %365 = bitcast i32 %93 to float, !dbg !30
  %366 = fsub float %364, %365, !dbg !45
  %367 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %368 = bitcast i32 %367 to float, !dbg !18
  %369 = bitcast i32 %40 to float, !dbg !20
  %370 = fsub float %368, %369, !dbg !40
  %371 = fmul float %370, %232, !dbg !41
  %372 = bitcast i32 %68 to float, !dbg !24
  %373 = fmul float %371, %372, !dbg !42
  %374 = bitcast i32 %78 to float, !dbg !26
  %375 = fadd float %373, %374, !dbg !43
  %376 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !28
  %377 = bitcast i32 %376 to float, !dbg !28
  %378 = fadd float %375, %377, !dbg !44
  %379 = bitcast i32 %92 to float, !dbg !30
  %380 = fsub float %378, %379, !dbg !45
  %381 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %382 = bitcast i32 %381 to float, !dbg !18
  %383 = bitcast i32 %39 to float, !dbg !20
  %384 = fsub float %382, %383, !dbg !40
  %385 = fmul float %384, %231, !dbg !41
  %386 = bitcast i32 %67 to float, !dbg !24
  %387 = fmul float %385, %386, !dbg !42
  %388 = bitcast i32 %77 to float, !dbg !26
  %389 = fadd float %387, %388, !dbg !43
  %390 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !28
  %391 = bitcast i32 %390 to float, !dbg !28
  %392 = fadd float %389, %391, !dbg !44
  %393 = bitcast i32 %91 to float, !dbg !30
  %394 = fsub float %392, %393, !dbg !45
  %395 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %396 = bitcast i32 %395 to float, !dbg !18
  %397 = bitcast i32 %38 to float, !dbg !20
  %398 = fsub float %396, %397, !dbg !40
  %399 = fmul float %398, %230, !dbg !41
  %400 = bitcast i32 %66 to float, !dbg !24
  %401 = fmul float %399, %400, !dbg !42
  %402 = bitcast i32 %76 to float, !dbg !26
  %403 = fadd float %401, %402, !dbg !43
  %404 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %405 = bitcast i32 %404 to float, !dbg !28
  %406 = fadd float %403, %405, !dbg !44
  %407 = bitcast i32 %90 to float, !dbg !30
  %408 = fsub float %406, %407, !dbg !45
  %409 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %410 = bitcast i32 %409 to float, !dbg !18
  %411 = bitcast i32 %37 to float, !dbg !20
  %412 = fsub float %410, %411, !dbg !40
  %413 = fmul float %412, %229, !dbg !41
  %414 = bitcast i32 %65 to float, !dbg !24
  %415 = fmul float %413, %414, !dbg !42
  %416 = bitcast i32 %75 to float, !dbg !26
  %417 = fadd float %415, %416, !dbg !43
  %418 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %419 = bitcast i32 %418 to float, !dbg !28
  %420 = fadd float %417, %419, !dbg !44
  %421 = bitcast i32 %89 to float, !dbg !30
  %422 = fsub float %420, %421, !dbg !45
  %423 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %424 = bitcast i32 %423 to float, !dbg !18
  %425 = bitcast i32 %36 to float, !dbg !20
  %426 = fsub float %424, %425, !dbg !40
  %427 = fmul float %426, %228, !dbg !41
  %428 = bitcast i32 %64 to float, !dbg !24
  %429 = fmul float %427, %428, !dbg !42
  %430 = bitcast i32 %74 to float, !dbg !26
  %431 = fadd float %429, %430, !dbg !43
  %432 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %433 = bitcast i32 %432 to float, !dbg !28
  %434 = fadd float %431, %433, !dbg !44
  %435 = bitcast i32 %88 to float, !dbg !30
  %436 = fsub float %434, %435, !dbg !45
  %437 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %438 = bitcast i32 %437 to float, !dbg !18
  %439 = bitcast i32 %35 to float, !dbg !20
  %440 = fsub float %438, %439, !dbg !40
  %441 = fmul float %440, %227, !dbg !41
  %442 = bitcast i32 %63 to float, !dbg !24
  %443 = fmul float %441, %442, !dbg !42
  %444 = bitcast i32 %73 to float, !dbg !26
  %445 = fadd float %443, %444, !dbg !43
  %446 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %447 = bitcast i32 %446 to float, !dbg !28
  %448 = fadd float %445, %447, !dbg !44
  %449 = bitcast i32 %87 to float, !dbg !30
  %450 = fsub float %448, %449, !dbg !45
  %451 = bitcast i32 %122 to float, !dbg !34
  %452 = bitcast i32 %121 to float, !dbg !34
  %453 = bitcast i32 %120 to float, !dbg !34
  %454 = bitcast i32 %119 to float, !dbg !34
  %455 = bitcast i32 %118 to float, !dbg !34
  %456 = bitcast i32 %117 to float, !dbg !34
  %457 = bitcast i32 %116 to float, !dbg !34
  %458 = bitcast i32 %115 to float, !dbg !34
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !46
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !46
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !46
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !46
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !46
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !46
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !46
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !46
  %467 = fmul float %450, %459, !dbg !47
  %468 = fmul float %436, %460, !dbg !47
  %469 = fmul float %422, %461, !dbg !47
  %470 = fmul float %408, %462, !dbg !47
  %471 = fmul float %394, %463, !dbg !47
  %472 = fmul float %380, %464, !dbg !47
  %473 = fmul float %366, %465, !dbg !47
  %474 = fmul float %352, %466, !dbg !47
  %475 = fmul float %467, %458, !dbg !48
  %476 = fmul float %468, %457, !dbg !48
  %477 = fmul float %469, %456, !dbg !48
  %478 = fmul float %470, %455, !dbg !48
  %479 = fmul float %471, %454, !dbg !48
  %480 = fmul float %472, %453, !dbg !48
  %481 = fmul float %473, %452, !dbg !48
  %482 = fmul float %474, %451, !dbg !48
  %483 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !49
  %484 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !49
  %485 = bitcast float %475 to i32, !dbg !50
  %486 = bitcast float %476 to i32, !dbg !50
  %487 = bitcast float %477 to i32, !dbg !50
  %488 = bitcast float %478 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %486, i32 %487, i32 %488, ptr addrspace(1) %483, i1 %19) #3, !dbg !50
  %489 = bitcast float %479 to i32, !dbg !50
  %490 = bitcast float %480 to i32, !dbg !50
  %491 = bitcast float %481 to i32, !dbg !50
  %492 = bitcast float %482 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %489, i32 %490, i32 %491, i32 %492, ptr addrspace(1) %484, i1 %20) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck426dhibutjvipslsudqp7rr7pxnrxo3x3hn5ugqucaogmkun5d.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 26, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 27, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 25, scope: !7)
!50 = !DILocation(line: 54, column: 37, scope: !7)
!51 = !DILocation(line: 54, column: 4, scope: !7)
