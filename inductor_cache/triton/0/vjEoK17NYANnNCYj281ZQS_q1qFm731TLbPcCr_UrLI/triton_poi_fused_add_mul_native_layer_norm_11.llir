; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_native_layer_norm_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 16, !dbg !15
  %18 = mul i32 %17, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen4 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen4, 4, !dbg !17
  %20 = mul i32 %19, 4, !dbg !18
  %.decomposed5 = sub i32 %.frozen4, %20, !dbg !18
  %21 = sext i32 %.decomposed to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %24 = mul i32 %17, 24, !dbg !21
  %25 = add i32 %24, %.decomposed5, !dbg !22
  %26 = add i32 %25, 8, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !25
  %30 = sext i32 %15 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %16) #3, !dbg !27
  %33 = sext i32 %.decomposed5 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !29
  %36 = sext i32 %19 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !31
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #3, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !33
  %44 = bitcast i32 %43 to float, !dbg !33
  %45 = shl nsw i32 %17, 2, !dbg !34
  %46 = add nsw i32 %45, %.decomposed5, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !36
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %16) #3, !dbg !37
  %50 = add i32 %25, 12, !dbg !38
  %51 = sext i32 %50 to i64, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !39
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %16) #3, !dbg !40
  %54 = fadd float %42, 0x3EB0C6F7A0000000, !dbg !41
  %55 = fadd float %44, 0x3EB0C6F7A0000000, !dbg !41
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %56, 0, !dbg !42
  br i1 %.not.i, label %59, label %57, !dbg !42

57:                                               ; preds = %9
  %58 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %54), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

59:                                               ; preds = %9
  %60 = tail call float @llvm.nvvm.rsqrt.approx.f(float %54), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %57, %59
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %61, 0, !dbg !42
  br i1 %.not.i1, label %64, label %62, !dbg !42

62:                                               ; preds = %__nv_rsqrtf.exit
  %63 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %55), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

64:                                               ; preds = %__nv_rsqrtf.exit
  %65 = tail call float @llvm.nvvm.rsqrt.approx.f(float %55), !dbg !42
  br label %__nv_rsqrtf.exit3, !dbg !42

__nv_rsqrtf.exit3:                                ; preds = %62, %64
  %.0.i2 = phi float [ %63, %62 ], [ %65, %64 ], !dbg !42
  %66 = extractvalue { i32, i32 } %32, 1, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = fadd float %67, %69, !dbg !43
  %71 = extractvalue { i32, i32 } %29, 1, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fmul float %70, %72, !dbg !44
  %74 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %75 = bitcast i32 %74 to float, !dbg !20
  %76 = fadd float %73, %75, !dbg !45
  %77 = bitcast i32 %39 to float, !dbg !31
  %78 = fsub float %76, %77, !dbg !46
  %79 = extractvalue { i32, i32 } %32, 0, !dbg !27
  %80 = bitcast i32 %79 to float, !dbg !27
  %81 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %80, %82, !dbg !43
  %84 = extractvalue { i32, i32 } %29, 0, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fmul float %83, %85, !dbg !44
  %87 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %88 = bitcast i32 %87 to float, !dbg !20
  %89 = fadd float %86, %88, !dbg !45
  %90 = bitcast i32 %38 to float, !dbg !31
  %91 = fsub float %89, %90, !dbg !46
  %92 = extractvalue { i32, i32 } %53, 1, !dbg !40
  %93 = bitcast i32 %92 to float, !dbg !40
  %94 = extractvalue { i32, i32 } %53, 0, !dbg !40
  %95 = bitcast i32 %94 to float, !dbg !40
  %96 = extractvalue { i32, i32 } %49, 1, !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = extractvalue { i32, i32 } %49, 0, !dbg !37
  %99 = bitcast i32 %98 to float, !dbg !37
  %100 = fmul float %91, %.0.i, !dbg !47
  %101 = fmul float %78, %.0.i2, !dbg !47
  %102 = fmul float %100, %99, !dbg !48
  %103 = fmul float %101, %97, !dbg !48
  %104 = fadd float %102, %95, !dbg !49
  %105 = fadd float %103, %93, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !50
  %107 = bitcast float %104 to i32, !dbg !51
  %108 = bitcast float %105 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %108, ptr addrspace(1) %106, i1 %16) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caq3sfezj2sftcepsgidf2h5th2zp2xfevybyavokggx4355gpeh.py", directory: "inductor_cache/aq")
!4 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_11, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_native_layer_norm_11", linkageName: "triton_poi_fused_add_mul_native_layer_norm_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 42, scope: !7)
!22 = !DILocation(line: 30, column: 34, scope: !7)
!23 = !DILocation(line: 30, column: 39, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 47, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 38, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 35, column: 31, scope: !7)
!37 = !DILocation(line: 35, column: 43, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 49, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 28, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 25, scope: !7)
!51 = !DILocation(line: 47, column: 37, scope: !7)
!52 = !DILocation(line: 47, column: 4, scope: !7)
