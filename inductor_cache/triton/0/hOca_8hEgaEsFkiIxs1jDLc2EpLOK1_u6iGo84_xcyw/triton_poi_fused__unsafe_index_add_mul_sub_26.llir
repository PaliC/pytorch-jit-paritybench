; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = sdiv i32 %19, 16, !dbg !14
  %22 = srem i32 %20, 16, !dbg !15
  %23 = srem i32 %21, 16, !dbg !15
  %24 = mul i32 %20, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 16, !dbg !16
  %26 = sdiv i32 %17, 256, !dbg !17
  %27 = sdiv i32 %19, 256, !dbg !17
  %.frozen1 = freeze i32 %17, !dbg !18
  %28 = sdiv i32 %.frozen1, 131072, !dbg !18
  %.frozen3 = freeze i32 %19, !dbg !18
  %29 = sdiv i32 %.frozen3, 131072, !dbg !18
  %30 = mul i32 %28, 131072, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %30, !dbg !19
  %31 = mul i32 %29, 131072, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %31, !dbg !19
  %32 = sext i32 %22 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = sext i32 %23 to i64, !dbg !20
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %44 = sext i32 %.decomposed to i64, !dbg !22
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = sext i32 %25 to i64, !dbg !22
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !22
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !23
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !23
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !23
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !23
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !23
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !23
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !23
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !23
  %60 = getelementptr i64, ptr addrspace(1) %3, i64 %44, !dbg !24
  %61 = getelementptr i64, ptr addrspace(1) %3, i64 %46, !dbg !24
  %62 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %63 = extractvalue { i64, i64 } %62, 0, !dbg !25
  %64 = extractvalue { i64, i64 } %62, 1, !dbg !25
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !25
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !25
  %68 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %69 = extractvalue { i64, i64 } %68, 0, !dbg !25
  %70 = extractvalue { i64, i64 } %68, 1, !dbg !25
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !25
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !26
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = bitcast i32 %77 to float, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !28
  %94 = getelementptr i64, ptr addrspace(1) %6, i64 %34, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !29
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !29
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !29
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !29
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !29
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !29
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = lshr i64 %36, 60, !dbg !32
  %122 = and i64 %121, 8, !dbg !32
  %123 = add i64 %122, %36, !dbg !32
  %124 = lshr i64 %40, 60, !dbg !32
  %125 = and i64 %124, 8, !dbg !32
  %126 = add i64 %125, %40, !dbg !32
  %127 = lshr i64 %49, 60, !dbg !33
  %128 = and i64 %127, 8, !dbg !33
  %129 = add i64 %128, %49, !dbg !33
  %130 = lshr i64 %50, 60, !dbg !33
  %131 = and i64 %130, 8, !dbg !33
  %132 = add i64 %131, %50, !dbg !33
  %133 = lshr i64 %52, 60, !dbg !33
  %134 = and i64 %133, 8, !dbg !33
  %135 = add i64 %134, %52, !dbg !33
  %136 = lshr i64 %53, 60, !dbg !33
  %137 = and i64 %136, 8, !dbg !33
  %138 = add i64 %137, %53, !dbg !33
  %139 = lshr i64 %55, 60, !dbg !33
  %140 = and i64 %139, 8, !dbg !33
  %141 = add i64 %140, %55, !dbg !33
  %142 = lshr i64 %56, 60, !dbg !33
  %143 = and i64 %142, 8, !dbg !33
  %144 = add i64 %143, %56, !dbg !33
  %145 = lshr i64 %58, 60, !dbg !33
  %146 = and i64 %145, 8, !dbg !33
  %147 = add i64 %146, %58, !dbg !33
  %148 = lshr i64 %59, 60, !dbg !33
  %149 = and i64 %148, 8, !dbg !33
  %150 = add i64 %149, %59, !dbg !33
  %151 = shl i64 %123, 3, !dbg !34
  %152 = shl i64 %126, 3, !dbg !34
  %153 = shl nsw i32 %26, 6, !dbg !35
  %154 = shl nsw i32 %27, 6, !dbg !35
  %155 = sext i32 %153 to i64, !dbg !36
  %156 = sext i32 %154 to i64, !dbg !36
  %157 = add i64 %151, %155, !dbg !37
  %158 = add i64 %157, %129, !dbg !36
  %159 = add i64 %157, %132, !dbg !36
  %160 = add i64 %157, %135, !dbg !36
  %161 = add i64 %157, %138, !dbg !36
  %162 = add i64 %152, %156, !dbg !37
  %163 = add i64 %162, %141, !dbg !36
  %164 = add i64 %162, %144, !dbg !36
  %165 = add i64 %162, %147, !dbg !36
  %166 = add i64 %162, %150, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !38
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !38
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !39
  %176 = bitcast i32 %175 to float, !dbg !39
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !39
  %178 = bitcast i32 %177 to float, !dbg !39
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #1, !dbg !39
  %180 = bitcast i32 %179 to float, !dbg !39
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !39
  %182 = bitcast i32 %181 to float, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !39
  %184 = bitcast i32 %183 to float, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !39
  %186 = bitcast i32 %185 to float, !dbg !39
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !39
  %188 = bitcast i32 %187 to float, !dbg !39
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !39
  %190 = bitcast i32 %189 to float, !dbg !39
  %191 = lshr i64 %63, 60, !dbg !40
  %192 = and i64 %191, 8, !dbg !40
  %193 = add i64 %192, %63, !dbg !40
  %194 = lshr i64 %64, 60, !dbg !40
  %195 = and i64 %194, 8, !dbg !40
  %196 = add i64 %195, %64, !dbg !40
  %197 = lshr i64 %66, 60, !dbg !40
  %198 = and i64 %197, 8, !dbg !40
  %199 = add i64 %198, %66, !dbg !40
  %200 = lshr i64 %67, 60, !dbg !40
  %201 = and i64 %200, 8, !dbg !40
  %202 = add i64 %201, %67, !dbg !40
  %203 = lshr i64 %69, 60, !dbg !40
  %204 = and i64 %203, 8, !dbg !40
  %205 = add i64 %204, %69, !dbg !40
  %206 = lshr i64 %70, 60, !dbg !40
  %207 = and i64 %206, 8, !dbg !40
  %208 = add i64 %207, %70, !dbg !40
  %209 = lshr i64 %72, 60, !dbg !40
  %210 = and i64 %209, 8, !dbg !40
  %211 = add i64 %210, %72, !dbg !40
  %212 = lshr i64 %73, 60, !dbg !40
  %213 = and i64 %212, 8, !dbg !40
  %214 = add i64 %213, %73, !dbg !40
  %215 = add i64 %157, %193, !dbg !41
  %216 = add i64 %157, %196, !dbg !41
  %217 = add i64 %157, %199, !dbg !41
  %218 = add i64 %157, %202, !dbg !41
  %219 = add i64 %162, %205, !dbg !41
  %220 = add i64 %162, %208, !dbg !41
  %221 = add i64 %162, %211, !dbg !41
  %222 = add i64 %162, %214, !dbg !41
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %215, !dbg !42
  %224 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !42
  %225 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !42
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !42
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !42
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !42
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !42
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !42
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !43
  %232 = bitcast i32 %231 to float, !dbg !43
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !43
  %234 = bitcast i32 %233 to float, !dbg !43
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #1, !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !43
  %240 = bitcast i32 %239 to float, !dbg !43
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !43
  %242 = bitcast i32 %241 to float, !dbg !43
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !43
  %244 = bitcast i32 %243 to float, !dbg !43
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !43
  %246 = bitcast i32 %245 to float, !dbg !43
  %247 = fsub float %232, %176, !dbg !44
  %248 = fsub float %234, %178, !dbg !44
  %249 = fsub float %236, %180, !dbg !44
  %250 = fsub float %238, %182, !dbg !44
  %251 = fsub float %240, %184, !dbg !44
  %252 = fsub float %242, %186, !dbg !44
  %253 = fsub float %244, %188, !dbg !44
  %254 = fsub float %246, %190, !dbg !44
  %255 = fmul float %247, %80, !dbg !45
  %256 = fmul float %248, %81, !dbg !45
  %257 = fmul float %249, %82, !dbg !45
  %258 = fmul float %250, %83, !dbg !45
  %259 = fmul float %251, %89, !dbg !45
  %260 = fmul float %252, %90, !dbg !45
  %261 = fmul float %253, %91, !dbg !45
  %262 = fmul float %254, %92, !dbg !45
  %263 = fadd float %255, %176, !dbg !46
  %264 = fadd float %256, %178, !dbg !46
  %265 = fadd float %257, %180, !dbg !46
  %266 = fadd float %258, %182, !dbg !46
  %267 = fadd float %259, %184, !dbg !46
  %268 = fadd float %260, %186, !dbg !46
  %269 = fadd float %261, %188, !dbg !46
  %270 = fadd float %262, %190, !dbg !46
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !47
  %272 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !47
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !47
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !47
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !47
  %276 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !47
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !47
  %278 = getelementptr float, ptr addrspace(1) %5, i64 %166, !dbg !47
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 true) #1, !dbg !48
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !48
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !48
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !48
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !48
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !48
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #1, !dbg !48
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !48
  %287 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !49
  %289 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !49
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !49
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !49
  %292 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !49
  %293 = getelementptr float, ptr addrspace(1) %5, i64 %221, !dbg !49
  %294 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !49
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !50
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !50
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #1, !dbg !50
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !50
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #1, !dbg !50
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !50
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #1, !dbg !50
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !50
  %303 = lshr i64 %95, 60, !dbg !51
  %304 = and i64 %303, 8, !dbg !51
  %305 = add i64 %304, %95, !dbg !51
  %306 = lshr i64 %99, 60, !dbg !51
  %307 = and i64 %306, 8, !dbg !51
  %308 = add i64 %307, %99, !dbg !51
  %309 = shl i64 %305, 3, !dbg !52
  %310 = shl i64 %308, 3, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !53
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %309, !dbg !53
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %155, !dbg !53
  %314 = getelementptr float, ptr addrspace(1) %5, i64 %132, !dbg !53
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %309, !dbg !53
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %155, !dbg !53
  %317 = getelementptr float, ptr addrspace(1) %5, i64 %135, !dbg !53
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %309, !dbg !53
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %155, !dbg !53
  %320 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !53
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %309, !dbg !53
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %155, !dbg !53
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !53
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %310, !dbg !53
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %156, !dbg !53
  %326 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !53
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %310, !dbg !53
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %156, !dbg !53
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !53
  %330 = getelementptr float, ptr addrspace(1) %329, i64 %310, !dbg !53
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %156, !dbg !53
  %332 = getelementptr float, ptr addrspace(1) %5, i64 %150, !dbg !53
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %310, !dbg !53
  %334 = getelementptr float, ptr addrspace(1) %333, i64 %156, !dbg !53
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 true) #1, !dbg !54
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 true) #1, !dbg !54
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 true) #1, !dbg !54
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 true) #1, !dbg !54
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 true) #1, !dbg !54
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 true) #1, !dbg !54
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 true) #1, !dbg !54
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #1, !dbg !54
  %343 = getelementptr float, ptr addrspace(1) %5, i64 %193, !dbg !55
  %344 = getelementptr float, ptr addrspace(1) %343, i64 %309, !dbg !55
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %155, !dbg !55
  %346 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !55
  %347 = getelementptr float, ptr addrspace(1) %346, i64 %309, !dbg !55
  %348 = getelementptr float, ptr addrspace(1) %347, i64 %155, !dbg !55
  %349 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !55
  %350 = getelementptr float, ptr addrspace(1) %349, i64 %309, !dbg !55
  %351 = getelementptr float, ptr addrspace(1) %350, i64 %155, !dbg !55
  %352 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !55
  %353 = getelementptr float, ptr addrspace(1) %352, i64 %309, !dbg !55
  %354 = getelementptr float, ptr addrspace(1) %353, i64 %155, !dbg !55
  %355 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !55
  %356 = getelementptr float, ptr addrspace(1) %355, i64 %310, !dbg !55
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %156, !dbg !55
  %358 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !55
  %359 = getelementptr float, ptr addrspace(1) %358, i64 %310, !dbg !55
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %156, !dbg !55
  %361 = getelementptr float, ptr addrspace(1) %5, i64 %211, !dbg !55
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %310, !dbg !55
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %156, !dbg !55
  %364 = getelementptr float, ptr addrspace(1) %5, i64 %214, !dbg !55
  %365 = getelementptr float, ptr addrspace(1) %364, i64 %310, !dbg !55
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %156, !dbg !55
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 true) #1, !dbg !56
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 true) #1, !dbg !56
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 true) #1, !dbg !56
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #1, !dbg !56
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 true) #1, !dbg !56
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #1, !dbg !56
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 true) #1, !dbg !56
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #1, !dbg !56
  %375 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !54
  %376 = insertelement <2 x i32> %375, i32 %279, i64 1, !dbg !54
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !54
  %378 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !56
  %379 = insertelement <2 x i32> %378, i32 %295, i64 1, !dbg !56
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !56
  %381 = fsub <2 x float> %380, %377, !dbg !57
  %382 = insertelement <2 x float> poison, float %80, i64 0, !dbg !58
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %384 = fmul <2 x float> %381, %383, !dbg !58
  %385 = fadd <2 x float> %384, %377, !dbg !59
  %386 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !54
  %387 = insertelement <2 x i32> %386, i32 %280, i64 1, !dbg !54
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !54
  %389 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !56
  %390 = insertelement <2 x i32> %389, i32 %296, i64 1, !dbg !56
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !56
  %392 = fsub <2 x float> %391, %388, !dbg !57
  %393 = insertelement <2 x float> poison, float %81, i64 0, !dbg !58
  %394 = shufflevector <2 x float> %393, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %395 = fmul <2 x float> %392, %394, !dbg !58
  %396 = fadd <2 x float> %395, %388, !dbg !59
  %397 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !54
  %398 = insertelement <2 x i32> %397, i32 %281, i64 1, !dbg !54
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !54
  %400 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !56
  %401 = insertelement <2 x i32> %400, i32 %297, i64 1, !dbg !56
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !56
  %403 = fsub <2 x float> %402, %399, !dbg !57
  %404 = insertelement <2 x float> poison, float %82, i64 0, !dbg !58
  %405 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %406 = fmul <2 x float> %403, %405, !dbg !58
  %407 = fadd <2 x float> %406, %399, !dbg !59
  %408 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !54
  %409 = insertelement <2 x i32> %408, i32 %282, i64 1, !dbg !54
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !54
  %411 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !56
  %412 = insertelement <2 x i32> %411, i32 %298, i64 1, !dbg !56
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !56
  %414 = fsub <2 x float> %413, %410, !dbg !57
  %415 = insertelement <2 x float> poison, float %83, i64 0, !dbg !58
  %416 = shufflevector <2 x float> %415, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %417 = fmul <2 x float> %414, %416, !dbg !58
  %418 = fadd <2 x float> %417, %410, !dbg !59
  %419 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !54
  %420 = insertelement <2 x i32> %419, i32 %283, i64 1, !dbg !54
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !54
  %422 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !56
  %423 = insertelement <2 x i32> %422, i32 %299, i64 1, !dbg !56
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !56
  %425 = fsub <2 x float> %424, %421, !dbg !57
  %426 = insertelement <2 x float> poison, float %89, i64 0, !dbg !58
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %428 = fmul <2 x float> %425, %427, !dbg !58
  %429 = fadd <2 x float> %428, %421, !dbg !59
  %430 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !54
  %431 = insertelement <2 x i32> %430, i32 %284, i64 1, !dbg !54
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !54
  %433 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !56
  %434 = insertelement <2 x i32> %433, i32 %300, i64 1, !dbg !56
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !56
  %436 = fsub <2 x float> %435, %432, !dbg !57
  %437 = insertelement <2 x float> poison, float %90, i64 0, !dbg !58
  %438 = shufflevector <2 x float> %437, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %439 = fmul <2 x float> %436, %438, !dbg !58
  %440 = fadd <2 x float> %439, %432, !dbg !59
  %441 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !54
  %442 = insertelement <2 x i32> %441, i32 %285, i64 1, !dbg !54
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !54
  %444 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !56
  %445 = insertelement <2 x i32> %444, i32 %301, i64 1, !dbg !56
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !56
  %447 = fsub <2 x float> %446, %443, !dbg !57
  %448 = insertelement <2 x float> poison, float %91, i64 0, !dbg !58
  %449 = shufflevector <2 x float> %448, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %450 = fmul <2 x float> %447, %449, !dbg !58
  %451 = fadd <2 x float> %450, %443, !dbg !59
  %452 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !54
  %453 = insertelement <2 x i32> %452, i32 %286, i64 1, !dbg !54
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !54
  %455 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !56
  %456 = insertelement <2 x i32> %455, i32 %302, i64 1, !dbg !56
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !56
  %458 = fsub <2 x float> %457, %454, !dbg !57
  %459 = insertelement <2 x float> poison, float %92, i64 0, !dbg !58
  %460 = shufflevector <2 x float> %459, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %461 = fmul <2 x float> %458, %460, !dbg !58
  %462 = fadd <2 x float> %461, %454, !dbg !59
  %463 = extractelement <2 x float> %385, i64 0, !dbg !60
  %464 = extractelement <2 x float> %385, i64 1, !dbg !61
  %465 = fsub float %463, %464, !dbg !60
  %466 = extractelement <2 x float> %396, i64 0, !dbg !60
  %467 = extractelement <2 x float> %396, i64 1, !dbg !61
  %468 = fsub float %466, %467, !dbg !60
  %469 = extractelement <2 x float> %407, i64 0, !dbg !60
  %470 = extractelement <2 x float> %407, i64 1, !dbg !61
  %471 = fsub float %469, %470, !dbg !60
  %472 = extractelement <2 x float> %418, i64 0, !dbg !60
  %473 = extractelement <2 x float> %418, i64 1, !dbg !61
  %474 = fsub float %472, %473, !dbg !60
  %475 = extractelement <2 x float> %429, i64 0, !dbg !60
  %476 = extractelement <2 x float> %429, i64 1, !dbg !61
  %477 = fsub float %475, %476, !dbg !60
  %478 = extractelement <2 x float> %440, i64 0, !dbg !60
  %479 = extractelement <2 x float> %440, i64 1, !dbg !61
  %480 = fsub float %478, %479, !dbg !60
  %481 = extractelement <2 x float> %451, i64 0, !dbg !60
  %482 = extractelement <2 x float> %451, i64 1, !dbg !61
  %483 = fsub float %481, %482, !dbg !60
  %484 = extractelement <2 x float> %462, i64 0, !dbg !60
  %485 = extractelement <2 x float> %462, i64 1, !dbg !61
  %486 = fsub float %484, %485, !dbg !60
  %487 = fmul float %465, %106, !dbg !62
  %488 = fmul float %468, %108, !dbg !62
  %489 = fmul float %471, %110, !dbg !62
  %490 = fmul float %474, %112, !dbg !62
  %491 = fmul float %477, %114, !dbg !62
  %492 = fmul float %480, %116, !dbg !62
  %493 = fmul float %483, %118, !dbg !62
  %494 = fmul float %486, %120, !dbg !62
  %495 = fadd float %464, %487, !dbg !61
  %496 = fadd float %467, %488, !dbg !61
  %497 = fadd float %470, %489, !dbg !61
  %498 = fadd float %473, %490, !dbg !61
  %499 = fadd float %476, %491, !dbg !61
  %500 = fadd float %479, %492, !dbg !61
  %501 = fadd float %482, %493, !dbg !61
  %502 = fadd float %485, %494, !dbg !61
  %503 = sext i32 %17 to i64, !dbg !63
  %504 = getelementptr float, ptr addrspace(1) %8, i64 %503, !dbg !63
  %505 = sext i32 %19 to i64, !dbg !63
  %506 = getelementptr float, ptr addrspace(1) %8, i64 %505, !dbg !63
  %507 = bitcast float %263 to i32, !dbg !64
  %508 = bitcast float %264 to i32, !dbg !64
  %509 = bitcast float %265 to i32, !dbg !64
  %510 = bitcast float %266 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %507, i32 %508, i32 %509, i32 %510, ptr addrspace(1) %504, i1 true) #1, !dbg !64
  %511 = bitcast float %267 to i32, !dbg !64
  %512 = bitcast float %268 to i32, !dbg !64
  %513 = bitcast float %269 to i32, !dbg !64
  %514 = bitcast float %270 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %511, i32 %512, i32 %513, i32 %514, ptr addrspace(1) %506, i1 true) #1, !dbg !64
  %515 = shl i32 %28, 18, !dbg !65
  %516 = shl i32 %29, 18, !dbg !65
  %517 = add i32 %515, %.decomposed2, !dbg !66
  %518 = add i32 %516, %.decomposed4, !dbg !66
  %519 = sext i32 %517 to i64, !dbg !67
  %520 = getelementptr float, ptr addrspace(1) %9, i64 %519, !dbg !67
  %521 = sext i32 %518 to i64, !dbg !67
  %522 = getelementptr float, ptr addrspace(1) %9, i64 %521, !dbg !67
  %523 = bitcast float %495 to i32, !dbg !68
  %524 = bitcast float %496 to i32, !dbg !68
  %525 = bitcast float %497 to i32, !dbg !68
  %526 = bitcast float %498 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %524, i32 %525, i32 %526, ptr addrspace(1) %520, i1 true) #1, !dbg !68
  %527 = bitcast float %499 to i32, !dbg !68
  %528 = bitcast float %500 to i32, !dbg !68
  %529 = bitcast float %501 to i32, !dbg !68
  %530 = bitcast float %502 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %522, i1 true) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw7eof7hbfqwahiiyox2isjdsuunyggwynwu7zavugtdna7dvrry.py", directory: "inductor_cache/w7")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_26", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 43, column: 49, scope: !7)
!36 = !DILocation(line: 43, column: 46, scope: !7)
!37 = !DILocation(line: 43, column: 37, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 54, scope: !7)
!40 = !DILocation(line: 46, column: 35, scope: !7)
!41 = !DILocation(line: 47, column: 48, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 56, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 55, scope: !7)
!49 = !DILocation(line: 52, column: 31, scope: !7)
!50 = !DILocation(line: 52, column: 56, scope: !7)
!51 = !DILocation(line: 58, column: 35, scope: !7)
!52 = !DILocation(line: 59, column: 40, scope: !7)
!53 = !DILocation(line: 59, column: 31, scope: !7)
!54 = !DILocation(line: 59, column: 56, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 57, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 25, scope: !7)
!64 = !DILocation(line: 67, column: 37, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 68, column: 30, scope: !7)
!67 = !DILocation(line: 68, column: 25, scope: !7)
!68 = !DILocation(line: 68, column: 49, scope: !7)
!69 = !DILocation(line: 68, column: 4, scope: !7)
