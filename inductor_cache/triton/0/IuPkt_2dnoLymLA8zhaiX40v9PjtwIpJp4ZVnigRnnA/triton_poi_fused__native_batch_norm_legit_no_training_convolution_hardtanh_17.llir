; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 14, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = icmp slt i32 %17, 1704, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %20, %16, !dbg !17
  %22 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %23 = sdiv i32 %.frozen, 426, !dbg !19
  %24 = mul i32 %23, 426, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = mul i32 %21, 426, !dbg !21
  %26 = add i32 %25, %.decomposed, !dbg !22
  %27 = mul i32 %23, 6816, !dbg !23
  %28 = add i32 %26, %27, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = and i1 %18, %22, !dbg !26
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #4, !dbg !27
  %33 = sext i32 %.decomposed to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #4, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !30
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #4, !dbg !31
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !31
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !31
  %40 = bitcast i32 %38 to float, !dbg !31
  %41 = bitcast i32 %39 to float, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #4, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !34
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #4, !dbg !35
  %46 = fadd float %40, 0x3EE4F8B580000000, !dbg !36
  %47 = fadd float %41, 0x3EE4F8B580000000, !dbg !36
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %48, 0, !dbg !37
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %49, 0, !dbg !37
  br i1 %.not.i, label %55, label %50, !dbg !37

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !37

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

55:                                               ; preds = %9
  br i1 %.not1.i, label %58, label %56, !dbg !37

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i2 = icmp eq i32 %60, 0, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i5 = icmp eq i32 %61, 0, !dbg !37
  br i1 %.not.i2, label %67, label %62, !dbg !37

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %65, label %63, !dbg !37

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %70, label %68, !dbg !37

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

__nv_sqrtf.exit6:                                 ; preds = %63, %65, %68, %70
  %.0.i4 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !37
  %72 = extractvalue { i32, i32 } %32, 1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fsub float %73, %75, !dbg !38
  %77 = extractvalue { i32, i32 } %32, 0, !dbg !27
  %78 = bitcast i32 %77 to float, !dbg !27
  %79 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fsub float %78, %80, !dbg !38
  %82 = extractvalue { i32, i32 } %45, 1, !dbg !35
  %83 = bitcast i32 %82 to float, !dbg !35
  %84 = extractvalue { i32, i32 } %45, 0, !dbg !35
  %85 = bitcast i32 %84 to float, !dbg !35
  %86 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = or disjoint i32 %20, %14, !dbg !17
  %91 = icmp slt i32 %90, 16, !dbg !18
  %92 = or disjoint i32 %11, %16, !dbg !13
  %93 = icmp slt i32 %92, 1704, !dbg !14
  %94 = and i1 %93, %91, !dbg !26
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !39
  %97 = fmul float %81, %95, !dbg !40
  %98 = fmul float %76, %96, !dbg !40
  %99 = fmul float %97, %89, !dbg !41
  %100 = fmul float %98, %87, !dbg !41
  %101 = fadd float %99, %85, !dbg !42
  %102 = fadd float %100, %83, !dbg !42
  %.inv = fcmp ole float %101, 0.000000e+00, !dbg !43
  %103 = select i1 %.inv, float 0.000000e+00, float %101, !dbg !43
  %.inv1 = fcmp ole float %102, 0.000000e+00, !dbg !43
  %104 = select i1 %.inv1, float 0.000000e+00, float %102, !dbg !43
  %105 = fcmp olt float %103, 6.000000e+00, !dbg !47
  %106 = fcmp olt float %104, 6.000000e+00, !dbg !47
  %107 = fcmp uno float %103, 0.000000e+00, !dbg !49
  %108 = fcmp uno float %104, 0.000000e+00, !dbg !49
  %109 = or i1 %105, %107, !dbg !50
  %110 = or i1 %106, %108, !dbg !50
  %111 = select i1 %109, float %103, float 6.000000e+00, !dbg !51
  %112 = select i1 %110, float %104, float 6.000000e+00, !dbg !51
  %113 = shl i32 %92, 4, !dbg !52
  %114 = add i32 %90, %113, !dbg !53
  %115 = sext i32 %114 to i64, !dbg !54
  %116 = getelementptr float, ptr addrspace(1) %5, i64 %115, !dbg !54
  %117 = shl i32 %12, 5, !dbg !55
  %118 = and i32 %117, 224, !dbg !55
  %119 = or disjoint i32 %118, %16, !dbg !55
  %120 = and i32 %13, 254, !dbg !55
  %121 = lshr exact i32 %118, 2, !dbg !55
  %122 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %121, !dbg !55
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %119, !dbg !55
  %124 = bitcast float %111 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !55
  %125 = or disjoint i32 %119, 16, !dbg !55
  %126 = lshr i32 %125, 4, !dbg !55
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !55
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !55
  %129 = bitcast float %112 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %130 = lshr i32 %120, 4, !dbg !55
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !55
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %120, !dbg !55
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !55
  %134 = or disjoint i32 %120, 1, !dbg !55
  %135 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %134, !dbg !55
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %136, ptr addrspace(1) %116, i1 %94) #4, !dbg !55
  %137 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !56
  %138 = bitcast float %111 to i32, !dbg !57
  %139 = bitcast float %112 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %137, i1 %31) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2pzzijc735sxjb72dr6so7ubglxiju7skdcarifq5m7re7d4efi.py", directory: "inductor_cache/2p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 110, column: 15, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 51, column: 42, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !44, inlinedAt: !48)
!50 = !DILocation(line: 112, column: 16, scope: !44, inlinedAt: !48)
!51 = !DILocation(line: 113, column: 29, scope: !44, inlinedAt: !48)
!52 = !DILocation(line: 52, column: 33, scope: !7)
!53 = !DILocation(line: 52, column: 30, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 45, scope: !7)
!56 = !DILocation(line: 53, column: 25, scope: !7)
!57 = !DILocation(line: 53, column: 56, scope: !7)
!58 = !DILocation(line: 53, column: 4, scope: !7)
