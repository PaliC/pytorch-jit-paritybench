#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":19:0)
#loc1 = loc(unknown)
#loc27 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":40:25)
#loc36 = loc(callsite(#loc1 at #loc27))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_mean_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c262144_i32 = arith.constant 262144 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<131072> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c32_i32 : i32 loc(#loc6)
    %6 = arith.muli %4, %c4096_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc8)
    %8 = arith.muli %5, %c262144_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc11)
    %11 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc12)
    %12 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg5 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %20 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc14)
      %21 = arith.addi %20, %3 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %22 = arith.cmpi slt, %21, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %23 = arith.addi %21, %7 : tensor<1x2048xi32, #blocked> loc(#loc8)
      %24 = arith.addi %23, %9 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %25 = tt.addptr %10, %24 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc11)
      %26 = arith.andi %22, %11 : tensor<1x2048xi1, #blocked> loc(#loc12)
      %27 = tt.load %25, %26, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc16)
      %28 = arith.addi %21, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc17)
      %29 = arith.addi %28, %7 : tensor<1x2048xi32, #blocked> loc(#loc18)
      %30 = arith.addi %29, %9 : tensor<1x2048xi32, #blocked> loc(#loc19)
      %31 = tt.addptr %10, %30 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc20)
      %32 = tt.load %31, %26, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc21)
      %33 = arith.addf %27, %32 : tensor<1x2048xf32, #blocked> loc(#loc22)
      %34 = arith.addf %arg5, %33 : tensor<1x2048xf32, #blocked> loc(#loc23)
      %35 = arith.select %26, %34, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc24)
      scf.yield %35 : tensor<1x2048xf32, #blocked> loc(#loc25)
    } loc(#loc13)
    %13 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc27)), %arg5: f32 loc(callsite(#loc1 at #loc27))):
      %20 = arith.addf %arg4, %arg5 : f32 loc(#loc38)
      tt.reduce.return %20 : f32 loc(#loc35)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc35)
    %14 = triton_gpu.convert_layout %13 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc30)
    %16 = arith.divf %15, %cst_2 : tensor<1x1xf32, #blocked1> loc(#loc29)
    gpu.barrier loc(#loc31)
    %17 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %18 = tt.splat %17 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %19 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc33)
    tt.store %18, %16, %19 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":22:28)
#loc3 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":24:21)
#loc4 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":25:33)
#loc5 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":26:19)
#loc6 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":27:19)
#loc7 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:44)
#loc8 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:39)
#loc9 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:56)
#loc10 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:49)
#loc11 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:34)
#loc12 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:69)
#loc13 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":30:36)
#loc14 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":31:27)
#loc15 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":32:25)
#loc16 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":34:61)
#loc17 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":35:43)
#loc18 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":35:48)
#loc19 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":35:58)
#loc20 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":35:34)
#loc21 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":35:70)
#loc22 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":36:22)
#loc23 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":38:23)
#loc24 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":39:46)
#loc25 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":39:8)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":42:18)
#loc30 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":40:28)
#loc31 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":43:4)
#loc32 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":44:28)
#loc33 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":44:39)
#loc34 = loc("inductor_cache/sk/cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py":44:4)
#loc35 = loc(callsite(#loc26 at #loc27))
#loc37 = loc(callsite(#loc28 at #loc26))
#loc38 = loc(callsite(#loc37 at #loc27))
