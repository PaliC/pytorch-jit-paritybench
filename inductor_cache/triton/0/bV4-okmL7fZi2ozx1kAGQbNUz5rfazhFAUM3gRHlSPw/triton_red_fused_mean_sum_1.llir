; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 128, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %.frozen = freeze i32 %5, !dbg !13
  %10 = sdiv i32 %.frozen, 32, !dbg !13
  %11 = mul i32 %10, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %11, !dbg !14
  %12 = shl nsw i32 %.decomposed, 12, !dbg !15
  %13 = shl i32 %10, 18, !dbg !16
  %14 = add i32 %13, %12
  %15 = add nsw i32 %12, 131072
  %16 = add nuw i32 %15, %13
  %17 = or disjoint i32 %14, %9, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = or disjoint i32 %16, %9, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = fadd float %25, %34, !dbg !23
  %36 = fadd float %35, 0.000000e+00, !dbg !24
  %37 = or disjoint i32 %9, 2048, !dbg !25
  %38 = or disjoint i32 %14, %37, !dbg !17
  %39 = sext i32 %38 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %46 = or disjoint i32 %16, %37, !dbg !20
  %47 = sext i32 %46 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #3, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !22
  %54 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %55 = insertelement <2 x i32> %54, i32 %42, i64 1, !dbg !19
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !19
  %57 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %58 = insertelement <2 x i32> %57, i32 %50, i64 1, !dbg !22
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !22
  %60 = fadd <2 x float> %56, %59, !dbg !23
  %61 = extractelement <2 x float> %60, i64 0, !dbg !24
  %62 = fadd float %61, 0.000000e+00, !dbg !24
  %63 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %64 = insertelement <2 x i32> %63, i32 %43, i64 1, !dbg !19
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !19
  %66 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %67 = insertelement <2 x i32> %66, i32 %51, i64 1, !dbg !22
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !22
  %69 = fadd <2 x float> %65, %68, !dbg !23
  %70 = extractelement <2 x float> %69, i64 0, !dbg !24
  %71 = fadd float %70, 0.000000e+00, !dbg !24
  %72 = extractelement <2 x float> %60, i64 1, !dbg !24
  %73 = fadd float %62, %72, !dbg !24
  %74 = extractelement <2 x float> %69, i64 1, !dbg !24
  %75 = fadd float %71, %74, !dbg !24
  %76 = lshr i32 %7, 5, !dbg !12
  %77 = and i32 %7, 31, !dbg !12
  %78 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %79 = insertelement <2 x i32> %78, i32 %44, i64 1, !dbg !19
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !19
  %81 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !22
  %82 = insertelement <2 x i32> %81, i32 %52, i64 1, !dbg !22
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !22
  %84 = fadd <2 x float> %80, %83, !dbg !23
  %85 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %36, i64 1, !dbg !24
  %86 = fadd <2 x float> %84, %85, !dbg !24
  %87 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !23
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !23
  %89 = insertelement <2 x float> %88, float %73, i64 1, !dbg !23
  %90 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !23
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !23
  %92 = insertelement <2 x float> %91, float %75, i64 1, !dbg !23
  %93 = fadd <2 x float> %89, %92, !dbg !23
  %94 = fadd <2 x float> %86, %93, !dbg !24
  %shift = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %95 = fadd <2 x float> %94, %shift, !dbg !26
  %96 = extractelement <2 x float> %95, i64 0, !dbg !26
  %97 = select i1 %6, float %96, float 0.000000e+00, !dbg !26
  %98 = bitcast float %97 to i32, !dbg !31
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = fadd float %97, %100, !dbg !26
  %102 = bitcast float %101 to i32, !dbg !31
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fadd float %101, %104, !dbg !26
  %106 = bitcast float %105 to i32, !dbg !31
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = fadd float %105, %108, !dbg !26
  %110 = bitcast float %109 to i32, !dbg !31
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = fadd float %109, %112, !dbg !26
  %114 = bitcast float %113 to i32, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = fadd float %113, %116, !dbg !26
  %118 = icmp eq i32 %77, 0, !dbg !31
  %119 = and i32 %76, 15, !dbg !31
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !31
  %121 = bitcast float %117 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %118) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %122 = icmp slt i32 %7, 16, !dbg !31
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !31
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %123, i1 %122) #3, !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 8, i32 31), !dbg !31
  %127 = bitcast i32 %126 to float, !dbg !31
  %128 = fadd float %125, %127, !dbg !26
  %129 = bitcast float %128 to i32, !dbg !31
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = fadd float %128, %131, !dbg !26
  %133 = bitcast float %132 to i32, !dbg !31
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = fadd float %132, %135, !dbg !26
  %137 = bitcast float %136 to i32, !dbg !31
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = fadd float %136, %139, !dbg !26
  %141 = and i32 %7, 15, !dbg !31
  %142 = icmp eq i32 %141, 0, !dbg !31
  %143 = and i1 %122, %142, !dbg !31
  %144 = bitcast float %140 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %144, i1 %143) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %145 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 4.096000e+03) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %147 = sext i32 %5 to i64, !dbg !34
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !34
  %urem = and i32 %7, 511, !dbg !35
  %149 = icmp eq i32 %urem, 0, !dbg !35
  %150 = bitcast float %146 to i32, !dbg !35
  %151 = and i1 %149, %6, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %148, i1 %151) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cskl5exe4jzjzzow7arrzo55memqmsqryeawcki5fky36zetedkx.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_red_fused_mean_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_sum_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_sum_1", linkageName: "triton_red_fused_mean_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 44, scope: !7)
!16 = !DILocation(line: 34, column: 56, scope: !7)
!17 = !DILocation(line: 34, column: 49, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 61, scope: !7)
!20 = !DILocation(line: 35, column: 58, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 70, scope: !7)
!23 = !DILocation(line: 36, column: 22, scope: !7)
!24 = !DILocation(line: 38, column: 23, scope: !7)
!25 = !DILocation(line: 31, column: 27, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 40, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 4, scope: !7)
!34 = !DILocation(line: 44, column: 28, scope: !7)
!35 = !DILocation(line: 44, column: 39, scope: !7)
!36 = !DILocation(line: 44, column: 4, scope: !7)
