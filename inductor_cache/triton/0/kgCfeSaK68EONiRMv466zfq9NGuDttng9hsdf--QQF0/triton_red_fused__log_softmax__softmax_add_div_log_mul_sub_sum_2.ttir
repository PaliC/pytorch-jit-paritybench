#loc = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":19:0)
#loc1 = loc(unknown)
#loc53 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":63:27)
#loc62 = loc(callsite(#loc1 at #loc53))
module {
  tt.func public @triton_red_fused__log_softmax__softmax_add_div_log_mul_sub_sum_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<2.500000e-01> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-10> : tensor<1x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x64xi32> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<1x64xi32> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x64xi32> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc4)
    %3 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc5)
    %4 = scf.for %arg4 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg5 = %cst_6) -> (tensor<1x64xf32>)  : i32 {
      %10 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc7)
      %11 = arith.addi %10, %1 : tensor<1x64xi32> loc(#loc7)
      %12 = arith.cmpi slt, %11, %cst_5 : tensor<1x64xi32> loc(#loc8)
      %13 = arith.divsi %11, %cst_4 : tensor<1x64xi32> loc(#loc9)
      %14 = tt.addptr %2, %11 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc4)
      %15 = tt.load %14, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc10)
      %16 = arith.muli %13, %cst_4 : tensor<1x64xi32> loc(#loc11)
      %17 = tt.addptr %2, %16 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc12)
      %18 = tt.load %17, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc13)
      %19 = arith.addi %16, %cst_3 : tensor<1x64xi32> loc(#loc14)
      %20 = tt.addptr %2, %19 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc15)
      %21 = tt.load %20, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc16)
      %22 = arith.addi %16, %cst_2 : tensor<1x64xi32> loc(#loc17)
      %23 = tt.addptr %2, %22 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc18)
      %24 = tt.load %23, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc19)
      %25 = arith.addi %16, %cst_1 : tensor<1x64xi32> loc(#loc20)
      %26 = tt.addptr %2, %25 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc21)
      %27 = tt.load %26, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc22)
      %28 = tt.addptr %3, %11 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc5)
      %29 = tt.load %28, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc23)
      %30 = tt.addptr %3, %16 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc24)
      %31 = tt.load %30, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc25)
      %32 = tt.addptr %3, %19 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc26)
      %33 = tt.load %32, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc27)
      %34 = tt.addptr %3, %22 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc28)
      %35 = tt.load %34, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc29)
      %36 = tt.addptr %3, %25 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc30)
      %37 = tt.load %36, %12, %cst_6 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc31)
      %38 = arith.addf %18, %21 : tensor<1x64xf32> loc(#loc32)
      %39 = arith.addf %38, %24 : tensor<1x64xf32> loc(#loc33)
      %40 = arith.addf %39, %27 : tensor<1x64xf32> loc(#loc34)
      %41 = arith.divf %15, %40 : tensor<1x64xf32> loc(#loc35)
      %42 = arith.addf %41, %cst_0 : tensor<1x64xf32> loc(#loc36)
      %43 = math.log %42 : tensor<1x64xf32> loc(#loc37)
      %44 = math.exp %31 : tensor<1x64xf32> loc(#loc38)
      %45 = math.exp %33 : tensor<1x64xf32> loc(#loc39)
      %46 = arith.addf %44, %45 : tensor<1x64xf32> loc(#loc40)
      %47 = math.exp %35 : tensor<1x64xf32> loc(#loc41)
      %48 = arith.addf %46, %47 : tensor<1x64xf32> loc(#loc42)
      %49 = math.exp %37 : tensor<1x64xf32> loc(#loc43)
      %50 = arith.addf %48, %49 : tensor<1x64xf32> loc(#loc44)
      %51 = math.log %50 : tensor<1x64xf32> loc(#loc45)
      %52 = arith.subf %29, %51 : tensor<1x64xf32> loc(#loc46)
      %53 = arith.subf %43, %52 : tensor<1x64xf32> loc(#loc47)
      %54 = arith.mulf %41, %53 : tensor<1x64xf32> loc(#loc48)
      %55 = arith.addf %arg5, %54 : tensor<1x64xf32> loc(#loc49)
      %56 = arith.select %12, %55, %arg5 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc50)
      scf.yield %56 : tensor<1x64xf32> loc(#loc51)
    } loc(#loc6)
    %5 = "tt.reduce"(%4) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc53)), %arg5: f32 loc(callsite(#loc1 at #loc53))):
      %10 = arith.addf %arg4, %arg5 : f32 loc(#loc64)
      tt.reduce.return %10 : f32 loc(#loc61)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc61)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc55)
    %7 = arith.mulf %6, %cst : tensor<1x1xf32> loc(#loc56)
    gpu.barrier loc(#loc57)
    %8 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc58)
    %9 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc58)
    tt.store %9, %7 : tensor<1x1x!tt.ptr<f32>> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":25:25)
#loc3 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":25:33)
#loc4 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":32:34)
#loc5 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":37:35)
#loc6 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":27:36)
#loc7 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":28:27)
#loc8 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":29:25)
#loc9 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":31:23)
#loc10 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":32:39)
#loc11 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":33:36)
#loc12 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":33:34)
#loc13 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":33:41)
#loc14 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":34:38)
#loc15 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":34:34)
#loc16 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":34:45)
#loc17 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":35:38)
#loc18 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":35:34)
#loc19 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":35:45)
#loc20 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":36:38)
#loc21 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":36:34)
#loc22 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":36:45)
#loc23 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":37:40)
#loc24 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":38:35)
#loc25 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":38:42)
#loc26 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":39:35)
#loc27 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":39:46)
#loc28 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":40:35)
#loc29 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":40:46)
#loc30 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":41:35)
#loc31 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":41:46)
#loc32 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":42:22)
#loc33 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":43:22)
#loc34 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":44:22)
#loc35 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":45:22)
#loc36 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":47:23)
#loc37 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":48:28)
#loc38 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":49:28)
#loc39 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":50:28)
#loc40 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":51:24)
#loc41 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":52:28)
#loc42 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":53:24)
#loc43 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":54:28)
#loc44 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":55:24)
#loc45 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":56:28)
#loc46 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":57:24)
#loc47 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":58:24)
#loc48 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":59:23)
#loc49 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":61:25)
#loc50 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":62:40)
#loc51 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":62:8)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc55 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":63:30)
#loc56 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":65:20)
#loc57 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":66:4)
#loc58 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":67:28)
#loc59 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":67:71)
#loc60 = loc("inductor_cache/6j/c6jtqwhgz4kvqdbhnao6evpkmjhpqrixp7qj4uf3yqcij4ujf7st.py":67:4)
#loc61 = loc(callsite(#loc52 at #loc53))
#loc63 = loc(callsite(#loc54 at #loc52))
#loc64 = loc(callsite(#loc63 at #loc53))
