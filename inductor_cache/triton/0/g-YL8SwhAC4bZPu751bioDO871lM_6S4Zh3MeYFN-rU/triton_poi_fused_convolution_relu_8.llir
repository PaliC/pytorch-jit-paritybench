; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 768, !dbg !14
  %21 = icmp slt i32 %16, 768, !dbg !14
  %22 = icmp slt i32 %17, 768, !dbg !14
  %23 = icmp slt i32 %18, 768, !dbg !14
  %24 = icmp slt i32 %19, 768, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = icmp slt i32 %25, 49, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %27 = sdiv i32 %.frozen, 192, !dbg !17
  %28 = mul i32 %27, 192, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = mul i32 %25, 192, !dbg !19
  %30 = add i32 %.decomposed, %29, !dbg !20
  %31 = mul i32 %27, 9408, !dbg !21
  %32 = add i32 %30, %31, !dbg !22
  %33 = sext i32 %32 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %26, %20, !dbg !24
  %36 = and i1 %26, %21, !dbg !24
  %37 = and i1 %26, %22, !dbg !24
  %38 = and i1 %26, %23, !dbg !24
  %39 = and i1 %26, %24, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %45 = sext i32 %.decomposed to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %52 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !25
  %53 = insertelement <4 x i32> %52, i32 %43, i64 1, !dbg !25
  %54 = insertelement <4 x i32> %53, i32 %42, i64 2, !dbg !25
  %55 = insertelement <4 x i32> %54, i32 %41, i64 3, !dbg !25
  %56 = bitcast <4 x i32> %55 to <4 x float>, !dbg !25
  %57 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !27
  %58 = insertelement <4 x i32> %57, i32 %50, i64 1, !dbg !27
  %59 = insertelement <4 x i32> %58, i32 %49, i64 2, !dbg !27
  %60 = insertelement <4 x i32> %59, i32 %48, i64 3, !dbg !27
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !27
  %62 = fadd <4 x float> %56, %61, !dbg !28
  %63 = fcmp olt <4 x float> %62, zeroinitializer, !dbg !29
  %64 = extractelement <4 x i1> %63, i64 3, !dbg !33
  %65 = extractelement <4 x float> %62, i64 3, !dbg !33
  %66 = select i1 %64, float 0.000000e+00, float %65, !dbg !33
  %67 = extractelement <4 x i1> %63, i64 2, !dbg !33
  %68 = extractelement <4 x float> %62, i64 2, !dbg !33
  %69 = select i1 %67, float 0.000000e+00, float %68, !dbg !33
  %70 = extractelement <4 x i1> %63, i64 1, !dbg !33
  %71 = extractelement <4 x float> %62, i64 1, !dbg !33
  %72 = select i1 %70, float 0.000000e+00, float %71, !dbg !33
  %73 = extractelement <4 x i1> %63, i64 0, !dbg !33
  %74 = extractelement <4 x float> %62, i64 0, !dbg !33
  %75 = select i1 %73, float 0.000000e+00, float %74, !dbg !33
  %76 = mul i32 %16, 49, !dbg !34
  %77 = mul i32 %17, 49, !dbg !34
  %78 = mul i32 %18, 49, !dbg !34
  %79 = mul i32 %19, 49, !dbg !34
  %80 = add i32 %76, %25, !dbg !35
  %81 = add i32 %77, %25, !dbg !35
  %82 = add i32 %78, %25, !dbg !35
  %83 = add i32 %79, %25, !dbg !35
  %84 = sext i32 %80 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !36
  %86 = sext i32 %81 to i64, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !36
  %88 = sext i32 %82 to i64, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !36
  %90 = sext i32 %83 to i64, !dbg !36
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !36
  %.idx = shl nuw nsw i32 %10, 3, !dbg !37
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %93 = bitcast float %66 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !37
  %94 = shl nuw nsw i32 %10, 1, !dbg !37
  %95 = or disjoint i32 %94, 2, !dbg !37
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !37
  %97 = bitcast float %69 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !37
  %98 = or disjoint i32 %94, 4, !dbg !37
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !37
  %100 = bitcast float %72 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !37
  %101 = or disjoint i32 %94, 6, !dbg !37
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !37
  %103 = bitcast float %75 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !37
  %104 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !37
  %105 = load i32, ptr addrspace(3) %104, align 8, !dbg !37
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !37
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !37
  %107 = load i32, ptr addrspace(3) %106, align 8, !dbg !37
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !37
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !37
  %109 = load i32, ptr addrspace(3) %108, align 8, !dbg !37
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !37
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !37
  %111 = load i32, ptr addrspace(3) %110, align 8, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %85, i1 %36) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %87, i1 %37) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %89, i1 %38) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %91, i1 %39) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chtd6poo2mv2m5zwldc2lhjorbcdvh6xe3wun7cej2dibulbwpgp.py", directory: "inductor_cache/ht")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 33, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 44, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
