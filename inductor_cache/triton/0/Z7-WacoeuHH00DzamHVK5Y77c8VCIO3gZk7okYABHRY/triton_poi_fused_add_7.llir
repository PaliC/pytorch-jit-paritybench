; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = and i32 %8, 3, !dbg !12
  %15 = and i32 %8, 7, !dbg !12
  %16 = or disjoint i32 %13, %7, !dbg !13
  %17 = or disjoint i32 %7, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %8, 3, !dbg !17
  %23 = and i32 %22, 3, !dbg !17
  %24 = or disjoint i32 %21, %14, !dbg !18
  %25 = or disjoint i32 %23, %21, !dbg !18
  %26 = icmp slt i32 %24, 4, !dbg !19
  %27 = icmp slt i32 %25, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %28 = sdiv i32 %.frozen, 4, !dbg !20
  %29 = mul i32 %28, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %16, 2, !dbg !22
  %31 = add i32 %24, %30, !dbg !23
  %32 = sext i32 %31 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = and i1 %18, %26, !dbg !25
  %35 = and i1 %19, %27, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %34) #2, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = sext i32 %24 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %26) #2, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = shl i32 %25, 2, !dbg !29
  %43 = add i32 %42, %.decomposed, !dbg !30
  %44 = shl i32 %28, 4, !dbg !31
  %45 = add i32 %43, %44, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %35) #2, !dbg !34
  %49 = bitcast i32 %48 to float, !dbg !34
  %50 = fadd float %37, %41, !dbg !35
  %51 = shl i32 %8, 3, !dbg !35
  %52 = and i32 %51, 24, !dbg !35
  %53 = or disjoint i32 %10, %52, !dbg !35
  %54 = or disjoint i32 %53, %12, !dbg !35
  %55 = and i32 %8, 31, !dbg !35
  %56 = lshr exact i32 %52, 1, !dbg !35
  %57 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %56, !dbg !35
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %54, !dbg !35
  %59 = bitcast float %50 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %60 = lshr i32 %55, 3, !dbg !35
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !35
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %55, !dbg !35
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !35
  %64 = fadd float %63, %49, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %65 = shl i32 %8, 2, !dbg !38
  %66 = and i32 %65, 28, !dbg !38
  %67 = or disjoint i32 %23, %66, !dbg !38
  %68 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !38
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %67, !dbg !38
  %70 = bitcast float %64 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %71 = lshr i32 %55, 2, !dbg !38
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !38
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %55, !dbg !38
  %74 = load i32, ptr addrspace(3) %73, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %74, ptr addrspace(1) %33, i1 %34) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccuue6uowhyhvmgo2flu7sukcw7d6rr67l3xj3lefwzk5ch6ttv.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused_add_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_7", linkageName: "triton_poi_fused_add_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
!38 = !DILocation(line: 38, column: 46, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
