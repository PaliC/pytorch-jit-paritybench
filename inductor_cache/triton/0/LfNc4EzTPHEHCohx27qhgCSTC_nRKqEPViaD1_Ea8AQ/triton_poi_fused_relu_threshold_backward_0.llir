; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 100352, !dbg !14
  %18 = icmp slt i32 %15, 100352, !dbg !14
  %19 = icmp slt i32 %16, 100352, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %20 = sdiv i32 %.frozen, 1568, !dbg !15
  %21 = mul i32 %20, 1568, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %14, 1568, !dbg !16
  %23 = sext i32 %13 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = sext i32 %14 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %15 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = sext i32 %16 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %17) #2, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !18
  %41 = sext i32 %.decomposed to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !19
  %43 = sext i32 %22 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %17) #2, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !20
  %55 = zext nneg i32 %9 to i64, !dbg !21
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !21
  %57 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 16, !dbg !21
  %58 = zext nneg i32 %11 to i64, !dbg !21
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !21
  %60 = zext nneg i32 %12 to i64, !dbg !21
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %60, !dbg !21
  %62 = getelementptr inbounds i8, ptr addrspace(3) %59, i64 4, !dbg !21
  %63 = getelementptr inbounds i8, ptr addrspace(3) %59, i64 8, !dbg !21
  %64 = getelementptr inbounds i8, ptr addrspace(3) %59, i64 12, !dbg !21
  %65 = mul i32 %20, 1664, !dbg !22
  %66 = add i32 %65, %.decomposed, !dbg !23
  %67 = sext i32 %66 to i64, !dbg !24
  %68 = getelementptr i1, ptr addrspace(1) %2, i64 %67, !dbg !24
  %69 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !18
  %70 = insertelement <4 x i32> %69, i32 %33, i64 1, !dbg !18
  %71 = insertelement <4 x i32> %70, i32 %34, i64 2, !dbg !18
  %72 = insertelement <4 x i32> %71, i32 %35, i64 3, !dbg !18
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !18
  %74 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !20
  %75 = insertelement <4 x i32> %74, i32 %47, i64 1, !dbg !20
  %76 = insertelement <4 x i32> %75, i32 %48, i64 2, !dbg !20
  %77 = insertelement <4 x i32> %76, i32 %49, i64 3, !dbg !20
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !20
  %79 = fadd <4 x float> %73, %78, !dbg !25
  %80 = fcmp olt <4 x float> %79, zeroinitializer, !dbg !26
  %81 = select <4 x i1> %80, <4 x float> zeroinitializer, <4 x float> %79, !dbg !30
  %82 = fcmp ole <4 x float> %81, zeroinitializer, !dbg !31
  %bc = bitcast <4 x float> %81 to <4 x i32>, !dbg !21
  %83 = extractelement <4 x i32> %bc, i64 0, !dbg !21
  %bc15 = bitcast <4 x float> %81 to <4 x i32>, !dbg !21
  %84 = extractelement <4 x i32> %bc15, i64 1, !dbg !21
  %bc16 = bitcast <4 x float> %81 to <4 x i32>, !dbg !21
  %85 = extractelement <4 x i32> %bc16, i64 2, !dbg !21
  %bc17 = bitcast <4 x float> %81 to <4 x i32>, !dbg !21
  %86 = extractelement <4 x i32> %bc17, i64 3, !dbg !21
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %83, i32 %84, i32 %85, i32 %86, i1 true) #2, !dbg !21
  %87 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !18
  %88 = insertelement <4 x i32> %87, i32 %38, i64 1, !dbg !18
  %89 = insertelement <4 x i32> %88, i32 %39, i64 2, !dbg !18
  %90 = insertelement <4 x i32> %89, i32 %40, i64 3, !dbg !18
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !18
  %92 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !20
  %93 = insertelement <4 x i32> %92, i32 %52, i64 1, !dbg !20
  %94 = insertelement <4 x i32> %93, i32 %53, i64 2, !dbg !20
  %95 = insertelement <4 x i32> %94, i32 %54, i64 3, !dbg !20
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !20
  %97 = fadd <4 x float> %91, %96, !dbg !25
  %98 = fcmp olt <4 x float> %97, zeroinitializer, !dbg !26
  %99 = select <4 x i1> %98, <4 x float> zeroinitializer, <4 x float> %97, !dbg !30
  %100 = fcmp ole <4 x float> %99, zeroinitializer, !dbg !31
  %bc18 = bitcast <4 x float> %99 to <4 x i32>, !dbg !21
  %101 = extractelement <4 x i32> %bc18, i64 0, !dbg !21
  %bc19 = bitcast <4 x float> %99 to <4 x i32>, !dbg !21
  %102 = extractelement <4 x i32> %bc19, i64 1, !dbg !21
  %bc20 = bitcast <4 x float> %99 to <4 x i32>, !dbg !21
  %103 = extractelement <4 x i32> %bc20, i64 2, !dbg !21
  %bc21 = bitcast <4 x float> %99 to <4 x i32>, !dbg !21
  %104 = extractelement <4 x i32> %bc21, i64 3, !dbg !21
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %57, i32 %101, i32 %102, i32 %103, i32 %104, i1 true) #2, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %105 = load <4 x i32>, ptr addrspace(3) %61, align 16, !dbg !21
  %.extract = load i32, ptr addrspace(3) %59, align 16, !dbg !21
  %.extract8 = load i32, ptr addrspace(3) %62, align 4, !dbg !21
  %.extract9 = load i32, ptr addrspace(3) %63, align 8, !dbg !21
  %.extract10 = load i32, ptr addrspace(3) %64, align 4, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %28, i1 %18) #2, !dbg !21
  %.extract11 = extractelement <4 x i32> %105, i64 0, !dbg !21
  %.extract12 = extractelement <4 x i32> %105, i64 1, !dbg !21
  %.extract13 = extractelement <4 x i32> %105, i64 2, !dbg !21
  %.extract14 = extractelement <4 x i32> %105, i64 3, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %30, i1 %19) #2, !dbg !21
  %106 = zext <4 x i1> %82 to <4 x i8>, !dbg !32
  %107 = bitcast <4 x i8> %106 to i32, !dbg !32
  %108 = zext <4 x i1> %100 to <4 x i8>, !dbg !32
  %109 = bitcast <4 x i8> %108 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %109, ptr addrspace(1) %68, i1 %17) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc53mwb3ke6vz5xx4wut5ttsvqst4x2glxvvap3h7skgzzjdwjak.py", directory: "inductor_cache/c5")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_0", linkageName: "triton_poi_fused_relu_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 25, scope: !7)
!25 = !DILocation(line: 29, column: 18, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 33, column: 19, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
