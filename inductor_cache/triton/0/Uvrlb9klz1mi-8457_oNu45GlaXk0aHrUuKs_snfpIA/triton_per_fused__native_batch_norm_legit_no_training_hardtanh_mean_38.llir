; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_hardtanh_mean_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 5120, !dbg !14
  %16 = lshr i32 %11, 3, !dbg !15
  %17 = and i32 %16, 31, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 1280, !dbg !16
  %19 = mul i32 %18, 1280, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = mul nuw nsw i32 %17, 1280, !dbg !18
  %21 = add nsw i32 %.decomposed, %20, !dbg !19
  %22 = mul i32 %18, 81920, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = add nsw i32 %21, 40960, !dbg !19
  %25 = add i32 %24, %22, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %32 = sext i32 %.decomposed to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #5, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #5, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %41 = bitcast i32 %37 to float, !dbg !27
  %42 = bitcast i32 %38 to float, !dbg !27
  %43 = bitcast i32 %39 to float, !dbg !27
  %44 = bitcast i32 %40 to float, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %15) #5, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %15) #5, !dbg !31
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !32
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !32
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !32
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %53, 0, !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i = icmp eq i32 %54, 0, !dbg !33
  br i1 %.not.i, label %60, label %55, !dbg !33

55:                                               ; preds = %8
  br i1 %.not1.i, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !33

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !33
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i8 = icmp eq i32 %65, 0, !dbg !33
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i11 = icmp eq i32 %66, 0, !dbg !33
  br i1 %.not.i8, label %72, label %67, !dbg !33

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %75, label %73, !dbg !33

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

__nv_sqrtf.exit12:                                ; preds = %68, %70, %73, %75
  %.0.i10 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !33
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i13 = icmp eq i32 %77, 0, !dbg !33
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i16 = icmp eq i32 %78, 0, !dbg !33
  br i1 %.not.i13, label %84, label %79, !dbg !33

79:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #5, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #5, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

84:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %87, label %85, !dbg !33

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #5, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #5, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

__nv_sqrtf.exit17:                                ; preds = %80, %82, %85, %87
  %.0.i15 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i18 = icmp eq i32 %89, 0, !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i21 = icmp eq i32 %90, 0, !dbg !33
  br i1 %.not.i18, label %96, label %91, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

96:                                               ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %99, label %97, !dbg !33

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

__nv_sqrtf.exit22:                                ; preds = %92, %94, %97, %99
  %.0.i20 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %104 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %106 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %108 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !31
  %115 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !31
  %117 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %121 = lshr i32 %11, 5, !dbg !15
  %122 = and i32 %11, 31, !dbg !12
  %123 = or disjoint i32 %10, %122, !dbg !13
  %124 = icmp slt i32 %123, 5120, !dbg !14
  %125 = and i32 %11, 24, !dbg !12
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !34
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #5, !dbg !34
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !34
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #5, !dbg !34
  %130 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !23
  %131 = insertelement <2 x i32> %130, i32 %107, i64 1, !dbg !23
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !23
  %133 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !35
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !35
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !35
  %136 = fsub <2 x float> %132, %135, !dbg !35
  %137 = insertelement <2 x float> poison, float %126, i64 0, !dbg !36
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %139 = fmul <2 x float> %136, %138, !dbg !36
  %140 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !37
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !37
  %142 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %143 = fmul <2 x float> %139, %142, !dbg !37
  %144 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !38
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !38
  %146 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  %147 = fadd <2 x float> %143, %146, !dbg !38
  %148 = fcmp ole <2 x float> %147, zeroinitializer, !dbg !39
  %149 = select <2 x i1> %148, <2 x float> zeroinitializer, <2 x float> %147, !dbg !39
  %150 = fcmp olt <2 x float> %149, splat (float 6.000000e+00), !dbg !43
  %151 = fcmp uno <2 x float> %149, zeroinitializer, !dbg !45
  %152 = or <2 x i1> %150, %151, !dbg !46
  %153 = select <2 x i1> %152, <2 x float> %149, <2 x float> splat (float 6.000000e+00), !dbg !47
  %154 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !23
  %155 = insertelement <2 x i32> %154, i32 %105, i64 1, !dbg !23
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !23
  %157 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !35
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !35
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !35
  %160 = fsub <2 x float> %156, %159, !dbg !35
  %161 = insertelement <2 x float> poison, float %127, i64 0, !dbg !36
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %163 = fmul <2 x float> %160, %162, !dbg !36
  %164 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !37
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !37
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %167 = fmul <2 x float> %163, %166, !dbg !37
  %168 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !38
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !38
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  %171 = fadd <2 x float> %167, %170, !dbg !38
  %172 = fcmp ole <2 x float> %171, zeroinitializer, !dbg !39
  %173 = select <2 x i1> %172, <2 x float> zeroinitializer, <2 x float> %171, !dbg !39
  %174 = fcmp olt <2 x float> %173, splat (float 6.000000e+00), !dbg !43
  %175 = fcmp uno <2 x float> %173, zeroinitializer, !dbg !45
  %176 = or <2 x i1> %174, %175, !dbg !46
  %177 = select <2 x i1> %176, <2 x float> %173, <2 x float> splat (float 6.000000e+00), !dbg !47
  %178 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !23
  %179 = insertelement <2 x i32> %178, i32 %103, i64 1, !dbg !23
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !23
  %181 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !35
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !35
  %183 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !35
  %184 = fsub <2 x float> %180, %183, !dbg !35
  %185 = insertelement <2 x float> poison, float %128, i64 0, !dbg !36
  %186 = shufflevector <2 x float> %185, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %187 = fmul <2 x float> %184, %186, !dbg !36
  %188 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !37
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !37
  %190 = shufflevector <2 x float> %189, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %191 = fmul <2 x float> %187, %190, !dbg !37
  %192 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !38
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !38
  %194 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  %195 = fadd <2 x float> %191, %194, !dbg !38
  %196 = fcmp ole <2 x float> %195, zeroinitializer, !dbg !39
  %197 = select <2 x i1> %196, <2 x float> zeroinitializer, <2 x float> %195, !dbg !39
  %198 = fcmp olt <2 x float> %197, splat (float 6.000000e+00), !dbg !43
  %199 = fcmp uno <2 x float> %197, zeroinitializer, !dbg !45
  %200 = or <2 x i1> %198, %199, !dbg !46
  %201 = select <2 x i1> %200, <2 x float> %197, <2 x float> splat (float 6.000000e+00), !dbg !47
  %202 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !23
  %203 = insertelement <2 x i32> %202, i32 %101, i64 1, !dbg !23
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !23
  %205 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !35
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !35
  %207 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !35
  %208 = fsub <2 x float> %204, %207, !dbg !35
  %209 = insertelement <2 x float> poison, float %129, i64 0, !dbg !36
  %210 = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %211 = fmul <2 x float> %208, %210, !dbg !36
  %212 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !37
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !37
  %214 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %215 = fmul <2 x float> %211, %214, !dbg !37
  %216 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !38
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !38
  %218 = shufflevector <2 x float> %217, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  %219 = fadd <2 x float> %215, %218, !dbg !38
  %220 = fcmp ole <2 x float> %219, zeroinitializer, !dbg !39
  %221 = select <2 x i1> %220, <2 x float> zeroinitializer, <2 x float> %219, !dbg !39
  %222 = fcmp olt <2 x float> %221, splat (float 6.000000e+00), !dbg !43
  %223 = fcmp uno <2 x float> %221, zeroinitializer, !dbg !45
  %224 = or <2 x i1> %222, %223, !dbg !46
  %225 = select <2 x i1> %224, <2 x float> %221, <2 x float> splat (float 6.000000e+00), !dbg !47
  %shift = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %226 = fadd <2 x float> %153, %shift, !dbg !48
  %227 = extractelement <2 x float> %226, i64 0, !dbg !48
  %228 = select i1 %15, float %227, float 0.000000e+00, !dbg !48
  %shift23 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %229 = fadd <2 x float> %177, %shift23, !dbg !48
  %230 = extractelement <2 x float> %229, i64 0, !dbg !48
  %231 = select i1 %15, float %230, float 0.000000e+00, !dbg !48
  %shift24 = shufflevector <2 x float> %201, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %232 = fadd <2 x float> %201, %shift24, !dbg !48
  %233 = extractelement <2 x float> %232, i64 0, !dbg !48
  %234 = select i1 %15, float %233, float 0.000000e+00, !dbg !48
  %shift25 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %235 = fadd <2 x float> %225, %shift25, !dbg !48
  %236 = extractelement <2 x float> %235, i64 0, !dbg !48
  %237 = select i1 %15, float %236, float 0.000000e+00, !dbg !48
  %238 = bitcast float %228 to i32, !dbg !53
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !53
  %240 = bitcast i32 %239 to float, !dbg !53
  %241 = fadd float %228, %240, !dbg !48
  %242 = bitcast float %241 to i32, !dbg !53
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !53
  %244 = bitcast i32 %243 to float, !dbg !53
  %245 = fadd float %241, %244, !dbg !48
  %246 = bitcast float %231 to i32, !dbg !53
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 16, i32 31), !dbg !53
  %248 = bitcast i32 %247 to float, !dbg !53
  %249 = fadd float %231, %248, !dbg !48
  %250 = bitcast float %249 to i32, !dbg !53
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !53
  %252 = bitcast i32 %251 to float, !dbg !53
  %253 = fadd float %249, %252, !dbg !48
  %254 = bitcast float %234 to i32, !dbg !53
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 16, i32 31), !dbg !53
  %256 = bitcast i32 %255 to float, !dbg !53
  %257 = fadd float %234, %256, !dbg !48
  %258 = bitcast float %257 to i32, !dbg !53
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !53
  %260 = bitcast i32 %259 to float, !dbg !53
  %261 = fadd float %257, %260, !dbg !48
  %262 = bitcast float %237 to i32, !dbg !53
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 16, i32 31), !dbg !53
  %264 = bitcast i32 %263 to float, !dbg !53
  %265 = fadd float %237, %264, !dbg !48
  %266 = bitcast float %265 to i32, !dbg !53
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !53
  %268 = bitcast i32 %267 to float, !dbg !53
  %269 = fadd float %265, %268, !dbg !48
  %270 = icmp eq i32 %125, 0, !dbg !53
  %271 = and i32 %121, 7, !dbg !53
  %272 = shl nuw nsw i32 %13, 3, !dbg !53
  %273 = or disjoint i32 %272, %271, !dbg !53
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !53
  %275 = bitcast float %245 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 %270) #5, !dbg !53
  %276 = or disjoint i32 %272, 8, !dbg !53
  %277 = or disjoint i32 %276, %271, !dbg !53
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !53
  %279 = bitcast float %253 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 %270) #5, !dbg !53
  %280 = or disjoint i32 %272, 16, !dbg !53
  %281 = or disjoint i32 %280, %271, !dbg !53
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !53
  %283 = bitcast float %261 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 %270) #5, !dbg !53
  %284 = or disjoint i32 %272, 24, !dbg !53
  %285 = or disjoint i32 %284, %271, !dbg !53
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !53
  %287 = bitcast float %269 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %270) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %288 = icmp slt i32 %11, 256, !dbg !53
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !53
  %290 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !53
  %291 = bitcast i32 %290 to float, !dbg !53
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !53
  %293 = bitcast i32 %292 to float, !dbg !53
  %294 = fadd float %291, %293, !dbg !48
  %295 = bitcast float %294 to i32, !dbg !53
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !53
  %297 = bitcast i32 %296 to float, !dbg !53
  %298 = fadd float %294, %297, !dbg !48
  %299 = bitcast float %298 to i32, !dbg !53
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !53
  %301 = bitcast i32 %300 to float, !dbg !53
  %302 = fadd float %298, %301, !dbg !48
  %303 = and i32 %11, 7, !dbg !53
  %304 = icmp eq i32 %303, 0, !dbg !53
  %305 = and i1 %288, %304, !dbg !53
  %306 = bitcast float %302 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %306, i1 %305) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !53
  %308 = load i32, ptr addrspace(3) %307, align 16, !dbg !53
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !53
  %310 = load i32, ptr addrspace(3) %309, align 16, !dbg !53
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !53
  %312 = load i32, ptr addrspace(3) %311, align 16, !dbg !53
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !53
  %314 = load i32, ptr addrspace(3) %313, align 16, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %315, i32 %308, i32 %310, i32 %312, i32 %314, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !54
  %317 = load float, ptr addrspace(3) %316, align 4, !dbg !54
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 6.400000e+01) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %319 = sext i32 %123 to i64, !dbg !56
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !56
  %321 = icmp eq i32 %271, 0, !dbg !57
  %322 = bitcast float %318 to i32, !dbg !57
  %323 = and i1 %321, %124, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %320, i1 %323) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwjr6werwarfbt74zojgryizce24yex2mnbazmerbwg3afkbn5np.py", directory: "inductor_cache/wj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_hardtanh_mean_38, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_hardtanh_mean_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_hardtanh_mean_38", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_hardtanh_mean_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !44)
!47 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !44)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 55, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
!56 = !DILocation(line: 59, column: 28, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 59, column: 4, scope: !7)
