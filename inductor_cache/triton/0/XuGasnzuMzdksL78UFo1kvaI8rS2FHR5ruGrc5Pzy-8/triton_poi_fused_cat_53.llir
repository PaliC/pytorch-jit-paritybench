; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 2, !dbg !12
  %27 = and i32 %26, 508, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = icmp slt i32 %28, 38912, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %30 = sdiv i32 %.frozen, 608, !dbg !15
  %31 = mul i32 %30, 608, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %32 = icmp slt i32 %.decomposed, 96, !dbg !17
  %33 = mul nsw i32 %30, 96, !dbg !18
  %34 = add nsw i32 %33, %.decomposed, !dbg !19
  %35 = sext i32 %34 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = and i1 %29, %32, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !22
  %39 = sext i32 %.decomposed to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = fadd float %48, 0x3EE4F8B580000000, !dbg !27
  %53 = fadd float %49, 0x3EE4F8B580000000, !dbg !27
  %54 = fadd float %50, 0x3EE4F8B580000000, !dbg !27
  %55 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %56, 0, !dbg !28
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %57, 0, !dbg !28
  br i1 %.not.i, label %63, label %58, !dbg !28

58:                                               ; preds = %22
  br i1 %.not1.i, label %61, label %59, !dbg !28

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

63:                                               ; preds = %22
  br i1 %.not1.i, label %66, label %64, !dbg !28

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !28
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %68, 0, !dbg !28
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %69, 0, !dbg !28
  br i1 %.not.i1, label %75, label %70, !dbg !28

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !28

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !28

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %71, %73, %76, %78
  %.0.i3 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !28
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %80, 0, !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %81, 0, !dbg !28
  br i1 %.not.i6, label %87, label %82, !dbg !28

82:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %85, label %83, !dbg !28

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %83, %85, %88, %90
  %.0.i8 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !28
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %92, 0, !dbg !28
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %93, 0, !dbg !28
  br i1 %.not.i11, label %99, label %94, !dbg !28

94:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %97, label %95, !dbg !28

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !28

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %95, %97, %100, %102
  %.0.i13 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !28
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !32
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !33
  %112 = add nsw i32 %.decomposed, -96, !dbg !34
  %113 = icmp ult i32 %112, 192, !dbg !34
  %114 = mul nsw i32 %30, 192, !dbg !35
  %115 = add nsw i32 %114, %112, !dbg !36
  %116 = sext i32 %115 to i64, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !37
  %118 = and i1 %29, %113, !dbg !38
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !39
  %120 = sext i32 %112 to i64, !dbg !40
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %120, !dbg !40
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !41
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %120, !dbg !42
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %129 = bitcast i32 %125 to float, !dbg !43
  %130 = bitcast i32 %126 to float, !dbg !43
  %131 = bitcast i32 %127 to float, !dbg !43
  %132 = bitcast i32 %128 to float, !dbg !43
  %133 = fadd float %129, 0x3EE4F8B580000000, !dbg !44
  %134 = fadd float %130, 0x3EE4F8B580000000, !dbg !44
  %135 = fadd float %131, 0x3EE4F8B580000000, !dbg !44
  %136 = fadd float %132, 0x3EE4F8B580000000, !dbg !44
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i16 = icmp eq i32 %137, 0, !dbg !45
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i19 = icmp eq i32 %138, 0, !dbg !45
  br i1 %.not.i16, label %144, label %139, !dbg !45

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %142, label %140, !dbg !45

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !45

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %140, %142, %145, %147
  %.0.i18 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !45
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i21 = icmp eq i32 %149, 0, !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i24 = icmp eq i32 %150, 0, !dbg !45
  br i1 %.not.i21, label %156, label %151, !dbg !45

151:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %154, label %152, !dbg !45

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !45

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

__nv_sqrtf.exit25:                                ; preds = %152, %154, %157, %159
  %.0.i23 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !45
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i26 = icmp eq i32 %161, 0, !dbg !45
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i29 = icmp eq i32 %162, 0, !dbg !45
  br i1 %.not.i26, label %168, label %163, !dbg !45

163:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %166, label %164, !dbg !45

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

168:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %171, label %169, !dbg !45

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

__nv_sqrtf.exit30:                                ; preds = %164, %166, %169, %171
  %.0.i28 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !45
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i31 = icmp eq i32 %173, 0, !dbg !45
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i34 = icmp eq i32 %174, 0, !dbg !45
  br i1 %.not.i31, label %180, label %175, !dbg !45

175:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %178, label %176, !dbg !45

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

180:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %183, label %181, !dbg !45

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %176, %178, %181, %183
  %.0.i33 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !45
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !46
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !46
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !46
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !46
  %189 = getelementptr float, ptr addrspace(1) %8, i64 %120, !dbg !47
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !48
  %191 = getelementptr float, ptr addrspace(1) %9, i64 %120, !dbg !49
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !50
  %193 = add nsw i32 %.decomposed, -288, !dbg !51
  %194 = icmp ult i32 %193, 192, !dbg !51
  %195 = add nsw i32 %114, %193, !dbg !52
  %196 = sext i32 %195 to i64, !dbg !53
  %197 = getelementptr float, ptr addrspace(1) %10, i64 %196, !dbg !53
  %198 = and i1 %29, %194, !dbg !54
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !55
  %200 = sext i32 %193 to i64, !dbg !56
  %201 = getelementptr float, ptr addrspace(1) %11, i64 %200, !dbg !56
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !57
  %203 = getelementptr float, ptr addrspace(1) %12, i64 %200, !dbg !58
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !59
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !59
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !59
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !59
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !59
  %209 = bitcast i32 %205 to float, !dbg !59
  %210 = bitcast i32 %206 to float, !dbg !59
  %211 = bitcast i32 %207 to float, !dbg !59
  %212 = bitcast i32 %208 to float, !dbg !59
  %213 = fadd float %209, 0x3EE4F8B580000000, !dbg !60
  %214 = fadd float %210, 0x3EE4F8B580000000, !dbg !60
  %215 = fadd float %211, 0x3EE4F8B580000000, !dbg !60
  %216 = fadd float %212, 0x3EE4F8B580000000, !dbg !60
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i36 = icmp eq i32 %217, 0, !dbg !61
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i39 = icmp eq i32 %218, 0, !dbg !61
  br i1 %.not.i36, label %224, label %219, !dbg !61

219:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %222, label %220, !dbg !61

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !61
  br label %__nv_sqrtf.exit40, !dbg !61

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !61
  br label %__nv_sqrtf.exit40, !dbg !61

224:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %227, label %225, !dbg !61

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !61
  br label %__nv_sqrtf.exit40, !dbg !61

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !61
  br label %__nv_sqrtf.exit40, !dbg !61

__nv_sqrtf.exit40:                                ; preds = %220, %222, %225, %227
  %.0.i38 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !61
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i41 = icmp eq i32 %229, 0, !dbg !61
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i44 = icmp eq i32 %230, 0, !dbg !61
  br i1 %.not.i41, label %236, label %231, !dbg !61

231:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %234, label %232, !dbg !61

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #3, !dbg !61
  br label %__nv_sqrtf.exit45, !dbg !61

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #3, !dbg !61
  br label %__nv_sqrtf.exit45, !dbg !61

236:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %239, label %237, !dbg !61

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #3, !dbg !61
  br label %__nv_sqrtf.exit45, !dbg !61

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #3, !dbg !61
  br label %__nv_sqrtf.exit45, !dbg !61

__nv_sqrtf.exit45:                                ; preds = %232, %234, %237, %239
  %.0.i43 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !61
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i46 = icmp eq i32 %241, 0, !dbg !61
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i49 = icmp eq i32 %242, 0, !dbg !61
  br i1 %.not.i46, label %248, label %243, !dbg !61

243:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %246, label %244, !dbg !61

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !61
  br label %__nv_sqrtf.exit50, !dbg !61

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !61
  br label %__nv_sqrtf.exit50, !dbg !61

248:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %251, label %249, !dbg !61

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !61
  br label %__nv_sqrtf.exit50, !dbg !61

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !61
  br label %__nv_sqrtf.exit50, !dbg !61

__nv_sqrtf.exit50:                                ; preds = %244, %246, %249, %251
  %.0.i48 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !61
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i51 = icmp eq i32 %253, 0, !dbg !61
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i54 = icmp eq i32 %254, 0, !dbg !61
  br i1 %.not.i51, label %260, label %255, !dbg !61

255:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %258, label %256, !dbg !61

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #3, !dbg !61
  br label %__nv_sqrtf.exit55, !dbg !61

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #3, !dbg !61
  br label %__nv_sqrtf.exit55, !dbg !61

260:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %263, label %261, !dbg !61

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #3, !dbg !61
  br label %__nv_sqrtf.exit55, !dbg !61

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #3, !dbg !61
  br label %__nv_sqrtf.exit55, !dbg !61

__nv_sqrtf.exit55:                                ; preds = %256, %258, %261, %263
  %.0.i53 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !61
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !62
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !62
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !62
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !62
  %269 = getelementptr float, ptr addrspace(1) %13, i64 %200, !dbg !63
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %269, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !64
  %271 = getelementptr float, ptr addrspace(1) %14, i64 %200, !dbg !65
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %271, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !66
  %273 = icmp sgt i32 %.decomposed, 479, !dbg !67
  %274 = shl nsw i32 %30, 7, !dbg !68
  %275 = add nsw i32 %.decomposed, -480, !dbg !69
  %276 = add nsw i32 %274, %275, !dbg !70
  %277 = sext i32 %276 to i64, !dbg !71
  %278 = getelementptr float, ptr addrspace(1) %15, i64 %277, !dbg !71
  %279 = and i1 %29, %273, !dbg !72
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279) #3, !dbg !73
  %281 = sext i32 %275 to i64, !dbg !74
  %282 = getelementptr float, ptr addrspace(1) %16, i64 %281, !dbg !74
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279) #3, !dbg !75
  %284 = getelementptr float, ptr addrspace(1) %17, i64 %281, !dbg !76
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279) #3, !dbg !77
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !77
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !77
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !77
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !77
  %290 = bitcast i32 %286 to float, !dbg !77
  %291 = bitcast i32 %287 to float, !dbg !77
  %292 = bitcast i32 %288 to float, !dbg !77
  %293 = bitcast i32 %289 to float, !dbg !77
  %294 = fadd float %290, 0x3EE4F8B580000000, !dbg !78
  %295 = fadd float %291, 0x3EE4F8B580000000, !dbg !78
  %296 = fadd float %292, 0x3EE4F8B580000000, !dbg !78
  %297 = fadd float %293, 0x3EE4F8B580000000, !dbg !78
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i56 = icmp eq i32 %298, 0, !dbg !79
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i59 = icmp eq i32 %299, 0, !dbg !79
  br i1 %.not.i56, label %305, label %300, !dbg !79

300:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %303, label %301, !dbg !79

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %294) #3, !dbg !79
  br label %__nv_sqrtf.exit60, !dbg !79

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %294) #3, !dbg !79
  br label %__nv_sqrtf.exit60, !dbg !79

305:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %308, label %306, !dbg !79

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %294) #3, !dbg !79
  br label %__nv_sqrtf.exit60, !dbg !79

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %294) #3, !dbg !79
  br label %__nv_sqrtf.exit60, !dbg !79

__nv_sqrtf.exit60:                                ; preds = %301, %303, %306, %308
  %.0.i58 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !79
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i61 = icmp eq i32 %310, 0, !dbg !79
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i64 = icmp eq i32 %311, 0, !dbg !79
  br i1 %.not.i61, label %317, label %312, !dbg !79

312:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %315, label %313, !dbg !79

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #3, !dbg !79
  br label %__nv_sqrtf.exit65, !dbg !79

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #3, !dbg !79
  br label %__nv_sqrtf.exit65, !dbg !79

317:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %320, label %318, !dbg !79

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #3, !dbg !79
  br label %__nv_sqrtf.exit65, !dbg !79

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #3, !dbg !79
  br label %__nv_sqrtf.exit65, !dbg !79

__nv_sqrtf.exit65:                                ; preds = %313, %315, %318, %320
  %.0.i63 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !79
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i66 = icmp eq i32 %322, 0, !dbg !79
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i69 = icmp eq i32 %323, 0, !dbg !79
  br i1 %.not.i66, label %329, label %324, !dbg !79

324:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %327, label %325, !dbg !79

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #3, !dbg !79
  br label %__nv_sqrtf.exit70, !dbg !79

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #3, !dbg !79
  br label %__nv_sqrtf.exit70, !dbg !79

329:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %332, label %330, !dbg !79

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #3, !dbg !79
  br label %__nv_sqrtf.exit70, !dbg !79

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #3, !dbg !79
  br label %__nv_sqrtf.exit70, !dbg !79

__nv_sqrtf.exit70:                                ; preds = %325, %327, %330, %332
  %.0.i68 = phi float [ %326, %325 ], [ %328, %327 ], [ %331, %330 ], [ %333, %332 ], !dbg !79
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i71 = icmp eq i32 %334, 0, !dbg !79
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i74 = icmp eq i32 %335, 0, !dbg !79
  br i1 %.not.i71, label %341, label %336, !dbg !79

336:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %339, label %337, !dbg !79

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #3, !dbg !79
  br label %__nv_sqrtf.exit75, !dbg !79

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #3, !dbg !79
  br label %__nv_sqrtf.exit75, !dbg !79

341:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %344, label %342, !dbg !79

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #3, !dbg !79
  br label %__nv_sqrtf.exit75, !dbg !79

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #3, !dbg !79
  br label %__nv_sqrtf.exit75, !dbg !79

__nv_sqrtf.exit75:                                ; preds = %337, %339, %342, %344
  %.0.i73 = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !79
  %346 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !73
  %347 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !75
  %348 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !73
  %349 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !75
  %350 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !73
  %351 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !75
  %352 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !73
  %353 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !75
  %354 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !55
  %355 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !57
  %356 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !64
  %357 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !66
  %358 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !55
  %359 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !57
  %360 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !64
  %361 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !66
  %362 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !55
  %363 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !57
  %364 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !64
  %365 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !66
  %366 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !55
  %367 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !57
  %368 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !64
  %369 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !66
  %370 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !39
  %371 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !41
  %372 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !48
  %373 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !50
  %374 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !39
  %375 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !41
  %376 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !48
  %377 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !50
  %378 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !39
  %379 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !41
  %380 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !48
  %381 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !50
  %382 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !39
  %383 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !41
  %384 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !48
  %385 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !50
  %386 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %387 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %388 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !31
  %389 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !33
  %390 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %391 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %392 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !31
  %393 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !33
  %394 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %395 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %396 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !31
  %397 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !33
  %398 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %399 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %400 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !31
  %401 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !33
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !80
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !80
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !80
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !80
  %406 = getelementptr float, ptr addrspace(1) %18, i64 %281, !dbg !81
  %407 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %406, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279) #3, !dbg !82
  %408 = extractvalue { i32, i32, i32, i32 } %407, 0, !dbg !82
  %409 = extractvalue { i32, i32, i32, i32 } %407, 1, !dbg !82
  %410 = extractvalue { i32, i32, i32, i32 } %407, 2, !dbg !82
  %411 = extractvalue { i32, i32, i32, i32 } %407, 3, !dbg !82
  %412 = getelementptr float, ptr addrspace(1) %19, i64 %281, !dbg !83
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %412, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279, i32 0, i1 %279) #3, !dbg !84
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !84
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !84
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !84
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !84
  %418 = insertelement <16 x i32> poison, i32 %346, i64 0, !dbg !73
  %419 = insertelement <16 x i32> %418, i32 %348, i64 1, !dbg !73
  %420 = insertelement <16 x i32> %419, i32 %350, i64 2, !dbg !73
  %421 = insertelement <16 x i32> %420, i32 %352, i64 3, !dbg !73
  %422 = insertelement <16 x i32> %421, i32 %398, i64 4, !dbg !73
  %423 = insertelement <16 x i32> %422, i32 %394, i64 5, !dbg !73
  %424 = insertelement <16 x i32> %423, i32 %390, i64 6, !dbg !73
  %425 = insertelement <16 x i32> %424, i32 %386, i64 7, !dbg !73
  %426 = insertelement <16 x i32> %425, i32 %382, i64 8, !dbg !73
  %427 = insertelement <16 x i32> %426, i32 %378, i64 9, !dbg !73
  %428 = insertelement <16 x i32> %427, i32 %374, i64 10, !dbg !73
  %429 = insertelement <16 x i32> %428, i32 %370, i64 11, !dbg !73
  %430 = insertelement <16 x i32> %429, i32 %366, i64 12, !dbg !73
  %431 = insertelement <16 x i32> %430, i32 %362, i64 13, !dbg !73
  %432 = insertelement <16 x i32> %431, i32 %358, i64 14, !dbg !73
  %433 = insertelement <16 x i32> %432, i32 %354, i64 15, !dbg !73
  %434 = bitcast <16 x i32> %433 to <16 x float>, !dbg !73
  %435 = insertelement <16 x i32> poison, i32 %347, i64 0, !dbg !75
  %436 = insertelement <16 x i32> %435, i32 %349, i64 1, !dbg !75
  %437 = insertelement <16 x i32> %436, i32 %351, i64 2, !dbg !75
  %438 = insertelement <16 x i32> %437, i32 %353, i64 3, !dbg !75
  %439 = insertelement <16 x i32> %438, i32 %399, i64 4, !dbg !75
  %440 = insertelement <16 x i32> %439, i32 %395, i64 5, !dbg !75
  %441 = insertelement <16 x i32> %440, i32 %391, i64 6, !dbg !75
  %442 = insertelement <16 x i32> %441, i32 %387, i64 7, !dbg !75
  %443 = insertelement <16 x i32> %442, i32 %383, i64 8, !dbg !75
  %444 = insertelement <16 x i32> %443, i32 %379, i64 9, !dbg !75
  %445 = insertelement <16 x i32> %444, i32 %375, i64 10, !dbg !75
  %446 = insertelement <16 x i32> %445, i32 %371, i64 11, !dbg !75
  %447 = insertelement <16 x i32> %446, i32 %367, i64 12, !dbg !75
  %448 = insertelement <16 x i32> %447, i32 %363, i64 13, !dbg !75
  %449 = insertelement <16 x i32> %448, i32 %359, i64 14, !dbg !75
  %450 = insertelement <16 x i32> %449, i32 %355, i64 15, !dbg !75
  %451 = bitcast <16 x i32> %450 to <16 x float>, !dbg !75
  %452 = fsub <16 x float> %434, %451, !dbg !85
  %453 = insertelement <16 x float> poison, float %405, i64 0, !dbg !86
  %454 = insertelement <16 x float> %453, float %404, i64 1, !dbg !86
  %455 = insertelement <16 x float> %454, float %403, i64 2, !dbg !86
  %456 = insertelement <16 x float> %455, float %402, i64 3, !dbg !86
  %457 = insertelement <16 x float> %456, float %104, i64 4, !dbg !86
  %458 = insertelement <16 x float> %457, float %105, i64 5, !dbg !86
  %459 = insertelement <16 x float> %458, float %106, i64 6, !dbg !86
  %460 = insertelement <16 x float> %459, float %107, i64 7, !dbg !86
  %461 = insertelement <16 x float> %460, float %185, i64 8, !dbg !86
  %462 = insertelement <16 x float> %461, float %186, i64 9, !dbg !86
  %463 = insertelement <16 x float> %462, float %187, i64 10, !dbg !86
  %464 = insertelement <16 x float> %463, float %188, i64 11, !dbg !86
  %465 = insertelement <16 x float> %464, float %265, i64 12, !dbg !86
  %466 = insertelement <16 x float> %465, float %266, i64 13, !dbg !86
  %467 = insertelement <16 x float> %466, float %267, i64 14, !dbg !86
  %468 = insertelement <16 x float> %467, float %268, i64 15, !dbg !86
  %469 = fmul <16 x float> %452, %468, !dbg !86
  %470 = insertelement <16 x i32> poison, i32 %411, i64 0, !dbg !82
  %471 = insertelement <16 x i32> %470, i32 %410, i64 1, !dbg !82
  %472 = insertelement <16 x i32> %471, i32 %409, i64 2, !dbg !82
  %473 = insertelement <16 x i32> %472, i32 %408, i64 3, !dbg !82
  %474 = insertelement <16 x i32> %473, i32 %400, i64 4, !dbg !82
  %475 = insertelement <16 x i32> %474, i32 %396, i64 5, !dbg !82
  %476 = insertelement <16 x i32> %475, i32 %392, i64 6, !dbg !82
  %477 = insertelement <16 x i32> %476, i32 %388, i64 7, !dbg !82
  %478 = insertelement <16 x i32> %477, i32 %384, i64 8, !dbg !82
  %479 = insertelement <16 x i32> %478, i32 %380, i64 9, !dbg !82
  %480 = insertelement <16 x i32> %479, i32 %376, i64 10, !dbg !82
  %481 = insertelement <16 x i32> %480, i32 %372, i64 11, !dbg !82
  %482 = insertelement <16 x i32> %481, i32 %368, i64 12, !dbg !82
  %483 = insertelement <16 x i32> %482, i32 %364, i64 13, !dbg !82
  %484 = insertelement <16 x i32> %483, i32 %360, i64 14, !dbg !82
  %485 = insertelement <16 x i32> %484, i32 %356, i64 15, !dbg !82
  %486 = bitcast <16 x i32> %485 to <16 x float>, !dbg !82
  %487 = fmul <16 x float> %469, %486, !dbg !87
  %488 = insertelement <16 x i32> poison, i32 %417, i64 0, !dbg !84
  %489 = insertelement <16 x i32> %488, i32 %416, i64 1, !dbg !84
  %490 = insertelement <16 x i32> %489, i32 %415, i64 2, !dbg !84
  %491 = insertelement <16 x i32> %490, i32 %414, i64 3, !dbg !84
  %492 = insertelement <16 x i32> %491, i32 %401, i64 4, !dbg !84
  %493 = insertelement <16 x i32> %492, i32 %397, i64 5, !dbg !84
  %494 = insertelement <16 x i32> %493, i32 %393, i64 6, !dbg !84
  %495 = insertelement <16 x i32> %494, i32 %389, i64 7, !dbg !84
  %496 = insertelement <16 x i32> %495, i32 %385, i64 8, !dbg !84
  %497 = insertelement <16 x i32> %496, i32 %381, i64 9, !dbg !84
  %498 = insertelement <16 x i32> %497, i32 %377, i64 10, !dbg !84
  %499 = insertelement <16 x i32> %498, i32 %373, i64 11, !dbg !84
  %500 = insertelement <16 x i32> %499, i32 %369, i64 12, !dbg !84
  %501 = insertelement <16 x i32> %500, i32 %365, i64 13, !dbg !84
  %502 = insertelement <16 x i32> %501, i32 %361, i64 14, !dbg !84
  %503 = insertelement <16 x i32> %502, i32 %357, i64 15, !dbg !84
  %504 = bitcast <16 x i32> %503 to <16 x float>, !dbg !84
  %505 = fadd <16 x float> %487, %504, !dbg !88
  %506 = fcmp olt <16 x float> %505, zeroinitializer, !dbg !89
  %507 = extractelement <16 x i1> %506, i64 15, !dbg !93
  %508 = extractelement <16 x float> %505, i64 15, !dbg !93
  %509 = select i1 %507, float 0.000000e+00, float %508, !dbg !93
  %510 = extractelement <16 x i1> %506, i64 14, !dbg !93
  %511 = extractelement <16 x float> %505, i64 14, !dbg !93
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !93
  %513 = extractelement <16 x i1> %506, i64 13, !dbg !93
  %514 = extractelement <16 x float> %505, i64 13, !dbg !93
  %515 = select i1 %513, float 0.000000e+00, float %514, !dbg !93
  %516 = extractelement <16 x i1> %506, i64 12, !dbg !93
  %517 = extractelement <16 x float> %505, i64 12, !dbg !93
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !93
  %519 = extractelement <16 x i1> %506, i64 11, !dbg !95
  %520 = extractelement <16 x float> %505, i64 11, !dbg !95
  %521 = select i1 %519, float 0.000000e+00, float %520, !dbg !95
  %522 = extractelement <16 x i1> %506, i64 10, !dbg !95
  %523 = extractelement <16 x float> %505, i64 10, !dbg !95
  %524 = select i1 %522, float 0.000000e+00, float %523, !dbg !95
  %525 = extractelement <16 x i1> %506, i64 9, !dbg !95
  %526 = extractelement <16 x float> %505, i64 9, !dbg !95
  %527 = select i1 %525, float 0.000000e+00, float %526, !dbg !95
  %528 = extractelement <16 x i1> %506, i64 8, !dbg !95
  %529 = extractelement <16 x float> %505, i64 8, !dbg !95
  %530 = select i1 %528, float 0.000000e+00, float %529, !dbg !95
  %531 = extractelement <16 x i1> %506, i64 7, !dbg !97
  %532 = extractelement <16 x float> %505, i64 7, !dbg !97
  %533 = select i1 %531, float 0.000000e+00, float %532, !dbg !97
  %534 = extractelement <16 x i1> %506, i64 6, !dbg !97
  %535 = extractelement <16 x float> %505, i64 6, !dbg !97
  %536 = select i1 %534, float 0.000000e+00, float %535, !dbg !97
  %537 = extractelement <16 x i1> %506, i64 5, !dbg !97
  %538 = extractelement <16 x float> %505, i64 5, !dbg !97
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !97
  %540 = extractelement <16 x i1> %506, i64 4, !dbg !97
  %541 = extractelement <16 x float> %505, i64 4, !dbg !97
  %542 = select i1 %540, float 0.000000e+00, float %541, !dbg !97
  %543 = extractelement <16 x i1> %506, i64 3, !dbg !99
  %544 = extractelement <16 x float> %505, i64 3, !dbg !99
  %545 = select i1 %543, float 0.000000e+00, float %544, !dbg !99
  %546 = extractelement <16 x i1> %506, i64 2, !dbg !99
  %547 = extractelement <16 x float> %505, i64 2, !dbg !99
  %548 = select i1 %546, float 0.000000e+00, float %547, !dbg !99
  %549 = extractelement <16 x i1> %506, i64 1, !dbg !99
  %550 = extractelement <16 x float> %505, i64 1, !dbg !99
  %551 = select i1 %549, float 0.000000e+00, float %550, !dbg !99
  %552 = extractelement <16 x i1> %506, i64 0, !dbg !99
  %553 = extractelement <16 x float> %505, i64 0, !dbg !99
  %554 = select i1 %552, float 0.000000e+00, float %553, !dbg !99
  %555 = select i1 %273, float %545, float 0.000000e+00, !dbg !100
  %556 = select i1 %273, float %548, float 0.000000e+00, !dbg !100
  %557 = select i1 %273, float %551, float 0.000000e+00, !dbg !100
  %558 = select i1 %273, float %554, float 0.000000e+00, !dbg !100
  %559 = select i1 %194, float %518, float %555, !dbg !101
  %560 = select i1 %194, float %515, float %556, !dbg !101
  %561 = select i1 %194, float %512, float %557, !dbg !101
  %562 = select i1 %194, float %509, float %558, !dbg !101
  %563 = select i1 %113, float %530, float %559, !dbg !101
  %564 = select i1 %113, float %527, float %560, !dbg !101
  %565 = select i1 %113, float %524, float %561, !dbg !101
  %566 = select i1 %113, float %521, float %562, !dbg !101
  %567 = select i1 %32, float %542, float %563, !dbg !101
  %568 = select i1 %32, float %539, float %564, !dbg !101
  %569 = select i1 %32, float %536, float %565, !dbg !101
  %570 = select i1 %32, float %533, float %566, !dbg !101
  %571 = sext i32 %28 to i64, !dbg !102
  %572 = getelementptr float, ptr addrspace(1) %20, i64 %571, !dbg !102
  %573 = bitcast float %567 to i32, !dbg !103
  %574 = bitcast float %568 to i32, !dbg !103
  %575 = bitcast float %569 to i32, !dbg !103
  %576 = bitcast float %570 to i32, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %573, i32 %574, i32 %575, i32 %576, ptr addrspace(1) %572, i1 %29) #3, !dbg !103
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chztizv2c6v3xiwztl2wqo5fmpxo7rllrgfqqtf2x5rhpj4vqpo5.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused_cat_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_53", linkageName: "triton_poi_fused_cat_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 33, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 36, scope: !7)
!34 = !DILocation(line: 55, column: 20, scope: !7)
!35 = !DILocation(line: 56, column: 35, scope: !7)
!36 = !DILocation(line: 56, column: 41, scope: !7)
!37 = !DILocation(line: 56, column: 31, scope: !7)
!38 = !DILocation(line: 56, column: 63, scope: !7)
!39 = !DILocation(line: 56, column: 55, scope: !7)
!40 = !DILocation(line: 57, column: 31, scope: !7)
!41 = !DILocation(line: 57, column: 44, scope: !7)
!42 = !DILocation(line: 59, column: 31, scope: !7)
!43 = !DILocation(line: 59, column: 44, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 27, scope: !7)
!46 = !DILocation(line: 64, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 31, scope: !7)
!48 = !DILocation(line: 68, column: 44, scope: !7)
!49 = !DILocation(line: 70, column: 31, scope: !7)
!50 = !DILocation(line: 70, column: 44, scope: !7)
!51 = !DILocation(line: 79, column: 20, scope: !7)
!52 = !DILocation(line: 80, column: 42, scope: !7)
!53 = !DILocation(line: 80, column: 32, scope: !7)
!54 = !DILocation(line: 80, column: 65, scope: !7)
!55 = !DILocation(line: 80, column: 57, scope: !7)
!56 = !DILocation(line: 81, column: 32, scope: !7)
!57 = !DILocation(line: 81, column: 46, scope: !7)
!58 = !DILocation(line: 83, column: 32, scope: !7)
!59 = !DILocation(line: 83, column: 46, scope: !7)
!60 = !DILocation(line: 85, column: 20, scope: !7)
!61 = !DILocation(line: 86, column: 27, scope: !7)
!62 = !DILocation(line: 88, column: 20, scope: !7)
!63 = !DILocation(line: 92, column: 32, scope: !7)
!64 = !DILocation(line: 92, column: 46, scope: !7)
!65 = !DILocation(line: 94, column: 32, scope: !7)
!66 = !DILocation(line: 94, column: 46, scope: !7)
!67 = !DILocation(line: 100, column: 20, scope: !7)
!68 = !DILocation(line: 103, column: 36, scope: !7)
!69 = !DILocation(line: 103, column: 51, scope: !7)
!70 = !DILocation(line: 103, column: 42, scope: !7)
!71 = !DILocation(line: 103, column: 32, scope: !7)
!72 = !DILocation(line: 103, column: 65, scope: !7)
!73 = !DILocation(line: 103, column: 57, scope: !7)
!74 = !DILocation(line: 104, column: 32, scope: !7)
!75 = !DILocation(line: 104, column: 46, scope: !7)
!76 = !DILocation(line: 106, column: 32, scope: !7)
!77 = !DILocation(line: 106, column: 46, scope: !7)
!78 = !DILocation(line: 108, column: 20, scope: !7)
!79 = !DILocation(line: 109, column: 27, scope: !7)
!80 = !DILocation(line: 111, column: 20, scope: !7)
!81 = !DILocation(line: 115, column: 32, scope: !7)
!82 = !DILocation(line: 115, column: 46, scope: !7)
!83 = !DILocation(line: 117, column: 32, scope: !7)
!84 = !DILocation(line: 117, column: 46, scope: !7)
!85 = !DILocation(line: 105, column: 20, scope: !7)
!86 = !DILocation(line: 114, column: 20, scope: !7)
!87 = !DILocation(line: 116, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 120, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !94)
!94 = !DILocation(line: 97, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 73, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!100 = !DILocation(line: 122, column: 35, scope: !7)
!101 = !DILocation(line: 0, scope: !7)
!102 = !DILocation(line: 126, column: 25, scope: !7)
!103 = !DILocation(line: 126, column: 37, scope: !7)
!104 = !DILocation(line: 126, column: 4, scope: !7)
