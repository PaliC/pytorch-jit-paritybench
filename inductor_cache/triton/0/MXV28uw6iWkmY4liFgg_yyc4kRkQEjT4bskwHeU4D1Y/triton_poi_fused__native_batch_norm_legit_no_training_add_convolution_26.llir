; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 2, !dbg !13
  %22 = icmp slt i32 %20, 38400, !dbg !14
  %23 = srem i32 %20, 150, !dbg !15
  %24 = srem i32 %21, 150, !dbg !15
  %25 = sext i32 %20 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %22) #3, !dbg !17
  %28 = sext i32 %23 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !18
  %30 = sext i32 %24 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !18
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !19
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #3, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !27
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !27
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !27
  %49 = bitcast i32 %47 to float, !dbg !27
  %50 = bitcast i32 %48 to float, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %22) #3, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %54 = bitcast i32 %52 to float, !dbg !27
  %55 = bitcast i32 %53 to float, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !28
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %22) #3, !dbg !29
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %22) #3, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !30
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %22) #3, !dbg !31
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %22) #3, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !32
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %22) #3, !dbg !33
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !34
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !35
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !35
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !35
  %73 = bitcast i32 %71 to float, !dbg !35
  %74 = bitcast i32 %72 to float, !dbg !35
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %22) #3, !dbg !35
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !35
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !35
  %78 = bitcast i32 %76 to float, !dbg !35
  %79 = bitcast i32 %77 to float, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !36
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %22) #3, !dbg !37
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %22) #3, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !38
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %22) #3, !dbg !39
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %22) #3, !dbg !39
  %88 = fadd float %49, 0x3EE4F8B580000000, !dbg !40
  %89 = fadd float %50, 0x3EE4F8B580000000, !dbg !40
  %90 = fadd float %54, 0x3EE4F8B580000000, !dbg !40
  %91 = fadd float %55, 0x3EE4F8B580000000, !dbg !40
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %92, 0, !dbg !41
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %93, 0, !dbg !41
  br i1 %.not.i, label %99, label %94, !dbg !41

94:                                               ; preds = %14
  br i1 %.not1.i, label %97, label %95, !dbg !41

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

99:                                               ; preds = %14
  br i1 %.not1.i, label %102, label %100, !dbg !41

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %95, %97, %100, %102
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !41
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %104, 0, !dbg !41
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %105, 0, !dbg !41
  br i1 %.not.i1, label %111, label %106, !dbg !41

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !41

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !41

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %107, %109, %112, %114
  %.0.i3 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !41
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %116, 0, !dbg !41
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !41
  br i1 %.not.i6, label %123, label %118, !dbg !41

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !41

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !41

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %119, %121, %124, %126
  %.0.i8 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !41
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %128, 0, !dbg !41
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %129, 0, !dbg !41
  br i1 %.not.i11, label %135, label %130, !dbg !41

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !41

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !41

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %131, %133, %136, %138
  %.0.i13 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !41
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %144 = fadd float %73, 0x3EE4F8B580000000, !dbg !43
  %145 = fadd float %74, 0x3EE4F8B580000000, !dbg !43
  %146 = fadd float %78, 0x3EE4F8B580000000, !dbg !43
  %147 = fadd float %79, 0x3EE4F8B580000000, !dbg !43
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i16 = icmp eq i32 %148, 0, !dbg !44
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i19 = icmp eq i32 %149, 0, !dbg !44
  br i1 %.not.i16, label %155, label %150, !dbg !44

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !44

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %158, label %156, !dbg !44

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

__nv_sqrtf.exit20:                                ; preds = %151, %153, %156, %158
  %.0.i18 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !44
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i21 = icmp eq i32 %160, 0, !dbg !44
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i24 = icmp eq i32 %161, 0, !dbg !44
  br i1 %.not.i21, label %167, label %162, !dbg !44

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !44

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

167:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %170, label %168, !dbg !44

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

__nv_sqrtf.exit25:                                ; preds = %163, %165, %168, %170
  %.0.i23 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !44
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i26 = icmp eq i32 %172, 0, !dbg !44
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i29 = icmp eq i32 %173, 0, !dbg !44
  br i1 %.not.i26, label %179, label %174, !dbg !44

174:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %177, label %175, !dbg !44

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

179:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %182, label %180, !dbg !44

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

__nv_sqrtf.exit30:                                ; preds = %175, %177, %180, %182
  %.0.i28 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !44
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %184, 0, !dbg !44
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i34 = icmp eq i32 %185, 0, !dbg !44
  br i1 %.not.i31, label %191, label %186, !dbg !44

186:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %189, label %187, !dbg !44

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

191:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %194, label %192, !dbg !44

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

__nv_sqrtf.exit35:                                ; preds = %187, %189, %192, %194
  %.0.i33 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !44
  %196 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %197 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %198 = extractvalue { i32, i32 } %67, 1, !dbg !33
  %199 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %200 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %201 = extractvalue { i32, i32 } %67, 0, !dbg !33
  %202 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %203 = extractvalue { i32, i32 } %38, 1, !dbg !23
  %204 = extractvalue { i32, i32 } %66, 1, !dbg !33
  %205 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %206 = extractvalue { i32, i32 } %38, 0, !dbg !23
  %207 = extractvalue { i32, i32 } %66, 0, !dbg !33
  %208 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %209 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %210 = extractvalue { i32, i32 } %43, 1, !dbg !25
  %211 = extractvalue { i32, i32 } %59, 1, !dbg !29
  %212 = extractvalue { i32, i32 } %63, 1, !dbg !31
  %213 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %214 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %215 = extractvalue { i32, i32 } %43, 0, !dbg !25
  %216 = extractvalue { i32, i32 } %59, 0, !dbg !29
  %217 = extractvalue { i32, i32 } %63, 0, !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %219 = extractvalue { i32, i32 } %32, 1, !dbg !19
  %220 = extractvalue { i32, i32 } %42, 1, !dbg !25
  %221 = extractvalue { i32, i32 } %58, 1, !dbg !29
  %222 = extractvalue { i32, i32 } %62, 1, !dbg !31
  %223 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %224 = extractvalue { i32, i32 } %32, 0, !dbg !19
  %225 = extractvalue { i32, i32 } %42, 0, !dbg !25
  %226 = extractvalue { i32, i32 } %58, 0, !dbg !29
  %227 = extractvalue { i32, i32 } %62, 0, !dbg !31
  %228 = extractvalue { i32, i32 } %87, 1, !dbg !39
  %229 = extractvalue { i32, i32 } %87, 0, !dbg !39
  %230 = extractvalue { i32, i32 } %86, 1, !dbg !39
  %231 = extractvalue { i32, i32 } %86, 0, !dbg !39
  %232 = extractvalue { i32, i32 } %83, 1, !dbg !37
  %233 = extractvalue { i32, i32 } %83, 0, !dbg !37
  %234 = extractvalue { i32, i32 } %82, 1, !dbg !37
  %235 = extractvalue { i32, i32 } %82, 0, !dbg !37
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !45
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !45
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !45
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !45
  %240 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !17
  %241 = insertelement <2 x i32> %240, i32 %205, i64 1, !dbg !17
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !17
  %243 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !19
  %244 = insertelement <2 x i32> %243, i32 %206, i64 1, !dbg !19
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !19
  %246 = fadd <2 x float> %242, %245, !dbg !46
  %247 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !25
  %248 = insertelement <2 x i32> %247, i32 %207, i64 1, !dbg !25
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !25
  %250 = fsub <2 x float> %246, %249, !dbg !47
  %251 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !31
  %252 = insertelement <2 x i32> %251, i32 %231, i64 1, !dbg !31
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !31
  %254 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !29
  %255 = insertelement <2 x i32> %254, i32 %235, i64 1, !dbg !29
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !29
  %257 = insertelement <2 x float> poison, float %140, i64 0, !dbg !48
  %258 = insertelement <2 x float> %257, float %236, i64 1, !dbg !48
  %259 = fmul <2 x float> %250, %258, !dbg !48
  %260 = fmul <2 x float> %259, %256, !dbg !49
  %261 = fadd <2 x float> %260, %253, !dbg !50
  %262 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !17
  %263 = insertelement <2 x i32> %262, i32 %202, i64 1, !dbg !17
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !17
  %265 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !19
  %266 = insertelement <2 x i32> %265, i32 %203, i64 1, !dbg !19
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !19
  %268 = fadd <2 x float> %264, %267, !dbg !46
  %269 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !25
  %270 = insertelement <2 x i32> %269, i32 %204, i64 1, !dbg !25
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !25
  %272 = fsub <2 x float> %268, %271, !dbg !47
  %273 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !31
  %274 = insertelement <2 x i32> %273, i32 %230, i64 1, !dbg !31
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !31
  %276 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !29
  %277 = insertelement <2 x i32> %276, i32 %234, i64 1, !dbg !29
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !29
  %279 = insertelement <2 x float> poison, float %141, i64 0, !dbg !48
  %280 = insertelement <2 x float> %279, float %237, i64 1, !dbg !48
  %281 = fmul <2 x float> %272, %280, !dbg !48
  %282 = fmul <2 x float> %281, %278, !dbg !49
  %283 = fadd <2 x float> %282, %275, !dbg !50
  %284 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !17
  %285 = insertelement <2 x i32> %284, i32 %199, i64 1, !dbg !17
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !17
  %287 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !19
  %288 = insertelement <2 x i32> %287, i32 %200, i64 1, !dbg !19
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !19
  %290 = fadd <2 x float> %286, %289, !dbg !46
  %291 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !25
  %292 = insertelement <2 x i32> %291, i32 %201, i64 1, !dbg !25
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !25
  %294 = fsub <2 x float> %290, %293, !dbg !47
  %295 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !31
  %296 = insertelement <2 x i32> %295, i32 %229, i64 1, !dbg !31
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !31
  %298 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !29
  %299 = insertelement <2 x i32> %298, i32 %233, i64 1, !dbg !29
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !29
  %301 = insertelement <2 x float> poison, float %142, i64 0, !dbg !48
  %302 = insertelement <2 x float> %301, float %238, i64 1, !dbg !48
  %303 = fmul <2 x float> %294, %302, !dbg !48
  %304 = fmul <2 x float> %303, %300, !dbg !49
  %305 = fadd <2 x float> %304, %297, !dbg !50
  %306 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !17
  %307 = insertelement <2 x i32> %306, i32 %196, i64 1, !dbg !17
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !17
  %309 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !19
  %310 = insertelement <2 x i32> %309, i32 %197, i64 1, !dbg !19
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !19
  %312 = fadd <2 x float> %308, %311, !dbg !46
  %313 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !25
  %314 = insertelement <2 x i32> %313, i32 %198, i64 1, !dbg !25
  %315 = bitcast <2 x i32> %314 to <2 x float>, !dbg !25
  %316 = fsub <2 x float> %312, %315, !dbg !47
  %317 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !31
  %318 = insertelement <2 x i32> %317, i32 %228, i64 1, !dbg !31
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !31
  %320 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !29
  %321 = insertelement <2 x i32> %320, i32 %232, i64 1, !dbg !29
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !29
  %323 = insertelement <2 x float> poison, float %143, i64 0, !dbg !48
  %324 = insertelement <2 x float> %323, float %239, i64 1, !dbg !48
  %325 = fmul <2 x float> %316, %324, !dbg !48
  %326 = fmul <2 x float> %325, %322, !dbg !49
  %327 = fadd <2 x float> %326, %319, !dbg !50
  %shift = shufflevector <2 x float> %261, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %328 = fadd <2 x float> %261, %shift, !dbg !51
  %shift36 = shufflevector <2 x float> %283, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %329 = fadd <2 x float> %283, %shift36, !dbg !51
  %shift37 = shufflevector <2 x float> %305, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %330 = fadd <2 x float> %305, %shift37, !dbg !51
  %shift38 = shufflevector <2 x float> %327, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %331 = fadd <2 x float> %327, %shift38, !dbg !51
  %bc = bitcast <2 x float> %246 to <2 x i32>, !dbg !52
  %332 = extractelement <2 x i32> %bc, i64 0, !dbg !52
  %bc39 = bitcast <2 x float> %268 to <2 x i32>, !dbg !52
  %333 = extractelement <2 x i32> %bc39, i64 0, !dbg !52
  %bc40 = bitcast <2 x float> %290 to <2 x i32>, !dbg !52
  %334 = extractelement <2 x i32> %bc40, i64 0, !dbg !52
  %bc41 = bitcast <2 x float> %312 to <2 x i32>, !dbg !52
  %335 = extractelement <2 x i32> %bc41, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %26, i1 %22) #3, !dbg !52
  %bc42 = bitcast <2 x float> %246 to <2 x i32>, !dbg !53
  %336 = extractelement <2 x i32> %bc42, i64 1, !dbg !53
  %bc43 = bitcast <2 x float> %268 to <2 x i32>, !dbg !53
  %337 = extractelement <2 x i32> %bc43, i64 1, !dbg !53
  %bc44 = bitcast <2 x float> %290 to <2 x i32>, !dbg !53
  %338 = extractelement <2 x i32> %bc44, i64 1, !dbg !53
  %bc45 = bitcast <2 x float> %312 to <2 x i32>, !dbg !53
  %339 = extractelement <2 x i32> %bc45, i64 1, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %34, i1 %22) #3, !dbg !53
  %340 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !54
  %bc46 = bitcast <2 x float> %328 to <2 x i32>, !dbg !55
  %341 = extractelement <2 x i32> %bc46, i64 0, !dbg !55
  %bc47 = bitcast <2 x float> %329 to <2 x i32>, !dbg !55
  %342 = extractelement <2 x i32> %bc47, i64 0, !dbg !55
  %bc48 = bitcast <2 x float> %330 to <2 x i32>, !dbg !55
  %343 = extractelement <2 x i32> %bc48, i64 0, !dbg !55
  %bc49 = bitcast <2 x float> %331 to <2 x i32>, !dbg !55
  %344 = extractelement <2 x i32> %bc49, i64 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %342, i32 %343, i32 %344, ptr addrspace(1) %340, i1 %22) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c577zqkkl3qxfjji7yt2hq2rhxjbnj6qrn3knabjqeejj7digdyx.py", directory: "inductor_cache/57")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 39, scope: !7)
!53 = !DILocation(line: 61, column: 39, scope: !7)
!54 = !DILocation(line: 62, column: 25, scope: !7)
!55 = !DILocation(line: 62, column: 37, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
