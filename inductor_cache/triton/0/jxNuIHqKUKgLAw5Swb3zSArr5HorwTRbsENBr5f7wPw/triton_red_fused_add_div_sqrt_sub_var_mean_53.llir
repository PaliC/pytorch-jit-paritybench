; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
.peel.next:
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 2048, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = shl i32 %5, 13, !dbg !13
  %11 = or disjoint i32 %10, %9
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %15 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !16
  %16 = shufflevector <4 x i1> %15, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !15
  %18 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !15
  %20 = insertelement <4 x i32> %18, i32 %19, i64 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !15
  %22 = insertelement <4 x i32> %20, i32 %21, i64 2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !15
  %24 = insertelement <4 x i32> %22, i32 %23, i64 3, !dbg !15
  %25 = bitcast <4 x i32> %24 to <4 x float>, !dbg !15
  %26 = select <4 x i1> %16, <4 x float> %25, <4 x float> zeroinitializer, !dbg !16
  %27 = select i1 %6, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %28 = and i32 %7, 31, !dbg !12
  %29 = or disjoint i32 %11, 2048, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !14
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !14
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !15
  %37 = fadd float %27, 1.000000e+00, !dbg !19
  %38 = fadd float %27, 1.000000e+00, !dbg !19
  %39 = fadd float %27, 1.000000e+00, !dbg !19
  %40 = fadd float %27, 1.000000e+00, !dbg !19
  %41 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !15
  %42 = insertelement <4 x i32> %41, i32 %35, i64 1, !dbg !15
  %43 = insertelement <4 x i32> %42, i32 %34, i64 2, !dbg !15
  %44 = insertelement <4 x i32> %43, i32 %33, i64 3, !dbg !15
  %45 = bitcast <4 x i32> %44 to <4 x float>, !dbg !15
  %46 = fsub <4 x float> %45, %26, !dbg !23
  %47 = extractelement <4 x float> %46, i64 0, !dbg !24
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %37) #5, !dbg !24
  %49 = extractelement <4 x float> %46, i64 1, !dbg !24
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float %38) #5, !dbg !24
  %51 = extractelement <4 x float> %46, i64 2, !dbg !24
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %39) #5, !dbg !24
  %53 = extractelement <4 x float> %46, i64 3, !dbg !24
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %40) #5, !dbg !24
  %55 = insertelement <4 x float> poison, float %48, i64 0, !dbg !25
  %56 = insertelement <4 x float> %55, float %50, i64 1, !dbg !25
  %57 = insertelement <4 x float> %56, float %52, i64 2, !dbg !25
  %58 = insertelement <4 x float> %57, float %54, i64 3, !dbg !25
  %59 = fadd <4 x float> %26, %58, !dbg !25
  %60 = fsub <4 x float> %45, %59, !dbg !26
  %61 = fmul <4 x float> %46, %60, !dbg !27
  %62 = fadd <4 x float> %61, zeroinitializer, !dbg !28
  %63 = select <4 x i1> %16, <4 x float> %59, <4 x float> zeroinitializer, !dbg !16
  %64 = or disjoint i32 %11, 4096, !dbg !18
  %65 = sext i32 %64 to i64, !dbg !14
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !14
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %68 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !15
  %69 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !15
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !15
  %71 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !15
  %72 = fadd float %37, 1.000000e+00, !dbg !19
  %73 = select i1 %6, float %72, float 1.000000e+00, !dbg !17
  %74 = fadd float %38, 1.000000e+00, !dbg !19
  %75 = select i1 %6, float %74, float 1.000000e+00, !dbg !17
  %76 = fadd float %39, 1.000000e+00, !dbg !19
  %77 = select i1 %6, float %76, float 1.000000e+00, !dbg !17
  %78 = fadd float %40, 1.000000e+00, !dbg !19
  %79 = select i1 %6, float %78, float 1.000000e+00, !dbg !17
  %80 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !15
  %81 = insertelement <4 x i32> %80, i32 %70, i64 1, !dbg !15
  %82 = insertelement <4 x i32> %81, i32 %69, i64 2, !dbg !15
  %83 = insertelement <4 x i32> %82, i32 %68, i64 3, !dbg !15
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !15
  %85 = fsub <4 x float> %84, %63, !dbg !23
  %86 = extractelement <4 x float> %85, i64 0, !dbg !24
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %73) #5, !dbg !24
  %88 = extractelement <4 x float> %85, i64 1, !dbg !24
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %75) #5, !dbg !24
  %90 = extractelement <4 x float> %85, i64 2, !dbg !24
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %77) #5, !dbg !24
  %92 = extractelement <4 x float> %85, i64 3, !dbg !24
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %79) #5, !dbg !24
  %94 = insertelement <4 x float> poison, float %87, i64 0, !dbg !25
  %95 = insertelement <4 x float> %94, float %89, i64 1, !dbg !25
  %96 = insertelement <4 x float> %95, float %91, i64 2, !dbg !25
  %97 = insertelement <4 x float> %96, float %93, i64 3, !dbg !25
  %98 = fadd <4 x float> %63, %97, !dbg !25
  %99 = fsub <4 x float> %84, %98, !dbg !26
  %100 = fmul <4 x float> %85, %99, !dbg !27
  %101 = fadd <4 x float> %62, %100, !dbg !28
  %102 = select <4 x i1> %16, <4 x float> %98, <4 x float> zeroinitializer, !dbg !16
  %103 = or disjoint i32 %11, 6144, !dbg !18
  %104 = sext i32 %103 to i64, !dbg !14
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !14
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %107 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !15
  %108 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !15
  %109 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !15
  %110 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !15
  %111 = fadd float %72, 1.000000e+00, !dbg !19
  %112 = select i1 %6, float %111, float 1.000000e+00, !dbg !17
  %113 = fadd float %74, 1.000000e+00, !dbg !19
  %114 = select i1 %6, float %113, float 1.000000e+00, !dbg !17
  %115 = fadd float %76, 1.000000e+00, !dbg !19
  %116 = select i1 %6, float %115, float 1.000000e+00, !dbg !17
  %117 = fadd float %78, 1.000000e+00, !dbg !19
  %118 = select i1 %6, float %117, float 1.000000e+00, !dbg !17
  %119 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !15
  %120 = insertelement <4 x i32> %119, i32 %109, i64 1, !dbg !15
  %121 = insertelement <4 x i32> %120, i32 %108, i64 2, !dbg !15
  %122 = insertelement <4 x i32> %121, i32 %107, i64 3, !dbg !15
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !15
  %124 = fsub <4 x float> %123, %102, !dbg !23
  %125 = extractelement <4 x float> %124, i64 0, !dbg !24
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %112) #5, !dbg !24
  %127 = extractelement <4 x float> %124, i64 1, !dbg !24
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %114) #5, !dbg !24
  %129 = extractelement <4 x float> %124, i64 2, !dbg !24
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %116) #5, !dbg !24
  %131 = extractelement <4 x float> %124, i64 3, !dbg !24
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %118) #5, !dbg !24
  %133 = insertelement <4 x float> poison, float %126, i64 0, !dbg !25
  %134 = insertelement <4 x float> %133, float %128, i64 1, !dbg !25
  %135 = insertelement <4 x float> %134, float %130, i64 2, !dbg !25
  %136 = insertelement <4 x float> %135, float %132, i64 3, !dbg !25
  %137 = fadd <4 x float> %102, %136, !dbg !25
  %138 = fsub <4 x float> %123, %137, !dbg !26
  %139 = fmul <4 x float> %124, %138, !dbg !27
  %140 = fadd <4 x float> %101, %139, !dbg !28
  %141 = select <4 x i1> %16, <4 x float> %137, <4 x float> zeroinitializer, !dbg !16
  %142 = select <4 x i1> %16, <4 x float> %140, <4 x float> zeroinitializer, !dbg !29
  %143 = select i1 %6, float %111, float 0.000000e+00, !dbg !17
  %144 = select i1 %6, float %113, float 0.000000e+00, !dbg !17
  %145 = select i1 %6, float %115, float 0.000000e+00, !dbg !17
  %146 = select i1 %6, float %117, float 0.000000e+00, !dbg !17
  %147 = lshr i32 %7, 5, !dbg !12
  %148 = extractelement <4 x float> %141, i64 0, !dbg !30
  %149 = extractelement <4 x float> %141, i64 1, !dbg !30
  %150 = fsub float %149, %148, !dbg !30
  %151 = fadd float %143, %144, !dbg !33
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !34
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %151) #5, !dbg !35
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !36
  %155 = fmul float %150, %154, !dbg !37
  %156 = fadd float %148, %155, !dbg !38
  %shift = shufflevector <4 x float> %142, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !39
  %157 = fadd <4 x float> %142, %shift, !dbg !39
  %158 = extractelement <4 x float> %157, i64 0, !dbg !39
  %159 = fmul float %150, %150, !dbg !40
  %160 = fmul float %159, %143, !dbg !41
  %161 = fmul float %160, %154, !dbg !42
  %162 = fadd float %158, %161, !dbg !43
  %163 = extractelement <4 x float> %141, i64 2, !dbg !30
  %164 = fsub float %163, %156, !dbg !30
  %165 = fadd float %145, %151, !dbg !33
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !34
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %165) #5, !dbg !35
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !36
  %169 = fmul float %168, %164, !dbg !37
  %170 = fadd float %156, %169, !dbg !38
  %171 = extractelement <4 x float> %142, i64 2, !dbg !39
  %172 = fadd float %171, %162, !dbg !39
  %173 = fmul float %164, %164, !dbg !40
  %174 = fmul float %151, %173, !dbg !41
  %175 = fmul float %168, %174, !dbg !42
  %176 = fadd float %172, %175, !dbg !43
  %177 = extractelement <4 x float> %141, i64 3, !dbg !30
  %178 = fsub float %177, %170, !dbg !30
  %179 = fadd float %146, %165, !dbg !33
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !34
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %179) #5, !dbg !35
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !36
  %183 = fmul float %182, %178, !dbg !37
  %184 = fadd float %170, %183, !dbg !38
  %185 = extractelement <4 x float> %142, i64 3, !dbg !39
  %186 = fadd float %185, %176, !dbg !39
  %187 = fmul float %178, %178, !dbg !40
  %188 = fmul float %165, %187, !dbg !41
  %189 = fmul float %182, %188, !dbg !42
  %190 = fadd float %186, %189, !dbg !43
  %191 = bitcast float %184 to i32, !dbg !44
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 16, i32 31), !dbg !44
  %193 = bitcast i32 %192 to float, !dbg !44
  %194 = bitcast float %190 to i32, !dbg !44
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !44
  %196 = bitcast i32 %195 to float, !dbg !44
  %197 = bitcast float %179 to i32, !dbg !44
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !44
  %199 = bitcast i32 %198 to float, !dbg !44
  %200 = fsub float %193, %184, !dbg !30
  %201 = fadd float %179, %199, !dbg !33
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !34
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %201) #5, !dbg !35
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !36
  %205 = fmul float %204, %200, !dbg !37
  %206 = fadd float %184, %205, !dbg !38
  %207 = fadd float %190, %196, !dbg !39
  %208 = fmul float %200, %200, !dbg !40
  %209 = fmul float %179, %208, !dbg !41
  %210 = fmul float %204, %209, !dbg !42
  %211 = fadd float %207, %210, !dbg !43
  %212 = bitcast float %206 to i32, !dbg !44
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !44
  %214 = bitcast i32 %213 to float, !dbg !44
  %215 = bitcast float %211 to i32, !dbg !44
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !44
  %217 = bitcast i32 %216 to float, !dbg !44
  %218 = bitcast float %201 to i32, !dbg !44
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !44
  %220 = bitcast i32 %219 to float, !dbg !44
  %221 = fsub float %214, %206, !dbg !30
  %222 = fadd float %201, %220, !dbg !33
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !34
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %222) #5, !dbg !35
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !36
  %226 = fmul float %221, %225, !dbg !37
  %227 = fadd float %206, %226, !dbg !38
  %228 = fadd float %211, %217, !dbg !39
  %229 = fmul float %221, %221, !dbg !40
  %230 = fmul float %201, %229, !dbg !41
  %231 = fmul float %225, %230, !dbg !42
  %232 = fadd float %228, %231, !dbg !43
  %233 = bitcast float %227 to i32, !dbg !44
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = bitcast float %232 to i32, !dbg !44
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !44
  %238 = bitcast i32 %237 to float, !dbg !44
  %239 = bitcast float %222 to i32, !dbg !44
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !44
  %241 = bitcast i32 %240 to float, !dbg !44
  %242 = fsub float %235, %227, !dbg !30
  %243 = fadd float %222, %241, !dbg !33
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !34
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %243) #5, !dbg !35
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !36
  %247 = fmul float %242, %246, !dbg !37
  %248 = fadd float %227, %247, !dbg !38
  %249 = fadd float %232, %238, !dbg !39
  %250 = fmul float %242, %242, !dbg !40
  %251 = fmul float %222, %250, !dbg !41
  %252 = fmul float %246, %251, !dbg !42
  %253 = fadd float %249, %252, !dbg !43
  %254 = bitcast float %248 to i32, !dbg !44
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 2, i32 31), !dbg !44
  %256 = bitcast i32 %255 to float, !dbg !44
  %257 = bitcast float %253 to i32, !dbg !44
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !44
  %259 = bitcast i32 %258 to float, !dbg !44
  %260 = bitcast float %243 to i32, !dbg !44
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !44
  %262 = bitcast i32 %261 to float, !dbg !44
  %263 = fsub float %256, %248, !dbg !30
  %264 = fadd float %243, %262, !dbg !33
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !34
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %264) #5, !dbg !35
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !36
  %268 = fmul float %263, %267, !dbg !37
  %269 = fadd float %248, %268, !dbg !38
  %270 = fadd float %253, %259, !dbg !39
  %271 = fmul float %263, %263, !dbg !40
  %272 = fmul float %243, %271, !dbg !41
  %273 = fmul float %267, %272, !dbg !42
  %274 = fadd float %270, %273, !dbg !43
  %275 = bitcast float %269 to i32, !dbg !44
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !44
  %277 = bitcast i32 %276 to float, !dbg !44
  %278 = bitcast float %274 to i32, !dbg !44
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !44
  %280 = bitcast i32 %279 to float, !dbg !44
  %281 = bitcast float %264 to i32, !dbg !44
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !44
  %283 = bitcast i32 %282 to float, !dbg !44
  %284 = fsub float %277, %269, !dbg !30
  %285 = fadd float %264, %283, !dbg !33
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !34
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %285) #5, !dbg !35
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !36
  %289 = fmul float %284, %288, !dbg !37
  %290 = fadd float %269, %289, !dbg !38
  %291 = fadd float %274, %280, !dbg !39
  %292 = fmul float %284, %284, !dbg !40
  %293 = fmul float %264, %292, !dbg !41
  %294 = fmul float %288, %293, !dbg !42
  %295 = fadd float %291, %294, !dbg !43
  %296 = icmp eq i32 %28, 0, !dbg !44
  %297 = and i32 %147, 15, !dbg !44
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !44
  %299 = bitcast float %290 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 %296) #5, !dbg !44
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %297, !dbg !44
  %301 = bitcast float %295 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 %296) #5, !dbg !44
  %302 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %297, !dbg !44
  %303 = bitcast float %285 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 %296) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %304 = icmp slt i32 %7, 16, !dbg !44
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !44
  %306 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %304) #5, !dbg !44
  %307 = bitcast i32 %306 to float, !dbg !44
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %7, !dbg !44
  %309 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %308, i1 %304) #5, !dbg !44
  %310 = bitcast i32 %309 to float, !dbg !44
  %311 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %7, !dbg !44
  %312 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %311, i1 %304) #5, !dbg !44
  %313 = bitcast i32 %312 to float, !dbg !44
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 8, i32 31), !dbg !44
  %315 = bitcast i32 %314 to float, !dbg !44
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 8, i32 31), !dbg !44
  %317 = bitcast i32 %316 to float, !dbg !44
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 8, i32 31), !dbg !44
  %319 = bitcast i32 %318 to float, !dbg !44
  %320 = fsub float %315, %307, !dbg !30
  %321 = fadd float %313, %319, !dbg !33
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !34
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %321) #5, !dbg !35
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !36
  %325 = fmul float %320, %324, !dbg !37
  %326 = fadd float %325, %307, !dbg !38
  %327 = fadd float %310, %317, !dbg !39
  %328 = fmul float %320, %320, !dbg !40
  %329 = fmul float %328, %313, !dbg !41
  %330 = fmul float %329, %324, !dbg !42
  %331 = fadd float %327, %330, !dbg !43
  %332 = bitcast float %326 to i32, !dbg !44
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 4, i32 31), !dbg !44
  %334 = bitcast i32 %333 to float, !dbg !44
  %335 = bitcast float %331 to i32, !dbg !44
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !44
  %337 = bitcast i32 %336 to float, !dbg !44
  %338 = bitcast float %321 to i32, !dbg !44
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !44
  %340 = bitcast i32 %339 to float, !dbg !44
  %341 = fsub float %334, %326, !dbg !30
  %342 = fadd float %321, %340, !dbg !33
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !34
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #5, !dbg !35
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !36
  %346 = fmul float %341, %345, !dbg !37
  %347 = fadd float %326, %346, !dbg !38
  %348 = fadd float %331, %337, !dbg !39
  %349 = fmul float %341, %341, !dbg !40
  %350 = fmul float %321, %349, !dbg !41
  %351 = fmul float %345, %350, !dbg !42
  %352 = fadd float %348, %351, !dbg !43
  %353 = bitcast float %347 to i32, !dbg !44
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 2, i32 31), !dbg !44
  %355 = bitcast i32 %354 to float, !dbg !44
  %356 = bitcast float %352 to i32, !dbg !44
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !44
  %358 = bitcast i32 %357 to float, !dbg !44
  %359 = bitcast float %342 to i32, !dbg !44
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !44
  %361 = bitcast i32 %360 to float, !dbg !44
  %362 = fsub float %355, %347, !dbg !30
  %363 = fadd float %342, %361, !dbg !33
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !34
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #5, !dbg !35
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !36
  %367 = fmul float %362, %366, !dbg !37
  %368 = fadd float %347, %367, !dbg !38
  %369 = fadd float %352, %358, !dbg !39
  %370 = fmul float %362, %362, !dbg !40
  %371 = fmul float %342, %370, !dbg !41
  %372 = fmul float %366, %371, !dbg !42
  %373 = fadd float %369, %372, !dbg !43
  %374 = bitcast float %368 to i32, !dbg !44
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = bitcast float %373 to i32, !dbg !44
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !44
  %379 = bitcast i32 %378 to float, !dbg !44
  %380 = bitcast float %363 to i32, !dbg !44
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !44
  %382 = bitcast i32 %381 to float, !dbg !44
  %383 = fsub float %376, %368, !dbg !30
  %384 = fadd float %363, %382, !dbg !33
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !34
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #5, !dbg !35
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !36
  %388 = fmul float %383, %387, !dbg !37
  %389 = fadd float %368, %388, !dbg !38
  %390 = fadd float %373, %379, !dbg !39
  %391 = fmul float %383, %383, !dbg !40
  %392 = fmul float %363, %391, !dbg !41
  %393 = fmul float %387, %392, !dbg !42
  %394 = fadd float %390, %393, !dbg !43
  %395 = and i32 %7, 15, !dbg !44
  %396 = icmp eq i32 %395, 0, !dbg !44
  %397 = and i1 %304, %396, !dbg !44
  %398 = bitcast float %389 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %398, i1 %397) #5, !dbg !44
  %399 = bitcast float %394 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %399, i1 %397) #5, !dbg !44
  %400 = bitcast float %384 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %400, i1 %397) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %401 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %402 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !44
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float 8.192000e+03) #5, !dbg !45
  %404 = fadd float %403, 0x3DDB7CDFE0000000, !dbg !46
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %405, 0, !dbg !47
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i = icmp eq i32 %406, 0, !dbg !47
  br i1 %.not.i, label %412, label %407, !dbg !47

407:                                              ; preds = %.peel.next
  br i1 %.not1.i, label %410, label %408, !dbg !47

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

412:                                              ; preds = %.peel.next
  br i1 %.not1.i, label %415, label %413, !dbg !47

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %408, %410, %413, %415
  %.0.i = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !47
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i24 = icmp eq i32 %423, 0, !dbg !47
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i27 = icmp eq i32 %424, 0, !dbg !47
  br i1 %.not.i24, label %430, label %425, !dbg !47

425:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %428, label %426, !dbg !47

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit28, !dbg !47

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit28, !dbg !47

430:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %433, label %431, !dbg !47

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit28, !dbg !47

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.f(float %404) #5, !dbg !47
  br label %__nv_sqrtf.exit28, !dbg !47

__nv_sqrtf.exit28:                                ; preds = %426, %428, %431, %433
  %.0.i26 = phi float [ %427, %426 ], [ %429, %428 ], [ %432, %431 ], [ %434, %433 ], !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %435 = sext i32 %5 to i64, !dbg !49
  %436 = getelementptr float, ptr addrspace(1) %0, i64 %435, !dbg !49
  %urem = and i32 %7, 511, !dbg !50
  %437 = icmp eq i32 %urem, 0, !dbg !50
  %438 = bitcast float %.0.i to i32, !dbg !50
  %439 = and i1 %437, %6, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %436, i1 %439) #5, !dbg !50
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !51
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !51
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !51
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !51
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !51
  %445 = bitcast i32 %441 to float, !dbg !51
  %446 = bitcast i32 %442 to float, !dbg !51
  %447 = bitcast i32 %443 to float, !dbg !51
  %448 = bitcast i32 %444 to float, !dbg !51
  %449 = fsub float %445, %401, !dbg !52
  %450 = fsub float %446, %401, !dbg !52
  %451 = fsub float %447, %401, !dbg !52
  %452 = fsub float %448, %401, !dbg !52
  %453 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %449, float %.0.i26) #5, !dbg !53
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %.0.i26) #5, !dbg !53
  %455 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %451, float %.0.i26) #5, !dbg !53
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %452, float %.0.i26) #5, !dbg !53
  %457 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !54
  %458 = bitcast float %453 to i32, !dbg !55
  %459 = bitcast float %454 to i32, !dbg !55
  %460 = bitcast float %455 to i32, !dbg !55
  %461 = bitcast float %456 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %459, i32 %460, i32 %461, ptr addrspace(1) %457, i1 %6) #5, !dbg !55
  %462 = or disjoint i32 %11, 2048, !dbg !56
  %463 = sext i32 %462 to i64, !dbg !57
  %464 = getelementptr float, ptr addrspace(1) %1, i64 %463, !dbg !57
  %465 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %464, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !51
  %466 = extractvalue { i32, i32, i32, i32 } %465, 0, !dbg !51
  %467 = extractvalue { i32, i32, i32, i32 } %465, 1, !dbg !51
  %468 = extractvalue { i32, i32, i32, i32 } %465, 2, !dbg !51
  %469 = extractvalue { i32, i32, i32, i32 } %465, 3, !dbg !51
  %470 = bitcast i32 %466 to float, !dbg !51
  %471 = bitcast i32 %467 to float, !dbg !51
  %472 = bitcast i32 %468 to float, !dbg !51
  %473 = bitcast i32 %469 to float, !dbg !51
  %474 = fsub float %470, %401, !dbg !52
  %475 = fsub float %471, %401, !dbg !52
  %476 = fsub float %472, %401, !dbg !52
  %477 = fsub float %473, %401, !dbg !52
  %478 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %474, float %.0.i26) #5, !dbg !53
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %475, float %.0.i26) #5, !dbg !53
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %.0.i26) #5, !dbg !53
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %477, float %.0.i26) #5, !dbg !53
  %482 = getelementptr float, ptr addrspace(1) %2, i64 %463, !dbg !54
  %483 = bitcast float %478 to i32, !dbg !55
  %484 = bitcast float %479 to i32, !dbg !55
  %485 = bitcast float %480 to i32, !dbg !55
  %486 = bitcast float %481 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %483, i32 %484, i32 %485, i32 %486, ptr addrspace(1) %482, i1 %6) #5, !dbg !55
  %487 = or disjoint i32 %11, 4096, !dbg !56
  %488 = sext i32 %487 to i64, !dbg !57
  %489 = getelementptr float, ptr addrspace(1) %1, i64 %488, !dbg !57
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %489, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !51
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !51
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !51
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !51
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !51
  %495 = bitcast i32 %491 to float, !dbg !51
  %496 = bitcast i32 %492 to float, !dbg !51
  %497 = bitcast i32 %493 to float, !dbg !51
  %498 = bitcast i32 %494 to float, !dbg !51
  %499 = fsub float %495, %401, !dbg !52
  %500 = fsub float %496, %401, !dbg !52
  %501 = fsub float %497, %401, !dbg !52
  %502 = fsub float %498, %401, !dbg !52
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float %.0.i26) #5, !dbg !53
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %500, float %.0.i26) #5, !dbg !53
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %501, float %.0.i26) #5, !dbg !53
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %502, float %.0.i26) #5, !dbg !53
  %507 = getelementptr float, ptr addrspace(1) %2, i64 %488, !dbg !54
  %508 = bitcast float %503 to i32, !dbg !55
  %509 = bitcast float %504 to i32, !dbg !55
  %510 = bitcast float %505 to i32, !dbg !55
  %511 = bitcast float %506 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %508, i32 %509, i32 %510, i32 %511, ptr addrspace(1) %507, i1 %6) #5, !dbg !55
  %512 = or disjoint i32 %11, 6144, !dbg !56
  %513 = sext i32 %512 to i64, !dbg !57
  %514 = getelementptr float, ptr addrspace(1) %1, i64 %513, !dbg !57
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %514, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !51
  %516 = extractvalue { i32, i32, i32, i32 } %515, 0, !dbg !51
  %517 = extractvalue { i32, i32, i32, i32 } %515, 1, !dbg !51
  %518 = extractvalue { i32, i32, i32, i32 } %515, 2, !dbg !51
  %519 = extractvalue { i32, i32, i32, i32 } %515, 3, !dbg !51
  %520 = bitcast i32 %516 to float, !dbg !51
  %521 = bitcast i32 %517 to float, !dbg !51
  %522 = bitcast i32 %518 to float, !dbg !51
  %523 = bitcast i32 %519 to float, !dbg !51
  %524 = fsub float %520, %401, !dbg !52
  %525 = fsub float %521, %401, !dbg !52
  %526 = fsub float %522, %401, !dbg !52
  %527 = fsub float %523, %401, !dbg !52
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %524, float %.0.i26) #5, !dbg !53
  %529 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %525, float %.0.i26) #5, !dbg !53
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %.0.i26) #5, !dbg !53
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %527, float %.0.i26) #5, !dbg !53
  %532 = getelementptr float, ptr addrspace(1) %2, i64 %513, !dbg !54
  %533 = bitcast float %528 to i32, !dbg !55
  %534 = bitcast float %529 to i32, !dbg !55
  %535 = bitcast float %530 to i32, !dbg !55
  %536 = bitcast float %531 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %534, i32 %535, i32 %536, ptr addrspace(1) %532, i1 %6) #5, !dbg !55
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crjpwftxw5rc4wvceipvys33r3sj6b3pfzvwgc6ku3azhkp5hzh6.py", directory: "inductor_cache/rj")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_53, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_53, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_53", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 41, column: 64, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 184, column: 30, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 183, column: 24, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 185, column: 34, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 185, column: 26, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 186, column: 39, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 186, column: 31, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 186, column: 22, scope: !20, inlinedAt: !22)
!29 = !DILocation(line: 40, column: 56, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!32 = !DILocation(line: 43, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 204, column: 46, scope: !20, inlinedAt: !32)
!45 = !DILocation(line: 49, column: 18, scope: !7)
!46 = !DILocation(line: 51, column: 18, scope: !7)
!47 = !DILocation(line: 52, column: 26, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
!49 = !DILocation(line: 54, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 39, scope: !7)
!51 = !DILocation(line: 59, column: 50, scope: !7)
!52 = !DILocation(line: 60, column: 24, scope: !7)
!53 = !DILocation(line: 61, column: 24, scope: !7)
!54 = !DILocation(line: 62, column: 29, scope: !7)
!55 = !DILocation(line: 62, column: 51, scope: !7)
!56 = !DILocation(line: 59, column: 40, scope: !7)
!57 = !DILocation(line: 59, column: 35, scope: !7)
!58 = !DILocation(line: 55, column: 4, scope: !7)
