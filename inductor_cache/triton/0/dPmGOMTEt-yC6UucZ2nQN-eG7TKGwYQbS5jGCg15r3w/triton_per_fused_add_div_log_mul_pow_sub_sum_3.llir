; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_log_mul_pow_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 63, !dbg !10
  %12 = icmp samesign ult i32 %11, 40, !dbg !11
  %.lhs.trunc = trunc nuw nsw i32 %11 to i8, !dbg !12
  %13 = udiv i8 %.lhs.trunc, 10, !dbg !13
  %14 = mul i8 %13, 10, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %14, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i32, !dbg !12
  %narrow = mul nuw nsw i8 %13, 20, !dbg !14
  %15 = zext nneg i8 %narrow to i32, !dbg !14
  %16 = add nuw nsw i32 %15, %.zext, !dbg !15
  %17 = zext nneg i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 0, i1 %12) #4, !dbg !17
  %20 = zext nneg i8 %.decomposed to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %12, i32 0, i1 %12) #4, !dbg !19
  %23 = add nuw nsw i32 %.zext, 10, !dbg !20
  %24 = add nuw nsw i32 %23, %15, !dbg !21
  %25 = zext nneg i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %12, i32 0, i1 %12) #4, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = zext nneg i32 %23 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #4, !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = zext nneg i32 %11 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %12, i32 0, i1 %12) #4, !dbg !27
  %36 = fadd float %28, %32, !dbg !28
  %37 = fcmp olt float %36, 0.000000e+00, !dbg !29
  %38 = select i1 %37, float 0.000000e+00, float %36, !dbg !33
  %39 = fmul float %38, %38, !dbg !34
  %40 = fadd float %39, 0x3E45798EE0000000, !dbg !35
  %41 = fcmp olt float %40, 0x3810000000000000, !dbg !36
  %42 = fmul float %40, 0x4160000000000000, !dbg !36
  %.02.i = select i1 %41, float %42, float %40, !dbg !36
  %i.i.0.i = select i1 %41, float -2.300000e+01, float 0.000000e+00, !dbg !36
  %43 = bitcast float %.02.i to i32, !dbg !36
  %44 = add i32 %43, -1059760811, !dbg !36
  %45 = and i32 %44, -8388608, !dbg !36
  %46 = sub i32 %43, %45, !dbg !36
  %47 = bitcast i32 %46 to float, !dbg !36
  %48 = sitofp i32 %45 to float, !dbg !36
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %49, 0, !dbg !36
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %48, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !36
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %48, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !36
  %.08.i = select i1 %.not.i, float %51, float %50, !dbg !36
  %52 = fadd float %47, -1.000000e+00, !dbg !36
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not1.i = icmp eq i32 %53, 0, !dbg !36
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %52, float 0x3FC2073EC0000000) #4, !dbg !36
  %55 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %52, float 0x3FC2073EC0000000) #4, !dbg !36
  %.010.i = select i1 %.not1.i, float %55, float %54, !dbg !36
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not2.i = icmp eq i32 %56, 0, !dbg !36
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %52, float 0xBFBF19B980000000) #4, !dbg !36
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %52, float 0xBFBF19B980000000) #4, !dbg !36
  %.011.i = select i1 %.not2.i, float %58, float %57, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not3.i = icmp eq i32 %59, 0, !dbg !36
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %52, float 0x3FC1E52AA0000000) #4, !dbg !36
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %52, float 0x3FC1E52AA0000000) #4, !dbg !36
  %.012.i = select i1 %.not3.i, float %61, float %60, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not4.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %52, float 0xBFC55B1720000000) #4, !dbg !36
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %52, float 0xBFC55B1720000000) #4, !dbg !36
  %.09.i = select i1 %.not4.i, float %64, float %63, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not5.i = icmp eq i32 %65, 0, !dbg !36
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %52, float 0x3FC99DA160000000) #4, !dbg !36
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %52, float 0x3FC99DA160000000) #4, !dbg !36
  %.05.i = select i1 %.not5.i, float %67, float %66, !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not6.i = icmp eq i32 %68, 0, !dbg !36
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %52, float 0xBFCFFFE440000000) #4, !dbg !36
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %52, float 0xBFCFFFE440000000) #4, !dbg !36
  %.01.i = select i1 %.not6.i, float %70, float %69, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not7.i = icmp eq i32 %71, 0, !dbg !36
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %52, float 0x3FD5554F00000000) #4, !dbg !36
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %52, float 0x3FD5554F00000000) #4, !dbg !36
  %.0.i = select i1 %.not7.i, float %73, float %72, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not8.i = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %52, float -5.000000e-01) #4, !dbg !36
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %52, float -5.000000e-01) #4, !dbg !36
  %.07.i = select i1 %.not8.i, float %76, float %75, !dbg !36
  %77 = fmul float %52, %.07.i, !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not9.i = icmp eq i32 %78, 0, !dbg !36
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %77, float %52, float %52) #4, !dbg !36
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %77, float %52, float %52) #4, !dbg !36
  %.06.i = select i1 %.not9.i, float %80, float %79, !dbg !36
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not10.i = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !36
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !36
  %.04.i = select i1 %.not10.i, float %83, float %82, !dbg !36
  %84 = icmp ugt i32 %43, 2139095039, !dbg !36
  br i1 %84, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !36

__nv_fmaf_rn.exit.i.i:                            ; preds = %9
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not11.i = icmp eq i32 %85, 0, !dbg !36
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !36
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !36
  %.03.i = select i1 %.not11.i, float %87, float %86, !dbg !36
  br label %__nv_logf.exit, !dbg !36

__nv_logf.exit:                                   ; preds = %9, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %9 ], !dbg !36
  %88 = bitcast i32 %19 to float, !dbg !17
  %89 = bitcast i32 %22 to float, !dbg !19
  %90 = fadd float %88, %89, !dbg !37
  %91 = fcmp olt float %90, 0.000000e+00, !dbg !38
  %92 = select i1 %91, float 0.000000e+00, float %90, !dbg !40
  %93 = fmul float %92, %92, !dbg !41
  %94 = fadd float %93, %39, !dbg !42
  %95 = fmul float %92, 2.000000e+00, !dbg !43
  %96 = fmul float %38, 2.000000e+00, !dbg !44
  %97 = bitcast i32 %35 to float, !dbg !27
  %98 = fmul float %38, %97, !dbg !45
  %99 = fadd float %92, %98, !dbg !46
  %100 = lshr i32 %10, 5, !dbg !10
  %101 = and i32 %10, 31, !dbg !10
  %102 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !36
  %r.i.1.i = select i1 %102, float 0xFFF0000000000000, float %r.i.0.i, !dbg !36
  %103 = fsub float %94, %r.i.1.i, !dbg !47
  %104 = fadd float %103, -1.000000e+00, !dbg !48
  %105 = select i1 %12, float %104, float 0.000000e+00, !dbg !49
  %106 = bitcast float %105 to i32, !dbg !50
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !50
  %108 = bitcast i32 %107 to float, !dbg !50
  %109 = fadd float %105, %108, !dbg !54
  %110 = bitcast float %109 to i32, !dbg !50
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !50
  %112 = bitcast i32 %111 to float, !dbg !50
  %113 = fadd float %109, %112, !dbg !54
  %114 = bitcast float %113 to i32, !dbg !50
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !50
  %116 = bitcast i32 %115 to float, !dbg !50
  %117 = fadd float %113, %116, !dbg !54
  %118 = bitcast float %117 to i32, !dbg !50
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !50
  %120 = bitcast i32 %119 to float, !dbg !50
  %121 = fadd float %117, %120, !dbg !54
  %122 = bitcast float %121 to i32, !dbg !50
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !50
  %124 = bitcast i32 %123 to float, !dbg !50
  %125 = fadd float %121, %124, !dbg !54
  %126 = icmp eq i32 %101, 0, !dbg !50
  %127 = and i32 %100, 1, !dbg !50
  %128 = zext nneg i32 %127 to i64, !dbg !50
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !50
  %130 = bitcast float %125 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %126) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %131 = icmp slt i32 %10, 2, !dbg !50
  %132 = sext i32 %10 to i64, !dbg !50
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !50
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %131) #4, !dbg !50
  %135 = bitcast i32 %134 to float, !dbg !50
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !50
  %137 = bitcast i32 %136 to float, !dbg !50
  %138 = fadd float %135, %137, !dbg !54
  %139 = and i32 %10, 1, !dbg !50
  %140 = icmp eq i32 %139, 0, !dbg !50
  %141 = and i1 %131, %140, !dbg !50
  %142 = bitcast float %138 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %142, i1 %141) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %143 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %144 = fmul float %143, 5.000000e-01, !dbg !56
  %145 = fmul float %144, 0x3F34E5E0A0000000, !dbg !57
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !58
  %147 = bitcast float %99 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %12) #4, !dbg !59
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !60
  %149 = bitcast float %40 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %148, i1 %12) #4, !dbg !61
  %150 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !62
  %151 = bitcast float %96 to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %150, i1 %12) #4, !dbg !63
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !64
  %153 = bitcast float %95 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %12) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %154 = icmp eq i32 %11, 0, !dbg !67
  %155 = bitcast float %145 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %0, i1 %154) #4, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdyvzuhwhdz4xvu3gpardbsq5ifooxbwnk6ftmxzukm77qrbmvpt.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_per_fused_add_div_log_mul_pow_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_log_mul_pow_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_log_mul_pow_sub_sum_3", linkageName: "triton_per_fused_add_div_log_mul_pow_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 24, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 39, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 58, column: 26, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 25, scope: !7)
!59 = !DILocation(line: 63, column: 72, scope: !7)
!60 = !DILocation(line: 64, column: 25, scope: !7)
!61 = !DILocation(line: 64, column: 72, scope: !7)
!62 = !DILocation(line: 65, column: 25, scope: !7)
!63 = !DILocation(line: 65, column: 72, scope: !7)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 72, scope: !7)
!66 = !DILocation(line: 67, column: 4, scope: !7)
!67 = !DILocation(line: 68, column: 71, scope: !7)
!68 = !DILocation(line: 68, column: 4, scope: !7)
