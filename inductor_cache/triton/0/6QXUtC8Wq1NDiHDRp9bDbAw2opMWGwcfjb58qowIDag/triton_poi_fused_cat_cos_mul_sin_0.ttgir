#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_cos_mul_sin_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg1: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg3: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg4: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg5: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg7: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg8: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg9: !tt.ptr<f32> loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<36> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<36> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<256xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<256xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked1> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<256xi32, #blocked1> loc(#loc5)
    %5 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %6 = arith.addi %4, %2 : tensor<256xi32, #blocked1> loc(#loc5)
    %7 = arith.addi %5, %3 : tensor<256xi32, #blocked> loc(#loc5)
    %8 = arith.cmpi slt, %6, %cst_4 : tensor<256xi32, #blocked1> loc(#loc6)
    %9 = arith.cmpi slt, %7, %cst : tensor<256xi32, #blocked> loc(#loc6)
    %10 = arith.remsi %6, %cst_3 : tensor<256xi32, #blocked1> loc(#loc7)
    %11 = arith.remsi %7, %cst_0 : tensor<256xi32, #blocked> loc(#loc7)
    %12 = arith.divsi %6, %cst_3 : tensor<256xi32, #blocked1> loc(#loc8)
    %13 = arith.divsi %7, %cst_0 : tensor<256xi32, #blocked> loc(#loc8)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %15 = tt.addptr %14, %6 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc9)
    %16 = tt.load %15, %8 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %17 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %18 = tt.load %17 : !tt.ptr<f32> loc(#loc12)
    %19 = tt.splat %18 : f32 -> tensor<256xf32, #blocked1> loc(#loc13)
    %20 = tt.addptr %arg1, %c1_i32 : !tt.ptr<f32>, i32 loc(#loc14)
    %21 = tt.load %20 : !tt.ptr<f32> loc(#loc15)
    %22 = tt.splat %21 : f32 -> tensor<256xf32, #blocked1> loc(#loc16)
    %23 = tt.addptr %arg1, %c2_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %24 = tt.load %23 : !tt.ptr<f32> loc(#loc18)
    %25 = tt.splat %24 : f32 -> tensor<256xf32, #blocked1> loc(#loc19)
    %26 = tt.addptr %arg1, %c3_i32 : !tt.ptr<f32>, i32 loc(#loc20)
    %27 = tt.load %26 : !tt.ptr<f32> loc(#loc21)
    %28 = tt.splat %27 : f32 -> tensor<256xf32, #blocked1> loc(#loc22)
    %29 = arith.mulf %19, %16 : tensor<256xf32, #blocked1> loc(#loc23)
    %30 = math.sin %29 : tensor<256xf32, #blocked1> loc(#loc24)
    %31 = math.cos %29 : tensor<256xf32, #blocked1> loc(#loc25)
    %32 = arith.mulf %22, %16 : tensor<256xf32, #blocked1> loc(#loc26)
    %33 = math.sin %32 : tensor<256xf32, #blocked1> loc(#loc27)
    %34 = math.cos %32 : tensor<256xf32, #blocked1> loc(#loc28)
    %35 = arith.mulf %25, %16 : tensor<256xf32, #blocked1> loc(#loc29)
    %36 = math.sin %35 : tensor<256xf32, #blocked1> loc(#loc30)
    %37 = math.cos %35 : tensor<256xf32, #blocked1> loc(#loc31)
    %38 = arith.mulf %28, %16 : tensor<256xf32, #blocked1> loc(#loc32)
    %39 = math.sin %38 : tensor<256xf32, #blocked1> loc(#loc33)
    %40 = math.cos %38 : tensor<256xf32, #blocked1> loc(#loc34)
    %41 = arith.muli %12, %cst_2 : tensor<256xi32, #blocked1> loc(#loc35)
    %42 = arith.muli %13, %cst_1 : tensor<256xi32, #blocked> loc(#loc35)
    %43 = arith.addi %10, %41 : tensor<256xi32, #blocked1> loc(#loc36)
    %44 = arith.addi %11, %42 : tensor<256xi32, #blocked> loc(#loc36)
    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %46 = tt.addptr %45, %43 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc37)
    tt.store %46, %16, %8 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %47 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc39)
    %48 = tt.addptr %47, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc39)
    %49 = triton_gpu.convert_layout %30 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc40)
    tt.store %48, %49, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc40)
    %50 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc41)
    %51 = tt.addptr %50, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc41)
    %52 = triton_gpu.convert_layout %31 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc42)
    tt.store %51, %52, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc42)
    %53 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc43)
    %54 = tt.addptr %53, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc43)
    %55 = triton_gpu.convert_layout %33 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc44)
    tt.store %54, %55, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc44)
    %56 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %57 = tt.addptr %56, %43 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc45)
    tt.store %57, %34, %8 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %58 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc47)
    %59 = tt.addptr %58, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc47)
    %60 = triton_gpu.convert_layout %36 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc48)
    tt.store %59, %60, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc48)
    %61 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc49)
    %62 = tt.addptr %61, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc49)
    %63 = triton_gpu.convert_layout %37 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc50)
    tt.store %62, %63, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc50)
    %64 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc51)
    %65 = tt.addptr %64, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc51)
    %66 = triton_gpu.convert_layout %39 : tensor<256xf32, #blocked1> -> tensor<256xf32, #blocked> loc(#loc52)
    tt.store %65, %66, %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc52)
    %67 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc53)
    %68 = tt.addptr %67, %43 : tensor<256x!tt.ptr<f32>, #blocked1>, tensor<256xi32, #blocked1> loc(#loc53)
    tt.store %68, %40, %8 : tensor<256x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":21:28)
#loc3 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":21:33)
#loc4 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":22:36)
#loc5 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":22:23)
#loc6 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":23:21)
#loc7 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":25:19)
#loc8 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":26:19)
#loc9 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":27:30)
#loc10 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":27:35)
#loc11 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":28:30)
#loc12 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":28:19)
#loc13 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":29:33)
#loc14 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":30:30)
#loc15 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":30:19)
#loc16 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":31:33)
#loc17 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":32:31)
#loc18 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":32:20)
#loc19 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":33:35)
#loc20 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":34:31)
#loc21 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":34:20)
#loc22 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":35:35)
#loc23 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":36:18)
#loc24 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":37:23)
#loc25 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":38:23)
#loc26 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":39:18)
#loc27 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":40:23)
#loc28 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":41:24)
#loc29 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":42:20)
#loc30 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":43:24)
#loc31 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":44:24)
#loc32 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":45:20)
#loc33 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":46:24)
#loc34 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":47:24)
#loc35 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":48:33)
#loc36 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":48:30)
#loc37 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":48:25)
#loc38 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":48:44)
#loc39 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":49:25)
#loc40 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":49:44)
#loc41 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":50:25)
#loc42 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":50:44)
#loc43 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":51:25)
#loc44 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":51:44)
#loc45 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":52:25)
#loc46 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":52:45)
#loc47 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":53:25)
#loc48 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":53:45)
#loc49 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":54:25)
#loc50 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":54:45)
#loc51 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":55:25)
#loc52 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":55:45)
#loc53 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":56:25)
#loc54 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":56:45)
#loc55 = loc("inductor_cache/bb/cbbqdyfxttjdq3nnmt36l6mzojhmhtj52thc4zevq77hiwo4xvxa.py":56:4)
