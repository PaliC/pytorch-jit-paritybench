; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_mul_sigmoid_29(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 3072, !dbg !14
  %15 = icmp slt i32 %13, 3072, !dbg !14
  %16 = and i32 %10, 7, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 768, !dbg !16
  %18 = mul i32 %17, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul nuw nsw i32 %16, 768, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 12288, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = add nsw i32 %20, 6144, !dbg !19
  %24 = add i32 %23, %21, !dbg !21
  %25 = sext i32 %22 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = fsub float 0.000000e+00, %34, !dbg !24
  %48 = fsub float 0.000000e+00, %35, !dbg !24
  %49 = fsub float 0.000000e+00, %36, !dbg !24
  %50 = fsub float 0.000000e+00, %37, !dbg !24
  %51 = fsub float 0.000000e+00, %43, !dbg !24
  %52 = fsub float 0.000000e+00, %44, !dbg !24
  %53 = fsub float 0.000000e+00, %45, !dbg !24
  %54 = fsub float 0.000000e+00, %46, !dbg !24
  %55 = fmul float %47, 0x3FF7154760000000, !dbg !28
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #3, !dbg !28
  %57 = fmul float %48, 0x3FF7154760000000, !dbg !28
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #3, !dbg !28
  %59 = fmul float %49, 0x3FF7154760000000, !dbg !28
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #3, !dbg !28
  %61 = fmul float %50, 0x3FF7154760000000, !dbg !28
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #3, !dbg !28
  %63 = fmul float %51, 0x3FF7154760000000, !dbg !28
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #3, !dbg !28
  %65 = fmul float %52, 0x3FF7154760000000, !dbg !28
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #3, !dbg !28
  %67 = fmul float %53, 0x3FF7154760000000, !dbg !28
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #3, !dbg !28
  %69 = fmul float %54, 0x3FF7154760000000, !dbg !28
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #3, !dbg !28
  %71 = fadd float %56, 1.000000e+00, !dbg !29
  %72 = fadd float %58, 1.000000e+00, !dbg !29
  %73 = fadd float %60, 1.000000e+00, !dbg !29
  %74 = fadd float %62, 1.000000e+00, !dbg !29
  %75 = fadd float %64, 1.000000e+00, !dbg !29
  %76 = fadd float %66, 1.000000e+00, !dbg !29
  %77 = fadd float %68, 1.000000e+00, !dbg !29
  %78 = fadd float %70, 1.000000e+00, !dbg !29
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #3, !dbg !30
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %72) #3, !dbg !30
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #3, !dbg !30
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %74) #3, !dbg !30
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %75) #3, !dbg !30
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %76) #3, !dbg !30
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %77) #3, !dbg !30
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #3, !dbg !30
  %87 = fmul float %79, %34, !dbg !31
  %88 = fmul float %80, %35, !dbg !31
  %89 = fmul float %81, %36, !dbg !31
  %90 = fmul float %82, %37, !dbg !31
  %91 = fmul float %83, %43, !dbg !31
  %92 = fmul float %84, %44, !dbg !31
  %93 = fmul float %85, %45, !dbg !31
  %94 = fmul float %86, %46, !dbg !31
  %95 = fadd float %87, %91, !dbg !32
  %96 = fadd float %88, %92, !dbg !32
  %97 = fadd float %89, %93, !dbg !32
  %98 = fadd float %90, %94, !dbg !32
  %99 = shl nuw nsw i32 %9, 3, !dbg !35
  %100 = or disjoint i32 %99, %16, !dbg !35
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !35
  %102 = bitcast float %95 to i32, !dbg !35
  %103 = select i1 %14, i32 %102, i32 0, !dbg !32
  %104 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %104, i1 true) #3, !dbg !35
  %105 = or disjoint i32 %99, 8, !dbg !35
  %106 = or disjoint i32 %105, %16, !dbg !35
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !35
  %108 = bitcast float %96 to i32, !dbg !35
  %109 = select i1 %14, i32 %108, i32 0, !dbg !32
  %110 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %110, i1 true) #3, !dbg !35
  %111 = or disjoint i32 %99, 16, !dbg !35
  %112 = or disjoint i32 %111, %16, !dbg !35
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !35
  %114 = bitcast float %97 to i32, !dbg !35
  %115 = select i1 %14, i32 %114, i32 0, !dbg !32
  %116 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %116, i1 true) #3, !dbg !35
  %117 = or disjoint i32 %99, 24, !dbg !35
  %118 = or disjoint i32 %117, %16, !dbg !35
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !35
  %120 = bitcast float %98 to i32, !dbg !35
  %121 = select i1 %14, i32 %120, i32 0, !dbg !32
  %122 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %122, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %123 = icmp slt i32 %7, 1024, !dbg !35
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !35
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %123) #3, !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !35
  %128 = bitcast i32 %127 to float, !dbg !35
  %129 = fadd float %126, %128, !dbg !32
  %130 = bitcast float %129 to i32, !dbg !35
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !35
  %132 = bitcast i32 %131 to float, !dbg !35
  %133 = fadd float %129, %132, !dbg !32
  %134 = bitcast float %133 to i32, !dbg !35
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !35
  %136 = bitcast i32 %135 to float, !dbg !35
  %137 = fadd float %133, %136, !dbg !32
  %138 = and i32 %7, 7, !dbg !35
  %139 = icmp eq i32 %138, 0, !dbg !35
  %140 = and i1 %123, %139, !dbg !35
  %141 = bitcast float %137 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %141, i1 %140) #3, !dbg !35
  %142 = getelementptr i8, ptr addrspace(3) %124, i32 1024, !dbg !35
  %143 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %123) #3, !dbg !35
  %144 = bitcast i32 %143 to float, !dbg !35
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !35
  %146 = bitcast i32 %145 to float, !dbg !35
  %147 = fadd float %144, %146, !dbg !32
  %148 = bitcast float %147 to i32, !dbg !35
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !35
  %150 = bitcast i32 %149 to float, !dbg !35
  %151 = fadd float %147, %150, !dbg !32
  %152 = bitcast float %151 to i32, !dbg !35
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !35
  %154 = bitcast i32 %153 to float, !dbg !35
  %155 = fadd float %151, %154, !dbg !32
  %156 = bitcast float %155 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %156, i1 %140) #3, !dbg !35
  %157 = getelementptr i8, ptr addrspace(3) %124, i32 2048, !dbg !35
  %158 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %123) #3, !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %159, %161, !dbg !32
  %163 = bitcast float %162 to i32, !dbg !35
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = fadd float %162, %165, !dbg !32
  %167 = bitcast float %166 to i32, !dbg !35
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !35
  %169 = bitcast i32 %168 to float, !dbg !35
  %170 = fadd float %166, %169, !dbg !32
  %171 = bitcast float %170 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %171, i1 %140) #3, !dbg !35
  %172 = getelementptr i8, ptr addrspace(3) %124, i32 3072, !dbg !35
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %123) #3, !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !35
  %176 = bitcast i32 %175 to float, !dbg !35
  %177 = fadd float %174, %176, !dbg !32
  %178 = bitcast float %177 to i32, !dbg !35
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !35
  %180 = bitcast i32 %179 to float, !dbg !35
  %181 = fadd float %177, %180, !dbg !32
  %182 = bitcast float %181 to i32, !dbg !35
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !35
  %184 = bitcast i32 %183 to float, !dbg !35
  %185 = fadd float %181, %184, !dbg !32
  %186 = bitcast float %185 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %186, i1 %140) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !35
  %188 = load i32, ptr addrspace(3) %187, align 16, !dbg !35
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !35
  %190 = load i32, ptr addrspace(3) %189, align 16, !dbg !35
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !35
  %192 = load i32, ptr addrspace(3) %191, align 16, !dbg !35
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !35
  %194 = load i32, ptr addrspace(3) %193, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %195, i32 %188, i32 %190, i32 %192, i32 %194, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !36
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !36
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float 1.600000e+01) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %199 = sext i32 %13 to i64, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !38
  %201 = and i32 %7, 128, !dbg !39
  %202 = icmp eq i32 %201, 0, !dbg !39
  %203 = bitcast float %198 to i32, !dbg !39
  %204 = and i1 %202, %15, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %200, i1 %204) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnlzldeoieo2fxkgt25vkfmb2tv7s6bo5o3y6t24d4vf7hxgprcu.py", directory: "inductor_cache/nl")
!4 = !{ptr @triton_per_fused_mean_mul_sigmoid_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_mul_sigmoid_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_mul_sigmoid_29", linkageName: "triton_per_fused_mean_mul_sigmoid_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 34, column: 22, scope: !7)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!34 = !DILocation(line: 38, column: 24, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
!38 = !DILocation(line: 42, column: 28, scope: !7)
!39 = !DILocation(line: 42, column: 39, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
