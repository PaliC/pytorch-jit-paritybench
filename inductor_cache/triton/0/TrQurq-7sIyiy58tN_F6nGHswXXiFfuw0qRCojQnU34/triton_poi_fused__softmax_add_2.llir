; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = mul i32 %14, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %12, 4, !dbg !16
  %17 = shl i32 %11, 2, !dbg !17
  %18 = shl i32 %12, 2, !dbg !17
  %19 = sext i32 %17 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !19
  %25 = shl nsw i32 %14, 2, !dbg !20
  %26 = shl nsw i32 %.decomposed, 6, !dbg !21
  %27 = shl nsw i32 %16, 6, !dbg !21
  %28 = add i32 %25, %26, !dbg !22
  %29 = add i32 %25, %27, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !24
  %36 = or disjoint i32 %17, 1, !dbg !25
  %37 = or disjoint i32 %18, 1, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %13) #1, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !27
  %44 = or disjoint i32 %25, 1, !dbg !28
  %45 = add i32 %44, %26, !dbg !29
  %46 = add i32 %44, %27, !dbg !29
  %47 = sext i32 %45 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !30
  %49 = sext i32 %46 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #1, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %13) #1, !dbg !31
  %53 = or disjoint i32 %17, 2, !dbg !32
  %54 = or disjoint i32 %18, 2, !dbg !32
  %55 = sext i32 %53 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = sext i32 %54 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %13) #1, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %13) #1, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = or disjoint i32 %25, 2, !dbg !35
  %64 = add i32 %63, %26, !dbg !36
  %65 = add i32 %63, %27, !dbg !36
  %66 = sext i32 %64 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !37
  %68 = sext i32 %65 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = or disjoint i32 %17, 3, !dbg !39
  %75 = or disjoint i32 %18, 3, !dbg !39
  %76 = sext i32 %74 to i64, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !40
  %78 = sext i32 %75 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %13) #1, !dbg !41
  %81 = bitcast i32 %80 to float, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = or disjoint i32 %25, 3, !dbg !42
  %85 = add i32 %84, %26, !dbg !43
  %86 = add i32 %84, %27, !dbg !43
  %87 = sext i32 %85 to i64, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !44
  %89 = sext i32 %86 to i64, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !44
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %13) #1, !dbg !45
  %92 = bitcast i32 %91 to float, !dbg !45
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %13) #1, !dbg !45
  %94 = bitcast i32 %93 to float, !dbg !45
  %95 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %96 = insertelement <2 x i32> %95, i32 %42, i64 1, !dbg !19
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !19
  %98 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %99 = insertelement <2 x i32> %98, i32 %51, i64 1, !dbg !24
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !24
  %101 = fadd <2 x float> %97, %100, !dbg !46
  %102 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %103 = insertelement <2 x i32> %102, i32 %43, i64 1, !dbg !19
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !19
  %105 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %106 = insertelement <2 x i32> %105, i32 %52, i64 1, !dbg !24
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !24
  %108 = fadd <2 x float> %104, %107, !dbg !46
  %109 = extractelement <2 x float> %101, i64 0, !dbg !47
  %110 = extractelement <2 x float> %101, i64 1, !dbg !48
  %111 = fcmp ogt float %109, %110, !dbg !49
  %112 = extractelement <2 x float> %108, i64 0, !dbg !47
  %113 = extractelement <2 x float> %108, i64 1, !dbg !48
  %114 = fcmp ogt float %112, %113, !dbg !49
  %115 = fcmp uno float %109, 0.000000e+00, !dbg !53
  %116 = fcmp uno float %112, 0.000000e+00, !dbg !53
  %117 = or i1 %115, %111, !dbg !54
  %118 = or i1 %116, %114, !dbg !54
  %119 = select i1 %117, float %109, float %110, !dbg !55
  %120 = select i1 %118, float %112, float %113, !dbg !55
  %121 = fadd float %60, %71, !dbg !56
  %122 = fadd float %62, %73, !dbg !56
  %123 = fcmp ogt float %119, %121, !dbg !57
  %124 = fcmp ogt float %120, %122, !dbg !57
  %125 = fcmp uno float %119, 0.000000e+00, !dbg !59
  %126 = fcmp uno float %120, 0.000000e+00, !dbg !59
  %127 = or i1 %125, %123, !dbg !60
  %128 = or i1 %126, %124, !dbg !60
  %129 = select i1 %127, float %119, float %121, !dbg !61
  %130 = select i1 %128, float %120, float %122, !dbg !61
  %131 = fadd float %81, %92, !dbg !62
  %132 = fadd float %83, %94, !dbg !62
  %133 = fcmp ogt float %129, %131, !dbg !63
  %134 = fcmp ogt float %130, %132, !dbg !63
  %135 = fcmp uno float %129, 0.000000e+00, !dbg !65
  %136 = fcmp uno float %130, 0.000000e+00, !dbg !65
  %137 = or i1 %135, %133, !dbg !66
  %138 = or i1 %136, %134, !dbg !66
  %139 = select i1 %137, float %129, float %131, !dbg !67
  %140 = select i1 %138, float %130, float %132, !dbg !67
  %141 = fsub float %109, %139, !dbg !47
  %142 = fsub float %112, %140, !dbg !47
  %143 = fmul float %141, 0x3FF7154760000000, !dbg !68
  %144 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %143) #1, !dbg !68
  %145 = fmul float %142, 0x3FF7154760000000, !dbg !68
  %146 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %145) #1, !dbg !68
  %147 = fsub float %110, %139, !dbg !48
  %148 = fsub float %113, %140, !dbg !48
  %149 = fmul float %147, 0x3FF7154760000000, !dbg !69
  %150 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #1, !dbg !69
  %151 = fmul float %148, 0x3FF7154760000000, !dbg !69
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #1, !dbg !69
  %153 = fadd float %144, %150, !dbg !70
  %154 = fadd float %146, %152, !dbg !70
  %155 = fsub float %121, %139, !dbg !71
  %156 = fsub float %122, %140, !dbg !71
  %157 = fmul float %155, 0x3FF7154760000000, !dbg !72
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #1, !dbg !72
  %159 = fmul float %156, 0x3FF7154760000000, !dbg !72
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #1, !dbg !72
  %161 = fadd float %153, %158, !dbg !73
  %162 = fadd float %154, %160, !dbg !73
  %163 = fsub float %131, %139, !dbg !74
  %164 = fsub float %132, %140, !dbg !74
  %165 = fmul float %163, 0x3FF7154760000000, !dbg !75
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #1, !dbg !75
  %167 = fmul float %164, 0x3FF7154760000000, !dbg !75
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #1, !dbg !75
  %169 = fadd float %161, %166, !dbg !76
  %170 = fadd float %162, %168, !dbg !76
  %171 = sext i32 %11 to i64, !dbg !77
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !77
  %173 = bitcast float %139 to i32, !dbg !78
  %174 = bitcast float %140 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %13) #1, !dbg !78
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !79
  %176 = bitcast float %169 to i32, !dbg !80
  %177 = bitcast float %170 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %13) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cspstjxjxdhn43oxmjylqhnbe6sae62fsqsd4k6r3pwsnyom6kyg.py", directory: "inductor_cache/sp")
!4 = !{ptr @triton_poi_fused__softmax_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_2", linkageName: "triton_poi_fused__softmax_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 32, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 45, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 49, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 42, scope: !7)
!35 = !DILocation(line: 32, column: 35, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 50, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 42, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 42, scope: !7)
!44 = !DILocation(line: 34, column: 31, scope: !7)
!45 = !DILocation(line: 34, column: 50, scope: !7)
!46 = !DILocation(line: 35, column: 18, scope: !7)
!47 = !DILocation(line: 47, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 40, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 41, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !58)
!58 = !DILocation(line: 43, column: 41, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !58)
!62 = !DILocation(line: 44, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !64)
!64 = !DILocation(line: 46, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !64)
!68 = !DILocation(line: 49, column: 24, scope: !7)
!69 = !DILocation(line: 52, column: 24, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 54, column: 20, scope: !7)
!72 = !DILocation(line: 56, column: 24, scope: !7)
!73 = !DILocation(line: 57, column: 20, scope: !7)
!74 = !DILocation(line: 58, column: 20, scope: !7)
!75 = !DILocation(line: 60, column: 24, scope: !7)
!76 = !DILocation(line: 61, column: 20, scope: !7)
!77 = !DILocation(line: 62, column: 25, scope: !7)
!78 = !DILocation(line: 62, column: 37, scope: !7)
!79 = !DILocation(line: 63, column: 25, scope: !7)
!80 = !DILocation(line: 63, column: 37, scope: !7)
!81 = !DILocation(line: 63, column: 4, scope: !7)
