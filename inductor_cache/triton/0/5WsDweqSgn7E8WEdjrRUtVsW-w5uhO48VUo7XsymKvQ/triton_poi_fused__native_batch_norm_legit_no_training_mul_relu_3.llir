; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = sdiv i32 %19, 4096, !dbg !14
  %22 = sdiv i32 %20, 4096, !dbg !14
  %23 = srem i32 %21, 16, !dbg !15
  %24 = srem i32 %22, 16, !dbg !15
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %31 = sext i32 %21 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = sext i32 %22 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %40 = bitcast i32 %39 to float, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %42 = bitcast i32 %41 to float, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %46 = bitcast i32 %45 to float, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %50 = bitcast i32 %49 to float, !dbg !19
  %51 = sext i32 %23 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !20
  %53 = sext i32 %24 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !20
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !21
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !21
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !23
  %70 = bitcast i32 %69 to float, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !23
  %74 = bitcast i32 %73 to float, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !23
  %78 = bitcast i32 %77 to float, !dbg !23
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !23
  %80 = bitcast i32 %79 to float, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !30
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !32
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !34
  %140 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !34
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !35
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !35
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !35
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !35
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !35
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !35
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !35
  %149 = fsub float 0.000000e+00, %36, !dbg !36
  %150 = fsub float 0.000000e+00, %38, !dbg !36
  %151 = fsub float 0.000000e+00, %40, !dbg !36
  %152 = fsub float 0.000000e+00, %42, !dbg !36
  %153 = fsub float 0.000000e+00, %44, !dbg !36
  %154 = fsub float 0.000000e+00, %46, !dbg !36
  %155 = fsub float 0.000000e+00, %48, !dbg !36
  %156 = fsub float 0.000000e+00, %50, !dbg !36
  %157 = fmul float %149, 0x3FF7154760000000, !dbg !40
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #3, !dbg !40
  %159 = fmul float %150, 0x3FF7154760000000, !dbg !40
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #3, !dbg !40
  %161 = fmul float %151, 0x3FF7154760000000, !dbg !40
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #3, !dbg !40
  %163 = fmul float %152, 0x3FF7154760000000, !dbg !40
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #3, !dbg !40
  %165 = fmul float %153, 0x3FF7154760000000, !dbg !40
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #3, !dbg !40
  %167 = fmul float %154, 0x3FF7154760000000, !dbg !40
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #3, !dbg !40
  %169 = fmul float %155, 0x3FF7154760000000, !dbg !40
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %169) #3, !dbg !40
  %171 = fmul float %156, 0x3FF7154760000000, !dbg !40
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %171) #3, !dbg !40
  %173 = fadd float %158, 1.000000e+00, !dbg !41
  %174 = fadd float %160, 1.000000e+00, !dbg !41
  %175 = fadd float %162, 1.000000e+00, !dbg !41
  %176 = fadd float %164, 1.000000e+00, !dbg !41
  %177 = fadd float %166, 1.000000e+00, !dbg !41
  %178 = fadd float %168, 1.000000e+00, !dbg !41
  %179 = fadd float %170, 1.000000e+00, !dbg !41
  %180 = fadd float %172, 1.000000e+00, !dbg !41
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %173) #3, !dbg !42
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %174) #3, !dbg !42
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %175) #3, !dbg !42
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %176) #3, !dbg !42
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %177) #3, !dbg !42
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %178) #3, !dbg !42
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %179) #3, !dbg !42
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %180) #3, !dbg !42
  %189 = fadd float %66, 0x3EE4F8B580000000, !dbg !43
  %190 = fadd float %68, 0x3EE4F8B580000000, !dbg !43
  %191 = fadd float %70, 0x3EE4F8B580000000, !dbg !43
  %192 = fadd float %72, 0x3EE4F8B580000000, !dbg !43
  %193 = fadd float %74, 0x3EE4F8B580000000, !dbg !43
  %194 = fadd float %76, 0x3EE4F8B580000000, !dbg !43
  %195 = fadd float %78, 0x3EE4F8B580000000, !dbg !43
  %196 = fadd float %80, 0x3EE4F8B580000000, !dbg !43
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %197, 0, !dbg !44
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %198, 0, !dbg !44
  br i1 %.not.i, label %204, label %199, !dbg !44

199:                                              ; preds = %13
  br i1 %.not1.i, label %202, label %200, !dbg !44

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

204:                                              ; preds = %13
  br i1 %.not1.i, label %207, label %205, !dbg !44

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %200, %202, %205, %207
  %.0.i = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !44
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %209, 0, !dbg !44
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %210, 0, !dbg !44
  br i1 %.not.i1, label %216, label %211, !dbg !44

211:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %214, label %212, !dbg !44

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

216:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %219, label %217, !dbg !44

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %212, %214, %217, %219
  %.0.i3 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !44
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %221, 0, !dbg !44
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %222, 0, !dbg !44
  br i1 %.not.i6, label %228, label %223, !dbg !44

223:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %226, label %224, !dbg !44

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

228:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %231, label %229, !dbg !44

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %224, %226, %229, %231
  %.0.i8 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !44
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %233, 0, !dbg !44
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %234, 0, !dbg !44
  br i1 %.not.i11, label %240, label %235, !dbg !44

235:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %238, label %236, !dbg !44

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

240:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %243, label %241, !dbg !44

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %236, %238, %241, %243
  %.0.i13 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !44
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i16 = icmp eq i32 %245, 0, !dbg !44
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i19 = icmp eq i32 %246, 0, !dbg !44
  br i1 %.not.i16, label %252, label %247, !dbg !44

247:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %250, label %248, !dbg !44

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

252:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %255, label %253, !dbg !44

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

__nv_sqrtf.exit20:                                ; preds = %248, %250, %253, %255
  %.0.i18 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !44
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i21 = icmp eq i32 %257, 0, !dbg !44
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i24 = icmp eq i32 %258, 0, !dbg !44
  br i1 %.not.i21, label %264, label %259, !dbg !44

259:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %262, label %260, !dbg !44

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

264:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %267, label %265, !dbg !44

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

__nv_sqrtf.exit25:                                ; preds = %260, %262, %265, %267
  %.0.i23 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !44
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i26 = icmp eq i32 %269, 0, !dbg !44
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i29 = icmp eq i32 %270, 0, !dbg !44
  br i1 %.not.i26, label %276, label %271, !dbg !44

271:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %274, label %272, !dbg !44

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

276:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %279, label %277, !dbg !44

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

__nv_sqrtf.exit30:                                ; preds = %272, %274, %277, %279
  %.0.i28 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !44
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %281, 0, !dbg !44
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i34 = icmp eq i32 %282, 0, !dbg !44
  br i1 %.not.i31, label %288, label %283, !dbg !44

283:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %286, label %284, !dbg !44

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

288:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %291, label %289, !dbg !44

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

__nv_sqrtf.exit35:                                ; preds = %284, %286, %289, %291
  %.0.i33 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !44
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !45
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !45
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !45
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !45
  %301 = fadd float %114, 0x3EE4F8B580000000, !dbg !46
  %302 = fadd float %116, 0x3EE4F8B580000000, !dbg !46
  %303 = fadd float %118, 0x3EE4F8B580000000, !dbg !46
  %304 = fadd float %120, 0x3EE4F8B580000000, !dbg !46
  %305 = fadd float %122, 0x3EE4F8B580000000, !dbg !46
  %306 = fadd float %124, 0x3EE4F8B580000000, !dbg !46
  %307 = fadd float %126, 0x3EE4F8B580000000, !dbg !46
  %308 = fadd float %128, 0x3EE4F8B580000000, !dbg !46
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i36 = icmp eq i32 %309, 0, !dbg !47
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i39 = icmp eq i32 %310, 0, !dbg !47
  br i1 %.not.i36, label %316, label %311, !dbg !47

311:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %314, label %312, !dbg !47

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #3, !dbg !47
  br label %__nv_sqrtf.exit40, !dbg !47

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #3, !dbg !47
  br label %__nv_sqrtf.exit40, !dbg !47

316:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %319, label %317, !dbg !47

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #3, !dbg !47
  br label %__nv_sqrtf.exit40, !dbg !47

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #3, !dbg !47
  br label %__nv_sqrtf.exit40, !dbg !47

__nv_sqrtf.exit40:                                ; preds = %312, %314, %317, %319
  %.0.i38 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !47
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i41 = icmp eq i32 %321, 0, !dbg !47
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i44 = icmp eq i32 %322, 0, !dbg !47
  br i1 %.not.i41, label %328, label %323, !dbg !47

323:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %326, label %324, !dbg !47

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #3, !dbg !47
  br label %__nv_sqrtf.exit45, !dbg !47

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #3, !dbg !47
  br label %__nv_sqrtf.exit45, !dbg !47

328:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %331, label %329, !dbg !47

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #3, !dbg !47
  br label %__nv_sqrtf.exit45, !dbg !47

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #3, !dbg !47
  br label %__nv_sqrtf.exit45, !dbg !47

__nv_sqrtf.exit45:                                ; preds = %324, %326, %329, %331
  %.0.i43 = phi float [ %325, %324 ], [ %327, %326 ], [ %330, %329 ], [ %332, %331 ], !dbg !47
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i46 = icmp eq i32 %333, 0, !dbg !47
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i49 = icmp eq i32 %334, 0, !dbg !47
  br i1 %.not.i46, label %340, label %335, !dbg !47

335:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %338, label %336, !dbg !47

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %303) #3, !dbg !47
  br label %__nv_sqrtf.exit50, !dbg !47

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %303) #3, !dbg !47
  br label %__nv_sqrtf.exit50, !dbg !47

340:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %343, label %341, !dbg !47

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.f(float %303) #3, !dbg !47
  br label %__nv_sqrtf.exit50, !dbg !47

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.f(float %303) #3, !dbg !47
  br label %__nv_sqrtf.exit50, !dbg !47

__nv_sqrtf.exit50:                                ; preds = %336, %338, %341, %343
  %.0.i48 = phi float [ %337, %336 ], [ %339, %338 ], [ %342, %341 ], [ %344, %343 ], !dbg !47
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i51 = icmp eq i32 %345, 0, !dbg !47
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i54 = icmp eq i32 %346, 0, !dbg !47
  br i1 %.not.i51, label %352, label %347, !dbg !47

347:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %350, label %348, !dbg !47

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %304) #3, !dbg !47
  br label %__nv_sqrtf.exit55, !dbg !47

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %304) #3, !dbg !47
  br label %__nv_sqrtf.exit55, !dbg !47

352:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %355, label %353, !dbg !47

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.f(float %304) #3, !dbg !47
  br label %__nv_sqrtf.exit55, !dbg !47

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.f(float %304) #3, !dbg !47
  br label %__nv_sqrtf.exit55, !dbg !47

__nv_sqrtf.exit55:                                ; preds = %348, %350, %353, %355
  %.0.i53 = phi float [ %349, %348 ], [ %351, %350 ], [ %354, %353 ], [ %356, %355 ], !dbg !47
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i56 = icmp eq i32 %357, 0, !dbg !47
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i59 = icmp eq i32 %358, 0, !dbg !47
  br i1 %.not.i56, label %364, label %359, !dbg !47

359:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %362, label %360, !dbg !47

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %305) #3, !dbg !47
  br label %__nv_sqrtf.exit60, !dbg !47

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %305) #3, !dbg !47
  br label %__nv_sqrtf.exit60, !dbg !47

364:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %367, label %365, !dbg !47

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %305) #3, !dbg !47
  br label %__nv_sqrtf.exit60, !dbg !47

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %305) #3, !dbg !47
  br label %__nv_sqrtf.exit60, !dbg !47

__nv_sqrtf.exit60:                                ; preds = %360, %362, %365, %367
  %.0.i58 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !47
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i61 = icmp eq i32 %369, 0, !dbg !47
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i64 = icmp eq i32 %370, 0, !dbg !47
  br i1 %.not.i61, label %376, label %371, !dbg !47

371:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %374, label %372, !dbg !47

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %306) #3, !dbg !47
  br label %__nv_sqrtf.exit65, !dbg !47

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %306) #3, !dbg !47
  br label %__nv_sqrtf.exit65, !dbg !47

376:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %379, label %377, !dbg !47

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %306) #3, !dbg !47
  br label %__nv_sqrtf.exit65, !dbg !47

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %306) #3, !dbg !47
  br label %__nv_sqrtf.exit65, !dbg !47

__nv_sqrtf.exit65:                                ; preds = %372, %374, %377, %379
  %.0.i63 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !47
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i66 = icmp eq i32 %381, 0, !dbg !47
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i69 = icmp eq i32 %382, 0, !dbg !47
  br i1 %.not.i66, label %388, label %383, !dbg !47

383:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %386, label %384, !dbg !47

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %307) #3, !dbg !47
  br label %__nv_sqrtf.exit70, !dbg !47

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %307) #3, !dbg !47
  br label %__nv_sqrtf.exit70, !dbg !47

388:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %391, label %389, !dbg !47

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %307) #3, !dbg !47
  br label %__nv_sqrtf.exit70, !dbg !47

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %307) #3, !dbg !47
  br label %__nv_sqrtf.exit70, !dbg !47

__nv_sqrtf.exit70:                                ; preds = %384, %386, %389, %391
  %.0.i68 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !47
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i71 = icmp eq i32 %393, 0, !dbg !47
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i74 = icmp eq i32 %394, 0, !dbg !47
  br i1 %.not.i71, label %400, label %395, !dbg !47

395:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %398, label %396, !dbg !47

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %308) #3, !dbg !47
  br label %__nv_sqrtf.exit75, !dbg !47

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %308) #3, !dbg !47
  br label %__nv_sqrtf.exit75, !dbg !47

400:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %403, label %401, !dbg !47

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %308) #3, !dbg !47
  br label %__nv_sqrtf.exit75, !dbg !47

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %308) #3, !dbg !47
  br label %__nv_sqrtf.exit75, !dbg !47

__nv_sqrtf.exit75:                                ; preds = %396, %398, %401, %403
  %.0.i73 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !47
  %405 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %406 = insertelement <16 x i32> poison, i32 %110, i64 0, !dbg !29
  %407 = insertelement <16 x i32> %406, i32 %109, i64 1, !dbg !29
  %408 = insertelement <16 x i32> %407, i32 %108, i64 2, !dbg !29
  %409 = insertelement <16 x i32> %408, i32 %107, i64 3, !dbg !29
  %410 = insertelement <16 x i32> %409, i32 %106, i64 4, !dbg !29
  %411 = insertelement <16 x i32> %410, i32 %105, i64 5, !dbg !29
  %412 = insertelement <16 x i32> %411, i32 %104, i64 6, !dbg !29
  %413 = insertelement <16 x i32> %412, i32 %103, i64 7, !dbg !29
  %414 = insertelement <16 x i32> %413, i32 %62, i64 8, !dbg !29
  %415 = insertelement <16 x i32> %414, i32 %61, i64 9, !dbg !29
  %416 = insertelement <16 x i32> %415, i32 %60, i64 10, !dbg !29
  %417 = insertelement <16 x i32> %416, i32 %59, i64 11, !dbg !29
  %418 = insertelement <16 x i32> %417, i32 %58, i64 12, !dbg !29
  %419 = insertelement <16 x i32> %418, i32 %57, i64 13, !dbg !29
  %420 = insertelement <16 x i32> %419, i32 %56, i64 14, !dbg !29
  %421 = insertelement <16 x i32> %420, i32 %55, i64 15, !dbg !29
  %422 = bitcast <16 x i32> %421 to <16 x float>, !dbg !29
  %423 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %424 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %425 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %426 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %427 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %428 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %429 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %430 = insertelement <16 x i32> poison, i32 %138, i64 0, !dbg !33
  %431 = insertelement <16 x i32> %430, i32 %137, i64 1, !dbg !33
  %432 = insertelement <16 x i32> %431, i32 %136, i64 2, !dbg !33
  %433 = insertelement <16 x i32> %432, i32 %135, i64 3, !dbg !33
  %434 = insertelement <16 x i32> %433, i32 %134, i64 4, !dbg !33
  %435 = insertelement <16 x i32> %434, i32 %133, i64 5, !dbg !33
  %436 = insertelement <16 x i32> %435, i32 %132, i64 6, !dbg !33
  %437 = insertelement <16 x i32> %436, i32 %131, i64 7, !dbg !33
  %438 = insertelement <16 x i32> %437, i32 %90, i64 8, !dbg !33
  %439 = insertelement <16 x i32> %438, i32 %89, i64 9, !dbg !33
  %440 = insertelement <16 x i32> %439, i32 %88, i64 10, !dbg !33
  %441 = insertelement <16 x i32> %440, i32 %87, i64 11, !dbg !33
  %442 = insertelement <16 x i32> %441, i32 %86, i64 12, !dbg !33
  %443 = insertelement <16 x i32> %442, i32 %85, i64 13, !dbg !33
  %444 = insertelement <16 x i32> %443, i32 %84, i64 14, !dbg !33
  %445 = insertelement <16 x i32> %444, i32 %83, i64 15, !dbg !33
  %446 = bitcast <16 x i32> %445 to <16 x float>, !dbg !33
  %447 = insertelement <16 x i32> poison, i32 %148, i64 0, !dbg !35
  %448 = insertelement <16 x i32> %447, i32 %147, i64 1, !dbg !35
  %449 = insertelement <16 x i32> %448, i32 %146, i64 2, !dbg !35
  %450 = insertelement <16 x i32> %449, i32 %145, i64 3, !dbg !35
  %451 = insertelement <16 x i32> %450, i32 %144, i64 4, !dbg !35
  %452 = insertelement <16 x i32> %451, i32 %143, i64 5, !dbg !35
  %453 = insertelement <16 x i32> %452, i32 %142, i64 6, !dbg !35
  %454 = insertelement <16 x i32> %453, i32 %141, i64 7, !dbg !35
  %455 = insertelement <16 x i32> %454, i32 %100, i64 8, !dbg !35
  %456 = insertelement <16 x i32> %455, i32 %99, i64 9, !dbg !35
  %457 = insertelement <16 x i32> %456, i32 %98, i64 10, !dbg !35
  %458 = insertelement <16 x i32> %457, i32 %97, i64 11, !dbg !35
  %459 = insertelement <16 x i32> %458, i32 %96, i64 12, !dbg !35
  %460 = insertelement <16 x i32> %459, i32 %95, i64 13, !dbg !35
  %461 = insertelement <16 x i32> %460, i32 %94, i64 14, !dbg !35
  %462 = insertelement <16 x i32> %461, i32 %93, i64 15, !dbg !35
  %463 = bitcast <16 x i32> %462 to <16 x float>, !dbg !35
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !48
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !48
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !48
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !48
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !48
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !48
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !48
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !48
  %472 = insertelement <8 x i32> poison, i32 %405, i64 0, !dbg !17
  %473 = insertelement <8 x i32> %472, i32 %423, i64 1, !dbg !17
  %474 = insertelement <8 x i32> %473, i32 %424, i64 2, !dbg !17
  %475 = insertelement <8 x i32> %474, i32 %425, i64 3, !dbg !17
  %476 = insertelement <8 x i32> %475, i32 %426, i64 4, !dbg !17
  %477 = insertelement <8 x i32> %476, i32 %427, i64 5, !dbg !17
  %478 = insertelement <8 x i32> %477, i32 %428, i64 6, !dbg !17
  %479 = insertelement <8 x i32> %478, i32 %429, i64 7, !dbg !17
  %480 = bitcast <8 x i32> %479 to <8 x float>, !dbg !17
  %481 = insertelement <8 x float> poison, float %188, i64 0, !dbg !49
  %482 = insertelement <8 x float> %481, float %187, i64 1, !dbg !49
  %483 = insertelement <8 x float> %482, float %186, i64 2, !dbg !49
  %484 = insertelement <8 x float> %483, float %185, i64 3, !dbg !49
  %485 = insertelement <8 x float> %484, float %184, i64 4, !dbg !49
  %486 = insertelement <8 x float> %485, float %183, i64 5, !dbg !49
  %487 = insertelement <8 x float> %486, float %182, i64 6, !dbg !49
  %488 = insertelement <8 x float> %487, float %181, i64 7, !dbg !49
  %489 = fmul <8 x float> %488, %480, !dbg !49
  %490 = shufflevector <8 x float> %489, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !49
  %491 = fsub <16 x float> %490, %422, !dbg !50
  %492 = insertelement <16 x float> poison, float %471, i64 0, !dbg !51
  %493 = insertelement <16 x float> %492, float %470, i64 1, !dbg !51
  %494 = insertelement <16 x float> %493, float %469, i64 2, !dbg !51
  %495 = insertelement <16 x float> %494, float %468, i64 3, !dbg !51
  %496 = insertelement <16 x float> %495, float %467, i64 4, !dbg !51
  %497 = insertelement <16 x float> %496, float %466, i64 5, !dbg !51
  %498 = insertelement <16 x float> %497, float %465, i64 6, !dbg !51
  %499 = insertelement <16 x float> %498, float %464, i64 7, !dbg !51
  %500 = insertelement <16 x float> %499, float %300, i64 8, !dbg !51
  %501 = insertelement <16 x float> %500, float %299, i64 9, !dbg !51
  %502 = insertelement <16 x float> %501, float %298, i64 10, !dbg !51
  %503 = insertelement <16 x float> %502, float %297, i64 11, !dbg !51
  %504 = insertelement <16 x float> %503, float %296, i64 12, !dbg !51
  %505 = insertelement <16 x float> %504, float %295, i64 13, !dbg !51
  %506 = insertelement <16 x float> %505, float %294, i64 14, !dbg !51
  %507 = insertelement <16 x float> %506, float %293, i64 15, !dbg !51
  %508 = fmul <16 x float> %491, %507, !dbg !51
  %509 = fmul <16 x float> %508, %446, !dbg !52
  %510 = fadd <16 x float> %509, %463, !dbg !53
  %511 = fcmp olt <16 x float> %510, zeroinitializer, !dbg !54
  %512 = extractelement <16 x i1> %511, i64 8, !dbg !58
  %513 = extractelement <16 x i1> %511, i64 9, !dbg !58
  %514 = extractelement <16 x i1> %511, i64 10, !dbg !58
  %515 = extractelement <16 x i1> %511, i64 11, !dbg !58
  %516 = extractelement <16 x i1> %511, i64 12, !dbg !58
  %517 = extractelement <16 x i1> %511, i64 13, !dbg !58
  %518 = extractelement <16 x i1> %511, i64 14, !dbg !58
  %519 = extractelement <16 x i1> %511, i64 15, !dbg !58
  %520 = extractelement <16 x i1> %511, i64 7, !dbg !60
  %521 = extractelement <16 x i1> %511, i64 6, !dbg !60
  %522 = extractelement <16 x i1> %511, i64 5, !dbg !60
  %523 = extractelement <16 x i1> %511, i64 4, !dbg !60
  %524 = extractelement <16 x i1> %511, i64 3, !dbg !60
  %525 = extractelement <16 x i1> %511, i64 2, !dbg !60
  %526 = extractelement <16 x i1> %511, i64 1, !dbg !60
  %527 = extractelement <16 x i1> %511, i64 0, !dbg !60
  %bc = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %528 = extractelement <8 x i32> %bc, i64 7, !dbg !61
  %bc76 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %529 = extractelement <8 x i32> %bc76, i64 6, !dbg !61
  %bc77 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %530 = extractelement <8 x i32> %bc77, i64 5, !dbg !61
  %bc78 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %531 = extractelement <8 x i32> %bc78, i64 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %528, i32 %529, i32 %530, i32 %531, ptr addrspace(1) %26, i1 true) #3, !dbg !61
  %bc79 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %532 = extractelement <8 x i32> %bc79, i64 3, !dbg !61
  %bc80 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %533 = extractelement <8 x i32> %bc80, i64 2, !dbg !61
  %bc81 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %534 = extractelement <8 x i32> %bc81, i64 1, !dbg !61
  %bc82 = bitcast <8 x float> %489 to <8 x i32>, !dbg !61
  %535 = extractelement <8 x i32> %bc82, i64 0, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %533, i32 %534, i32 %535, ptr addrspace(1) %28, i1 true) #3, !dbg !61
  %536 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !62
  %537 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !62
  %bc83 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %538 = extractelement <16 x i32> %bc83, i64 15, !dbg !63
  %539 = select i1 %519, i32 0, i32 %538, !dbg !58
  %bc84 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %540 = extractelement <16 x i32> %bc84, i64 14, !dbg !63
  %541 = select i1 %518, i32 0, i32 %540, !dbg !58
  %bc85 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %542 = extractelement <16 x i32> %bc85, i64 13, !dbg !63
  %543 = select i1 %517, i32 0, i32 %542, !dbg !58
  %bc86 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %544 = extractelement <16 x i32> %bc86, i64 12, !dbg !63
  %545 = select i1 %516, i32 0, i32 %544, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %539, i32 %541, i32 %543, i32 %545, ptr addrspace(1) %536, i1 true) #3, !dbg !63
  %bc87 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %546 = extractelement <16 x i32> %bc87, i64 11, !dbg !63
  %547 = select i1 %515, i32 0, i32 %546, !dbg !58
  %bc88 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %548 = extractelement <16 x i32> %bc88, i64 10, !dbg !63
  %549 = select i1 %514, i32 0, i32 %548, !dbg !58
  %bc89 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %550 = extractelement <16 x i32> %bc89, i64 9, !dbg !63
  %551 = select i1 %513, i32 0, i32 %550, !dbg !58
  %bc90 = bitcast <16 x float> %510 to <16 x i32>, !dbg !63
  %552 = extractelement <16 x i32> %bc90, i64 8, !dbg !63
  %553 = select i1 %512, i32 0, i32 %552, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %547, i32 %549, i32 %551, i32 %553, ptr addrspace(1) %537, i1 true) #3, !dbg !63
  %554 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !64
  %555 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !64
  %bc91 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %556 = extractelement <16 x i32> %bc91, i64 7, !dbg !65
  %557 = select i1 %520, i32 0, i32 %556, !dbg !60
  %bc92 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %558 = extractelement <16 x i32> %bc92, i64 6, !dbg !65
  %559 = select i1 %521, i32 0, i32 %558, !dbg !60
  %bc93 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %560 = extractelement <16 x i32> %bc93, i64 5, !dbg !65
  %561 = select i1 %522, i32 0, i32 %560, !dbg !60
  %bc94 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %562 = extractelement <16 x i32> %bc94, i64 4, !dbg !65
  %563 = select i1 %523, i32 0, i32 %562, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %559, i32 %561, i32 %563, ptr addrspace(1) %554, i1 true) #3, !dbg !65
  %bc95 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %564 = extractelement <16 x i32> %bc95, i64 3, !dbg !65
  %565 = select i1 %524, i32 0, i32 %564, !dbg !60
  %bc96 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %566 = extractelement <16 x i32> %bc96, i64 2, !dbg !65
  %567 = select i1 %525, i32 0, i32 %566, !dbg !60
  %bc97 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %568 = extractelement <16 x i32> %bc97, i64 1, !dbg !65
  %569 = select i1 %526, i32 0, i32 %568, !dbg !60
  %bc98 = bitcast <16 x float> %510 to <16 x i32>, !dbg !65
  %570 = extractelement <16 x i32> %bc98, i64 0, !dbg !65
  %571 = select i1 %527, i32 0, i32 %570, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %565, i32 %567, i32 %569, i32 %571, ptr addrspace(1) %555, i1 true) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmpvxts4mzoaj2wwqrg6ye65fbd2tqvxiqmb7rchwxrgktzp5rxt.py", directory: "inductor_cache/mp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 30, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 37, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 26, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 19, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 60, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !59)
!59 = !DILocation(line: 51, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 63, column: 25, scope: !7)
!65 = !DILocation(line: 63, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
