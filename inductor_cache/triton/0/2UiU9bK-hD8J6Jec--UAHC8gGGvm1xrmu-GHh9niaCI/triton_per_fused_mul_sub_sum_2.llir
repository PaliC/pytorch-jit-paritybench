; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_mul_sub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %10 = icmp slt i32 %9, 512, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %13 = sdiv i32 %.frozen, 4, !dbg !13
  %14 = srem i32 %13, 32, !dbg !14
  %.frozen1 = freeze i32 %9, !dbg !15
  %15 = sdiv i32 %.frozen1, 128, !dbg !15
  %16 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = mul i32 %15, 128, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !17
  %18 = shl nuw nsw i32 %12, 5, !dbg !18
  %19 = add nsw i32 %14, %18, !dbg !19
  %20 = shl i32 %15, 9, !dbg !20
  %21 = add i32 %19, %20, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %10, i32 0, i1 %10) #2, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = shl nsw i32 %15, 4, !dbg !24
  %27 = or disjoint i32 %26, %12, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %10, i32 0, i1 %10) #2, !dbg !27
  %31 = bitcast i32 %30 to float, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %10, i32 0, i1 %10) #2, !dbg !29
  %34 = bitcast i32 %33 to float, !dbg !29
  %35 = shl nsw i32 %.decomposed, 4, !dbg !30
  %36 = or disjoint i32 %35, %12, !dbg !31
  %37 = shl nsw i32 %15, 6, !dbg !32
  %38 = add nsw i32 %36, %37, !dbg !33
  %39 = sext i32 %38 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %10, i32 0, i1 %10) #2, !dbg !35
  %42 = bitcast i32 %41 to float, !dbg !35
  %43 = sext i32 %.decomposed2 to i64, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !36
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #2, !dbg !37
  %46 = bitcast i32 %45 to float, !dbg !37
  %47 = fsub float %25, %31, !dbg !38
  %48 = fmul float %47, 0x3FF7154760000000, !dbg !39
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #2, !dbg !39
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float %34) #2, !dbg !40
  %51 = fsub float %42, %46, !dbg !41
  %52 = fmul float %50, %51, !dbg !42
  %53 = select i1 %10, float %52, float 0.000000e+00, !dbg !43
  %54 = bitcast float %53 to i32, !dbg !44
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !44
  %56 = bitcast i32 %55 to float, !dbg !44
  %57 = fadd float %53, %56, !dbg !48
  %58 = bitcast float %57 to i32, !dbg !44
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !44
  %60 = bitcast i32 %59 to float, !dbg !44
  %61 = fadd float %57, %60, !dbg !48
  %62 = bitcast float %61 to i32, !dbg !44
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !44
  %64 = bitcast i32 %63 to float, !dbg !44
  %65 = fadd float %61, %64, !dbg !48
  %66 = bitcast float %65 to i32, !dbg !44
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !44
  %68 = bitcast i32 %67 to float, !dbg !44
  %69 = fadd float %65, %68, !dbg !48
  %70 = sext i32 %9 to i64, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %70, !dbg !50
  %72 = and i32 %11, 63, !dbg !51
  %73 = icmp eq i32 %72, 0, !dbg !51
  %74 = bitcast float %69 to i32, !dbg !51
  %75 = and i1 %73, %10, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %74, ptr addrspace(1) %71, i1 %75) #2, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtbpnidgqtdskj6yi2nhdyft7wch2rh2u6f3zsfsxv7vtzjivbz.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_per_fused_mul_sub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sub_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sub_sum_2", linkageName: "triton_per_fused_mul_sub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 30, column: 21, scope: !7)
!14 = !DILocation(line: 30, column: 26, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 38, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 47, scope: !7)
!21 = !DILocation(line: 35, column: 43, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 52, scope: !7)
!24 = !DILocation(line: 36, column: 38, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 43, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 43, scope: !7)
!30 = !DILocation(line: 38, column: 38, scope: !7)
!31 = !DILocation(line: 38, column: 35, scope: !7)
!32 = !DILocation(line: 38, column: 46, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 51, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 35, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 23, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 35, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 47, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 48, column: 25, scope: !7)
!51 = !DILocation(line: 48, column: 37, scope: !7)
!52 = !DILocation(line: 48, column: 4, scope: !7)
