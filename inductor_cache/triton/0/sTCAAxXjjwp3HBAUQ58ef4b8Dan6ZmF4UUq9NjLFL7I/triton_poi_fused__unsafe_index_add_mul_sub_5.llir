; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = icmp slt i32 %11, 512, !dbg !11
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %14 = shl i32 %13, 10, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 2, !dbg !14
  %17 = and i32 %16, 508, !dbg !14
  %18 = or disjoint i32 %17, 2, !dbg !14
  %19 = and i32 %15, 127, !dbg !14
  %20 = or disjoint i32 %19, 128, !dbg !14
  %21 = or disjoint i32 %19, 256, !dbg !14
  %22 = or disjoint i32 %19, 384, !dbg !14
  %23 = or disjoint i32 %19, 512, !dbg !14
  %24 = or disjoint i32 %19, 640, !dbg !14
  %25 = or disjoint i32 %19, 768, !dbg !14
  %26 = or disjoint i32 %19, 896, !dbg !14
  %27 = or disjoint i32 %14, %17, !dbg !15
  %28 = or disjoint i32 %14, %18, !dbg !15
  %29 = or disjoint i32 %27, 512, !dbg !15
  %30 = or disjoint i32 %14, %19, !dbg !15
  %31 = or disjoint i32 %14, %20, !dbg !15
  %32 = or disjoint i32 %14, %21, !dbg !15
  %33 = or disjoint i32 %14, %22, !dbg !15
  %34 = or disjoint i32 %14, %23, !dbg !15
  %35 = or disjoint i32 %14, %24, !dbg !15
  %36 = or disjoint i32 %14, %25, !dbg !15
  %37 = or disjoint i32 %14, %26, !dbg !15
  %.frozen = freeze i32 %27, !dbg !16
  %38 = sdiv i32 %.frozen, 64, !dbg !16
  %39 = sdiv i32 %29, 64, !dbg !16
  %40 = mul i32 %38, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %40, !dbg !17
  %41 = srem i32 %28, 64, !dbg !17
  %.frozen1 = freeze i32 %11, !dbg !18
  %42 = sdiv i32 %.frozen1, 128, !dbg !18
  %43 = mul i32 %42, 128, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %43, !dbg !19
  %44 = sext i32 %38 to i64, !dbg !20
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %39 to i64, !dbg !20
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %56 = sext i32 %.decomposed to i64, !dbg !22
  %57 = getelementptr i64, ptr addrspace(1) %1, i64 %56, !dbg !22
  %58 = sext i32 %41 to i64, !dbg !22
  %59 = getelementptr i64, ptr addrspace(1) %1, i64 %58, !dbg !22
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !23
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !23
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !23
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !23
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !23
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !23
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !23
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !23
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !23
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !23
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !23
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !23
  %72 = getelementptr i64, ptr addrspace(1) %3, i64 %56, !dbg !24
  %73 = getelementptr i64, ptr addrspace(1) %3, i64 %58, !dbg !24
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !25
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !25
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !25
  %77 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #2, !dbg !25
  %78 = extractvalue { i64, i64 } %77, 0, !dbg !25
  %79 = extractvalue { i64, i64 } %77, 1, !dbg !25
  %80 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !25
  %81 = extractvalue { i64, i64 } %80, 0, !dbg !25
  %82 = extractvalue { i64, i64 } %80, 1, !dbg !25
  %83 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #2, !dbg !25
  %84 = extractvalue { i64, i64 } %83, 0, !dbg !25
  %85 = extractvalue { i64, i64 } %83, 1, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !26
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !27
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !27
  %97 = getelementptr i64, ptr addrspace(1) %5, i64 %44, !dbg !28
  %98 = getelementptr i64, ptr addrspace(1) %5, i64 %46, !dbg !28
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !29
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !29
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !29
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !29
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !29
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !29
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !29
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = add i64 %48, 5, !dbg !32
  %126 = add i64 %52, 5, !dbg !32
  %127 = icmp slt i64 %48, 0, !dbg !33
  %128 = icmp slt i64 %52, 0, !dbg !33
  %129 = select i1 %127, i64 %125, i64 %48, !dbg !34
  %130 = select i1 %128, i64 %126, i64 %52, !dbg !34
  %131 = icmp slt i64 %61, 0, !dbg !35
  %132 = icmp slt i64 %62, 0, !dbg !35
  %133 = icmp slt i64 %64, 0, !dbg !35
  %134 = icmp slt i64 %65, 0, !dbg !35
  %135 = icmp slt i64 %67, 0, !dbg !35
  %136 = icmp slt i64 %68, 0, !dbg !35
  %137 = icmp slt i64 %70, 0, !dbg !35
  %138 = icmp slt i64 %71, 0, !dbg !35
  %139 = shl i64 %61, 7, !dbg !36
  %140 = add i64 %139, 640, !dbg !36
  %141 = select i1 %131, i64 %140, i64 %139, !dbg !36
  %142 = shl i64 %62, 7, !dbg !36
  %143 = add i64 %142, 640, !dbg !36
  %144 = select i1 %132, i64 %143, i64 %142, !dbg !36
  %145 = shl i64 %64, 7, !dbg !36
  %146 = add i64 %145, 640, !dbg !36
  %147 = select i1 %133, i64 %146, i64 %145, !dbg !36
  %148 = shl i64 %65, 7, !dbg !36
  %149 = add i64 %148, 640, !dbg !36
  %150 = select i1 %134, i64 %149, i64 %148, !dbg !36
  %151 = shl i64 %67, 7, !dbg !36
  %152 = add i64 %151, 640, !dbg !36
  %153 = select i1 %135, i64 %152, i64 %151, !dbg !36
  %154 = shl i64 %68, 7, !dbg !36
  %155 = add i64 %154, 640, !dbg !36
  %156 = select i1 %136, i64 %155, i64 %154, !dbg !36
  %157 = shl i64 %70, 7, !dbg !36
  %158 = add i64 %157, 640, !dbg !36
  %159 = select i1 %137, i64 %158, i64 %157, !dbg !36
  %160 = shl i64 %71, 7, !dbg !36
  %161 = add i64 %160, 640, !dbg !36
  %162 = select i1 %138, i64 %161, i64 %160, !dbg !36
  %163 = sext i32 %.decomposed2 to i64, !dbg !37
  %164 = mul i64 %129, 640, !dbg !38
  %165 = mul i64 %130, 640, !dbg !38
  %166 = mul i32 %42, 3200, !dbg !39
  %167 = sext i32 %166 to i64, !dbg !40
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !41
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %163, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %164, !dbg !41
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %167, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !41
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %163, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %164, !dbg !41
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %167, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !41
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %163, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %164, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %167, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %163, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %164, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %167, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %163, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %165, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %167, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %163, !dbg !41
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %165, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %167, !dbg !41
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %163, !dbg !41
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %165, !dbg !41
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %167, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %163, !dbg !41
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %165, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %167, !dbg !41
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %12) #2, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %12) #2, !dbg !42
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #2, !dbg !42
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %12) #2, !dbg !42
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %12) #2, !dbg !42
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %12) #2, !dbg !42
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %12) #2, !dbg !42
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %12) #2, !dbg !42
  %208 = icmp slt i64 %75, 0, !dbg !43
  %209 = icmp slt i64 %76, 0, !dbg !43
  %210 = icmp slt i64 %78, 0, !dbg !43
  %211 = icmp slt i64 %79, 0, !dbg !43
  %212 = icmp slt i64 %81, 0, !dbg !43
  %213 = icmp slt i64 %82, 0, !dbg !43
  %214 = icmp slt i64 %84, 0, !dbg !43
  %215 = icmp slt i64 %85, 0, !dbg !43
  %216 = shl i64 %75, 7, !dbg !44
  %217 = add i64 %216, 640, !dbg !44
  %218 = select i1 %208, i64 %217, i64 %216, !dbg !44
  %219 = shl i64 %76, 7, !dbg !44
  %220 = add i64 %219, 640, !dbg !44
  %221 = select i1 %209, i64 %220, i64 %219, !dbg !44
  %222 = shl i64 %78, 7, !dbg !44
  %223 = add i64 %222, 640, !dbg !44
  %224 = select i1 %210, i64 %223, i64 %222, !dbg !44
  %225 = shl i64 %79, 7, !dbg !44
  %226 = add i64 %225, 640, !dbg !44
  %227 = select i1 %211, i64 %226, i64 %225, !dbg !44
  %228 = shl i64 %81, 7, !dbg !44
  %229 = add i64 %228, 640, !dbg !44
  %230 = select i1 %212, i64 %229, i64 %228, !dbg !44
  %231 = shl i64 %82, 7, !dbg !44
  %232 = add i64 %231, 640, !dbg !44
  %233 = select i1 %213, i64 %232, i64 %231, !dbg !44
  %234 = shl i64 %84, 7, !dbg !44
  %235 = add i64 %234, 640, !dbg !44
  %236 = select i1 %214, i64 %235, i64 %234, !dbg !44
  %237 = shl i64 %85, 7, !dbg !44
  %238 = add i64 %237, 640, !dbg !44
  %239 = select i1 %215, i64 %238, i64 %237, !dbg !44
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !45
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %163, !dbg !45
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %164, !dbg !45
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %167, !dbg !45
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !45
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %163, !dbg !45
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %164, !dbg !45
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %167, !dbg !45
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %224, !dbg !45
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %163, !dbg !45
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %164, !dbg !45
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %167, !dbg !45
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !45
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %163, !dbg !45
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %164, !dbg !45
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %167, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %230, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %163, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %165, !dbg !45
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %167, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !45
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %163, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %165, !dbg !45
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %167, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %236, !dbg !45
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %163, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %165, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %167, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %163, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %165, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %167, !dbg !45
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %12) #2, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %12) #2, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %12) #2, !dbg !46
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %12) #2, !dbg !46
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %12) #2, !dbg !46
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %12) #2, !dbg !46
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %12) #2, !dbg !46
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %12) #2, !dbg !46
  %280 = add i64 %99, 5, !dbg !47
  %281 = add i64 %103, 5, !dbg !47
  %282 = icmp slt i64 %99, 0, !dbg !48
  %283 = icmp slt i64 %103, 0, !dbg !48
  %284 = select i1 %282, i64 %280, i64 %99, !dbg !49
  %285 = select i1 %283, i64 %281, i64 %103, !dbg !49
  %286 = mul i64 %284, 640, !dbg !50
  %287 = mul i64 %285, 640, !dbg !50
  %288 = getelementptr float, ptr addrspace(1) %169, i64 %286, !dbg !51
  %289 = getelementptr float, ptr addrspace(1) %288, i64 %167, !dbg !51
  %290 = getelementptr float, ptr addrspace(1) %173, i64 %286, !dbg !51
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %167, !dbg !51
  %292 = getelementptr float, ptr addrspace(1) %177, i64 %286, !dbg !51
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %167, !dbg !51
  %294 = getelementptr float, ptr addrspace(1) %181, i64 %286, !dbg !51
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %167, !dbg !51
  %296 = getelementptr float, ptr addrspace(1) %185, i64 %287, !dbg !51
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %167, !dbg !51
  %298 = getelementptr float, ptr addrspace(1) %189, i64 %287, !dbg !51
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %167, !dbg !51
  %300 = getelementptr float, ptr addrspace(1) %193, i64 %287, !dbg !51
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %167, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %197, i64 %287, !dbg !51
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %167, !dbg !51
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %12) #2, !dbg !52
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %12) #2, !dbg !52
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %12) #2, !dbg !52
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %12) #2, !dbg !52
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %12) #2, !dbg !52
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %12) #2, !dbg !52
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 %12) #2, !dbg !52
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 %12) #2, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %241, i64 %286, !dbg !53
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %167, !dbg !53
  %314 = getelementptr float, ptr addrspace(1) %245, i64 %286, !dbg !53
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %167, !dbg !53
  %316 = getelementptr float, ptr addrspace(1) %249, i64 %286, !dbg !53
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %167, !dbg !53
  %318 = getelementptr float, ptr addrspace(1) %253, i64 %286, !dbg !53
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %167, !dbg !53
  %320 = getelementptr float, ptr addrspace(1) %257, i64 %287, !dbg !53
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %167, !dbg !53
  %322 = getelementptr float, ptr addrspace(1) %261, i64 %287, !dbg !53
  %323 = getelementptr float, ptr addrspace(1) %322, i64 %167, !dbg !53
  %324 = getelementptr float, ptr addrspace(1) %265, i64 %287, !dbg !53
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %167, !dbg !53
  %326 = getelementptr float, ptr addrspace(1) %269, i64 %287, !dbg !53
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %167, !dbg !53
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %12) #2, !dbg !54
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %12) #2, !dbg !54
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %12) #2, !dbg !54
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %12) #2, !dbg !54
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %12) #2, !dbg !54
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %12) #2, !dbg !54
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %12) #2, !dbg !54
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %12) #2, !dbg !54
  %336 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !52
  %337 = insertelement <2 x i32> %336, i32 %200, i64 1, !dbg !52
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !52
  %339 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !54
  %340 = insertelement <2 x i32> %339, i32 %272, i64 1, !dbg !54
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !54
  %342 = fsub <2 x float> %341, %338, !dbg !55
  %343 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !56
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !56
  %345 = shufflevector <2 x float> %344, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %346 = fmul <2 x float> %342, %345, !dbg !56
  %347 = fadd <2 x float> %346, %338, !dbg !57
  %348 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !52
  %349 = insertelement <2 x i32> %348, i32 %201, i64 1, !dbg !52
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !52
  %351 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !54
  %352 = insertelement <2 x i32> %351, i32 %273, i64 1, !dbg !54
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !54
  %354 = fsub <2 x float> %353, %350, !dbg !55
  %355 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !56
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !56
  %357 = shufflevector <2 x float> %356, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %358 = fmul <2 x float> %354, %357, !dbg !56
  %359 = fadd <2 x float> %358, %350, !dbg !57
  %360 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !52
  %361 = insertelement <2 x i32> %360, i32 %202, i64 1, !dbg !52
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !52
  %363 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !54
  %364 = insertelement <2 x i32> %363, i32 %274, i64 1, !dbg !54
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !54
  %366 = fsub <2 x float> %365, %362, !dbg !55
  %367 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !56
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !56
  %369 = shufflevector <2 x float> %368, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %370 = fmul <2 x float> %366, %369, !dbg !56
  %371 = fadd <2 x float> %370, %362, !dbg !57
  %372 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !52
  %373 = insertelement <2 x i32> %372, i32 %203, i64 1, !dbg !52
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !52
  %375 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !54
  %376 = insertelement <2 x i32> %375, i32 %275, i64 1, !dbg !54
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !54
  %378 = fsub <2 x float> %377, %374, !dbg !55
  %379 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !56
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !56
  %381 = shufflevector <2 x float> %380, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %382 = fmul <2 x float> %378, %381, !dbg !56
  %383 = fadd <2 x float> %382, %374, !dbg !57
  %384 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !52
  %385 = insertelement <2 x i32> %384, i32 %204, i64 1, !dbg !52
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !52
  %387 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !54
  %388 = insertelement <2 x i32> %387, i32 %276, i64 1, !dbg !54
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !54
  %390 = fsub <2 x float> %389, %386, !dbg !55
  %391 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !56
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !56
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %394 = fmul <2 x float> %390, %393, !dbg !56
  %395 = fadd <2 x float> %394, %386, !dbg !57
  %396 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !52
  %397 = insertelement <2 x i32> %396, i32 %205, i64 1, !dbg !52
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !52
  %399 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !54
  %400 = insertelement <2 x i32> %399, i32 %277, i64 1, !dbg !54
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !54
  %402 = fsub <2 x float> %401, %398, !dbg !55
  %403 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !56
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !56
  %405 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %406 = fmul <2 x float> %402, %405, !dbg !56
  %407 = fadd <2 x float> %406, %398, !dbg !57
  %408 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !52
  %409 = insertelement <2 x i32> %408, i32 %206, i64 1, !dbg !52
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !52
  %411 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !54
  %412 = insertelement <2 x i32> %411, i32 %278, i64 1, !dbg !54
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !54
  %414 = fsub <2 x float> %413, %410, !dbg !55
  %415 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !56
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !56
  %417 = shufflevector <2 x float> %416, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %418 = fmul <2 x float> %414, %417, !dbg !56
  %419 = fadd <2 x float> %418, %410, !dbg !57
  %420 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !52
  %421 = insertelement <2 x i32> %420, i32 %207, i64 1, !dbg !52
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !52
  %423 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !54
  %424 = insertelement <2 x i32> %423, i32 %279, i64 1, !dbg !54
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !54
  %426 = fsub <2 x float> %425, %422, !dbg !55
  %427 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !56
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !56
  %429 = shufflevector <2 x float> %428, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %430 = fmul <2 x float> %426, %429, !dbg !56
  %431 = fadd <2 x float> %430, %422, !dbg !57
  %432 = extractelement <2 x float> %347, i64 0, !dbg !58
  %433 = extractelement <2 x float> %347, i64 1, !dbg !59
  %434 = fsub float %432, %433, !dbg !58
  %435 = extractelement <2 x float> %359, i64 0, !dbg !58
  %436 = extractelement <2 x float> %359, i64 1, !dbg !59
  %437 = fsub float %435, %436, !dbg !58
  %438 = extractelement <2 x float> %371, i64 0, !dbg !58
  %439 = extractelement <2 x float> %371, i64 1, !dbg !59
  %440 = fsub float %438, %439, !dbg !58
  %441 = extractelement <2 x float> %383, i64 0, !dbg !58
  %442 = extractelement <2 x float> %383, i64 1, !dbg !59
  %443 = fsub float %441, %442, !dbg !58
  %444 = extractelement <2 x float> %395, i64 0, !dbg !58
  %445 = extractelement <2 x float> %395, i64 1, !dbg !59
  %446 = fsub float %444, %445, !dbg !58
  %447 = extractelement <2 x float> %407, i64 0, !dbg !58
  %448 = extractelement <2 x float> %407, i64 1, !dbg !59
  %449 = fsub float %447, %448, !dbg !58
  %450 = extractelement <2 x float> %419, i64 0, !dbg !58
  %451 = extractelement <2 x float> %419, i64 1, !dbg !59
  %452 = fsub float %450, %451, !dbg !58
  %453 = extractelement <2 x float> %431, i64 0, !dbg !58
  %454 = extractelement <2 x float> %431, i64 1, !dbg !59
  %455 = fsub float %453, %454, !dbg !58
  %456 = fmul float %434, %110, !dbg !60
  %457 = fmul float %437, %112, !dbg !60
  %458 = fmul float %440, %114, !dbg !60
  %459 = fmul float %443, %116, !dbg !60
  %460 = fmul float %446, %118, !dbg !60
  %461 = fmul float %449, %120, !dbg !60
  %462 = fmul float %452, %122, !dbg !60
  %463 = fmul float %455, %124, !dbg !60
  %464 = fadd float %433, %456, !dbg !59
  %465 = fadd float %436, %457, !dbg !59
  %466 = fadd float %439, %458, !dbg !59
  %467 = fadd float %442, %459, !dbg !59
  %468 = fadd float %445, %460, !dbg !59
  %469 = fadd float %448, %461, !dbg !59
  %470 = fadd float %451, %462, !dbg !59
  %471 = fadd float %454, %463, !dbg !59
  %472 = shl i32 %30, 7, !dbg !61
  %473 = shl i32 %31, 7, !dbg !61
  %474 = shl i32 %32, 7, !dbg !61
  %475 = shl i32 %33, 7, !dbg !61
  %476 = shl i32 %34, 7, !dbg !61
  %477 = shl i32 %35, 7, !dbg !61
  %478 = shl i32 %36, 7, !dbg !61
  %479 = shl i32 %37, 7, !dbg !61
  %480 = shl i32 %42, 19, !dbg !62
  %481 = add i32 %480, %.decomposed2, !dbg !63
  %482 = add i32 %481, %472, !dbg !64
  %483 = add i32 %481, %473, !dbg !64
  %484 = add i32 %481, %474, !dbg !64
  %485 = add i32 %481, %475, !dbg !64
  %486 = add i32 %481, %476, !dbg !64
  %487 = add i32 %481, %477, !dbg !64
  %488 = add i32 %481, %478, !dbg !64
  %489 = add i32 %481, %479, !dbg !64
  %490 = sext i32 %482 to i64, !dbg !65
  %491 = getelementptr float, ptr addrspace(1) %7, i64 %490, !dbg !65
  %492 = sext i32 %483 to i64, !dbg !65
  %493 = getelementptr float, ptr addrspace(1) %7, i64 %492, !dbg !65
  %494 = sext i32 %484 to i64, !dbg !65
  %495 = getelementptr float, ptr addrspace(1) %7, i64 %494, !dbg !65
  %496 = sext i32 %485 to i64, !dbg !65
  %497 = getelementptr float, ptr addrspace(1) %7, i64 %496, !dbg !65
  %498 = sext i32 %486 to i64, !dbg !65
  %499 = getelementptr float, ptr addrspace(1) %7, i64 %498, !dbg !65
  %500 = sext i32 %487 to i64, !dbg !65
  %501 = getelementptr float, ptr addrspace(1) %7, i64 %500, !dbg !65
  %502 = sext i32 %488 to i64, !dbg !65
  %503 = getelementptr float, ptr addrspace(1) %7, i64 %502, !dbg !65
  %504 = sext i32 %489 to i64, !dbg !65
  %505 = getelementptr float, ptr addrspace(1) %7, i64 %504, !dbg !65
  %506 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !66
  %507 = bitcast float %464 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #2, !dbg !66
  %508 = or disjoint i32 %17, 1, !dbg !66
  %509 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %508, !dbg !66
  %510 = bitcast float %465 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %510, i1 true) #2, !dbg !66
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !66
  %512 = bitcast float %466 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %512, i1 true) #2, !dbg !66
  %513 = or disjoint i32 %17, 3, !dbg !66
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !66
  %515 = bitcast float %467 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %515, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !66
  %517 = load i32, ptr addrspace(3) %516, align 4, !dbg !66
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !66
  %519 = load i32, ptr addrspace(3) %518, align 4, !dbg !66
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !66
  %521 = load i32, ptr addrspace(3) %520, align 4, !dbg !66
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !66
  %523 = load i32, ptr addrspace(3) %522, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %524 = bitcast float %468 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %524, i1 true) #2, !dbg !66
  %525 = bitcast float %469 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %525, i1 true) #2, !dbg !66
  %526 = bitcast float %470 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %526, i1 true) #2, !dbg !66
  %527 = bitcast float %471 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %527, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %528 = load i32, ptr addrspace(3) %516, align 4, !dbg !66
  %529 = load i32, ptr addrspace(3) %518, align 4, !dbg !66
  %530 = load i32, ptr addrspace(3) %520, align 4, !dbg !66
  %531 = load i32, ptr addrspace(3) %522, align 4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %517, ptr addrspace(1) %491, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %519, ptr addrspace(1) %493, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %495, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %523, ptr addrspace(1) %497, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %528, ptr addrspace(1) %499, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %529, ptr addrspace(1) %501, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %530, ptr addrspace(1) %503, i1 %12) #2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %531, ptr addrspace(1) %505, i1 %12) #2, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmn6coy37qzpcg4bfjezdd44ithvz7bliibnw6zzzd5unnduwe3i.py", directory: "inductor_cache/mn")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 45, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 35, scope: !7)
!38 = !DILocation(line: 47, column: 50, scope: !7)
!39 = !DILocation(line: 47, column: 62, scope: !7)
!40 = !DILocation(line: 47, column: 57, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !7)
!42 = !DILocation(line: 47, column: 67, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 40, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 69, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 58, column: 51, scope: !7)
!51 = !DILocation(line: 58, column: 31, scope: !7)
!52 = !DILocation(line: 58, column: 69, scope: !7)
!53 = !DILocation(line: 59, column: 31, scope: !7)
!54 = !DILocation(line: 59, column: 70, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 34, scope: !7)
!62 = !DILocation(line: 66, column: 46, scope: !7)
!63 = !DILocation(line: 66, column: 30, scope: !7)
!64 = !DILocation(line: 66, column: 39, scope: !7)
!65 = !DILocation(line: 66, column: 25, scope: !7)
!66 = !DILocation(line: 66, column: 58, scope: !7)
!67 = !DILocation(line: 66, column: 4, scope: !7)
