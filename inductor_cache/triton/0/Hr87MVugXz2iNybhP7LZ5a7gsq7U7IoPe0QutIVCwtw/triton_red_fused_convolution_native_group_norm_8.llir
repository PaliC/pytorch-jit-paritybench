; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 2048, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 8, !dbg !13
  %18 = shl i32 %8, 14, !dbg !14
  %19 = shl nsw i32 %17, 6, !dbg !15
  %20 = or disjoint i32 %18, %16
  %21 = shl nuw nsw i32 %16, 1
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %22
  %24 = or disjoint i32 %21, 2
  %25 = zext nneg i32 %24 to i64
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %25
  %27 = or disjoint i32 %21, 4
  %28 = zext nneg i32 %27 to i64
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %28
  %30 = or disjoint i32 %21, 6
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %11, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %12, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %13, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %14, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43
  %45 = zext nneg i32 %11 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = zext nneg i32 %12 to i64
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %13 to i64
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %51 = zext nneg i32 %14 to i64
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51
  %53 = zext nneg i32 %16 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = sext i32 %20 to i64, !dbg !16
  %56 = zext nneg i32 %14 to i64, !dbg !16
  %57 = sext i32 %19 to i64, !dbg !16
  %58 = zext nneg i32 %13 to i64, !dbg !16
  %59 = zext nneg i32 %12 to i64, !dbg !16
  %60 = zext nneg i32 %11 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !16
  %61 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 4
  %62 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 8
  %63 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 12
  br label %64, !dbg !16

64:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %164, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %165, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %166, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %167, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %160, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %161, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %162, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %163, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %7 ], [ %156, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %7 ], [ %157, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %158, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %159, %._crit_edge ]
  %77 = or disjoint i64 %indvars.iv, %60, !dbg !17
  %78 = or disjoint i64 %indvars.iv, %59, !dbg !17
  %79 = or disjoint i64 %indvars.iv, %58, !dbg !17
  %80 = or disjoint i64 %indvars.iv, %56, !dbg !17
  %81 = lshr i64 %77, 8, !dbg !18
  %82 = lshr i64 %78, 8, !dbg !18
  %83 = lshr i64 %79, 8, !dbg !18
  %84 = lshr i64 %80, 8, !dbg !18
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !19
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %90 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %90, i1 true) #5, !dbg !20
  %91 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %91, i1 true) #5, !dbg !20
  %92 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %92, i1 true) #5, !dbg !20
  %93 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %93, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %94 = load float, ptr addrspace(3) %35, align 8, !dbg !20
  %95 = load float, ptr addrspace(3) %38, align 8, !dbg !20
  %96 = load float, ptr addrspace(3) %41, align 8, !dbg !20
  %97 = load float, ptr addrspace(3) %44, align 8, !dbg !20
  %98 = or disjoint i64 %81, %57, !dbg !21
  %99 = or disjoint i64 %82, %57, !dbg !21
  %100 = or disjoint i64 %83, %57, !dbg !21
  %101 = or disjoint i64 %84, %57, !dbg !21
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !22
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !22
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !22
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %107 = bitcast i32 %106 to float, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %109 = bitcast i32 %108 to float, !dbg !23
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %9, i32 0, i1 %9) #5, !dbg !23
  %113 = bitcast i32 %112 to float, !dbg !23
  %114 = fadd float %94, %107, !dbg !24
  %115 = fadd float %95, %109, !dbg !24
  %116 = fadd float %96, %111, !dbg !24
  %117 = fadd float %97, %113, !dbg !24
  %118 = icmp eq i64 %indvars.iv, 0, !dbg !25
  br i1 %118, label %._crit_edge, label %119, !dbg !26

119:                                              ; preds = %64
  %120 = fsub float %114, %73, !dbg !30
  %121 = fsub float %115, %74, !dbg !30
  %122 = fsub float %116, %75, !dbg !30
  %123 = fsub float %117, %76, !dbg !30
  %124 = fadd float %65, 1.000000e+00, !dbg !31
  %125 = fadd float %66, 1.000000e+00, !dbg !31
  %126 = fadd float %67, 1.000000e+00, !dbg !31
  %127 = fadd float %68, 1.000000e+00, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !32
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #5, !dbg !32
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #5, !dbg !32
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %127) #5, !dbg !32
  %132 = fadd float %73, %128, !dbg !33
  %133 = fadd float %74, %129, !dbg !33
  %134 = fadd float %75, %130, !dbg !33
  %135 = fadd float %76, %131, !dbg !33
  %136 = fsub float %114, %132, !dbg !34
  %137 = fsub float %115, %133, !dbg !34
  %138 = fsub float %116, %134, !dbg !34
  %139 = fsub float %117, %135, !dbg !34
  %140 = fmul float %120, %136, !dbg !35
  %141 = fmul float %121, %137, !dbg !35
  %142 = fmul float %122, %138, !dbg !35
  %143 = fmul float %123, %139, !dbg !35
  %144 = fadd float %69, %140, !dbg !36
  %145 = fadd float %70, %141, !dbg !36
  %146 = fadd float %71, %142, !dbg !36
  %147 = fadd float %72, %143, !dbg !36
  br label %._crit_edge, !dbg !26

._crit_edge:                                      ; preds = %64, %119
  %148 = phi float [ %144, %119 ], [ 0.000000e+00, %64 ], !dbg !29
  %149 = phi float [ %145, %119 ], [ 0.000000e+00, %64 ], !dbg !29
  %150 = phi float [ %146, %119 ], [ 0.000000e+00, %64 ], !dbg !29
  %151 = phi float [ %147, %119 ], [ 0.000000e+00, %64 ], !dbg !29
  %.pn7 = phi float [ %132, %119 ], [ %114, %64 ]
  %.pn5 = phi float [ %133, %119 ], [ %115, %64 ]
  %.pn3 = phi float [ %134, %119 ], [ %116, %64 ]
  %.pn1 = phi float [ %135, %119 ], [ %117, %64 ]
  %152 = phi float [ %124, %119 ], [ 1.000000e+00, %64 ], !dbg !29
  %153 = phi float [ %125, %119 ], [ 1.000000e+00, %64 ], !dbg !29
  %154 = phi float [ %126, %119 ], [ 1.000000e+00, %64 ], !dbg !29
  %155 = phi float [ %127, %119 ], [ 1.000000e+00, %64 ], !dbg !29
  %156 = select i1 %9, float %.pn7, float %73, !dbg !37
  %157 = select i1 %9, float %.pn5, float %74, !dbg !37
  %158 = select i1 %9, float %.pn3, float %75, !dbg !37
  %159 = select i1 %9, float %.pn1, float %76, !dbg !37
  %160 = select i1 %9, float %148, float %69, !dbg !38
  %161 = select i1 %9, float %149, float %70, !dbg !38
  %162 = select i1 %9, float %150, float %71, !dbg !38
  %163 = select i1 %9, float %151, float %72, !dbg !38
  %164 = select i1 %9, float %152, float %65, !dbg !39
  %165 = select i1 %9, float %153, float %66, !dbg !39
  %166 = select i1 %9, float %154, float %67, !dbg !39
  %167 = select i1 %9, float %155, float %68, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %168 = bitcast float %114 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %168, i1 true) #5, !dbg !40
  %169 = bitcast float %115 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %169, i1 true) #5, !dbg !40
  %170 = bitcast float %116 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %170, i1 true) #5, !dbg !40
  %171 = bitcast float %117 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %171, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %.extract = load i32, ptr addrspace(3) %54, align 16, !dbg !40
  %.extract11 = load i32, ptr addrspace(3) %61, align 4, !dbg !40
  %.extract12 = load i32, ptr addrspace(3) %62, align 8, !dbg !40
  %.extract13 = load i32, ptr addrspace(3) %63, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %9) #5, !dbg !40
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %172 = icmp samesign ult i64 %indvars.iv, 14336, !dbg !16
  br i1 %172, label %64, label %173, !dbg !16

173:                                              ; preds = %._crit_edge
  %174 = lshr i32 %10, 5, !dbg !12
  %175 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %176 = fsub float %157, %156, !dbg !43
  %177 = fadd float %164, %165, !dbg !45
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !46
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %177) #5, !dbg !47
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !48
  %181 = fmul float %176, %180, !dbg !49
  %182 = fadd float %156, %181, !dbg !50
  %183 = fadd float %160, %161, !dbg !51
  %184 = fmul float %176, %176, !dbg !52
  %185 = fmul float %184, %164, !dbg !53
  %186 = fmul float %185, %180, !dbg !54
  %187 = fadd float %183, %186, !dbg !55
  %188 = fsub float %158, %182, !dbg !43
  %189 = fadd float %166, %177, !dbg !45
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !46
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %189) #5, !dbg !47
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !48
  %193 = fmul float %192, %188, !dbg !49
  %194 = fadd float %182, %193, !dbg !50
  %195 = fadd float %162, %187, !dbg !51
  %196 = fmul float %188, %188, !dbg !52
  %197 = fmul float %177, %196, !dbg !53
  %198 = fmul float %192, %197, !dbg !54
  %199 = fadd float %195, %198, !dbg !55
  %200 = fsub float %159, %194, !dbg !43
  %201 = fadd float %167, %189, !dbg !45
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !46
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %201) #5, !dbg !47
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !48
  %205 = fmul float %204, %200, !dbg !49
  %206 = fadd float %194, %205, !dbg !50
  %207 = fadd float %163, %199, !dbg !51
  %208 = fmul float %200, %200, !dbg !52
  %209 = fmul float %189, %208, !dbg !53
  %210 = fmul float %204, %209, !dbg !54
  %211 = fadd float %207, %210, !dbg !55
  %212 = bitcast float %206 to i32, !dbg !41
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !41
  %214 = bitcast i32 %213 to float, !dbg !41
  %215 = bitcast float %211 to i32, !dbg !41
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !41
  %217 = bitcast i32 %216 to float, !dbg !41
  %218 = bitcast float %201 to i32, !dbg !41
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !41
  %220 = bitcast i32 %219 to float, !dbg !41
  %221 = fsub float %214, %206, !dbg !43
  %222 = fadd float %201, %220, !dbg !45
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !46
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %222) #5, !dbg !47
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !48
  %226 = fmul float %225, %221, !dbg !49
  %227 = fadd float %206, %226, !dbg !50
  %228 = fadd float %211, %217, !dbg !51
  %229 = fmul float %221, %221, !dbg !52
  %230 = fmul float %201, %229, !dbg !53
  %231 = fmul float %225, %230, !dbg !54
  %232 = fadd float %228, %231, !dbg !55
  %233 = bitcast float %227 to i32, !dbg !41
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !41
  %235 = bitcast i32 %234 to float, !dbg !41
  %236 = bitcast float %232 to i32, !dbg !41
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !41
  %238 = bitcast i32 %237 to float, !dbg !41
  %239 = bitcast float %222 to i32, !dbg !41
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !41
  %241 = bitcast i32 %240 to float, !dbg !41
  %242 = fsub float %235, %227, !dbg !43
  %243 = fadd float %222, %241, !dbg !45
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !46
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %243) #5, !dbg !47
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !48
  %247 = fmul float %242, %246, !dbg !49
  %248 = fadd float %227, %247, !dbg !50
  %249 = fadd float %232, %238, !dbg !51
  %250 = fmul float %242, %242, !dbg !52
  %251 = fmul float %222, %250, !dbg !53
  %252 = fmul float %246, %251, !dbg !54
  %253 = fadd float %249, %252, !dbg !55
  %254 = bitcast float %248 to i32, !dbg !41
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !41
  %256 = bitcast i32 %255 to float, !dbg !41
  %257 = bitcast float %253 to i32, !dbg !41
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !41
  %259 = bitcast i32 %258 to float, !dbg !41
  %260 = bitcast float %243 to i32, !dbg !41
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !41
  %262 = bitcast i32 %261 to float, !dbg !41
  %263 = fsub float %256, %248, !dbg !43
  %264 = fadd float %243, %262, !dbg !45
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !46
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %264) #5, !dbg !47
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !48
  %268 = fmul float %263, %267, !dbg !49
  %269 = fadd float %248, %268, !dbg !50
  %270 = fadd float %253, %259, !dbg !51
  %271 = fmul float %263, %263, !dbg !52
  %272 = fmul float %243, %271, !dbg !53
  %273 = fmul float %267, %272, !dbg !54
  %274 = fadd float %270, %273, !dbg !55
  %275 = bitcast float %269 to i32, !dbg !41
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !41
  %277 = bitcast i32 %276 to float, !dbg !41
  %278 = bitcast float %274 to i32, !dbg !41
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !41
  %280 = bitcast i32 %279 to float, !dbg !41
  %281 = bitcast float %264 to i32, !dbg !41
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !41
  %283 = bitcast i32 %282 to float, !dbg !41
  %284 = fsub float %277, %269, !dbg !43
  %285 = fadd float %264, %283, !dbg !45
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !46
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %285) #5, !dbg !47
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !48
  %289 = fmul float %284, %288, !dbg !49
  %290 = fadd float %269, %289, !dbg !50
  %291 = fadd float %274, %280, !dbg !51
  %292 = fmul float %284, %284, !dbg !52
  %293 = fmul float %264, %292, !dbg !53
  %294 = fmul float %288, %293, !dbg !54
  %295 = fadd float %291, %294, !dbg !55
  %296 = bitcast float %290 to i32, !dbg !41
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !41
  %298 = bitcast i32 %297 to float, !dbg !41
  %299 = bitcast float %295 to i32, !dbg !41
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !41
  %301 = bitcast i32 %300 to float, !dbg !41
  %302 = bitcast float %285 to i32, !dbg !41
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !41
  %304 = bitcast i32 %303 to float, !dbg !41
  %305 = fsub float %298, %290, !dbg !43
  %306 = fadd float %285, %304, !dbg !45
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !46
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %306) #5, !dbg !47
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !48
  %310 = fmul float %305, %309, !dbg !49
  %311 = fadd float %290, %310, !dbg !50
  %312 = fadd float %295, %301, !dbg !51
  %313 = fmul float %305, %305, !dbg !52
  %314 = fmul float %285, %313, !dbg !53
  %315 = fmul float %309, %314, !dbg !54
  %316 = fadd float %312, %315, !dbg !55
  %317 = icmp eq i32 %175, 0, !dbg !41
  %318 = and i32 %174, 15, !dbg !41
  %319 = zext nneg i32 %318 to i64, !dbg !41
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !41
  %321 = bitcast float %311 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 %317) #5, !dbg !41
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %319, !dbg !41
  %323 = bitcast float %316 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 %317) #5, !dbg !41
  %324 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %319, !dbg !41
  %325 = bitcast float %306 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 %317) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %326 = icmp slt i32 %10, 16, !dbg !41
  %327 = sext i32 %10 to i64, !dbg !41
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !41
  %329 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %328, i1 %326) #5, !dbg !41
  %330 = bitcast i32 %329 to float, !dbg !41
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %327, !dbg !41
  %332 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %326) #5, !dbg !41
  %333 = bitcast i32 %332 to float, !dbg !41
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %327, !dbg !41
  %335 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %334, i1 %326) #5, !dbg !41
  %336 = bitcast i32 %335 to float, !dbg !41
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 8, i32 31), !dbg !41
  %338 = bitcast i32 %337 to float, !dbg !41
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !41
  %340 = bitcast i32 %339 to float, !dbg !41
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !41
  %342 = bitcast i32 %341 to float, !dbg !41
  %343 = fsub float %338, %330, !dbg !43
  %344 = fadd float %336, %342, !dbg !45
  %345 = fcmp oeq float %344, 0.000000e+00, !dbg !46
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %342, float %344) #5, !dbg !47
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !48
  %348 = fmul float %343, %347, !dbg !49
  %349 = fadd float %348, %330, !dbg !50
  %350 = fadd float %333, %340, !dbg !51
  %351 = fmul float %343, %343, !dbg !52
  %352 = fmul float %351, %336, !dbg !53
  %353 = fmul float %352, %347, !dbg !54
  %354 = fadd float %350, %353, !dbg !55
  %355 = bitcast float %349 to i32, !dbg !41
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 4, i32 31), !dbg !41
  %357 = bitcast i32 %356 to float, !dbg !41
  %358 = bitcast float %354 to i32, !dbg !41
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !41
  %360 = bitcast i32 %359 to float, !dbg !41
  %361 = bitcast float %344 to i32, !dbg !41
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 4, i32 31), !dbg !41
  %363 = bitcast i32 %362 to float, !dbg !41
  %364 = fsub float %357, %349, !dbg !43
  %365 = fadd float %344, %363, !dbg !45
  %366 = fcmp oeq float %365, 0.000000e+00, !dbg !46
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float %365) #5, !dbg !47
  %368 = select i1 %366, float 0.000000e+00, float %367, !dbg !48
  %369 = fmul float %364, %368, !dbg !49
  %370 = fadd float %349, %369, !dbg !50
  %371 = fadd float %354, %360, !dbg !51
  %372 = fmul float %364, %364, !dbg !52
  %373 = fmul float %344, %372, !dbg !53
  %374 = fmul float %368, %373, !dbg !54
  %375 = fadd float %371, %374, !dbg !55
  %376 = bitcast float %370 to i32, !dbg !41
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 2, i32 31), !dbg !41
  %378 = bitcast i32 %377 to float, !dbg !41
  %379 = bitcast float %375 to i32, !dbg !41
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !41
  %381 = bitcast i32 %380 to float, !dbg !41
  %382 = bitcast float %365 to i32, !dbg !41
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !41
  %384 = bitcast i32 %383 to float, !dbg !41
  %385 = fsub float %378, %370, !dbg !43
  %386 = fadd float %365, %384, !dbg !45
  %387 = fcmp oeq float %386, 0.000000e+00, !dbg !46
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float %386) #5, !dbg !47
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !48
  %390 = fmul float %385, %389, !dbg !49
  %391 = fadd float %370, %390, !dbg !50
  %392 = fadd float %375, %381, !dbg !51
  %393 = fmul float %385, %385, !dbg !52
  %394 = fmul float %365, %393, !dbg !53
  %395 = fmul float %389, %394, !dbg !54
  %396 = fadd float %392, %395, !dbg !55
  %397 = bitcast float %391 to i32, !dbg !41
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !41
  %399 = bitcast i32 %398 to float, !dbg !41
  %400 = bitcast float %396 to i32, !dbg !41
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !41
  %402 = bitcast i32 %401 to float, !dbg !41
  %403 = bitcast float %386 to i32, !dbg !41
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 1, i32 31), !dbg !41
  %405 = bitcast i32 %404 to float, !dbg !41
  %406 = fsub float %399, %391, !dbg !43
  %407 = fadd float %386, %405, !dbg !45
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !46
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float %407) #5, !dbg !47
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !48
  %411 = fmul float %406, %410, !dbg !49
  %412 = fadd float %391, %411, !dbg !50
  %413 = fadd float %396, %402, !dbg !51
  %414 = fmul float %406, %406, !dbg !52
  %415 = fmul float %386, %414, !dbg !53
  %416 = fmul float %410, %415, !dbg !54
  %417 = fadd float %413, %416, !dbg !55
  %418 = and i32 %10, 15, !dbg !41
  %419 = icmp eq i32 %418, 0, !dbg !41
  %420 = and i1 %326, %419, !dbg !41
  %421 = bitcast float %412 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %421, i1 %420) #5, !dbg !41
  %422 = bitcast float %417 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %422, i1 %420) #5, !dbg !41
  %423 = bitcast float %407 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %423, i1 %420) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %424 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %425 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !41
  %426 = sext i32 %8 to i64, !dbg !56
  %427 = getelementptr float, ptr addrspace(1) %2, i64 %426, !dbg !56
  %428 = icmp eq i32 %11, 0, !dbg !57
  %429 = and i1 %428, %9, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %424, ptr addrspace(1) %427, i1 %429) #5, !dbg !57
  %430 = getelementptr float, ptr addrspace(1) %3, i64 %426, !dbg !58
  %431 = bitcast float %425 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %430, i1 %429) #5, !dbg !59
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float 1.638400e+04) #5, !dbg !60
  %433 = fadd float %432, 0x3EE4F8B580000000, !dbg !61
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i = icmp eq i32 %434, 0, !dbg !62
  br i1 %.not.i, label %437, label %435, !dbg !62

435:                                              ; preds = %173
  %436 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %433), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

437:                                              ; preds = %173
  %438 = tail call float @llvm.nvvm.rsqrt.approx.f(float %433), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %435, %437
  %.0.i = phi float [ %436, %435 ], [ %438, %437 ], !dbg !62
  %439 = getelementptr float, ptr addrspace(1) %4, i64 %426, !dbg !63
  %440 = bitcast float %.0.i to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %440, ptr addrspace(1) %439, i1 %429) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn3lohfufs5g3k4sprezfnbf3mrup7q72fahtj5u6yhkr6btqiv7.py", directory: "inductor_cache/n3")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_8", linkageName: "triton_red_fused_convolution_native_group_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 49, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 32, column: 27, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 54, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 41, column: 62, scope: !7)
!26 = !DILocation(line: 178, column: 7, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 41, column: 51, scope: !7)
!30 = !DILocation(line: 183, column: 24, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 184, column: 30, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 185, column: 34, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 185, column: 26, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 186, column: 39, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 186, column: 31, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 186, column: 22, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 43, column: 60, scope: !7)
!38 = !DILocation(line: 44, column: 56, scope: !7)
!39 = !DILocation(line: 45, column: 64, scope: !7)
!40 = !DILocation(line: 46, column: 54, scope: !7)
!41 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !42)
!42 = !DILocation(line: 48, column: 41, scope: !7)
!43 = !DILocation(line: 192, column: 21, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!45 = !DILocation(line: 193, column: 28, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 194, column: 39, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 194, column: 60, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 194, column: 49, scope: !44, inlinedAt: !42)
!49 = !DILocation(line: 196, column: 25, scope: !44, inlinedAt: !42)
!50 = !DILocation(line: 196, column: 17, scope: !44, inlinedAt: !42)
!51 = !DILocation(line: 197, column: 15, scope: !44, inlinedAt: !42)
!52 = !DILocation(line: 197, column: 30, scope: !44, inlinedAt: !42)
!53 = !DILocation(line: 197, column: 38, scope: !44, inlinedAt: !42)
!54 = !DILocation(line: 197, column: 49, scope: !44, inlinedAt: !42)
!55 = !DILocation(line: 197, column: 22, scope: !44, inlinedAt: !42)
!56 = !DILocation(line: 53, column: 25, scope: !7)
!57 = !DILocation(line: 53, column: 36, scope: !7)
!58 = !DILocation(line: 54, column: 25, scope: !7)
!59 = !DILocation(line: 54, column: 36, scope: !7)
!60 = !DILocation(line: 56, column: 18, scope: !7)
!61 = !DILocation(line: 58, column: 19, scope: !7)
!62 = !DILocation(line: 59, column: 28, scope: !7)
!63 = !DILocation(line: 60, column: 25, scope: !7)
!64 = !DILocation(line: 60, column: 37, scope: !7)
!65 = !DILocation(line: 60, column: 4, scope: !7)
