; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_leaky_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = and i32 %9, 127, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = icmp slt i32 %14, 2048, !dbg !14
  %17 = icmp slt i32 %15, 2048, !dbg !14
  %18 = shl i32 %9, 2, !dbg !15
  %19 = and i32 %18, 12, !dbg !15
  %20 = shl i32 %14, 4, !dbg !16
  %21 = shl i32 %15, 4, !dbg !16
  %22 = or disjoint i32 %20, %19, !dbg !17
  %23 = or disjoint i32 %21, %19, !dbg !17
  %24 = sext i32 %22 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = fadd float %33, %34, !dbg !20
  %47 = fadd float %46, %35, !dbg !20
  %48 = fadd float %47, %36, !dbg !20
  %49 = select i1 %16, float %48, float 0.000000e+00, !dbg !20
  %50 = fadd float %42, %43, !dbg !20
  %51 = fadd float %50, %44, !dbg !20
  %52 = fadd float %51, %45, !dbg !20
  %53 = select i1 %17, float %52, float 0.000000e+00, !dbg !20
  %54 = bitcast float %49 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %49, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = bitcast float %53 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %53, %64, !dbg !20
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !20
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %71 = bitcast float %61 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #5, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %73 = bitcast float %69 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !26
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #5, !dbg !26
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !26
  %79 = fsub float %33, %77, !dbg !27
  %80 = fsub float %34, %77, !dbg !27
  %81 = fsub float %35, %77, !dbg !27
  %82 = fsub float %36, %77, !dbg !27
  %83 = fsub float %42, %78, !dbg !27
  %84 = fsub float %43, %78, !dbg !27
  %85 = fsub float %44, %78, !dbg !27
  %86 = fsub float %45, %78, !dbg !27
  %87 = fmul float %79, %79, !dbg !28
  %88 = fmul float %80, %80, !dbg !28
  %89 = fmul float %81, %81, !dbg !28
  %90 = fmul float %82, %82, !dbg !28
  %91 = fmul float %83, %83, !dbg !28
  %92 = fmul float %84, %84, !dbg !28
  %93 = fmul float %85, %85, !dbg !28
  %94 = fmul float %86, %86, !dbg !28
  %95 = fadd float %87, %88, !dbg !29
  %96 = fadd float %89, %95, !dbg !29
  %97 = fadd float %90, %96, !dbg !29
  %98 = select i1 %16, float %97, float 0.000000e+00, !dbg !29
  %99 = fadd float %91, %92, !dbg !29
  %100 = fadd float %93, %99, !dbg !29
  %101 = fadd float %94, %100, !dbg !29
  %102 = select i1 %17, float %101, float 0.000000e+00, !dbg !29
  %103 = bitcast float %98 to i32, !dbg !31
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = fadd float %98, %105, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !31
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = fadd float %106, %109, !dbg !29
  %111 = bitcast float %102 to i32, !dbg !31
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = fadd float %102, %113, !dbg !29
  %115 = bitcast float %114 to i32, !dbg !31
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !31
  %117 = bitcast i32 %116 to float, !dbg !31
  %118 = fadd float %114, %117, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %119 = bitcast float %110 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %119, i1 true) #5, !dbg !32
  %120 = bitcast float %118 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %120, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %121 = load float, ptr addrspace(3) %74, align 4, !dbg !32
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 1.600000e+01) #5, !dbg !33
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #5, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 1.600000e+01) #5, !dbg !33
  %125 = fadd float %122, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %123, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %124, 0x3EE4F8B580000000, !dbg !34
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %128, 0, !dbg !32
  br i1 %.not.i, label %131, label %129, !dbg !32

129:                                              ; preds = %6
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

131:                                              ; preds = %6
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %129, %131
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], !dbg !32
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i12 = icmp eq i32 %136, 0, !dbg !32
  br i1 %.not.i12, label %139, label %137, !dbg !32

137:                                              ; preds = %__nv_rsqrtf.exit
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !32
  br label %__nv_rsqrtf.exit14, !dbg !32

139:                                              ; preds = %__nv_rsqrtf.exit
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !32
  br label %__nv_rsqrtf.exit14, !dbg !32

__nv_rsqrtf.exit14:                               ; preds = %137, %139
  %.0.i13 = phi float [ %138, %137 ], [ %140, %139 ], !dbg !32
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i24 = icmp eq i32 %144, 0, !dbg !32
  br i1 %.not.i24, label %147, label %145, !dbg !32

145:                                              ; preds = %__nv_rsqrtf.exit14
  %146 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit26, !dbg !32

147:                                              ; preds = %__nv_rsqrtf.exit14
  %148 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit26, !dbg !32

__nv_rsqrtf.exit26:                               ; preds = %145, %147
  %.0.i25 = phi float [ %146, %145 ], [ %148, %147 ], !dbg !32
  %149 = or disjoint i32 %8, %13, !dbg !13
  %150 = icmp slt i32 %149, 2048, !dbg !14
  %151 = fmul float %79, %.0.i13, !dbg !35
  %152 = fmul float %80, %.0.i13, !dbg !35
  %153 = fmul float %81, %.0.i13, !dbg !35
  %154 = fmul float %82, %.0.i13, !dbg !35
  %155 = fmul float %83, %.0.i25, !dbg !35
  %156 = fmul float %84, %.0.i25, !dbg !35
  %157 = fmul float %85, %.0.i25, !dbg !35
  %158 = fmul float %86, %.0.i25, !dbg !35
  %159 = fcmp ogt float %151, 0.000000e+00, !dbg !36
  %160 = fcmp ogt float %152, 0.000000e+00, !dbg !36
  %161 = fcmp ogt float %153, 0.000000e+00, !dbg !36
  %162 = fcmp ogt float %154, 0.000000e+00, !dbg !36
  %163 = fcmp ogt float %155, 0.000000e+00, !dbg !36
  %164 = fcmp ogt float %156, 0.000000e+00, !dbg !36
  %165 = fcmp ogt float %157, 0.000000e+00, !dbg !36
  %166 = fcmp ogt float %158, 0.000000e+00, !dbg !36
  %167 = fmul float %151, 0x3FC99999A0000000, !dbg !37
  %168 = fmul float %152, 0x3FC99999A0000000, !dbg !37
  %169 = fmul float %153, 0x3FC99999A0000000, !dbg !37
  %170 = fmul float %154, 0x3FC99999A0000000, !dbg !37
  %171 = fmul float %155, 0x3FC99999A0000000, !dbg !37
  %172 = fmul float %156, 0x3FC99999A0000000, !dbg !37
  %173 = fmul float %157, 0x3FC99999A0000000, !dbg !37
  %174 = fmul float %158, 0x3FC99999A0000000, !dbg !37
  %175 = select i1 %159, float %151, float %167, !dbg !38
  %176 = select i1 %160, float %152, float %168, !dbg !38
  %177 = select i1 %161, float %153, float %169, !dbg !38
  %178 = select i1 %162, float %154, float %170, !dbg !38
  %179 = select i1 %163, float %155, float %171, !dbg !38
  %180 = select i1 %164, float %156, float %172, !dbg !38
  %181 = select i1 %165, float %157, float %173, !dbg !38
  %182 = select i1 %166, float %158, float %174, !dbg !38
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !39
  %185 = bitcast float %175 to i32, !dbg !40
  %186 = bitcast float %176 to i32, !dbg !40
  %187 = bitcast float %177 to i32, !dbg !40
  %188 = bitcast float %178 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %183, i1 %16) #5, !dbg !40
  %189 = bitcast float %179 to i32, !dbg !40
  %190 = bitcast float %180 to i32, !dbg !40
  %191 = bitcast float %181 to i32, !dbg !40
  %192 = bitcast float %182 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %190, i32 %191, i32 %192, ptr addrspace(1) %184, i1 %17) #5, !dbg !40
  %193 = sext i32 %149 to i64, !dbg !41
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !41
  %195 = and i32 %9, 128, !dbg !42
  %196 = icmp eq i32 %195, 0, !dbg !42
  %197 = bitcast float %.0.i to i32, !dbg !42
  %198 = and i1 %196, %150, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %194, i1 %198) #5, !dbg !42
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !43
  %200 = bitcast float %76 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %199, i1 %198) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwrmqpghs34o3gfmfnxy2aeg55fppbvjlutwiimvbbtq3bxwemgm.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_leaky_relu_12", linkageName: "triton_per_fused__native_batch_norm_legit_leaky_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 50, column: 28, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 56, column: 35, scope: !7)
!39 = !DILocation(line: 57, column: 25, scope: !7)
!40 = !DILocation(line: 57, column: 45, scope: !7)
!41 = !DILocation(line: 58, column: 25, scope: !7)
!42 = !DILocation(line: 58, column: 37, scope: !7)
!43 = !DILocation(line: 59, column: 25, scope: !7)
!44 = !DILocation(line: 59, column: 37, scope: !7)
!45 = !DILocation(line: 59, column: 4, scope: !7)
