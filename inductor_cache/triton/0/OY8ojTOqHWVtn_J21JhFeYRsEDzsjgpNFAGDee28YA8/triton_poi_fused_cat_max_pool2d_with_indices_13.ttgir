#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_max_pool2d_with_indices_13(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":19:0), %arg3: i32 loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<2304> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<15> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<8> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<7> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<49> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<14> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<2> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<256> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<3> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<9> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<9> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x64xi32, #blocked> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.muli %10, %c16_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %13 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc8)
    %16 = tt.splat %11 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %17 = tt.splat %11 : i32 -> tensor<16x1xi32, #blocked> loc(#loc9)
    %18 = arith.addi %16, %14 : tensor<16x1xi32, #blocked1> loc(#loc9)
    %19 = arith.addi %17, %15 : tensor<16x1xi32, #blocked> loc(#loc9)
    %20 = arith.cmpi slt, %18, %cst_11 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %21 = arith.cmpi slt, %19, %cst_12 : tensor<16x1xi32, #blocked> loc(#loc10)
    %22 = arith.remsi %18, %cst_10 : tensor<16x1xi32, #blocked1> loc(#loc11)
    %23 = arith.divsi %18, %cst_10 : tensor<16x1xi32, #blocked1> loc(#loc12)
    %24 = arith.remsi %9, %cst_9 : tensor<1x64xi32, #blocked> loc(#loc13)
    %25 = arith.divsi %9, %cst_9 : tensor<1x64xi32, #blocked> loc(#loc14)
    %26 = arith.muli %22, %cst_8 : tensor<16x1xi32, #blocked1> loc(#loc15)
    %27 = arith.muli %23, %cst_7 : tensor<16x1xi32, #blocked1> loc(#loc16)
    %28 = arith.addi %26, %27 : tensor<16x1xi32, #blocked1> loc(#loc17)
    %29 = arith.muli %8, %cst_6 : tensor<1x64xi32, #blocked1> loc(#loc18)
    %30 = tt.broadcast %28 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc19)
    %31 = tt.broadcast %29 : tensor<1x64xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc19)
    %32 = arith.addi %30, %31 : tensor<16x64xi32, #blocked1> loc(#loc19)
    %33 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %34 = tt.addptr %33, %32 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc20)
    %35 = tt.broadcast %20 : tensor<16x1xi1, #blocked1> -> tensor<16x64xi1, #blocked1> loc(#loc21)
    %36 = tt.broadcast %21 : tensor<16x1xi1, #blocked> -> tensor<16x64xi1, #blocked> loc(#loc21)
    %37 = tt.load %34, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc21)
    %38 = arith.addi %26, %cst_5 : tensor<16x1xi32, #blocked1> loc(#loc22)
    %39 = arith.addi %38, %27 : tensor<16x1xi32, #blocked1> loc(#loc23)
    %40 = tt.broadcast %39 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc24)
    %41 = arith.addi %40, %31 : tensor<16x64xi32, #blocked1> loc(#loc24)
    %42 = tt.addptr %33, %41 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc25)
    %43 = tt.load %42, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %44 = arith.addi %26, %cst_8 : tensor<16x1xi32, #blocked1> loc(#loc27)
    %45 = arith.addi %44, %27 : tensor<16x1xi32, #blocked1> loc(#loc28)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc29)
    %47 = arith.addi %46, %31 : tensor<16x64xi32, #blocked1> loc(#loc29)
    %48 = tt.addptr %33, %47 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc30)
    %49 = tt.load %48, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %50 = arith.addi %26, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc32)
    %51 = arith.addi %50, %27 : tensor<16x1xi32, #blocked1> loc(#loc33)
    %52 = tt.broadcast %51 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc34)
    %53 = arith.addi %52, %31 : tensor<16x64xi32, #blocked1> loc(#loc34)
    %54 = tt.addptr %33, %53 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc35)
    %55 = tt.load %54, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %56 = arith.addi %26, %cst_3 : tensor<16x1xi32, #blocked1> loc(#loc37)
    %57 = arith.addi %56, %27 : tensor<16x1xi32, #blocked1> loc(#loc38)
    %58 = tt.broadcast %57 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc39)
    %59 = arith.addi %58, %31 : tensor<16x64xi32, #blocked1> loc(#loc39)
    %60 = tt.addptr %33, %59 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc40)
    %61 = tt.load %60, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %62 = arith.addi %26, %cst_11 : tensor<16x1xi32, #blocked1> loc(#loc42)
    %63 = arith.addi %62, %27 : tensor<16x1xi32, #blocked1> loc(#loc43)
    %64 = tt.broadcast %63 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc44)
    %65 = arith.addi %64, %31 : tensor<16x64xi32, #blocked1> loc(#loc44)
    %66 = tt.addptr %33, %65 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc45)
    %67 = tt.load %66, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %68 = arith.addi %26, %cst_7 : tensor<16x1xi32, #blocked1> loc(#loc47)
    %69 = arith.addi %68, %27 : tensor<16x1xi32, #blocked1> loc(#loc48)
    %70 = tt.broadcast %69 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc49)
    %71 = arith.addi %70, %31 : tensor<16x64xi32, #blocked1> loc(#loc49)
    %72 = tt.addptr %33, %71 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc50)
    %73 = tt.load %72, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc51)
    %74 = arith.addi %26, %cst_2 : tensor<16x1xi32, #blocked1> loc(#loc52)
    %75 = arith.addi %74, %27 : tensor<16x1xi32, #blocked1> loc(#loc53)
    %76 = tt.broadcast %75 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc54)
    %77 = arith.addi %76, %31 : tensor<16x64xi32, #blocked1> loc(#loc54)
    %78 = tt.addptr %33, %77 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc55)
    %79 = tt.load %78, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc56)
    %80 = arith.addi %26, %cst_1 : tensor<16x1xi32, #blocked1> loc(#loc57)
    %81 = arith.addi %80, %27 : tensor<16x1xi32, #blocked1> loc(#loc58)
    %82 = tt.broadcast %81 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc59)
    %83 = arith.addi %82, %31 : tensor<16x64xi32, #blocked1> loc(#loc59)
    %84 = tt.addptr %33, %83 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc60)
    %85 = tt.load %84, %35 evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %86 = arith.cmpf ogt, %43, %37 : tensor<16x64xf32, #blocked1> loc(#loc81)
    %87 = arith.cmpf une, %43, %43 : tensor<16x64xf32, #blocked1> loc(#loc82)
    %88 = arith.ori %86, %87 : tensor<16x64xi1, #blocked1> loc(#loc83)
    %89 = arith.select %88, %43, %37 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc84)
    %90 = arith.cmpf ogt, %49, %89 : tensor<16x64xf32, #blocked1> loc(#loc85)
    %91 = arith.cmpf une, %49, %49 : tensor<16x64xf32, #blocked1> loc(#loc86)
    %92 = arith.ori %90, %91 : tensor<16x64xi1, #blocked1> loc(#loc87)
    %93 = arith.select %92, %49, %89 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc88)
    %94 = arith.cmpf ogt, %55, %93 : tensor<16x64xf32, #blocked1> loc(#loc89)
    %95 = arith.cmpf une, %55, %55 : tensor<16x64xf32, #blocked1> loc(#loc90)
    %96 = arith.ori %94, %95 : tensor<16x64xi1, #blocked1> loc(#loc91)
    %97 = arith.select %96, %55, %93 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc92)
    %98 = arith.cmpf ogt, %61, %97 : tensor<16x64xf32, #blocked1> loc(#loc93)
    %99 = arith.cmpf une, %61, %61 : tensor<16x64xf32, #blocked1> loc(#loc94)
    %100 = arith.ori %98, %99 : tensor<16x64xi1, #blocked1> loc(#loc95)
    %101 = arith.select %100, %61, %97 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc96)
    %102 = arith.cmpf ogt, %67, %101 : tensor<16x64xf32, #blocked1> loc(#loc97)
    %103 = arith.cmpf une, %67, %67 : tensor<16x64xf32, #blocked1> loc(#loc98)
    %104 = arith.ori %102, %103 : tensor<16x64xi1, #blocked1> loc(#loc99)
    %105 = arith.select %104, %67, %101 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc100)
    %106 = arith.cmpf ogt, %73, %105 : tensor<16x64xf32, #blocked1> loc(#loc101)
    %107 = arith.cmpf une, %73, %73 : tensor<16x64xf32, #blocked1> loc(#loc102)
    %108 = arith.ori %106, %107 : tensor<16x64xi1, #blocked1> loc(#loc103)
    %109 = arith.select %108, %73, %105 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc104)
    %110 = arith.cmpf ogt, %79, %109 : tensor<16x64xf32, #blocked1> loc(#loc105)
    %111 = arith.cmpf une, %79, %79 : tensor<16x64xf32, #blocked1> loc(#loc106)
    %112 = arith.ori %110, %111 : tensor<16x64xi1, #blocked1> loc(#loc107)
    %113 = arith.select %112, %79, %109 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc108)
    %114 = arith.cmpf ogt, %85, %113 : tensor<16x64xf32, #blocked1> loc(#loc109)
    %115 = arith.cmpf une, %85, %85 : tensor<16x64xf32, #blocked1> loc(#loc110)
    %116 = arith.ori %114, %115 : tensor<16x64xi1, #blocked1> loc(#loc111)
    %117 = arith.select %116, %85, %113 : tensor<16x64xi1, #blocked1>, tensor<16x64xf32, #blocked1> loc(#loc112)
    %118 = arith.muli %19, %cst_0 : tensor<16x1xi32, #blocked> loc(#loc74)
    %119 = tt.broadcast %24 : tensor<1x64xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc75)
    %120 = tt.broadcast %118 : tensor<16x1xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc75)
    %121 = arith.addi %119, %120 : tensor<16x64xi32, #blocked> loc(#loc75)
    %122 = arith.muli %25, %cst : tensor<1x64xi32, #blocked> loc(#loc76)
    %123 = tt.broadcast %122 : tensor<1x64xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc77)
    %124 = arith.addi %121, %123 : tensor<16x64xi32, #blocked> loc(#loc77)
    %125 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc78)
    %126 = tt.addptr %125, %124 : tensor<16x64x!tt.ptr<f32>, #blocked>, tensor<16x64xi32, #blocked> loc(#loc78)
    %127 = triton_gpu.convert_layout %117 : tensor<16x64xf32, #blocked1> -> tensor<16x64xf32, #blocked> loc(#loc79)
    tt.store %126, %127, %36 : tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc79)
    tt.return loc(#loc80)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":22:28)
#loc3 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":22:33)
#loc4 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":23:44)
#loc5 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":23:23)
#loc6 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":25:28)
#loc7 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":25:33)
#loc8 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":26:44)
#loc9 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":26:23)
#loc10 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":27:21)
#loc11 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":28:19)
#loc12 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":29:19)
#loc13 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":32:19)
#loc14 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":33:19)
#loc15 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:32)
#loc16 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:40)
#loc17 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:37)
#loc18 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:48)
#loc19 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:45)
#loc20 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:30)
#loc21 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":34:53)
#loc22 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":35:34)
#loc23 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":35:41)
#loc24 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":35:49)
#loc25 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":35:30)
#loc26 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":35:57)
#loc27 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":36:34)
#loc28 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":36:41)
#loc29 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":36:49)
#loc30 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":36:30)
#loc31 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":36:57)
#loc32 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":37:34)
#loc33 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":37:41)
#loc34 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":37:49)
#loc35 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":37:30)
#loc36 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":37:57)
#loc37 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":38:34)
#loc38 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":38:41)
#loc39 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":38:49)
#loc40 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":38:30)
#loc41 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":38:57)
#loc42 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":39:34)
#loc43 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":39:41)
#loc44 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":39:49)
#loc45 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":39:30)
#loc46 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":39:57)
#loc47 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":40:36)
#loc48 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":40:43)
#loc49 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":40:51)
#loc50 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":40:31)
#loc51 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":40:59)
#loc52 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":41:36)
#loc53 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":41:43)
#loc54 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":41:51)
#loc55 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":41:31)
#loc56 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":41:59)
#loc57 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":42:36)
#loc58 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":42:43)
#loc59 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":42:51)
#loc60 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":42:31)
#loc61 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":42:59)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc63 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":43:40)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc67 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":44:40)
#loc68 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":45:40)
#loc69 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":46:40)
#loc70 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":47:41)
#loc71 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":48:42)
#loc72 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":49:42)
#loc73 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":50:42)
#loc74 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:34)
#loc75 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:30)
#loc76 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:44)
#loc77 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:39)
#loc78 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:25)
#loc79 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:56)
#loc80 = loc("inductor_cache/5y/c5yvzfbm36upmzr5flc7l35acwb7afnkjrr2ckdurtribm3wdkov.py":51:4)
#loc81 = loc(callsite(#loc62 at #loc63))
#loc82 = loc(callsite(#loc64 at #loc63))
#loc83 = loc(callsite(#loc65 at #loc63))
#loc84 = loc(callsite(#loc66 at #loc63))
#loc85 = loc(callsite(#loc62 at #loc67))
#loc86 = loc(callsite(#loc64 at #loc67))
#loc87 = loc(callsite(#loc65 at #loc67))
#loc88 = loc(callsite(#loc66 at #loc67))
#loc89 = loc(callsite(#loc62 at #loc68))
#loc90 = loc(callsite(#loc64 at #loc68))
#loc91 = loc(callsite(#loc65 at #loc68))
#loc92 = loc(callsite(#loc66 at #loc68))
#loc93 = loc(callsite(#loc62 at #loc69))
#loc94 = loc(callsite(#loc64 at #loc69))
#loc95 = loc(callsite(#loc65 at #loc69))
#loc96 = loc(callsite(#loc66 at #loc69))
#loc97 = loc(callsite(#loc62 at #loc70))
#loc98 = loc(callsite(#loc64 at #loc70))
#loc99 = loc(callsite(#loc65 at #loc70))
#loc100 = loc(callsite(#loc66 at #loc70))
#loc101 = loc(callsite(#loc62 at #loc71))
#loc102 = loc(callsite(#loc64 at #loc71))
#loc103 = loc(callsite(#loc65 at #loc71))
#loc104 = loc(callsite(#loc66 at #loc71))
#loc105 = loc(callsite(#loc62 at #loc72))
#loc106 = loc(callsite(#loc64 at #loc72))
#loc107 = loc(callsite(#loc65 at #loc72))
#loc108 = loc(callsite(#loc66 at #loc72))
#loc109 = loc(callsite(#loc62 at #loc73))
#loc110 = loc(callsite(#loc64 at #loc73))
#loc111 = loc(callsite(#loc65 at #loc73))
#loc112 = loc(callsite(#loc66 at #loc73))
