; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = or disjoint i32 %10, 64, !dbg !12
  %12 = or disjoint i32 %10, 128, !dbg !12
  %13 = or disjoint i32 %10, 192, !dbg !12
  %14 = and i32 %8, 255, !dbg !12
  %15 = shl i32 %8, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = and i32 %15, 252, !dbg !12
  %18 = or disjoint i32 %7, %10, !dbg !13
  %19 = or disjoint i32 %7, %11, !dbg !13
  %20 = or disjoint i32 %7, %12, !dbg !13
  %21 = or disjoint i32 %7, %13, !dbg !13
  %22 = or disjoint i32 %7, %14, !dbg !13
  %23 = or disjoint i32 %7, %17, !dbg !13
  %24 = icmp slt i32 %18, 256, !dbg !14
  %25 = icmp slt i32 %19, 256, !dbg !14
  %26 = icmp slt i32 %20, 256, !dbg !14
  %27 = icmp slt i32 %21, 256, !dbg !14
  %28 = icmp slt i32 %22, 256, !dbg !14
  %29 = icmp slt i32 %23, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 4, !dbg !16
  %.lobit4 = lshr i32 %8, 6, !dbg !17
  %32 = and i32 %.lobit4, 3, !dbg !17
  %33 = or disjoint i32 %31, %16, !dbg !18
  %34 = or disjoint i32 %31, %32, !dbg !18
  %35 = or disjoint i32 %34, 4, !dbg !18
  %36 = or disjoint i32 %34, 8, !dbg !18
  %37 = or disjoint i32 %34, 12, !dbg !18
  %38 = icmp slt i32 %33, 16, !dbg !19
  %39 = icmp slt i32 %34, 16, !dbg !19
  %40 = icmp slt i32 %35, 16, !dbg !19
  %41 = icmp slt i32 %36, 16, !dbg !19
  %42 = icmp slt i32 %37, 16, !dbg !19
  %43 = sdiv i32 %22, 4, !dbg !20
  %44 = shl i32 %18, 4, !dbg !21
  %45 = shl i32 %19, 4, !dbg !21
  %46 = shl i32 %20, 4, !dbg !21
  %47 = shl i32 %21, 4, !dbg !21
  %48 = add i32 %33, %44, !dbg !22
  %49 = add i32 %33, %45, !dbg !22
  %50 = add i32 %33, %46, !dbg !22
  %51 = add i32 %33, %47, !dbg !22
  %52 = sext i32 %48 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %49 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %50 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %51 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = and i1 %24, %38, !dbg !24
  %61 = and i1 %25, %38, !dbg !24
  %62 = and i1 %26, %38, !dbg !24
  %63 = and i1 %27, %38, !dbg !24
  %64 = and i1 %29, %39, !dbg !24
  %65 = and i1 %40, %29, !dbg !24
  %66 = and i1 %41, %29, !dbg !24
  %67 = and i1 %42, %29, !dbg !24
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %60) #2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %61) #2, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %63) #2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !25
  %88 = and i32 %15, 1020, !dbg !25
  %89 = shl i32 %8, 4, !dbg !25
  %90 = and i32 %89, 4080, !dbg !25
  %91 = lshr i32 %88, 4, !dbg !25
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !25
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %88, !dbg !25
  %94 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !25
  %95 = or disjoint i32 %88, 1, !dbg !25
  %96 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %95, !dbg !25
  %97 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !25
  %98 = or disjoint i32 %88, 2, !dbg !25
  %99 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %98, !dbg !25
  %100 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !25
  %101 = or disjoint i32 %88, 3, !dbg !25
  %102 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %101, !dbg !25
  %103 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !25
  %104 = or disjoint i32 %88, 1024, !dbg !25
  %105 = lshr i32 %104, 4, !dbg !25
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !25
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104, !dbg !25
  %108 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !25
  %109 = or disjoint i32 %88, 1025, !dbg !25
  %110 = lshr i32 %109, 4, !dbg !25
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !25
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %109, !dbg !25
  %113 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !25
  %114 = or disjoint i32 %88, 1026, !dbg !25
  %115 = lshr i32 %114, 4, !dbg !25
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !25
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114, !dbg !25
  %118 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !25
  %119 = or disjoint i32 %88, 1027, !dbg !25
  %120 = lshr i32 %119, 4, !dbg !25
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !25
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %119, !dbg !25
  %123 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !25
  %124 = or disjoint i32 %88, 2048, !dbg !25
  %125 = lshr i32 %124, 4, !dbg !25
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !25
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %124, !dbg !25
  %128 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !25
  %129 = or disjoint i32 %88, 2049, !dbg !25
  %130 = lshr i32 %129, 4, !dbg !25
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !25
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !25
  %133 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !25
  %134 = or disjoint i32 %88, 2050, !dbg !25
  %135 = lshr i32 %134, 4, !dbg !25
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !25
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %134, !dbg !25
  %138 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !25
  %139 = or disjoint i32 %88, 2051, !dbg !25
  %140 = lshr i32 %139, 4, !dbg !25
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !25
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %139, !dbg !25
  %143 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !25
  %144 = or disjoint i32 %88, 3072, !dbg !25
  %145 = lshr i32 %144, 4, !dbg !25
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !25
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !25
  %148 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !25
  %149 = or disjoint i32 %88, 3073, !dbg !25
  %150 = lshr i32 %149, 4, !dbg !25
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !25
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !25
  %153 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !25
  %154 = or disjoint i32 %88, 3074, !dbg !25
  %155 = lshr i32 %154, 4, !dbg !25
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !25
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !25
  %158 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !25
  %159 = or disjoint i32 %88, 3075, !dbg !25
  %160 = lshr i32 %159, 4, !dbg !25
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !25
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %159, !dbg !25
  %163 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %164 = lshr exact i32 %90, 2, !dbg !25
  %165 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %164, !dbg !25
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %90, !dbg !25
  %167 = sext i32 %43 to i64, !dbg !26
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !26
  %.idx = shl nuw nsw i32 %14, 3, !dbg !27
  %169 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %.idx5 = shl nuw nsw i32 %10, 3, !dbg !27
  %170 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !27
  %.idx6 = shl nuw nsw i32 %11, 3, !dbg !27
  %171 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !27
  %.idx7 = shl nuw nsw i32 %12, 3, !dbg !27
  %172 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !27
  %.idx8 = shl nuw nsw i32 %13, 3, !dbg !27
  %173 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !27
  %174 = load <16 x float>, ptr addrspace(3) %166, align 4, !dbg !25
  %175 = shufflevector <16 x float> %174, <16 x float> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !25
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %28) #2, !dbg !28
  %177 = insertelement <32 x i32> poison, i32 %176, i64 0, !dbg !28
  %178 = insertelement <32 x i32> %177, i32 %87, i64 16, !dbg !28
  %179 = insertelement <32 x i32> %178, i32 %86, i64 17, !dbg !28
  %180 = insertelement <32 x i32> %179, i32 %85, i64 18, !dbg !28
  %181 = insertelement <32 x i32> %180, i32 %84, i64 19, !dbg !28
  %182 = insertelement <32 x i32> %181, i32 %82, i64 20, !dbg !28
  %183 = insertelement <32 x i32> %182, i32 %81, i64 21, !dbg !28
  %184 = insertelement <32 x i32> %183, i32 %80, i64 22, !dbg !28
  %185 = insertelement <32 x i32> %184, i32 %79, i64 23, !dbg !28
  %186 = insertelement <32 x i32> %185, i32 %77, i64 24, !dbg !28
  %187 = insertelement <32 x i32> %186, i32 %76, i64 25, !dbg !28
  %188 = insertelement <32 x i32> %187, i32 %75, i64 26, !dbg !28
  %189 = insertelement <32 x i32> %188, i32 %74, i64 27, !dbg !28
  %190 = insertelement <32 x i32> %189, i32 %72, i64 28, !dbg !28
  %191 = insertelement <32 x i32> %190, i32 %71, i64 29, !dbg !28
  %192 = insertelement <32 x i32> %191, i32 %70, i64 30, !dbg !28
  %193 = insertelement <32 x i32> %192, i32 %69, i64 31, !dbg !28
  %194 = bitcast <32 x i32> %193 to <32 x float>, !dbg !28
  %195 = shufflevector <32 x float> %194, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %196 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %196, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %197 = load float, ptr addrspace(3) %170, align 8, !dbg !27
  %198 = load float, ptr addrspace(3) %171, align 8, !dbg !27
  %199 = load float, ptr addrspace(3) %172, align 8, !dbg !27
  %200 = load float, ptr addrspace(3) %173, align 8, !dbg !27
  %201 = insertelement <32 x float> poison, float %200, i64 16, !dbg !29
  %202 = insertelement <32 x float> %201, float %199, i64 20, !dbg !29
  %203 = insertelement <32 x float> %202, float %198, i64 24, !dbg !29
  %204 = insertelement <32 x float> %203, float %197, i64 28, !dbg !29
  %205 = shufflevector <32 x float> %204, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 16, i32 16, i32 16, i32 20, i32 20, i32 20, i32 20, i32 24, i32 24, i32 24, i32 24, i32 28, i32 28, i32 28, i32 28>, !dbg !29
  %206 = shufflevector <16 x float> %175, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %207 = shufflevector <32 x float> %206, <32 x float> %205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !29
  %208 = fadd <32 x float> %207, %195, !dbg !29
  %209 = fcmp ogt <32 x float> %208, zeroinitializer, !dbg !30
  %210 = extractelement <32 x float> %208, i64 31, !dbg !27
  %211 = fmul float %210, 0x3FC99999A0000000, !dbg !31
  %212 = extractelement <32 x float> %208, i64 30, !dbg !27
  %213 = fmul float %212, 0x3FC99999A0000000, !dbg !31
  %214 = extractelement <32 x float> %208, i64 29, !dbg !27
  %215 = fmul float %214, 0x3FC99999A0000000, !dbg !31
  %216 = extractelement <32 x float> %208, i64 28, !dbg !27
  %217 = fmul float %216, 0x3FC99999A0000000, !dbg !31
  %218 = extractelement <32 x float> %208, i64 27, !dbg !27
  %219 = fmul float %218, 0x3FC99999A0000000, !dbg !31
  %220 = extractelement <32 x float> %208, i64 26, !dbg !27
  %221 = fmul float %220, 0x3FC99999A0000000, !dbg !31
  %222 = extractelement <32 x float> %208, i64 25, !dbg !27
  %223 = fmul float %222, 0x3FC99999A0000000, !dbg !31
  %224 = extractelement <32 x float> %208, i64 24, !dbg !27
  %225 = fmul float %224, 0x3FC99999A0000000, !dbg !31
  %226 = extractelement <32 x float> %208, i64 23, !dbg !27
  %227 = fmul float %226, 0x3FC99999A0000000, !dbg !31
  %228 = extractelement <32 x float> %208, i64 22, !dbg !27
  %229 = fmul float %228, 0x3FC99999A0000000, !dbg !31
  %230 = extractelement <32 x float> %208, i64 21, !dbg !27
  %231 = fmul float %230, 0x3FC99999A0000000, !dbg !31
  %232 = extractelement <32 x float> %208, i64 20, !dbg !27
  %233 = fmul float %232, 0x3FC99999A0000000, !dbg !31
  %234 = extractelement <32 x float> %208, i64 19, !dbg !27
  %235 = fmul float %234, 0x3FC99999A0000000, !dbg !31
  %236 = extractelement <32 x float> %208, i64 18, !dbg !27
  %237 = fmul float %236, 0x3FC99999A0000000, !dbg !31
  %238 = extractelement <32 x float> %208, i64 17, !dbg !27
  %239 = fmul float %238, 0x3FC99999A0000000, !dbg !31
  %240 = extractelement <32 x float> %208, i64 16, !dbg !27
  %241 = fmul float %240, 0x3FC99999A0000000, !dbg !31
  %242 = extractelement <32 x i1> %209, i64 31, !dbg !27
  %243 = select i1 %242, float %210, float %211, !dbg !27
  %244 = extractelement <32 x i1> %209, i64 30, !dbg !27
  %245 = select i1 %244, float %212, float %213, !dbg !27
  %246 = extractelement <32 x i1> %209, i64 29, !dbg !27
  %247 = select i1 %246, float %214, float %215, !dbg !27
  %248 = extractelement <32 x i1> %209, i64 28, !dbg !27
  %249 = select i1 %248, float %216, float %217, !dbg !27
  %250 = extractelement <32 x i1> %209, i64 27, !dbg !27
  %251 = select i1 %250, float %218, float %219, !dbg !27
  %252 = extractelement <32 x i1> %209, i64 26, !dbg !27
  %253 = select i1 %252, float %220, float %221, !dbg !27
  %254 = extractelement <32 x i1> %209, i64 25, !dbg !27
  %255 = select i1 %254, float %222, float %223, !dbg !27
  %256 = extractelement <32 x i1> %209, i64 24, !dbg !27
  %257 = select i1 %256, float %224, float %225, !dbg !27
  %258 = extractelement <32 x i1> %209, i64 23, !dbg !27
  %259 = select i1 %258, float %226, float %227, !dbg !27
  %260 = extractelement <32 x i1> %209, i64 22, !dbg !27
  %261 = select i1 %260, float %228, float %229, !dbg !27
  %262 = extractelement <32 x i1> %209, i64 21, !dbg !27
  %263 = select i1 %262, float %230, float %231, !dbg !27
  %264 = extractelement <32 x i1> %209, i64 20, !dbg !27
  %265 = select i1 %264, float %232, float %233, !dbg !27
  %266 = extractelement <32 x i1> %209, i64 19, !dbg !27
  %267 = select i1 %266, float %234, float %235, !dbg !27
  %268 = extractelement <32 x i1> %209, i64 18, !dbg !27
  %269 = select i1 %268, float %236, float %237, !dbg !27
  %270 = extractelement <32 x i1> %209, i64 17, !dbg !27
  %271 = select i1 %270, float %238, float %239, !dbg !27
  %272 = extractelement <32 x i1> %209, i64 16, !dbg !27
  %273 = select i1 %272, float %240, float %241, !dbg !27
  %274 = shl i32 %34, 2, !dbg !32
  %275 = shl i32 %35, 2, !dbg !32
  %276 = shl i32 %36, 2, !dbg !32
  %277 = shl i32 %37, 2, !dbg !32
  %278 = shl i32 %23, 4, !dbg !33
  %279 = add i32 %274, %278, !dbg !34
  %280 = add i32 %278, %275, !dbg !34
  %281 = add i32 %278, %276, !dbg !34
  %282 = add i32 %278, %277, !dbg !34
  %283 = sext i32 %279 to i64, !dbg !35
  %284 = getelementptr i1, ptr addrspace(1) %2, i64 %283, !dbg !35
  %285 = sext i32 %280 to i64, !dbg !35
  %286 = getelementptr i1, ptr addrspace(1) %2, i64 %285, !dbg !35
  %287 = sext i32 %281 to i64, !dbg !35
  %288 = getelementptr i1, ptr addrspace(1) %2, i64 %287, !dbg !35
  %289 = sext i32 %282 to i64, !dbg !35
  %290 = getelementptr i1, ptr addrspace(1) %2, i64 %289, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %291 = extractelement <32 x i1> %209, i64 15, !dbg !36
  %292 = zext i1 %291 to i8, !dbg !36
  %293 = extractelement <32 x i1> %209, i64 14, !dbg !36
  %294 = zext i1 %293 to i8, !dbg !36
  %295 = extractelement <32 x i1> %209, i64 13, !dbg !36
  %296 = zext i1 %295 to i8, !dbg !36
  %297 = extractelement <32 x i1> %209, i64 12, !dbg !36
  %298 = zext i1 %297 to i8, !dbg !36
  %299 = extractelement <32 x i1> %209, i64 11, !dbg !36
  %300 = zext i1 %299 to i8, !dbg !36
  %301 = extractelement <32 x i1> %209, i64 10, !dbg !36
  %302 = zext i1 %301 to i8, !dbg !36
  %303 = extractelement <32 x i1> %209, i64 9, !dbg !36
  %304 = zext i1 %303 to i8, !dbg !36
  %305 = extractelement <32 x i1> %209, i64 8, !dbg !36
  %306 = zext i1 %305 to i8, !dbg !36
  %307 = extractelement <32 x i1> %209, i64 7, !dbg !36
  %308 = zext i1 %307 to i8, !dbg !36
  %309 = extractelement <32 x i1> %209, i64 6, !dbg !36
  %310 = zext i1 %309 to i8, !dbg !36
  %311 = extractelement <32 x i1> %209, i64 5, !dbg !36
  %312 = zext i1 %311 to i8, !dbg !36
  %313 = extractelement <32 x i1> %209, i64 4, !dbg !36
  %314 = zext i1 %313 to i8, !dbg !36
  %315 = extractelement <32 x i1> %209, i64 3, !dbg !36
  %316 = zext i1 %315 to i8, !dbg !36
  %317 = extractelement <32 x i1> %209, i64 2, !dbg !36
  %318 = zext i1 %317 to i8, !dbg !36
  %319 = extractelement <32 x i1> %209, i64 1, !dbg !36
  %320 = zext i1 %319 to i8, !dbg !36
  %321 = extractelement <32 x i1> %209, i64 0, !dbg !36
  %322 = zext i1 %321 to i8, !dbg !36
  %323 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %324 = insertelement <1 x i8> poison, i8 %292, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %323, <1 x i8> %324, i1 true) #2, !dbg !36
  %325 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 260, !dbg !36
  %326 = insertelement <1 x i8> poison, i8 %294, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %325, <1 x i8> %326, i1 true) #2, !dbg !36
  %327 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 520, !dbg !36
  %328 = insertelement <1 x i8> poison, i8 %296, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %327, <1 x i8> %328, i1 true) #2, !dbg !36
  %329 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 780, !dbg !36
  %330 = insertelement <1 x i8> poison, i8 %298, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %330, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %331 = lshr i32 %15, 6, !dbg !36
  %332 = and i32 %331, 12, !dbg !36
  %333 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %332, !dbg !36
  %334 = getelementptr inbounds i8, ptr addrspace(3) %333, i32 %88, !dbg !36
  %335 = load <32 x i1>, ptr addrspace(3) %334, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %336 = insertelement <1 x i8> poison, i8 %300, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %323, <1 x i8> %336, i1 true) #2, !dbg !36
  %337 = insertelement <1 x i8> poison, i8 %302, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %325, <1 x i8> %337, i1 true) #2, !dbg !36
  %338 = insertelement <1 x i8> poison, i8 %304, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %327, <1 x i8> %338, i1 true) #2, !dbg !36
  %339 = insertelement <1 x i8> poison, i8 %306, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %339, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %340 = load <32 x i1>, ptr addrspace(3) %334, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %341 = insertelement <1 x i8> poison, i8 %308, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %323, <1 x i8> %341, i1 true) #2, !dbg !36
  %342 = insertelement <1 x i8> poison, i8 %310, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %325, <1 x i8> %342, i1 true) #2, !dbg !36
  %343 = insertelement <1 x i8> poison, i8 %312, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %327, <1 x i8> %343, i1 true) #2, !dbg !36
  %344 = insertelement <1 x i8> poison, i8 %314, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %344, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %345 = load <32 x i1>, ptr addrspace(3) %334, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %346 = insertelement <1 x i8> poison, i8 %316, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %323, <1 x i8> %346, i1 true) #2, !dbg !36
  %347 = insertelement <1 x i8> poison, i8 %318, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %325, <1 x i8> %347, i1 true) #2, !dbg !36
  %348 = insertelement <1 x i8> poison, i8 %320, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %327, <1 x i8> %348, i1 true) #2, !dbg !36
  %349 = insertelement <1 x i8> poison, i8 %322, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %349, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %350 = load <32 x i1>, ptr addrspace(3) %334, align 4, !dbg !36
  %351 = shufflevector <32 x i1> %335, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !36
  %352 = shufflevector <32 x i1> %340, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !36
  %353 = shufflevector <32 x i1> %345, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !36
  %354 = shufflevector <32 x i1> %350, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !36
  %355 = zext <4 x i1> %351 to <4 x i8>, !dbg !36
  %356 = bitcast <4 x i8> %355 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %284, i1 %64) #2, !dbg !36
  %357 = zext <4 x i1> %352 to <4 x i8>, !dbg !36
  %358 = bitcast <4 x i8> %357 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %286, i1 %65) #2, !dbg !36
  %359 = zext <4 x i1> %353 to <4 x i8>, !dbg !36
  %360 = bitcast <4 x i8> %359 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %288, i1 %66) #2, !dbg !36
  %361 = zext <4 x i1> %354 to <4 x i8>, !dbg !36
  %362 = bitcast <4 x i8> %361 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %290, i1 %67) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %363 = bitcast float %243 to i32, !dbg !38
  %364 = bitcast float %245 to i32, !dbg !38
  %365 = bitcast float %247 to i32, !dbg !38
  %366 = bitcast float %249 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %364, i32 %365, i32 %366, ptr addrspace(1) %53, i1 %60) #2, !dbg !38
  %367 = bitcast float %251 to i32, !dbg !38
  %368 = bitcast float %253 to i32, !dbg !38
  %369 = bitcast float %255 to i32, !dbg !38
  %370 = bitcast float %257 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %367, i32 %368, i32 %369, i32 %370, ptr addrspace(1) %55, i1 %61) #2, !dbg !38
  %371 = bitcast float %259 to i32, !dbg !38
  %372 = bitcast float %261 to i32, !dbg !38
  %373 = bitcast float %263 to i32, !dbg !38
  %374 = bitcast float %265 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %371, i32 %372, i32 %373, i32 %374, ptr addrspace(1) %57, i1 %62) #2, !dbg !38
  %375 = bitcast float %267 to i32, !dbg !38
  %376 = bitcast float %269 to i32, !dbg !38
  %377 = bitcast float %271 to i32, !dbg !38
  %378 = bitcast float %273 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %375, i32 %376, i32 %377, i32 %378, ptr addrspace(1) %59, i1 %63) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_poi_fused_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_3", linkageName: "triton_poi_fused_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 55, scope: !7)
!25 = !DILocation(line: 32, column: 47, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 32, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 32, scope: !7)
!33 = !DILocation(line: 40, column: 40, scope: !7)
!34 = !DILocation(line: 40, column: 37, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 40, column: 51, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
!38 = !DILocation(line: 42, column: 47, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
