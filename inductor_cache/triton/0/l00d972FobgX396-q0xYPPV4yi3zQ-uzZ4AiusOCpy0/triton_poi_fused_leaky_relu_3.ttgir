#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_leaky_relu_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0), %arg2: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<2.000000e-01> : tensor<16x256xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<1x256xi32, #blocked2> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<1x256xi32, #blocked> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_8 : tensor<1x256xi32, #blocked1> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_7 : tensor<1x256xi32, #blocked2> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc6)
    %17 = tt.get_program_id x : i32 loc(#loc7)
    %18 = arith.muli %17, %c16_i32 : i32 loc(#loc8)
    %19 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc9)
    %23 = tt.splat %18 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc10)
    %24 = tt.splat %18 : i32 -> tensor<16x1xi32, #blocked> loc(#loc10)
    %25 = arith.addi %23, %21 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %26 = arith.addi %24, %22 : tensor<16x1xi32, #blocked> loc(#loc10)
    %27 = arith.cmpi slt, %25, %cst_5 : tensor<16x1xi32, #blocked1> loc(#loc11)
    %28 = arith.cmpi slt, %26, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc11)
    %29 = arith.divsi %12, %cst_3 : tensor<1x256xi32, #blocked2> loc(#loc12)
    %30 = arith.divsi %13, %cst_2 : tensor<1x256xi32, #blocked> loc(#loc12)
    %31 = arith.remsi %13, %cst_2 : tensor<1x256xi32, #blocked> loc(#loc13)
    %32 = arith.muli %11, %cst_1 : tensor<1x256xi32, #blocked1> loc(#loc14)
    %33 = tt.broadcast %25 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc15)
    %34 = tt.broadcast %32 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc15)
    %35 = arith.addi %33, %34 : tensor<16x256xi32, #blocked1> loc(#loc15)
    %36 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %37 = tt.addptr %36, %35 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc16)
    %38 = tt.broadcast %27 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc17)
    %39 = tt.broadcast %28 : tensor<16x1xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc17)
    %40 = tt.broadcast %14 : tensor<1x256xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc17)
    %41 = tt.broadcast %16 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc17)
    %42 = arith.andi %38, %40 : tensor<16x256xi1, #blocked1> loc(#loc17)
    %43 = arith.andi %39, %41 : tensor<16x256xi1, #blocked> loc(#loc17)
    %44 = tt.load %37, %42 evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %45 = triton_gpu.convert_layout %44 : tensor<16x256xf32, #blocked1> -> tensor<16x256xf32, #blocked2> loc(#loc18)
    %46 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked2> loc(#loc19)
    %47 = tt.addptr %46, %29 : tensor<1x256x!tt.ptr<f32>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc19)
    %48 = tt.load %47, %15 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked2> loc(#loc20)
    %49 = triton_gpu.convert_layout %48 : tensor<1x256xf32, #blocked2> -> tensor<1x256xf32, #blocked1> loc(#loc21)
    %50 = tt.broadcast %49 : tensor<1x256xf32, #blocked1> -> tensor<16x256xf32, #blocked1> loc(#loc22)
    %51 = tt.broadcast %48 : tensor<1x256xf32, #blocked2> -> tensor<16x256xf32, #blocked2> loc(#loc22)
    %52 = arith.addf %44, %50 : tensor<16x256xf32, #blocked1> loc(#loc22)
    %53 = arith.addf %45, %51 : tensor<16x256xf32, #blocked2> loc(#loc22)
    %54 = arith.cmpf ogt, %52, %cst_10 : tensor<16x256xf32, #blocked1> loc(#loc23)
    %55 = arith.cmpf ogt, %53, %cst_9 : tensor<16x256xf32, #blocked2> loc(#loc23)
    %56 = arith.mulf %52, %cst_11 : tensor<16x256xf32, #blocked1> loc(#loc24)
    %57 = arith.select %54, %52, %56 : tensor<16x256xi1, #blocked1>, tensor<16x256xf32, #blocked1> loc(#loc21)
    %58 = arith.muli %26, %cst : tensor<16x1xi32, #blocked> loc(#loc25)
    %59 = tt.broadcast %31 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc26)
    %60 = tt.broadcast %58 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc26)
    %61 = arith.addi %59, %60 : tensor<16x256xi32, #blocked> loc(#loc26)
    %62 = arith.muli %30, %cst_0 : tensor<1x256xi32, #blocked> loc(#loc27)
    %63 = tt.broadcast %62 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc28)
    %64 = arith.addi %61, %63 : tensor<16x256xi32, #blocked> loc(#loc28)
    %65 = tt.splat %arg2 : !tt.ptr<i1> -> tensor<16x256x!tt.ptr<i1>, #blocked> loc(#loc29)
    %66 = tt.addptr %65, %64 : tensor<16x256x!tt.ptr<i1>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc29)
    %67 = tt.bitcast %66 : tensor<16x256x!tt.ptr<i1>, #blocked> -> tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc30)
    %68 = triton_gpu.convert_layout %55 : tensor<16x256xi1, #blocked2> -> tensor<16x256xi1, #blocked> loc(#loc30)
    %69 = arith.extui %68 : tensor<16x256xi1, #blocked> to tensor<16x256xi8, #blocked> loc(#loc30)
    tt.store %67, %69, %43 : tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc30)
    gpu.barrier loc(#loc31)
    tt.store %37, %57, %42 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":22:28)
#loc3 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":22:33)
#loc4 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":23:44)
#loc5 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":23:23)
#loc6 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":24:21)
#loc7 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":25:28)
#loc8 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":25:33)
#loc9 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":26:44)
#loc10 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":26:23)
#loc11 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":27:21)
#loc12 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":30:19)
#loc13 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":31:19)
#loc14 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":32:42)
#loc15 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":32:39)
#loc16 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":32:34)
#loc17 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":32:55)
#loc18 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":32:47)
#loc19 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":33:30)
#loc20 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":33:35)
#loc21 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":39:32)
#loc22 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":34:18)
#loc23 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":36:18)
#loc24 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":38:18)
#loc25 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:32)
#loc26 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:30)
#loc27 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:40)
#loc28 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:37)
#loc29 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:25)
#loc30 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":40:51)
#loc31 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":41:4)
#loc32 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":42:47)
#loc33 = loc("inductor_cache/7c/c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py":42:4)
