; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !11
  %9 = shl i32 %8, 10, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = shl i32 %10, 2, !dbg !13
  %12 = and i32 %11, 508, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 513, !dbg !13
  %17 = or disjoint i32 %12, 514, !dbg !13
  %18 = or disjoint i32 %12, 515, !dbg !13
  %19 = and i32 %10, 127, !dbg !13
  %20 = or disjoint i32 %19, 128, !dbg !13
  %21 = or disjoint i32 %19, 256, !dbg !13
  %22 = or disjoint i32 %19, 384, !dbg !13
  %23 = or disjoint i32 %9, %12, !dbg !14
  %24 = or disjoint i32 %9, %13, !dbg !14
  %25 = or disjoint i32 %9, %14, !dbg !14
  %26 = or disjoint i32 %9, %15, !dbg !14
  %27 = or disjoint i32 %23, 512, !dbg !14
  %28 = or disjoint i32 %9, %16, !dbg !14
  %29 = or disjoint i32 %9, %17, !dbg !14
  %30 = or disjoint i32 %9, %18, !dbg !14
  %31 = or disjoint i32 %9, %19, !dbg !14
  %32 = or disjoint i32 %9, %20, !dbg !14
  %33 = or disjoint i32 %9, %21, !dbg !14
  %34 = or disjoint i32 %9, %22, !dbg !14
  %35 = or disjoint i32 %31, 512, !dbg !14
  %36 = or disjoint i32 %31, 640, !dbg !14
  %37 = or disjoint i32 %31, 768, !dbg !14
  %38 = or disjoint i32 %31, 896, !dbg !14
  %39 = icmp slt i32 %23, 1024, !dbg !15
  %40 = icmp slt i32 %27, 1024, !dbg !15
  %41 = icmp slt i32 %31, 1024, !dbg !15
  %42 = icmp slt i32 %32, 1024, !dbg !15
  %43 = icmp slt i32 %33, 1024, !dbg !15
  %44 = icmp slt i32 %34, 1024, !dbg !15
  %45 = icmp slt i32 %35, 1024, !dbg !15
  %46 = icmp slt i32 %36, 1024, !dbg !15
  %47 = icmp slt i32 %37, 1024, !dbg !15
  %48 = icmp slt i32 %38, 1024, !dbg !15
  %.frozen = freeze i32 %7, !dbg !16
  %49 = sdiv i32 %.frozen, 768, !dbg !16
  %50 = mul i32 %49, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %50, !dbg !17
  %51 = mul i32 %23, 768, !dbg !18
  %52 = mul i32 %24, 768, !dbg !18
  %53 = mul i32 %25, 768, !dbg !18
  %54 = mul i32 %26, 768, !dbg !18
  %55 = mul i32 %27, 768, !dbg !18
  %56 = mul i32 %28, 768, !dbg !18
  %57 = mul i32 %29, 768, !dbg !18
  %58 = mul i32 %30, 768, !dbg !18
  %59 = mul i32 %31, 768, !dbg !18
  %60 = mul i32 %32, 768, !dbg !18
  %61 = mul i32 %33, 768, !dbg !18
  %62 = mul i32 %34, 768, !dbg !18
  %63 = mul i32 %35, 768, !dbg !18
  %64 = mul i32 %36, 768, !dbg !18
  %65 = mul i32 %37, 768, !dbg !18
  %66 = mul i32 %38, 768, !dbg !18
  %67 = mul i32 %49, 786432, !dbg !19
  %68 = add i32 %67, %.decomposed, !dbg !20
  %69 = add i32 %68, %51, !dbg !21
  %70 = add i32 %68, %52, !dbg !21
  %71 = add i32 %68, %53, !dbg !21
  %72 = add i32 %68, %54, !dbg !21
  %73 = add i32 %68, %55, !dbg !21
  %74 = add i32 %68, %56, !dbg !21
  %75 = add i32 %68, %57, !dbg !21
  %76 = add i32 %68, %58, !dbg !21
  %77 = add i32 %68, %59, !dbg !21
  %78 = add i32 %68, %60, !dbg !21
  %79 = add i32 %68, %61, !dbg !21
  %80 = add i32 %68, %62, !dbg !21
  %81 = add i32 %68, %63, !dbg !21
  %82 = add i32 %68, %64, !dbg !21
  %83 = add i32 %68, %65, !dbg !21
  %84 = add i32 %68, %66, !dbg !21
  %85 = sext i32 %69 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %70 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %71 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %72 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %73 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %74 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = sext i32 %75 to i64, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !22
  %99 = sext i32 %76 to i64, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !22
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %39) #2, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %39) #2, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %39) #2, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %39) #2, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %40) #2, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %40) #2, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %40) #2, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %40) #2, !dbg !23
  %109 = sext i32 %.decomposed to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !25
  %115 = insertelement <8 x i32> poison, i32 %108, i64 0, !dbg !23
  %116 = insertelement <8 x i32> %115, i32 %107, i64 1, !dbg !23
  %117 = insertelement <8 x i32> %116, i32 %106, i64 2, !dbg !23
  %118 = insertelement <8 x i32> %117, i32 %105, i64 3, !dbg !23
  %119 = insertelement <8 x i32> %118, i32 %104, i64 4, !dbg !23
  %120 = insertelement <8 x i32> %119, i32 %103, i64 5, !dbg !23
  %121 = insertelement <8 x i32> %120, i32 %102, i64 6, !dbg !23
  %122 = insertelement <8 x i32> %121, i32 %101, i64 7, !dbg !23
  %123 = bitcast <8 x i32> %122 to <8 x float>, !dbg !23
  %124 = insertelement <8 x i32> poison, i32 %114, i64 0, !dbg !26
  %125 = bitcast <8 x i32> %124 to <8 x float>, !dbg !26
  %126 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !26
  %127 = fadd <8 x float> %126, %123, !dbg !26
  %128 = fcmp olt <8 x float> %127, zeroinitializer, !dbg !27
  %129 = extractelement <8 x i1> %128, i64 7, !dbg !31
  %130 = extractelement <8 x float> %127, i64 7, !dbg !32
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !31
  %132 = extractelement <8 x i1> %128, i64 6, !dbg !31
  %133 = extractelement <8 x float> %127, i64 6, !dbg !32
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !31
  %135 = extractelement <8 x i1> %128, i64 5, !dbg !31
  %136 = extractelement <8 x float> %127, i64 5, !dbg !32
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !31
  %138 = extractelement <8 x i1> %128, i64 4, !dbg !31
  %139 = extractelement <8 x float> %127, i64 4, !dbg !32
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !31
  %141 = extractelement <8 x i1> %128, i64 3, !dbg !31
  %142 = extractelement <8 x float> %127, i64 3, !dbg !32
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !31
  %144 = extractelement <8 x i1> %128, i64 2, !dbg !31
  %145 = extractelement <8 x float> %127, i64 2, !dbg !32
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !31
  %147 = extractelement <8 x i1> %128, i64 1, !dbg !31
  %148 = extractelement <8 x float> %127, i64 1, !dbg !32
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !31
  %150 = extractelement <8 x i1> %128, i64 0, !dbg !31
  %151 = extractelement <8 x float> %127, i64 0, !dbg !32
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !31
  %153 = shl i32 %7, 10, !dbg !33
  %154 = add i32 %23, %153, !dbg !34
  %155 = add i32 %153, %27, !dbg !34
  %156 = sext i32 %154 to i64, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !35
  %158 = sext i32 %155 to i64, !dbg !35
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !35
  %160 = bitcast float %130 to i32, !dbg !32
  %161 = bitcast float %133 to i32, !dbg !32
  %162 = bitcast float %136 to i32, !dbg !32
  %163 = bitcast float %139 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %161, i32 %162, i32 %163, ptr addrspace(1) %157, i1 %39) #2, !dbg !32
  %164 = bitcast float %142 to i32, !dbg !32
  %165 = bitcast float %145 to i32, !dbg !32
  %166 = bitcast float %148 to i32, !dbg !32
  %167 = bitcast float %151 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %165, i32 %166, i32 %167, ptr addrspace(1) %159, i1 %40) #2, !dbg !32
  %168 = sext i32 %77 to i64, !dbg !36
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !36
  %170 = sext i32 %78 to i64, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !36
  %172 = sext i32 %79 to i64, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !36
  %174 = sext i32 %80 to i64, !dbg !36
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !36
  %176 = sext i32 %81 to i64, !dbg !36
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !36
  %178 = sext i32 %82 to i64, !dbg !36
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %178, !dbg !36
  %180 = sext i32 %83 to i64, !dbg !36
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !36
  %182 = sext i32 %84 to i64, !dbg !36
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %182, !dbg !36
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %185 = bitcast float %131 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !37
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %187 = bitcast float %134 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !37
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %189 = bitcast float %137 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !37
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %191 = bitcast float %140 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !37
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !37
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !37
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !37
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !37
  %197 = load i32, ptr addrspace(3) %196, align 4, !dbg !37
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !37
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %200 = bitcast float %143 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %200, i1 true) #2, !dbg !37
  %201 = bitcast float %146 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %201, i1 true) #2, !dbg !37
  %202 = bitcast float %149 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %202, i1 true) #2, !dbg !37
  %203 = bitcast float %152 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %203, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %204 = load i32, ptr addrspace(3) %192, align 4, !dbg !37
  %205 = load i32, ptr addrspace(3) %194, align 4, !dbg !37
  %206 = load i32, ptr addrspace(3) %196, align 4, !dbg !37
  %207 = load i32, ptr addrspace(3) %198, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %169, i1 %41) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %171, i1 %42) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %173, i1 %43) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %175, i1 %44) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %177, i1 %45) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %179, i1 %46) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %181, i1 %47) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %183, i1 %48) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7uljf2ouk4vwtthh4ujzeuhtwhg44ge5nxtouovvjv2mud53tvl.py", directory: "inductor_cache/7u")
!4 = !{ptr @triton_poi_fused_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_6", linkageName: "triton_poi_fused_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 46, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 57, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
