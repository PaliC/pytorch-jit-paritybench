; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 8, !dbg !15
  %17 = lshr i32 %11, 2, !dbg !16
  %18 = and i32 %17, 63, !dbg !16
  %19 = or disjoint i32 %18, 64, !dbg !16
  %20 = or disjoint i32 %18, 128, !dbg !16
  %21 = or disjoint i32 %18, 192, !dbg !16
  %22 = or disjoint i32 %16, %18, !dbg !17
  %23 = or disjoint i32 %16, %19, !dbg !17
  %24 = or disjoint i32 %16, %20, !dbg !17
  %25 = or disjoint i32 %16, %21, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %26 = sdiv i32 %.frozen, 2048, !dbg !18
  %27 = mul i32 %26, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = shl i32 %22, 11, !dbg !20
  %29 = shl i32 %23, 11, !dbg !20
  %30 = shl i32 %24, 11, !dbg !20
  %31 = shl i32 %25, 11, !dbg !20
  %32 = shl i32 %26, 23, !dbg !21
  %33 = add i32 %32, %.decomposed, !dbg !22
  %34 = add i32 %33, %28, !dbg !23
  %35 = add i32 %33, %29, !dbg !23
  %36 = add i32 %33, %30, !dbg !23
  %37 = add i32 %33, %31, !dbg !23
  %38 = sext i32 %34 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %35 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %36 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %37 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !25
  %50 = sext i32 %.decomposed to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !32
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !33
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !34
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %71, 0, !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %72, 0, !dbg !35
  br i1 %.not.i, label %78, label %73, !dbg !35

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i3 = icmp eq i32 %83, 0, !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i6 = icmp eq i32 %84, 0, !dbg !35
  br i1 %.not.i3, label %90, label %85, !dbg !35

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

__nv_sqrtf.exit7:                                 ; preds = %86, %88, %91, %93
  %.0.i5 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i8 = icmp eq i32 %95, 0, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i11 = icmp eq i32 %96, 0, !dbg !35
  br i1 %.not.i8, label %102, label %97, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

102:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %98, %100, %103, %105
  %.0.i10 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %107, 0, !dbg !35
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i16 = icmp eq i32 %108, 0, !dbg !35
  br i1 %.not.i13, label %114, label %109, !dbg !35

109:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %112, label %110, !dbg !35

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

114:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %117, label %115, !dbg !35

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %110, %112, %115, %117
  %.0.i15 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = fsub float %120, %122, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fsub float %125, %127, !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %130 = bitcast i32 %129 to float, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = fsub float %130, %132, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = fsub float %135, %137, !dbg !36
  %139 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %140 = bitcast i32 %139 to float, !dbg !25
  %141 = fsub float %140, %122, !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %143 = bitcast i32 %142 to float, !dbg !25
  %144 = fsub float %143, %127, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %146 = bitcast i32 %145 to float, !dbg !25
  %147 = fsub float %146, %132, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = fsub float %149, %137, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %152 = bitcast i32 %151 to float, !dbg !25
  %153 = fsub float %152, %122, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %155 = bitcast i32 %154 to float, !dbg !25
  %156 = fsub float %155, %127, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %158 = bitcast i32 %157 to float, !dbg !25
  %159 = fsub float %158, %132, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %161 = bitcast i32 %160 to float, !dbg !25
  %162 = fsub float %161, %137, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %164 = bitcast i32 %163 to float, !dbg !25
  %165 = fsub float %164, %122, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %167 = bitcast i32 %166 to float, !dbg !25
  %168 = fsub float %167, %127, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %170 = bitcast i32 %169 to float, !dbg !25
  %171 = fsub float %170, %132, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %173 = bitcast i32 %172 to float, !dbg !25
  %174 = fsub float %173, %137, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !33
  %176 = bitcast i32 %175 to float, !dbg !33
  %177 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !33
  %178 = bitcast i32 %177 to float, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !33
  %180 = bitcast i32 %179 to float, !dbg !33
  %181 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !33
  %182 = bitcast i32 %181 to float, !dbg !33
  %183 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %188 = bitcast i32 %187 to float, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = and i32 %12, 252, !dbg !16
  %192 = or disjoint i32 %16, %191, !dbg !17
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %193 = and i32 %.lobit1, 3, !dbg !12
  %194 = or disjoint i32 %193, 12, !dbg !12
  %195 = or disjoint i32 %10, %194, !dbg !13
  %196 = or disjoint i32 %193, 8, !dbg !12
  %197 = or disjoint i32 %10, %196, !dbg !13
  %198 = or disjoint i32 %193, 4, !dbg !12
  %199 = or disjoint i32 %10, %198, !dbg !13
  %200 = or disjoint i32 %10, %193, !dbg !13
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !37
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %205 = fmul float %174, %201, !dbg !38
  %206 = fmul float %171, %202, !dbg !38
  %207 = fmul float %168, %203, !dbg !38
  %208 = fmul float %165, %204, !dbg !38
  %209 = fmul float %162, %201, !dbg !38
  %210 = fmul float %159, %202, !dbg !38
  %211 = fmul float %156, %203, !dbg !38
  %212 = fmul float %153, %204, !dbg !38
  %213 = fmul float %150, %201, !dbg !38
  %214 = fmul float %147, %202, !dbg !38
  %215 = fmul float %144, %203, !dbg !38
  %216 = fmul float %141, %204, !dbg !38
  %217 = fmul float %138, %201, !dbg !38
  %218 = fmul float %133, %202, !dbg !38
  %219 = fmul float %128, %203, !dbg !38
  %220 = fmul float %123, %204, !dbg !38
  %221 = fmul float %205, %190, !dbg !39
  %222 = fmul float %206, %188, !dbg !39
  %223 = fmul float %207, %186, !dbg !39
  %224 = fmul float %208, %184, !dbg !39
  %225 = fmul float %209, %190, !dbg !39
  %226 = fmul float %210, %188, !dbg !39
  %227 = fmul float %211, %186, !dbg !39
  %228 = fmul float %212, %184, !dbg !39
  %229 = fmul float %213, %190, !dbg !39
  %230 = fmul float %214, %188, !dbg !39
  %231 = fmul float %215, %186, !dbg !39
  %232 = fmul float %216, %184, !dbg !39
  %233 = fmul float %217, %190, !dbg !39
  %234 = fmul float %218, %188, !dbg !39
  %235 = fmul float %219, %186, !dbg !39
  %236 = fmul float %220, %184, !dbg !39
  %237 = fadd float %221, %182, !dbg !40
  %238 = fadd float %222, %180, !dbg !40
  %239 = fadd float %223, %178, !dbg !40
  %240 = fadd float %224, %176, !dbg !40
  %241 = fadd float %225, %182, !dbg !40
  %242 = fadd float %226, %180, !dbg !40
  %243 = fadd float %227, %178, !dbg !40
  %244 = fadd float %228, %176, !dbg !40
  %245 = fadd float %229, %182, !dbg !40
  %246 = fadd float %230, %180, !dbg !40
  %247 = fadd float %231, %178, !dbg !40
  %248 = fadd float %232, %176, !dbg !40
  %249 = fadd float %233, %182, !dbg !40
  %250 = fadd float %234, %180, !dbg !40
  %251 = fadd float %235, %178, !dbg !40
  %252 = fadd float %236, %176, !dbg !40
  %253 = shl i32 %200, 12, !dbg !41
  %254 = shl i32 %199, 12, !dbg !41
  %255 = shl i32 %197, 12, !dbg !41
  %256 = shl i32 %195, 12, !dbg !41
  %257 = add i32 %192, %253, !dbg !42
  %258 = add i32 %192, %254, !dbg !42
  %259 = add i32 %192, %255, !dbg !42
  %260 = add i32 %192, %256, !dbg !42
  %261 = sext i32 %257 to i64, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !43
  %263 = sext i32 %258 to i64, !dbg !43
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !43
  %265 = sext i32 %259 to i64, !dbg !43
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !43
  %267 = sext i32 %260 to i64, !dbg !43
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !43
  %269 = shl i32 %11, 10, !dbg !44
  %270 = and i32 %269, 3072, !dbg !44
  %271 = or disjoint i32 %270, %18, !dbg !44
  %272 = and i32 %12, 1020, !dbg !44
  %273 = lshr exact i32 %270, 6, !dbg !44
  %274 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %273, !dbg !44
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !44
  %276 = bitcast float %237 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !44
  %277 = or disjoint i32 %271, 256, !dbg !44
  %278 = lshr i32 %277, 8, !dbg !44
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !44
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %277, !dbg !44
  %281 = bitcast float %238 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !44
  %282 = or disjoint i32 %271, 512, !dbg !44
  %283 = lshr i32 %282, 8, !dbg !44
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !44
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %282, !dbg !44
  %286 = bitcast float %239 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !44
  %287 = or disjoint i32 %271, 768, !dbg !44
  %288 = lshr i32 %287, 8, !dbg !44
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !44
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %287, !dbg !44
  %291 = bitcast float %240 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !44
  %292 = or disjoint i32 %271, 64, !dbg !44
  %293 = getelementptr float, ptr addrspace(3) %274, i32 %292, !dbg !44
  %294 = bitcast float %241 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !44
  %295 = or disjoint i32 %271, 320, !dbg !44
  %296 = lshr i32 %295, 8, !dbg !44
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !44
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %295, !dbg !44
  %299 = bitcast float %242 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !44
  %300 = or disjoint i32 %271, 576, !dbg !44
  %301 = lshr i32 %300, 8, !dbg !44
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !44
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !44
  %304 = bitcast float %243 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !44
  %305 = or disjoint i32 %271, 832, !dbg !44
  %306 = lshr i32 %305, 8, !dbg !44
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !44
  %308 = getelementptr float, ptr addrspace(3) %307, i32 %305, !dbg !44
  %309 = bitcast float %244 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !44
  %310 = or disjoint i32 %271, 128, !dbg !44
  %311 = getelementptr float, ptr addrspace(3) %274, i32 %310, !dbg !44
  %312 = bitcast float %245 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !44
  %313 = or disjoint i32 %271, 384, !dbg !44
  %314 = lshr i32 %313, 8, !dbg !44
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !44
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %313, !dbg !44
  %317 = bitcast float %246 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !44
  %318 = or disjoint i32 %271, 640, !dbg !44
  %319 = lshr i32 %318, 8, !dbg !44
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !44
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !44
  %322 = bitcast float %247 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !44
  %323 = or disjoint i32 %271, 896, !dbg !44
  %324 = lshr i32 %323, 8, !dbg !44
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !44
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %323, !dbg !44
  %327 = bitcast float %248 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !44
  %328 = or disjoint i32 %271, 192, !dbg !44
  %329 = getelementptr float, ptr addrspace(3) %274, i32 %328, !dbg !44
  %330 = bitcast float %249 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !44
  %331 = or disjoint i32 %271, 448, !dbg !44
  %332 = lshr i32 %331, 8, !dbg !44
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !44
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !44
  %335 = bitcast float %250 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !44
  %336 = or disjoint i32 %271, 704, !dbg !44
  %337 = lshr i32 %336, 8, !dbg !44
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !44
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !44
  %340 = bitcast float %251 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !44
  %341 = or disjoint i32 %271, 960, !dbg !44
  %342 = lshr i32 %341, 8, !dbg !44
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !44
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !44
  %345 = bitcast float %252 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %346 = lshr i32 %272, 8, !dbg !44
  %347 = or disjoint i32 %346, %272, !dbg !44
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !44
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !44
  %350 = or disjoint i32 %272, 1, !dbg !44
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !44
  %352 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %350, !dbg !44
  %353 = load i32, ptr addrspace(3) %352, align 4, !dbg !44
  %354 = or disjoint i32 %272, 2, !dbg !44
  %355 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %354, !dbg !44
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !44
  %357 = or disjoint i32 %272, 3, !dbg !44
  %358 = getelementptr inbounds float, ptr addrspace(3) %351, i32 %357, !dbg !44
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !44
  %360 = or disjoint i32 %272, 1024, !dbg !44
  %361 = lshr i32 %360, 8, !dbg !44
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !44
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !44
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !44
  %365 = or disjoint i32 %272, 1025, !dbg !44
  %366 = lshr i32 %365, 8, !dbg !44
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !44
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !44
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !44
  %370 = or disjoint i32 %272, 1026, !dbg !44
  %371 = lshr i32 %370, 8, !dbg !44
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !44
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !44
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !44
  %375 = or disjoint i32 %272, 1027, !dbg !44
  %376 = lshr i32 %375, 8, !dbg !44
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !44
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !44
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !44
  %380 = or disjoint i32 %272, 2048, !dbg !44
  %381 = lshr i32 %380, 8, !dbg !44
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !44
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %380, !dbg !44
  %384 = load i32, ptr addrspace(3) %383, align 4, !dbg !44
  %385 = or disjoint i32 %272, 2049, !dbg !44
  %386 = lshr i32 %385, 8, !dbg !44
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !44
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %385, !dbg !44
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !44
  %390 = or disjoint i32 %272, 2050, !dbg !44
  %391 = lshr i32 %390, 8, !dbg !44
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !44
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %390, !dbg !44
  %394 = load i32, ptr addrspace(3) %393, align 4, !dbg !44
  %395 = or disjoint i32 %272, 2051, !dbg !44
  %396 = lshr i32 %395, 8, !dbg !44
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !44
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !44
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !44
  %400 = or disjoint i32 %272, 3072, !dbg !44
  %401 = lshr i32 %400, 8, !dbg !44
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !44
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %400, !dbg !44
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !44
  %405 = or disjoint i32 %272, 3073, !dbg !44
  %406 = lshr i32 %405, 8, !dbg !44
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !44
  %408 = getelementptr inbounds float, ptr addrspace(3) %407, i32 %405, !dbg !44
  %409 = load i32, ptr addrspace(3) %408, align 4, !dbg !44
  %410 = or disjoint i32 %272, 3074, !dbg !44
  %411 = lshr i32 %410, 8, !dbg !44
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %411, !dbg !44
  %413 = getelementptr inbounds float, ptr addrspace(3) %412, i32 %410, !dbg !44
  %414 = load i32, ptr addrspace(3) %413, align 4, !dbg !44
  %415 = or disjoint i32 %272, 3075, !dbg !44
  %416 = lshr i32 %415, 8, !dbg !44
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %416, !dbg !44
  %418 = getelementptr inbounds float, ptr addrspace(3) %417, i32 %415, !dbg !44
  %419 = load i32, ptr addrspace(3) %418, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %353, i32 %356, i32 %359, ptr addrspace(1) %262, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %369, i32 %374, i32 %379, ptr addrspace(1) %264, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %389, i32 %394, i32 %399, ptr addrspace(1) %266, i1 true) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %409, i32 %414, i32 %419, ptr addrspace(1) %268, i1 true) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cel75zlhimsif776biquuf3vyj4cb6tbzv372mew66xel7upupkh.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 47, scope: !7)
!45 = !DILocation(line: 48, column: 4, scope: !7)
