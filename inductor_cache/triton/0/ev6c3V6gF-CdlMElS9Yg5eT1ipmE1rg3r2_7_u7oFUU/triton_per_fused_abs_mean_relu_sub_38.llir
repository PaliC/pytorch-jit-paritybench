; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 64, !dbg !13
  %13 = mul i32 %12, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nsw i32 %.decomposed, 3, !dbg !15
  %15 = shl i32 %8, 9, !dbg !16
  %16 = and i32 %15, 7680, !dbg !16
  %17 = add nsw i32 %14, %16, !dbg !17
  %18 = shl i32 %12, 13, !dbg !18
  %19 = add i32 %17, %18, !dbg !19
  %20 = lshr i32 %11, 4, !dbg !20
  %21 = or disjoint i32 %19, %20, !dbg !21
  %22 = or disjoint i32 %21, 4, !dbg !21
  %23 = sext i32 %21 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = sext i32 %22 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %7, i32 0, i1 %7) #4, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %7, i32 0, i1 %7) #4, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %7, i32 0, i1 %7) #4, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %7, i32 0, i1 %7) #4, !dbg !25
  %33 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !23
  %34 = insertelement <2 x i32> %33, i32 %28, i64 1, !dbg !23
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !23
  %36 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !25
  %37 = insertelement <2 x i32> %36, i32 %32, i64 1, !dbg !25
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !25
  %39 = fcmp olt <2 x float> %35, zeroinitializer, !dbg !26
  %40 = select <2 x i1> %39, <2 x float> zeroinitializer, <2 x float> %35, !dbg !30
  %41 = fcmp olt <2 x float> %38, zeroinitializer, !dbg !31
  %42 = select <2 x i1> %41, <2 x float> zeroinitializer, <2 x float> %38, !dbg !33
  %43 = fsub <2 x float> %40, %42, !dbg !34
  %44 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %43), !dbg !35
  %shift = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %45 = fadd <2 x float> %44, %shift, !dbg !36
  %46 = extractelement <2 x float> %45, i64 0, !dbg !36
  %47 = select i1 %7, float %46, float 0.000000e+00, !dbg !36
  %48 = bitcast float %47 to i32, !dbg !41
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !41
  %50 = bitcast i32 %49 to float, !dbg !41
  %51 = fadd float %47, %50, !dbg !36
  %52 = bitcast float %51 to i32, !dbg !41
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !41
  %54 = bitcast i32 %53 to float, !dbg !41
  %55 = fadd float %51, %54, !dbg !36
  %56 = bitcast float %55 to i32, !dbg !41
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !41
  %58 = bitcast i32 %57 to float, !dbg !41
  %59 = fadd float %55, %58, !dbg !36
  %60 = bitcast float %59 to i32, !dbg !41
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !41
  %62 = bitcast i32 %61 to float, !dbg !41
  %63 = fadd float %59, %62, !dbg !36
  %64 = bitcast float %63 to i32, !dbg !41
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !41
  %66 = bitcast i32 %65 to float, !dbg !41
  %67 = fadd float %63, %66, !dbg !36
  %68 = icmp eq i32 %9, 0, !dbg !41
  %69 = and i32 %10, 1, !dbg !41
  %70 = zext nneg i32 %69 to i64, !dbg !41
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !41
  %72 = bitcast float %67 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %68) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %73 = icmp slt i32 %8, 2, !dbg !41
  %74 = sext i32 %8 to i64, !dbg !41
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !41
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %73) #4, !dbg !41
  %77 = bitcast i32 %76 to float, !dbg !41
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = fadd float %77, %79, !dbg !36
  %81 = and i32 %8, 1, !dbg !41
  %82 = icmp eq i32 %81, 0, !dbg !41
  %83 = and i1 %73, %82, !dbg !41
  %84 = bitcast float %80 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %84, i1 %83) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %85 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %86 = sext i32 %6 to i64, !dbg !42
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !42
  %88 = icmp eq i32 %11, 0, !dbg !43
  %89 = and i1 %88, %7, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %87, i1 %89) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7xpujlycdzvp65rbz364nnthbdsivfwrzey7e5662czey4e47x7.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_relu_sub_38", linkageName: "triton_per_fused_abs_mean_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 32, scope: !7)
!16 = !DILocation(line: 33, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 37, scope: !7)
!18 = !DILocation(line: 33, column: 60, scope: !7)
!19 = !DILocation(line: 33, column: 55, scope: !7)
!20 = !DILocation(line: 33, column: 103, scope: !7)
!21 = !DILocation(line: 33, column: 97, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 109, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 109, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 36, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !32)
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !32)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 23, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 43, column: 37, scope: !7)
!44 = !DILocation(line: 43, column: 4, scope: !7)
