; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = sdiv i32 %17, 576, !dbg !14
  %20 = sdiv i32 %18, 576, !dbg !14
  %21 = srem i32 %19, 512, !dbg !15
  %22 = srem i32 %20, 512, !dbg !15
  %23 = sext i32 %17 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %18 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %29 = sext i32 %21 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = sext i32 %22 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !33
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !33
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %121 = fadd float %44, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %123 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %124 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %125 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %54, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %56, 0x3EE4F8B580000000, !dbg !34
  %128 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i, label %136, label %131, !dbg !35

131:                                              ; preds = %11
  br i1 %.not1.i, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

136:                                              ; preds = %11
  br i1 %.not1.i, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i1, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %144, %146, %149, %151
  %.0.i3 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i6, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %156, %158, %161, %163
  %.0.i8 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i11, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %168, %170, %173, %175
  %.0.i13 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %178, 0, !dbg !35
  br i1 %.not.i16, label %184, label %179, !dbg !35

179:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %182, label %180, !dbg !35

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %180, %182, %185, %187
  %.0.i18 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %190, 0, !dbg !35
  br i1 %.not.i21, label %196, label %191, !dbg !35

191:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %194, label %192, !dbg !35

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

196:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %199, label %197, !dbg !35

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %192, %194, %197, %199
  %.0.i23 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %201, 0, !dbg !35
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %202, 0, !dbg !35
  br i1 %.not.i26, label %208, label %203, !dbg !35

203:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %206, label %204, !dbg !35

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

208:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %211, label %209, !dbg !35

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %204, %206, %209, %211
  %.0.i28 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !35
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %213, 0, !dbg !35
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %214, 0, !dbg !35
  br i1 %.not.i31, label %220, label %215, !dbg !35

215:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %218, label %216, !dbg !35

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

220:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %223, label %221, !dbg !35

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %216, %218, %221, %223
  %.0.i33 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !35
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %233 = fadd float %96, 0x3EE4F8B580000000, !dbg !37
  %234 = fadd float %98, 0x3EE4F8B580000000, !dbg !37
  %235 = fadd float %100, 0x3EE4F8B580000000, !dbg !37
  %236 = fadd float %102, 0x3EE4F8B580000000, !dbg !37
  %237 = fadd float %104, 0x3EE4F8B580000000, !dbg !37
  %238 = fadd float %106, 0x3EE4F8B580000000, !dbg !37
  %239 = fadd float %108, 0x3EE4F8B580000000, !dbg !37
  %240 = fadd float %110, 0x3EE4F8B580000000, !dbg !37
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i36 = icmp eq i32 %241, 0, !dbg !38
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i39 = icmp eq i32 %242, 0, !dbg !38
  br i1 %.not.i36, label %248, label %243, !dbg !38

243:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %246, label %244, !dbg !38

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !38
  br label %__nv_sqrtf.exit40, !dbg !38

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !38
  br label %__nv_sqrtf.exit40, !dbg !38

248:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %251, label %249, !dbg !38

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !38
  br label %__nv_sqrtf.exit40, !dbg !38

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !38
  br label %__nv_sqrtf.exit40, !dbg !38

__nv_sqrtf.exit40:                                ; preds = %244, %246, %249, %251
  %.0.i38 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !38
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i41 = icmp eq i32 %253, 0, !dbg !38
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i44 = icmp eq i32 %254, 0, !dbg !38
  br i1 %.not.i41, label %260, label %255, !dbg !38

255:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %258, label %256, !dbg !38

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #3, !dbg !38
  br label %__nv_sqrtf.exit45, !dbg !38

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #3, !dbg !38
  br label %__nv_sqrtf.exit45, !dbg !38

260:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %263, label %261, !dbg !38

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #3, !dbg !38
  br label %__nv_sqrtf.exit45, !dbg !38

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #3, !dbg !38
  br label %__nv_sqrtf.exit45, !dbg !38

__nv_sqrtf.exit45:                                ; preds = %256, %258, %261, %263
  %.0.i43 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !38
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i46 = icmp eq i32 %265, 0, !dbg !38
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i49 = icmp eq i32 %266, 0, !dbg !38
  br i1 %.not.i46, label %272, label %267, !dbg !38

267:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %270, label %268, !dbg !38

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

272:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %275, label %273, !dbg !38

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #3, !dbg !38
  br label %__nv_sqrtf.exit50, !dbg !38

__nv_sqrtf.exit50:                                ; preds = %268, %270, %273, %275
  %.0.i48 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !38
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i51 = icmp eq i32 %277, 0, !dbg !38
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i54 = icmp eq i32 %278, 0, !dbg !38
  br i1 %.not.i51, label %284, label %279, !dbg !38

279:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %282, label %280, !dbg !38

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #3, !dbg !38
  br label %__nv_sqrtf.exit55, !dbg !38

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #3, !dbg !38
  br label %__nv_sqrtf.exit55, !dbg !38

284:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %287, label %285, !dbg !38

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #3, !dbg !38
  br label %__nv_sqrtf.exit55, !dbg !38

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #3, !dbg !38
  br label %__nv_sqrtf.exit55, !dbg !38

__nv_sqrtf.exit55:                                ; preds = %280, %282, %285, %287
  %.0.i53 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !38
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i56 = icmp eq i32 %289, 0, !dbg !38
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i59 = icmp eq i32 %290, 0, !dbg !38
  br i1 %.not.i56, label %296, label %291, !dbg !38

291:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %294, label %292, !dbg !38

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %237) #3, !dbg !38
  br label %__nv_sqrtf.exit60, !dbg !38

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %237) #3, !dbg !38
  br label %__nv_sqrtf.exit60, !dbg !38

296:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %299, label %297, !dbg !38

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %237) #3, !dbg !38
  br label %__nv_sqrtf.exit60, !dbg !38

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %237) #3, !dbg !38
  br label %__nv_sqrtf.exit60, !dbg !38

__nv_sqrtf.exit60:                                ; preds = %292, %294, %297, %299
  %.0.i58 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !38
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i61 = icmp eq i32 %301, 0, !dbg !38
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i64 = icmp eq i32 %302, 0, !dbg !38
  br i1 %.not.i61, label %308, label %303, !dbg !38

303:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %306, label %304, !dbg !38

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %238) #3, !dbg !38
  br label %__nv_sqrtf.exit65, !dbg !38

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %238) #3, !dbg !38
  br label %__nv_sqrtf.exit65, !dbg !38

308:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %311, label %309, !dbg !38

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %238) #3, !dbg !38
  br label %__nv_sqrtf.exit65, !dbg !38

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %238) #3, !dbg !38
  br label %__nv_sqrtf.exit65, !dbg !38

__nv_sqrtf.exit65:                                ; preds = %304, %306, %309, %311
  %.0.i63 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !38
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i66 = icmp eq i32 %313, 0, !dbg !38
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i69 = icmp eq i32 %314, 0, !dbg !38
  br i1 %.not.i66, label %320, label %315, !dbg !38

315:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %318, label %316, !dbg !38

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %239) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %239) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

320:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %323, label %321, !dbg !38

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.f(float %239) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.f(float %239) #3, !dbg !38
  br label %__nv_sqrtf.exit70, !dbg !38

__nv_sqrtf.exit70:                                ; preds = %316, %318, %321, %323
  %.0.i68 = phi float [ %317, %316 ], [ %319, %318 ], [ %322, %321 ], [ %324, %323 ], !dbg !38
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i71 = icmp eq i32 %325, 0, !dbg !38
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i74 = icmp eq i32 %326, 0, !dbg !38
  br i1 %.not.i71, label %332, label %327, !dbg !38

327:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %330, label %328, !dbg !38

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #3, !dbg !38
  br label %__nv_sqrtf.exit75, !dbg !38

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #3, !dbg !38
  br label %__nv_sqrtf.exit75, !dbg !38

332:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %335, label %333, !dbg !38

333:                                              ; preds = %332
  %334 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #3, !dbg !38
  br label %__nv_sqrtf.exit75, !dbg !38

335:                                              ; preds = %332
  %336 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #3, !dbg !38
  br label %__nv_sqrtf.exit75, !dbg !38

__nv_sqrtf.exit75:                                ; preds = %328, %330, %333, %335
  %.0.i73 = phi float [ %329, %328 ], [ %331, %330 ], [ %334, %333 ], [ %336, %335 ], !dbg !38
  %337 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %338 = bitcast i32 %337 to float, !dbg !17
  %339 = bitcast i32 %40 to float, !dbg !19
  %340 = fsub float %338, %339, !dbg !39
  %341 = fmul float %340, %232, !dbg !40
  %342 = bitcast i32 %68 to float, !dbg !23
  %343 = fmul float %341, %342, !dbg !41
  %344 = bitcast i32 %78 to float, !dbg !25
  %345 = fadd float %343, %344, !dbg !42
  %346 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !27
  %347 = bitcast i32 %346 to float, !dbg !27
  %348 = fadd float %345, %347, !dbg !43
  %349 = bitcast i32 %92 to float, !dbg !29
  %350 = fsub float %348, %349, !dbg !44
  %351 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %352 = bitcast i32 %351 to float, !dbg !17
  %353 = bitcast i32 %39 to float, !dbg !19
  %354 = fsub float %352, %353, !dbg !39
  %355 = fmul float %354, %231, !dbg !40
  %356 = bitcast i32 %67 to float, !dbg !23
  %357 = fmul float %355, %356, !dbg !41
  %358 = bitcast i32 %77 to float, !dbg !25
  %359 = fadd float %357, %358, !dbg !42
  %360 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !27
  %361 = bitcast i32 %360 to float, !dbg !27
  %362 = fadd float %359, %361, !dbg !43
  %363 = bitcast i32 %91 to float, !dbg !29
  %364 = fsub float %362, %363, !dbg !44
  %365 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %366 = bitcast i32 %365 to float, !dbg !17
  %367 = bitcast i32 %38 to float, !dbg !19
  %368 = fsub float %366, %367, !dbg !39
  %369 = fmul float %368, %230, !dbg !40
  %370 = bitcast i32 %66 to float, !dbg !23
  %371 = fmul float %369, %370, !dbg !41
  %372 = bitcast i32 %76 to float, !dbg !25
  %373 = fadd float %371, %372, !dbg !42
  %374 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !27
  %375 = bitcast i32 %374 to float, !dbg !27
  %376 = fadd float %373, %375, !dbg !43
  %377 = bitcast i32 %90 to float, !dbg !29
  %378 = fsub float %376, %377, !dbg !44
  %379 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %380 = bitcast i32 %379 to float, !dbg !17
  %381 = bitcast i32 %37 to float, !dbg !19
  %382 = fsub float %380, %381, !dbg !39
  %383 = fmul float %382, %229, !dbg !40
  %384 = bitcast i32 %65 to float, !dbg !23
  %385 = fmul float %383, %384, !dbg !41
  %386 = bitcast i32 %75 to float, !dbg !25
  %387 = fadd float %385, %386, !dbg !42
  %388 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !27
  %389 = bitcast i32 %388 to float, !dbg !27
  %390 = fadd float %387, %389, !dbg !43
  %391 = bitcast i32 %89 to float, !dbg !29
  %392 = fsub float %390, %391, !dbg !44
  %393 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %394 = bitcast i32 %393 to float, !dbg !17
  %395 = bitcast i32 %36 to float, !dbg !19
  %396 = fsub float %394, %395, !dbg !39
  %397 = fmul float %396, %228, !dbg !40
  %398 = bitcast i32 %64 to float, !dbg !23
  %399 = fmul float %397, %398, !dbg !41
  %400 = bitcast i32 %74 to float, !dbg !25
  %401 = fadd float %399, %400, !dbg !42
  %402 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !27
  %403 = bitcast i32 %402 to float, !dbg !27
  %404 = fadd float %401, %403, !dbg !43
  %405 = bitcast i32 %88 to float, !dbg !29
  %406 = fsub float %404, %405, !dbg !44
  %407 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %408 = bitcast i32 %407 to float, !dbg !17
  %409 = bitcast i32 %35 to float, !dbg !19
  %410 = fsub float %408, %409, !dbg !39
  %411 = fmul float %410, %227, !dbg !40
  %412 = bitcast i32 %63 to float, !dbg !23
  %413 = fmul float %411, %412, !dbg !41
  %414 = bitcast i32 %73 to float, !dbg !25
  %415 = fadd float %413, %414, !dbg !42
  %416 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !27
  %417 = bitcast i32 %416 to float, !dbg !27
  %418 = fadd float %415, %417, !dbg !43
  %419 = bitcast i32 %87 to float, !dbg !29
  %420 = fsub float %418, %419, !dbg !44
  %421 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %422 = bitcast i32 %421 to float, !dbg !17
  %423 = bitcast i32 %34 to float, !dbg !19
  %424 = fsub float %422, %423, !dbg !39
  %425 = fmul float %424, %226, !dbg !40
  %426 = bitcast i32 %62 to float, !dbg !23
  %427 = fmul float %425, %426, !dbg !41
  %428 = bitcast i32 %72 to float, !dbg !25
  %429 = fadd float %427, %428, !dbg !42
  %430 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !27
  %431 = bitcast i32 %430 to float, !dbg !27
  %432 = fadd float %429, %431, !dbg !43
  %433 = bitcast i32 %86 to float, !dbg !29
  %434 = fsub float %432, %433, !dbg !44
  %435 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %436 = bitcast i32 %435 to float, !dbg !17
  %437 = bitcast i32 %33 to float, !dbg !19
  %438 = fsub float %436, %437, !dbg !39
  %439 = fmul float %438, %225, !dbg !40
  %440 = bitcast i32 %61 to float, !dbg !23
  %441 = fmul float %439, %440, !dbg !41
  %442 = bitcast i32 %71 to float, !dbg !25
  %443 = fadd float %441, %442, !dbg !42
  %444 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !27
  %445 = bitcast i32 %444 to float, !dbg !27
  %446 = fadd float %443, %445, !dbg !43
  %447 = bitcast i32 %85 to float, !dbg !29
  %448 = fsub float %446, %447, !dbg !44
  %449 = bitcast i32 %120 to float, !dbg !33
  %450 = bitcast i32 %119 to float, !dbg !33
  %451 = bitcast i32 %118 to float, !dbg !33
  %452 = bitcast i32 %117 to float, !dbg !33
  %453 = bitcast i32 %116 to float, !dbg !33
  %454 = bitcast i32 %115 to float, !dbg !33
  %455 = bitcast i32 %114 to float, !dbg !33
  %456 = bitcast i32 %113 to float, !dbg !33
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !45
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !45
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !45
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !45
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !45
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !45
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !45
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !45
  %465 = fmul float %448, %457, !dbg !46
  %466 = fmul float %434, %458, !dbg !46
  %467 = fmul float %420, %459, !dbg !46
  %468 = fmul float %406, %460, !dbg !46
  %469 = fmul float %392, %461, !dbg !46
  %470 = fmul float %378, %462, !dbg !46
  %471 = fmul float %364, %463, !dbg !46
  %472 = fmul float %350, %464, !dbg !46
  %473 = fmul float %465, %456, !dbg !47
  %474 = fmul float %466, %455, !dbg !47
  %475 = fmul float %467, %454, !dbg !47
  %476 = fmul float %468, %453, !dbg !47
  %477 = fmul float %469, %452, !dbg !47
  %478 = fmul float %470, %451, !dbg !47
  %479 = fmul float %471, %450, !dbg !47
  %480 = fmul float %472, %449, !dbg !47
  %481 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !48
  %482 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !48
  %483 = bitcast float %473 to i32, !dbg !49
  %484 = bitcast float %474 to i32, !dbg !49
  %485 = bitcast float %475 to i32, !dbg !49
  %486 = bitcast float %476 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %483, i32 %484, i32 %485, i32 %486, ptr addrspace(1) %481, i1 true) #3, !dbg !49
  %487 = bitcast float %477 to i32, !dbg !49
  %488 = bitcast float %478 to i32, !dbg !49
  %489 = bitcast float %479 to i32, !dbg !49
  %490 = bitcast float %480 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %488, i32 %489, i32 %490, ptr addrspace(1) %482, i1 true) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca2ra763gokmqechkhn2yslmj7y42xlljhdnhjgeiqigsi2w3tle.py", directory: "inductor_cache/a2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 26, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 27, scope: !7)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 37, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
