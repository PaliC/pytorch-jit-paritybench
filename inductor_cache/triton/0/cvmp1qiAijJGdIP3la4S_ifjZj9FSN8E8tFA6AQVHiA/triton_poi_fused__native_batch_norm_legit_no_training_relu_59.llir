; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_59(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = icmp slt i32 %15, 4, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %17 = sdiv i32 %.frozen, 256, !dbg !16
  %18 = mul i32 %17, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %15, 8, !dbg !18
  %20 = add i32 %.decomposed, %19, !dbg !19
  %21 = shl i32 %17, 10, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %16) #4, !dbg !23
  %26 = sext i32 %.decomposed to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !27
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !31
  %39 = fadd float %33, 0x3EE4F8B580000000, !dbg !32
  %40 = fadd float %34, 0x3EE4F8B580000000, !dbg !32
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %41, 0, !dbg !33
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %42, 0, !dbg !33
  br i1 %.not.i, label %48, label %43, !dbg !33

43:                                               ; preds = %8
  br i1 %.not1.i, label %46, label %44, !dbg !33

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

48:                                               ; preds = %8
  br i1 %.not1.i, label %51, label %49, !dbg !33

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %44, %46, %49, %51
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !33
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i3 = icmp eq i32 %53, 0, !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i6 = icmp eq i32 %54, 0, !dbg !33
  br i1 %.not.i3, label %60, label %55, !dbg !33

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %63, label %61, !dbg !33

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

__nv_sqrtf.exit7:                                 ; preds = %56, %58, %61, %63
  %.0.i5 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !33
  %65 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fsub float %66, %68, !dbg !34
  %70 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %71 = bitcast i32 %70 to float, !dbg !23
  %72 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fsub float %71, %73, !dbg !34
  %75 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = and i32 %11, 127, !dbg !12
  %84 = or disjoint i32 %83, 128, !dbg !12
  %85 = or disjoint i32 %10, %84, !dbg !13
  %.frozen8 = freeze i32 %85, !dbg !16
  %86 = sdiv i32 %.frozen8, 256, !dbg !16
  %87 = or disjoint i32 %10, %83, !dbg !13
  %.frozen10 = freeze i32 %87, !dbg !16
  %88 = sdiv i32 %.frozen10, 256, !dbg !16
  %89 = mul i32 %86, 256, !dbg !17
  %.decomposed9 = sub i32 %.frozen8, %89, !dbg !17
  %90 = mul i32 %88, 256, !dbg !17
  %.decomposed11 = sub i32 %.frozen10, %90, !dbg !17
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !35
  %93 = fmul float %74, %91, !dbg !36
  %94 = fmul float %69, %92, !dbg !36
  %95 = fmul float %93, %82, !dbg !37
  %96 = fmul float %94, %80, !dbg !37
  %97 = fadd float %95, %78, !dbg !38
  %98 = fadd float %96, %76, !dbg !38
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !39
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !39
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !43
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !43
  %103 = shl nsw i32 %.decomposed11, 2, !dbg !44
  %104 = shl nsw i32 %.decomposed9, 2, !dbg !44
  %105 = add i32 %103, %15, !dbg !45
  %106 = add i32 %104, %15, !dbg !45
  %107 = mul i32 %88, 4224, !dbg !46
  %108 = mul i32 %86, 4224, !dbg !46
  %109 = add i32 %105, %107, !dbg !47
  %110 = add i32 %106, %108, !dbg !47
  %111 = sext i32 %109 to i64, !dbg !48
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %111, !dbg !48
  %113 = sext i32 %110 to i64, !dbg !48
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !48
  %.idx = shl nuw nsw i32 %13, 3, !dbg !49
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !49
  %116 = bitcast float %101 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !49
  %117 = shl nuw nsw i32 %13, 1, !dbg !49
  %118 = or disjoint i32 %117, 2, !dbg !49
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !49
  %120 = bitcast float %102 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.idx1 = shl nuw nsw i32 %83, 3, !dbg !49
  %121 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !49
  %122 = load i32, ptr addrspace(3) %121, align 8, !dbg !49
  %.idx2 = shl nuw nsw i32 %84, 3, !dbg !49
  %123 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !49
  %124 = load i32, ptr addrspace(3) %123, align 8, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %112, i1 %16) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %114, i1 %16) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwsw3j2k2d2wpk5hck7shl7qyrfep46au6hwxig7okasxbfaejj4.py", directory: "inductor_cache/ws")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_59, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_59, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_59", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 49, scope: !7)
!21 = !DILocation(line: 31, column: 44, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 54, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 26, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 48, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 49, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 49, column: 37, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 54, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
