; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 2048, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %15 = sdiv i32 %.frozen, 32, !dbg !16
  %16 = mul i32 %15, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl nuw nsw i32 %13, 8, !dbg !18
  %18 = shl nuw nsw i32 %14, 8, !dbg !18
  %19 = shl i32 %15, 7, !dbg !19
  %20 = or disjoint i32 %19, %13, !dbg !20
  %21 = or disjoint i32 %19, %14, !dbg !20
  %22 = or disjoint i32 %20, 16, !dbg !20
  %23 = or disjoint i32 %20, 24, !dbg !20
  %24 = or disjoint i32 %20, 32, !dbg !20
  %25 = or disjoint i32 %20, 40, !dbg !20
  %26 = or disjoint i32 %20, 48, !dbg !20
  %27 = or disjoint i32 %20, 56, !dbg !20
  %28 = or disjoint i32 %20, 64, !dbg !20
  %29 = or disjoint i32 %20, 72, !dbg !20
  %30 = or disjoint i32 %20, 80, !dbg !20
  %31 = or disjoint i32 %20, 88, !dbg !20
  %32 = or disjoint i32 %20, 96, !dbg !20
  %33 = or disjoint i32 %20, 104, !dbg !20
  %34 = or disjoint i32 %20, 112, !dbg !20
  %35 = or disjoint i32 %20, 120, !dbg !20
  %36 = sdiv i32 %20, 16, !dbg !21
  %37 = sdiv i32 %21, 16, !dbg !21
  %38 = sdiv i32 %22, 16, !dbg !21
  %39 = sdiv i32 %23, 16, !dbg !21
  %40 = sdiv i32 %24, 16, !dbg !21
  %41 = sdiv i32 %25, 16, !dbg !21
  %42 = sdiv i32 %26, 16, !dbg !21
  %43 = sdiv i32 %27, 16, !dbg !21
  %44 = sdiv i32 %28, 16, !dbg !21
  %45 = sdiv i32 %29, 16, !dbg !21
  %46 = sdiv i32 %30, 16, !dbg !21
  %47 = sdiv i32 %31, 16, !dbg !21
  %48 = sdiv i32 %32, 16, !dbg !21
  %49 = sdiv i32 %33, 16, !dbg !21
  %50 = sdiv i32 %34, 16, !dbg !21
  %51 = sdiv i32 %35, 16, !dbg !21
  %52 = srem i32 %36, 16, !dbg !22
  %53 = srem i32 %37, 16, !dbg !22
  %54 = srem i32 %38, 16, !dbg !22
  %55 = srem i32 %39, 16, !dbg !22
  %56 = srem i32 %40, 16, !dbg !22
  %57 = srem i32 %41, 16, !dbg !22
  %58 = srem i32 %42, 16, !dbg !22
  %59 = srem i32 %43, 16, !dbg !22
  %60 = srem i32 %44, 16, !dbg !22
  %61 = srem i32 %45, 16, !dbg !22
  %62 = srem i32 %46, 16, !dbg !22
  %63 = srem i32 %47, 16, !dbg !22
  %64 = srem i32 %48, 16, !dbg !22
  %65 = srem i32 %49, 16, !dbg !22
  %66 = srem i32 %50, 16, !dbg !22
  %67 = srem i32 %51, 16, !dbg !22
  %68 = shl nsw i32 %52, 12, !dbg !23
  %69 = shl nsw i32 %53, 12, !dbg !23
  %70 = shl nsw i32 %54, 12, !dbg !23
  %71 = shl nsw i32 %55, 12, !dbg !23
  %72 = shl nsw i32 %56, 12, !dbg !23
  %73 = shl nsw i32 %57, 12, !dbg !23
  %74 = shl nsw i32 %58, 12, !dbg !23
  %75 = shl nsw i32 %59, 12, !dbg !23
  %76 = shl nsw i32 %60, 12, !dbg !23
  %77 = shl nsw i32 %61, 12, !dbg !23
  %78 = shl nsw i32 %62, 12, !dbg !23
  %79 = shl nsw i32 %63, 12, !dbg !23
  %80 = shl nsw i32 %64, 12, !dbg !23
  %81 = shl nsw i32 %65, 12, !dbg !23
  %82 = shl nsw i32 %66, 12, !dbg !23
  %83 = shl nsw i32 %67, 12, !dbg !23
  %84 = or disjoint i32 %68, %17, !dbg !24
  %85 = or disjoint i32 %69, %18, !dbg !24
  %86 = or disjoint i32 %70, %17, !dbg !24
  %87 = or disjoint i32 %72, %17, !dbg !24
  %88 = or disjoint i32 %74, %17, !dbg !24
  %89 = or disjoint i32 %76, %17, !dbg !24
  %90 = or disjoint i32 %78, %17, !dbg !24
  %91 = or disjoint i32 %80, %17, !dbg !24
  %92 = or disjoint i32 %82, %17, !dbg !24
  %93 = shl nsw i32 %.decomposed, 13, !dbg !25
  %94 = add i32 %20, %93, !dbg !26
  %95 = add i32 %21, %93, !dbg !26
  %96 = add i32 %22, %93, !dbg !26
  %97 = add i32 %23, %93, !dbg !26
  %98 = add i32 %24, %93, !dbg !26
  %99 = add i32 %25, %93, !dbg !26
  %100 = add i32 %26, %93, !dbg !26
  %101 = add i32 %27, %93, !dbg !26
  %102 = add i32 %28, %93, !dbg !26
  %103 = add i32 %29, %93, !dbg !26
  %104 = add i32 %30, %93, !dbg !26
  %105 = add i32 %31, %93, !dbg !26
  %106 = add i32 %32, %93, !dbg !26
  %107 = add i32 %33, %93, !dbg !26
  %108 = add i32 %34, %93, !dbg !26
  %109 = add i32 %35, %93, !dbg !26
  %110 = sdiv i32 %94, 65536, !dbg !27
  %111 = sdiv i32 %95, 65536, !dbg !27
  %112 = sdiv i32 %96, 65536, !dbg !27
  %113 = sdiv i32 %97, 65536, !dbg !27
  %114 = sdiv i32 %98, 65536, !dbg !27
  %115 = sdiv i32 %99, 65536, !dbg !27
  %116 = sdiv i32 %100, 65536, !dbg !27
  %117 = sdiv i32 %101, 65536, !dbg !27
  %118 = sdiv i32 %102, 65536, !dbg !27
  %119 = sdiv i32 %103, 65536, !dbg !27
  %120 = sdiv i32 %104, 65536, !dbg !27
  %121 = sdiv i32 %105, 65536, !dbg !27
  %122 = sdiv i32 %106, 65536, !dbg !27
  %123 = sdiv i32 %107, 65536, !dbg !27
  %124 = sdiv i32 %108, 65536, !dbg !27
  %125 = sdiv i32 %109, 65536, !dbg !27
  %126 = shl nsw i32 %110, 16, !dbg !28
  %127 = shl nsw i32 %111, 16, !dbg !28
  %128 = shl nsw i32 %112, 16, !dbg !28
  %129 = shl nsw i32 %113, 16, !dbg !28
  %130 = shl nsw i32 %114, 16, !dbg !28
  %131 = shl nsw i32 %115, 16, !dbg !28
  %132 = shl nsw i32 %116, 16, !dbg !28
  %133 = shl nsw i32 %117, 16, !dbg !28
  %134 = shl nsw i32 %118, 16, !dbg !28
  %135 = shl nsw i32 %119, 16, !dbg !28
  %136 = shl nsw i32 %120, 16, !dbg !28
  %137 = shl nsw i32 %121, 16, !dbg !28
  %138 = shl nsw i32 %122, 16, !dbg !28
  %139 = shl nsw i32 %123, 16, !dbg !28
  %140 = shl nsw i32 %124, 16, !dbg !28
  %141 = shl nsw i32 %125, 16, !dbg !28
  %142 = add i32 %84, %126, !dbg !29
  %143 = add i32 %85, %127, !dbg !29
  %144 = add i32 %86, %128, !dbg !29
  %145 = add i32 %87, %130, !dbg !29
  %146 = add i32 %88, %132, !dbg !29
  %147 = add i32 %89, %134, !dbg !29
  %148 = add i32 %90, %136, !dbg !29
  %149 = add i32 %91, %138, !dbg !29
  %150 = add i32 %92, %140, !dbg !29
  %151 = sdiv i32 %94, 256, !dbg !30
  %152 = sdiv i32 %95, 256, !dbg !30
  %153 = sdiv i32 %96, 256, !dbg !30
  %154 = sdiv i32 %97, 256, !dbg !30
  %155 = sdiv i32 %98, 256, !dbg !30
  %156 = sdiv i32 %99, 256, !dbg !30
  %157 = sdiv i32 %100, 256, !dbg !30
  %158 = sdiv i32 %101, 256, !dbg !30
  %159 = sdiv i32 %102, 256, !dbg !30
  %160 = sdiv i32 %103, 256, !dbg !30
  %161 = sdiv i32 %104, 256, !dbg !30
  %162 = sdiv i32 %105, 256, !dbg !30
  %163 = sdiv i32 %106, 256, !dbg !30
  %164 = sdiv i32 %107, 256, !dbg !30
  %165 = sdiv i32 %108, 256, !dbg !30
  %166 = sdiv i32 %109, 256, !dbg !30
  %167 = srem i32 %151, 256, !dbg !31
  %168 = srem i32 %152, 256, !dbg !31
  %169 = srem i32 %153, 256, !dbg !31
  %170 = srem i32 %154, 256, !dbg !31
  %171 = srem i32 %155, 256, !dbg !31
  %172 = srem i32 %156, 256, !dbg !31
  %173 = srem i32 %157, 256, !dbg !31
  %174 = srem i32 %158, 256, !dbg !31
  %175 = srem i32 %159, 256, !dbg !31
  %176 = srem i32 %160, 256, !dbg !31
  %177 = srem i32 %161, 256, !dbg !31
  %178 = srem i32 %162, 256, !dbg !31
  %179 = srem i32 %163, 256, !dbg !31
  %180 = srem i32 %164, 256, !dbg !31
  %181 = srem i32 %165, 256, !dbg !31
  %182 = srem i32 %166, 256, !dbg !31
  %183 = add i32 %142, %167, !dbg !32
  %184 = add nsw i32 %143, %168, !dbg !32
  %185 = add i32 %144, %169, !dbg !32
  %186 = or disjoint i32 %17, %71, !dbg !29
  %187 = or disjoint i32 %186, 2048, !dbg !29
  %188 = add i32 %187, %129, !dbg !24
  %189 = add nsw i32 %188, %170, !dbg !32
  %190 = add i32 %145, %171, !dbg !32
  %191 = or disjoint i32 %17, %73, !dbg !29
  %192 = or disjoint i32 %191, 2048, !dbg !29
  %193 = add i32 %192, %131, !dbg !24
  %194 = add nsw i32 %193, %172, !dbg !32
  %195 = add i32 %146, %173, !dbg !32
  %196 = or disjoint i32 %17, %75, !dbg !29
  %197 = or disjoint i32 %196, 2048, !dbg !29
  %198 = add i32 %197, %133, !dbg !24
  %199 = add nsw i32 %198, %174, !dbg !32
  %200 = add i32 %147, %175, !dbg !32
  %201 = or disjoint i32 %17, %77, !dbg !29
  %202 = or disjoint i32 %201, 2048, !dbg !29
  %203 = add i32 %202, %135, !dbg !24
  %204 = add nsw i32 %203, %176, !dbg !32
  %205 = add i32 %148, %177, !dbg !32
  %206 = or disjoint i32 %17, %79, !dbg !29
  %207 = or disjoint i32 %206, 2048, !dbg !29
  %208 = add i32 %207, %137, !dbg !24
  %209 = add nsw i32 %208, %178, !dbg !32
  %210 = add i32 %149, %179, !dbg !32
  %211 = or disjoint i32 %17, %81, !dbg !29
  %212 = or disjoint i32 %211, 2048, !dbg !29
  %213 = add i32 %212, %139, !dbg !24
  %214 = add nsw i32 %213, %180, !dbg !32
  %215 = add i32 %150, %181, !dbg !32
  %216 = or disjoint i32 %17, %83, !dbg !29
  %217 = or disjoint i32 %216, 2048, !dbg !29
  %218 = add i32 %217, %141, !dbg !24
  %219 = add nsw i32 %218, %182, !dbg !32
  %220 = sext i32 %183 to i64, !dbg !33
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !33
  %222 = sext i32 %184 to i64, !dbg !33
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !33
  %224 = sext i32 %185 to i64, !dbg !33
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !33
  %226 = sext i32 %189 to i64, !dbg !33
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !33
  %228 = sext i32 %190 to i64, !dbg !33
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !33
  %230 = sext i32 %194 to i64, !dbg !33
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !33
  %232 = sext i32 %195 to i64, !dbg !33
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !33
  %234 = sext i32 %199 to i64, !dbg !33
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !33
  %236 = sext i32 %200 to i64, !dbg !33
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !33
  %238 = sext i32 %204 to i64, !dbg !33
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !33
  %240 = sext i32 %205 to i64, !dbg !33
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !33
  %242 = sext i32 %209 to i64, !dbg !33
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !33
  %244 = sext i32 %210 to i64, !dbg !33
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !33
  %246 = sext i32 %214 to i64, !dbg !33
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !33
  %248 = sext i32 %215 to i64, !dbg !33
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !33
  %250 = sext i32 %219 to i64, !dbg !33
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !33
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %253 = bitcast i32 %252 to float, !dbg !34
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %255 = bitcast i32 %254 to float, !dbg !34
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %257 = bitcast i32 %256 to float, !dbg !34
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %259 = bitcast i32 %258 to float, !dbg !34
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %261 = bitcast i32 %260 to float, !dbg !34
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %263 = bitcast i32 %262 to float, !dbg !34
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %265 = bitcast i32 %264 to float, !dbg !34
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %267 = bitcast i32 %266 to float, !dbg !34
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %269 = bitcast i32 %268 to float, !dbg !34
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %271 = bitcast i32 %270 to float, !dbg !34
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %273 = bitcast i32 %272 to float, !dbg !34
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %275 = bitcast i32 %274 to float, !dbg !34
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %277 = bitcast i32 %276 to float, !dbg !34
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %279 = bitcast i32 %278 to float, !dbg !34
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %281 = bitcast i32 %280 to float, !dbg !34
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %11, i32 0, i1 %11) #3, !dbg !34
  %283 = bitcast i32 %282 to float, !dbg !34
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !35
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !35
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !35
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %226, !dbg !35
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %228, !dbg !35
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %230, !dbg !35
  %290 = getelementptr float, ptr addrspace(1) %1, i64 %232, !dbg !35
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %234, !dbg !35
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %236, !dbg !35
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %238, !dbg !35
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %240, !dbg !35
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %242, !dbg !35
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !35
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %246, !dbg !35
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !35
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !35
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %301 = bitcast i32 %300 to float, !dbg !36
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %303 = bitcast i32 %302 to float, !dbg !36
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %305 = bitcast i32 %304 to float, !dbg !36
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %307 = bitcast i32 %306 to float, !dbg !36
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %309 = bitcast i32 %308 to float, !dbg !36
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %311 = bitcast i32 %310 to float, !dbg !36
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %313 = bitcast i32 %312 to float, !dbg !36
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %315 = bitcast i32 %314 to float, !dbg !36
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %317 = bitcast i32 %316 to float, !dbg !36
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %319 = bitcast i32 %318 to float, !dbg !36
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %321 = bitcast i32 %320 to float, !dbg !36
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %323 = bitcast i32 %322 to float, !dbg !36
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %325 = bitcast i32 %324 to float, !dbg !36
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %327 = bitcast i32 %326 to float, !dbg !36
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %329 = bitcast i32 %328 to float, !dbg !36
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %11, i32 0, i1 %11) #3, !dbg !36
  %331 = bitcast i32 %330 to float, !dbg !36
  %332 = fsub float %253, %301, !dbg !37
  %333 = fsub float %255, %303, !dbg !37
  %334 = fsub float %257, %305, !dbg !37
  %335 = fsub float %259, %307, !dbg !37
  %336 = fsub float %261, %309, !dbg !37
  %337 = fsub float %263, %311, !dbg !37
  %338 = fsub float %265, %313, !dbg !37
  %339 = fsub float %267, %315, !dbg !37
  %340 = fsub float %269, %317, !dbg !37
  %341 = fsub float %271, %319, !dbg !37
  %342 = fsub float %273, %321, !dbg !37
  %343 = fsub float %275, %323, !dbg !37
  %344 = fsub float %277, %325, !dbg !37
  %345 = fsub float %279, %327, !dbg !37
  %346 = fsub float %281, %329, !dbg !37
  %347 = fsub float %283, %331, !dbg !37
  %348 = tail call float @llvm.fabs.f32(float %332), !dbg !38
  %349 = tail call float @llvm.fabs.f32(float %333), !dbg !38
  %350 = tail call float @llvm.fabs.f32(float %334), !dbg !38
  %351 = tail call float @llvm.fabs.f32(float %335), !dbg !38
  %352 = tail call float @llvm.fabs.f32(float %336), !dbg !38
  %353 = tail call float @llvm.fabs.f32(float %337), !dbg !38
  %354 = tail call float @llvm.fabs.f32(float %338), !dbg !38
  %355 = tail call float @llvm.fabs.f32(float %339), !dbg !38
  %356 = tail call float @llvm.fabs.f32(float %340), !dbg !38
  %357 = tail call float @llvm.fabs.f32(float %341), !dbg !38
  %358 = tail call float @llvm.fabs.f32(float %342), !dbg !38
  %359 = tail call float @llvm.fabs.f32(float %343), !dbg !38
  %360 = tail call float @llvm.fabs.f32(float %344), !dbg !38
  %361 = tail call float @llvm.fabs.f32(float %345), !dbg !38
  %362 = tail call float @llvm.fabs.f32(float %346), !dbg !38
  %363 = tail call float @llvm.fabs.f32(float %347), !dbg !38
  %364 = fadd float %348, %349, !dbg !39
  %365 = fadd float %364, %350, !dbg !39
  %366 = fadd float %365, %351, !dbg !39
  %367 = fadd float %366, %352, !dbg !39
  %368 = fadd float %367, %353, !dbg !39
  %369 = fadd float %368, %354, !dbg !39
  %370 = fadd float %369, %355, !dbg !39
  %371 = fadd float %370, %356, !dbg !39
  %372 = fadd float %371, %357, !dbg !39
  %373 = fadd float %372, %358, !dbg !39
  %374 = fadd float %373, %359, !dbg !39
  %375 = fadd float %374, %360, !dbg !39
  %376 = fadd float %375, %361, !dbg !39
  %377 = fadd float %376, %362, !dbg !39
  %378 = fadd float %377, %363, !dbg !39
  %379 = shl nuw nsw i32 %9, 3, !dbg !44
  %380 = or disjoint i32 %379, %13, !dbg !44
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %380, !dbg !44
  %382 = bitcast float %378 to i32, !dbg !44
  %383 = select i1 %11, i32 %382, i32 0, !dbg !39
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %384, i1 true) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %385 = icmp slt i32 %8, 256, !dbg !44
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %387 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %385) #3, !dbg !44
  %388 = bitcast i32 %387 to float, !dbg !44
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !44
  %390 = bitcast i32 %389 to float, !dbg !44
  %391 = fadd float %388, %390, !dbg !39
  %392 = bitcast float %391 to i32, !dbg !44
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !44
  %394 = bitcast i32 %393 to float, !dbg !44
  %395 = fadd float %391, %394, !dbg !39
  %396 = bitcast float %395 to i32, !dbg !44
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !44
  %398 = bitcast i32 %397 to float, !dbg !44
  %399 = fadd float %395, %398, !dbg !39
  %400 = and i32 %8, 7, !dbg !44
  %401 = icmp eq i32 %400, 0, !dbg !44
  %402 = and i1 %385, %401, !dbg !44
  %403 = bitcast float %399 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %403, i1 %402) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !44
  %405 = load i32, ptr addrspace(3) %404, align 16, !dbg !44
  %406 = sext i32 %10 to i64, !dbg !45
  %407 = getelementptr float, ptr addrspace(1) %2, i64 %406, !dbg !45
  %408 = icmp eq i32 %13, 0, !dbg !46
  %409 = and i1 %408, %11, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %405, ptr addrspace(1) %407, i1 %409) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caqotpjvy2cocnuhcu2krmeas7hy4ikt4beygh2f5edl4igpajav.py", directory: "inductor_cache/aq")
!4 = !{ptr @triton_per_fused_abs_mean_sub_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_22", linkageName: "triton_per_fused_abs_mean_sub_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 66, scope: !7)
!20 = !DILocation(line: 33, column: 62, scope: !7)
!21 = !DILocation(line: 33, column: 73, scope: !7)
!22 = !DILocation(line: 33, column: 79, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 113, scope: !7)
!26 = !DILocation(line: 33, column: 108, scope: !7)
!27 = !DILocation(line: 33, column: 120, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 86, scope: !7)
!30 = !DILocation(line: 33, column: 159, scope: !7)
!31 = !DILocation(line: 33, column: 166, scope: !7)
!32 = !DILocation(line: 33, column: 131, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 174, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 174, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 23, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 39, column: 24, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 40, column: 25, scope: !7)
!46 = !DILocation(line: 40, column: 36, scope: !7)
!47 = !DILocation(line: 40, column: 4, scope: !7)
