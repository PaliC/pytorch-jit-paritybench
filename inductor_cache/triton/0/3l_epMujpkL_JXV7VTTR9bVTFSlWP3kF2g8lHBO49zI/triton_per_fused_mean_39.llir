; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_39(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 2048, !dbg !14
  %15 = mul i32 %14, 2048, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = shl i32 %10, 11, !dbg !16
  %17 = and i32 %16, 14336, !dbg !16
  %18 = shl i32 %14, 15, !dbg !17
  %19 = add i32 %18, %.decomposed, !dbg !18
  %20 = add i32 %19, %17, !dbg !19
  %21 = add i32 %19, 16384, !dbg !18
  %22 = add nuw i32 %21, %17, !dbg !19
  %23 = sext i32 %20 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = sext i32 %22 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = fadd float %32, %41, !dbg !22
  %46 = fadd float %33, %42, !dbg !22
  %47 = fadd float %34, %43, !dbg !22
  %48 = fadd float %35, %44, !dbg !22
  %49 = and i32 %10, 7, !dbg !27
  %50 = shl nuw nsw i32 %9, 3, !dbg !27
  %51 = or disjoint i32 %50, %49, !dbg !27
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !27
  %53 = bitcast float %45 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #3, !dbg !27
  %54 = or disjoint i32 %50, 8, !dbg !27
  %55 = or disjoint i32 %54, %49, !dbg !27
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !27
  %57 = bitcast float %46 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #3, !dbg !27
  %58 = or disjoint i32 %50, 16, !dbg !27
  %59 = or disjoint i32 %58, %49, !dbg !27
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !27
  %61 = bitcast float %47 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #3, !dbg !27
  %62 = or disjoint i32 %50, 24, !dbg !27
  %63 = or disjoint i32 %62, %49, !dbg !27
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !27
  %65 = bitcast float %48 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %66 = icmp slt i32 %7, 1024, !dbg !27
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #3, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = fadd float %69, %71, !dbg !22
  %73 = bitcast float %72 to i32, !dbg !27
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %72, %75, !dbg !22
  %77 = bitcast float %76 to i32, !dbg !27
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = fadd float %76, %79, !dbg !22
  %81 = and i32 %7, 7, !dbg !27
  %82 = icmp eq i32 %81, 0, !dbg !27
  %83 = and i1 %66, %82, !dbg !27
  %84 = bitcast float %80 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %84, i1 %83) #3, !dbg !27
  %85 = getelementptr i8, ptr addrspace(3) %67, i32 1024, !dbg !27
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %66) #3, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = fadd float %87, %89, !dbg !22
  %91 = bitcast float %90 to i32, !dbg !27
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !27
  %93 = bitcast i32 %92 to float, !dbg !27
  %94 = fadd float %90, %93, !dbg !22
  %95 = bitcast float %94 to i32, !dbg !27
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !27
  %97 = bitcast i32 %96 to float, !dbg !27
  %98 = fadd float %94, %97, !dbg !22
  %99 = bitcast float %98 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %99, i1 %83) #3, !dbg !27
  %100 = getelementptr i8, ptr addrspace(3) %67, i32 2048, !dbg !27
  %101 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %100, i1 %66) #3, !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = fadd float %102, %104, !dbg !22
  %106 = bitcast float %105 to i32, !dbg !27
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = fadd float %105, %108, !dbg !22
  %110 = bitcast float %109 to i32, !dbg !27
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = fadd float %109, %112, !dbg !22
  %114 = bitcast float %113 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %114, i1 %83) #3, !dbg !27
  %115 = getelementptr i8, ptr addrspace(3) %67, i32 3072, !dbg !27
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %66) #3, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %117, %119, !dbg !22
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !22
  %125 = bitcast float %124 to i32, !dbg !27
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = fadd float %124, %127, !dbg !22
  %129 = bitcast float %128 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %129, i1 %83) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !27
  %131 = load i32, ptr addrspace(3) %130, align 16, !dbg !27
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !27
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !27
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !27
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !27
  %137 = load i32, ptr addrspace(3) %136, align 16, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %138, i32 %131, i32 %133, i32 %135, i32 %137, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !28
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 1.600000e+01) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %142 = sext i32 %13 to i64, !dbg !30
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !30
  %144 = and i32 %7, 128, !dbg !31
  %145 = icmp eq i32 %144, 0, !dbg !31
  %146 = bitcast float %141 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %143, i1 %145) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbm6fmqb6kk3gszma4bd2puavzyiktvmdksmwqgs6uqsqriippqr.py", directory: "inductor_cache/bm")
!4 = !{ptr @triton_per_fused_mean_39, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_39", linkageName: "triton_per_fused_mean_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 56, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 35, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 4, scope: !7)
!30 = !DILocation(line: 39, column: 28, scope: !7)
!31 = !DILocation(line: 39, column: 39, scope: !7)
!32 = !DILocation(line: 39, column: 4, scope: !7)
