; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 64, !dbg !14
  %16 = srem i32 %15, 1024, !dbg !15
  %17 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen6 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen6, 65536, !dbg !17
  %19 = icmp slt i32 %16, 512, !dbg !18
  %20 = mul i32 %18, 65536, !dbg !19
  %srem.decomposed = sub i32 %.frozen6, %20, !dbg !19
  %21 = shl nsw i32 %18, 15, !dbg !20
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %26 = icmp sgt i32 %16, 511, !dbg !24
  %27 = add nsw i32 %16, -512, !dbg !25
  %28 = shl nsw i32 %27, 6, !dbg !26
  %29 = add nsw i32 %21, %.decomposed, !dbg !27
  %30 = add nsw i32 %29, %28, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !29
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !30
  %34 = sext i32 %27 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !31
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !33
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %40 = bitcast i32 %39 to float, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %42 = bitcast i32 %41 to float, !dbg !34
  %43 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %44 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %45, 0, !dbg !36
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %46, 0, !dbg !36
  br i1 %.not.i, label %52, label %47, !dbg !36

47:                                               ; preds = %8
  br i1 %.not1.i, label %50, label %48, !dbg !36

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

52:                                               ; preds = %8
  br i1 %.not1.i, label %55, label %53, !dbg !36

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !36
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %57, 0, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %58, 0, !dbg !36
  br i1 %.not.i1, label %64, label %59, !dbg !36

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !36

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %60, %62, %65, %67
  %.0.i3 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !36
  %69 = extractvalue { i32, i32 } %33, 1, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = bitcast i32 %37 to float, !dbg !32
  %72 = fsub float %70, %71, !dbg !37
  %73 = extractvalue { i32, i32 } %33, 0, !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = bitcast i32 %36 to float, !dbg !32
  %76 = fsub float %74, %75, !dbg !37
  %77 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %78 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %81 = fmul float %76, %79, !dbg !39
  %82 = fmul float %72, %80, !dbg !39
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !40
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %85 = bitcast i32 %84 to float, !dbg !41
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %87 = bitcast i32 %86 to float, !dbg !41
  %88 = fmul float %81, %85, !dbg !42
  %89 = fmul float %82, %87, !dbg !42
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !43
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %26, i32 0, i1 %26) #3, !dbg !44
  %92 = bitcast i32 %91 to float, !dbg !44
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %26, i32 0, i1 %26) #3, !dbg !44
  %94 = bitcast i32 %93 to float, !dbg !44
  %95 = fadd float %88, %92, !dbg !45
  %96 = fadd float %89, %94, !dbg !45
  %97 = fcmp olt float %95, 0.000000e+00, !dbg !46
  %98 = fcmp olt float %96, 0.000000e+00, !dbg !46
  %99 = select i1 %97, float 0.000000e+00, float %95, !dbg !50
  %100 = select i1 %98, float 0.000000e+00, float %96, !dbg !50
  %101 = sext i32 %14 to i64, !dbg !51
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %101, !dbg !51
  %103 = bitcast float %99 to i32, !dbg !52
  %104 = select i1 %19, i32 %78, i32 %103, !dbg !53
  %105 = bitcast float %100 to i32, !dbg !52
  %106 = select i1 %19, i32 %77, i32 %105, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %106, ptr addrspace(1) %102, i1 true) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv74zeriyrutxg73yvpizliyfsha3qbkltptirau7nnrjrrzephp.py", directory: "inductor_cache/v7")
!4 = !{ptr @triton_poi_fused_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_13", linkageName: "triton_poi_fused_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 39, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 65, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 27, scope: !7)
!37 = !DILocation(line: 39, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 31, scope: !7)
!41 = !DILocation(line: 49, column: 45, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 45, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 37, scope: !7)
!53 = !DILocation(line: 57, column: 33, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
