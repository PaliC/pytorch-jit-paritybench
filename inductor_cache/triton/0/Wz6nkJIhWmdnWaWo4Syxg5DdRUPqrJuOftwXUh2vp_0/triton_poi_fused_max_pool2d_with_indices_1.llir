; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 256, !dbg !13
  %13 = or disjoint i32 %10, 257, !dbg !13
  %14 = icmp slt i32 %10, 38440, !dbg !14
  %15 = icmp slt i32 %12, 38440, !dbg !14
  %16 = sdiv i32 %10, 31, !dbg !15
  %17 = sdiv i32 %11, 31, !dbg !15
  %18 = sdiv i32 %12, 31, !dbg !15
  %19 = sdiv i32 %13, 31, !dbg !15
  %20 = sdiv i32 %10, 961, !dbg !16
  %21 = sdiv i32 %11, 961, !dbg !16
  %22 = sdiv i32 %12, 961, !dbg !16
  %23 = sdiv i32 %13, 961, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %24 = sdiv i32 %.frozen, 9610, !dbg !17
  %.frozen14 = freeze i32 %12, !dbg !17
  %25 = sdiv i32 %.frozen14, 9610, !dbg !17
  %26 = mul i32 %24, 9610, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = mul i32 %25, 9610, !dbg !18
  %.decomposed15 = sub i32 %.frozen14, %27, !dbg !18
  %28 = mul i32 %20, 3872, !dbg !19
  %29 = mul i32 %21, 3872, !dbg !19
  %30 = mul i32 %22, 3872, !dbg !19
  %31 = mul i32 %23, 3872, !dbg !19
  %32 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %33 = insertelement <2 x i32> %32, i32 %16, i64 1, !dbg !20
  %34 = srem <2 x i32> %33, splat (i32 31), !dbg !20
  %35 = extractelement <2 x i32> %34, i64 1, !dbg !21
  %36 = icmp sgt i32 %35, -1, !dbg !22
  %37 = extractelement <2 x i32> %34, i64 0, !dbg !21
  %38 = shl nsw i32 %37, 1, !dbg !23
  %39 = icmp sgt i32 %37, -1, !dbg !24
  %40 = or i32 %35, %37, !dbg !21
  %41 = icmp sgt i32 %40, -1, !dbg !21
  %42 = mul nsw i32 %35, 124, !dbg !25
  %43 = add i32 %42, %28, !dbg !26
  %44 = add i32 %43, %38, !dbg !27
  %45 = sext i32 %44 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = and i1 %14, %41, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 -8388608, i1 %47) #1, !dbg !30
  %49 = or disjoint i32 %43, 1, !dbg !31
  %50 = add i32 %49, %38, !dbg !32
  %51 = sext i32 %50 to i64, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !33
  %53 = add nsw <2 x i32> %34, splat (i32 1), !dbg !34
  %54 = icmp ult <2 x i32> %53, splat (i32 31), !dbg !34
  %55 = extractelement <2 x i1> %54, i64 0, !dbg !35
  %56 = and i1 %36, %55, !dbg !35
  %57 = or disjoint i32 %43, 2, !dbg !36
  %58 = add i32 %57, %38, !dbg !37
  %59 = sext i32 %58 to i64, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !38
  %61 = and i1 %14, %56, !dbg !39
  %62 = add i32 %43, 62, !dbg !40
  %63 = add i32 %62, %38, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !42
  %66 = add i32 %43, 63, !dbg !43
  %67 = add i32 %66, %38, !dbg !44
  %68 = sext i32 %67 to i64, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !45
  %70 = add i32 %43, 64, !dbg !46
  %71 = add i32 %70, %38, !dbg !47
  %72 = sext i32 %71 to i64, !dbg !48
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !48
  %74 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !20
  %75 = insertelement <2 x i32> %74, i32 %17, i64 1, !dbg !20
  %76 = srem <2 x i32> %75, splat (i32 31), !dbg !20
  %77 = extractelement <2 x i32> %76, i64 1, !dbg !21
  %78 = icmp sgt i32 %77, -1, !dbg !22
  %79 = extractelement <2 x i32> %76, i64 0, !dbg !21
  %80 = shl nsw i32 %79, 1, !dbg !23
  %81 = icmp sgt i32 %79, -1, !dbg !24
  %82 = or i32 %77, %79, !dbg !21
  %83 = icmp sgt i32 %82, -1, !dbg !21
  %84 = mul nsw i32 %77, 124, !dbg !25
  %85 = add i32 %84, %29, !dbg !26
  %86 = add i32 %85, %80, !dbg !27
  %87 = sext i32 %86 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !28
  %89 = and i1 %83, %14, !dbg !29
  %90 = or disjoint i32 %85, 1, !dbg !31
  %91 = add i32 %90, %80, !dbg !32
  %92 = sext i32 %91 to i64, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !33
  %94 = add nsw <2 x i32> %76, splat (i32 1), !dbg !34
  %95 = icmp ult <2 x i32> %94, splat (i32 31), !dbg !34
  %96 = extractelement <2 x i1> %95, i64 0, !dbg !35
  %97 = and i1 %78, %96, !dbg !35
  %98 = or disjoint i32 %85, 2, !dbg !36
  %99 = add i32 %98, %80, !dbg !37
  %100 = sext i32 %99 to i64, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !38
  %102 = and i1 %97, %14, !dbg !39
  %103 = add i32 %85, 62, !dbg !40
  %104 = add i32 %103, %80, !dbg !41
  %105 = sext i32 %104 to i64, !dbg !42
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !42
  %107 = add i32 %85, 63, !dbg !43
  %108 = add i32 %107, %80, !dbg !44
  %109 = sext i32 %108 to i64, !dbg !45
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !45
  %111 = add i32 %85, 64, !dbg !46
  %112 = add i32 %111, %80, !dbg !47
  %113 = sext i32 %112 to i64, !dbg !48
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !48
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %89, i32 -8388608, i1 %89) #1, !dbg !30
  %116 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !20
  %117 = insertelement <2 x i32> %116, i32 %18, i64 1, !dbg !20
  %118 = srem <2 x i32> %117, splat (i32 31), !dbg !20
  %119 = extractelement <2 x i32> %118, i64 1, !dbg !21
  %120 = icmp sgt i32 %119, -1, !dbg !22
  %121 = extractelement <2 x i32> %118, i64 0, !dbg !21
  %122 = shl nsw i32 %121, 1, !dbg !23
  %123 = icmp sgt i32 %121, -1, !dbg !24
  %124 = or i32 %119, %121, !dbg !21
  %125 = icmp sgt i32 %124, -1, !dbg !21
  %126 = mul nsw i32 %119, 124, !dbg !25
  %127 = add i32 %126, %30, !dbg !26
  %128 = add i32 %127, %122, !dbg !27
  %129 = sext i32 %128 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !28
  %131 = and i1 %15, %125, !dbg !29
  %132 = or disjoint i32 %127, 1, !dbg !31
  %133 = add i32 %132, %122, !dbg !32
  %134 = sext i32 %133 to i64, !dbg !33
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !33
  %136 = add nsw <2 x i32> %118, splat (i32 1), !dbg !34
  %137 = icmp ult <2 x i32> %136, splat (i32 31), !dbg !34
  %138 = extractelement <2 x i1> %137, i64 0, !dbg !35
  %139 = and i1 %120, %138, !dbg !35
  %140 = or disjoint i32 %127, 2, !dbg !36
  %141 = add i32 %140, %122, !dbg !37
  %142 = sext i32 %141 to i64, !dbg !38
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !38
  %144 = and i1 %15, %139, !dbg !39
  %145 = add i32 %127, 62, !dbg !40
  %146 = add i32 %145, %122, !dbg !41
  %147 = sext i32 %146 to i64, !dbg !42
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !42
  %149 = add i32 %127, 63, !dbg !43
  %150 = add i32 %149, %122, !dbg !44
  %151 = sext i32 %150 to i64, !dbg !45
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !45
  %153 = add i32 %127, 64, !dbg !46
  %154 = add i32 %153, %122, !dbg !47
  %155 = sext i32 %154 to i64, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !48
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %131, i32 -8388608, i1 %131) #1, !dbg !30
  %158 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !20
  %159 = insertelement <2 x i32> %158, i32 %19, i64 1, !dbg !20
  %160 = srem <2 x i32> %159, splat (i32 31), !dbg !20
  %161 = extractelement <2 x i32> %160, i64 1, !dbg !21
  %162 = icmp sgt i32 %161, -1, !dbg !22
  %163 = extractelement <2 x i32> %160, i64 0, !dbg !21
  %164 = shl nsw i32 %163, 1, !dbg !23
  %165 = icmp sgt i32 %163, -1, !dbg !24
  %166 = or i32 %161, %163, !dbg !21
  %167 = icmp sgt i32 %166, -1, !dbg !21
  %168 = mul nsw i32 %161, 124, !dbg !25
  %169 = add i32 %168, %31, !dbg !26
  %170 = add i32 %169, %164, !dbg !27
  %171 = sext i32 %170 to i64, !dbg !28
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !28
  %173 = and i1 %15, %167, !dbg !29
  %174 = or disjoint i32 %169, 1, !dbg !31
  %175 = add i32 %174, %164, !dbg !32
  %176 = sext i32 %175 to i64, !dbg !33
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !33
  %178 = add nsw <2 x i32> %160, splat (i32 1), !dbg !34
  %179 = icmp ult <2 x i32> %178, splat (i32 31), !dbg !34
  %180 = extractelement <2 x i1> %179, i64 0, !dbg !35
  %181 = and i1 %162, %180, !dbg !35
  %182 = or disjoint i32 %169, 2, !dbg !36
  %183 = add i32 %182, %164, !dbg !37
  %184 = sext i32 %183 to i64, !dbg !38
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !38
  %186 = and i1 %15, %181, !dbg !39
  %187 = add i32 %169, 62, !dbg !40
  %188 = add i32 %187, %164, !dbg !41
  %189 = sext i32 %188 to i64, !dbg !42
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !42
  %191 = add i32 %169, 63, !dbg !43
  %192 = add i32 %191, %164, !dbg !44
  %193 = sext i32 %192 to i64, !dbg !45
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !45
  %195 = add i32 %169, 64, !dbg !46
  %196 = add i32 %195, %164, !dbg !47
  %197 = sext i32 %196 to i64, !dbg !48
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !48
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %173, i32 -8388608, i1 %173) #1, !dbg !30
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %47, i32 -8388608, i1 %47) #1, !dbg !49
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %89, i32 -8388608, i1 %89) #1, !dbg !49
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %131, i32 -8388608, i1 %131) #1, !dbg !49
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %173, i32 -8388608, i1 %173) #1, !dbg !49
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 -8388608, i1 %61) #1, !dbg !50
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %102, i32 -8388608, i1 %102) #1, !dbg !50
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %144, i32 -8388608, i1 %144) #1, !dbg !50
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %186, i32 -8388608, i1 %186) #1, !dbg !50
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %47, i32 -8388608, i1 %47) #1, !dbg !51
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %89, i32 -8388608, i1 %89) #1, !dbg !51
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %131, i32 -8388608, i1 %131) #1, !dbg !51
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %173, i32 -8388608, i1 %173) #1, !dbg !51
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %47, i32 -8388608, i1 %47) #1, !dbg !52
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %89, i32 -8388608, i1 %89) #1, !dbg !52
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %131, i32 -8388608, i1 %131) #1, !dbg !52
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %173, i32 -8388608, i1 %173) #1, !dbg !52
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %61, i32 -8388608, i1 %61) #1, !dbg !53
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %102, i32 -8388608, i1 %102) #1, !dbg !53
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %144, i32 -8388608, i1 %144) #1, !dbg !53
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %186, i32 -8388608, i1 %186) #1, !dbg !53
  %220 = extractelement <2 x i1> %54, i64 1, !dbg !54
  %221 = and i1 %39, %220, !dbg !54
  %222 = extractelement <2 x i1> %95, i64 1, !dbg !54
  %223 = and i1 %81, %222, !dbg !54
  %224 = extractelement <2 x i1> %137, i64 1, !dbg !54
  %225 = and i1 %123, %224, !dbg !54
  %226 = extractelement <2 x i1> %179, i64 1, !dbg !54
  %227 = and i1 %165, %226, !dbg !54
  %228 = add i32 %43, 124, !dbg !55
  %229 = add i32 %228, %38, !dbg !56
  %230 = add i32 %85, 124, !dbg !55
  %231 = add i32 %230, %80, !dbg !56
  %232 = add i32 %127, 124, !dbg !55
  %233 = add i32 %232, %122, !dbg !56
  %234 = add i32 %169, 124, !dbg !55
  %235 = add i32 %234, %164, !dbg !56
  %236 = sext i32 %229 to i64, !dbg !57
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !57
  %238 = sext i32 %231 to i64, !dbg !57
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !57
  %240 = sext i32 %233 to i64, !dbg !57
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !57
  %242 = sext i32 %235 to i64, !dbg !57
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !57
  %244 = and i1 %14, %221, !dbg !58
  %245 = and i1 %223, %14, !dbg !58
  %246 = and i1 %15, %225, !dbg !58
  %247 = and i1 %15, %227, !dbg !58
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %244, i32 -8388608, i1 %244) #1, !dbg !59
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %245, i32 -8388608, i1 %245) #1, !dbg !59
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %246, i32 -8388608, i1 %246) #1, !dbg !59
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %247, i32 -8388608, i1 %247) #1, !dbg !59
  %252 = add i32 %43, 125, !dbg !60
  %253 = add i32 %252, %38, !dbg !61
  %254 = add i32 %85, 125, !dbg !60
  %255 = add i32 %254, %80, !dbg !61
  %256 = add i32 %127, 125, !dbg !60
  %257 = add i32 %256, %122, !dbg !61
  %258 = add i32 %169, 125, !dbg !60
  %259 = add i32 %258, %164, !dbg !61
  %260 = sext i32 %253 to i64, !dbg !62
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !62
  %262 = sext i32 %255 to i64, !dbg !62
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !62
  %264 = sext i32 %257 to i64, !dbg !62
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !62
  %266 = sext i32 %259 to i64, !dbg !62
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !62
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %244, i32 -8388608, i1 %244) #1, !dbg !63
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %245, i32 -8388608, i1 %245) #1, !dbg !63
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %246, i32 -8388608, i1 %246) #1, !dbg !63
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %247, i32 -8388608, i1 %247) #1, !dbg !63
  %272 = and i1 %55, %220, !dbg !64
  %273 = and i1 %96, %222, !dbg !64
  %274 = and i1 %138, %224, !dbg !64
  %275 = and i1 %180, %226, !dbg !64
  %276 = add i32 %43, 126, !dbg !65
  %277 = add i32 %276, %38, !dbg !66
  %278 = add i32 %85, 126, !dbg !65
  %279 = add i32 %278, %80, !dbg !66
  %280 = add i32 %127, 126, !dbg !65
  %281 = add i32 %280, %122, !dbg !66
  %282 = add i32 %169, 126, !dbg !65
  %283 = add i32 %282, %164, !dbg !66
  %284 = sext i32 %277 to i64, !dbg !67
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !67
  %286 = sext i32 %279 to i64, !dbg !67
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !67
  %288 = sext i32 %281 to i64, !dbg !67
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !67
  %290 = sext i32 %283 to i64, !dbg !67
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !67
  %292 = and i1 %14, %272, !dbg !68
  %293 = and i1 %273, %14, !dbg !68
  %294 = and i1 %15, %274, !dbg !68
  %295 = and i1 %15, %275, !dbg !68
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %292, i32 -8388608, i1 %292) #1, !dbg !69
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %293, i32 -8388608, i1 %293) #1, !dbg !69
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %294, i32 -8388608, i1 %294) #1, !dbg !69
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %295, i32 -8388608, i1 %295) #1, !dbg !69
  %300 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !30
  %301 = insertelement <2 x i32> %300, i32 %115, i64 1, !dbg !30
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !30
  %303 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !49
  %304 = insertelement <2 x i32> %303, i32 %201, i64 1, !dbg !49
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !49
  %306 = fcmp ogt <2 x float> %305, %302, !dbg !70
  %307 = fcmp uno <2 x float> %305, zeroinitializer, !dbg !74
  %308 = or <2 x i1> %306, %307, !dbg !75
  %.v = select <2 x i1> %308, <2 x i32> %304, <2 x i32> %301, !dbg !76
  %309 = bitcast <2 x i32> %.v to <2 x float>, !dbg !76
  %310 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !50
  %311 = insertelement <2 x i32> %310, i32 %205, i64 1, !dbg !50
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !50
  %313 = fcmp olt <2 x float> %309, %312, !dbg !77
  %314 = fcmp uno <2 x float> %312, zeroinitializer, !dbg !79
  %315 = or <2 x i1> %313, %314, !dbg !80
  %.v1 = select <2 x i1> %315, <2 x i32> %311, <2 x i32> %.v, !dbg !81
  %316 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !81
  %317 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !51
  %318 = insertelement <2 x i32> %317, i32 %209, i64 1, !dbg !51
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !51
  %320 = fcmp olt <2 x float> %316, %319, !dbg !82
  %321 = fcmp uno <2 x float> %319, zeroinitializer, !dbg !84
  %322 = or <2 x i1> %320, %321, !dbg !85
  %.v2 = select <2 x i1> %322, <2 x i32> %318, <2 x i32> %.v1, !dbg !86
  %323 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !86
  %324 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !52
  %325 = insertelement <2 x i32> %324, i32 %213, i64 1, !dbg !52
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !52
  %327 = fcmp olt <2 x float> %323, %326, !dbg !87
  %328 = fcmp uno <2 x float> %326, zeroinitializer, !dbg !89
  %329 = or <2 x i1> %327, %328, !dbg !90
  %.v3 = select <2 x i1> %329, <2 x i32> %325, <2 x i32> %.v2, !dbg !91
  %330 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !91
  %331 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !53
  %332 = insertelement <2 x i32> %331, i32 %217, i64 1, !dbg !53
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !53
  %334 = fcmp olt <2 x float> %330, %333, !dbg !92
  %335 = fcmp uno <2 x float> %333, zeroinitializer, !dbg !94
  %336 = or <2 x i1> %334, %335, !dbg !95
  %.v4 = select <2 x i1> %336, <2 x i32> %332, <2 x i32> %.v3, !dbg !96
  %337 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !96
  %338 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !59
  %339 = insertelement <2 x i32> %338, i32 %249, i64 1, !dbg !59
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !59
  %341 = fcmp olt <2 x float> %337, %340, !dbg !97
  %342 = fcmp uno <2 x float> %340, zeroinitializer, !dbg !99
  %343 = or <2 x i1> %341, %342, !dbg !100
  %.v5 = select <2 x i1> %343, <2 x i32> %339, <2 x i32> %.v4, !dbg !101
  %344 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !101
  %345 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !63
  %346 = insertelement <2 x i32> %345, i32 %269, i64 1, !dbg !63
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !63
  %348 = fcmp olt <2 x float> %344, %347, !dbg !102
  %349 = fcmp uno <2 x float> %347, zeroinitializer, !dbg !104
  %350 = or <2 x i1> %348, %349, !dbg !105
  %.v6 = select <2 x i1> %350, <2 x i32> %346, <2 x i32> %.v5, !dbg !106
  %351 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !106
  %352 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !69
  %353 = insertelement <2 x i32> %352, i32 %297, i64 1, !dbg !69
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !69
  %355 = fcmp olt <2 x float> %351, %354, !dbg !107
  %356 = extractelement <2 x i1> %355, i64 0, !dbg !109
  %357 = extractelement <2 x i1> %355, i64 1, !dbg !109
  %358 = zext <2 x i1> %306 to <2 x i8>, !dbg !110
  %359 = select <2 x i1> %313, <2 x i8> splat (i8 2), <2 x i8> %358, !dbg !111
  %360 = select <2 x i1> %320, <2 x i8> splat (i8 3), <2 x i8> %359, !dbg !112
  %361 = select <2 x i1> %327, <2 x i8> splat (i8 4), <2 x i8> %360, !dbg !113
  %362 = select <2 x i1> %334, <2 x i8> splat (i8 5), <2 x i8> %361, !dbg !114
  %363 = select <2 x i1> %341, <2 x i8> splat (i8 6), <2 x i8> %362, !dbg !115
  %364 = select <2 x i1> %348, <2 x i8> splat (i8 7), <2 x i8> %363, !dbg !116
  %365 = select <2 x i1> %355, <2 x i8> splat (i8 8), <2 x i8> %364, !dbg !117
  %366 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !30
  %367 = insertelement <2 x i32> %366, i32 %199, i64 1, !dbg !30
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !30
  %369 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !49
  %370 = insertelement <2 x i32> %369, i32 %203, i64 1, !dbg !49
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !49
  %372 = fcmp ogt <2 x float> %371, %368, !dbg !70
  %373 = fcmp uno <2 x float> %371, zeroinitializer, !dbg !74
  %374 = or <2 x i1> %372, %373, !dbg !75
  %.v7 = select <2 x i1> %374, <2 x i32> %370, <2 x i32> %367, !dbg !76
  %375 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !76
  %376 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !50
  %377 = insertelement <2 x i32> %376, i32 %207, i64 1, !dbg !50
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !50
  %379 = fcmp olt <2 x float> %375, %378, !dbg !77
  %380 = fcmp uno <2 x float> %378, zeroinitializer, !dbg !79
  %381 = or <2 x i1> %379, %380, !dbg !80
  %.v8 = select <2 x i1> %381, <2 x i32> %377, <2 x i32> %.v7, !dbg !81
  %382 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !81
  %383 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !51
  %384 = insertelement <2 x i32> %383, i32 %211, i64 1, !dbg !51
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !51
  %386 = fcmp olt <2 x float> %382, %385, !dbg !82
  %387 = fcmp uno <2 x float> %385, zeroinitializer, !dbg !84
  %388 = or <2 x i1> %386, %387, !dbg !85
  %.v9 = select <2 x i1> %388, <2 x i32> %384, <2 x i32> %.v8, !dbg !86
  %389 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !86
  %390 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !52
  %391 = insertelement <2 x i32> %390, i32 %215, i64 1, !dbg !52
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !52
  %393 = fcmp olt <2 x float> %389, %392, !dbg !87
  %394 = fcmp uno <2 x float> %392, zeroinitializer, !dbg !89
  %395 = or <2 x i1> %393, %394, !dbg !90
  %.v10 = select <2 x i1> %395, <2 x i32> %391, <2 x i32> %.v9, !dbg !91
  %396 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !91
  %397 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !53
  %398 = insertelement <2 x i32> %397, i32 %219, i64 1, !dbg !53
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !53
  %400 = fcmp olt <2 x float> %396, %399, !dbg !92
  %401 = fcmp uno <2 x float> %399, zeroinitializer, !dbg !94
  %402 = or <2 x i1> %400, %401, !dbg !95
  %.v11 = select <2 x i1> %402, <2 x i32> %398, <2 x i32> %.v10, !dbg !96
  %403 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !96
  %404 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !59
  %405 = insertelement <2 x i32> %404, i32 %251, i64 1, !dbg !59
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !59
  %407 = fcmp olt <2 x float> %403, %406, !dbg !97
  %408 = fcmp uno <2 x float> %406, zeroinitializer, !dbg !99
  %409 = or <2 x i1> %407, %408, !dbg !100
  %.v12 = select <2 x i1> %409, <2 x i32> %405, <2 x i32> %.v11, !dbg !101
  %410 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !101
  %411 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !63
  %412 = insertelement <2 x i32> %411, i32 %271, i64 1, !dbg !63
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !63
  %414 = fcmp olt <2 x float> %410, %413, !dbg !102
  %415 = fcmp uno <2 x float> %413, zeroinitializer, !dbg !104
  %416 = or <2 x i1> %414, %415, !dbg !105
  %.v13 = select <2 x i1> %416, <2 x i32> %412, <2 x i32> %.v12, !dbg !106
  %417 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !106
  %418 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !69
  %419 = insertelement <2 x i32> %418, i32 %299, i64 1, !dbg !69
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !69
  %421 = fcmp olt <2 x float> %417, %420, !dbg !107
  %422 = shufflevector <2 x float> %420, <2 x float> %354, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !118
  %423 = fcmp uno <4 x float> %422, zeroinitializer, !dbg !118
  %424 = extractelement <4 x i1> %423, i64 3, !dbg !109
  %425 = or i1 %356, %424, !dbg !109
  %426 = extractelement <4 x i1> %423, i64 2, !dbg !109
  %427 = or i1 %357, %426, !dbg !109
  %428 = extractelement <2 x i1> %421, i64 0, !dbg !109
  %429 = extractelement <4 x i1> %423, i64 1, !dbg !109
  %430 = or i1 %428, %429, !dbg !109
  %431 = extractelement <2 x i1> %421, i64 1, !dbg !109
  %432 = extractelement <4 x i1> %423, i64 0, !dbg !109
  %433 = or i1 %431, %432, !dbg !109
  %434 = zext <2 x i1> %372 to <2 x i8>, !dbg !110
  %435 = select <2 x i1> %379, <2 x i8> splat (i8 2), <2 x i8> %434, !dbg !111
  %436 = select <2 x i1> %386, <2 x i8> splat (i8 3), <2 x i8> %435, !dbg !112
  %437 = select <2 x i1> %393, <2 x i8> splat (i8 4), <2 x i8> %436, !dbg !113
  %438 = select <2 x i1> %400, <2 x i8> splat (i8 5), <2 x i8> %437, !dbg !114
  %439 = select <2 x i1> %407, <2 x i8> splat (i8 6), <2 x i8> %438, !dbg !115
  %440 = select <2 x i1> %414, <2 x i8> splat (i8 7), <2 x i8> %439, !dbg !116
  %441 = select <2 x i1> %421, <2 x i8> splat (i8 8), <2 x i8> %440, !dbg !117
  %442 = mul i32 %24, 9632, !dbg !119
  %443 = mul i32 %25, 9632, !dbg !119
  %444 = add i32 %442, %.decomposed, !dbg !120
  %445 = add i32 %443, %.decomposed15, !dbg !120
  %446 = sext i32 %444 to i64, !dbg !121
  %447 = getelementptr float, ptr addrspace(1) %1, i64 %446, !dbg !121
  %448 = sext i32 %445 to i64, !dbg !121
  %449 = getelementptr float, ptr addrspace(1) %1, i64 %448, !dbg !121
  %450 = extractelement <2 x i32> %.v6, i64 0, !dbg !122
  %451 = select i1 %425, i32 %296, i32 %450, !dbg !123
  %452 = extractelement <2 x i32> %.v6, i64 1, !dbg !122
  %453 = select i1 %427, i32 %297, i32 %452, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %451, i32 %453, ptr addrspace(1) %447, i1 %14) #1, !dbg !122
  %454 = extractelement <2 x i32> %.v13, i64 0, !dbg !122
  %455 = select i1 %430, i32 %298, i32 %454, !dbg !123
  %456 = extractelement <2 x i32> %.v13, i64 1, !dbg !122
  %457 = select i1 %433, i32 %299, i32 %456, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %455, i32 %457, ptr addrspace(1) %449, i1 %15) #1, !dbg !122
  %458 = mul i32 %24, 9728, !dbg !124
  %459 = mul i32 %25, 9728, !dbg !124
  %460 = add i32 %458, %.decomposed, !dbg !125
  %461 = add i32 %459, %.decomposed15, !dbg !125
  %462 = sext i32 %460 to i64, !dbg !126
  %463 = getelementptr i8, ptr addrspace(1) %2, i64 %462, !dbg !126
  %464 = sext i32 %461 to i64, !dbg !126
  %465 = getelementptr i8, ptr addrspace(1) %2, i64 %464, !dbg !126
  %466 = bitcast <2 x i8> %365 to i16, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %466, ptr addrspace(1) %463, i1 %14) #1, !dbg !127
  %467 = bitcast <2 x i8> %441 to i16, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %467, ptr addrspace(1) %465, i1 %15) #1, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbkzvlpjwzp27nlefirexklpj5xtpcopkghtasqm64cvl6gw5fm5.py", directory: "inductor_cache/bk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 52, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 13, scope: !7)
!24 = !DILocation(line: 36, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 42, scope: !7)
!26 = !DILocation(line: 40, column: 38, scope: !7)
!27 = !DILocation(line: 40, column: 47, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 65, scope: !7)
!30 = !DILocation(line: 40, column: 57, scope: !7)
!31 = !DILocation(line: 46, column: 42, scope: !7)
!32 = !DILocation(line: 46, column: 51, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 19, scope: !7)
!36 = !DILocation(line: 53, column: 42, scope: !7)
!37 = !DILocation(line: 53, column: 51, scope: !7)
!38 = !DILocation(line: 53, column: 31, scope: !7)
!39 = !DILocation(line: 53, column: 69, scope: !7)
!40 = !DILocation(line: 60, column: 43, scope: !7)
!41 = !DILocation(line: 60, column: 52, scope: !7)
!42 = !DILocation(line: 60, column: 31, scope: !7)
!43 = !DILocation(line: 63, column: 43, scope: !7)
!44 = !DILocation(line: 63, column: 52, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 66, column: 43, scope: !7)
!47 = !DILocation(line: 66, column: 52, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 46, column: 61, scope: !7)
!50 = !DILocation(line: 53, column: 61, scope: !7)
!51 = !DILocation(line: 60, column: 62, scope: !7)
!52 = !DILocation(line: 63, column: 62, scope: !7)
!53 = !DILocation(line: 66, column: 62, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 44, scope: !7)
!56 = !DILocation(line: 73, column: 53, scope: !7)
!57 = !DILocation(line: 73, column: 31, scope: !7)
!58 = !DILocation(line: 73, column: 71, scope: !7)
!59 = !DILocation(line: 73, column: 63, scope: !7)
!60 = !DILocation(line: 76, column: 44, scope: !7)
!61 = !DILocation(line: 76, column: 53, scope: !7)
!62 = !DILocation(line: 76, column: 31, scope: !7)
!63 = !DILocation(line: 76, column: 63, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 79, column: 44, scope: !7)
!66 = !DILocation(line: 79, column: 53, scope: !7)
!67 = !DILocation(line: 79, column: 31, scope: !7)
!68 = !DILocation(line: 79, column: 71, scope: !7)
!69 = !DILocation(line: 79, column: 63, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 47, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !78)
!78 = !DILocation(line: 54, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !83)
!83 = !DILocation(line: 61, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !88)
!88 = !DILocation(line: 64, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !93)
!93 = !DILocation(line: 67, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !98)
!98 = !DILocation(line: 74, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !103)
!103 = !DILocation(line: 77, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !108)
!108 = !DILocation(line: 80, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !108)
!110 = !DILocation(line: 84, column: 35, scope: !7)
!111 = !DILocation(line: 87, column: 35, scope: !7)
!112 = !DILocation(line: 90, column: 35, scope: !7)
!113 = !DILocation(line: 93, column: 35, scope: !7)
!114 = !DILocation(line: 96, column: 35, scope: !7)
!115 = !DILocation(line: 99, column: 35, scope: !7)
!116 = !DILocation(line: 102, column: 35, scope: !7)
!117 = !DILocation(line: 105, column: 35, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !108)
!119 = !DILocation(line: 106, column: 35, scope: !7)
!120 = !DILocation(line: 106, column: 30, scope: !7)
!121 = !DILocation(line: 106, column: 25, scope: !7)
!122 = !DILocation(line: 106, column: 47, scope: !7)
!123 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !108)
!124 = !DILocation(line: 107, column: 35, scope: !7)
!125 = !DILocation(line: 107, column: 30, scope: !7)
!126 = !DILocation(line: 107, column: 25, scope: !7)
!127 = !DILocation(line: 107, column: 47, scope: !7)
!128 = !DILocation(line: 107, column: 4, scope: !7)
