#loc = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":42:24)
#loc43 = loc(callsite(#loc1 at #loc28))
module {
  tt.func public @triton_per_fused_add_mul_pow_rsqrt_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0), %arg5: i32 loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999993E-9> : tensor<8x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<8x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<8x64xf32> loc(#loc1)
    %cst_2 = arith.constant dense<36> : tensor<8x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<9> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<8x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<36> : tensor<1x64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_6 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_5 : tensor<1x64xi32> loc(#loc10)
    %10 = arith.remsi %5, %cst_4 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.divsi %8, %cst_3 : tensor<1x64xi32> loc(#loc12)
    %12 = arith.divsi %5, %cst_4 : tensor<8x1xi32> loc(#loc13)
    %13 = arith.muli %10, %cst_2 : tensor<8x1xi32> loc(#loc14)
    %14 = tt.broadcast %8 : tensor<1x64xi32> -> tensor<8x64xi32> loc(#loc15)
    %15 = tt.broadcast %13 : tensor<8x1xi32> -> tensor<8x64xi32> loc(#loc15)
    %16 = arith.addi %14, %15 : tensor<8x64xi32> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc16)
    %18 = tt.addptr %17, %16 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc16)
    %19 = tt.broadcast %9 : tensor<1x64xi1> -> tensor<8x64xi1> loc(#loc17)
    %20 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x64xi1> loc(#loc17)
    %21 = arith.andi %19, %20 : tensor<8x64xi1> loc(#loc17)
    %22 = tt.load %18, %21, %cst_1 evictionPolicy = evict_last : tensor<8x64x!tt.ptr<f32>> loc(#loc18)
    %23 = arith.muli %12, %cst_4 : tensor<8x1xi32> loc(#loc19)
    %24 = tt.broadcast %11 : tensor<1x64xi32> -> tensor<8x64xi32> loc(#loc20)
    %25 = tt.broadcast %23 : tensor<8x1xi32> -> tensor<8x64xi32> loc(#loc20)
    %26 = arith.addi %24, %25 : tensor<8x64xi32> loc(#loc20)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc21)
    %28 = tt.addptr %27, %26 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc21)
    %29 = tt.load %28, %21, %cst_1 evictionPolicy = evict_last : tensor<8x64x!tt.ptr<f32>> loc(#loc22)
    %30 = arith.addf %29, %cst_0 : tensor<8x64xf32> loc(#loc23)
    %31 = arith.mulf %22, %30 : tensor<8x64xf32> loc(#loc24)
    %32 = arith.mulf %31, %31 : tensor<8x64xf32> loc(#loc25)
    %33 = arith.select %21, %32, %cst_1 : tensor<8x64xi1>, tensor<8x64xf32> loc(#loc26)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc28)), %arg7: f32 loc(callsite(#loc1 at #loc28))):
      %47 = arith.addf %arg6, %arg7 : f32 loc(#loc45)
      tt.reduce.return %47 : f32 loc(#loc42)
    }) : (tensor<8x64xf32>) -> tensor<8xf32> loc(#loc42)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc30)
    %36 = arith.addf %35, %cst : tensor<8x1xf32> loc(#loc31)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32>) -> tensor<8x1xf32> loc(#loc32)
    %38 = tt.broadcast %37 : tensor<8x1xf32> -> tensor<8x64xf32> loc(#loc33)
    %39 = arith.mulf %31, %38 : tensor<8x64xf32> loc(#loc33)
    gpu.barrier loc(#loc34)
    %40 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc35)
    %41 = tt.addptr %40, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc35)
    tt.store %41, %37, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc36)
    %42 = arith.muli %5, %cst_2 : tensor<8x1xi32> loc(#loc37)
    %43 = tt.broadcast %42 : tensor<8x1xi32> -> tensor<8x64xi32> loc(#loc38)
    %44 = arith.addi %14, %43 : tensor<8x64xi32> loc(#loc38)
    %45 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>> loc(#loc39)
    %46 = tt.addptr %45, %44 : tensor<8x64x!tt.ptr<f32>>, tensor<8x64xi32> loc(#loc39)
    tt.store %46, %39, %21 : tensor<8x64x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":23:28)
#loc3 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":23:33)
#loc4 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":24:36)
#loc5 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":24:44)
#loc6 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":24:23)
#loc7 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":25:21)
#loc8 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":26:26)
#loc9 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":26:34)
#loc10 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":28:21)
#loc11 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":30:19)
#loc12 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":31:19)
#loc13 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":32:19)
#loc14 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":34:38)
#loc15 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":34:35)
#loc16 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":34:30)
#loc17 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":34:51)
#loc18 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":34:43)
#loc19 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":35:37)
#loc20 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":35:35)
#loc21 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":35:30)
#loc22 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":35:42)
#loc23 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":37:18)
#loc24 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":38:18)
#loc25 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":39:18)
#loc26 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":41:41)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc30 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":42:27)
#loc31 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":44:19)
#loc32 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":45:28)
#loc33 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":46:19)
#loc34 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":47:4)
#loc35 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":48:28)
#loc36 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":48:40)
#loc37 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":49:33)
#loc38 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":49:30)
#loc39 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":49:25)
#loc40 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":49:45)
#loc41 = loc("inductor_cache/bw/cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py":49:4)
#loc42 = loc(callsite(#loc27 at #loc28))
#loc44 = loc(callsite(#loc29 at #loc27))
#loc45 = loc(callsite(#loc44 at #loc28))
