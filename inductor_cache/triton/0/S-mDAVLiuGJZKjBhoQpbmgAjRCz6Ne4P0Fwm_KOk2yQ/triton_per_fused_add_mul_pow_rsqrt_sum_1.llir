; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_mul_pow_rsqrt_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = lshr i32 %9, 5, !dbg !12
  %.lobit14 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %.lobit14, 3, !dbg !12
  %14 = and i32 %9, 64, !dbg !12
  %15 = lshr exact i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %16, %8, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = lshr i32 %9, 3, !dbg !15
  %.lobit2 = and i32 %21, 1, !dbg !15
  %22 = lshr i32 %9, 3, !dbg !15
  %23 = and i32 %22, 2, !dbg !15
  %24 = or disjoint i32 %.lobit2, %23, !dbg !15
  %25 = lshr i32 %9, 3, !dbg !15
  %26 = and i32 %25, 4, !dbg !15
  %27 = or disjoint i32 %24, %26, !dbg !15
  %28 = lshr exact i32 %14, 3, !dbg !15
  %29 = or disjoint i32 %27, %28, !dbg !15
  %30 = or disjoint i32 %29, 32, !dbg !15
  %31 = shl i32 %9, 2, !dbg !15
  %32 = and i32 %31, 60, !dbg !15
  %33 = icmp samesign ult i32 %30, 36, !dbg !16
  %34 = icmp samesign ult i32 %32, 36, !dbg !16
  %35 = srem i32 %18, 4, !dbg !17
  %.cmp = icmp samesign ugt i32 %29, 8, !dbg !18
  %36 = zext i1 %.cmp to i32, !dbg !18
  %37 = trunc nuw nsw i32 %29 to i8, !dbg !18
  %.lhs.trunc = or disjoint i8 %37, 16, !dbg !18
  %38 = udiv i8 %.lhs.trunc, 9, !dbg !18
  %.zext = zext nneg i8 %38 to i32, !dbg !18
  %.lhs.trunc10 = trunc nuw nsw i32 %30 to i8, !dbg !18
  %39 = udiv i8 %.lhs.trunc10, 9, !dbg !18
  %.zext11 = zext nneg i8 %39 to i32, !dbg !18
  %.lhs.trunc12 = or disjoint i8 %37, 48, !dbg !18
  %40 = udiv i8 %.lhs.trunc12, 9, !dbg !18
  %.zext13 = zext nneg i8 %40 to i32, !dbg !18
  %41 = sdiv i32 %17, 4, !dbg !19
  %42 = mul nsw i32 %35, 36, !dbg !20
  %43 = add nsw i32 %42, %32, !dbg !21
  %44 = sext i32 %43 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = and i1 %33, %19, !dbg !23
  %47 = and i1 %34, %20, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %53 = shl i32 %9, 5, !dbg !24
  %54 = and i32 %53, 480, !dbg !24
  %55 = or disjoint i32 %13, %54, !dbg !24
  %56 = or disjoint i32 %55, %15, !dbg !24
  %57 = and i32 %9, 127, !dbg !24
  %58 = lshr exact i32 %54, 1, !dbg !24
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %56, !dbg !24
  %61 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #5, !dbg !24
  %62 = or disjoint i32 %56, 8, !dbg !24
  %63 = lshr i32 %62, 3, !dbg !24
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !24
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %62, !dbg !24
  %66 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #5, !dbg !24
  %67 = or disjoint i32 %56, 16, !dbg !24
  %68 = lshr i32 %67, 3, !dbg !24
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !24
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67, !dbg !24
  %71 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #5, !dbg !24
  %72 = or disjoint i32 %56, 24, !dbg !24
  %73 = lshr i32 %72, 3, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %72, !dbg !24
  %76 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %77 = lshr i32 %57, 3, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %57, !dbg !24
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !24
  %81 = or disjoint i32 %57, 128, !dbg !24
  %82 = lshr i32 %81, 3, !dbg !24
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %81, !dbg !24
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !24
  %86 = or disjoint i32 %57, 256, !dbg !24
  %87 = lshr i32 %86, 3, !dbg !24
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !24
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = or disjoint i32 %57, 384, !dbg !24
  %92 = lshr i32 %91, 3, !dbg !24
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !24
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %91, !dbg !24
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !24
  %96 = shl nsw i32 %41, 2, !dbg !25
  %97 = or disjoint i32 %96, %36, !dbg !26
  %98 = add nsw i32 %96, %.zext, !dbg !26
  %99 = add i32 %96, %.zext11, !dbg !26
  %100 = add i32 %96, %.zext13, !dbg !26
  %101 = sext i32 %97 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !27
  %103 = sext i32 %98 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !27
  %105 = sext i32 %99 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !27
  %107 = sext i32 %100 to i64, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %19, i32 0, i1 %19) #5, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %19, i32 0, i1 %19) #5, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %46, i32 0, i1 %46) #5, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 false, i32 0, i1 false) #5, !dbg !28
  %116 = fadd float %110, 1.000000e+00, !dbg !29
  %117 = fadd float %112, 1.000000e+00, !dbg !29
  %118 = fadd float %114, 1.000000e+00, !dbg !29
  %119 = fmul float %80, %116, !dbg !30
  %120 = fmul float %85, %117, !dbg !30
  %121 = fmul float %90, %118, !dbg !30
  %122 = fmul float %119, %119, !dbg !31
  %123 = fmul float %120, %120, !dbg !31
  %124 = fmul float %121, %121, !dbg !31
  %125 = select i1 %46, float %124, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %126 = fadd float %122, %123, !dbg !37
  %127 = select i1 %19, float %126, float 0.000000e+00, !dbg !37
  %128 = fadd float %127, %125, !dbg !37
  %129 = bitcast float %128 to i32, !dbg !33
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = fadd float %128, %131, !dbg !37
  %133 = bitcast float %132 to i32, !dbg !33
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !33
  %135 = bitcast i32 %134 to float, !dbg !33
  %136 = fadd float %132, %135, !dbg !37
  %137 = icmp samesign ult i32 %10, 8, !dbg !33
  %138 = and i32 %12, 3, !dbg !33
  %139 = shl nuw nsw i32 %11, 2, !dbg !33
  %140 = or disjoint i32 %139, %138, !dbg !33
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !33
  %142 = bitcast float %136 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 %137) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %143 = icmp slt i32 %9, 32, !dbg !33
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !33
  %145 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %144, i1 %143) #5, !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !33
  %148 = bitcast i32 %147 to float, !dbg !33
  %149 = fadd float %146, %148, !dbg !37
  %150 = bitcast float %149 to i32, !dbg !33
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !33
  %152 = bitcast i32 %151 to float, !dbg !33
  %153 = fadd float %149, %152, !dbg !37
  %154 = and i32 %9, 3, !dbg !33
  %155 = icmp eq i32 %154, 0, !dbg !33
  %156 = and i1 %143, %155, !dbg !33
  %157 = bitcast float %153 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %157, i1 %156) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !33
  %159 = load float, ptr addrspace(3) %158, align 16, !dbg !33
  %160 = fadd float %159, 0x3E45798EE0000000, !dbg !39
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %161, 0, !dbg !40
  br i1 %.not.i, label %164, label %162, !dbg !40

162:                                              ; preds = %6
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %160), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

164:                                              ; preds = %6
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %160), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %162, %164
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], !dbg !40
  %166 = lshr i32 %10, 3, !dbg !33
  %167 = bitcast i32 %115 to float, !dbg !28
  %168 = fadd float %167, 1.000000e+00, !dbg !29
  %169 = fmul float %95, %168, !dbg !30
  %170 = fmul float %119, %.0.i, !dbg !41
  %171 = fmul float %120, %.0.i, !dbg !41
  %172 = fmul float %121, %.0.i, !dbg !41
  %173 = fmul float %169, %.0.i, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %174 = sext i32 %17 to i64, !dbg !43
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !43
  %176 = shl nuw nsw i32 %138, 2, !dbg !44
  %177 = or disjoint i32 %176, %166, !dbg !44
  %178 = icmp eq i32 %177, 0, !dbg !44
  %179 = bitcast float %.0.i to i32, !dbg !44
  %180 = and i1 %178, %19, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %175, i1 %180) #5, !dbg !44
  %181 = mul i32 %18, 36, !dbg !45
  %182 = add i32 %181, %32, !dbg !46
  %183 = sext i32 %182 to i64, !dbg !47
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !47
  %185 = shl i32 %9, 6, !dbg !48
  %186 = and i32 %185, 448, !dbg !48
  %187 = or disjoint i32 %186, %.lobit2, !dbg !48
  %188 = or disjoint i32 %187, %23, !dbg !48
  %189 = or disjoint i32 %188, %26, !dbg !48
  %190 = or disjoint i32 %189, %28, !dbg !48
  %191 = and i32 %31, 508, !dbg !48
  %192 = lshr exact i32 %186, 2, !dbg !48
  %193 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %192, !dbg !48
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %190, !dbg !48
  %195 = bitcast float %170 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #5, !dbg !48
  %196 = or disjoint i32 %190, 16, !dbg !48
  %197 = getelementptr float, ptr addrspace(3) %193, i32 %196, !dbg !48
  %198 = bitcast float %171 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #5, !dbg !48
  %199 = or disjoint i32 %190, 32, !dbg !48
  %200 = getelementptr float, ptr addrspace(3) %193, i32 %199, !dbg !48
  %201 = bitcast float %172 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #5, !dbg !48
  %202 = or disjoint i32 %190, 48, !dbg !48
  %203 = getelementptr float, ptr addrspace(3) %193, i32 %202, !dbg !48
  %204 = bitcast float %173 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %205 = lshr i32 %31, 4, !dbg !48
  %206 = and i32 %205, 28, !dbg !48
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !48
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %191, !dbg !48
  %.extract = load i32, ptr addrspace(3) %208, align 16, !dbg !48
  %209 = getelementptr inbounds i8, ptr addrspace(3) %208, i32 4, !dbg !48
  %.extract7 = load i32, ptr addrspace(3) %209, align 4, !dbg !48
  %210 = getelementptr inbounds i8, ptr addrspace(3) %208, i32 8, !dbg !48
  %.extract8 = load i32, ptr addrspace(3) %210, align 8, !dbg !48
  %211 = getelementptr inbounds i8, ptr addrspace(3) %208, i32 12, !dbg !48
  %.extract9 = load i32, ptr addrspace(3) %211, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %184, i1 %47) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py", directory: "inductor_cache/bw")
!4 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_pow_rsqrt_sum_1", linkageName: "triton_per_fused_add_mul_pow_rsqrt_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 51, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 41, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 42, column: 24, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 28, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
!43 = !DILocation(line: 48, column: 28, scope: !7)
!44 = !DILocation(line: 48, column: 40, scope: !7)
!45 = !DILocation(line: 49, column: 33, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 45, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
