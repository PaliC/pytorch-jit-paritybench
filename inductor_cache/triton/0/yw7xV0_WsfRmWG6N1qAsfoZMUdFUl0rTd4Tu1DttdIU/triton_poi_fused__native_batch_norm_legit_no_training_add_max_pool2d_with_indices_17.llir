; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %17 = shufflevector <2 x i32> %16, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %18 = sdiv <2 x i32> %17, <i32 2048, i32 1024>, !dbg !14
  %19 = srem <2 x i32> %18, splat (i32 2), !dbg !15
  %20 = srem i32 %15, 1024, !dbg !16
  %21 = sext i32 %15 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !18
  %24 = sext i32 %20 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !21
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !22
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !22
  %31 = bitcast i32 %29 to float, !dbg !22
  %32 = bitcast i32 %30 to float, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %37 = extractelement <2 x i32> %19, i64 0, !dbg !27
  %38 = icmp sgt i32 %37, 0, !dbg !28
  %39 = extractelement <2 x i32> %19, i64 1, !dbg !27
  %40 = icmp sgt i32 %39, 0, !dbg !29
  %41 = and i1 %38, %40, !dbg !30
  %42 = shl nsw i32 %39, 11, !dbg !31
  %43 = extractelement <2 x i32> %18, i64 0, !dbg !32
  %44 = shl i32 %43, 13, !dbg !32
  %45 = add i32 %44, %20, !dbg !33
  %46 = add i32 %45, -5120, !dbg !34
  %47 = add i32 %46, %42, !dbg !35
  %48 = sext i32 %47 to i64, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !36
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %41, i32 -8388608, i1 %41, i32 -8388608, i1 %41) #3, !dbg !37
  %51 = icmp sgt i32 %39, -1, !dbg !38
  %52 = and i1 %38, %51, !dbg !39
  %53 = add i32 %45, -4096, !dbg !40
  %54 = add i32 %53, %42, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !42
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #3, !dbg !43
  %58 = add i32 %45, -3072, !dbg !44
  %59 = add i32 %58, %42, !dbg !45
  %60 = sext i32 %59 to i64, !dbg !46
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !46
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #3, !dbg !47
  %63 = icmp sgt i32 %37, -1, !dbg !48
  %64 = and i1 %63, %40, !dbg !49
  %65 = add i32 %45, -1024, !dbg !50
  %66 = add i32 %65, %42, !dbg !51
  %67 = sext i32 %66 to i64, !dbg !52
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !52
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64) #3, !dbg !53
  %70 = or i32 %37, %39, !dbg !27
  %71 = icmp sgt i32 %70, -1, !dbg !27
  %72 = add i32 %45, %42, !dbg !54
  %73 = sext i32 %72 to i64, !dbg !55
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !55
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #3, !dbg !56
  %76 = add i32 %45, 1024, !dbg !57
  %77 = add i32 %76, %42, !dbg !58
  %78 = sext i32 %77 to i64, !dbg !59
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !59
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #3, !dbg !60
  %81 = add i32 %45, 3072, !dbg !61
  %82 = add i32 %81, %42, !dbg !62
  %83 = sext i32 %82 to i64, !dbg !63
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !63
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64) #3, !dbg !64
  %86 = add i32 %45, 4096, !dbg !65
  %87 = add i32 %86, %42, !dbg !66
  %88 = sext i32 %87 to i64, !dbg !67
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !67
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #3, !dbg !68
  %91 = add i32 %45, 5120, !dbg !69
  %92 = add i32 %91, %42, !dbg !70
  %93 = sext i32 %92 to i64, !dbg !71
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !71
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #3, !dbg !72
  %96 = fadd float %31, 0x3EE4F8B580000000, !dbg !73
  %97 = fadd float %32, 0x3EE4F8B580000000, !dbg !73
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i = icmp eq i32 %98, 0, !dbg !74
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i = icmp eq i32 %99, 0, !dbg !74
  br i1 %.not.i, label %105, label %100, !dbg !74

100:                                              ; preds = %9
  br i1 %.not1.i, label %103, label %101, !dbg !74

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

105:                                              ; preds = %9
  br i1 %.not1.i, label %108, label %106, !dbg !74

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !74
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i1 = icmp eq i32 %110, 0, !dbg !74
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !74
  br i1 %.not.i1, label %117, label %112, !dbg !74

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !74

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !74

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !74
  %122 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %123 = bitcast i32 %122 to float, !dbg !18
  %124 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %125 = bitcast i32 %124 to float, !dbg !20
  %126 = fsub float %123, %125, !dbg !75
  %127 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %128 = bitcast i32 %127 to float, !dbg !18
  %129 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %130 = bitcast i32 %129 to float, !dbg !20
  %131 = fsub float %128, %130, !dbg !75
  %132 = extractvalue { i32, i32 } %57, 1, !dbg !43
  %133 = extractvalue { i32, i32 } %50, 1, !dbg !37
  %134 = extractvalue { i32, i32 } %62, 1, !dbg !47
  %135 = extractvalue { i32, i32 } %69, 1, !dbg !53
  %136 = extractvalue { i32, i32 } %75, 1, !dbg !56
  %137 = extractvalue { i32, i32 } %80, 1, !dbg !60
  %138 = extractvalue { i32, i32 } %85, 1, !dbg !64
  %139 = extractvalue { i32, i32 } %90, 1, !dbg !68
  %140 = extractvalue { i32, i32 } %95, 1, !dbg !72
  %141 = extractvalue { i32, i32 } %57, 0, !dbg !43
  %142 = extractvalue { i32, i32 } %50, 0, !dbg !37
  %143 = extractvalue { i32, i32 } %62, 0, !dbg !47
  %144 = extractvalue { i32, i32 } %69, 0, !dbg !53
  %145 = extractvalue { i32, i32 } %75, 0, !dbg !56
  %146 = extractvalue { i32, i32 } %80, 0, !dbg !60
  %147 = extractvalue { i32, i32 } %85, 0, !dbg !64
  %148 = extractvalue { i32, i32 } %90, 0, !dbg !68
  %149 = extractvalue { i32, i32 } %95, 0, !dbg !72
  %150 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !43
  %151 = insertelement <2 x i32> %150, i32 %132, i64 1, !dbg !43
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !43
  %153 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !37
  %154 = insertelement <2 x i32> %153, i32 %133, i64 1, !dbg !37
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !37
  %156 = fcmp ogt <2 x float> %152, %155, !dbg !76
  %157 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !53
  %158 = insertelement <2 x i32> %157, i32 %135, i64 1, !dbg !53
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !53
  %160 = fcmp uno <2 x float> %152, zeroinitializer, !dbg !80
  %161 = or <2 x i1> %156, %160, !dbg !81
  %.v = select <2 x i1> %161, <2 x i32> %151, <2 x i32> %154, !dbg !82
  %162 = bitcast <2 x i32> %.v to <2 x float>, !dbg !82
  %163 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !47
  %164 = insertelement <2 x i32> %163, i32 %134, i64 1, !dbg !47
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !47
  %166 = fcmp olt <2 x float> %162, %165, !dbg !83
  %167 = fcmp uno <2 x float> %165, zeroinitializer, !dbg !85
  %168 = or <2 x i1> %167, %166, !dbg !86
  %.v6 = select <2 x i1> %168, <2 x i32> %164, <2 x i32> %.v, !dbg !87
  %169 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !87
  %170 = fcmp olt <2 x float> %169, %159, !dbg !88
  %171 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !56
  %172 = insertelement <2 x i32> %171, i32 %136, i64 1, !dbg !56
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !56
  %174 = fcmp uno <2 x float> %159, zeroinitializer, !dbg !90
  %175 = or <2 x i1> %174, %170, !dbg !91
  %.v7 = select <2 x i1> %175, <2 x i32> %158, <2 x i32> %.v6, !dbg !92
  %176 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !92
  %177 = fcmp olt <2 x float> %176, %173, !dbg !93
  %178 = fcmp uno <2 x float> %173, zeroinitializer, !dbg !95
  %179 = or <2 x i1> %178, %177, !dbg !96
  %.v8 = select <2 x i1> %179, <2 x i32> %172, <2 x i32> %.v7, !dbg !97
  %180 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !97
  %181 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !60
  %182 = insertelement <2 x i32> %181, i32 %137, i64 1, !dbg !60
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !60
  %184 = fcmp olt <2 x float> %180, %183, !dbg !98
  %185 = fcmp uno <2 x float> %183, zeroinitializer, !dbg !100
  %186 = or <2 x i1> %185, %184, !dbg !101
  %.v9 = select <2 x i1> %186, <2 x i32> %182, <2 x i32> %.v8, !dbg !102
  %187 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !102
  %188 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !64
  %189 = insertelement <2 x i32> %188, i32 %138, i64 1, !dbg !64
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !64
  %191 = fcmp olt <2 x float> %187, %190, !dbg !103
  %192 = fcmp uno <2 x float> %190, zeroinitializer, !dbg !105
  %193 = or <2 x i1> %192, %191, !dbg !106
  %.v10 = select <2 x i1> %193, <2 x i32> %189, <2 x i32> %.v9, !dbg !107
  %194 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !107
  %195 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !68
  %196 = insertelement <2 x i32> %195, i32 %139, i64 1, !dbg !68
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !68
  %198 = fcmp olt <2 x float> %194, %197, !dbg !108
  %199 = fcmp uno <2 x float> %197, zeroinitializer, !dbg !110
  %200 = or <2 x i1> %199, %198, !dbg !111
  %.v11 = select <2 x i1> %200, <2 x i32> %196, <2 x i32> %.v10, !dbg !112
  %201 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !112
  %202 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !72
  %203 = insertelement <2 x i32> %202, i32 %140, i64 1, !dbg !72
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !72
  %205 = fcmp olt <2 x float> %201, %204, !dbg !113
  %206 = zext <2 x i1> %156 to <2 x i8>, !dbg !115
  %207 = select <2 x i1> %166, <2 x i8> splat (i8 2), <2 x i8> %206, !dbg !116
  %208 = select <2 x i1> %170, <2 x i8> splat (i8 3), <2 x i8> %207, !dbg !117
  %209 = select <2 x i1> %177, <2 x i8> splat (i8 4), <2 x i8> %208, !dbg !118
  %210 = select <2 x i1> %184, <2 x i8> splat (i8 5), <2 x i8> %209, !dbg !119
  %211 = select <2 x i1> %191, <2 x i8> splat (i8 6), <2 x i8> %210, !dbg !120
  %212 = select <2 x i1> %198, <2 x i8> splat (i8 7), <2 x i8> %211, !dbg !121
  %213 = select <2 x i1> %205, <2 x i8> splat (i8 8), <2 x i8> %212, !dbg !122
  %214 = bitcast i32 %140 to float, !dbg !123
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !123
  %216 = extractelement <2 x i1> %205, i64 1, !dbg !124
  %217 = or i1 %215, %216, !dbg !124
  %218 = extractelement <2 x float> %201, i64 1, !dbg !125
  %219 = select i1 %217, float %214, float %218, !dbg !125
  %220 = bitcast i32 %149 to float, !dbg !123
  %221 = fcmp uno float %220, 0.000000e+00, !dbg !123
  %222 = extractelement <2 x i1> %205, i64 0, !dbg !124
  %223 = or i1 %221, %222, !dbg !124
  %224 = extractelement <2 x float> %201, i64 0, !dbg !125
  %225 = select i1 %223, float %220, float %224, !dbg !125
  %226 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %227 = bitcast i32 %226 to float, !dbg !26
  %228 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %229 = bitcast i32 %228 to float, !dbg !26
  %230 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %231 = bitcast i32 %230 to float, !dbg !24
  %232 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %233 = bitcast i32 %232 to float, !dbg !24
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !126
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !126
  %236 = fmul float %131, %234, !dbg !127
  %237 = fmul float %126, %235, !dbg !127
  %238 = fmul float %236, %233, !dbg !128
  %239 = fmul float %237, %231, !dbg !128
  %240 = fadd float %238, %229, !dbg !129
  %241 = fadd float %239, %227, !dbg !129
  %242 = fadd float %225, %240, !dbg !130
  %243 = fadd float %219, %241, !dbg !130
  %244 = getelementptr i8, ptr addrspace(1) %7, i64 %21, !dbg !131
  %245 = bitcast <2 x i8> %213 to i16, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %245, ptr addrspace(1) %244, i1 true) #3, !dbg !132
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !133
  %247 = bitcast float %242 to i32, !dbg !134
  %248 = bitcast float %243 to i32, !dbg !134
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %247, i32 %248, ptr addrspace(1) %246, i1 true) #3, !dbg !134
  ret void, !dbg !135
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct5qsixtfv4v4gtfjjrndi7cbksqkzddpjv4wcikmeqatioapysn.py", directory: "inductor_cache/t5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 31, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 67, column: 20, scope: !7)
!28 = !DILocation(line: 36, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 51, scope: !7)
!32 = !DILocation(line: 45, column: 61, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 46, scope: !7)
!35 = !DILocation(line: 45, column: 56, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 66, scope: !7)
!38 = !DILocation(line: 47, column: 21, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 46, scope: !7)
!41 = !DILocation(line: 51, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 66, scope: !7)
!44 = !DILocation(line: 58, column: 46, scope: !7)
!45 = !DILocation(line: 58, column: 56, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 66, scope: !7)
!48 = !DILocation(line: 61, column: 21, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 46, scope: !7)
!51 = !DILocation(line: 65, column: 56, scope: !7)
!52 = !DILocation(line: 65, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 66, scope: !7)
!54 = !DILocation(line: 68, column: 46, scope: !7)
!55 = !DILocation(line: 68, column: 31, scope: !7)
!56 = !DILocation(line: 68, column: 56, scope: !7)
!57 = !DILocation(line: 71, column: 43, scope: !7)
!58 = !DILocation(line: 71, column: 53, scope: !7)
!59 = !DILocation(line: 71, column: 31, scope: !7)
!60 = !DILocation(line: 71, column: 63, scope: !7)
!61 = !DILocation(line: 78, column: 43, scope: !7)
!62 = !DILocation(line: 78, column: 53, scope: !7)
!63 = !DILocation(line: 78, column: 31, scope: !7)
!64 = !DILocation(line: 78, column: 63, scope: !7)
!65 = !DILocation(line: 81, column: 43, scope: !7)
!66 = !DILocation(line: 81, column: 53, scope: !7)
!67 = !DILocation(line: 81, column: 31, scope: !7)
!68 = !DILocation(line: 81, column: 63, scope: !7)
!69 = !DILocation(line: 84, column: 43, scope: !7)
!70 = !DILocation(line: 84, column: 53, scope: !7)
!71 = !DILocation(line: 84, column: 31, scope: !7)
!72 = !DILocation(line: 84, column: 63, scope: !7)
!73 = !DILocation(line: 113, column: 20, scope: !7)
!74 = !DILocation(line: 114, column: 27, scope: !7)
!75 = !DILocation(line: 111, column: 20, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 52, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !84)
!84 = !DILocation(line: 59, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !89)
!89 = !DILocation(line: 66, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !94)
!94 = !DILocation(line: 69, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !99)
!99 = !DILocation(line: 72, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !104)
!104 = !DILocation(line: 79, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !109)
!109 = !DILocation(line: 82, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !114)
!114 = !DILocation(line: 85, column: 42, scope: !7)
!115 = !DILocation(line: 89, column: 35, scope: !7)
!116 = !DILocation(line: 92, column: 35, scope: !7)
!117 = !DILocation(line: 95, column: 35, scope: !7)
!118 = !DILocation(line: 98, column: 35, scope: !7)
!119 = !DILocation(line: 101, column: 35, scope: !7)
!120 = !DILocation(line: 104, column: 35, scope: !7)
!121 = !DILocation(line: 107, column: 35, scope: !7)
!122 = !DILocation(line: 110, column: 35, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !114)
!124 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !114)
!125 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !114)
!126 = !DILocation(line: 116, column: 20, scope: !7)
!127 = !DILocation(line: 119, column: 20, scope: !7)
!128 = !DILocation(line: 120, column: 20, scope: !7)
!129 = !DILocation(line: 121, column: 20, scope: !7)
!130 = !DILocation(line: 122, column: 20, scope: !7)
!131 = !DILocation(line: 123, column: 25, scope: !7)
!132 = !DILocation(line: 123, column: 37, scope: !7)
!133 = !DILocation(line: 124, column: 28, scope: !7)
!134 = !DILocation(line: 124, column: 40, scope: !7)
!135 = !DILocation(line: 124, column: 4, scope: !7)
