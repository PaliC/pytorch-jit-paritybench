; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_max_min_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 64, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %7, 63, !dbg !12
  %11 = icmp samesign ult i32 %10, 36, !dbg !13
  %.frozen = freeze i32 %5, !dbg !14
  %12 = sdiv i32 %.frozen, 16, !dbg !14
  %13 = mul i32 %12, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !16
  %14 = sdiv i8 %.lhs.trunc, 4, !dbg !16
  %narrow = add nsw i8 %14, -1, !dbg !17
  %15 = sext i8 %narrow to i32, !dbg !17
  %.lhs.trunc1 = trunc nuw nsw i32 %10 to i8, !dbg !18
  %16 = udiv i8 %.lhs.trunc1, 3, !dbg !18
  %17 = mul i8 %14, 4, !dbg !19
  %.decomposed10 = sub i8 %.lhs.trunc, %17, !dbg !19
  %.sext7 = sext i8 %.decomposed10 to i32, !dbg !19
  %18 = udiv i8 %.lhs.trunc1, 9, !dbg !20
  %19 = shl nuw nsw i8 %18, 4, !dbg !21
  %20 = zext nneg i8 %19 to i32, !dbg !21
  %21 = shl i32 %12, 6, !dbg !22
  %22 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !23
  %23 = insertelement <2 x i8> %22, i8 %16, i64 1, !dbg !23
  %24 = urem <2 x i8> %23, splat (i8 3), !dbg !23
  %25 = extractelement <2 x i8> %24, i64 1, !dbg !24
  %26 = zext nneg i8 %25 to i32, !dbg !24
  %27 = add nsw i32 %15, %26, !dbg !24
  %28 = extractelement <2 x i8> %24, i64 0, !dbg !25
  %29 = zext nneg i8 %28 to i32, !dbg !25
  %30 = add nsw i32 %29, -1, !dbg !25
  %31 = add nsw i32 %30, %.sext7, !dbg !26
  %32 = or i32 %27, %31, !dbg !27
  %33 = icmp ult i32 %32, 4, !dbg !27
  %34 = extractelement <2 x i8> %24, i64 0, !dbg !28
  %35 = add nuw nsw i8 %34, -5, !dbg !28
  %36 = sext i8 %35 to i32, !dbg !28
  %37 = add nsw i32 %36, %20, !dbg !28
  %38 = extractelement <2 x i8> %24, i64 1, !dbg !29
  %39 = shl nuw nsw i8 %38, 2, !dbg !29
  %40 = zext nneg i8 %39 to i32, !dbg !29
  %41 = add nsw i32 %37, %40, !dbg !29
  %42 = add nsw i32 %41, %.decomposed, !dbg !30
  %43 = add i32 %42, %21, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !32
  %46 = and i1 %11, %33, !dbg !33
  %47 = and i1 %6, %46, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %47, i32 0, i1 %47) #3, !dbg !35
  %49 = bitcast i32 %48 to float, !dbg !35
  %50 = and i1 %11, %6, !dbg !36
  %51 = select i1 %50, float %49, float 0x7FF0000000000000, !dbg !37
  %52 = bitcast float %51 to i32, !dbg !38
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !38
  %54 = bitcast i32 %53 to float, !dbg !38
  %55 = fcmp olt float %51, %54, !dbg !42
  %56 = fcmp uno float %51, 0.000000e+00, !dbg !44
  %57 = or i1 %55, %56, !dbg !45
  %58 = select i1 %57, float %51, float %54, !dbg !46
  %59 = bitcast float %58 to i32, !dbg !38
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !38
  %61 = bitcast i32 %60 to float, !dbg !38
  %62 = fcmp olt float %58, %61, !dbg !42
  %63 = fcmp uno float %58, 0.000000e+00, !dbg !44
  %64 = or i1 %62, %63, !dbg !45
  %65 = select i1 %64, float %58, float %61, !dbg !46
  %66 = bitcast float %65 to i32, !dbg !38
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !38
  %68 = bitcast i32 %67 to float, !dbg !38
  %69 = fcmp olt float %65, %68, !dbg !42
  %70 = fcmp uno float %65, 0.000000e+00, !dbg !44
  %71 = or i1 %69, %70, !dbg !45
  %72 = select i1 %71, float %65, float %68, !dbg !46
  %73 = bitcast float %72 to i32, !dbg !38
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = fcmp olt float %72, %75, !dbg !42
  %77 = fcmp uno float %72, 0.000000e+00, !dbg !44
  %78 = or i1 %76, %77, !dbg !45
  %79 = select i1 %78, float %72, float %75, !dbg !46
  %80 = bitcast float %79 to i32, !dbg !38
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !38
  %82 = bitcast i32 %81 to float, !dbg !38
  %83 = fcmp olt float %79, %82, !dbg !42
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !44
  %85 = or i1 %83, %84, !dbg !45
  %86 = icmp eq i32 %8, 0, !dbg !38
  %87 = and i32 %9, 1, !dbg !38
  %88 = zext nneg i32 %87 to i64, !dbg !38
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88, !dbg !38
  %90 = select i1 %85, i32 %80, i32 %81, !dbg !46
  %91 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %91, i1 %86) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %92 = icmp slt i32 %7, 2, !dbg !38
  %93 = sext i32 %7 to i64, !dbg !38
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !38
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %92) #3, !dbg !38
  %96 = bitcast i32 %95 to float, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = fcmp olt float %96, %98, !dbg !42
  %100 = fcmp uno float %96, 0.000000e+00, !dbg !44
  %101 = or i1 %100, %99, !dbg !45
  %102 = and i32 %7, 1, !dbg !38
  %103 = icmp eq i32 %102, 0, !dbg !38
  %104 = and i1 %92, %103, !dbg !38
  %105 = select i1 %101, i32 %95, i32 %97, !dbg !46
  %106 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %106, i1 %104) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %107 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %108 = select i1 %50, float %49, float 0xFFF0000000000000, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %109 = bitcast float %108 to i32, !dbg !48
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !48
  %111 = bitcast i32 %110 to float, !dbg !48
  %112 = fcmp ogt float %108, %111, !dbg !50
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !51
  %114 = or i1 %113, %112, !dbg !52
  %115 = select i1 %114, float %108, float %111, !dbg !53
  %116 = bitcast float %115 to i32, !dbg !48
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !48
  %118 = bitcast i32 %117 to float, !dbg !48
  %119 = fcmp ogt float %115, %118, !dbg !50
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !51
  %121 = or i1 %119, %120, !dbg !52
  %122 = select i1 %121, float %115, float %118, !dbg !53
  %123 = bitcast float %122 to i32, !dbg !48
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !48
  %125 = bitcast i32 %124 to float, !dbg !48
  %126 = fcmp ogt float %122, %125, !dbg !50
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !51
  %128 = or i1 %126, %127, !dbg !52
  %129 = select i1 %128, float %122, float %125, !dbg !53
  %130 = bitcast float %129 to i32, !dbg !48
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !48
  %132 = bitcast i32 %131 to float, !dbg !48
  %133 = fcmp ogt float %129, %132, !dbg !50
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !51
  %135 = or i1 %133, %134, !dbg !52
  %136 = select i1 %135, float %129, float %132, !dbg !53
  %137 = bitcast float %136 to i32, !dbg !48
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !48
  %139 = bitcast i32 %138 to float, !dbg !48
  %140 = fcmp ogt float %136, %139, !dbg !50
  %141 = fcmp uno float %136, 0.000000e+00, !dbg !51
  %142 = or i1 %140, %141, !dbg !52
  %143 = select i1 %142, i32 %137, i32 %138, !dbg !53
  %144 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %144, i1 %86) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %145 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %92) #3, !dbg !48
  %146 = bitcast i32 %145 to float, !dbg !48
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !48
  %148 = bitcast i32 %147 to float, !dbg !48
  %149 = fcmp ogt float %146, %148, !dbg !50
  %150 = fcmp uno float %146, 0.000000e+00, !dbg !51
  %151 = or i1 %150, %149, !dbg !52
  %152 = select i1 %151, i32 %145, i32 %147, !dbg !53
  %153 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %153, i1 %104) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %154 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %155 = fsub float %154, %107, !dbg !54
  %156 = fcmp ogt float %155, 4.000000e+00, !dbg !55
  %157 = uitofp i1 %156 to float, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %158 = sext i32 %5 to i64, !dbg !58
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !58
  %160 = icmp eq i32 %10, 0, !dbg !59
  %161 = bitcast float %157 to i32, !dbg !59
  %162 = and i1 %160, %6, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %159, i1 %162) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py", directory: "inductor_cache/gd")
!4 = !{ptr @triton_per_fused__to_copy_max_min_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_max_min_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_max_min_0", linkageName: "triton_per_fused__to_copy_max_min_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 25, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 38, column: 38, scope: !7)
!20 = !DILocation(line: 44, column: 75, scope: !7)
!21 = !DILocation(line: 44, column: 69, scope: !7)
!22 = !DILocation(line: 44, column: 83, scope: !7)
!23 = !DILocation(line: 38, column: 25, scope: !7)
!24 = !DILocation(line: 33, column: 32, scope: !7)
!25 = !DILocation(line: 38, column: 20, scope: !7)
!26 = !DILocation(line: 38, column: 33, scope: !7)
!27 = !DILocation(line: 43, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 43, scope: !7)
!29 = !DILocation(line: 44, column: 65, scope: !7)
!30 = !DILocation(line: 44, column: 80, scope: !7)
!31 = !DILocation(line: 44, column: 90, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 109, scope: !7)
!34 = !DILocation(line: 44, column: 117, scope: !7)
!35 = !DILocation(line: 44, column: 101, scope: !7)
!36 = !DILocation(line: 46, column: 29, scope: !7)
!37 = !DILocation(line: 46, column: 43, scope: !7)
!38 = !DILocation(line: 126, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 39, scope: !7)
!42 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!44 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 48, column: 43, scope: !7)
!48 = !DILocation(line: 131, column: 29, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 49, column: 39, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !49)
!52 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !49)
!53 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !49)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 21, scope: !7)
!57 = !DILocation(line: 54, column: 4, scope: !7)
!58 = !DILocation(line: 55, column: 28, scope: !7)
!59 = !DILocation(line: 55, column: 40, scope: !7)
!60 = !DILocation(line: 55, column: 4, scope: !7)
