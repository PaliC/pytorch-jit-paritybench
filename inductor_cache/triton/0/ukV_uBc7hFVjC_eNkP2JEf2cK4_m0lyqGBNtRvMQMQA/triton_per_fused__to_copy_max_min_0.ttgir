#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":47:39)
#loc48 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":49:39)
#loc62 = loc(callsite(#loc1 at #loc40))
#loc68 = loc(callsite(#loc1 at #loc48))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_max_min_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":19:0), %arg3: i32 loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0x7F800000> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c-5_i32 = arith.constant -5 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<36> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<-1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<9> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.cmpi slt, %3, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %0, %c16_i32 : i32 loc(#loc6)
    %6 = arith.divsi %0, %c16_i32 : i32 loc(#loc7)
    %7 = arith.divsi %5, %c4_i32 : i32 loc(#loc8)
    %8 = arith.addi %7, %c-1_i32 : i32 loc(#loc9)
    %9 = arith.divsi %3, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %9, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc11)
    %11 = tt.splat %8 : i32 -> tensor<1x64xi32, #blocked> loc(#loc12)
    %12 = arith.addi %11, %10 : tensor<1x64xi32, #blocked> loc(#loc12)
    %13 = arith.extsi %12 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc13)
    %14 = arith.cmpi sge, %13, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc13)
    %15 = arith.cmpi slt, %13, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc14)
    %16 = arith.remsi %3, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = arith.addi %16, %cst_7 : tensor<1x64xi32, #blocked> loc(#loc16)
    %18 = arith.remsi %5, %c4_i32 : i32 loc(#loc17)
    %19 = tt.splat %18 : i32 -> tensor<1x64xi32, #blocked> loc(#loc18)
    %20 = arith.addi %17, %19 : tensor<1x64xi32, #blocked> loc(#loc18)
    %21 = arith.extsi %20 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc19)
    %22 = arith.cmpi sge, %21, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc19)
    %23 = arith.cmpi slt, %21, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc20)
    %24 = arith.andi %14, %15 : tensor<1x64xi1, #blocked> loc(#loc21)
    %25 = arith.andi %24, %22 : tensor<1x64xi1, #blocked> loc(#loc22)
    %26 = arith.andi %25, %23 : tensor<1x64xi1, #blocked> loc(#loc23)
    %27 = arith.addi %5, %c-5_i32 : i32 loc(#loc24)
    %28 = arith.muli %10, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc25)
    %29 = tt.splat %27 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
    %30 = arith.addi %29, %28 : tensor<1x64xi32, #blocked> loc(#loc26)
    %31 = arith.divsi %3, %cst_9 : tensor<1x64xi32, #blocked> loc(#loc27)
    %32 = arith.muli %31, %cst_10 : tensor<1x64xi32, #blocked> loc(#loc28)
    %33 = arith.addi %30, %32 : tensor<1x64xi32, #blocked> loc(#loc29)
    %34 = arith.muli %6, %c64_i32 : i32 loc(#loc30)
    %35 = tt.splat %34 : i32 -> tensor<1x64xi32, #blocked> loc(#loc31)
    %36 = arith.addi %33, %35 : tensor<1x64xi32, #blocked> loc(#loc31)
    %37 = arith.addi %36, %16 : tensor<1x64xi32, #blocked> loc(#loc32)
    %38 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc33)
    %39 = tt.addptr %38, %37 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc33)
    %40 = arith.andi %4, %26 : tensor<1x64xi1, #blocked> loc(#loc34)
    %41 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc35)
    %42 = arith.andi %40, %41 : tensor<1x64xi1, #blocked> loc(#loc35)
    %43 = tt.load %39, %42, %cst_2 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %44 = arith.andi %4, %41 : tensor<1x64xi1, #blocked> loc(#loc37)
    %45 = arith.select %44, %43, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc38)
    %46 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc40)), %arg5: f32 loc(callsite(#loc1 at #loc40))):
      %57 = arith.cmpf olt, %arg4, %arg5 : f32 loc(#loc73)
      %58 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc74)
      %59 = arith.ori %57, %58 : i1 loc(#loc75)
      %60 = arith.select %59, %arg4, %arg5 : f32 loc(#loc76)
      tt.reduce.return %60 : f32 loc(#loc61)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc61)
    %47 = tt.expand_dims %46 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc45)
    %48 = arith.select %44, %43, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc46)
    %49 = "tt.reduce"(%48) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc48)), %arg5: f32 loc(callsite(#loc1 at #loc48))):
      %57 = arith.cmpf ogt, %arg4, %arg5 : f32 loc(#loc77)
      %58 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc78)
      %59 = arith.ori %57, %58 : i1 loc(#loc79)
      %60 = arith.select %59, %arg4, %arg5 : f32 loc(#loc80)
      tt.reduce.return %60 : f32 loc(#loc67)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc67)
    %50 = tt.expand_dims %49 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc53)
    %51 = arith.subf %50, %47 : tensor<1x1xf32, #blocked> loc(#loc54)
    %52 = arith.cmpf ogt, %51, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc55)
    %53 = arith.uitofp %52 : tensor<1x1xi1, #blocked> to tensor<1x1xf32, #blocked> loc(#loc56)
    gpu.barrier loc(#loc57)
    %54 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc58)
    %55 = tt.splat %54 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc59)
    %56 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc59)
    tt.store %55, %53, %56 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":23:28)
#loc3 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":25:21)
#loc4 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":26:34)
#loc5 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":28:21)
#loc6 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":30:19)
#loc7 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":31:19)
#loc8 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":33:25)
#loc9 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":33:19)
#loc10 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":33:39)
#loc11 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":33:44)
#loc12 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":33:32)
#loc13 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":35:19)
#loc14 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":37:18)
#loc15 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":38:25)
#loc16 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":38:20)
#loc17 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":38:38)
#loc18 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":38:33)
#loc19 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":39:19)
#loc20 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":40:18)
#loc21 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":41:18)
#loc22 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":42:18)
#loc23 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":43:19)
#loc24 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:38)
#loc25 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:47)
#loc26 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:43)
#loc27 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:75)
#loc28 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:69)
#loc29 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:65)
#loc30 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:83)
#loc31 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:80)
#loc32 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:90)
#loc33 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:31)
#loc34 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:109)
#loc35 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:117)
#loc36 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":44:101)
#loc37 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":46:29)
#loc38 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":46:43)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":126:29)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc45 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":47:42)
#loc46 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":48:43)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc53 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":49:42)
#loc54 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":50:20)
#loc55 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":52:20)
#loc56 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":53:21)
#loc57 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":54:4)
#loc58 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":55:28)
#loc59 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":55:40)
#loc60 = loc("inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py":55:4)
#loc61 = loc(callsite(#loc39 at #loc40))
#loc63 = loc(callsite(#loc41 at #loc39))
#loc64 = loc(callsite(#loc42 at #loc39))
#loc65 = loc(callsite(#loc43 at #loc39))
#loc66 = loc(callsite(#loc44 at #loc39))
#loc67 = loc(callsite(#loc47 at #loc48))
#loc69 = loc(callsite(#loc49 at #loc47))
#loc70 = loc(callsite(#loc50 at #loc47))
#loc71 = loc(callsite(#loc51 at #loc47))
#loc72 = loc(callsite(#loc52 at #loc47))
#loc73 = loc(callsite(#loc63 at #loc40))
#loc74 = loc(callsite(#loc64 at #loc40))
#loc75 = loc(callsite(#loc65 at #loc40))
#loc76 = loc(callsite(#loc66 at #loc40))
#loc77 = loc(callsite(#loc69 at #loc48))
#loc78 = loc(callsite(#loc70 at #loc48))
#loc79 = loc(callsite(#loc71 at #loc48))
#loc80 = loc(callsite(#loc72 at #loc48))
