; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %17, 512, !dbg !13
  %22 = or disjoint i32 %17, 640, !dbg !13
  %23 = or disjoint i32 %17, 768, !dbg !13
  %24 = or disjoint i32 %17, 896, !dbg !13
  %25 = icmp slt i32 %15, 1280, !dbg !14
  %26 = icmp slt i32 %16, 1280, !dbg !14
  %27 = icmp slt i32 %17, 1280, !dbg !14
  %28 = icmp slt i32 %18, 1280, !dbg !14
  %29 = icmp slt i32 %19, 1280, !dbg !14
  %30 = icmp slt i32 %20, 1280, !dbg !14
  %31 = icmp slt i32 %21, 1280, !dbg !14
  %32 = icmp slt i32 %22, 1280, !dbg !14
  %33 = icmp slt i32 %23, 1280, !dbg !14
  %34 = icmp slt i32 %24, 1280, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %36 = icmp slt i32 %35, 176, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %37 = sdiv i32 %.frozen, 320, !dbg !17
  %38 = mul i32 %37, 320, !dbg !18
  %.decomposed = sub i32 %.frozen, %38, !dbg !18
  %.frozen5 = freeze i32 %16, !dbg !17
  %39 = sdiv i32 %.frozen5, 320, !dbg !17
  %40 = mul i32 %39, 320, !dbg !18
  %.decomposed6 = sub i32 %.frozen5, %40, !dbg !18
  %41 = mul i32 %35, 320, !dbg !19
  %42 = add i32 %.decomposed, %41, !dbg !20
  %43 = mul i32 %37, 56320, !dbg !21
  %44 = mul i32 %39, 56320, !dbg !21
  %45 = add i32 %42, %43, !dbg !22
  %46 = add i32 %44, %.decomposed6, !dbg !20
  %47 = add i32 %46, %41, !dbg !22
  %48 = sext i32 %45 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %47 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = and i1 %36, %25, !dbg !24
  %53 = and i1 %26, %36, !dbg !24
  %54 = and i1 %36, %27, !dbg !24
  %55 = and i1 %36, %28, !dbg !24
  %56 = and i1 %36, %29, !dbg !24
  %57 = and i1 %36, %30, !dbg !24
  %58 = and i1 %31, %36, !dbg !24
  %59 = and i1 %32, %36, !dbg !24
  %60 = and i1 %33, %36, !dbg !24
  %61 = and i1 %34, %36, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = sext i32 %.decomposed to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !26
  %82 = sext i32 %.decomposed6 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !26
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %25) #2, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %26) #2, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !27
  %98 = bitcast i32 %94 to float, !dbg !27
  %99 = bitcast i32 %95 to float, !dbg !27
  %100 = bitcast i32 %96 to float, !dbg !27
  %101 = bitcast i32 %97 to float, !dbg !27
  %102 = fadd float %67, %89, !dbg !28
  %103 = fadd float %68, %90, !dbg !28
  %104 = fadd float %69, %91, !dbg !28
  %105 = fadd float %70, %92, !dbg !28
  %106 = fadd float %76, %98, !dbg !28
  %107 = fadd float %77, %99, !dbg !28
  %108 = fadd float %78, %100, !dbg !28
  %109 = fadd float %79, %101, !dbg !28
  %110 = mul i32 %17, 176, !dbg !29
  %111 = mul i32 %18, 176, !dbg !29
  %112 = mul i32 %19, 176, !dbg !29
  %113 = mul i32 %20, 176, !dbg !29
  %114 = mul i32 %21, 176, !dbg !29
  %115 = mul i32 %22, 176, !dbg !29
  %116 = mul i32 %23, 176, !dbg !29
  %117 = mul i32 %24, 176, !dbg !29
  %118 = add i32 %110, %35, !dbg !30
  %119 = add i32 %111, %35, !dbg !30
  %120 = add i32 %112, %35, !dbg !30
  %121 = add i32 %113, %35, !dbg !30
  %122 = add i32 %35, %114, !dbg !30
  %123 = add i32 %35, %115, !dbg !30
  %124 = add i32 %35, %116, !dbg !30
  %125 = add i32 %35, %117, !dbg !30
  %126 = sext i32 %118 to i64, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !31
  %128 = sext i32 %119 to i64, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !31
  %130 = sext i32 %120 to i64, !dbg !31
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !31
  %132 = sext i32 %121 to i64, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !31
  %134 = sext i32 %122 to i64, !dbg !31
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !31
  %136 = sext i32 %123 to i64, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !31
  %138 = sext i32 %124 to i64, !dbg !31
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !31
  %140 = sext i32 %125 to i64, !dbg !31
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !31
  %.idx = shl nuw nsw i32 %10, 3, !dbg !32
  %142 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %143 = bitcast float %102 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !32
  %144 = shl nuw nsw i32 %10, 1, !dbg !32
  %145 = or disjoint i32 %144, 2, !dbg !32
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = bitcast float %103 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !32
  %148 = or disjoint i32 %144, 4, !dbg !32
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !32
  %150 = bitcast float %104 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !32
  %151 = or disjoint i32 %144, 6, !dbg !32
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %153 = bitcast float %105 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !32
  %154 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !32
  %155 = load i32, ptr addrspace(3) %154, align 8, !dbg !32
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !32
  %156 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !32
  %157 = load i32, ptr addrspace(3) %156, align 8, !dbg !32
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !32
  %158 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %159 = load i32, ptr addrspace(3) %158, align 8, !dbg !32
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !32
  %160 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %161 = load i32, ptr addrspace(3) %160, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %162 = bitcast float %106 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %162, i1 true) #2, !dbg !32
  %163 = bitcast float %107 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %163, i1 true) #2, !dbg !32
  %164 = bitcast float %108 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %164, i1 true) #2, !dbg !32
  %165 = bitcast float %109 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %165, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %166 = load i32, ptr addrspace(3) %154, align 8, !dbg !32
  %167 = load i32, ptr addrspace(3) %156, align 8, !dbg !32
  %168 = load i32, ptr addrspace(3) %158, align 8, !dbg !32
  %169 = load i32, ptr addrspace(3) %160, align 8, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %127, i1 %54) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %129, i1 %55) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %131, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %133, i1 %57) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %135, i1 %58) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %137, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %139, i1 %60) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %141, i1 %61) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdfb3cuegt3p6mmo63qdvflwuhgmrfu37dvu2dzlbf6b2htv7pe.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 63, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 45, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
