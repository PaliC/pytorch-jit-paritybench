; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = sdiv i32 %10, 1024, !dbg !14
  %16 = sdiv i32 %14, 1024, !dbg !14
  %17 = srem i32 %15, 32, !dbg !15
  %18 = srem i32 %16, 32, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %19 = sdiv i32 %.frozen, 32, !dbg !16
  %20 = mul i32 %19, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %11, 32, !dbg !17
  %22 = srem i32 %12, 32, !dbg !17
  %23 = srem i32 %13, 32, !dbg !17
  %24 = sdiv i32 %14, 32, !dbg !16
  %25 = srem i32 %19, 32, !dbg !18
  %26 = srem i32 %24, 32, !dbg !18
  %27 = sdiv i32 %10, 32768, !dbg !19
  %28 = sdiv i32 %14, 32768, !dbg !19
  %29 = icmp slt i32 %17, 16, !dbg !20
  %30 = icmp slt i32 %18, 16, !dbg !20
  %31 = shl nsw i32 %.decomposed, 4, !dbg !21
  %32 = shl nsw i32 %21, 4, !dbg !21
  %33 = shl nsw i32 %22, 4, !dbg !21
  %34 = shl nsw i32 %23, 4, !dbg !21
  %35 = mul nsw i32 %25, 528, !dbg !22
  %36 = mul nsw i32 %26, 528, !dbg !22
  %37 = mul nsw i32 %27, 17424, !dbg !23
  %38 = mul nsw i32 %28, 17424, !dbg !23
  %39 = add nsw i32 %35, %37, !dbg !24
  %40 = add nsw i32 %39, %31, !dbg !25
  %41 = add nsw i32 %39, %32, !dbg !25
  %42 = add nsw i32 %39, %33, !dbg !25
  %43 = add nsw i32 %39, %34, !dbg !25
  %44 = add nsw i32 %36, %38, !dbg !24
  %45 = add nsw i32 %44, %31, !dbg !25
  %46 = add nsw i32 %44, %32, !dbg !25
  %47 = add nsw i32 %44, %33, !dbg !25
  %48 = add nsw i32 %44, %34, !dbg !25
  %49 = add nsw i32 %40, %17, !dbg !26
  %50 = add nsw i32 %41, %17, !dbg !26
  %51 = add nsw i32 %42, %17, !dbg !26
  %52 = add nsw i32 %43, %17, !dbg !26
  %53 = add nsw i32 %45, %18, !dbg !26
  %54 = add nsw i32 %46, %18, !dbg !26
  %55 = add nsw i32 %47, %18, !dbg !26
  %56 = add nsw i32 %48, %18, !dbg !26
  %57 = sext i32 %49 to i64, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !27
  %59 = sext i32 %50 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %51 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = sext i32 %52 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !27
  %65 = sext i32 %53 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !27
  %67 = sext i32 %54 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !27
  %69 = sext i32 %55 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !27
  %71 = sext i32 %56 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %29, i32 0, i1 %29) #1, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %30, i32 0, i1 %30) #1, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %30, i32 0, i1 %30) #1, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %30, i32 0, i1 %30) #1, !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %30, i32 0, i1 %30) #1, !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = add nsw i32 %39, 16, !dbg !29
  %90 = add nsw i32 %89, %31, !dbg !30
  %91 = add nsw i32 %89, %32, !dbg !30
  %92 = add nsw i32 %89, %33, !dbg !30
  %93 = add nsw i32 %89, %34, !dbg !30
  %94 = add nsw i32 %44, 16, !dbg !29
  %95 = add nsw i32 %94, %31, !dbg !30
  %96 = add nsw i32 %94, %32, !dbg !30
  %97 = add nsw i32 %94, %33, !dbg !30
  %98 = add nsw i32 %94, %34, !dbg !30
  %99 = add nsw i32 %90, %17, !dbg !31
  %100 = add nsw i32 %91, %17, !dbg !31
  %101 = add nsw i32 %92, %17, !dbg !31
  %102 = add nsw i32 %93, %17, !dbg !31
  %103 = add nsw i32 %95, %18, !dbg !31
  %104 = add nsw i32 %96, %18, !dbg !31
  %105 = add nsw i32 %97, %18, !dbg !31
  %106 = add nsw i32 %98, %18, !dbg !31
  %107 = sext i32 %99 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !32
  %109 = sext i32 %100 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = sext i32 %101 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = sext i32 %102 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = sext i32 %103 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %117 = sext i32 %104 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !32
  %119 = sext i32 %105 to i64, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !32
  %121 = sext i32 %106 to i64, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !32
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %29, i32 0, i1 %29) #1, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %29, i32 0, i1 %29) #1, !dbg !33
  %126 = bitcast i32 %125 to float, !dbg !33
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %29, i32 0, i1 %29) #1, !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %29, i32 0, i1 %29) #1, !dbg !33
  %130 = bitcast i32 %129 to float, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %30, i32 0, i1 %30) #1, !dbg !33
  %132 = bitcast i32 %131 to float, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %30, i32 0, i1 %30) #1, !dbg !33
  %134 = bitcast i32 %133 to float, !dbg !33
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %30, i32 0, i1 %30) #1, !dbg !33
  %136 = bitcast i32 %135 to float, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %30, i32 0, i1 %30) #1, !dbg !33
  %138 = bitcast i32 %137 to float, !dbg !33
  %139 = fcmp ogt float %124, %74, !dbg !34
  %140 = fcmp ogt float %126, %76, !dbg !34
  %141 = fcmp ogt float %128, %78, !dbg !34
  %142 = fcmp ogt float %130, %80, !dbg !34
  %143 = fcmp ogt float %132, %82, !dbg !34
  %144 = fcmp ogt float %134, %84, !dbg !34
  %145 = fcmp ogt float %136, %86, !dbg !34
  %146 = fcmp ogt float %138, %88, !dbg !34
  %147 = fcmp uno float %124, 0.000000e+00, !dbg !38
  %148 = fcmp uno float %126, 0.000000e+00, !dbg !38
  %149 = fcmp uno float %128, 0.000000e+00, !dbg !38
  %150 = fcmp uno float %130, 0.000000e+00, !dbg !38
  %151 = fcmp uno float %132, 0.000000e+00, !dbg !38
  %152 = fcmp uno float %134, 0.000000e+00, !dbg !38
  %153 = fcmp uno float %136, 0.000000e+00, !dbg !38
  %154 = fcmp uno float %138, 0.000000e+00, !dbg !38
  %155 = or i1 %139, %147, !dbg !39
  %156 = or i1 %140, %148, !dbg !39
  %157 = or i1 %141, %149, !dbg !39
  %158 = or i1 %142, %150, !dbg !39
  %159 = or i1 %143, %151, !dbg !39
  %160 = or i1 %144, %152, !dbg !39
  %161 = or i1 %145, %153, !dbg !39
  %162 = or i1 %146, %154, !dbg !39
  %163 = select i1 %155, float %124, float %74, !dbg !40
  %164 = select i1 %156, float %126, float %76, !dbg !40
  %165 = select i1 %157, float %128, float %78, !dbg !40
  %166 = select i1 %158, float %130, float %80, !dbg !40
  %167 = select i1 %159, float %132, float %82, !dbg !40
  %168 = select i1 %160, float %134, float %84, !dbg !40
  %169 = select i1 %161, float %136, float %86, !dbg !40
  %170 = select i1 %162, float %138, float %88, !dbg !40
  %171 = add nsw i32 %39, 528, !dbg !41
  %172 = add nsw i32 %171, %31, !dbg !42
  %173 = add nsw i32 %171, %32, !dbg !42
  %174 = add nsw i32 %171, %33, !dbg !42
  %175 = add nsw i32 %171, %34, !dbg !42
  %176 = add nsw i32 %44, 528, !dbg !41
  %177 = add nsw i32 %176, %31, !dbg !42
  %178 = add nsw i32 %176, %32, !dbg !42
  %179 = add nsw i32 %176, %33, !dbg !42
  %180 = add nsw i32 %176, %34, !dbg !42
  %181 = add nsw i32 %172, %17, !dbg !43
  %182 = add nsw i32 %173, %17, !dbg !43
  %183 = add nsw i32 %174, %17, !dbg !43
  %184 = add nsw i32 %175, %17, !dbg !43
  %185 = add nsw i32 %177, %18, !dbg !43
  %186 = add nsw i32 %178, %18, !dbg !43
  %187 = add nsw i32 %179, %18, !dbg !43
  %188 = add nsw i32 %180, %18, !dbg !43
  %189 = sext i32 %181 to i64, !dbg !44
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !44
  %191 = sext i32 %182 to i64, !dbg !44
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !44
  %193 = sext i32 %183 to i64, !dbg !44
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !44
  %195 = sext i32 %184 to i64, !dbg !44
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !44
  %197 = sext i32 %185 to i64, !dbg !44
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !44
  %199 = sext i32 %186 to i64, !dbg !44
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !44
  %201 = sext i32 %187 to i64, !dbg !44
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !44
  %203 = sext i32 %188 to i64, !dbg !44
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !44
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %29, i32 0, i1 %29) #1, !dbg !45
  %206 = bitcast i32 %205 to float, !dbg !45
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %29, i32 0, i1 %29) #1, !dbg !45
  %208 = bitcast i32 %207 to float, !dbg !45
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %29, i32 0, i1 %29) #1, !dbg !45
  %210 = bitcast i32 %209 to float, !dbg !45
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %29, i32 0, i1 %29) #1, !dbg !45
  %212 = bitcast i32 %211 to float, !dbg !45
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %30, i32 0, i1 %30) #1, !dbg !45
  %214 = bitcast i32 %213 to float, !dbg !45
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %30, i32 0, i1 %30) #1, !dbg !45
  %216 = bitcast i32 %215 to float, !dbg !45
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %30, i32 0, i1 %30) #1, !dbg !45
  %218 = bitcast i32 %217 to float, !dbg !45
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %30, i32 0, i1 %30) #1, !dbg !45
  %220 = bitcast i32 %219 to float, !dbg !45
  %221 = fcmp olt float %163, %206, !dbg !46
  %222 = fcmp olt float %164, %208, !dbg !46
  %223 = fcmp olt float %165, %210, !dbg !46
  %224 = fcmp olt float %166, %212, !dbg !46
  %225 = fcmp olt float %167, %214, !dbg !46
  %226 = fcmp olt float %168, %216, !dbg !46
  %227 = fcmp olt float %169, %218, !dbg !46
  %228 = fcmp olt float %170, %220, !dbg !46
  %229 = fcmp uno float %206, 0.000000e+00, !dbg !48
  %230 = fcmp uno float %208, 0.000000e+00, !dbg !48
  %231 = fcmp uno float %210, 0.000000e+00, !dbg !48
  %232 = fcmp uno float %212, 0.000000e+00, !dbg !48
  %233 = fcmp uno float %214, 0.000000e+00, !dbg !48
  %234 = fcmp uno float %216, 0.000000e+00, !dbg !48
  %235 = fcmp uno float %218, 0.000000e+00, !dbg !48
  %236 = fcmp uno float %220, 0.000000e+00, !dbg !48
  %237 = or i1 %221, %229, !dbg !49
  %238 = or i1 %222, %230, !dbg !49
  %239 = or i1 %223, %231, !dbg !49
  %240 = or i1 %224, %232, !dbg !49
  %241 = or i1 %225, %233, !dbg !49
  %242 = or i1 %226, %234, !dbg !49
  %243 = or i1 %227, %235, !dbg !49
  %244 = or i1 %228, %236, !dbg !49
  %245 = select i1 %237, float %206, float %163, !dbg !50
  %246 = select i1 %238, float %208, float %164, !dbg !50
  %247 = select i1 %239, float %210, float %165, !dbg !50
  %248 = select i1 %240, float %212, float %166, !dbg !50
  %249 = select i1 %241, float %214, float %167, !dbg !50
  %250 = select i1 %242, float %216, float %168, !dbg !50
  %251 = select i1 %243, float %218, float %169, !dbg !50
  %252 = select i1 %244, float %220, float %170, !dbg !50
  %253 = add nsw i32 %39, 544, !dbg !51
  %254 = add nsw i32 %253, %31, !dbg !52
  %255 = add nsw i32 %253, %32, !dbg !52
  %256 = add nsw i32 %253, %33, !dbg !52
  %257 = add nsw i32 %253, %34, !dbg !52
  %258 = add nsw i32 %44, 544, !dbg !51
  %259 = add nsw i32 %258, %31, !dbg !52
  %260 = add nsw i32 %258, %32, !dbg !52
  %261 = add nsw i32 %258, %33, !dbg !52
  %262 = add nsw i32 %258, %34, !dbg !52
  %263 = add nsw i32 %254, %17, !dbg !53
  %264 = add nsw i32 %255, %17, !dbg !53
  %265 = add nsw i32 %256, %17, !dbg !53
  %266 = add nsw i32 %257, %17, !dbg !53
  %267 = add nsw i32 %259, %18, !dbg !53
  %268 = add nsw i32 %260, %18, !dbg !53
  %269 = add nsw i32 %261, %18, !dbg !53
  %270 = add nsw i32 %262, %18, !dbg !53
  %271 = sext i32 %263 to i64, !dbg !54
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !54
  %273 = sext i32 %264 to i64, !dbg !54
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !54
  %275 = sext i32 %265 to i64, !dbg !54
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !54
  %277 = sext i32 %266 to i64, !dbg !54
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !54
  %279 = sext i32 %267 to i64, !dbg !54
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !54
  %281 = sext i32 %268 to i64, !dbg !54
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !54
  %283 = sext i32 %269 to i64, !dbg !54
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !54
  %285 = sext i32 %270 to i64, !dbg !54
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !54
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %29, i32 0, i1 %29) #1, !dbg !55
  %288 = bitcast i32 %287 to float, !dbg !55
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %29, i32 0, i1 %29) #1, !dbg !55
  %290 = bitcast i32 %289 to float, !dbg !55
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %29, i32 0, i1 %29) #1, !dbg !55
  %292 = bitcast i32 %291 to float, !dbg !55
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %29, i32 0, i1 %29) #1, !dbg !55
  %294 = bitcast i32 %293 to float, !dbg !55
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %30, i32 0, i1 %30) #1, !dbg !55
  %296 = bitcast i32 %295 to float, !dbg !55
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %30, i32 0, i1 %30) #1, !dbg !55
  %298 = bitcast i32 %297 to float, !dbg !55
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %30, i32 0, i1 %30) #1, !dbg !55
  %300 = bitcast i32 %299 to float, !dbg !55
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %30, i32 0, i1 %30) #1, !dbg !55
  %302 = bitcast i32 %301 to float, !dbg !55
  %303 = fcmp olt float %245, %288, !dbg !56
  %304 = fcmp olt float %246, %290, !dbg !56
  %305 = fcmp olt float %247, %292, !dbg !56
  %306 = fcmp olt float %248, %294, !dbg !56
  %307 = fcmp olt float %249, %296, !dbg !56
  %308 = fcmp olt float %250, %298, !dbg !56
  %309 = fcmp olt float %251, %300, !dbg !56
  %310 = fcmp olt float %252, %302, !dbg !56
  %311 = fcmp uno float %288, 0.000000e+00, !dbg !58
  %312 = fcmp uno float %290, 0.000000e+00, !dbg !58
  %313 = fcmp uno float %292, 0.000000e+00, !dbg !58
  %314 = fcmp uno float %294, 0.000000e+00, !dbg !58
  %315 = fcmp uno float %296, 0.000000e+00, !dbg !58
  %316 = fcmp uno float %298, 0.000000e+00, !dbg !58
  %317 = fcmp uno float %300, 0.000000e+00, !dbg !58
  %318 = fcmp uno float %302, 0.000000e+00, !dbg !58
  %319 = or i1 %303, %311, !dbg !59
  %320 = or i1 %304, %312, !dbg !59
  %321 = or i1 %305, %313, !dbg !59
  %322 = or i1 %306, %314, !dbg !59
  %323 = or i1 %307, %315, !dbg !59
  %324 = or i1 %308, %316, !dbg !59
  %325 = or i1 %309, %317, !dbg !59
  %326 = or i1 %310, %318, !dbg !59
  %327 = select i1 %319, float %288, float %245, !dbg !60
  %328 = select i1 %320, float %290, float %246, !dbg !60
  %329 = select i1 %321, float %292, float %247, !dbg !60
  %330 = select i1 %322, float %294, float %248, !dbg !60
  %331 = select i1 %323, float %296, float %249, !dbg !60
  %332 = select i1 %324, float %298, float %250, !dbg !60
  %333 = select i1 %325, float %300, float %251, !dbg !60
  %334 = select i1 %326, float %302, float %252, !dbg !60
  %335 = icmp sgt i32 %17, 15, !dbg !61
  %336 = icmp sgt i32 %18, 15, !dbg !61
  %337 = add nsw i32 %17, -16, !dbg !62
  %338 = add nsw i32 %18, -16, !dbg !62
  %339 = add nsw i32 %40, %337, !dbg !63
  %340 = add nsw i32 %41, %337, !dbg !63
  %341 = add nsw i32 %42, %337, !dbg !63
  %342 = add nsw i32 %43, %337, !dbg !63
  %343 = add nsw i32 %45, %338, !dbg !63
  %344 = add nsw i32 %46, %338, !dbg !63
  %345 = add nsw i32 %47, %338, !dbg !63
  %346 = add nsw i32 %48, %338, !dbg !63
  %347 = sext i32 %339 to i64, !dbg !64
  %348 = getelementptr float, ptr addrspace(1) %1, i64 %347, !dbg !64
  %349 = sext i32 %340 to i64, !dbg !64
  %350 = getelementptr float, ptr addrspace(1) %1, i64 %349, !dbg !64
  %351 = sext i32 %341 to i64, !dbg !64
  %352 = getelementptr float, ptr addrspace(1) %1, i64 %351, !dbg !64
  %353 = sext i32 %342 to i64, !dbg !64
  %354 = getelementptr float, ptr addrspace(1) %1, i64 %353, !dbg !64
  %355 = sext i32 %343 to i64, !dbg !64
  %356 = getelementptr float, ptr addrspace(1) %1, i64 %355, !dbg !64
  %357 = sext i32 %344 to i64, !dbg !64
  %358 = getelementptr float, ptr addrspace(1) %1, i64 %357, !dbg !64
  %359 = sext i32 %345 to i64, !dbg !64
  %360 = getelementptr float, ptr addrspace(1) %1, i64 %359, !dbg !64
  %361 = sext i32 %346 to i64, !dbg !64
  %362 = getelementptr float, ptr addrspace(1) %1, i64 %361, !dbg !64
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %348, i1 %335, i32 0, i1 %335) #1, !dbg !65
  %364 = bitcast i32 %363 to float, !dbg !65
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %350, i1 %335, i32 0, i1 %335) #1, !dbg !65
  %366 = bitcast i32 %365 to float, !dbg !65
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %352, i1 %335, i32 0, i1 %335) #1, !dbg !65
  %368 = bitcast i32 %367 to float, !dbg !65
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %354, i1 %335, i32 0, i1 %335) #1, !dbg !65
  %370 = bitcast i32 %369 to float, !dbg !65
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %356, i1 %336, i32 0, i1 %336) #1, !dbg !65
  %372 = bitcast i32 %371 to float, !dbg !65
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %358, i1 %336, i32 0, i1 %336) #1, !dbg !65
  %374 = bitcast i32 %373 to float, !dbg !65
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %360, i1 %336, i32 0, i1 %336) #1, !dbg !65
  %376 = bitcast i32 %375 to float, !dbg !65
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %362, i1 %336, i32 0, i1 %336) #1, !dbg !65
  %378 = bitcast i32 %377 to float, !dbg !65
  %379 = add nsw i32 %90, %337, !dbg !66
  %380 = add nsw i32 %91, %337, !dbg !66
  %381 = add nsw i32 %92, %337, !dbg !66
  %382 = add nsw i32 %93, %337, !dbg !66
  %383 = add nsw i32 %95, %338, !dbg !66
  %384 = add nsw i32 %96, %338, !dbg !66
  %385 = add nsw i32 %97, %338, !dbg !66
  %386 = add nsw i32 %98, %338, !dbg !66
  %387 = sext i32 %379 to i64, !dbg !67
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %387, !dbg !67
  %389 = sext i32 %380 to i64, !dbg !67
  %390 = getelementptr float, ptr addrspace(1) %1, i64 %389, !dbg !67
  %391 = sext i32 %381 to i64, !dbg !67
  %392 = getelementptr float, ptr addrspace(1) %1, i64 %391, !dbg !67
  %393 = sext i32 %382 to i64, !dbg !67
  %394 = getelementptr float, ptr addrspace(1) %1, i64 %393, !dbg !67
  %395 = sext i32 %383 to i64, !dbg !67
  %396 = getelementptr float, ptr addrspace(1) %1, i64 %395, !dbg !67
  %397 = sext i32 %384 to i64, !dbg !67
  %398 = getelementptr float, ptr addrspace(1) %1, i64 %397, !dbg !67
  %399 = sext i32 %385 to i64, !dbg !67
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %399, !dbg !67
  %401 = sext i32 %386 to i64, !dbg !67
  %402 = getelementptr float, ptr addrspace(1) %1, i64 %401, !dbg !67
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %335, i32 0, i1 %335) #1, !dbg !68
  %404 = bitcast i32 %403 to float, !dbg !68
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %335, i32 0, i1 %335) #1, !dbg !68
  %406 = bitcast i32 %405 to float, !dbg !68
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %335, i32 0, i1 %335) #1, !dbg !68
  %408 = bitcast i32 %407 to float, !dbg !68
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %394, i1 %335, i32 0, i1 %335) #1, !dbg !68
  %410 = bitcast i32 %409 to float, !dbg !68
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %336, i32 0, i1 %336) #1, !dbg !68
  %412 = bitcast i32 %411 to float, !dbg !68
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %398, i1 %336, i32 0, i1 %336) #1, !dbg !68
  %414 = bitcast i32 %413 to float, !dbg !68
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %400, i1 %336, i32 0, i1 %336) #1, !dbg !68
  %416 = bitcast i32 %415 to float, !dbg !68
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %336, i32 0, i1 %336) #1, !dbg !68
  %418 = bitcast i32 %417 to float, !dbg !68
  %419 = fcmp ogt float %404, %364, !dbg !69
  %420 = fcmp ogt float %406, %366, !dbg !69
  %421 = fcmp ogt float %408, %368, !dbg !69
  %422 = fcmp ogt float %410, %370, !dbg !69
  %423 = fcmp ogt float %412, %372, !dbg !69
  %424 = fcmp ogt float %414, %374, !dbg !69
  %425 = fcmp ogt float %416, %376, !dbg !69
  %426 = fcmp ogt float %418, %378, !dbg !69
  %427 = fcmp uno float %404, 0.000000e+00, !dbg !71
  %428 = fcmp uno float %406, 0.000000e+00, !dbg !71
  %429 = fcmp uno float %408, 0.000000e+00, !dbg !71
  %430 = fcmp uno float %410, 0.000000e+00, !dbg !71
  %431 = fcmp uno float %412, 0.000000e+00, !dbg !71
  %432 = fcmp uno float %414, 0.000000e+00, !dbg !71
  %433 = fcmp uno float %416, 0.000000e+00, !dbg !71
  %434 = fcmp uno float %418, 0.000000e+00, !dbg !71
  %435 = or i1 %419, %427, !dbg !72
  %436 = or i1 %420, %428, !dbg !72
  %437 = or i1 %421, %429, !dbg !72
  %438 = or i1 %422, %430, !dbg !72
  %439 = or i1 %423, %431, !dbg !72
  %440 = or i1 %424, %432, !dbg !72
  %441 = or i1 %425, %433, !dbg !72
  %442 = or i1 %426, %434, !dbg !72
  %443 = select i1 %435, float %404, float %364, !dbg !73
  %444 = select i1 %436, float %406, float %366, !dbg !73
  %445 = select i1 %437, float %408, float %368, !dbg !73
  %446 = select i1 %438, float %410, float %370, !dbg !73
  %447 = select i1 %439, float %412, float %372, !dbg !73
  %448 = select i1 %440, float %414, float %374, !dbg !73
  %449 = select i1 %441, float %416, float %376, !dbg !73
  %450 = select i1 %442, float %418, float %378, !dbg !73
  %451 = add nsw i32 %172, %337, !dbg !74
  %452 = add nsw i32 %173, %337, !dbg !74
  %453 = add nsw i32 %174, %337, !dbg !74
  %454 = add nsw i32 %175, %337, !dbg !74
  %455 = add nsw i32 %177, %338, !dbg !74
  %456 = add nsw i32 %178, %338, !dbg !74
  %457 = add nsw i32 %179, %338, !dbg !74
  %458 = add nsw i32 %180, %338, !dbg !74
  %459 = sext i32 %451 to i64, !dbg !75
  %460 = getelementptr float, ptr addrspace(1) %1, i64 %459, !dbg !75
  %461 = sext i32 %452 to i64, !dbg !75
  %462 = getelementptr float, ptr addrspace(1) %1, i64 %461, !dbg !75
  %463 = sext i32 %453 to i64, !dbg !75
  %464 = getelementptr float, ptr addrspace(1) %1, i64 %463, !dbg !75
  %465 = sext i32 %454 to i64, !dbg !75
  %466 = getelementptr float, ptr addrspace(1) %1, i64 %465, !dbg !75
  %467 = sext i32 %455 to i64, !dbg !75
  %468 = getelementptr float, ptr addrspace(1) %1, i64 %467, !dbg !75
  %469 = sext i32 %456 to i64, !dbg !75
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !75
  %471 = sext i32 %457 to i64, !dbg !75
  %472 = getelementptr float, ptr addrspace(1) %1, i64 %471, !dbg !75
  %473 = sext i32 %458 to i64, !dbg !75
  %474 = getelementptr float, ptr addrspace(1) %1, i64 %473, !dbg !75
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %460, i1 %335, i32 0, i1 %335) #1, !dbg !76
  %476 = bitcast i32 %475 to float, !dbg !76
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %462, i1 %335, i32 0, i1 %335) #1, !dbg !76
  %478 = bitcast i32 %477 to float, !dbg !76
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %464, i1 %335, i32 0, i1 %335) #1, !dbg !76
  %480 = bitcast i32 %479 to float, !dbg !76
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %466, i1 %335, i32 0, i1 %335) #1, !dbg !76
  %482 = bitcast i32 %481 to float, !dbg !76
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %336, i32 0, i1 %336) #1, !dbg !76
  %484 = bitcast i32 %483 to float, !dbg !76
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %470, i1 %336, i32 0, i1 %336) #1, !dbg !76
  %486 = bitcast i32 %485 to float, !dbg !76
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %336, i32 0, i1 %336) #1, !dbg !76
  %488 = bitcast i32 %487 to float, !dbg !76
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %336, i32 0, i1 %336) #1, !dbg !76
  %490 = bitcast i32 %489 to float, !dbg !76
  %491 = fcmp olt float %443, %476, !dbg !77
  %492 = fcmp olt float %444, %478, !dbg !77
  %493 = fcmp olt float %445, %480, !dbg !77
  %494 = fcmp olt float %446, %482, !dbg !77
  %495 = fcmp olt float %447, %484, !dbg !77
  %496 = fcmp olt float %448, %486, !dbg !77
  %497 = fcmp olt float %449, %488, !dbg !77
  %498 = fcmp olt float %450, %490, !dbg !77
  %499 = fcmp uno float %476, 0.000000e+00, !dbg !79
  %500 = fcmp uno float %478, 0.000000e+00, !dbg !79
  %501 = fcmp uno float %480, 0.000000e+00, !dbg !79
  %502 = fcmp uno float %482, 0.000000e+00, !dbg !79
  %503 = fcmp uno float %484, 0.000000e+00, !dbg !79
  %504 = fcmp uno float %486, 0.000000e+00, !dbg !79
  %505 = fcmp uno float %488, 0.000000e+00, !dbg !79
  %506 = fcmp uno float %490, 0.000000e+00, !dbg !79
  %507 = or i1 %491, %499, !dbg !80
  %508 = or i1 %492, %500, !dbg !80
  %509 = or i1 %493, %501, !dbg !80
  %510 = or i1 %494, %502, !dbg !80
  %511 = or i1 %495, %503, !dbg !80
  %512 = or i1 %496, %504, !dbg !80
  %513 = or i1 %497, %505, !dbg !80
  %514 = or i1 %498, %506, !dbg !80
  %515 = select i1 %507, float %476, float %443, !dbg !81
  %516 = select i1 %508, float %478, float %444, !dbg !81
  %517 = select i1 %509, float %480, float %445, !dbg !81
  %518 = select i1 %510, float %482, float %446, !dbg !81
  %519 = select i1 %511, float %484, float %447, !dbg !81
  %520 = select i1 %512, float %486, float %448, !dbg !81
  %521 = select i1 %513, float %488, float %449, !dbg !81
  %522 = select i1 %514, float %490, float %450, !dbg !81
  %523 = add nsw i32 %254, %337, !dbg !82
  %524 = add nsw i32 %255, %337, !dbg !82
  %525 = add nsw i32 %256, %337, !dbg !82
  %526 = add nsw i32 %257, %337, !dbg !82
  %527 = add nsw i32 %259, %338, !dbg !82
  %528 = add nsw i32 %260, %338, !dbg !82
  %529 = add nsw i32 %261, %338, !dbg !82
  %530 = add nsw i32 %262, %338, !dbg !82
  %531 = sext i32 %523 to i64, !dbg !83
  %532 = getelementptr float, ptr addrspace(1) %1, i64 %531, !dbg !83
  %533 = sext i32 %524 to i64, !dbg !83
  %534 = getelementptr float, ptr addrspace(1) %1, i64 %533, !dbg !83
  %535 = sext i32 %525 to i64, !dbg !83
  %536 = getelementptr float, ptr addrspace(1) %1, i64 %535, !dbg !83
  %537 = sext i32 %526 to i64, !dbg !83
  %538 = getelementptr float, ptr addrspace(1) %1, i64 %537, !dbg !83
  %539 = sext i32 %527 to i64, !dbg !83
  %540 = getelementptr float, ptr addrspace(1) %1, i64 %539, !dbg !83
  %541 = sext i32 %528 to i64, !dbg !83
  %542 = getelementptr float, ptr addrspace(1) %1, i64 %541, !dbg !83
  %543 = sext i32 %529 to i64, !dbg !83
  %544 = getelementptr float, ptr addrspace(1) %1, i64 %543, !dbg !83
  %545 = sext i32 %530 to i64, !dbg !83
  %546 = getelementptr float, ptr addrspace(1) %1, i64 %545, !dbg !83
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %532, i1 %335, i32 0, i1 %335) #1, !dbg !84
  %548 = bitcast i32 %547 to float, !dbg !84
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %534, i1 %335, i32 0, i1 %335) #1, !dbg !84
  %550 = bitcast i32 %549 to float, !dbg !84
  %551 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %536, i1 %335, i32 0, i1 %335) #1, !dbg !84
  %552 = bitcast i32 %551 to float, !dbg !84
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %538, i1 %335, i32 0, i1 %335) #1, !dbg !84
  %554 = bitcast i32 %553 to float, !dbg !84
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %540, i1 %336, i32 0, i1 %336) #1, !dbg !84
  %556 = bitcast i32 %555 to float, !dbg !84
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %542, i1 %336, i32 0, i1 %336) #1, !dbg !84
  %558 = bitcast i32 %557 to float, !dbg !84
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %544, i1 %336, i32 0, i1 %336) #1, !dbg !84
  %560 = bitcast i32 %559 to float, !dbg !84
  %561 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %546, i1 %336, i32 0, i1 %336) #1, !dbg !84
  %562 = bitcast i32 %561 to float, !dbg !84
  %563 = fcmp olt float %515, %548, !dbg !85
  %564 = fcmp olt float %516, %550, !dbg !85
  %565 = fcmp olt float %517, %552, !dbg !85
  %566 = fcmp olt float %518, %554, !dbg !85
  %567 = fcmp olt float %519, %556, !dbg !85
  %568 = fcmp olt float %520, %558, !dbg !85
  %569 = fcmp olt float %521, %560, !dbg !85
  %570 = fcmp olt float %522, %562, !dbg !85
  %571 = fcmp uno float %548, 0.000000e+00, !dbg !87
  %572 = fcmp uno float %550, 0.000000e+00, !dbg !87
  %573 = fcmp uno float %552, 0.000000e+00, !dbg !87
  %574 = fcmp uno float %554, 0.000000e+00, !dbg !87
  %575 = fcmp uno float %556, 0.000000e+00, !dbg !87
  %576 = fcmp uno float %558, 0.000000e+00, !dbg !87
  %577 = fcmp uno float %560, 0.000000e+00, !dbg !87
  %578 = fcmp uno float %562, 0.000000e+00, !dbg !87
  %579 = or i1 %563, %571, !dbg !88
  %580 = or i1 %564, %572, !dbg !88
  %581 = or i1 %565, %573, !dbg !88
  %582 = or i1 %566, %574, !dbg !88
  %583 = or i1 %567, %575, !dbg !88
  %584 = or i1 %568, %576, !dbg !88
  %585 = or i1 %569, %577, !dbg !88
  %586 = or i1 %570, %578, !dbg !88
  %587 = select i1 %579, float %548, float %515, !dbg !89
  %588 = select i1 %580, float %550, float %516, !dbg !89
  %589 = select i1 %581, float %552, float %517, !dbg !89
  %590 = select i1 %582, float %554, float %518, !dbg !89
  %591 = select i1 %583, float %556, float %519, !dbg !89
  %592 = select i1 %584, float %558, float %520, !dbg !89
  %593 = select i1 %585, float %560, float %521, !dbg !89
  %594 = select i1 %586, float %562, float %522, !dbg !89
  %595 = select i1 %29, float %327, float %587, !dbg !90
  %596 = select i1 %29, float %328, float %588, !dbg !90
  %597 = select i1 %29, float %329, float %589, !dbg !90
  %598 = select i1 %29, float %330, float %590, !dbg !90
  %599 = select i1 %30, float %331, float %591, !dbg !90
  %600 = select i1 %30, float %332, float %592, !dbg !90
  %601 = select i1 %30, float %333, float %593, !dbg !90
  %602 = select i1 %30, float %334, float %594, !dbg !90
  %603 = sext i32 %10 to i64, !dbg !91
  %604 = getelementptr float, ptr addrspace(1) %2, i64 %603, !dbg !91
  %605 = sext i32 %14 to i64, !dbg !91
  %606 = getelementptr float, ptr addrspace(1) %2, i64 %605, !dbg !91
  %607 = bitcast float %595 to i32, !dbg !92
  %608 = bitcast float %596 to i32, !dbg !92
  %609 = bitcast float %597 to i32, !dbg !92
  %610 = bitcast float %598 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %607, i32 %608, i32 %609, i32 %610, ptr addrspace(1) %604, i1 true) #1, !dbg !92
  %611 = bitcast float %599 to i32, !dbg !92
  %612 = bitcast float %600 to i32, !dbg !92
  %613 = bitcast float %601 to i32, !dbg !92
  %614 = bitcast float %602 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %611, i32 %612, i32 %613, i32 %614, ptr addrspace(1) %606, i1 true) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5zrwi77fvdfxzcogi622fiqxc3jy56wonmwttm46eyvjeoib4xk.py", directory: "inductor_cache/5z")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 33, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 59, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 65, scope: !7)
!29 = !DILocation(line: 35, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 52, scope: !7)
!31 = !DILocation(line: 35, column: 64, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 70, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 36, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 37, column: 44, scope: !7)
!42 = !DILocation(line: 37, column: 53, scope: !7)
!43 = !DILocation(line: 37, column: 65, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 71, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!51 = !DILocation(line: 39, column: 45, scope: !7)
!52 = !DILocation(line: 39, column: 54, scope: !7)
!53 = !DILocation(line: 39, column: 66, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 72, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !57)
!61 = !DILocation(line: 43, column: 20, scope: !7)
!62 = !DILocation(line: 46, column: 68, scope: !7)
!63 = !DILocation(line: 46, column: 60, scope: !7)
!64 = !DILocation(line: 46, column: 31, scope: !7)
!65 = !DILocation(line: 46, column: 74, scope: !7)
!66 = !DILocation(line: 47, column: 65, scope: !7)
!67 = !DILocation(line: 47, column: 31, scope: !7)
!68 = !DILocation(line: 47, column: 79, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !70)
!70 = !DILocation(line: 48, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !70)
!74 = !DILocation(line: 49, column: 66, scope: !7)
!75 = !DILocation(line: 49, column: 31, scope: !7)
!76 = !DILocation(line: 49, column: 80, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !78)
!78 = !DILocation(line: 50, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !78)
!82 = !DILocation(line: 51, column: 66, scope: !7)
!83 = !DILocation(line: 51, column: 31, scope: !7)
!84 = !DILocation(line: 51, column: 80, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !86)
!86 = !DILocation(line: 52, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !86)
!90 = !DILocation(line: 0, scope: !7)
!91 = !DILocation(line: 56, column: 25, scope: !7)
!92 = !DILocation(line: 56, column: 37, scope: !7)
!93 = !DILocation(line: 56, column: 4, scope: !7)
