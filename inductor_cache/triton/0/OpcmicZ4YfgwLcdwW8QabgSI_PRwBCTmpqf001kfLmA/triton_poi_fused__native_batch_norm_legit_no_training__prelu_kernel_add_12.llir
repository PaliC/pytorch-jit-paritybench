; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = or disjoint i32 %12, %14, !dbg !13
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 1, !dbg !15
  %23 = lshr i32 %13, 6, !dbg !16
  %.lobit = and i32 %23, 1, !dbg !16
  %24 = or disjoint i32 %22, %.lobit, !dbg !17
  %25 = icmp slt i32 %22, 2, !dbg !18
  %26 = icmp slt i32 %24, 2, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = add i32 %18, %21, !dbg !21
  %30 = shl i32 %29, 1, !dbg !21
  %31 = add i32 %19, %21, !dbg !21
  %32 = shl i32 %31, 1, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %25) #4, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %25) #4, !dbg !23
  %39 = sext i32 %22 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %25) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !26
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %25) #4, !dbg !27
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !27
  %46 = bitcast i32 %44 to float, !dbg !27
  %47 = bitcast i32 %45 to float, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !28
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %25) #4, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !30
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %25) #4, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !32
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %25) #4, !dbg !33
  %54 = shl i32 %24, 8, !dbg !34
  %55 = add i32 %54, %.decomposed, !dbg !35
  %56 = shl i32 %27, 9, !dbg !36
  %57 = add i32 %55, %56, !dbg !37
  %58 = sext i32 %57 to i64, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !38
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %26) #4, !dbg !39
  %61 = fadd float %46, 0x3EE4F8B580000000, !dbg !40
  %62 = fadd float %47, 0x3EE4F8B580000000, !dbg !40
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %63, 0, !dbg !41
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %64, 0, !dbg !41
  br i1 %.not.i, label %70, label %65, !dbg !41

65:                                               ; preds = %10
  br i1 %.not1.i, label %68, label %66, !dbg !41

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

70:                                               ; preds = %10
  br i1 %.not1.i, label %73, label %71, !dbg !41

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !41
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i4 = icmp eq i32 %75, 0, !dbg !41
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i7 = icmp eq i32 %76, 0, !dbg !41
  br i1 %.not.i4, label %82, label %77, !dbg !41

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %80, label %78, !dbg !41

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %85, label %83, !dbg !41

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

__nv_sqrtf.exit8:                                 ; preds = %78, %80, %83, %85
  %.0.i6 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !41
  %87 = extractvalue { i32, i32 } %38, 1, !dbg !23
  %88 = extractvalue { i32, i32 } %41, 1, !dbg !25
  %89 = extractvalue { i32, i32 } %38, 0, !dbg !23
  %90 = extractvalue { i32, i32 } %41, 0, !dbg !25
  %91 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %92 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %93 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !39
  %98 = bitcast i32 %97 to float, !dbg !39
  %99 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !39
  %100 = bitcast i32 %99 to float, !dbg !39
  %101 = extractvalue { i32, i32 } %53, 1, !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = extractvalue { i32, i32 } %53, 0, !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = extractvalue { i32, i32 } %51, 1, !dbg !31
  %106 = extractvalue { i32, i32 } %51, 0, !dbg !31
  %107 = extractvalue { i32, i32 } %49, 1, !dbg !29
  %108 = extractvalue { i32, i32 } %49, 0, !dbg !29
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !42
  %111 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !25
  %112 = insertelement <2 x i32> %111, i32 %90, i64 1, !dbg !25
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !25
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !25
  %115 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !23
  %116 = insertelement <4 x i32> %115, i32 %89, i64 1, !dbg !23
  %117 = insertelement <4 x i32> %116, i32 %91, i64 2, !dbg !23
  %118 = insertelement <4 x i32> %117, i32 %92, i64 3, !dbg !23
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !23
  %120 = fsub <4 x float> %119, %114, !dbg !43
  %121 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !31
  %122 = insertelement <2 x i32> %121, i32 %106, i64 1, !dbg !31
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !31
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !31
  %125 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !29
  %126 = insertelement <2 x i32> %125, i32 %108, i64 1, !dbg !29
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !29
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %129 = insertelement <4 x float> poison, float %110, i64 0, !dbg !44
  %130 = insertelement <4 x float> %129, float %109, i64 1, !dbg !44
  %131 = shufflevector <4 x float> %130, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !44
  %132 = fmul <4 x float> %120, %131, !dbg !44
  %133 = fmul <4 x float> %132, %128, !dbg !45
  %134 = fadd <4 x float> %133, %124, !dbg !46
  %135 = fcmp ogt <4 x float> %134, zeroinitializer, !dbg !47
  %136 = extractelement <4 x float> %134, i64 3, !dbg !48
  %137 = fmul float %136, %104, !dbg !49
  %138 = extractelement <4 x float> %134, i64 2, !dbg !48
  %139 = fmul float %138, %102, !dbg !49
  %140 = extractelement <4 x float> %134, i64 1, !dbg !48
  %141 = fmul float %140, %104, !dbg !49
  %142 = extractelement <4 x float> %134, i64 0, !dbg !48
  %143 = fmul float %142, %102, !dbg !49
  %144 = extractelement <4 x i1> %135, i64 3, !dbg !48
  %145 = select i1 %144, float %136, float %137, !dbg !48
  %146 = extractelement <4 x i1> %135, i64 2, !dbg !48
  %147 = select i1 %146, float %138, float %139, !dbg !48
  %148 = extractelement <4 x i1> %135, i64 1, !dbg !48
  %149 = select i1 %148, float %140, float %141, !dbg !48
  %150 = extractelement <4 x i1> %135, i64 0, !dbg !48
  %151 = select i1 %150, float %142, float %143, !dbg !48
  %152 = and i32 %16, 508, !dbg !48
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  %154 = bitcast float %145 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !48
  %155 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 1040, !dbg !48
  %156 = bitcast float %147 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !48
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %158 = bitcast float %149 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #4, !dbg !48
  %159 = getelementptr inbounds i8, ptr addrspace(3) %153, i32 1552, !dbg !48
  %160 = bitcast float %151 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %161 = lshr i32 %16, 6, !dbg !48
  %162 = and i32 %161, 4, !dbg !48
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !48
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %152, !dbg !48
  %165 = load float, ptr addrspace(3) %164, align 16, !dbg !48
  %166 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 4, !dbg !48
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !48
  %168 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 8, !dbg !48
  %169 = load float, ptr addrspace(3) %168, align 8, !dbg !48
  %170 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 12, !dbg !48
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !48
  %172 = fadd float %165, %100, !dbg !50
  %173 = fadd float %167, %98, !dbg !50
  %174 = fadd float %169, %96, !dbg !50
  %175 = fadd float %171, %94, !dbg !50
  %176 = getelementptr float, ptr addrspace(1) %7, i64 %58, !dbg !51
  %177 = bitcast float %172 to i32, !dbg !52
  %178 = bitcast float %173 to i32, !dbg !52
  %179 = bitcast float %174 to i32, !dbg !52
  %180 = bitcast float %175 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %176, i1 %26) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf7ngmalthsp2ker5pntizg64spnndx267usywyursud5osmuwf2.py", directory: "inductor_cache/f7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 40, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 49, scope: !7)
!37 = !DILocation(line: 38, column: 45, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 54, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 26, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 25, scope: !7)
!52 = !DILocation(line: 55, column: 55, scope: !7)
!53 = !DILocation(line: 55, column: 4, scope: !7)
