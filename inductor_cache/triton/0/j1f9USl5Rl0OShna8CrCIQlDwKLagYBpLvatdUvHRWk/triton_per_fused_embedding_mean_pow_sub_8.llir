; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_embedding_mean_pow_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %9 = shl i32 %8, 5, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 31, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = icmp slt i32 %12, 512, !dbg !16
  %14 = lshr i32 %10, 5, !dbg !17
  %15 = and i32 %14, 7, !dbg !17
  %16 = or disjoint i32 %15, 8, !dbg !17
  %17 = or disjoint i32 %15, 16, !dbg !17
  %18 = or disjoint i32 %15, 24, !dbg !17
  %19 = or disjoint i32 %15, 32, !dbg !17
  %20 = or disjoint i32 %15, 40, !dbg !17
  %21 = or disjoint i32 %15, 48, !dbg !17
  %22 = or disjoint i32 %15, 56, !dbg !17
  %.frozen = freeze i32 %12, !dbg !18
  %23 = sdiv i32 %.frozen, 64, !dbg !18
  %24 = mul i32 %23, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = shl i32 %12, 1, !dbg !20
  %26 = or disjoint i32 %25, 1, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %28, i1 %13, i1 %13) #5, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %13, i1 %13) #5, !dbg !23
  %47 = shl nsw i32 %.decomposed, 7, !dbg !24
  %48 = or disjoint i32 %47, %15, !dbg !25
  %49 = or disjoint i32 %47, %16, !dbg !25
  %50 = or disjoint i32 %47, %17, !dbg !25
  %51 = or disjoint i32 %47, %18, !dbg !25
  %52 = or disjoint i32 %47, %19, !dbg !25
  %53 = or disjoint i32 %47, %20, !dbg !25
  %54 = or disjoint i32 %47, %21, !dbg !25
  %55 = or disjoint i32 %47, %22, !dbg !25
  %56 = or disjoint i32 %48, 64, !dbg !25
  %57 = or disjoint i32 %48, 72, !dbg !25
  %58 = or disjoint i32 %48, 80, !dbg !25
  %59 = or disjoint i32 %48, 88, !dbg !25
  %60 = or disjoint i32 %48, 96, !dbg !25
  %61 = or disjoint i32 %48, 104, !dbg !25
  %62 = or disjoint i32 %48, 112, !dbg !25
  %63 = or disjoint i32 %48, 120, !dbg !25
  %64 = shl i32 %23, 13, !dbg !26
  %65 = add i32 %48, %64, !dbg !27
  %66 = add i32 %49, %64, !dbg !27
  %67 = add i32 %50, %64, !dbg !27
  %68 = add i32 %51, %64, !dbg !27
  %69 = add i32 %52, %64, !dbg !27
  %70 = add i32 %53, %64, !dbg !27
  %71 = add i32 %54, %64, !dbg !27
  %72 = add i32 %55, %64, !dbg !27
  %73 = add i32 %56, %64, !dbg !27
  %74 = add i32 %57, %64, !dbg !27
  %75 = add i32 %58, %64, !dbg !27
  %76 = add i32 %59, %64, !dbg !27
  %77 = add i32 %60, %64, !dbg !27
  %78 = add i32 %61, %64, !dbg !27
  %79 = add i32 %62, %64, !dbg !27
  %80 = add i32 %63, %64, !dbg !27
  %81 = sdiv i32 %65, 1024, !dbg !28
  %82 = sdiv i32 %66, 1024, !dbg !28
  %83 = sdiv i32 %67, 1024, !dbg !28
  %84 = sdiv i32 %68, 1024, !dbg !28
  %85 = sdiv i32 %69, 1024, !dbg !28
  %86 = sdiv i32 %70, 1024, !dbg !28
  %87 = sdiv i32 %71, 1024, !dbg !28
  %88 = sdiv i32 %72, 1024, !dbg !28
  %89 = sdiv i32 %73, 1024, !dbg !28
  %90 = sdiv i32 %74, 1024, !dbg !28
  %91 = sdiv i32 %75, 1024, !dbg !28
  %92 = sdiv i32 %76, 1024, !dbg !28
  %93 = sdiv i32 %77, 1024, !dbg !28
  %94 = sdiv i32 %78, 1024, !dbg !28
  %95 = sdiv i32 %79, 1024, !dbg !28
  %96 = sdiv i32 %80, 1024, !dbg !28
  %97 = srem i32 %81, 16, !dbg !29
  %98 = srem i32 %82, 16, !dbg !29
  %99 = srem i32 %83, 16, !dbg !29
  %100 = srem i32 %84, 16, !dbg !29
  %101 = srem i32 %85, 16, !dbg !29
  %102 = srem i32 %86, 16, !dbg !29
  %103 = srem i32 %87, 16, !dbg !29
  %104 = srem i32 %88, 16, !dbg !29
  %105 = srem i32 %89, 16, !dbg !29
  %106 = srem i32 %90, 16, !dbg !29
  %107 = srem i32 %91, 16, !dbg !29
  %108 = srem i32 %92, 16, !dbg !29
  %109 = srem i32 %93, 16, !dbg !29
  %110 = srem i32 %94, 16, !dbg !29
  %111 = srem i32 %95, 16, !dbg !29
  %112 = srem i32 %96, 16, !dbg !29
  %113 = shl nsw i32 %97, 4, !dbg !30
  %114 = shl nsw i32 %98, 4, !dbg !30
  %115 = shl nsw i32 %99, 4, !dbg !30
  %116 = shl nsw i32 %100, 4, !dbg !30
  %117 = shl nsw i32 %101, 4, !dbg !30
  %118 = shl nsw i32 %102, 4, !dbg !30
  %119 = shl nsw i32 %103, 4, !dbg !30
  %120 = shl nsw i32 %104, 4, !dbg !30
  %121 = shl nsw i32 %105, 4, !dbg !30
  %122 = shl nsw i32 %106, 4, !dbg !30
  %123 = shl nsw i32 %107, 4, !dbg !30
  %124 = shl nsw i32 %108, 4, !dbg !30
  %125 = shl nsw i32 %109, 4, !dbg !30
  %126 = shl nsw i32 %110, 4, !dbg !30
  %127 = shl nsw i32 %111, 4, !dbg !30
  %128 = shl nsw i32 %112, 4, !dbg !30
  %129 = shl nuw nsw i32 %15, 8, !dbg !31
  %130 = shl nuw nsw i32 %16, 8, !dbg !31
  %131 = shl nuw nsw i32 %17, 8, !dbg !31
  %132 = shl nuw nsw i32 %18, 8, !dbg !31
  %133 = shl nuw nsw i32 %19, 8, !dbg !31
  %134 = shl nuw nsw i32 %20, 8, !dbg !31
  %135 = shl nuw nsw i32 %21, 8, !dbg !31
  %136 = shl nuw nsw i32 %22, 8, !dbg !31
  %137 = sdiv i32 %65, 16384, !dbg !32
  %138 = sdiv i32 %66, 16384, !dbg !32
  %139 = sdiv i32 %67, 16384, !dbg !32
  %140 = sdiv i32 %68, 16384, !dbg !32
  %141 = sdiv i32 %69, 16384, !dbg !32
  %142 = sdiv i32 %70, 16384, !dbg !32
  %143 = sdiv i32 %71, 16384, !dbg !32
  %144 = sdiv i32 %72, 16384, !dbg !32
  %145 = sdiv i32 %73, 16384, !dbg !32
  %146 = sdiv i32 %74, 16384, !dbg !32
  %147 = sdiv i32 %75, 16384, !dbg !32
  %148 = sdiv i32 %76, 16384, !dbg !32
  %149 = sdiv i32 %77, 16384, !dbg !32
  %150 = sdiv i32 %78, 16384, !dbg !32
  %151 = sdiv i32 %79, 16384, !dbg !32
  %152 = sdiv i32 %80, 16384, !dbg !32
  %153 = shl nsw i32 %137, 14, !dbg !33
  %154 = shl nsw i32 %138, 14, !dbg !33
  %155 = shl nsw i32 %139, 14, !dbg !33
  %156 = shl nsw i32 %140, 14, !dbg !33
  %157 = shl nsw i32 %141, 14, !dbg !33
  %158 = shl nsw i32 %142, 14, !dbg !33
  %159 = shl nsw i32 %143, 14, !dbg !33
  %160 = shl nsw i32 %144, 14, !dbg !33
  %161 = shl nsw i32 %145, 14, !dbg !33
  %162 = shl nsw i32 %146, 14, !dbg !33
  %163 = shl nsw i32 %147, 14, !dbg !33
  %164 = shl nsw i32 %148, 14, !dbg !33
  %165 = shl nsw i32 %149, 14, !dbg !33
  %166 = shl nsw i32 %150, 14, !dbg !33
  %167 = shl nsw i32 %151, 14, !dbg !33
  %168 = shl nsw i32 %152, 14, !dbg !33
  %169 = sdiv i32 %48, 64, !dbg !34
  %170 = sdiv i32 %49, 64, !dbg !34
  %171 = sdiv i32 %50, 64, !dbg !34
  %172 = sdiv i32 %51, 64, !dbg !34
  %173 = sdiv i32 %52, 64, !dbg !34
  %174 = sdiv i32 %53, 64, !dbg !34
  %175 = sdiv i32 %54, 64, !dbg !34
  %176 = sdiv i32 %55, 64, !dbg !34
  %177 = sdiv i32 %56, 64, !dbg !34
  %178 = sdiv i32 %57, 64, !dbg !34
  %179 = sdiv i32 %58, 64, !dbg !34
  %180 = sdiv i32 %59, 64, !dbg !34
  %181 = sdiv i32 %60, 64, !dbg !34
  %182 = sdiv i32 %61, 64, !dbg !34
  %183 = sdiv i32 %62, 64, !dbg !34
  %184 = sdiv i32 %63, 64, !dbg !34
  %185 = srem i32 %169, 16, !dbg !35
  %186 = srem i32 %170, 16, !dbg !35
  %187 = srem i32 %171, 16, !dbg !35
  %188 = srem i32 %172, 16, !dbg !35
  %189 = srem i32 %173, 16, !dbg !35
  %190 = srem i32 %174, 16, !dbg !35
  %191 = srem i32 %175, 16, !dbg !35
  %192 = srem i32 %176, 16, !dbg !35
  %193 = srem i32 %177, 16, !dbg !35
  %194 = srem i32 %178, 16, !dbg !35
  %195 = srem i32 %179, 16, !dbg !35
  %196 = srem i32 %180, 16, !dbg !35
  %197 = srem i32 %181, 16, !dbg !35
  %198 = srem i32 %182, 16, !dbg !35
  %199 = srem i32 %183, 16, !dbg !35
  %200 = srem i32 %184, 16, !dbg !35
  %201 = add nsw i32 %185, %129, !dbg !36
  %202 = add i32 %201, %153, !dbg !37
  %203 = add i32 %202, %113, !dbg !38
  %204 = add nsw i32 %186, %130, !dbg !36
  %205 = add nsw i32 %204, %154, !dbg !37
  %206 = add nsw i32 %205, %114, !dbg !38
  %207 = add nsw i32 %187, %131, !dbg !36
  %208 = add nsw i32 %207, %155, !dbg !37
  %209 = add nsw i32 %208, %115, !dbg !38
  %210 = add nsw i32 %188, %132, !dbg !36
  %211 = add nsw i32 %210, %156, !dbg !37
  %212 = add nsw i32 %211, %116, !dbg !38
  %213 = add nsw i32 %189, %133, !dbg !36
  %214 = add nsw i32 %213, %157, !dbg !37
  %215 = add nsw i32 %214, %117, !dbg !38
  %216 = add nsw i32 %190, %134, !dbg !36
  %217 = add nsw i32 %216, %158, !dbg !37
  %218 = add nsw i32 %217, %118, !dbg !38
  %219 = add nsw i32 %191, %135, !dbg !36
  %220 = add nsw i32 %219, %159, !dbg !37
  %221 = add nsw i32 %220, %119, !dbg !38
  %222 = add nsw i32 %192, %136, !dbg !36
  %223 = add nsw i32 %222, %160, !dbg !37
  %224 = add nsw i32 %223, %120, !dbg !38
  %225 = add nsw i32 %193, %129, !dbg !36
  %226 = add i32 %225, %161, !dbg !37
  %227 = add i32 %226, %121, !dbg !38
  %228 = add nsw i32 %194, %130, !dbg !36
  %229 = add nsw i32 %228, %162, !dbg !37
  %230 = add nsw i32 %229, %122, !dbg !38
  %231 = add nsw i32 %195, %131, !dbg !36
  %232 = add nsw i32 %231, %163, !dbg !37
  %233 = add nsw i32 %232, %123, !dbg !38
  %234 = add nsw i32 %196, %132, !dbg !36
  %235 = add nsw i32 %234, %164, !dbg !37
  %236 = add nsw i32 %235, %124, !dbg !38
  %237 = add nsw i32 %197, %133, !dbg !36
  %238 = add nsw i32 %237, %165, !dbg !37
  %239 = add nsw i32 %238, %125, !dbg !38
  %240 = add nsw i32 %198, %134, !dbg !36
  %241 = add nsw i32 %240, %166, !dbg !37
  %242 = add nsw i32 %241, %126, !dbg !38
  %243 = add nsw i32 %199, %135, !dbg !36
  %244 = add nsw i32 %243, %167, !dbg !37
  %245 = add nsw i32 %244, %127, !dbg !38
  %246 = add nsw i32 %200, %136, !dbg !36
  %247 = add nsw i32 %246, %168, !dbg !37
  %248 = add nsw i32 %247, %128, !dbg !38
  %249 = sext i32 %203 to i64, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !39
  %251 = sext i32 %206 to i64, !dbg !39
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !39
  %253 = sext i32 %209 to i64, !dbg !39
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %253, !dbg !39
  %255 = sext i32 %212 to i64, !dbg !39
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %255, !dbg !39
  %257 = sext i32 %215 to i64, !dbg !39
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %257, !dbg !39
  %259 = sext i32 %218 to i64, !dbg !39
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !39
  %261 = sext i32 %221 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !39
  %263 = sext i32 %224 to i64, !dbg !39
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !39
  %265 = sext i32 %227 to i64, !dbg !39
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !39
  %267 = sext i32 %230 to i64, !dbg !39
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !39
  %269 = sext i32 %233 to i64, !dbg !39
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !39
  %271 = sext i32 %236 to i64, !dbg !39
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !39
  %273 = sext i32 %239 to i64, !dbg !39
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !39
  %275 = sext i32 %242 to i64, !dbg !39
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !39
  %277 = sext i32 %245 to i64, !dbg !39
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !39
  %279 = sext i32 %248 to i64, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %279, !dbg !39
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %13, i32 0, i1 %13) #5, !dbg !40
  %297 = zext nneg i32 %15 to i64, !dbg !41
  %298 = getelementptr float, ptr addrspace(1) %3, i64 %297, !dbg !41
  %299 = zext nneg i32 %16 to i64, !dbg !41
  %300 = getelementptr float, ptr addrspace(1) %3, i64 %299, !dbg !41
  %301 = zext nneg i32 %17 to i64, !dbg !41
  %302 = getelementptr float, ptr addrspace(1) %3, i64 %301, !dbg !41
  %303 = zext nneg i32 %18 to i64, !dbg !41
  %304 = getelementptr float, ptr addrspace(1) %3, i64 %303, !dbg !41
  %305 = zext nneg i32 %19 to i64, !dbg !41
  %306 = getelementptr float, ptr addrspace(1) %3, i64 %305, !dbg !41
  %307 = zext nneg i32 %20 to i64, !dbg !41
  %308 = getelementptr float, ptr addrspace(1) %3, i64 %307, !dbg !41
  %309 = zext nneg i32 %21 to i64, !dbg !41
  %310 = getelementptr float, ptr addrspace(1) %3, i64 %309, !dbg !41
  %311 = zext nneg i32 %22 to i64, !dbg !41
  %312 = getelementptr float, ptr addrspace(1) %3, i64 %311, !dbg !41
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #5, !dbg !42
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #5, !dbg !42
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #5, !dbg !42
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #5, !dbg !42
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #5, !dbg !42
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #5, !dbg !42
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #5, !dbg !42
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #5, !dbg !42
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #5, !dbg !42
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #5, !dbg !42
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #5, !dbg !42
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #5, !dbg !42
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #5, !dbg !42
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #5, !dbg !42
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #5, !dbg !42
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #5, !dbg !42
  %329 = insertelement <16 x i64> poison, i64 %32, i64 0, !dbg !43
  %330 = insertelement <16 x i64> %329, i64 %31, i64 1, !dbg !43
  %331 = insertelement <16 x i64> %330, i64 %33, i64 2, !dbg !43
  %332 = insertelement <16 x i64> %331, i64 %34, i64 3, !dbg !43
  %333 = insertelement <16 x i64> %332, i64 %35, i64 4, !dbg !43
  %334 = insertelement <16 x i64> %333, i64 %36, i64 5, !dbg !43
  %335 = insertelement <16 x i64> %334, i64 %37, i64 6, !dbg !43
  %336 = insertelement <16 x i64> %335, i64 %38, i64 7, !dbg !43
  %337 = insertelement <16 x i64> %336, i64 %39, i64 8, !dbg !43
  %338 = insertelement <16 x i64> %337, i64 %40, i64 9, !dbg !43
  %339 = insertelement <16 x i64> %338, i64 %41, i64 10, !dbg !43
  %340 = insertelement <16 x i64> %339, i64 %42, i64 11, !dbg !43
  %341 = insertelement <16 x i64> %340, i64 %43, i64 12, !dbg !43
  %342 = insertelement <16 x i64> %341, i64 %44, i64 13, !dbg !43
  %343 = insertelement <16 x i64> %342, i64 %45, i64 14, !dbg !43
  %344 = insertelement <16 x i64> %343, i64 %46, i64 15, !dbg !43
  %345 = lshr <16 x i64> %344, splat (i64 53), !dbg !43
  %346 = and <16 x i64> %345, splat (i64 1024), !dbg !43
  %347 = add <16 x i64> %346, %344, !dbg !43
  %348 = tail call i64 @llvm.vector.reduce.or.v16i64(<16 x i64> %347), !dbg !44
  %349 = icmp ugt i64 %348, 1023, !dbg !44
  %350 = and i1 %13, %349, !dbg !44
  br i1 %350, label %351, label %352, !dbg !44

351:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !44
  unreachable, !dbg !44

352:                                              ; preds = %7
  %353 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !42
  %354 = insertelement <2 x i32> %353, i32 %328, i64 1, !dbg !42
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !42
  %356 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !42
  %357 = insertelement <2 x i32> %356, i32 %326, i64 1, !dbg !42
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !42
  %359 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !42
  %360 = insertelement <2 x i32> %359, i32 %324, i64 1, !dbg !42
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !42
  %362 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !42
  %363 = insertelement <2 x i32> %362, i32 %322, i64 1, !dbg !42
  %364 = bitcast <2 x i32> %363 to <2 x float>, !dbg !42
  %365 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !42
  %366 = insertelement <2 x i32> %365, i32 %320, i64 1, !dbg !42
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !42
  %368 = bitcast i32 %318 to float, !dbg !42
  %369 = bitcast i32 %317 to float, !dbg !42
  %370 = bitcast i32 %316 to float, !dbg !42
  %371 = bitcast i32 %315 to float, !dbg !42
  %372 = bitcast i32 %314 to float, !dbg !42
  %373 = bitcast i32 %313 to float, !dbg !42
  %374 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !40
  %375 = insertelement <2 x i32> %374, i32 %296, i64 1, !dbg !40
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !40
  %377 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !40
  %378 = insertelement <2 x i32> %377, i32 %294, i64 1, !dbg !40
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !40
  %380 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !40
  %381 = insertelement <2 x i32> %380, i32 %292, i64 1, !dbg !40
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !40
  %383 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !40
  %384 = insertelement <2 x i32> %383, i32 %290, i64 1, !dbg !40
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !40
  %386 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !40
  %387 = insertelement <2 x i32> %386, i32 %288, i64 1, !dbg !40
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !40
  %389 = bitcast i32 %286 to float, !dbg !40
  %390 = bitcast i32 %285 to float, !dbg !40
  %391 = bitcast i32 %284 to float, !dbg !40
  %392 = bitcast i32 %283 to float, !dbg !40
  %393 = bitcast i32 %282 to float, !dbg !40
  %394 = bitcast i32 %281 to float, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %395 = shl nuw nsw i32 %15, 10, !dbg !45
  %396 = shl nuw nsw i32 %16, 10, !dbg !45
  %397 = shl nuw nsw i32 %17, 10, !dbg !45
  %398 = shl nuw nsw i32 %18, 10, !dbg !45
  %399 = shl nuw nsw i32 %19, 10, !dbg !45
  %400 = shl nuw nsw i32 %20, 10, !dbg !45
  %401 = shl nuw nsw i32 %21, 10, !dbg !45
  %402 = shl nuw nsw i32 %22, 10, !dbg !45
  %403 = zext nneg i32 %395 to i64, !dbg !46
  %404 = zext nneg i32 %396 to i64, !dbg !46
  %405 = zext nneg i32 %397 to i64, !dbg !46
  %406 = zext nneg i32 %398 to i64, !dbg !46
  %407 = zext nneg i32 %399 to i64, !dbg !46
  %408 = zext nneg i32 %400 to i64, !dbg !46
  %409 = zext nneg i32 %401 to i64, !dbg !46
  %410 = zext nneg i32 %402 to i64, !dbg !46
  %411 = extractelement <16 x i64> %347, i64 1, !dbg !47
  %412 = getelementptr float, ptr addrspace(1) %1, i64 %411, !dbg !47
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %403, !dbg !47
  %414 = extractelement <16 x i64> %347, i64 0, !dbg !47
  %415 = getelementptr float, ptr addrspace(1) %1, i64 %414, !dbg !47
  %416 = getelementptr float, ptr addrspace(1) %415, i64 %404, !dbg !47
  %417 = extractelement <16 x i64> %347, i64 2, !dbg !47
  %418 = getelementptr float, ptr addrspace(1) %1, i64 %417, !dbg !47
  %419 = getelementptr float, ptr addrspace(1) %418, i64 %405, !dbg !47
  %420 = extractelement <16 x i64> %347, i64 3, !dbg !47
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %420, !dbg !47
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %406, !dbg !47
  %423 = extractelement <16 x i64> %347, i64 4, !dbg !47
  %424 = getelementptr float, ptr addrspace(1) %1, i64 %423, !dbg !47
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %407, !dbg !47
  %426 = extractelement <16 x i64> %347, i64 5, !dbg !47
  %427 = getelementptr float, ptr addrspace(1) %1, i64 %426, !dbg !47
  %428 = getelementptr float, ptr addrspace(1) %427, i64 %408, !dbg !47
  %429 = extractelement <16 x i64> %347, i64 6, !dbg !47
  %430 = getelementptr float, ptr addrspace(1) %1, i64 %429, !dbg !47
  %431 = getelementptr float, ptr addrspace(1) %430, i64 %409, !dbg !47
  %432 = extractelement <16 x i64> %347, i64 7, !dbg !47
  %433 = getelementptr float, ptr addrspace(1) %1, i64 %432, !dbg !47
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %410, !dbg !47
  %435 = extractelement <16 x i64> %347, i64 8, !dbg !47
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %435, !dbg !47
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %403, !dbg !47
  %438 = extractelement <16 x i64> %347, i64 9, !dbg !47
  %439 = getelementptr float, ptr addrspace(1) %1, i64 %438, !dbg !47
  %440 = getelementptr float, ptr addrspace(1) %439, i64 %404, !dbg !47
  %441 = extractelement <16 x i64> %347, i64 10, !dbg !47
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !47
  %443 = getelementptr float, ptr addrspace(1) %442, i64 %405, !dbg !47
  %444 = extractelement <16 x i64> %347, i64 11, !dbg !47
  %445 = getelementptr float, ptr addrspace(1) %1, i64 %444, !dbg !47
  %446 = getelementptr float, ptr addrspace(1) %445, i64 %406, !dbg !47
  %447 = extractelement <16 x i64> %347, i64 12, !dbg !47
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %447, !dbg !47
  %449 = getelementptr float, ptr addrspace(1) %448, i64 %407, !dbg !47
  %450 = extractelement <16 x i64> %347, i64 13, !dbg !47
  %451 = getelementptr float, ptr addrspace(1) %1, i64 %450, !dbg !47
  %452 = getelementptr float, ptr addrspace(1) %451, i64 %408, !dbg !47
  %453 = extractelement <16 x i64> %347, i64 14, !dbg !47
  %454 = getelementptr float, ptr addrspace(1) %1, i64 %453, !dbg !47
  %455 = getelementptr float, ptr addrspace(1) %454, i64 %409, !dbg !47
  %456 = extractelement <16 x i64> %347, i64 15, !dbg !47
  %457 = getelementptr float, ptr addrspace(1) %1, i64 %456, !dbg !47
  %458 = getelementptr float, ptr addrspace(1) %457, i64 %410, !dbg !47
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %460 = bitcast i32 %459 to float, !dbg !48
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %416, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %462 = bitcast i32 %461 to float, !dbg !48
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %419, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %464 = bitcast i32 %463 to float, !dbg !48
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %422, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %466 = bitcast i32 %465 to float, !dbg !48
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %425, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %468 = bitcast i32 %467 to float, !dbg !48
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %428, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %470 = bitcast i32 %469 to float, !dbg !48
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %431, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %443, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %446, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %449, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %452, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %455, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %458, i1 %13, i32 0, i1 %13) #5, !dbg !48
  %481 = fadd float %394, %373, !dbg !49
  %482 = fadd float %393, %372, !dbg !49
  %483 = fadd float %392, %371, !dbg !49
  %484 = fadd float %391, %370, !dbg !49
  %485 = fadd float %390, %369, !dbg !49
  %486 = fadd float %389, %368, !dbg !49
  %487 = fsub float %460, %481, !dbg !50
  %488 = fsub float %462, %482, !dbg !50
  %489 = fsub float %464, %483, !dbg !50
  %490 = fsub float %466, %484, !dbg !50
  %491 = fsub float %468, %485, !dbg !50
  %492 = fsub float %470, %486, !dbg !50
  %493 = fmul float %487, %487, !dbg !51
  %494 = fmul float %488, %488, !dbg !51
  %495 = fmul float %489, %489, !dbg !51
  %496 = fmul float %490, %490, !dbg !51
  %497 = fmul float %491, %491, !dbg !51
  %498 = fmul float %492, %492, !dbg !51
  %499 = insertelement <2 x i32> poison, i32 %471, i64 0, !dbg !48
  %500 = insertelement <2 x i32> %499, i32 %472, i64 1, !dbg !48
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !48
  %502 = fadd <2 x float> %388, %367, !dbg !49
  %503 = fsub <2 x float> %501, %502, !dbg !50
  %504 = fmul <2 x float> %503, %503, !dbg !51
  %505 = insertelement <2 x i32> poison, i32 %473, i64 0, !dbg !48
  %506 = insertelement <2 x i32> %505, i32 %474, i64 1, !dbg !48
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !48
  %508 = fadd <2 x float> %385, %364, !dbg !49
  %509 = fsub <2 x float> %507, %508, !dbg !50
  %510 = fmul <2 x float> %509, %509, !dbg !51
  %511 = insertelement <2 x i32> poison, i32 %475, i64 0, !dbg !48
  %512 = insertelement <2 x i32> %511, i32 %476, i64 1, !dbg !48
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !48
  %514 = fadd <2 x float> %382, %361, !dbg !49
  %515 = fsub <2 x float> %513, %514, !dbg !50
  %516 = fmul <2 x float> %515, %515, !dbg !51
  %517 = insertelement <2 x i32> poison, i32 %477, i64 0, !dbg !48
  %518 = insertelement <2 x i32> %517, i32 %478, i64 1, !dbg !48
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !48
  %520 = fadd <2 x float> %379, %358, !dbg !49
  %521 = fsub <2 x float> %519, %520, !dbg !50
  %522 = fmul <2 x float> %521, %521, !dbg !51
  %523 = insertelement <2 x i32> poison, i32 %479, i64 0, !dbg !48
  %524 = insertelement <2 x i32> %523, i32 %480, i64 1, !dbg !48
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !48
  %526 = fadd <2 x float> %376, %355, !dbg !49
  %527 = fsub <2 x float> %525, %526, !dbg !50
  %528 = fmul <2 x float> %527, %527, !dbg !51
  %529 = fadd float %493, %494, !dbg !52
  %530 = fadd float %529, %495, !dbg !52
  %531 = fadd float %530, %496, !dbg !52
  %532 = fadd float %531, %497, !dbg !52
  %533 = fadd float %532, %498, !dbg !52
  %534 = extractelement <2 x float> %504, i64 0, !dbg !52
  %535 = fadd float %533, %534, !dbg !52
  %536 = extractelement <2 x float> %504, i64 1, !dbg !52
  %537 = fadd float %535, %536, !dbg !52
  %538 = extractelement <2 x float> %510, i64 0, !dbg !52
  %539 = fadd float %537, %538, !dbg !52
  %540 = extractelement <2 x float> %510, i64 1, !dbg !52
  %541 = fadd float %539, %540, !dbg !52
  %542 = extractelement <2 x float> %516, i64 0, !dbg !52
  %543 = fadd float %541, %542, !dbg !52
  %544 = extractelement <2 x float> %516, i64 1, !dbg !52
  %545 = fadd float %543, %544, !dbg !52
  %546 = extractelement <2 x float> %522, i64 0, !dbg !52
  %547 = fadd float %545, %546, !dbg !52
  %548 = extractelement <2 x float> %522, i64 1, !dbg !52
  %549 = fadd float %547, %548, !dbg !52
  %550 = extractelement <2 x float> %528, i64 0, !dbg !52
  %551 = fadd float %549, %550, !dbg !52
  %552 = extractelement <2 x float> %528, i64 1, !dbg !52
  %553 = fadd float %551, %552, !dbg !52
  %554 = shl nuw nsw i32 %11, 3, !dbg !57
  %555 = or disjoint i32 %554, %15, !dbg !57
  %556 = getelementptr float, ptr addrspace(3) @global_smem, i32 %555, !dbg !57
  %557 = bitcast float %553 to i32, !dbg !57
  %558 = select i1 %13, i32 %557, i32 0, !dbg !52
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %559, i1 true) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %560 = icmp slt i32 %10, 256, !dbg !57
  %561 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !57
  %562 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %561, i1 %560) #5, !dbg !57
  %563 = bitcast i32 %562 to float, !dbg !57
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 4, i32 31), !dbg !57
  %565 = bitcast i32 %564 to float, !dbg !57
  %566 = fadd float %563, %565, !dbg !52
  %567 = bitcast float %566 to i32, !dbg !57
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 2, i32 31), !dbg !57
  %569 = bitcast i32 %568 to float, !dbg !57
  %570 = fadd float %566, %569, !dbg !52
  %571 = bitcast float %570 to i32, !dbg !57
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 1, i32 31), !dbg !57
  %573 = bitcast i32 %572 to float, !dbg !57
  %574 = fadd float %570, %573, !dbg !52
  %575 = and i32 %10, 7, !dbg !57
  %576 = icmp eq i32 %575, 0, !dbg !57
  %577 = and i1 %560, %576, !dbg !57
  %578 = bitcast float %574 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %578, i1 %577) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %579 = getelementptr float, ptr addrspace(3) @global_smem, i32 %554, !dbg !57
  %580 = load i32, ptr addrspace(3) %579, align 16, !dbg !57
  %581 = sext i32 %12 to i64, !dbg !58
  %582 = getelementptr float, ptr addrspace(1) %4, i64 %581, !dbg !58
  %583 = icmp eq i32 %15, 0, !dbg !59
  %584 = and i1 %583, %13, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %580, ptr addrspace(1) %582, i1 %584) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v16i64(<16 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py", directory: "inductor_cache/63")
!4 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_embedding_mean_pow_sub_8", linkageName: "triton_per_fused_embedding_mean_pow_sub_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 32, column: 19, scope: !11)
!19 = !DILocation(line: 31, column: 19, scope: !11)
!20 = !DILocation(line: 33, column: 32, scope: !11)
!21 = !DILocation(line: 33, column: 38, scope: !11)
!22 = !DILocation(line: 33, column: 30, scope: !11)
!23 = !DILocation(line: 33, column: 50, scope: !11)
!24 = !DILocation(line: 34, column: 46, scope: !11)
!25 = !DILocation(line: 34, column: 42, scope: !11)
!26 = !DILocation(line: 34, column: 56, scope: !11)
!27 = !DILocation(line: 34, column: 51, scope: !11)
!28 = !DILocation(line: 34, column: 63, scope: !11)
!29 = !DILocation(line: 34, column: 71, scope: !11)
!30 = !DILocation(line: 34, column: 35, scope: !11)
!31 = !DILocation(line: 34, column: 84, scope: !11)
!32 = !DILocation(line: 34, column: 130, scope: !11)
!33 = !DILocation(line: 34, column: 103, scope: !11)
!34 = !DILocation(line: 34, column: 159, scope: !11)
!35 = !DILocation(line: 34, column: 165, scope: !11)
!36 = !DILocation(line: 34, column: 78, scope: !11)
!37 = !DILocation(line: 34, column: 96, scope: !11)
!38 = !DILocation(line: 34, column: 141, scope: !11)
!39 = !DILocation(line: 34, column: 30, scope: !11)
!40 = !DILocation(line: 34, column: 172, scope: !11)
!41 = !DILocation(line: 35, column: 31, scope: !11)
!42 = !DILocation(line: 35, column: 42, scope: !11)
!43 = !DILocation(line: 39, column: 32, scope: !11)
!44 = !DILocation(line: 40, column: 63, scope: !11)
!45 = !DILocation(line: 41, column: 44, scope: !11)
!46 = !DILocation(line: 41, column: 37, scope: !11)
!47 = !DILocation(line: 41, column: 30, scope: !11)
!48 = !DILocation(line: 41, column: 56, scope: !11)
!49 = !DILocation(line: 42, column: 18, scope: !11)
!50 = !DILocation(line: 43, column: 19, scope: !11)
!51 = !DILocation(line: 44, column: 20, scope: !11)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !56)
!53 = distinct !DILexicalBlockFile(scope: !55, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!55 = distinct !DILexicalBlockFile(scope: !11, file: !54, discriminator: 0)
!56 = !DILocation(line: 47, column: 26, scope: !11)
!57 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 48, column: 25, scope: !11)
!59 = !DILocation(line: 48, column: 37, scope: !11)
!60 = !DILocation(line: 48, column: 4, scope: !11)
