; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__log_softmax_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = lshr i32 %9, 5, !dbg !14
  %17 = lshr i32 %9, 3, !dbg !14
  %18 = and i32 %17, 15, !dbg !14
  %19 = icmp samesign ult i32 %18, 12, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %20 = sdiv i32 %.frozen, 4096, !dbg !16
  %21 = mul i32 %20, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = shl nuw nsw i32 %18, 12, !dbg !18
  %23 = add nsw i32 %.decomposed, %22, !dbg !19
  %24 = mul i32 %20, 49152, !dbg !20
  %25 = add i32 %23, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = zext nneg i32 %18 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19) #3, !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %33, %43, !dbg !26
  %45 = fadd float %34, %43, !dbg !26
  %46 = fadd float %35, %43, !dbg !26
  %47 = fadd float %36, %43, !dbg !26
  %48 = select i1 %19, float %44, float 0xFFF0000000000000, !dbg !27
  %49 = select i1 %19, float %45, float 0xFFF0000000000000, !dbg !27
  %50 = select i1 %19, float %46, float 0xFFF0000000000000, !dbg !27
  %51 = select i1 %19, float %47, float 0xFFF0000000000000, !dbg !27
  %52 = bitcast float %48 to i32, !dbg !28
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = fcmp ogt float %48, %54, !dbg !32
  %56 = fcmp uno float %48, 0.000000e+00, !dbg !34
  %57 = or i1 %55, %56, !dbg !35
  %58 = select i1 %57, float %48, float %54, !dbg !36
  %59 = bitcast float %58 to i32, !dbg !28
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !28
  %61 = bitcast i32 %60 to float, !dbg !28
  %62 = fcmp ogt float %58, %61, !dbg !32
  %63 = fcmp uno float %58, 0.000000e+00, !dbg !34
  %64 = or i1 %62, %63, !dbg !35
  %65 = bitcast float %49 to i32, !dbg !28
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = fcmp ogt float %49, %67, !dbg !32
  %69 = fcmp uno float %49, 0.000000e+00, !dbg !34
  %70 = or i1 %69, %68, !dbg !35
  %71 = select i1 %70, float %49, float %67, !dbg !36
  %72 = bitcast float %71 to i32, !dbg !28
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = fcmp ogt float %71, %74, !dbg !32
  %76 = fcmp uno float %71, 0.000000e+00, !dbg !34
  %77 = or i1 %75, %76, !dbg !35
  %78 = bitcast float %50 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fcmp ogt float %50, %80, !dbg !32
  %82 = fcmp uno float %50, 0.000000e+00, !dbg !34
  %83 = or i1 %82, %81, !dbg !35
  %84 = select i1 %83, float %50, float %80, !dbg !36
  %85 = bitcast float %84 to i32, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !28
  %87 = bitcast i32 %86 to float, !dbg !28
  %88 = fcmp ogt float %84, %87, !dbg !32
  %89 = fcmp uno float %84, 0.000000e+00, !dbg !34
  %90 = or i1 %88, %89, !dbg !35
  %91 = bitcast float %51 to i32, !dbg !28
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 16, i32 31), !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fcmp ogt float %51, %93, !dbg !32
  %95 = fcmp uno float %51, 0.000000e+00, !dbg !34
  %96 = or i1 %95, %94, !dbg !35
  %97 = select i1 %96, float %51, float %93, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fcmp ogt float %97, %100, !dbg !32
  %102 = fcmp uno float %97, 0.000000e+00, !dbg !34
  %103 = or i1 %101, %102, !dbg !35
  %104 = icmp eq i32 %10, 0, !dbg !28
  %105 = and i32 %16, 3, !dbg !28
  %106 = shl nuw nsw i32 %12, 2, !dbg !28
  %107 = or disjoint i32 %106, %105, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = select i1 %64, i32 %59, i32 %60, !dbg !36
  %110 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %110, i1 %104) #3, !dbg !28
  %111 = or disjoint i32 %106, 4, !dbg !28
  %112 = or disjoint i32 %111, %105, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = select i1 %77, i32 %72, i32 %73, !dbg !36
  %115 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %115, i1 %104) #3, !dbg !28
  %116 = or disjoint i32 %106, 8, !dbg !28
  %117 = or disjoint i32 %116, %105, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = select i1 %90, i32 %85, i32 %86, !dbg !36
  %120 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %120, i1 %104) #3, !dbg !28
  %121 = or disjoint i32 %106, 12, !dbg !28
  %122 = or disjoint i32 %121, %105, !dbg !28
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !28
  %124 = select i1 %103, i32 %98, i32 %99, !dbg !36
  %125 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %125, i1 %104) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %126 = icmp slt i32 %9, 128, !dbg !28
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = fcmp ogt float %129, %131, !dbg !32
  %133 = fcmp uno float %129, 0.000000e+00, !dbg !34
  %134 = or i1 %133, %132, !dbg !35
  %135 = select i1 %134, float %129, float %131, !dbg !36
  %136 = bitcast float %135 to i32, !dbg !28
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fcmp ogt float %135, %138, !dbg !32
  %140 = fcmp uno float %135, 0.000000e+00, !dbg !34
  %141 = or i1 %139, %140, !dbg !35
  %142 = and i32 %9, 3, !dbg !28
  %143 = icmp eq i32 %142, 0, !dbg !28
  %144 = and i1 %126, %143, !dbg !28
  %145 = select i1 %141, i32 %136, i32 %137, !dbg !36
  %146 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %146, i1 %144) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !28
  %148 = load float, ptr addrspace(3) %147, align 16, !dbg !28
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !28
  %150 = load float, ptr addrspace(3) %149, align 16, !dbg !28
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !28
  %152 = load float, ptr addrspace(3) %151, align 16, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %154 = load float, ptr addrspace(3) %153, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %156 = bitcast float %148 to i32, !dbg !37
  %157 = bitcast float %150 to i32, !dbg !37
  %158 = bitcast float %152 to i32, !dbg !37
  %159 = bitcast float %154 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %156, i32 %157, i32 %158, i32 %159, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !37
  %162 = fsub float %44, %148, !dbg !38
  %163 = fsub float %45, %150, !dbg !38
  %164 = fsub float %46, %152, !dbg !38
  %165 = fsub float %47, %154, !dbg !38
  %166 = fmul float %162, 0x3FF7154760000000, !dbg !39
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #3, !dbg !39
  %168 = fmul float %163, 0x3FF7154760000000, !dbg !39
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #3, !dbg !39
  %170 = fmul float %164, 0x3FF7154760000000, !dbg !39
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #3, !dbg !39
  %172 = fmul float %165, 0x3FF7154760000000, !dbg !39
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #3, !dbg !39
  %174 = select i1 %19, float %167, float 0.000000e+00, !dbg !40
  %175 = select i1 %19, float %169, float 0.000000e+00, !dbg !40
  %176 = select i1 %19, float %171, float 0.000000e+00, !dbg !40
  %177 = select i1 %19, float %173, float 0.000000e+00, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %178 = bitcast float %174 to i32, !dbg !41
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = fadd float %174, %180, !dbg !45
  %182 = bitcast float %181 to i32, !dbg !41
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = fadd float %181, %184, !dbg !45
  %186 = bitcast float %175 to i32, !dbg !41
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = fadd float %175, %188, !dbg !45
  %190 = bitcast float %189 to i32, !dbg !41
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !41
  %192 = bitcast i32 %191 to float, !dbg !41
  %193 = fadd float %189, %192, !dbg !45
  %194 = bitcast float %176 to i32, !dbg !41
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !41
  %196 = bitcast i32 %195 to float, !dbg !41
  %197 = fadd float %176, %196, !dbg !45
  %198 = bitcast float %197 to i32, !dbg !41
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !41
  %200 = bitcast i32 %199 to float, !dbg !41
  %201 = fadd float %197, %200, !dbg !45
  %202 = bitcast float %177 to i32, !dbg !41
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !41
  %204 = bitcast i32 %203 to float, !dbg !41
  %205 = fadd float %177, %204, !dbg !45
  %206 = bitcast float %205 to i32, !dbg !41
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !41
  %208 = bitcast i32 %207 to float, !dbg !41
  %209 = fadd float %205, %208, !dbg !45
  %210 = bitcast float %185 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %210, i1 %104) #3, !dbg !41
  %211 = bitcast float %193 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %211, i1 %104) #3, !dbg !41
  %212 = bitcast float %201 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %212, i1 %104) #3, !dbg !41
  %213 = bitcast float %209 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %213, i1 %104) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %214 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !41
  %215 = bitcast i32 %214 to float, !dbg !41
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !41
  %217 = bitcast i32 %216 to float, !dbg !41
  %218 = fadd float %215, %217, !dbg !45
  %219 = bitcast float %218 to i32, !dbg !41
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !41
  %221 = bitcast i32 %220 to float, !dbg !41
  %222 = fadd float %218, %221, !dbg !45
  %223 = bitcast float %222 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %223, i1 %144) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %224 = load i32, ptr addrspace(3) %147, align 16, !dbg !41
  %225 = load i32, ptr addrspace(3) %149, align 16, !dbg !41
  %226 = load i32, ptr addrspace(3) %151, align 16, !dbg !41
  %227 = load i32, ptr addrspace(3) %153, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %155, i32 %224, i32 %225, i32 %226, i32 %227, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %228 = load i32, ptr addrspace(3) %160, align 4, !dbg !47
  %229 = sext i32 %15 to i64, !dbg !48
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !48
  %231 = icmp eq i32 %105, 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %230, i1 %231) #3, !dbg !49
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %229, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %228, ptr addrspace(1) %232, i1 %231) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd66hixlhcp7ftzr4kzqnfgppfmdzya3baaabzscajm6w5wtmksl.py", directory: "inductor_cache/d6")
!4 = !{ptr @triton_per_fused__log_softmax_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_convolution_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_convolution_27", linkageName: "triton_per_fused__log_softmax_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 33, scope: !7)
!28 = !DILocation(line: 131, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 37, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !31)
!35 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !31)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !31)
!37 = !DILocation(line: 38, column: 40, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 23, scope: !7)
!40 = !DILocation(line: 42, column: 34, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 43, column: 29, scope: !7)
!48 = !DILocation(line: 44, column: 25, scope: !7)
!49 = !DILocation(line: 44, column: 36, scope: !7)
!50 = !DILocation(line: 45, column: 25, scope: !7)
!51 = !DILocation(line: 45, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 4, scope: !7)
