; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = icmp samesign ult i32 %12, 1728, !dbg !13
  %14 = mul i32 %6, 1728, !dbg !14
  %15 = add i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = and i1 %13, %7, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %24 = zext nneg i32 %12 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %32 = insertelement <2 x i32> %31, i32 %21, i64 1, !dbg !18
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !18
  %34 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %35 = insertelement <2 x i32> %34, i32 %28, i64 1, !dbg !20
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !20
  %37 = fmul <2 x float> %33, %36, !dbg !21
  %38 = fadd <2 x float> %37, zeroinitializer, !dbg !22
  %39 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %40 = insertelement <2 x i32> %39, i32 %22, i64 1, !dbg !18
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !18
  %42 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %43 = insertelement <2 x i32> %42, i32 %29, i64 1, !dbg !20
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !20
  %45 = fmul <2 x float> %41, %44, !dbg !21
  %46 = fadd <2 x float> %45, zeroinitializer, !dbg !22
  %shift = shufflevector <2 x float> %38, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %47 = fadd <2 x float> %38, %shift, !dbg !23
  %shift1 = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %48 = fadd <2 x float> %shift1, %47, !dbg !23
  %49 = fadd <2 x float> %46, %48, !dbg !23
  %50 = extractelement <2 x float> %49, i64 0, !dbg !23
  %51 = select i1 %18, float %50, float 0.000000e+00, !dbg !23
  %52 = bitcast float %51 to i32, !dbg !28
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = fadd float %51, %54, !dbg !23
  %56 = bitcast float %55 to i32, !dbg !28
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = fadd float %55, %58, !dbg !23
  %60 = bitcast float %59 to i32, !dbg !28
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = fadd float %59, %62, !dbg !23
  %64 = bitcast float %63 to i32, !dbg !28
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = fadd float %63, %66, !dbg !23
  %68 = bitcast float %67 to i32, !dbg !28
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = fadd float %67, %70, !dbg !23
  %72 = icmp eq i32 %9, 0, !dbg !28
  %73 = and i32 %10, 15, !dbg !28
  %74 = zext nneg i32 %73 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !28
  %76 = bitcast float %71 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %72) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %77 = icmp slt i32 %8, 16, !dbg !28
  %78 = sext i32 %8 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !28
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #3, !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = fadd float %81, %83, !dbg !23
  %85 = bitcast float %84 to i32, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !28
  %87 = bitcast i32 %86 to float, !dbg !28
  %88 = fadd float %84, %87, !dbg !23
  %89 = bitcast float %88 to i32, !dbg !28
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = fadd float %88, %91, !dbg !23
  %93 = bitcast float %92 to i32, !dbg !28
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = fadd float %92, %95, !dbg !23
  %97 = and i32 %8, 15, !dbg !28
  %98 = icmp eq i32 %97, 0, !dbg !28
  %99 = and i1 %77, %98, !dbg !28
  %100 = bitcast float %96 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %100, i1 %99) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %101 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %102 = sext i32 %6 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !29
  %urem = and i32 %8, 511, !dbg !30
  %104 = icmp eq i32 %urem, 0, !dbg !30
  %105 = and i1 %104, %7, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %103, i1 %105) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coqcrmuybj2vwjkamyxlsla3dvs375ixbbfsw3chf2b6bu24xw27.py", directory: "inductor_cache/oq")
!4 = !{ptr @triton_red_fused_mv_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_4", linkageName: "triton_red_fused_mv_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 30, column: 25, scope: !7)
!14 = !DILocation(line: 32, column: 44, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 57, scope: !7)
!18 = !DILocation(line: 32, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 38, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
