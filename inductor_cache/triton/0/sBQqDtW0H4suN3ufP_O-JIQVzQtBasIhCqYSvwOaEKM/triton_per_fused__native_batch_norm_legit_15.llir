; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = and i32 %9, 7, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = lshr i32 %9, 5, !dbg !15
  %17 = shl i32 %9, 6, !dbg !16
  %18 = and i32 %17, 8064, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %19 = sdiv i32 %.frozen, 128, !dbg !17
  %20 = shl i32 %19, 13, !dbg !18
  %21 = mul i32 %19, 128, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = add nsw i32 %.decomposed, %18, !dbg !20
  %23 = add i32 %22, %20, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = select i1 %15, float %31, float 0.000000e+00, !dbg !24
  %36 = select i1 %15, float %32, float 0.000000e+00, !dbg !24
  %37 = select i1 %15, float %33, float 0.000000e+00, !dbg !24
  %38 = select i1 %15, float %34, float 0.000000e+00, !dbg !24
  %39 = bitcast float %35 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fadd float %35, %41, !dbg !29
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 8, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !29
  %47 = bitcast float %46 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %46, %49, !dbg !29
  %51 = bitcast float %50 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %50, %53, !dbg !29
  %55 = bitcast float %36 to i32, !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = fadd float %36, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !25
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %62 to i32, !dbg !25
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %62, %65, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %66, %69, !dbg !29
  %71 = bitcast float %37 to i32, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %37, %73, !dbg !29
  %75 = bitcast float %74 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %74, %77, !dbg !29
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !29
  %83 = bitcast float %82 to i32, !dbg !25
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fadd float %82, %85, !dbg !29
  %87 = bitcast float %38 to i32, !dbg !25
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fadd float %38, %89, !dbg !29
  %91 = bitcast float %90 to i32, !dbg !25
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = fadd float %90, %93, !dbg !29
  %95 = bitcast float %94 to i32, !dbg !25
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %94, %97, !dbg !29
  %99 = bitcast float %98 to i32, !dbg !25
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !25
  %101 = bitcast i32 %100 to float, !dbg !25
  %102 = fadd float %98, %101, !dbg !29
  %103 = icmp samesign ult i32 %10, 2, !dbg !25
  %104 = and i32 %16, 3, !dbg !25
  %105 = shl nuw nsw i32 %12, 2, !dbg !25
  %106 = or disjoint i32 %105, %104, !dbg !25
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !25
  %108 = bitcast float %54 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %103) #5, !dbg !25
  %109 = or disjoint i32 %105, 4, !dbg !25
  %110 = or disjoint i32 %109, %104, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !25
  %112 = bitcast float %70 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 %103) #5, !dbg !25
  %113 = or disjoint i32 %105, 8, !dbg !25
  %114 = or disjoint i32 %113, %104, !dbg !25
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !25
  %116 = bitcast float %86 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 %103) #5, !dbg !25
  %117 = or disjoint i32 %105, 12, !dbg !25
  %118 = or disjoint i32 %117, %104, !dbg !25
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !25
  %120 = bitcast float %102 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 %103) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %121 = icmp slt i32 %9, 32, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %122, i1 %121) #5, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = fadd float %124, %126, !dbg !29
  %128 = bitcast float %127 to i32, !dbg !25
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !25
  %130 = bitcast i32 %129 to float, !dbg !25
  %131 = fadd float %127, %130, !dbg !29
  %132 = and i32 %9, 3, !dbg !25
  %133 = icmp eq i32 %132, 0, !dbg !25
  %134 = and i1 %121, %133, !dbg !25
  %135 = bitcast float %131 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %135, i1 %134) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !25
  %137 = load float, ptr addrspace(3) %136, align 16, !dbg !25
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %139 = load float, ptr addrspace(3) %138, align 16, !dbg !25
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !25
  %141 = load float, ptr addrspace(3) %140, align 16, !dbg !25
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !25
  %143 = load float, ptr addrspace(3) %142, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %145 = bitcast float %137 to i32, !dbg !31
  %146 = bitcast float %139 to i32, !dbg !31
  %147 = bitcast float %141 to i32, !dbg !31
  %148 = bitcast float %143 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %145, i32 %146, i32 %147, i32 %148, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !31
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 6.400000e+01) #5, !dbg !31
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 6.400000e+01) #5, !dbg !31
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 6.400000e+01) #5, !dbg !31
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 6.400000e+01) #5, !dbg !31
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 6.400000e+01) #5, !dbg !31
  %156 = fsub float %31, %152, !dbg !32
  %157 = fsub float %32, %153, !dbg !32
  %158 = fsub float %33, %154, !dbg !32
  %159 = fsub float %34, %155, !dbg !32
  %160 = fmul float %156, %156, !dbg !33
  %161 = fmul float %157, %157, !dbg !33
  %162 = fmul float %158, %158, !dbg !33
  %163 = fmul float %159, %159, !dbg !33
  %164 = select i1 %15, float %160, float 0.000000e+00, !dbg !34
  %165 = select i1 %15, float %161, float 0.000000e+00, !dbg !34
  %166 = select i1 %15, float %162, float 0.000000e+00, !dbg !34
  %167 = select i1 %15, float %163, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %168 = bitcast float %164 to i32, !dbg !35
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = fadd float %164, %170, !dbg !37
  %172 = bitcast float %171 to i32, !dbg !35
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 8, i32 31), !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = fadd float %171, %174, !dbg !37
  %176 = bitcast float %175 to i32, !dbg !35
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 4, i32 31), !dbg !35
  %178 = bitcast i32 %177 to float, !dbg !35
  %179 = fadd float %175, %178, !dbg !37
  %180 = bitcast float %179 to i32, !dbg !35
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !35
  %182 = bitcast i32 %181 to float, !dbg !35
  %183 = fadd float %179, %182, !dbg !37
  %184 = bitcast float %165 to i32, !dbg !35
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !35
  %186 = bitcast i32 %185 to float, !dbg !35
  %187 = fadd float %165, %186, !dbg !37
  %188 = bitcast float %187 to i32, !dbg !35
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !35
  %190 = bitcast i32 %189 to float, !dbg !35
  %191 = fadd float %187, %190, !dbg !37
  %192 = bitcast float %191 to i32, !dbg !35
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !35
  %194 = bitcast i32 %193 to float, !dbg !35
  %195 = fadd float %191, %194, !dbg !37
  %196 = bitcast float %195 to i32, !dbg !35
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !35
  %198 = bitcast i32 %197 to float, !dbg !35
  %199 = fadd float %195, %198, !dbg !37
  %200 = bitcast float %166 to i32, !dbg !35
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !35
  %202 = bitcast i32 %201 to float, !dbg !35
  %203 = fadd float %166, %202, !dbg !37
  %204 = bitcast float %203 to i32, !dbg !35
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !35
  %206 = bitcast i32 %205 to float, !dbg !35
  %207 = fadd float %203, %206, !dbg !37
  %208 = bitcast float %207 to i32, !dbg !35
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !35
  %210 = bitcast i32 %209 to float, !dbg !35
  %211 = fadd float %207, %210, !dbg !37
  %212 = bitcast float %211 to i32, !dbg !35
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !35
  %214 = bitcast i32 %213 to float, !dbg !35
  %215 = fadd float %211, %214, !dbg !37
  %216 = bitcast float %167 to i32, !dbg !35
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !35
  %218 = bitcast i32 %217 to float, !dbg !35
  %219 = fadd float %167, %218, !dbg !37
  %220 = bitcast float %219 to i32, !dbg !35
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = fadd float %219, %222, !dbg !37
  %224 = bitcast float %223 to i32, !dbg !35
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 4, i32 31), !dbg !35
  %226 = bitcast i32 %225 to float, !dbg !35
  %227 = fadd float %223, %226, !dbg !37
  %228 = bitcast float %227 to i32, !dbg !35
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !35
  %230 = bitcast i32 %229 to float, !dbg !35
  %231 = fadd float %227, %230, !dbg !37
  %232 = bitcast float %183 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %232, i1 %103) #5, !dbg !35
  %233 = bitcast float %199 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %233, i1 %103) #5, !dbg !35
  %234 = bitcast float %215 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %234, i1 %103) #5, !dbg !35
  %235 = bitcast float %231 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %235, i1 %103) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %122, i1 %121) #5, !dbg !35
  %237 = bitcast i32 %236 to float, !dbg !35
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !35
  %239 = bitcast i32 %238 to float, !dbg !35
  %240 = fadd float %237, %239, !dbg !37
  %241 = bitcast float %240 to i32, !dbg !35
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 1, i32 31), !dbg !35
  %243 = bitcast i32 %242 to float, !dbg !35
  %244 = fadd float %240, %243, !dbg !37
  %245 = bitcast float %244 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %245, i1 %134) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %246 = load i32, ptr addrspace(3) %136, align 16, !dbg !35
  %247 = load i32, ptr addrspace(3) %138, align 16, !dbg !35
  %248 = load i32, ptr addrspace(3) %140, align 16, !dbg !35
  %249 = load i32, ptr addrspace(3) %142, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %246, i32 %247, i32 %248, i32 %249, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %250 = load float, ptr addrspace(3) %149, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %246, i32 %247, i32 %248, i32 %249, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %251 = load i32, ptr addrspace(3) %149, align 4, !dbg !39
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float 6.400000e+01) #5, !dbg !40
  %253 = fadd float %252, 0x3EE4F8B580000000, !dbg !41
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %254, 0, !dbg !38
  br i1 %.not.i, label %257, label %255, !dbg !38

255:                                              ; preds = %6
  %256 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %253), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

257:                                              ; preds = %6
  %258 = tail call float @llvm.nvvm.rsqrt.approx.f(float %253), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %255, %257
  %.0.i = phi float [ %256, %255 ], [ %258, %257 ], !dbg !38
  %259 = or disjoint i32 %8, %13, !dbg !13
  %260 = icmp slt i32 %259, 512, !dbg !14
  %261 = sext i32 %259 to i64, !dbg !42
  %262 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !42
  %263 = lshr i32 %10, 3, !dbg !43
  %264 = shl nuw nsw i32 %104, 2, !dbg !43
  %265 = or disjoint i32 %264, %263, !dbg !43
  %266 = icmp eq i32 %265, 0, !dbg !43
  %267 = bitcast float %.0.i to i32, !dbg !43
  %268 = and i1 %266, %260, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %262, i1 %268) #5, !dbg !43
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !44
  %270 = bitcast float %151 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %269, i1 %268) #5, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %271, i1 %268) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7nwuskspldniwd6ezjt5pcfboretlmqgjpgerntvtqtr54xohb.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_15", linkageName: "triton_per_fused__native_batch_norm_legit_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 44, column: 29, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 37, scope: !7)
!44 = !DILocation(line: 51, column: 25, scope: !7)
!45 = !DILocation(line: 51, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 25, scope: !7)
!47 = !DILocation(line: 52, column: 37, scope: !7)
!48 = !DILocation(line: 52, column: 4, scope: !7)
