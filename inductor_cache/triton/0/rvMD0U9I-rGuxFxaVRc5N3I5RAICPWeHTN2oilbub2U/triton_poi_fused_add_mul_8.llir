; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 14, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %20, %14, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = icmp slt i32 %21, 16, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %25 = sdiv i32 %.frozen, 4, !dbg !19
  %26 = mul i32 %25, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = shl i32 %15, 4, !dbg !21
  %28 = add i32 %21, %27, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = and i1 %17, %23, !dbg !24
  %32 = and i1 %18, %24, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %31) #2, !dbg !27
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = bitcast i32 %41 to float, !dbg !27
  %44 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = shl i32 %22, 2, !dbg !30
  %48 = add i32 %47, %.decomposed, !dbg !31
  %49 = shl i32 %25, 6, !dbg !32
  %50 = add i32 %48, %49, !dbg !33
  %51 = sext i32 %50 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !34
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %32) #2, !dbg !35
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !35
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !35
  %56 = bitcast i32 %54 to float, !dbg !35
  %57 = bitcast i32 %55 to float, !dbg !35
  %58 = getelementptr i8, ptr addrspace(1) %2, i64 20, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !37
  %60 = bitcast i32 %59 to float, !dbg !37
  %61 = fmul float %42, %46, !dbg !38
  %62 = fmul float %43, %46, !dbg !38
  %63 = fadd float %61, %36, !dbg !39
  %64 = fadd float %62, %37, !dbg !39
  %65 = shl i32 %10, 5, !dbg !39
  %66 = and i32 %65, 224, !dbg !39
  %67 = or disjoint i32 %66, %12, !dbg !39
  %68 = and i32 %13, 254, !dbg !39
  %69 = lshr exact i32 %66, 1, !dbg !39
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !39
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %67, !dbg !39
  %72 = bitcast float %63 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !39
  %73 = or disjoint i32 %67, 16, !dbg !39
  %74 = lshr i32 %73, 4, !dbg !39
  %.idx = shl nuw nsw i32 %74, 3, !dbg !39
  %75 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !39
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !39
  %77 = bitcast float %64 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %78 = lshr i32 %68, 4, !dbg !39
  %79 = and i32 %10, 127, !dbg !39
  %80 = add nuw nsw i32 %78, %79, !dbg !39
  %.idx1 = shl nuw nsw i32 %80, 3, !dbg !39
  %81 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !39
  %82 = load float, ptr addrspace(3) %81, align 8, !dbg !39
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 4, !dbg !39
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !39
  %85 = fmul float %56, %60, !dbg !40
  %86 = fmul float %57, %60, !dbg !40
  %87 = fadd float %85, %82, !dbg !41
  %88 = fadd float %86, %84, !dbg !41
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %90 = lshr exact i32 %66, 2, !dbg !43
  %91 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %90, !dbg !43
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %67, !dbg !43
  %93 = bitcast float %87 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !43
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !43
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %73, !dbg !43
  %96 = bitcast float %88 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !43
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %68, !dbg !43
  %99 = load i32, ptr addrspace(3) %98, align 4, !dbg !43
  %100 = or disjoint i32 %68, 1, !dbg !43
  %101 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %100, !dbg !43
  %102 = load i32, ptr addrspace(3) %101, align 4, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %102, ptr addrspace(1) %89, i1 %31) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3fc3shvd7pz2eo6thz247mplmi5zfy635n4jrvfbyudzte7flw3.py", directory: "inductor_cache/3f")
!4 = !{ptr @triton_poi_fused_add_mul_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_8", linkageName: "triton_poi_fused_add_mul_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 19, scope: !7)
!30 = !DILocation(line: 36, column: 37, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 45, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 50, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 19, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 43, column: 45, scope: !7)
!44 = !DILocation(line: 43, column: 4, scope: !7)
