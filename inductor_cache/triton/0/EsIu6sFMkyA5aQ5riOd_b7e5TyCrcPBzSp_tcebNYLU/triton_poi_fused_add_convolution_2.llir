; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 252, !dbg !12
  %13 = lshr i32 %9, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %14, 128, !dbg !12
  %17 = or disjoint i32 %14, 192, !dbg !12
  %18 = and i32 %9, 255, !dbg !12
  %19 = or disjoint i32 %8, %12, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %15, !dbg !13
  %22 = or disjoint i32 %8, %16, !dbg !13
  %23 = or disjoint i32 %8, %17, !dbg !13
  %24 = or disjoint i32 %8, %18, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %26 = shl i32 %25, 4, !dbg !15
  %27 = lshr i32 %9, 6, !dbg !16
  %28 = and i32 %27, 3, !dbg !16
  %29 = or disjoint i32 %28, 4, !dbg !16
  %30 = or disjoint i32 %28, 8, !dbg !16
  %31 = or disjoint i32 %28, 12, !dbg !16
  %32 = or disjoint i32 %26, %28, !dbg !17
  %33 = or disjoint i32 %26, %29, !dbg !17
  %34 = or disjoint i32 %26, %30, !dbg !17
  %35 = or disjoint i32 %26, %31, !dbg !17
  %36 = or disjoint i32 %26, %11, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %37 = sdiv i32 %.frozen, 256, !dbg !18
  %38 = mul i32 %37, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %38, !dbg !19
  %39 = srem i32 %24, 256, !dbg !19
  %40 = shl i32 %32, 8, !dbg !20
  %41 = shl i32 %33, 8, !dbg !20
  %42 = shl i32 %34, 8, !dbg !20
  %43 = shl i32 %35, 8, !dbg !20
  %44 = shl i32 %37, 20, !dbg !21
  %45 = add i32 %44, %.decomposed, !dbg !22
  %46 = add i32 %45, %40, !dbg !23
  %47 = add i32 %45, %41, !dbg !23
  %48 = add i32 %45, %42, !dbg !23
  %49 = add i32 %45, %43, !dbg !23
  %50 = sext i32 %46 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %47 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %48 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %49 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !25
  %78 = shl i32 %9, 6, !dbg !25
  %79 = and i32 %78, 4032, !dbg !25
  %80 = or disjoint i32 %79, %28, !dbg !25
  %81 = and i32 %10, 1020, !dbg !25
  %82 = lshr exact i32 %79, 2, !dbg !25
  %83 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !25
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %80, !dbg !25
  %85 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !25
  %86 = or disjoint i32 %80, 16, !dbg !25
  %87 = lshr i32 %86, 4, !dbg !25
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !25
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !25
  %90 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !25
  %91 = or disjoint i32 %80, 32, !dbg !25
  %92 = lshr i32 %91, 4, !dbg !25
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !25
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !25
  %95 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !25
  %96 = or disjoint i32 %80, 48, !dbg !25
  %97 = lshr i32 %96, 4, !dbg !25
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !25
  %100 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !25
  %101 = or disjoint i32 %80, 4, !dbg !25
  %102 = getelementptr float, ptr addrspace(3) %83, i32 %101, !dbg !25
  %103 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !25
  %104 = or disjoint i32 %80, 20, !dbg !25
  %105 = lshr i32 %104, 4, !dbg !25
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !25
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !25
  %108 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !25
  %109 = or disjoint i32 %80, 36, !dbg !25
  %110 = lshr i32 %109, 4, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !25
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !25
  %113 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !25
  %114 = or disjoint i32 %80, 52, !dbg !25
  %115 = lshr i32 %114, 4, !dbg !25
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !25
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !25
  %118 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !25
  %119 = or disjoint i32 %80, 8, !dbg !25
  %120 = getelementptr float, ptr addrspace(3) %83, i32 %119, !dbg !25
  %121 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !25
  %122 = or disjoint i32 %80, 24, !dbg !25
  %123 = lshr i32 %122, 4, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !25
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !25
  %126 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !25
  %127 = or disjoint i32 %80, 40, !dbg !25
  %128 = lshr i32 %127, 4, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !25
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !25
  %131 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !25
  %132 = or disjoint i32 %80, 56, !dbg !25
  %133 = lshr i32 %132, 4, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !25
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !25
  %136 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !25
  %137 = or disjoint i32 %80, 12, !dbg !25
  %138 = getelementptr float, ptr addrspace(3) %83, i32 %137, !dbg !25
  %139 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !25
  %140 = or disjoint i32 %80, 28, !dbg !25
  %141 = lshr i32 %140, 4, !dbg !25
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !25
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !25
  %144 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !25
  %145 = or disjoint i32 %80, 44, !dbg !25
  %146 = lshr i32 %145, 4, !dbg !25
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !25
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !25
  %149 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !25
  %150 = or disjoint i32 %80, 60, !dbg !25
  %151 = lshr i32 %150, 4, !dbg !25
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !25
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !25
  %154 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %155 = lshr i32 %81, 4, !dbg !25
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !25
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %81, !dbg !25
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !25
  %159 = or disjoint i32 %81, 1, !dbg !25
  %160 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %159, !dbg !25
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !25
  %162 = or disjoint i32 %81, 2, !dbg !25
  %163 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %162, !dbg !25
  %164 = load float, ptr addrspace(3) %163, align 4, !dbg !25
  %165 = or disjoint i32 %81, 3, !dbg !25
  %166 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %165, !dbg !25
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !25
  %168 = or disjoint i32 %81, 1024, !dbg !25
  %169 = lshr i32 %168, 4, !dbg !25
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !25
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %168, !dbg !25
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !25
  %173 = or disjoint i32 %81, 1025, !dbg !25
  %174 = lshr i32 %173, 4, !dbg !25
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !25
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !25
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !25
  %178 = or disjoint i32 %81, 1026, !dbg !25
  %179 = lshr i32 %178, 4, !dbg !25
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !25
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %178, !dbg !25
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !25
  %183 = or disjoint i32 %81, 1027, !dbg !25
  %184 = lshr i32 %183, 4, !dbg !25
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !25
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %183, !dbg !25
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !25
  %188 = or disjoint i32 %81, 2048, !dbg !25
  %189 = lshr i32 %188, 4, !dbg !25
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !25
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !25
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !25
  %193 = or disjoint i32 %81, 2049, !dbg !25
  %194 = lshr i32 %193, 4, !dbg !25
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !25
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !25
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !25
  %198 = or disjoint i32 %81, 2050, !dbg !25
  %199 = lshr i32 %198, 4, !dbg !25
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !25
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !25
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !25
  %203 = or disjoint i32 %81, 2051, !dbg !25
  %204 = lshr i32 %203, 4, !dbg !25
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !25
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %203, !dbg !25
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !25
  %208 = or disjoint i32 %81, 3072, !dbg !25
  %209 = lshr i32 %208, 4, !dbg !25
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !25
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !25
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !25
  %213 = or disjoint i32 %81, 3073, !dbg !25
  %214 = lshr i32 %213, 4, !dbg !25
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !25
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %213, !dbg !25
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !25
  %218 = or disjoint i32 %81, 3074, !dbg !25
  %219 = lshr i32 %218, 4, !dbg !25
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !25
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !25
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !25
  %223 = or disjoint i32 %81, 3075, !dbg !25
  %224 = lshr i32 %223, 4, !dbg !25
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !25
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !25
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !25
  %228 = sext i32 %39 to i64, !dbg !26
  %229 = getelementptr float, ptr addrspace(1) %1, i64 %228, !dbg !26
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #2, !dbg !27
  %231 = shl i32 %20, 12, !dbg !28
  %232 = shl i32 %21, 12, !dbg !28
  %233 = shl i32 %22, 12, !dbg !28
  %234 = shl i32 %23, 12, !dbg !28
  %235 = add i32 %36, %231, !dbg !29
  %236 = add i32 %36, %232, !dbg !29
  %237 = add i32 %36, %233, !dbg !29
  %238 = add i32 %36, %234, !dbg !29
  %239 = sext i32 %235 to i64, !dbg !30
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !30
  %241 = sext i32 %236 to i64, !dbg !30
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !30
  %243 = sext i32 %237 to i64, !dbg !30
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !30
  %245 = sext i32 %238 to i64, !dbg !30
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !30
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !31
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !31
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !31
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !31
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !31
  %252 = bitcast i32 %248 to float, !dbg !31
  %253 = bitcast i32 %249 to float, !dbg !31
  %254 = bitcast i32 %250 to float, !dbg !31
  %255 = bitcast i32 %251 to float, !dbg !31
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %242, i1 true) #2, !dbg !31
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !31
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !31
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !31
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !31
  %261 = bitcast i32 %257 to float, !dbg !31
  %262 = bitcast i32 %258 to float, !dbg !31
  %263 = bitcast i32 %259 to float, !dbg !31
  %264 = bitcast i32 %260 to float, !dbg !31
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %244, i1 true) #2, !dbg !31
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !31
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !31
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !31
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !31
  %270 = bitcast i32 %266 to float, !dbg !31
  %271 = bitcast i32 %267 to float, !dbg !31
  %272 = bitcast i32 %268 to float, !dbg !31
  %273 = bitcast i32 %269 to float, !dbg !31
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %246, i1 true) #2, !dbg !31
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !31
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !31
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !31
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !31
  %279 = bitcast i32 %275 to float, !dbg !31
  %280 = bitcast i32 %276 to float, !dbg !31
  %281 = bitcast i32 %277 to float, !dbg !31
  %282 = bitcast i32 %278 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx = shl nuw nsw i32 %18, 3, !dbg !32
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %284 = insertelement <1 x i32> poison, i32 %230, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !32
  %285 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %286 = load float, ptr addrspace(3) %285, align 8, !dbg !32
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !32
  %287 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !32
  %288 = load float, ptr addrspace(3) %287, align 8, !dbg !32
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !32
  %289 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !32
  %290 = load float, ptr addrspace(3) %289, align 8, !dbg !32
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !32
  %291 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !32
  %292 = load float, ptr addrspace(3) %291, align 8, !dbg !32
  %293 = fadd float %158, %286, !dbg !32
  %294 = fadd float %161, %286, !dbg !32
  %295 = fadd float %164, %286, !dbg !32
  %296 = fadd float %167, %286, !dbg !32
  %297 = fadd float %172, %288, !dbg !32
  %298 = fadd float %177, %288, !dbg !32
  %299 = fadd float %182, %288, !dbg !32
  %300 = fadd float %187, %288, !dbg !32
  %301 = fadd float %192, %290, !dbg !32
  %302 = fadd float %197, %290, !dbg !32
  %303 = fadd float %202, %290, !dbg !32
  %304 = fadd float %207, %290, !dbg !32
  %305 = fadd float %212, %292, !dbg !32
  %306 = fadd float %217, %292, !dbg !32
  %307 = fadd float %222, %292, !dbg !32
  %308 = fadd float %227, %292, !dbg !32
  %309 = fadd float %293, %252, !dbg !33
  %310 = fadd float %294, %253, !dbg !33
  %311 = fadd float %295, %254, !dbg !33
  %312 = fadd float %296, %255, !dbg !33
  %313 = fadd float %297, %261, !dbg !33
  %314 = fadd float %298, %262, !dbg !33
  %315 = fadd float %299, %263, !dbg !33
  %316 = fadd float %300, %264, !dbg !33
  %317 = fadd float %301, %270, !dbg !33
  %318 = fadd float %302, %271, !dbg !33
  %319 = fadd float %303, %272, !dbg !33
  %320 = fadd float %304, %273, !dbg !33
  %321 = fadd float %305, %279, !dbg !33
  %322 = fadd float %306, %280, !dbg !33
  %323 = fadd float %307, %281, !dbg !33
  %324 = fadd float %308, %282, !dbg !33
  %325 = getelementptr float, ptr addrspace(1) %3, i64 %239, !dbg !34
  %326 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !34
  %327 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !34
  %328 = getelementptr float, ptr addrspace(1) %3, i64 %245, !dbg !34
  %329 = bitcast float %309 to i32, !dbg !35
  %330 = bitcast float %310 to i32, !dbg !35
  %331 = bitcast float %311 to i32, !dbg !35
  %332 = bitcast float %312 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %325, i1 true) #2, !dbg !35
  %333 = bitcast float %313 to i32, !dbg !35
  %334 = bitcast float %314 to i32, !dbg !35
  %335 = bitcast float %315 to i32, !dbg !35
  %336 = bitcast float %316 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %326, i1 true) #2, !dbg !35
  %337 = bitcast float %317 to i32, !dbg !35
  %338 = bitcast float %318 to i32, !dbg !35
  %339 = bitcast float %319 to i32, !dbg !35
  %340 = bitcast float %320 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %327, i1 true) #2, !dbg !35
  %341 = bitcast float %321 to i32, !dbg !35
  %342 = bitcast float %322 to i32, !dbg !35
  %343 = bitcast float %323 to i32, !dbg !35
  %344 = bitcast float %324 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %342, i32 %343, i32 %344, ptr addrspace(1) %328, i1 true) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhxr5ldvh2o7fan7xvkhp5bggmj2bfszo5w7y35dkjxcsniz4ns.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused_add_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_2", linkageName: "triton_poi_fused_add_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 40, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 46, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
