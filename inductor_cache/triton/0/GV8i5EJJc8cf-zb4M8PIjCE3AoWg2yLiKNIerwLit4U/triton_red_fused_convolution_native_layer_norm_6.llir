; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = and i32 %12, 31, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = icmp slt i32 %17, 1024, !dbg !14
  %21 = icmp slt i32 %18, 1024, !dbg !14
  %22 = icmp slt i32 %19, 1024, !dbg !14
  %23 = shl i32 %12, 2, !dbg !15
  %24 = and i32 %23, 124, !dbg !15
  %25 = sdiv i32 %19, 16, !dbg !16
  %26 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %27 = insertelement <2 x i32> %26, i32 %19, i64 1, !dbg !17
  %28 = srem <2 x i32> %27, splat (i32 16), !dbg !17
  %29 = sdiv i32 %19, 256, !dbg !18
  %30 = icmp samesign ult i32 %24, 96, !dbg !19
  %31 = mul i32 %17, 96, !dbg !20
  %32 = mul i32 %18, 96, !dbg !20
  %33 = add i32 %31, %24, !dbg !21
  %34 = add i32 %32, %24, !dbg !21
  %35 = sext i32 %33 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %34 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = and i1 %30, %20, !dbg !23
  %40 = and i1 %30, %21, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #5, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #5, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = zext nneg i32 %24 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = fadd float %46, %66, !dbg !27
  %71 = fadd float %47, %67, !dbg !27
  %72 = fadd float %48, %68, !dbg !27
  %73 = fadd float %49, %69, !dbg !27
  %74 = fadd float %55, %66, !dbg !27
  %75 = fadd float %56, %67, !dbg !27
  %76 = fadd float %57, %68, !dbg !27
  %77 = fadd float %58, %69, !dbg !27
  %78 = select i1 %39, float %70, float 0.000000e+00, !dbg !28
  %79 = select i1 %39, float %71, float 0.000000e+00, !dbg !28
  %80 = select i1 %39, float %72, float 0.000000e+00, !dbg !28
  %81 = select i1 %39, float %73, float 0.000000e+00, !dbg !28
  %82 = select i1 %40, float %74, float 0.000000e+00, !dbg !28
  %83 = select i1 %40, float %75, float 0.000000e+00, !dbg !28
  %84 = select i1 %40, float %76, float 0.000000e+00, !dbg !28
  %85 = select i1 %40, float %77, float 0.000000e+00, !dbg !28
  %86 = select i1 %39, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %87 = select i1 %40, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %88 = bitcast float %70 to i32, !dbg !30
  %89 = bitcast float %71 to i32, !dbg !30
  %90 = bitcast float %72 to i32, !dbg !30
  %91 = bitcast float %73 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %88, i32 %89, i32 %90, i32 %91, ptr addrspace(1) %36, i1 %39) #5, !dbg !30
  %92 = bitcast float %74 to i32, !dbg !30
  %93 = bitcast float %75 to i32, !dbg !30
  %94 = bitcast float %76 to i32, !dbg !30
  %95 = bitcast float %77 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %92, i32 %93, i32 %94, i32 %95, ptr addrspace(1) %38, i1 %40) #5, !dbg !30
  %96 = fsub float %79, %78, !dbg !31
  %97 = select i1 %39, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %98 = fcmp oeq float %97, 0.000000e+00, !dbg !37
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %97) #5, !dbg !38
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !39
  %101 = fmul float %100, %96, !dbg !40
  %102 = fadd float %78, %101, !dbg !41
  %103 = fmul float %96, %96, !dbg !42
  %104 = fmul float %86, %103, !dbg !43
  %105 = fmul float %100, %104, !dbg !44
  %106 = fadd float %105, 0.000000e+00, !dbg !45
  %107 = fsub float %80, %102, !dbg !31
  %108 = select i1 %39, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %109 = fcmp oeq float %108, 0.000000e+00, !dbg !37
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %108) #5, !dbg !38
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !39
  %112 = fmul float %111, %107, !dbg !40
  %113 = fadd float %102, %112, !dbg !41
  %114 = fmul float %107, %107, !dbg !42
  %115 = fmul float %97, %114, !dbg !43
  %116 = fmul float %111, %115, !dbg !44
  %117 = fadd float %106, %116, !dbg !45
  %118 = fsub float %81, %113, !dbg !31
  %119 = select i1 %39, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %120 = fcmp oeq float %119, 0.000000e+00, !dbg !37
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %119) #5, !dbg !38
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !39
  %123 = fmul float %122, %118, !dbg !40
  %124 = fadd float %113, %123, !dbg !41
  %125 = fmul float %118, %118, !dbg !42
  %126 = fmul float %108, %125, !dbg !43
  %127 = fmul float %122, %126, !dbg !44
  %128 = fadd float %117, %127, !dbg !45
  %129 = fsub float %83, %82, !dbg !31
  %130 = select i1 %40, float 2.000000e+00, float 0.000000e+00, !dbg !36
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !37
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %130) #5, !dbg !38
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !39
  %134 = fmul float %129, %133, !dbg !40
  %135 = fadd float %82, %134, !dbg !41
  %136 = fmul float %129, %129, !dbg !42
  %137 = fmul float %87, %136, !dbg !43
  %138 = fmul float %137, %133, !dbg !44
  %139 = fadd float %138, 0.000000e+00, !dbg !45
  %140 = fsub float %84, %135, !dbg !31
  %141 = select i1 %40, float 3.000000e+00, float 0.000000e+00, !dbg !36
  %142 = fcmp oeq float %141, 0.000000e+00, !dbg !37
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %141) #5, !dbg !38
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !39
  %145 = fmul float %144, %140, !dbg !40
  %146 = fadd float %135, %145, !dbg !41
  %147 = fmul float %140, %140, !dbg !42
  %148 = fmul float %130, %147, !dbg !43
  %149 = fmul float %144, %148, !dbg !44
  %150 = fadd float %139, %149, !dbg !45
  %151 = fsub float %85, %146, !dbg !31
  %152 = select i1 %40, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %153 = fcmp oeq float %152, 0.000000e+00, !dbg !37
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %152) #5, !dbg !38
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !39
  %156 = fmul float %155, %151, !dbg !40
  %157 = fadd float %146, %156, !dbg !41
  %158 = fmul float %151, %151, !dbg !42
  %159 = fmul float %141, %158, !dbg !43
  %160 = fmul float %155, %159, !dbg !44
  %161 = fadd float %150, %160, !dbg !45
  %162 = bitcast float %124 to i32, !dbg !46
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !46
  %164 = bitcast i32 %163 to float, !dbg !46
  %165 = bitcast float %128 to i32, !dbg !46
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !46
  %167 = bitcast i32 %166 to float, !dbg !46
  %168 = bitcast float %119 to i32, !dbg !46
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !46
  %170 = bitcast i32 %169 to float, !dbg !46
  %171 = fsub float %164, %124, !dbg !31
  %172 = fadd float %119, %170, !dbg !36
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !37
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #5, !dbg !38
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !39
  %176 = fmul float %171, %175, !dbg !40
  %177 = fadd float %124, %176, !dbg !41
  %178 = fadd float %128, %167, !dbg !47
  %179 = fmul float %171, %171, !dbg !42
  %180 = fmul float %119, %179, !dbg !43
  %181 = fmul float %175, %180, !dbg !44
  %182 = fadd float %178, %181, !dbg !45
  %183 = bitcast float %177 to i32, !dbg !46
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !46
  %185 = bitcast i32 %184 to float, !dbg !46
  %186 = bitcast float %182 to i32, !dbg !46
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 8, i32 31), !dbg !46
  %188 = bitcast i32 %187 to float, !dbg !46
  %189 = bitcast float %172 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = fsub float %185, %177, !dbg !31
  %193 = fadd float %172, %191, !dbg !36
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !37
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !38
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !39
  %197 = fmul float %192, %196, !dbg !40
  %198 = fadd float %177, %197, !dbg !41
  %199 = fadd float %182, %188, !dbg !47
  %200 = fmul float %192, %192, !dbg !42
  %201 = fmul float %172, %200, !dbg !43
  %202 = fmul float %196, %201, !dbg !44
  %203 = fadd float %199, %202, !dbg !45
  %204 = bitcast float %198 to i32, !dbg !46
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !46
  %206 = bitcast i32 %205 to float, !dbg !46
  %207 = bitcast float %203 to i32, !dbg !46
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !46
  %209 = bitcast i32 %208 to float, !dbg !46
  %210 = bitcast float %193 to i32, !dbg !46
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !46
  %212 = bitcast i32 %211 to float, !dbg !46
  %213 = fsub float %206, %198, !dbg !31
  %214 = fadd float %193, %212, !dbg !36
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !37
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #5, !dbg !38
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !39
  %218 = fmul float %213, %217, !dbg !40
  %219 = fadd float %198, %218, !dbg !41
  %220 = fadd float %203, %209, !dbg !47
  %221 = fmul float %213, %213, !dbg !42
  %222 = fmul float %193, %221, !dbg !43
  %223 = fmul float %217, %222, !dbg !44
  %224 = fadd float %220, %223, !dbg !45
  %225 = bitcast float %219 to i32, !dbg !46
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !46
  %227 = bitcast i32 %226 to float, !dbg !46
  %228 = bitcast float %224 to i32, !dbg !46
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !46
  %230 = bitcast i32 %229 to float, !dbg !46
  %231 = bitcast float %214 to i32, !dbg !46
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !46
  %233 = bitcast i32 %232 to float, !dbg !46
  %234 = fsub float %227, %219, !dbg !31
  %235 = fadd float %214, %233, !dbg !36
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !37
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !38
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !39
  %239 = fmul float %234, %238, !dbg !40
  %240 = fadd float %219, %239, !dbg !41
  %241 = fadd float %224, %230, !dbg !47
  %242 = fmul float %234, %234, !dbg !42
  %243 = fmul float %214, %242, !dbg !43
  %244 = fmul float %238, %243, !dbg !44
  %245 = fadd float %241, %244, !dbg !45
  %246 = bitcast float %240 to i32, !dbg !46
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !46
  %248 = bitcast i32 %247 to float, !dbg !46
  %249 = bitcast float %245 to i32, !dbg !46
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 1, i32 31), !dbg !46
  %251 = bitcast i32 %250 to float, !dbg !46
  %252 = bitcast float %235 to i32, !dbg !46
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !46
  %254 = bitcast i32 %253 to float, !dbg !46
  %255 = fsub float %248, %240, !dbg !31
  %256 = fadd float %235, %254, !dbg !36
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !37
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !38
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !39
  %260 = fmul float %255, %259, !dbg !40
  %261 = fadd float %240, %260, !dbg !41
  %262 = fadd float %245, %251, !dbg !47
  %263 = fmul float %255, %255, !dbg !42
  %264 = fmul float %235, %263, !dbg !43
  %265 = fmul float %259, %264, !dbg !44
  %266 = fadd float %262, %265, !dbg !45
  %267 = bitcast float %157 to i32, !dbg !46
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 16, i32 31), !dbg !46
  %269 = bitcast i32 %268 to float, !dbg !46
  %270 = bitcast float %161 to i32, !dbg !46
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !46
  %272 = bitcast i32 %271 to float, !dbg !46
  %273 = bitcast float %152 to i32, !dbg !46
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = fsub float %269, %157, !dbg !31
  %277 = fadd float %152, %275, !dbg !36
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !38
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !39
  %281 = fmul float %276, %280, !dbg !40
  %282 = fadd float %157, %281, !dbg !41
  %283 = fadd float %161, %272, !dbg !47
  %284 = fmul float %276, %276, !dbg !42
  %285 = fmul float %152, %284, !dbg !43
  %286 = fmul float %285, %280, !dbg !44
  %287 = fadd float %283, %286, !dbg !45
  %288 = bitcast float %282 to i32, !dbg !46
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !46
  %290 = bitcast i32 %289 to float, !dbg !46
  %291 = bitcast float %287 to i32, !dbg !46
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !46
  %293 = bitcast i32 %292 to float, !dbg !46
  %294 = bitcast float %277 to i32, !dbg !46
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !46
  %296 = bitcast i32 %295 to float, !dbg !46
  %297 = fsub float %290, %282, !dbg !31
  %298 = fadd float %277, %296, !dbg !36
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !37
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !38
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !39
  %302 = fmul float %297, %301, !dbg !40
  %303 = fadd float %282, %302, !dbg !41
  %304 = fadd float %287, %293, !dbg !47
  %305 = fmul float %297, %297, !dbg !42
  %306 = fmul float %277, %305, !dbg !43
  %307 = fmul float %301, %306, !dbg !44
  %308 = fadd float %304, %307, !dbg !45
  %309 = bitcast float %303 to i32, !dbg !46
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !46
  %311 = bitcast i32 %310 to float, !dbg !46
  %312 = bitcast float %308 to i32, !dbg !46
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !46
  %314 = bitcast i32 %313 to float, !dbg !46
  %315 = bitcast float %298 to i32, !dbg !46
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !46
  %317 = bitcast i32 %316 to float, !dbg !46
  %318 = fsub float %311, %303, !dbg !31
  %319 = fadd float %298, %317, !dbg !36
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !37
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !38
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !39
  %323 = fmul float %318, %322, !dbg !40
  %324 = fadd float %303, %323, !dbg !41
  %325 = fadd float %308, %314, !dbg !47
  %326 = fmul float %318, %318, !dbg !42
  %327 = fmul float %298, %326, !dbg !43
  %328 = fmul float %322, %327, !dbg !44
  %329 = fadd float %325, %328, !dbg !45
  %330 = bitcast float %324 to i32, !dbg !46
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !46
  %332 = bitcast i32 %331 to float, !dbg !46
  %333 = bitcast float %329 to i32, !dbg !46
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !46
  %335 = bitcast i32 %334 to float, !dbg !46
  %336 = bitcast float %319 to i32, !dbg !46
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !46
  %338 = bitcast i32 %337 to float, !dbg !46
  %339 = fsub float %332, %324, !dbg !31
  %340 = fadd float %319, %338, !dbg !36
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !37
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %340) #5, !dbg !38
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !39
  %344 = fmul float %339, %343, !dbg !40
  %345 = fadd float %324, %344, !dbg !41
  %346 = fadd float %329, %335, !dbg !47
  %347 = fmul float %339, %339, !dbg !42
  %348 = fmul float %319, %347, !dbg !43
  %349 = fmul float %343, %348, !dbg !44
  %350 = fadd float %346, %349, !dbg !45
  %351 = bitcast float %345 to i32, !dbg !46
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !46
  %353 = bitcast i32 %352 to float, !dbg !46
  %354 = bitcast float %350 to i32, !dbg !46
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !46
  %356 = bitcast i32 %355 to float, !dbg !46
  %357 = bitcast float %340 to i32, !dbg !46
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !46
  %359 = bitcast i32 %358 to float, !dbg !46
  %360 = fsub float %353, %345, !dbg !31
  %361 = fadd float %340, %359, !dbg !36
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !37
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !38
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !39
  %365 = fmul float %360, %364, !dbg !40
  %366 = fadd float %345, %365, !dbg !41
  %367 = fadd float %350, %356, !dbg !47
  %368 = fmul float %360, %360, !dbg !42
  %369 = fmul float %340, %368, !dbg !43
  %370 = fmul float %364, %369, !dbg !44
  %371 = fadd float %367, %370, !dbg !45
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  %373 = bitcast float %261 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #5, !dbg !48
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %375 = bitcast float %366 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !48
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %378 = bitcast float %266 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %378, i1 true) #5, !dbg !49
  %379 = bitcast float %371 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %379, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %380 = load float, ptr addrspace(3) %376, align 4, !dbg !49
  %381 = extractelement <2 x i32> %28, i64 1, !dbg !50
  %382 = shl nsw i32 %381, 4, !dbg !50
  %383 = extractelement <2 x i32> %28, i64 0, !dbg !51
  %384 = add nsw i32 %383, %382, !dbg !51
  %385 = shl nsw i32 %29, 8, !dbg !52
  %386 = add i32 %384, %385, !dbg !53
  %387 = sext i32 %386 to i64, !dbg !54
  %388 = getelementptr float, ptr addrspace(1) %4, i64 %387, !dbg !54
  %389 = and i32 %12, 480, !dbg !55
  %390 = icmp eq i32 %389, 0, !dbg !55
  %391 = and i1 %390, %22, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %388, i1 %391) #5, !dbg !55
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float 9.600000e+01) #5, !dbg !56
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float 9.600000e+01) #5, !dbg !56
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float 9.600000e+01) #5, !dbg !56
  %395 = fadd float %392, 0x3EB0C6F7A0000000, !dbg !57
  %396 = fadd float %393, 0x3EB0C6F7A0000000, !dbg !57
  %397 = fadd float %394, 0x3EB0C6F7A0000000, !dbg !57
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %398, 0, !dbg !49
  br i1 %.not.i, label %401, label %399, !dbg !49

399:                                              ; preds = %9
  %400 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %395), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

401:                                              ; preds = %9
  %402 = tail call float @llvm.nvvm.rsqrt.approx.f(float %395), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %399, %401
  %.0.i = phi float [ %400, %399 ], [ %402, %401 ], !dbg !49
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %406, 0, !dbg !49
  br i1 %.not.i10, label %409, label %407, !dbg !49

407:                                              ; preds = %__nv_rsqrtf.exit
  %408 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %396), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

409:                                              ; preds = %__nv_rsqrtf.exit
  %410 = tail call float @llvm.nvvm.rsqrt.approx.f(float %396), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %407, %409
  %.0.i11 = phi float [ %408, %407 ], [ %410, %409 ], !dbg !49
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i22 = icmp eq i32 %414, 0, !dbg !49
  br i1 %.not.i22, label %417, label %415, !dbg !49

415:                                              ; preds = %__nv_rsqrtf.exit12
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %397), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

417:                                              ; preds = %__nv_rsqrtf.exit12
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %397), !dbg !49
  br label %__nv_rsqrtf.exit24, !dbg !49

__nv_rsqrtf.exit24:                               ; preds = %415, %417
  %.0.i23 = phi float [ %416, %415 ], [ %418, %417 ], !dbg !49
  %419 = getelementptr float, ptr addrspace(1) %5, i64 %387, !dbg !58
  %420 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %419, i1 %391) #5, !dbg !59
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #5, !dbg !60
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !60
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !60
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !60
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !60
  %426 = bitcast i32 %422 to float, !dbg !60
  %427 = bitcast i32 %423 to float, !dbg !60
  %428 = bitcast i32 %424 to float, !dbg !60
  %429 = bitcast i32 %425 to float, !dbg !60
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #5, !dbg !60
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !60
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !60
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !60
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !60
  %435 = bitcast i32 %431 to float, !dbg !60
  %436 = bitcast i32 %432 to float, !dbg !60
  %437 = bitcast i32 %433 to float, !dbg !60
  %438 = bitcast i32 %434 to float, !dbg !60
  %439 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !61
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %439, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !62
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !62
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !62
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !62
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !62
  %445 = bitcast i32 %441 to float, !dbg !62
  %446 = bitcast i32 %442 to float, !dbg !62
  %447 = bitcast i32 %443 to float, !dbg !62
  %448 = bitcast i32 %444 to float, !dbg !62
  %449 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !63
  %450 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %449, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !64
  %451 = extractvalue { i32, i32, i32, i32 } %450, 0, !dbg !64
  %452 = extractvalue { i32, i32, i32, i32 } %450, 1, !dbg !64
  %453 = extractvalue { i32, i32, i32, i32 } %450, 2, !dbg !64
  %454 = extractvalue { i32, i32, i32, i32 } %450, 3, !dbg !64
  %455 = bitcast i32 %451 to float, !dbg !64
  %456 = bitcast i32 %452 to float, !dbg !64
  %457 = bitcast i32 %453 to float, !dbg !64
  %458 = bitcast i32 %454 to float, !dbg !64
  %459 = fsub float %426, %261, !dbg !65
  %460 = fsub float %427, %261, !dbg !65
  %461 = fsub float %428, %261, !dbg !65
  %462 = fsub float %429, %261, !dbg !65
  %463 = fsub float %435, %366, !dbg !65
  %464 = fsub float %436, %366, !dbg !65
  %465 = fsub float %437, %366, !dbg !65
  %466 = fsub float %438, %366, !dbg !65
  %467 = fmul float %.0.i11, %459, !dbg !66
  %468 = fmul float %.0.i11, %460, !dbg !66
  %469 = fmul float %.0.i11, %461, !dbg !66
  %470 = fmul float %.0.i11, %462, !dbg !66
  %471 = fmul float %.0.i23, %463, !dbg !66
  %472 = fmul float %.0.i23, %464, !dbg !66
  %473 = fmul float %.0.i23, %465, !dbg !66
  %474 = fmul float %.0.i23, %466, !dbg !66
  %475 = fmul float %467, %445, !dbg !67
  %476 = fmul float %468, %446, !dbg !67
  %477 = fmul float %469, %447, !dbg !67
  %478 = fmul float %470, %448, !dbg !67
  %479 = fmul float %471, %445, !dbg !67
  %480 = fmul float %472, %446, !dbg !67
  %481 = fmul float %473, %447, !dbg !67
  %482 = fmul float %474, %448, !dbg !67
  %483 = fadd float %475, %455, !dbg !68
  %484 = fadd float %476, %456, !dbg !68
  %485 = fadd float %477, %457, !dbg !68
  %486 = fadd float %478, %458, !dbg !68
  %487 = fadd float %479, %455, !dbg !68
  %488 = fadd float %480, %456, !dbg !68
  %489 = fadd float %481, %457, !dbg !68
  %490 = fadd float %482, %458, !dbg !68
  %491 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !69
  %492 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !69
  %493 = bitcast float %483 to i32, !dbg !70
  %494 = bitcast float %484 to i32, !dbg !70
  %495 = bitcast float %485 to i32, !dbg !70
  %496 = bitcast float %486 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %493, i32 %494, i32 %495, i32 %496, ptr addrspace(1) %491, i1 %39) #5, !dbg !70
  %497 = bitcast float %487 to i32, !dbg !70
  %498 = bitcast float %488 to i32, !dbg !70
  %499 = bitcast float %489 to i32, !dbg !70
  %500 = bitcast float %490 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %497, i32 %498, i32 %499, i32 %500, ptr addrspace(1) %492, i1 %40) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crr3m2ltnnptooz6qtc355d6ttmyjpivruavreahqq3qgx3a73l3.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_6", linkageName: "triton_red_fused_convolution_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 46, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 51, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 49, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !35)
!46 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !35)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 33, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 42, scope: !7)
!53 = !DILocation(line: 54, column: 38, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 53, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 54, scope: !7)
!60 = !DILocation(line: 65, column: 52, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 49, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
