; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 256, !dbg !14
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = lshr i32 %8, 3, !dbg !17
  %33 = and i32 %32, 15, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 16, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 961, !dbg !19
  %39 = icmp slt i32 %36, 961, !dbg !19
  %40 = icmp slt i32 %37, 961, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %41 = sdiv i32 %.frozen, 64, !dbg !20
  %42 = mul i32 %41, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %43 = sdiv i32 %13, 64, !dbg !20
  %44 = sdiv i32 %14, 64, !dbg !20
  %45 = sdiv i32 %15, 64, !dbg !20
  %46 = sdiv i32 %16, 64, !dbg !20
  %47 = sdiv i32 %17, 64, !dbg !20
  %48 = sdiv i32 %18, 64, !dbg !20
  %49 = sdiv i32 %19, 64, !dbg !20
  %50 = sdiv i32 %20, 64, !dbg !20
  %51 = shl i32 %35, 6, !dbg !22
  %52 = shl i32 %36, 6, !dbg !22
  %53 = mul i32 %41, 61504, !dbg !23
  %54 = add i32 %53, %.decomposed, !dbg !24
  %55 = add i32 %54, %51, !dbg !25
  %56 = add i32 %54, %52, !dbg !25
  %57 = sext i32 %55 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = and i1 %21, %38, !dbg !27
  %62 = and i1 %39, %21, !dbg !27
  %63 = and i1 %22, %40, !dbg !27
  %64 = and i1 %23, %40, !dbg !27
  %65 = and i1 %24, %40, !dbg !27
  %66 = and i1 %25, %40, !dbg !27
  %67 = and i1 %26, %40, !dbg !27
  %68 = and i1 %27, %40, !dbg !27
  %69 = and i1 %28, %40, !dbg !27
  %70 = and i1 %29, %40, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #4, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #4, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %81 = shl i32 %8, 7, !dbg !28
  %82 = and i32 %81, 896, !dbg !28
  %83 = or disjoint i32 %82, %33, !dbg !28
  %84 = and i32 %8, 127, !dbg !28
  %85 = lshr exact i32 %82, 3, !dbg !28
  %86 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %85, !dbg !28
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !28
  %88 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !28
  %89 = or disjoint i32 %83, 32, !dbg !28
  %90 = lshr i32 %89, 5, !dbg !28
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !28
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !28
  %93 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !28
  %94 = or disjoint i32 %83, 64, !dbg !28
  %95 = lshr i32 %94, 5, !dbg !28
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !28
  %98 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !28
  %99 = or disjoint i32 %83, 96, !dbg !28
  %100 = lshr i32 %99, 5, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !28
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !28
  %103 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !28
  %104 = or disjoint i32 %83, 16, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) %86, i32 %104, !dbg !28
  %106 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !28
  %107 = or disjoint i32 %83, 48, !dbg !28
  %108 = lshr i32 %107, 5, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !28
  %111 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !28
  %112 = or disjoint i32 %83, 80, !dbg !28
  %113 = lshr i32 %112, 5, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !28
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !28
  %116 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !28
  %117 = or disjoint i32 %83, 112, !dbg !28
  %118 = lshr i32 %117, 5, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !28
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !28
  %121 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %122 = lshr i32 %84, 5, !dbg !28
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !28
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %84, !dbg !28
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !28
  %126 = or disjoint i32 %84, 128, !dbg !28
  %127 = lshr i32 %126, 5, !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !28
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !28
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !28
  %131 = or disjoint i32 %84, 256, !dbg !28
  %132 = lshr i32 %131, 5, !dbg !28
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !28
  %134 = getelementptr inbounds float, ptr addrspace(3) %133, i32 %131, !dbg !28
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !28
  %136 = or disjoint i32 %84, 384, !dbg !28
  %137 = lshr i32 %136, 5, !dbg !28
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !28
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !28
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !28
  %141 = or disjoint i32 %84, 512, !dbg !28
  %142 = lshr i32 %141, 5, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !28
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !28
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !28
  %146 = or disjoint i32 %84, 640, !dbg !28
  %147 = lshr i32 %146, 5, !dbg !28
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !28
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !28
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !28
  %151 = or disjoint i32 %84, 768, !dbg !28
  %152 = lshr i32 %151, 5, !dbg !28
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !28
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !28
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !28
  %156 = or disjoint i32 %84, 896, !dbg !28
  %157 = lshr i32 %156, 5, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !28
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !28
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !28
  %161 = mul i32 %43, 961, !dbg !29
  %162 = mul i32 %44, 961, !dbg !29
  %163 = mul i32 %45, 961, !dbg !29
  %164 = mul i32 %46, 961, !dbg !29
  %165 = mul i32 %47, 961, !dbg !29
  %166 = mul i32 %48, 961, !dbg !29
  %167 = mul i32 %49, 961, !dbg !29
  %168 = mul i32 %50, 961, !dbg !29
  %169 = add i32 %161, %37, !dbg !30
  %170 = add i32 %37, %162, !dbg !30
  %171 = add i32 %37, %163, !dbg !30
  %172 = add i32 %37, %164, !dbg !30
  %173 = add i32 %37, %165, !dbg !30
  %174 = add i32 %37, %166, !dbg !30
  %175 = add i32 %37, %167, !dbg !30
  %176 = add i32 %37, %168, !dbg !30
  %177 = sext i32 %169 to i64, !dbg !31
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !31
  %179 = sext i32 %170 to i64, !dbg !31
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !31
  %181 = sext i32 %171 to i64, !dbg !31
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !31
  %183 = sext i32 %172 to i64, !dbg !31
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !31
  %185 = sext i32 %173 to i64, !dbg !31
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !31
  %187 = sext i32 %174 to i64, !dbg !31
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !31
  %189 = sext i32 %175 to i64, !dbg !31
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !31
  %191 = sext i32 %176 to i64, !dbg !31
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !31
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %63) #4, !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %64) #4, !dbg !32
  %196 = bitcast i32 %195 to float, !dbg !32
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %65) #4, !dbg !32
  %198 = bitcast i32 %197 to float, !dbg !32
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %66) #4, !dbg !32
  %200 = bitcast i32 %199 to float, !dbg !32
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %67) #4, !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %68) #4, !dbg !32
  %204 = bitcast i32 %203 to float, !dbg !32
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %69) #4, !dbg !32
  %206 = bitcast i32 %205 to float, !dbg !32
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %70) #4, !dbg !32
  %208 = bitcast i32 %207 to float, !dbg !32
  %209 = fadd float %194, 0x3E112E0BE0000000, !dbg !33
  %210 = fadd float %196, 0x3E112E0BE0000000, !dbg !33
  %211 = fadd float %198, 0x3E112E0BE0000000, !dbg !33
  %212 = fadd float %200, 0x3E112E0BE0000000, !dbg !33
  %213 = fadd float %202, 0x3E112E0BE0000000, !dbg !33
  %214 = fadd float %204, 0x3E112E0BE0000000, !dbg !33
  %215 = fadd float %206, 0x3E112E0BE0000000, !dbg !33
  %216 = fadd float %208, 0x3E112E0BE0000000, !dbg !33
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %217, 0, !dbg !34
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %218, 0, !dbg !34
  br i1 %.not.i, label %224, label %219, !dbg !34

219:                                              ; preds = %5
  br i1 %.not1.i, label %222, label %220, !dbg !34

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %209) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %209) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

224:                                              ; preds = %5
  br i1 %.not1.i, label %227, label %225, !dbg !34

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %209) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %209) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %220, %222, %225, %227
  %.0.i = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !34
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i4 = icmp eq i32 %229, 0, !dbg !34
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i7 = icmp eq i32 %230, 0, !dbg !34
  br i1 %.not.i4, label %236, label %231, !dbg !34

231:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %234, label %232, !dbg !34

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

236:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %239, label %237, !dbg !34

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

__nv_sqrtf.exit8:                                 ; preds = %232, %234, %237, %239
  %.0.i6 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !34
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i9 = icmp eq i32 %241, 0, !dbg !34
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i12 = icmp eq i32 %242, 0, !dbg !34
  br i1 %.not.i9, label %248, label %243, !dbg !34

243:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %246, label %244, !dbg !34

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

248:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %251, label %249, !dbg !34

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

__nv_sqrtf.exit13:                                ; preds = %244, %246, %249, %251
  %.0.i11 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !34
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i14 = icmp eq i32 %253, 0, !dbg !34
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i17 = icmp eq i32 %254, 0, !dbg !34
  br i1 %.not.i14, label %260, label %255, !dbg !34

255:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %258, label %256, !dbg !34

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

260:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %263, label %261, !dbg !34

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

__nv_sqrtf.exit18:                                ; preds = %256, %258, %261, %263
  %.0.i16 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !34
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i19 = icmp eq i32 %265, 0, !dbg !34
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i22 = icmp eq i32 %266, 0, !dbg !34
  br i1 %.not.i19, label %272, label %267, !dbg !34

267:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %270, label %268, !dbg !34

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

272:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %275, label %273, !dbg !34

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

__nv_sqrtf.exit23:                                ; preds = %268, %270, %273, %275
  %.0.i21 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !34
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i24 = icmp eq i32 %277, 0, !dbg !34
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i27 = icmp eq i32 %278, 0, !dbg !34
  br i1 %.not.i24, label %284, label %279, !dbg !34

279:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %282, label %280, !dbg !34

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

284:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %287, label %285, !dbg !34

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

__nv_sqrtf.exit28:                                ; preds = %280, %282, %285, %287
  %.0.i26 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !34
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i29 = icmp eq i32 %289, 0, !dbg !34
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i32 = icmp eq i32 %290, 0, !dbg !34
  br i1 %.not.i29, label %296, label %291, !dbg !34

291:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %294, label %292, !dbg !34

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

296:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %299, label %297, !dbg !34

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

__nv_sqrtf.exit33:                                ; preds = %292, %294, %297, %299
  %.0.i31 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !34
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i34 = icmp eq i32 %301, 0, !dbg !34
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i37 = icmp eq i32 %302, 0, !dbg !34
  br i1 %.not.i34, label %308, label %303, !dbg !34

303:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %306, label %304, !dbg !34

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

308:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %311, label %309, !dbg !34

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

__nv_sqrtf.exit38:                                ; preds = %304, %306, %309, %311
  %.0.i36 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !34
  %313 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !35
  %314 = fadd float %.0.i6, 0x3DDB7CDFE0000000, !dbg !35
  %315 = fadd float %.0.i11, 0x3DDB7CDFE0000000, !dbg !35
  %316 = fadd float %.0.i16, 0x3DDB7CDFE0000000, !dbg !35
  %317 = fadd float %.0.i21, 0x3DDB7CDFE0000000, !dbg !35
  %318 = fadd float %.0.i26, 0x3DDB7CDFE0000000, !dbg !35
  %319 = fadd float %.0.i31, 0x3DDB7CDFE0000000, !dbg !35
  %320 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !35
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %313) #4, !dbg !36
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %314) #4, !dbg !36
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %315) #4, !dbg !36
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %316) #4, !dbg !36
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %317) #4, !dbg !36
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %318) #4, !dbg !36
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %319) #4, !dbg !36
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %320) #4, !dbg !36
  %329 = mul i32 %13, 961, !dbg !37
  %330 = mul i32 %14, 961, !dbg !37
  %331 = mul i32 %15, 961, !dbg !37
  %332 = mul i32 %16, 961, !dbg !37
  %333 = mul i32 %17, 961, !dbg !37
  %334 = mul i32 %18, 961, !dbg !37
  %335 = mul i32 %19, 961, !dbg !37
  %336 = mul i32 %20, 961, !dbg !37
  %337 = add i32 %37, %329, !dbg !38
  %338 = add i32 %37, %330, !dbg !38
  %339 = add i32 %37, %331, !dbg !38
  %340 = add i32 %37, %332, !dbg !38
  %341 = add i32 %37, %333, !dbg !38
  %342 = add i32 %37, %334, !dbg !38
  %343 = add i32 %37, %335, !dbg !38
  %344 = add i32 %37, %336, !dbg !38
  %345 = sext i32 %337 to i64, !dbg !39
  %346 = getelementptr float, ptr addrspace(1) %2, i64 %345, !dbg !39
  %347 = sext i32 %338 to i64, !dbg !39
  %348 = getelementptr float, ptr addrspace(1) %2, i64 %347, !dbg !39
  %349 = sext i32 %339 to i64, !dbg !39
  %350 = getelementptr float, ptr addrspace(1) %2, i64 %349, !dbg !39
  %351 = sext i32 %340 to i64, !dbg !39
  %352 = getelementptr float, ptr addrspace(1) %2, i64 %351, !dbg !39
  %353 = sext i32 %341 to i64, !dbg !39
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %353, !dbg !39
  %355 = sext i32 %342 to i64, !dbg !39
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %355, !dbg !39
  %357 = sext i32 %343 to i64, !dbg !39
  %358 = getelementptr float, ptr addrspace(1) %2, i64 %357, !dbg !39
  %359 = sext i32 %344 to i64, !dbg !39
  %360 = getelementptr float, ptr addrspace(1) %2, i64 %359, !dbg !39
  %361 = bitcast float %321 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %346, i1 %63) #4, !dbg !40
  %362 = bitcast float %322 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %348, i1 %64) #4, !dbg !40
  %363 = bitcast float %323 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %350, i1 %65) #4, !dbg !40
  %364 = bitcast float %324 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %352, i1 %66) #4, !dbg !40
  %365 = bitcast float %325 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %354, i1 %67) #4, !dbg !40
  %366 = bitcast float %326 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %356, i1 %68) #4, !dbg !40
  %367 = bitcast float %327 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %358, i1 %69) #4, !dbg !40
  %368 = bitcast float %328 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %360, i1 %70) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4ebqrsq2ikwesrt4tjtb2k3y4xpbe7yogrspynmxwobged3he5.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 34, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 45, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
