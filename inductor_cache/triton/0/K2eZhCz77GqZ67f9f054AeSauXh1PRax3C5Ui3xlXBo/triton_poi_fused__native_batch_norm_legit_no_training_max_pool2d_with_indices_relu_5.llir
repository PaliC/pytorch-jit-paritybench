; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 32, !dbg !14
  %16 = mul i32 %15, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %14, 32, !dbg !15
  %18 = sdiv i32 %13, 1024, !dbg !16
  %19 = srem i32 %18, 4, !dbg !17
  %20 = shl nsw i32 %.decomposed, 1, !dbg !18
  %21 = shl nsw i32 %17, 1, !dbg !18
  %22 = shl i32 %15, 7, !dbg !19
  %23 = add i32 %20, %22, !dbg !20
  %24 = add i32 %22, %21, !dbg !20
  %25 = sext i32 %23 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %31 = or disjoint i32 %23, 1, !dbg !23
  %32 = or disjoint i32 %24, 1, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %39 = add i32 %23, 64, !dbg !26
  %40 = add i32 %24, 64, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %47 = add i32 %23, 65, !dbg !29
  %48 = add i32 %24, 65, !dbg !29
  %49 = sext i32 %47 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = sext i32 %48 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !31
  %55 = sext i32 %19 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !39
  %70 = fadd float %61, 0x3EE4F8B580000000, !dbg !40
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !40
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %72, 0, !dbg !41
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %73, 0, !dbg !41
  br i1 %.not.i, label %79, label %74, !dbg !41

74:                                               ; preds = %7
  br i1 %.not1.i, label %77, label %75, !dbg !41

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

79:                                               ; preds = %7
  br i1 %.not1.i, label %82, label %80, !dbg !41

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !41
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %84, 0, !dbg !41
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !41
  br i1 %.not.i1, label %91, label %86, !dbg !41

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !41

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !41

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !41
  %96 = bitcast i32 %38 to float, !dbg !25
  %97 = bitcast i32 %30 to float, !dbg !22
  %98 = fcmp ogt float %96, %97, !dbg !42
  %99 = fcmp uno float %96, 0.000000e+00, !dbg !46
  %100 = or i1 %98, %99, !dbg !47
  %101 = select i1 %100, float %96, float %97, !dbg !48
  %102 = bitcast i32 %46 to float, !dbg !28
  %103 = fcmp olt float %101, %102, !dbg !49
  %104 = fcmp uno float %102, 0.000000e+00, !dbg !51
  %105 = or i1 %104, %103, !dbg !52
  %106 = select i1 %105, float %102, float %101, !dbg !53
  %107 = bitcast i32 %54 to float, !dbg !31
  %108 = fcmp olt float %106, %107, !dbg !54
  %109 = fcmp uno float %107, 0.000000e+00, !dbg !56
  %110 = or i1 %109, %108, !dbg !57
  %111 = select i1 %110, float %107, float %106, !dbg !58
  %112 = bitcast i32 %58 to float, !dbg !33
  %113 = fsub float %111, %112, !dbg !59
  %114 = bitcast i32 %37 to float, !dbg !25
  %115 = bitcast i32 %29 to float, !dbg !22
  %116 = fcmp ogt float %114, %115, !dbg !42
  %117 = fcmp uno float %114, 0.000000e+00, !dbg !46
  %118 = or i1 %116, %117, !dbg !47
  %119 = select i1 %118, float %114, float %115, !dbg !48
  %120 = bitcast i32 %45 to float, !dbg !28
  %121 = fcmp olt float %119, %120, !dbg !49
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !51
  %123 = or i1 %122, %121, !dbg !52
  %124 = select i1 %123, float %120, float %119, !dbg !53
  %125 = bitcast i32 %53 to float, !dbg !31
  %126 = fcmp olt float %124, %125, !dbg !54
  %127 = fcmp uno float %125, 0.000000e+00, !dbg !56
  %128 = or i1 %127, %126, !dbg !57
  %129 = select i1 %128, float %125, float %124, !dbg !58
  %130 = bitcast i32 %57 to float, !dbg !33
  %131 = fsub float %129, %130, !dbg !59
  %132 = bitcast i32 %69 to float, !dbg !39
  %133 = bitcast i32 %68 to float, !dbg !39
  %134 = bitcast i32 %66 to float, !dbg !37
  %135 = bitcast i32 %65 to float, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !60
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !60
  %138 = fmul float %131, %136, !dbg !61
  %139 = fmul float %113, %137, !dbg !61
  %140 = fmul float %138, %135, !dbg !62
  %141 = fmul float %139, %134, !dbg !62
  %142 = fadd float %140, %133, !dbg !63
  %143 = fadd float %141, %132, !dbg !63
  %144 = fcmp olt float %142, 0.000000e+00, !dbg !64
  %145 = fcmp olt float %143, 0.000000e+00, !dbg !64
  %146 = select i1 %144, float 0.000000e+00, float %142, !dbg !66
  %147 = select i1 %145, float 0.000000e+00, float %143, !dbg !66
  %148 = sext i32 %13 to i64, !dbg !67
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !67
  %150 = bitcast float %146 to i32, !dbg !68
  %151 = bitcast float %147 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 true) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cye4da7utlqsnlst4fxs6nyyr62gmwzyowwwberjzds6rbadyjjp.py", directory: "inductor_cache/ye")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 41, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 46, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 51, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 51, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 30, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 41, column: 19, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 36, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !50)
!50 = !DILocation(line: 37, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !55)
!55 = !DILocation(line: 38, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !55)
!59 = !DILocation(line: 39, column: 18, scope: !7)
!60 = !DILocation(line: 44, column: 20, scope: !7)
!61 = !DILocation(line: 47, column: 19, scope: !7)
!62 = !DILocation(line: 48, column: 20, scope: !7)
!63 = !DILocation(line: 49, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !65)
!65 = !DILocation(line: 51, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !65)
!67 = !DILocation(line: 52, column: 25, scope: !7)
!68 = !DILocation(line: 52, column: 37, scope: !7)
!69 = !DILocation(line: 52, column: 4, scope: !7)
