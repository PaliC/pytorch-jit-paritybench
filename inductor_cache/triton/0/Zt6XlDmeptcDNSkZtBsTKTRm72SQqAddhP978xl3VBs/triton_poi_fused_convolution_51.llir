; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = lshr i32 %9, 2, !dbg !17
  %23 = and i32 %22, 31, !dbg !17
  %24 = and i32 %10, 60, !dbg !17
  %25 = or disjoint i32 %21, %23, !dbg !18
  %26 = or disjoint i32 %25, 32, !dbg !18
  %27 = or disjoint i32 %21, %24, !dbg !18
  %28 = icmp slt i32 %25, 256, !dbg !19
  %29 = icmp slt i32 %26, 256, !dbg !19
  %30 = icmp slt i32 %27, 256, !dbg !19
  %31 = shl i32 %25, 2, !dbg !20
  %32 = shl i32 %26, 2, !dbg !20
  %33 = shl i32 %14, 8, !dbg !21
  %34 = add i32 %31, %33, !dbg !22
  %35 = add i32 %33, %32, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = and i1 %17, %28, !dbg !24
  %41 = and i1 %29, %17, !dbg !24
  %42 = and i1 %18, %30, !dbg !24
  %43 = and i1 %19, %30, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %17) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = fadd float %49, %67, !dbg !27
  %72 = fadd float %50, %68, !dbg !27
  %73 = fadd float %51, %69, !dbg !27
  %74 = fadd float %52, %70, !dbg !27
  %75 = fadd float %58, %67, !dbg !27
  %76 = fadd float %59, %68, !dbg !27
  %77 = fadd float %60, %69, !dbg !27
  %78 = fadd float %61, %70, !dbg !27
  %79 = shl i32 %15, 8, !dbg !28
  %80 = shl i32 %16, 8, !dbg !28
  %81 = add i32 %27, %79, !dbg !29
  %82 = add i32 %27, %80, !dbg !29
  %83 = sext i32 %81 to i64, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !30
  %85 = sext i32 %82 to i64, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !30
  %87 = shl i32 %9, 8, !dbg !31
  %88 = and i32 %87, 768, !dbg !31
  %89 = or disjoint i32 %88, %23, !dbg !31
  %90 = and i32 %10, 508, !dbg !31
  %91 = lshr exact i32 %88, 4, !dbg !31
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !31
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !31
  %94 = bitcast float %71 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !31
  %95 = or disjoint i32 %89, 64, !dbg !31
  %96 = lshr i32 %95, 6, !dbg !31
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !31
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !31
  %99 = bitcast float %72 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !31
  %100 = or disjoint i32 %89, 128, !dbg !31
  %101 = lshr i32 %100, 6, !dbg !31
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !31
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !31
  %104 = bitcast float %73 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !31
  %105 = or disjoint i32 %89, 192, !dbg !31
  %106 = lshr i32 %105, 6, !dbg !31
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !31
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !31
  %109 = bitcast float %74 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !31
  %110 = or disjoint i32 %89, 32, !dbg !31
  %111 = getelementptr float, ptr addrspace(3) %92, i32 %110, !dbg !31
  %112 = bitcast float %75 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !31
  %113 = or disjoint i32 %89, 96, !dbg !31
  %114 = lshr i32 %113, 6, !dbg !31
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !31
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !31
  %117 = bitcast float %76 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !31
  %118 = or disjoint i32 %89, 160, !dbg !31
  %119 = lshr i32 %118, 6, !dbg !31
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !31
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !31
  %122 = bitcast float %77 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !31
  %123 = or disjoint i32 %89, 224, !dbg !31
  %124 = lshr i32 %123, 6, !dbg !31
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !31
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !31
  %127 = bitcast float %78 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %128 = lshr i32 %90, 6, !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !31
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %90, !dbg !31
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !31
  %132 = or disjoint i32 %90, 1, !dbg !31
  %133 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %132, !dbg !31
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !31
  %135 = or disjoint i32 %90, 2, !dbg !31
  %136 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %135, !dbg !31
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !31
  %138 = or disjoint i32 %90, 3, !dbg !31
  %139 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %138, !dbg !31
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !31
  %141 = or disjoint i32 %90, 512, !dbg !31
  %142 = lshr i32 %141, 6, !dbg !31
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !31
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !31
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !31
  %146 = or disjoint i32 %90, 513, !dbg !31
  %147 = lshr i32 %146, 6, !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !31
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !31
  %150 = load i32, ptr addrspace(3) %149, align 4, !dbg !31
  %151 = or disjoint i32 %90, 514, !dbg !31
  %152 = lshr i32 %151, 6, !dbg !31
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !31
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !31
  %156 = or disjoint i32 %90, 515, !dbg !31
  %157 = lshr i32 %156, 6, !dbg !31
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !31
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !31
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %134, i32 %137, i32 %140, ptr addrspace(1) %84, i1 %42) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %150, i32 %155, i32 %160, ptr addrspace(1) %86, i1 %43) #2, !dbg !31
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !32
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !32
  %163 = bitcast float %71 to i32, !dbg !33
  %164 = bitcast float %72 to i32, !dbg !33
  %165 = bitcast float %73 to i32, !dbg !33
  %166 = bitcast float %74 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %164, i32 %165, i32 %166, ptr addrspace(1) %161, i1 %40) #2, !dbg !33
  %167 = bitcast float %75 to i32, !dbg !33
  %168 = bitcast float %76 to i32, !dbg !33
  %169 = bitcast float %77 to i32, !dbg !33
  %170 = bitcast float %78 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %162, i1 %41) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "col7deejnx7fu5vgmco6dew7jx4hjuectlsjqvzm2673yt4jjsmz.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused_convolution_51, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_51, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_51", linkageName: "triton_poi_fused_convolution_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 60, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 53, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
