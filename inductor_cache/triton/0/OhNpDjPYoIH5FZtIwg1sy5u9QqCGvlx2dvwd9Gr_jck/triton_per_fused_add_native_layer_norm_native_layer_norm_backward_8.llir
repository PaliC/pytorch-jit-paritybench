; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 126, !dbg !12
  %17 = shl i32 %10, 7, !dbg !13
  %18 = or disjoint i32 %17, %16, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !15
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %28 = zext nneg i32 %16 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %37 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %38 = insertelement <2 x i32> %37, i32 %23, i64 1, !dbg !16
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !16
  %40 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %27, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %44 = insertelement <2 x i32> %43, i32 %32, i64 1, !dbg !20
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !20
  %46 = fadd <2 x float> %42, %45, !dbg !25
  %47 = fadd <2 x float> %46, %39, !dbg !26
  %48 = extractelement <2 x float> %47, i64 0, !dbg !27
  %49 = extractelement <2 x float> %47, i64 1, !dbg !27
  %50 = fadd float %48, %49, !dbg !27
  %51 = select i1 %11, float %50, float 0.000000e+00, !dbg !27
  %52 = bitcast float %51 to i32, !dbg !32
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = fadd float %51, %54, !dbg !27
  %56 = bitcast float %55 to i32, !dbg !32
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !32
  %58 = bitcast i32 %57 to float, !dbg !32
  %59 = fadd float %55, %58, !dbg !27
  %60 = bitcast float %59 to i32, !dbg !32
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !32
  %62 = bitcast i32 %61 to float, !dbg !32
  %63 = fadd float %59, %62, !dbg !27
  %64 = bitcast float %63 to i32, !dbg !32
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !32
  %66 = bitcast i32 %65 to float, !dbg !32
  %67 = fadd float %63, %66, !dbg !27
  %68 = bitcast float %67 to i32, !dbg !32
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = fadd float %67, %70, !dbg !27
  %72 = icmp eq i32 %13, 0, !dbg !32
  %73 = and i32 %14, 1, !dbg !32
  %74 = zext nneg i32 %73 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i64 %74, !dbg !32
  %76 = bitcast float %71 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %72) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %77 = icmp slt i32 %12, 2, !dbg !32
  %78 = sext i32 %12 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !32
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #5, !dbg !32
  %81 = bitcast i32 %80 to float, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %81, %83, !dbg !27
  %85 = and i32 %12, 1, !dbg !32
  %86 = icmp eq i32 %85, 0, !dbg !32
  %87 = and i1 %77, %86, !dbg !32
  %88 = bitcast float %84 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %88, i1 %87) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %89 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.280000e+02) #5, !dbg !33
  %91 = fsub float %48, %90, !dbg !34
  %92 = fsub float %49, %90, !dbg !34
  %93 = fmul float %91, %91, !dbg !35
  %94 = fmul float %92, %92, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %95 = fadd float %93, %94, !dbg !38
  %96 = select i1 %11, float %95, float 0.000000e+00, !dbg !38
  %97 = bitcast float %96 to i32, !dbg !36
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = fadd float %96, %99, !dbg !38
  %101 = bitcast float %100 to i32, !dbg !36
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = fadd float %100, %103, !dbg !38
  %105 = bitcast float %104 to i32, !dbg !36
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !36
  %107 = bitcast i32 %106 to float, !dbg !36
  %108 = fadd float %104, %107, !dbg !38
  %109 = bitcast float %108 to i32, !dbg !36
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !36
  %111 = bitcast i32 %110 to float, !dbg !36
  %112 = fadd float %108, %111, !dbg !38
  %113 = bitcast float %112 to i32, !dbg !36
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !36
  %115 = bitcast i32 %114 to float, !dbg !36
  %116 = fadd float %112, %115, !dbg !38
  %117 = bitcast float %116 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %117, i1 %72) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #5, !dbg !36
  %119 = bitcast i32 %118 to float, !dbg !36
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = fadd float %119, %121, !dbg !38
  %123 = bitcast float %122 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %123, i1 %87) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %124 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 1.280000e+02) #5, !dbg !39
  %126 = fadd float %125, 0x3EE4F8B580000000, !dbg !40
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %127, 0, !dbg !41
  br i1 %.not.i, label %130, label %128, !dbg !41

128:                                              ; preds = %9
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

130:                                              ; preds = %9
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %128, %130
  %.0.i = phi float [ %129, %128 ], [ %131, %130 ], !dbg !41
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i4 = icmp eq i32 %133, 0, !dbg !41
  br i1 %.not.i4, label %136, label %134, !dbg !41

134:                                              ; preds = %__nv_rsqrtf.exit
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

136:                                              ; preds = %__nv_rsqrtf.exit
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

__nv_rsqrtf.exit6:                                ; preds = %134, %136
  %.0.i5 = phi float [ %135, %134 ], [ %137, %136 ], !dbg !41
  %138 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %139 = bitcast i32 %138 to float, !dbg !24
  %140 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %141 = bitcast i32 %140 to float, !dbg !24
  %142 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %143 = bitcast i32 %142 to float, !dbg !22
  %144 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %145 = bitcast i32 %144 to float, !dbg !22
  %146 = fmul float %91, %.0.i5, !dbg !42
  %147 = fmul float %92, %.0.i5, !dbg !42
  %148 = fmul float %146, %145, !dbg !43
  %149 = fmul float %147, %143, !dbg !43
  %150 = fadd float %148, %141, !dbg !44
  %151 = fadd float %149, %139, !dbg !44
  %152 = fmul float %.0.i, 7.812500e-03, !dbg !45
  %153 = bitcast float %146 to i32, !dbg !46
  %154 = bitcast float %147 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %154, ptr addrspace(1) %24, i1 %11) #5, !dbg !46
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !47
  %156 = bitcast float %150 to i32, !dbg !48
  %157 = bitcast float %151 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 %11) #5, !dbg !48
  %158 = sext i32 %10 to i64, !dbg !49
  %159 = getelementptr float, ptr addrspace(1) %6, i64 %158, !dbg !49
  %urem = and i32 %12, 63, !dbg !50
  %160 = icmp eq i32 %urem, 0, !dbg !50
  %161 = bitcast float %152 to i32, !dbg !50
  %162 = and i1 %160, %11, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %159, i1 %162) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce3wrzyduojkzsph2y7xhues4l3ows4y2u44hhjywi4rb2pnnzga.py", directory: "inductor_cache/e3")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_8, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_8", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 44, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 42, column: 26, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 19, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !37)
!37 = !DILocation(line: 50, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !37)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 28, scope: !7)
!42 = !DILocation(line: 57, column: 20, scope: !7)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 49, scope: !7)
!47 = !DILocation(line: 63, column: 25, scope: !7)
!48 = !DILocation(line: 63, column: 46, scope: !7)
!49 = !DILocation(line: 64, column: 25, scope: !7)
!50 = !DILocation(line: 64, column: 37, scope: !7)
!51 = !DILocation(line: 64, column: 4, scope: !7)
