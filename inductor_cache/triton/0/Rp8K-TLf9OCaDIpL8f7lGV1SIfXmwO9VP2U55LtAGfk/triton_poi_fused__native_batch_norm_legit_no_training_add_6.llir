; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 100352, !dbg !14
  %17 = icmp slt i32 %15, 100352, !dbg !14
  %18 = sdiv i32 %14, 784, !dbg !15
  %19 = sdiv i32 %15, 784, !dbg !15
  %20 = srem i32 %18, 32, !dbg !16
  %21 = srem i32 %19, 32, !dbg !16
  %22 = sext i32 %14 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = sext i32 %15 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !18
  %28 = sext i32 %20 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = sext i32 %21 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #3, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %16) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %16) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %16) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %16) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %17) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %17) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %17) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %17) #3, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !27
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %16) #3, !dbg !28
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %17) #3, !dbg !28
  %82 = fadd float %43, 0x3EE4F8B580000000, !dbg !29
  %83 = fadd float %45, 0x3EE4F8B580000000, !dbg !29
  %84 = fadd float %47, 0x3EE4F8B580000000, !dbg !29
  %85 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %86 = fadd float %51, 0x3EE4F8B580000000, !dbg !29
  %87 = fadd float %53, 0x3EE4F8B580000000, !dbg !29
  %88 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %89 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %90, 0, !dbg !30
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %91, 0, !dbg !30
  br i1 %.not.i, label %97, label %92, !dbg !30

92:                                               ; preds = %8
  br i1 %.not1.i, label %95, label %93, !dbg !30

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

97:                                               ; preds = %8
  br i1 %.not1.i, label %100, label %98, !dbg !30

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %93, %95, %98, %100
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %102, 0, !dbg !30
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %103, 0, !dbg !30
  br i1 %.not.i1, label %109, label %104, !dbg !30

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !30

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !30

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %105, %107, %110, %112
  %.0.i3 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !30
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %114, 0, !dbg !30
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !30
  br i1 %.not.i6, label %121, label %116, !dbg !30

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !30

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !30

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !30
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %126, 0, !dbg !30
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !30
  br i1 %.not.i11, label %133, label %128, !dbg !30

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !30

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %138, 0, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i16, label %145, label %140, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

145:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %141, %143, %146, %148
  %.0.i18 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %150, 0, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i21, label %157, label %152, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %153, %155, %158, %160
  %.0.i23 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !30
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %162, 0, !dbg !30
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %163, 0, !dbg !30
  br i1 %.not.i26, label %169, label %164, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %165, %167, %170, %172
  %.0.i28 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %174, 0, !dbg !30
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %175, 0, !dbg !30
  br i1 %.not.i31, label %181, label %176, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

181:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %184, label %182, !dbg !30

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %177, %179, %182, %184
  %.0.i33 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !30
  %186 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %187 = bitcast i32 %186 to float, !dbg !18
  %188 = bitcast i32 %39 to float, !dbg !20
  %189 = fsub float %187, %188, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %191 = bitcast i32 %190 to float, !dbg !18
  %192 = bitcast i32 %38 to float, !dbg !20
  %193 = fsub float %191, %192, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %195 = bitcast i32 %194 to float, !dbg !18
  %196 = bitcast i32 %37 to float, !dbg !20
  %197 = fsub float %195, %196, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %199 = bitcast i32 %198 to float, !dbg !18
  %200 = bitcast i32 %36 to float, !dbg !20
  %201 = fsub float %199, %200, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %203 = bitcast i32 %202 to float, !dbg !18
  %204 = bitcast i32 %35 to float, !dbg !20
  %205 = fsub float %203, %204, !dbg !31
  %206 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %207 = bitcast i32 %206 to float, !dbg !18
  %208 = bitcast i32 %34 to float, !dbg !20
  %209 = fsub float %207, %208, !dbg !31
  %210 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %211 = bitcast i32 %210 to float, !dbg !18
  %212 = bitcast i32 %33 to float, !dbg !20
  %213 = fsub float %211, %212, !dbg !31
  %214 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %215 = bitcast i32 %214 to float, !dbg !18
  %216 = bitcast i32 %32 to float, !dbg !20
  %217 = fsub float %215, %216, !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !28
  %219 = bitcast i32 %218 to float, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !28
  %221 = bitcast i32 %220 to float, !dbg !28
  %222 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !28
  %223 = bitcast i32 %222 to float, !dbg !28
  %224 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !28
  %225 = bitcast i32 %224 to float, !dbg !28
  %226 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %227 = bitcast i32 %226 to float, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %229 = bitcast i32 %228 to float, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %231 = bitcast i32 %230 to float, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %233 = bitcast i32 %232 to float, !dbg !28
  %234 = bitcast i32 %77 to float, !dbg !26
  %235 = bitcast i32 %76 to float, !dbg !26
  %236 = bitcast i32 %75 to float, !dbg !26
  %237 = bitcast i32 %74 to float, !dbg !26
  %238 = bitcast i32 %73 to float, !dbg !26
  %239 = bitcast i32 %72 to float, !dbg !26
  %240 = bitcast i32 %71 to float, !dbg !26
  %241 = bitcast i32 %70 to float, !dbg !26
  %242 = bitcast i32 %67 to float, !dbg !24
  %243 = bitcast i32 %66 to float, !dbg !24
  %244 = bitcast i32 %65 to float, !dbg !24
  %245 = bitcast i32 %64 to float, !dbg !24
  %246 = bitcast i32 %63 to float, !dbg !24
  %247 = bitcast i32 %62 to float, !dbg !24
  %248 = bitcast i32 %61 to float, !dbg !24
  %249 = bitcast i32 %60 to float, !dbg !24
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %258 = fmul float %217, %250, !dbg !33
  %259 = fmul float %213, %251, !dbg !33
  %260 = fmul float %209, %252, !dbg !33
  %261 = fmul float %205, %253, !dbg !33
  %262 = fmul float %201, %254, !dbg !33
  %263 = fmul float %197, %255, !dbg !33
  %264 = fmul float %193, %256, !dbg !33
  %265 = fmul float %189, %257, !dbg !33
  %266 = fmul float %258, %249, !dbg !34
  %267 = fmul float %259, %248, !dbg !34
  %268 = fmul float %260, %247, !dbg !34
  %269 = fmul float %261, %246, !dbg !34
  %270 = fmul float %262, %245, !dbg !34
  %271 = fmul float %263, %244, !dbg !34
  %272 = fmul float %264, %243, !dbg !34
  %273 = fmul float %265, %242, !dbg !34
  %274 = fadd float %266, %241, !dbg !35
  %275 = fadd float %267, %240, !dbg !35
  %276 = fadd float %268, %239, !dbg !35
  %277 = fadd float %269, %238, !dbg !35
  %278 = fadd float %270, %237, !dbg !35
  %279 = fadd float %271, %236, !dbg !35
  %280 = fadd float %272, %235, !dbg !35
  %281 = fadd float %273, %234, !dbg !35
  %282 = fadd float %274, %233, !dbg !36
  %283 = fadd float %275, %231, !dbg !36
  %284 = fadd float %276, %229, !dbg !36
  %285 = fadd float %277, %227, !dbg !36
  %286 = fadd float %278, %225, !dbg !36
  %287 = fadd float %279, %223, !dbg !36
  %288 = fadd float %280, %221, !dbg !36
  %289 = fadd float %281, %219, !dbg !36
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !37
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !37
  %292 = bitcast float %282 to i32, !dbg !38
  %293 = bitcast float %283 to i32, !dbg !38
  %294 = bitcast float %284 to i32, !dbg !38
  %295 = bitcast float %285 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %290, i1 %16) #3, !dbg !38
  %296 = bitcast float %286 to i32, !dbg !38
  %297 = bitcast float %287 to i32, !dbg !38
  %298 = bitcast float %288 to i32, !dbg !38
  %299 = bitcast float %289 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %291, i1 %17) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cal3iux4bw5jbmqhlmt4ksyqfclytgtqocsy6x5ygyz2sbweizhw.py", directory: "inductor_cache/al")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 26, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 37, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
