; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = lshr i32 %8, 2, !dbg !17
  %20 = and i32 %19, 31, !dbg !17
  %21 = and i32 %9, 28, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !18
  %23 = or disjoint i32 %18, %21, !dbg !18
  %24 = icmp slt i32 %22, 64, !dbg !19
  %25 = icmp slt i32 %23, 64, !dbg !19
  %26 = ashr exact i32 %13, 2, !dbg !20
  %27 = mul i32 %22, 12, !dbg !21
  %28 = mul i32 %26, 768, !dbg !22
  %29 = add i32 %27, %28, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = and i1 %15, %24, !dbg !25
  %33 = and i1 %16, %25, !dbg !25
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #2, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !26
  %39 = bitcast i32 %35 to float, !dbg !26
  %40 = bitcast i32 %36 to float, !dbg !26
  %41 = bitcast i32 %37 to float, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %15) #2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = fadd float %39, %48, !dbg !28
  %53 = fadd float %40, %49, !dbg !28
  %54 = fadd float %41, %50, !dbg !28
  %55 = fadd float %42, %51, !dbg !28
  %56 = shl i32 %14, 6, !dbg !29
  %57 = add i32 %23, %56, !dbg !30
  %58 = sext i32 %57 to i64, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !31
  %60 = shl i32 %8, 7, !dbg !32
  %61 = and i32 %60, 384, !dbg !32
  %62 = or disjoint i32 %61, %20, !dbg !32
  %63 = and i32 %9, 508, !dbg !32
  %64 = lshr exact i32 %61, 3, !dbg !32
  %65 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %64, !dbg !32
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %62, !dbg !32
  %67 = bitcast float %52 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !32
  %68 = or disjoint i32 %62, 32, !dbg !32
  %69 = lshr i32 %68, 5, !dbg !32
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !32
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %68, !dbg !32
  %72 = bitcast float %53 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !32
  %73 = or disjoint i32 %62, 64, !dbg !32
  %74 = lshr i32 %73, 5, !dbg !32
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !32
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !32
  %77 = bitcast float %54 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !32
  %78 = or disjoint i32 %62, 96, !dbg !32
  %79 = lshr i32 %78, 5, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !32
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %78, !dbg !32
  %82 = bitcast float %55 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %83 = lshr i32 %63, 5, !dbg !32
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !32
  %85 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %63, !dbg !32
  %86 = load i32, ptr addrspace(3) %85, align 4, !dbg !32
  %87 = or disjoint i32 %63, 1, !dbg !32
  %88 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %87, !dbg !32
  %89 = load i32, ptr addrspace(3) %88, align 4, !dbg !32
  %90 = or disjoint i32 %63, 2, !dbg !32
  %91 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %90, !dbg !32
  %92 = load i32, ptr addrspace(3) %91, align 4, !dbg !32
  %93 = or disjoint i32 %63, 3, !dbg !32
  %94 = getelementptr inbounds float, ptr addrspace(3) %84, i32 %93, !dbg !32
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %86, i32 %89, i32 %92, i32 %95, ptr addrspace(1) %59, i1 %33) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdn7fqkbkcje6aztrvf6vvm5cohobddtfb66drk4vn6kgzarwp5w.py", directory: "inductor_cache/dn")
!4 = !{ptr @triton_poi_fused_clone_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_mul_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_mul_3", linkageName: "triton_poi_fused_clone_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 60, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 33, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 44, scope: !7)
!33 = !DILocation(line: 37, column: 4, scope: !7)
