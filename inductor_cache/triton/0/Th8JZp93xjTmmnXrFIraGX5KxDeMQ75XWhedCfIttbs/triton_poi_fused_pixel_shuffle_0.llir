; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %20 = icmp slt i32 %19, 2, !dbg !16
  %21 = srem i32 %13, 4, !dbg !17
  %22 = sdiv i32 %13, 32, !dbg !18
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !19
  %24 = shufflevector <2 x i32> %23, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %25 = sdiv <2 x i32> %24, <i32 8, i32 4>, !dbg !19
  %26 = srem <2 x i32> %25, <i32 4, i32 2>, !dbg !20
  %27 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !21
  %28 = insertelement <4 x i32> %27, i32 %22, i64 1, !dbg !21
  %29 = shufflevector <2 x i32> %26, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !21
  %30 = shufflevector <4 x i32> %28, <4 x i32> %29, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !21
  %31 = shl <4 x i32> %30, <i32 4, i32 6, i32 2, i32 5>, !dbg !21
  %32 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %31), !dbg !22
  %op.rdx = add i32 %32, %21, !dbg !23
  %33 = sext i32 %op.rdx to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %20, %16, !dbg !25
  %36 = and i1 %20, %17, !dbg !25
  %37 = and i1 %20, %18, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #3, !dbg !26
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %.idx = shl nuw nsw i32 %10, 3, !dbg !26
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %42 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #3, !dbg !26
  %43 = shl nuw nsw i32 %10, 1, !dbg !26
  %44 = or disjoint i32 %43, 2, !dbg !26
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !26
  %46 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !26
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !26
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !26
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !26
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !26
  %50 = load float, ptr addrspace(3) %49, align 8, !dbg !26
  %51 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !27
  %52 = shufflevector <2 x i32> %51, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %53 = sdiv <2 x i32> %52, <i32 4, i32 32>, !dbg !27
  %54 = srem <2 x i32> %53, <i32 2, i32 4>, !dbg !28
  %55 = shl nsw <2 x i32> %54, <i32 1, i32 2>, !dbg !29
  %56 = extractelement <2 x i32> %55, i64 0, !dbg !30
  %57 = add i32 %56, %19, !dbg !30
  %58 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !27
  %59 = shufflevector <2 x i32> %58, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %60 = sdiv <2 x i32> %59, <i32 4, i32 32>, !dbg !27
  %61 = srem <2 x i32> %60, <i32 2, i32 4>, !dbg !28
  %62 = shl nsw <2 x i32> %61, <i32 1, i32 2>, !dbg !29
  %63 = extractelement <2 x i32> %62, i64 0, !dbg !30
  %64 = add i32 %63, %19, !dbg !30
  %65 = extractelement <2 x i32> %55, i64 1, !dbg !31
  %66 = add i32 %57, %65, !dbg !31
  %67 = extractelement <2 x i32> %62, i64 1, !dbg !31
  %68 = add i32 %64, %67, !dbg !31
  %69 = sext i32 %66 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !32
  %71 = sext i32 %68 to i64, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %36) #3, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %37) #3, !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = fadd float %48, %74, !dbg !34
  %78 = fadd float %50, %76, !dbg !34
  %79 = shl i32 %14, 1, !dbg !35
  %80 = shl i32 %15, 1, !dbg !35
  %81 = add i32 %79, %19, !dbg !36
  %82 = add i32 %80, %19, !dbg !36
  %83 = sext i32 %81 to i64, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !37
  %85 = sext i32 %82 to i64, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !37
  %87 = bitcast float %77 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %84, i1 %36) #3, !dbg !38
  %88 = bitcast float %78 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %86, i1 %37) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjz3j7lrspsebplkxh3syylmm74limbcw5ophyqc3ex4bek6o6t.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_0", linkageName: "triton_poi_fused_pixel_shuffle_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 26, scope: !7)
!21 = !DILocation(line: 35, column: 45, scope: !7)
!22 = !DILocation(line: 35, column: 58, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 74, scope: !7)
!26 = !DILocation(line: 35, column: 66, scope: !7)
!27 = !DILocation(line: 30, column: 21, scope: !7)
!28 = !DILocation(line: 30, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 37, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 42, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 49, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 32, scope: !7)
!36 = !DILocation(line: 38, column: 30, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 43, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
