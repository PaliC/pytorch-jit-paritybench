; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_argmin_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 126, !dbg !12
  %12 = icmp samesign ult i32 %11, 96, !dbg !13
  %13 = mul i32 %5, 384, !dbg !14
  %14 = or disjoint i32 %13, %11, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = and i1 %12, %6, !dbg !17
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !18
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !18
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !18
  %21 = bitcast i32 %19 to float, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = add i32 %14, 96, !dbg !19
  %24 = sext i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !21
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = add i32 %14, 192, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !24
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %37 = bitcast i32 %35 to float, !dbg !24
  %38 = bitcast i32 %36 to float, !dbg !24
  %39 = add i32 %14, 288, !dbg !25
  %40 = sext i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !27
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !27
  %45 = bitcast i32 %43 to float, !dbg !27
  %46 = bitcast i32 %44 to float, !dbg !27
  %47 = fadd float %21, %29, !dbg !28
  %48 = fadd float %22, %30, !dbg !28
  %49 = fadd float %47, %37, !dbg !29
  %50 = fadd float %48, %38, !dbg !29
  %51 = fadd float %49, %45, !dbg !30
  %52 = fadd float %50, %46, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 4.000000e+00) #3, !dbg !31
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 4.000000e+00) #3, !dbg !31
  %55 = select i1 %17, float %53, float 0x7FF0000000000000, !dbg !32
  %56 = select i1 %17, float %54, float 0x7FF0000000000000, !dbg !32
  %57 = fcmp olt float %55, %56, !dbg !33
  %58 = fcmp oeq float %55, %56, !dbg !38
  %59 = fcmp uno float %55, 0.000000e+00, !dbg !39
  %60 = fcmp uno float %56, 0.000000e+00, !dbg !40
  %61 = xor i1 %60, true, !dbg !41
  %62 = and i1 %59, %61, !dbg !42
  %63 = or i1 %57, %62, !dbg !43
  %64 = and i1 %59, %60, !dbg !44
  %65 = or i1 %58, %64, !dbg !45
  %66 = or i1 %63, %65, !dbg !46
  %67 = select i1 %66, float %55, float %56, !dbg !47
  %not. = xor i1 %66, true, !dbg !48
  %68 = zext i1 %not. to i32, !dbg !48
  %69 = or disjoint i32 %11, %68, !dbg !48
  %70 = bitcast float %67 to i32, !dbg !49
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !49
  %72 = bitcast i32 %71 to float, !dbg !49
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !49
  %74 = fcmp olt float %67, %72, !dbg !33
  %75 = fcmp oeq float %67, %72, !dbg !38
  %76 = fcmp uno float %67, 0.000000e+00, !dbg !39
  %77 = fcmp uno float %72, 0.000000e+00, !dbg !40
  %78 = xor i1 %77, true, !dbg !41
  %79 = and i1 %76, %78, !dbg !42
  %80 = or i1 %74, %79, !dbg !43
  %81 = and i1 %77, %76, !dbg !44
  %82 = or i1 %75, %81, !dbg !45
  %83 = icmp slt i32 %69, %73, !dbg !50
  %84 = and i1 %83, %82, !dbg !51
  %85 = or i1 %80, %84, !dbg !46
  %86 = select i1 %85, float %67, float %72, !dbg !47
  %87 = select i1 %85, i32 %69, i32 %73, !dbg !48
  %88 = bitcast float %86 to i32, !dbg !49
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !49
  %90 = bitcast i32 %89 to float, !dbg !49
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !49
  %92 = fcmp olt float %86, %90, !dbg !33
  %93 = fcmp oeq float %86, %90, !dbg !38
  %94 = fcmp uno float %86, 0.000000e+00, !dbg !39
  %95 = fcmp uno float %90, 0.000000e+00, !dbg !40
  %96 = xor i1 %95, true, !dbg !41
  %97 = and i1 %94, %96, !dbg !42
  %98 = or i1 %92, %97, !dbg !43
  %99 = and i1 %95, %94, !dbg !44
  %100 = or i1 %93, %99, !dbg !45
  %101 = icmp slt i32 %87, %91, !dbg !50
  %102 = and i1 %101, %100, !dbg !51
  %103 = or i1 %98, %102, !dbg !46
  %104 = select i1 %103, float %86, float %90, !dbg !47
  %105 = select i1 %103, i32 %87, i32 %91, !dbg !48
  %106 = bitcast float %104 to i32, !dbg !49
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !49
  %108 = bitcast i32 %107 to float, !dbg !49
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !49
  %110 = fcmp olt float %104, %108, !dbg !33
  %111 = fcmp oeq float %104, %108, !dbg !38
  %112 = fcmp uno float %104, 0.000000e+00, !dbg !39
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !40
  %114 = xor i1 %113, true, !dbg !41
  %115 = and i1 %112, %114, !dbg !42
  %116 = or i1 %110, %115, !dbg !43
  %117 = and i1 %113, %112, !dbg !44
  %118 = or i1 %111, %117, !dbg !45
  %119 = icmp slt i32 %105, %109, !dbg !50
  %120 = and i1 %119, %118, !dbg !51
  %121 = or i1 %116, %120, !dbg !46
  %122 = select i1 %121, float %104, float %108, !dbg !47
  %123 = select i1 %121, i32 %105, i32 %109, !dbg !48
  %124 = bitcast float %122 to i32, !dbg !49
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !49
  %126 = bitcast i32 %125 to float, !dbg !49
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !49
  %128 = fcmp olt float %122, %126, !dbg !33
  %129 = fcmp oeq float %122, %126, !dbg !38
  %130 = fcmp uno float %122, 0.000000e+00, !dbg !39
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !40
  %132 = xor i1 %131, true, !dbg !41
  %133 = and i1 %130, %132, !dbg !42
  %134 = or i1 %128, %133, !dbg !43
  %135 = and i1 %131, %130, !dbg !44
  %136 = or i1 %129, %135, !dbg !45
  %137 = icmp slt i32 %123, %127, !dbg !50
  %138 = and i1 %137, %136, !dbg !51
  %139 = or i1 %134, %138, !dbg !46
  %140 = select i1 %139, float %122, float %126, !dbg !47
  %141 = select i1 %139, i32 %123, i32 %127, !dbg !48
  %142 = bitcast float %140 to i32, !dbg !49
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !49
  %144 = bitcast i32 %143 to float, !dbg !49
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !49
  %146 = fcmp olt float %140, %144, !dbg !33
  %147 = fcmp oeq float %140, %144, !dbg !38
  %148 = fcmp uno float %140, 0.000000e+00, !dbg !39
  %149 = fcmp uno float %144, 0.000000e+00, !dbg !40
  %150 = xor i1 %149, true, !dbg !41
  %151 = and i1 %148, %150, !dbg !42
  %152 = or i1 %146, %151, !dbg !43
  %153 = and i1 %149, %148, !dbg !44
  %154 = or i1 %147, %153, !dbg !45
  %155 = icmp slt i32 %141, %145, !dbg !50
  %156 = and i1 %155, %154, !dbg !51
  %157 = or i1 %152, %156, !dbg !46
  %158 = select i1 %157, i32 %141, i32 %145, !dbg !48
  %159 = icmp eq i32 %8, 0, !dbg !49
  %160 = and i32 %9, 1, !dbg !49
  %161 = zext nneg i32 %160 to i64, !dbg !49
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %161, !dbg !49
  %163 = select i1 %157, i32 %142, i32 %143, !dbg !47
  %164 = insertelement <1 x i32> poison, i32 %163, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %164, i1 %159) #3, !dbg !49
  %165 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %161, !dbg !49
  %166 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 %159) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %167 = icmp slt i32 %7, 2, !dbg !49
  %168 = sext i32 %7 to i64, !dbg !49
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i64 %168, !dbg !49
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %169, i1 %167) #3, !dbg !49
  %171 = bitcast i32 %170 to float, !dbg !49
  %172 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %168, !dbg !49
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %167) #3, !dbg !49
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !49
  %175 = bitcast i32 %174 to float, !dbg !49
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !49
  %177 = fcmp olt float %171, %175, !dbg !33
  %178 = fcmp oeq float %171, %175, !dbg !38
  %179 = fcmp uno float %171, 0.000000e+00, !dbg !39
  %180 = fcmp uno float %175, 0.000000e+00, !dbg !40
  %181 = xor i1 %180, true, !dbg !41
  %182 = and i1 %179, %181, !dbg !42
  %183 = or i1 %177, %182, !dbg !43
  %184 = and i1 %179, %180, !dbg !44
  %185 = or i1 %178, %184, !dbg !45
  %186 = icmp slt i32 %173, %176, !dbg !50
  %187 = and i1 %186, %185, !dbg !51
  %188 = or i1 %183, %187, !dbg !46
  %189 = select i1 %188, i32 %173, i32 %176, !dbg !48
  %190 = and i32 %7, 1, !dbg !49
  %191 = icmp eq i32 %190, 0, !dbg !49
  %192 = and i1 %167, %191, !dbg !49
  %193 = select i1 %188, i32 %170, i32 %174, !dbg !47
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %194, i1 %192) #3, !dbg !49
  %195 = insertelement <1 x i32> poison, i32 %189, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %195, i1 %192) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %196 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), align 8, !dbg !49
  %197 = sext i32 %5 to i64, !dbg !52
  %198 = getelementptr i64, ptr addrspace(1) %1, i64 %197, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %199 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %199, i1 true) #3, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %199, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %200 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %201 = sext i32 %200 to i64, !dbg !53
  %urem = and i32 %7, 63, !dbg !53
  %202 = icmp eq i32 %urem, 0, !dbg !53
  %203 = and i1 %202, %6, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %201, ptr addrspace(1) %198, i1 %203) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjlu7hfux5orinwcir7yarxfqm7cewgfo4hywum3lofjidy5csg4.py", directory: "inductor_cache/jl")
!4 = !{ptr @triton_per_fused_argmin_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_argmin_mean_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_argmin_mean_1", linkageName: "triton_per_fused_argmin_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 33, column: 41, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 50, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 50, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 42, scope: !7)
!33 = !DILocation(line: 136, column: 21, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 43, column: 71, scope: !7)
!38 = !DILocation(line: 137, column: 23, scope: !34, inlinedAt: !37)
!39 = !DILocation(line: 139, column: 29, scope: !34, inlinedAt: !37)
!40 = !DILocation(line: 140, column: 29, scope: !34, inlinedAt: !37)
!41 = !DILocation(line: 141, column: 32, scope: !34, inlinedAt: !37)
!42 = !DILocation(line: 141, column: 28, scope: !34, inlinedAt: !37)
!43 = !DILocation(line: 141, column: 16, scope: !34, inlinedAt: !37)
!44 = !DILocation(line: 143, column: 29, scope: !34, inlinedAt: !37)
!45 = !DILocation(line: 143, column: 17, scope: !34, inlinedAt: !37)
!46 = !DILocation(line: 146, column: 12, scope: !34, inlinedAt: !37)
!47 = !DILocation(line: 147, column: 35, scope: !34, inlinedAt: !37)
!48 = !DILocation(line: 147, column: 69, scope: !34, inlinedAt: !37)
!49 = !DILocation(line: 168, column: 42, scope: !36, inlinedAt: !37)
!50 = !DILocation(line: 146, column: 31, scope: !34, inlinedAt: !37)
!51 = !DILocation(line: 146, column: 21, scope: !34, inlinedAt: !37)
!52 = !DILocation(line: 45, column: 25, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 4, scope: !7)
