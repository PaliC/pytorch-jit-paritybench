; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_17(ptr addrspace(1) nocapture readnone %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 60, !dbg !14
  %16 = srem i32 %14, 60, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 3600, !dbg !15
  %.frozen1 = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen1, 3600, !dbg !15
  %19 = mul i32 %17, 3600, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = mul i32 %18, 3600, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %20, !dbg !16
  %21 = sext i32 %17 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %23 = sext i32 %18 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !18
  %32 = bitcast i32 %31 to float, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !18
  %38 = bitcast i32 %37 to float, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !18
  %40 = bitcast i32 %39 to float, !dbg !18
  %41 = sext i32 %15 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !19
  %43 = sext i32 %16 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !20
  %59 = bitcast i32 %55 to float, !dbg !20
  %60 = bitcast i32 %56 to float, !dbg !20
  %61 = bitcast i32 %57 to float, !dbg !20
  %62 = bitcast i32 %58 to float, !dbg !20
  %63 = fsub float %26, %26, !dbg !21
  %64 = fsub float %28, %28, !dbg !21
  %65 = fsub float %30, %30, !dbg !21
  %66 = fsub float %32, %32, !dbg !21
  %67 = fsub float %34, %34, !dbg !21
  %68 = fsub float %36, %36, !dbg !21
  %69 = fsub float %38, %38, !dbg !21
  %70 = fsub float %40, %40, !dbg !21
  %71 = fmul float %63, %50, !dbg !22
  %72 = fmul float %64, %51, !dbg !22
  %73 = fmul float %65, %52, !dbg !22
  %74 = fmul float %66, %53, !dbg !22
  %75 = fmul float %67, %59, !dbg !22
  %76 = fmul float %68, %60, !dbg !22
  %77 = fmul float %69, %61, !dbg !22
  %78 = fmul float %70, %62, !dbg !22
  %79 = fadd float %71, %26, !dbg !23
  %80 = fadd float %72, %28, !dbg !23
  %81 = fadd float %73, %30, !dbg !23
  %82 = fadd float %74, %32, !dbg !23
  %83 = fadd float %75, %34, !dbg !23
  %84 = fadd float %76, %36, !dbg !23
  %85 = fadd float %77, %38, !dbg !23
  %86 = fadd float %78, %40, !dbg !23
  %87 = mul i32 %17, 3616, !dbg !24
  %88 = mul i32 %18, 3616, !dbg !24
  %89 = add i32 %87, %.decomposed, !dbg !25
  %90 = add i32 %88, %.decomposed2, !dbg !25
  %91 = sext i32 %89 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !26
  %93 = sext i32 %90 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !26
  %95 = bitcast float %79 to i32, !dbg !27
  %96 = bitcast float %80 to i32, !dbg !27
  %97 = bitcast float %81 to i32, !dbg !27
  %98 = bitcast float %82 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %92, i1 true) #1, !dbg !27
  %99 = bitcast float %83 to i32, !dbg !27
  %100 = bitcast float %84 to i32, !dbg !27
  %101 = bitcast float %85 to i32, !dbg !27
  %102 = bitcast float %86 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %94, i1 true) #1, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7l2omnsqia77zp5lanrgw5feqgdjzcasjav47yuxl4vi7sw2xsh.py", directory: "inductor_cache/7l")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_17", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 31, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 43, column: 19, scope: !7)
!22 = !DILocation(line: 44, column: 20, scope: !7)
!23 = !DILocation(line: 45, column: 19, scope: !7)
!24 = !DILocation(line: 46, column: 35, scope: !7)
!25 = !DILocation(line: 46, column: 30, scope: !7)
!26 = !DILocation(line: 46, column: 25, scope: !7)
!27 = !DILocation(line: 46, column: 47, scope: !7)
!28 = !DILocation(line: 46, column: 4, scope: !7)
