; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 3, !dbg !14
  %.frozen10 = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen10, 3, !dbg !14
  %13 = srem i32 %11, 3, !dbg !15
  %14 = srem i32 %12, 3, !dbg !15
  %15 = mul i32 %11, 3, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = mul i32 %12, 3, !dbg !16
  %.decomposed11 = sub i32 %.frozen10, %16, !dbg !16
  %17 = sdiv i32 %9, 9, !dbg !17
  %18 = sdiv i32 %10, 9, !dbg !17
  %.tr = trunc nsw i32 %13 to i8, !dbg !18
  %.lhs.trunc = shl nsw i8 %.tr, 2, !dbg !18
  %19 = sdiv i8 %.lhs.trunc, 3, !dbg !18
  %.sext = sext i8 %19 to i32, !dbg !18
  %.tr7 = trunc nsw i32 %14 to i8, !dbg !18
  %.lhs.trunc1 = shl nsw i8 %.tr7, 2, !dbg !18
  %20 = sdiv i8 %.lhs.trunc1, 3, !dbg !18
  %.sext2 = sext i8 %20 to i32, !dbg !18
  %.tr8 = trunc nsw i32 %.decomposed to i8, !dbg !19
  %.lhs.trunc3 = shl nsw i8 %.tr8, 2, !dbg !19
  %21 = sdiv i8 %.lhs.trunc3, 3, !dbg !19
  %.sext4 = sext i8 %21 to i32, !dbg !19
  %.tr9 = trunc nsw i32 %.decomposed11 to i8, !dbg !19
  %.lhs.trunc5 = shl nsw i8 %.tr9, 2, !dbg !19
  %22 = sdiv i8 %.lhs.trunc5, 3, !dbg !19
  %.sext6 = sext i8 %22 to i32, !dbg !19
  %23 = shl nsw i32 %.sext, 2, !dbg !20
  %24 = shl nsw i32 %.sext2, 2, !dbg !20
  %25 = shl i32 %17, 4, !dbg !21
  %26 = shl i32 %18, 4, !dbg !21
  %27 = add i32 %25, %.sext4, !dbg !22
  %28 = add i32 %27, %23, !dbg !23
  %29 = add i32 %26, %.sext6, !dbg !22
  %30 = add i32 %29, %24, !dbg !23
  %31 = sext i32 %28 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #1, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true) #1, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = add i32 %27, 1, !dbg !26
  %40 = add i32 %39, %23, !dbg !27
  %41 = add i32 %29, 1, !dbg !26
  %42 = add i32 %41, %24, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = sext i32 %42 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true) #1, !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true) #1, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = fadd float %36, %48, !dbg !30
  %52 = fadd float %38, %50, !dbg !30
  %53 = add i32 %27, 4, !dbg !31
  %54 = add i32 %53, %23, !dbg !32
  %55 = add i32 %29, 4, !dbg !31
  %56 = add i32 %55, %24, !dbg !32
  %57 = sext i32 %54 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !33
  %59 = sext i32 %56 to i64, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true) #1, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true) #1, !dbg !34
  %64 = bitcast i32 %63 to float, !dbg !34
  %65 = fadd float %51, %62, !dbg !35
  %66 = fadd float %52, %64, !dbg !35
  %67 = add i32 %27, 5, !dbg !36
  %68 = add i32 %67, %23, !dbg !37
  %69 = add i32 %29, 5, !dbg !36
  %70 = add i32 %69, %24, !dbg !37
  %71 = sext i32 %68 to i64, !dbg !38
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !38
  %73 = sext i32 %70 to i64, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 true, i32 0, i1 true) #1, !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 true, i32 0, i1 true) #1, !dbg !39
  %78 = bitcast i32 %77 to float, !dbg !39
  %79 = fadd float %65, %76, !dbg !40
  %80 = fadd float %66, %78, !dbg !40
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 4.000000e+00) #1, !dbg !41
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #1, !dbg !41
  %83 = sext i32 %9 to i64, !dbg !42
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !42
  %85 = bitcast float %81 to i32, !dbg !43
  %86 = bitcast float %82 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccjauqgypbzq4gpo3ovyyru7gduk35sodlesufqmqfueltefdlyk.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_11", linkageName: "triton_poi_fused__adaptive_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 21, scope: !7)
!20 = !DILocation(line: 35, column: 33, scope: !7)
!21 = !DILocation(line: 35, column: 51, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 57, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 72, scope: !7)
!26 = !DILocation(line: 39, column: 53, scope: !7)
!27 = !DILocation(line: 39, column: 62, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 77, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 44, column: 53, scope: !7)
!32 = !DILocation(line: 44, column: 62, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 77, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 53, scope: !7)
!37 = !DILocation(line: 47, column: 62, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 77, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 20, scope: !7)
!42 = !DILocation(line: 65, column: 25, scope: !7)
!43 = !DILocation(line: 65, column: 37, scope: !7)
!44 = !DILocation(line: 65, column: 4, scope: !7)
