; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = sdiv i32 %20, 1024, !dbg !14
  %23 = sdiv i32 %21, 1024, !dbg !14
  %24 = srem i32 %22, 64, !dbg !15
  %25 = srem i32 %23, 64, !dbg !15
  %26 = sext i32 %20 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = sext i32 %21 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !17
  %32 = sext i32 %24 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !18
  %34 = sext i32 %25 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %85 = bitcast i32 %84 to float, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !33
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !33
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !34
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !34
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !35
  %121 = bitcast i32 %120 to float, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !35
  %127 = bitcast i32 %126 to float, !dbg !35
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !35
  %129 = bitcast i32 %128 to float, !dbg !35
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !35
  %131 = bitcast i32 %130 to float, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !35
  %133 = bitcast i32 %132 to float, !dbg !35
  %134 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !36
  %135 = getelementptr float, ptr addrspace(1) %10, i64 %34, !dbg !36
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !37
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !37
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !37
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !38
  %145 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !38
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !39
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !39
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !39
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !39
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !39
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !39
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !39
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #3, !dbg !39
  %154 = fadd float %71, 0x3EE4F8B580000000, !dbg !40
  %155 = fadd float %73, 0x3EE4F8B580000000, !dbg !40
  %156 = fadd float %75, 0x3EE4F8B580000000, !dbg !40
  %157 = fadd float %77, 0x3EE4F8B580000000, !dbg !40
  %158 = fadd float %79, 0x3EE4F8B580000000, !dbg !40
  %159 = fadd float %81, 0x3EE4F8B580000000, !dbg !40
  %160 = fadd float %83, 0x3EE4F8B580000000, !dbg !40
  %161 = fadd float %85, 0x3EE4F8B580000000, !dbg !40
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %162, 0, !dbg !41
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %163, 0, !dbg !41
  br i1 %.not.i, label %169, label %164, !dbg !41

164:                                              ; preds = %14
  br i1 %.not1.i, label %167, label %165, !dbg !41

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

169:                                              ; preds = %14
  br i1 %.not1.i, label %172, label %170, !dbg !41

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %165, %167, %170, %172
  %.0.i = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !41
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %174, 0, !dbg !41
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %175, 0, !dbg !41
  br i1 %.not.i1, label %181, label %176, !dbg !41

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %179, label %177, !dbg !41

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

181:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %184, label %182, !dbg !41

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %177, %179, %182, %184
  %.0.i3 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !41
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %186, 0, !dbg !41
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %187, 0, !dbg !41
  br i1 %.not.i6, label %193, label %188, !dbg !41

188:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %191, label %189, !dbg !41

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

193:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %196, label %194, !dbg !41

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %189, %191, %194, %196
  %.0.i8 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !41
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %198, 0, !dbg !41
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %199, 0, !dbg !41
  br i1 %.not.i11, label %205, label %200, !dbg !41

200:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %203, label %201, !dbg !41

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

205:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %208, label %206, !dbg !41

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %201, %203, %206, %208
  %.0.i13 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !41
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i16 = icmp eq i32 %210, 0, !dbg !41
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i19 = icmp eq i32 %211, 0, !dbg !41
  br i1 %.not.i16, label %217, label %212, !dbg !41

212:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %215, label %213, !dbg !41

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

217:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %220, label %218, !dbg !41

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

__nv_sqrtf.exit20:                                ; preds = %213, %215, %218, %220
  %.0.i18 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !41
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i21 = icmp eq i32 %222, 0, !dbg !41
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i24 = icmp eq i32 %223, 0, !dbg !41
  br i1 %.not.i21, label %229, label %224, !dbg !41

224:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %227, label %225, !dbg !41

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

229:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %232, label %230, !dbg !41

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

__nv_sqrtf.exit25:                                ; preds = %225, %227, %230, %232
  %.0.i23 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !41
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i26 = icmp eq i32 %234, 0, !dbg !41
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i29 = icmp eq i32 %235, 0, !dbg !41
  br i1 %.not.i26, label %241, label %236, !dbg !41

236:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %239, label %237, !dbg !41

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

241:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %244, label %242, !dbg !41

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

__nv_sqrtf.exit30:                                ; preds = %237, %239, %242, %244
  %.0.i28 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !41
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i31 = icmp eq i32 %246, 0, !dbg !41
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i34 = icmp eq i32 %247, 0, !dbg !41
  br i1 %.not.i31, label %253, label %248, !dbg !41

248:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %251, label %249, !dbg !41

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

253:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %256, label %254, !dbg !41

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

__nv_sqrtf.exit35:                                ; preds = %249, %251, %254, %256
  %.0.i33 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !41
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !42
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !42
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !42
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !42
  %266 = fadd float %119, 0x3EE4F8B580000000, !dbg !43
  %267 = fadd float %121, 0x3EE4F8B580000000, !dbg !43
  %268 = fadd float %123, 0x3EE4F8B580000000, !dbg !43
  %269 = fadd float %125, 0x3EE4F8B580000000, !dbg !43
  %270 = fadd float %127, 0x3EE4F8B580000000, !dbg !43
  %271 = fadd float %129, 0x3EE4F8B580000000, !dbg !43
  %272 = fadd float %131, 0x3EE4F8B580000000, !dbg !43
  %273 = fadd float %133, 0x3EE4F8B580000000, !dbg !43
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i36 = icmp eq i32 %274, 0, !dbg !44
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i39 = icmp eq i32 %275, 0, !dbg !44
  br i1 %.not.i36, label %281, label %276, !dbg !44

276:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %279, label %277, !dbg !44

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %266) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %266) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

281:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %284, label %282, !dbg !44

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %266) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %266) #3, !dbg !44
  br label %__nv_sqrtf.exit40, !dbg !44

__nv_sqrtf.exit40:                                ; preds = %277, %279, %282, %284
  %.0.i38 = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !44
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i41 = icmp eq i32 %286, 0, !dbg !44
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i44 = icmp eq i32 %287, 0, !dbg !44
  br i1 %.not.i41, label %293, label %288, !dbg !44

288:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %291, label %289, !dbg !44

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %267) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %267) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

293:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %296, label %294, !dbg !44

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.f(float %267) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.f(float %267) #3, !dbg !44
  br label %__nv_sqrtf.exit45, !dbg !44

__nv_sqrtf.exit45:                                ; preds = %289, %291, %294, %296
  %.0.i43 = phi float [ %290, %289 ], [ %292, %291 ], [ %295, %294 ], [ %297, %296 ], !dbg !44
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i46 = icmp eq i32 %298, 0, !dbg !44
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i49 = icmp eq i32 %299, 0, !dbg !44
  br i1 %.not.i46, label %305, label %300, !dbg !44

300:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %303, label %301, !dbg !44

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

305:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %308, label %306, !dbg !44

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #3, !dbg !44
  br label %__nv_sqrtf.exit50, !dbg !44

__nv_sqrtf.exit50:                                ; preds = %301, %303, %306, %308
  %.0.i48 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !44
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i51 = icmp eq i32 %310, 0, !dbg !44
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i54 = icmp eq i32 %311, 0, !dbg !44
  br i1 %.not.i51, label %317, label %312, !dbg !44

312:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %315, label %313, !dbg !44

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

317:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %320, label %318, !dbg !44

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #3, !dbg !44
  br label %__nv_sqrtf.exit55, !dbg !44

__nv_sqrtf.exit55:                                ; preds = %313, %315, %318, %320
  %.0.i53 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !44
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i56 = icmp eq i32 %322, 0, !dbg !44
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i59 = icmp eq i32 %323, 0, !dbg !44
  br i1 %.not.i56, label %329, label %324, !dbg !44

324:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %327, label %325, !dbg !44

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

329:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %332, label %330, !dbg !44

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #3, !dbg !44
  br label %__nv_sqrtf.exit60, !dbg !44

__nv_sqrtf.exit60:                                ; preds = %325, %327, %330, %332
  %.0.i58 = phi float [ %326, %325 ], [ %328, %327 ], [ %331, %330 ], [ %333, %332 ], !dbg !44
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i61 = icmp eq i32 %334, 0, !dbg !44
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i64 = icmp eq i32 %335, 0, !dbg !44
  br i1 %.not.i61, label %341, label %336, !dbg !44

336:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %339, label %337, !dbg !44

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

341:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %344, label %342, !dbg !44

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #3, !dbg !44
  br label %__nv_sqrtf.exit65, !dbg !44

__nv_sqrtf.exit65:                                ; preds = %337, %339, %342, %344
  %.0.i63 = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !44
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i66 = icmp eq i32 %346, 0, !dbg !44
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i69 = icmp eq i32 %347, 0, !dbg !44
  br i1 %.not.i66, label %353, label %348, !dbg !44

348:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %351, label %349, !dbg !44

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

353:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %356, label %354, !dbg !44

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.f(float %272) #3, !dbg !44
  br label %__nv_sqrtf.exit70, !dbg !44

__nv_sqrtf.exit70:                                ; preds = %349, %351, %354, %356
  %.0.i68 = phi float [ %350, %349 ], [ %352, %351 ], [ %355, %354 ], [ %357, %356 ], !dbg !44
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i71 = icmp eq i32 %358, 0, !dbg !44
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i74 = icmp eq i32 %359, 0, !dbg !44
  br i1 %.not.i71, label %365, label %360, !dbg !44

360:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %363, label %361, !dbg !44

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

365:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %368, label %366, !dbg !44

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #3, !dbg !44
  br label %__nv_sqrtf.exit75, !dbg !44

__nv_sqrtf.exit75:                                ; preds = %361, %363, %366, %368
  %.0.i73 = phi float [ %362, %361 ], [ %364, %363 ], [ %367, %366 ], [ %369, %368 ], !dbg !44
  %370 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %371 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !23
  %372 = insertelement <2 x i32> %371, i32 %43, i64 1, !dbg !23
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !23
  %374 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !25
  %375 = insertelement <2 x i32> %374, i32 %115, i64 1, !dbg !25
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !25
  %377 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %378 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !23
  %379 = insertelement <2 x i32> %378, i32 %42, i64 1, !dbg !23
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !23
  %381 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !25
  %382 = insertelement <2 x i32> %381, i32 %114, i64 1, !dbg !25
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !25
  %384 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %385 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !23
  %386 = insertelement <2 x i32> %385, i32 %41, i64 1, !dbg !23
  %387 = bitcast <2 x i32> %386 to <2 x float>, !dbg !23
  %388 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !25
  %389 = insertelement <2 x i32> %388, i32 %113, i64 1, !dbg !25
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !25
  %391 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %392 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !23
  %393 = insertelement <2 x i32> %392, i32 %40, i64 1, !dbg !23
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !23
  %395 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !25
  %396 = insertelement <2 x i32> %395, i32 %112, i64 1, !dbg !25
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !25
  %398 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %399 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !23
  %400 = insertelement <2 x i32> %399, i32 %39, i64 1, !dbg !23
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !23
  %402 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !25
  %403 = insertelement <2 x i32> %402, i32 %111, i64 1, !dbg !25
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !25
  %405 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %406 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !23
  %407 = insertelement <2 x i32> %406, i32 %38, i64 1, !dbg !23
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !23
  %409 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !25
  %410 = insertelement <2 x i32> %409, i32 %110, i64 1, !dbg !25
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !25
  %412 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %413 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !23
  %414 = insertelement <2 x i32> %413, i32 %37, i64 1, !dbg !23
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !23
  %416 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !25
  %417 = insertelement <2 x i32> %416, i32 %109, i64 1, !dbg !25
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !25
  %419 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %420 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !23
  %421 = insertelement <2 x i32> %420, i32 %36, i64 1, !dbg !23
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !23
  %423 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !25
  %424 = insertelement <2 x i32> %423, i32 %108, i64 1, !dbg !25
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !25
  %426 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !21
  %427 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !29
  %428 = insertelement <2 x i32> %427, i32 %143, i64 1, !dbg !29
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !29
  %430 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !31
  %431 = insertelement <2 x i32> %430, i32 %153, i64 1, !dbg !31
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !31
  %433 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !21
  %434 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !29
  %435 = insertelement <2 x i32> %434, i32 %142, i64 1, !dbg !29
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !29
  %437 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !31
  %438 = insertelement <2 x i32> %437, i32 %152, i64 1, !dbg !31
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !31
  %440 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !21
  %441 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !29
  %442 = insertelement <2 x i32> %441, i32 %141, i64 1, !dbg !29
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !29
  %444 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !31
  %445 = insertelement <2 x i32> %444, i32 %151, i64 1, !dbg !31
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !31
  %447 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !21
  %448 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !29
  %449 = insertelement <2 x i32> %448, i32 %140, i64 1, !dbg !29
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !29
  %451 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !31
  %452 = insertelement <2 x i32> %451, i32 %150, i64 1, !dbg !31
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !31
  %454 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %455 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !29
  %456 = insertelement <2 x i32> %455, i32 %139, i64 1, !dbg !29
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !29
  %458 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !31
  %459 = insertelement <2 x i32> %458, i32 %149, i64 1, !dbg !31
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !31
  %461 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %462 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !29
  %463 = insertelement <2 x i32> %462, i32 %138, i64 1, !dbg !29
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !29
  %465 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !31
  %466 = insertelement <2 x i32> %465, i32 %148, i64 1, !dbg !31
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !31
  %468 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %469 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !29
  %470 = insertelement <2 x i32> %469, i32 %137, i64 1, !dbg !29
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !29
  %472 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !31
  %473 = insertelement <2 x i32> %472, i32 %147, i64 1, !dbg !31
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !31
  %475 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %476 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !29
  %477 = insertelement <2 x i32> %476, i32 %136, i64 1, !dbg !29
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !29
  %479 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !31
  %480 = insertelement <2 x i32> %479, i32 %146, i64 1, !dbg !31
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !31
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !45
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !45
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !45
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !45
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !45
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !45
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !45
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !45
  %490 = insertelement <2 x i32> poison, i32 %475, i64 0, !dbg !21
  %491 = insertelement <2 x i32> %490, i32 %419, i64 1, !dbg !21
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !21
  %493 = fadd <2 x float> %492, %422, !dbg !46
  %494 = fsub <2 x float> %493, %425, !dbg !47
  %495 = insertelement <2 x float> poison, float %258, i64 0, !dbg !48
  %496 = insertelement <2 x float> %495, float %482, i64 1, !dbg !48
  %497 = fmul <2 x float> %494, %496, !dbg !48
  %498 = fmul <2 x float> %497, %478, !dbg !49
  %499 = fadd <2 x float> %498, %481, !dbg !50
  %500 = fcmp olt <2 x float> %499, zeroinitializer, !dbg !51
  %501 = select <2 x i1> %500, <2 x float> zeroinitializer, <2 x float> %499, !dbg !55
  %502 = insertelement <2 x i32> poison, i32 %468, i64 0, !dbg !21
  %503 = insertelement <2 x i32> %502, i32 %412, i64 1, !dbg !21
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !21
  %505 = fadd <2 x float> %504, %415, !dbg !46
  %506 = fsub <2 x float> %505, %418, !dbg !47
  %507 = insertelement <2 x float> poison, float %259, i64 0, !dbg !48
  %508 = insertelement <2 x float> %507, float %483, i64 1, !dbg !48
  %509 = fmul <2 x float> %506, %508, !dbg !48
  %510 = fmul <2 x float> %509, %471, !dbg !49
  %511 = fadd <2 x float> %510, %474, !dbg !50
  %512 = fcmp olt <2 x float> %511, zeroinitializer, !dbg !51
  %513 = select <2 x i1> %512, <2 x float> zeroinitializer, <2 x float> %511, !dbg !55
  %514 = insertelement <2 x i32> poison, i32 %461, i64 0, !dbg !21
  %515 = insertelement <2 x i32> %514, i32 %405, i64 1, !dbg !21
  %516 = bitcast <2 x i32> %515 to <2 x float>, !dbg !21
  %517 = fadd <2 x float> %516, %408, !dbg !46
  %518 = fsub <2 x float> %517, %411, !dbg !47
  %519 = insertelement <2 x float> poison, float %260, i64 0, !dbg !48
  %520 = insertelement <2 x float> %519, float %484, i64 1, !dbg !48
  %521 = fmul <2 x float> %518, %520, !dbg !48
  %522 = fmul <2 x float> %521, %464, !dbg !49
  %523 = fadd <2 x float> %522, %467, !dbg !50
  %524 = fcmp olt <2 x float> %523, zeroinitializer, !dbg !51
  %525 = select <2 x i1> %524, <2 x float> zeroinitializer, <2 x float> %523, !dbg !55
  %526 = insertelement <2 x i32> poison, i32 %454, i64 0, !dbg !21
  %527 = insertelement <2 x i32> %526, i32 %398, i64 1, !dbg !21
  %528 = bitcast <2 x i32> %527 to <2 x float>, !dbg !21
  %529 = fadd <2 x float> %528, %401, !dbg !46
  %530 = fsub <2 x float> %529, %404, !dbg !47
  %531 = insertelement <2 x float> poison, float %261, i64 0, !dbg !48
  %532 = insertelement <2 x float> %531, float %485, i64 1, !dbg !48
  %533 = fmul <2 x float> %530, %532, !dbg !48
  %534 = fmul <2 x float> %533, %457, !dbg !49
  %535 = fadd <2 x float> %534, %460, !dbg !50
  %536 = fcmp olt <2 x float> %535, zeroinitializer, !dbg !51
  %537 = select <2 x i1> %536, <2 x float> zeroinitializer, <2 x float> %535, !dbg !55
  %538 = insertelement <2 x i32> poison, i32 %447, i64 0, !dbg !21
  %539 = insertelement <2 x i32> %538, i32 %391, i64 1, !dbg !21
  %540 = bitcast <2 x i32> %539 to <2 x float>, !dbg !21
  %541 = fadd <2 x float> %540, %394, !dbg !46
  %542 = fsub <2 x float> %541, %397, !dbg !47
  %543 = insertelement <2 x float> poison, float %262, i64 0, !dbg !48
  %544 = insertelement <2 x float> %543, float %486, i64 1, !dbg !48
  %545 = fmul <2 x float> %542, %544, !dbg !48
  %546 = fmul <2 x float> %545, %450, !dbg !49
  %547 = fadd <2 x float> %546, %453, !dbg !50
  %548 = fcmp olt <2 x float> %547, zeroinitializer, !dbg !51
  %549 = select <2 x i1> %548, <2 x float> zeroinitializer, <2 x float> %547, !dbg !55
  %550 = insertelement <2 x i32> poison, i32 %440, i64 0, !dbg !21
  %551 = insertelement <2 x i32> %550, i32 %384, i64 1, !dbg !21
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !21
  %553 = fadd <2 x float> %552, %387, !dbg !46
  %554 = fsub <2 x float> %553, %390, !dbg !47
  %555 = insertelement <2 x float> poison, float %263, i64 0, !dbg !48
  %556 = insertelement <2 x float> %555, float %487, i64 1, !dbg !48
  %557 = fmul <2 x float> %554, %556, !dbg !48
  %558 = fmul <2 x float> %557, %443, !dbg !49
  %559 = fadd <2 x float> %558, %446, !dbg !50
  %560 = fcmp olt <2 x float> %559, zeroinitializer, !dbg !51
  %561 = select <2 x i1> %560, <2 x float> zeroinitializer, <2 x float> %559, !dbg !55
  %562 = insertelement <2 x i32> poison, i32 %433, i64 0, !dbg !21
  %563 = insertelement <2 x i32> %562, i32 %377, i64 1, !dbg !21
  %564 = bitcast <2 x i32> %563 to <2 x float>, !dbg !21
  %565 = fadd <2 x float> %564, %380, !dbg !46
  %566 = fsub <2 x float> %565, %383, !dbg !47
  %567 = insertelement <2 x float> poison, float %264, i64 0, !dbg !48
  %568 = insertelement <2 x float> %567, float %488, i64 1, !dbg !48
  %569 = fmul <2 x float> %566, %568, !dbg !48
  %570 = fmul <2 x float> %569, %436, !dbg !49
  %571 = fadd <2 x float> %570, %439, !dbg !50
  %572 = fcmp olt <2 x float> %571, zeroinitializer, !dbg !51
  %573 = select <2 x i1> %572, <2 x float> zeroinitializer, <2 x float> %571, !dbg !55
  %574 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !21
  %575 = insertelement <2 x i32> %574, i32 %370, i64 1, !dbg !21
  %576 = bitcast <2 x i32> %575 to <2 x float>, !dbg !21
  %577 = fadd <2 x float> %576, %373, !dbg !46
  %578 = fsub <2 x float> %577, %376, !dbg !47
  %579 = insertelement <2 x float> poison, float %265, i64 0, !dbg !48
  %580 = insertelement <2 x float> %579, float %489, i64 1, !dbg !48
  %581 = fmul <2 x float> %578, %580, !dbg !48
  %582 = fmul <2 x float> %581, %429, !dbg !49
  %583 = fadd <2 x float> %582, %432, !dbg !50
  %584 = fcmp olt <2 x float> %583, zeroinitializer, !dbg !51
  %585 = select <2 x i1> %584, <2 x float> zeroinitializer, <2 x float> %583, !dbg !55
  %shift = shufflevector <2 x float> %501, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %586 = fadd <2 x float> %501, %shift, !dbg !56
  %shift76 = shufflevector <2 x float> %513, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %587 = fadd <2 x float> %513, %shift76, !dbg !56
  %shift77 = shufflevector <2 x float> %525, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %588 = fadd <2 x float> %525, %shift77, !dbg !56
  %shift78 = shufflevector <2 x float> %537, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %589 = fadd <2 x float> %537, %shift78, !dbg !56
  %shift79 = shufflevector <2 x float> %549, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %590 = fadd <2 x float> %549, %shift79, !dbg !56
  %shift80 = shufflevector <2 x float> %561, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %591 = fadd <2 x float> %561, %shift80, !dbg !56
  %shift81 = shufflevector <2 x float> %573, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %592 = fadd <2 x float> %573, %shift81, !dbg !56
  %shift82 = shufflevector <2 x float> %585, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %593 = fadd <2 x float> %585, %shift82, !dbg !56
  %bc = bitcast <2 x float> %493 to <2 x i32>, !dbg !57
  %594 = extractelement <2 x i32> %bc, i64 1, !dbg !57
  %bc83 = bitcast <2 x float> %505 to <2 x i32>, !dbg !57
  %595 = extractelement <2 x i32> %bc83, i64 1, !dbg !57
  %bc84 = bitcast <2 x float> %517 to <2 x i32>, !dbg !57
  %596 = extractelement <2 x i32> %bc84, i64 1, !dbg !57
  %bc85 = bitcast <2 x float> %529 to <2 x i32>, !dbg !57
  %597 = extractelement <2 x i32> %bc85, i64 1, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %594, i32 %595, i32 %596, i32 %597, ptr addrspace(1) %27, i1 true) #3, !dbg !57
  %bc86 = bitcast <2 x float> %541 to <2 x i32>, !dbg !57
  %598 = extractelement <2 x i32> %bc86, i64 1, !dbg !57
  %bc87 = bitcast <2 x float> %553 to <2 x i32>, !dbg !57
  %599 = extractelement <2 x i32> %bc87, i64 1, !dbg !57
  %bc88 = bitcast <2 x float> %565 to <2 x i32>, !dbg !57
  %600 = extractelement <2 x i32> %bc88, i64 1, !dbg !57
  %bc89 = bitcast <2 x float> %577 to <2 x i32>, !dbg !57
  %601 = extractelement <2 x i32> %bc89, i64 1, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %598, i32 %599, i32 %600, i32 %601, ptr addrspace(1) %29, i1 true) #3, !dbg !57
  %bc90 = bitcast <2 x float> %493 to <2 x i32>, !dbg !58
  %602 = extractelement <2 x i32> %bc90, i64 0, !dbg !58
  %bc91 = bitcast <2 x float> %505 to <2 x i32>, !dbg !58
  %603 = extractelement <2 x i32> %bc91, i64 0, !dbg !58
  %bc92 = bitcast <2 x float> %517 to <2 x i32>, !dbg !58
  %604 = extractelement <2 x i32> %bc92, i64 0, !dbg !58
  %bc93 = bitcast <2 x float> %529 to <2 x i32>, !dbg !58
  %605 = extractelement <2 x i32> %bc93, i64 0, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %44, i1 true) #3, !dbg !58
  %bc94 = bitcast <2 x float> %541 to <2 x i32>, !dbg !58
  %606 = extractelement <2 x i32> %bc94, i64 0, !dbg !58
  %bc95 = bitcast <2 x float> %553 to <2 x i32>, !dbg !58
  %607 = extractelement <2 x i32> %bc95, i64 0, !dbg !58
  %bc96 = bitcast <2 x float> %565 to <2 x i32>, !dbg !58
  %608 = extractelement <2 x i32> %bc96, i64 0, !dbg !58
  %bc97 = bitcast <2 x float> %577 to <2 x i32>, !dbg !58
  %609 = extractelement <2 x i32> %bc97, i64 0, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %45, i1 true) #3, !dbg !58
  %610 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !59
  %611 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !59
  %bc98 = bitcast <2 x float> %586 to <2 x i32>, !dbg !60
  %612 = extractelement <2 x i32> %bc98, i64 0, !dbg !60
  %bc99 = bitcast <2 x float> %587 to <2 x i32>, !dbg !60
  %613 = extractelement <2 x i32> %bc99, i64 0, !dbg !60
  %bc100 = bitcast <2 x float> %588 to <2 x i32>, !dbg !60
  %614 = extractelement <2 x i32> %bc100, i64 0, !dbg !60
  %bc101 = bitcast <2 x float> %589 to <2 x i32>, !dbg !60
  %615 = extractelement <2 x i32> %bc101, i64 0, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %612, i32 %613, i32 %614, i32 %615, ptr addrspace(1) %610, i1 true) #3, !dbg !60
  %bc102 = bitcast <2 x float> %590 to <2 x i32>, !dbg !60
  %616 = extractelement <2 x i32> %bc102, i64 0, !dbg !60
  %bc103 = bitcast <2 x float> %591 to <2 x i32>, !dbg !60
  %617 = extractelement <2 x i32> %bc103, i64 0, !dbg !60
  %bc104 = bitcast <2 x float> %592 to <2 x i32>, !dbg !60
  %618 = extractelement <2 x i32> %bc104, i64 0, !dbg !60
  %bc105 = bitcast <2 x float> %593 to <2 x i32>, !dbg !60
  %619 = extractelement <2 x i32> %bc105, i64 0, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %616, i32 %617, i32 %618, i32 %619, ptr addrspace(1) %611, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgcrx3v5achyjeon4rgrnmp4zuhseod3xfiv6meeuulhjkwqsk27.py", directory: "inductor_cache/gc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 27, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 52, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 39, scope: !7)
!58 = !DILocation(line: 64, column: 39, scope: !7)
!59 = !DILocation(line: 65, column: 25, scope: !7)
!60 = !DILocation(line: 65, column: 37, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
