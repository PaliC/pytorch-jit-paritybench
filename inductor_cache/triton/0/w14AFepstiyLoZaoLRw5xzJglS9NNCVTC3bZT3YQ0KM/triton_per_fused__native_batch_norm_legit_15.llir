; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = lshr i32 %9, 5, !dbg !15
  %17 = shl i32 %9, 4, !dbg !16
  %18 = and i32 %17, 3968, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %19 = sdiv i32 %.frozen, 128, !dbg !17
  %20 = shl i32 %19, 13, !dbg !18
  %21 = or disjoint i32 %18, %20, !dbg !19
  %22 = mul i32 %19, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = add nsw i32 %.decomposed, %18, !dbg !19
  %24 = add i32 %23, %20, !dbg !21
  %25 = add nsw i32 %.decomposed, 4096, !dbg !19
  %26 = add i32 %25, %21, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = fadd float %36, %45, !dbg !24
  %50 = select i1 %15, float %49, float 0.000000e+00, !dbg !24
  %51 = fadd float %37, %46, !dbg !24
  %52 = select i1 %15, float %51, float 0.000000e+00, !dbg !24
  %53 = fadd float %38, %47, !dbg !24
  %54 = select i1 %15, float %53, float 0.000000e+00, !dbg !24
  %55 = fadd float %39, %48, !dbg !24
  %56 = select i1 %15, float %55, float 0.000000e+00, !dbg !24
  %57 = bitcast float %50 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %50, %59, !dbg !24
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !24
  %65 = bitcast float %52 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %52, %67, !dbg !24
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !24
  %73 = bitcast float %54 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %54, %75, !dbg !24
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !24
  %81 = bitcast float %56 to i32, !dbg !29
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %56, %83, !dbg !24
  %85 = bitcast float %84 to i32, !dbg !29
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = fadd float %84, %87, !dbg !24
  %89 = icmp eq i32 %10, 0, !dbg !29
  %90 = and i32 %16, 7, !dbg !29
  %91 = shl nuw nsw i32 %12, 3, !dbg !29
  %92 = or disjoint i32 %91, %90, !dbg !29
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !29
  %94 = bitcast float %64 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 %89) #5, !dbg !29
  %95 = or disjoint i32 %91, 8, !dbg !29
  %96 = or disjoint i32 %95, %90, !dbg !29
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !29
  %98 = bitcast float %72 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 %89) #5, !dbg !29
  %99 = or disjoint i32 %91, 16, !dbg !29
  %100 = or disjoint i32 %99, %90, !dbg !29
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !29
  %102 = bitcast float %80 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %89) #5, !dbg !29
  %103 = or disjoint i32 %91, 24, !dbg !29
  %104 = or disjoint i32 %103, %90, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !29
  %106 = bitcast float %88 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %89) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %107 = icmp slt i32 %9, 256, !dbg !29
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = fadd float %110, %112, !dbg !24
  %114 = bitcast float %113 to i32, !dbg !29
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = fadd float %113, %116, !dbg !24
  %118 = bitcast float %117 to i32, !dbg !29
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = fadd float %117, %120, !dbg !24
  %122 = and i32 %9, 7, !dbg !29
  %123 = icmp eq i32 %122, 0, !dbg !29
  %124 = and i1 %107, %123, !dbg !29
  %125 = bitcast float %121 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %125, i1 %124) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !29
  %127 = load float, ptr addrspace(3) %126, align 16, !dbg !29
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !29
  %129 = load float, ptr addrspace(3) %128, align 16, !dbg !29
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !29
  %131 = load float, ptr addrspace(3) %130, align 16, !dbg !29
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %133 = load float, ptr addrspace(3) %132, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %135 = bitcast float %127 to i32, !dbg !30
  %136 = bitcast float %129 to i32, !dbg !30
  %137 = bitcast float %131 to i32, !dbg !30
  %138 = bitcast float %133 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %134, i32 %135, i32 %136, i32 %137, i32 %138, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !30
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 6.400000e+01) #5, !dbg !30
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 6.400000e+01) #5, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 6.400000e+01) #5, !dbg !30
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 6.400000e+01) #5, !dbg !30
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 6.400000e+01) #5, !dbg !30
  %146 = fsub float %36, %142, !dbg !31
  %147 = fsub float %37, %143, !dbg !31
  %148 = fsub float %38, %144, !dbg !31
  %149 = fsub float %39, %145, !dbg !31
  %150 = fsub float %45, %142, !dbg !31
  %151 = fsub float %46, %143, !dbg !31
  %152 = fsub float %47, %144, !dbg !31
  %153 = fsub float %48, %145, !dbg !31
  %154 = fmul float %146, %146, !dbg !32
  %155 = fmul float %147, %147, !dbg !32
  %156 = fmul float %148, %148, !dbg !32
  %157 = fmul float %149, %149, !dbg !32
  %158 = fmul float %150, %150, !dbg !32
  %159 = fmul float %151, %151, !dbg !32
  %160 = fmul float %152, %152, !dbg !32
  %161 = fmul float %153, %153, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %162 = fadd float %154, %158, !dbg !35
  %163 = select i1 %15, float %162, float 0.000000e+00, !dbg !35
  %164 = fadd float %155, %159, !dbg !35
  %165 = select i1 %15, float %164, float 0.000000e+00, !dbg !35
  %166 = fadd float %156, %160, !dbg !35
  %167 = select i1 %15, float %166, float 0.000000e+00, !dbg !35
  %168 = fadd float %157, %161, !dbg !35
  %169 = select i1 %15, float %168, float 0.000000e+00, !dbg !35
  %170 = bitcast float %163 to i32, !dbg !33
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 16, i32 31), !dbg !33
  %172 = bitcast i32 %171 to float, !dbg !33
  %173 = fadd float %163, %172, !dbg !35
  %174 = bitcast float %173 to i32, !dbg !33
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !33
  %176 = bitcast i32 %175 to float, !dbg !33
  %177 = fadd float %173, %176, !dbg !35
  %178 = bitcast float %165 to i32, !dbg !33
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !33
  %180 = bitcast i32 %179 to float, !dbg !33
  %181 = fadd float %165, %180, !dbg !35
  %182 = bitcast float %181 to i32, !dbg !33
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !33
  %184 = bitcast i32 %183 to float, !dbg !33
  %185 = fadd float %181, %184, !dbg !35
  %186 = bitcast float %167 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = fadd float %167, %188, !dbg !35
  %190 = bitcast float %189 to i32, !dbg !33
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !33
  %192 = bitcast i32 %191 to float, !dbg !33
  %193 = fadd float %189, %192, !dbg !35
  %194 = bitcast float %169 to i32, !dbg !33
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 16, i32 31), !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = fadd float %169, %196, !dbg !35
  %198 = bitcast float %197 to i32, !dbg !33
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = fadd float %197, %200, !dbg !35
  %202 = bitcast float %177 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %202, i1 %89) #5, !dbg !33
  %203 = bitcast float %185 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %203, i1 %89) #5, !dbg !33
  %204 = bitcast float %193 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %204, i1 %89) #5, !dbg !33
  %205 = bitcast float %201 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %205, i1 %89) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %206 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !33
  %207 = bitcast i32 %206 to float, !dbg !33
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !33
  %209 = bitcast i32 %208 to float, !dbg !33
  %210 = fadd float %207, %209, !dbg !35
  %211 = bitcast float %210 to i32, !dbg !33
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !33
  %213 = bitcast i32 %212 to float, !dbg !33
  %214 = fadd float %210, %213, !dbg !35
  %215 = bitcast float %214 to i32, !dbg !33
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !33
  %217 = bitcast i32 %216 to float, !dbg !33
  %218 = fadd float %214, %217, !dbg !35
  %219 = bitcast float %218 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %219, i1 %124) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %220 = load i32, ptr addrspace(3) %126, align 16, !dbg !33
  %221 = load i32, ptr addrspace(3) %128, align 16, !dbg !33
  %222 = load i32, ptr addrspace(3) %130, align 16, !dbg !33
  %223 = load i32, ptr addrspace(3) %132, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %134, i32 %220, i32 %221, i32 %222, i32 %223, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %224 = load float, ptr addrspace(3) %139, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %134, i32 %220, i32 %221, i32 %222, i32 %223, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %225 = load i32, ptr addrspace(3) %139, align 4, !dbg !37
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 6.400000e+01) #5, !dbg !38
  %227 = fadd float %226, 0x3EE4F8B580000000, !dbg !39
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %228, 0, !dbg !36
  br i1 %.not.i, label %231, label %229, !dbg !36

229:                                              ; preds = %6
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %227), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

231:                                              ; preds = %6
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %227), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %229, %231
  %.0.i = phi float [ %230, %229 ], [ %232, %231 ], !dbg !36
  %233 = or disjoint i32 %8, %13, !dbg !13
  %234 = icmp slt i32 %233, 512, !dbg !14
  %235 = sext i32 %233 to i64, !dbg !40
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %235, !dbg !40
  %237 = icmp eq i32 %90, 0, !dbg !41
  %238 = bitcast float %.0.i to i32, !dbg !41
  %239 = and i1 %237, %234, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %236, i1 %239) #5, !dbg !41
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !42
  %241 = bitcast float %141 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %240, i1 %239) #5, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %242, i1 %239) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7nwuskspldniwd6ezjt5pcfboretlmqgjpgerntvtqtr54xohb.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_15", linkageName: "triton_per_fused__native_batch_norm_legit_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 65, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 28, scope: !7)
!37 = !DILocation(line: 44, column: 29, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 25, scope: !7)
!41 = !DILocation(line: 50, column: 37, scope: !7)
!42 = !DILocation(line: 51, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 37, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
