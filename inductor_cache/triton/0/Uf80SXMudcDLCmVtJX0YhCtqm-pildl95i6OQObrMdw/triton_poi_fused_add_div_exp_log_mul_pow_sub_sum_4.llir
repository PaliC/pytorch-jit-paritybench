; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_div_exp_log_mul_pow_sub_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 4, !dbg !14
  %12 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !15
  %13 = bitcast i64 %12 to double, !dbg !15
  %14 = shl i32 %10, 2, !dbg !16
  %15 = sext i32 %14 to i64, !dbg !17
  %16 = getelementptr double, ptr addrspace(1) %2, i64 %15, !dbg !17
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %11) #3, !dbg !18
  %18 = bitcast i64 %17 to double, !dbg !18
  %19 = getelementptr double, ptr addrspace(1) %3, i64 %15, !dbg !19
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %11) #3, !dbg !20
  %21 = bitcast i64 %20 to double, !dbg !20
  %22 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !21
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !22
  %24 = bitcast i64 %23 to double, !dbg !22
  %25 = or disjoint i32 %14, 1, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr double, ptr addrspace(1) %2, i64 %26, !dbg !24
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !25
  %29 = bitcast i64 %28 to double, !dbg !25
  %30 = getelementptr double, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %11) #3, !dbg !27
  %32 = bitcast i64 %31 to double, !dbg !27
  %33 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !28
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !29
  %35 = bitcast i64 %34 to double, !dbg !29
  %36 = or disjoint i32 %14, 2, !dbg !30
  %37 = sext i32 %36 to i64, !dbg !31
  %38 = getelementptr double, ptr addrspace(1) %2, i64 %37, !dbg !31
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %11) #3, !dbg !32
  %40 = bitcast i64 %39 to double, !dbg !32
  %41 = getelementptr double, ptr addrspace(1) %3, i64 %37, !dbg !33
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %11) #3, !dbg !34
  %43 = bitcast i64 %42 to double, !dbg !34
  %44 = getelementptr i8, ptr addrspace(1) %1, i64 24, !dbg !35
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !36
  %46 = bitcast i64 %45 to double, !dbg !36
  %47 = or disjoint i32 %14, 3, !dbg !37
  %48 = sext i32 %47 to i64, !dbg !38
  %49 = getelementptr double, ptr addrspace(1) %2, i64 %48, !dbg !38
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %11) #3, !dbg !39
  %51 = bitcast i64 %50 to double, !dbg !39
  %52 = getelementptr double, ptr addrspace(1) %3, i64 %48, !dbg !40
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %11) #3, !dbg !41
  %54 = bitcast i64 %53 to double, !dbg !41
  %55 = sext i32 %10 to i64, !dbg !42
  %56 = getelementptr double, ptr addrspace(1) %0, i64 %55, !dbg !42
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %11) #3, !dbg !43
  %58 = bitcast i64 %57 to double, !dbg !43
  %59 = fsub double %13, %18, !dbg !44
  %60 = tail call double @llvm.nvvm.fma.rn.d(double %21, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !45
  %61 = tail call i32 @llvm.nvvm.d2i.lo(double %60) #3, !dbg !45
  %62 = tail call double @llvm.nvvm.add.rn.d(double %60, double 0xC338000000000000) #3, !dbg !45
  %63 = tail call double @llvm.nvvm.fma.rn.d(double %62, double 0xBFE62E42FEFA39EF, double %21) #3, !dbg !45
  %64 = tail call double @llvm.nvvm.fma.rn.d(double %62, double 0xBC7ABC9E3B39803F, double %63) #3, !dbg !45
  %65 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %64, double 0x3E928AF3FCA213EA) #3, !dbg !45
  %66 = tail call double @llvm.nvvm.fma.rn.d(double %65, double %64, double 0x3EC71DEE62401315) #3, !dbg !45
  %67 = tail call double @llvm.nvvm.fma.rn.d(double %66, double %64, double 0x3EFA01997C89EB71) #3, !dbg !45
  %68 = tail call double @llvm.nvvm.fma.rn.d(double %67, double %64, double 0x3F2A01A014761F65) #3, !dbg !45
  %69 = tail call double @llvm.nvvm.fma.rn.d(double %68, double %64, double 0x3F56C16C1852B7AF) #3, !dbg !45
  %70 = tail call double @llvm.nvvm.fma.rn.d(double %69, double %64, double 0x3F81111111122322) #3, !dbg !45
  %71 = tail call double @llvm.nvvm.fma.rn.d(double %70, double %64, double 0x3FA55555555502A1) #3, !dbg !45
  %72 = tail call double @llvm.nvvm.fma.rn.d(double %71, double %64, double 0x3FC5555555555511) #3, !dbg !45
  %73 = tail call double @llvm.nvvm.fma.rn.d(double %72, double %64, double 0x3FE000000000000B) #3, !dbg !45
  %74 = tail call double @llvm.nvvm.fma.rn.d(double %73, double %64, double 1.000000e+00) #3, !dbg !45
  %75 = tail call double @llvm.nvvm.fma.rn.d(double %74, double %64, double 1.000000e+00) #3, !dbg !45
  %76 = tail call i32 @llvm.nvvm.d2i.lo(double %75) #3, !dbg !45
  %77 = tail call i32 @llvm.nvvm.d2i.hi(double %75) #3, !dbg !45
  %78 = shl i32 %61, 20, !dbg !45
  %79 = add i32 %77, %78, !dbg !45
  %80 = tail call double @llvm.nvvm.lohi.i2d(i32 %76, i32 %79) #3, !dbg !45
  %81 = tail call i32 @llvm.nvvm.d2i.hi(double %21) #3, !dbg !45
  %82 = bitcast i32 %81 to float, !dbg !45
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %83, 0, !dbg !45
  %84 = tail call float @llvm.nvvm.fabs.ftz.f(float %82) #3, !dbg !45
  %85 = tail call float @llvm.nvvm.fabs.f(float %82) #3, !dbg !45
  %.01.i = select i1 %.not.i, float %85, float %84, !dbg !45
  %86 = fcmp olt float %.01.i, 0x4010C46560000000, !dbg !45
  br i1 %86, label %__nv_exp.exit, label %__internal_fast_icmp_abs_lt.exit.i, !dbg !45

__internal_fast_icmp_abs_lt.exit.i:               ; preds = %5
  %87 = fcmp olt double %21, 0.000000e+00, !dbg !45
  %88 = fadd double %21, 0x7FF0000000000000, !dbg !45
  %z.0.i = select i1 %87, double 0.000000e+00, double %88, !dbg !45
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not1.i = icmp eq i32 %89, 0, !dbg !45
  %.0.i1 = select i1 %.not1.i, float %85, float %84, !dbg !45
  %90 = fcmp olt float %.0.i1, 0x4010E90000000000, !dbg !45
  br i1 %90, label %91, label %__nv_exp.exit, !dbg !45

91:                                               ; preds = %__internal_fast_icmp_abs_lt.exit.i
  %92 = sdiv i32 %61, 2, !dbg !45
  %93 = shl i32 %92, 20, !dbg !45
  %94 = add i32 %77, %93, !dbg !45
  %95 = tail call double @llvm.nvvm.lohi.i2d(i32 %76, i32 %94) #3, !dbg !45
  %96 = sub nsw i32 %61, %92, !dbg !45
  %97 = shl i32 %96, 20, !dbg !45
  %98 = add nsw i32 %97, 1072693248, !dbg !45
  %99 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %98) #3, !dbg !45
  %100 = fmul double %99, %95, !dbg !45
  br label %__nv_exp.exit, !dbg !45

__nv_exp.exit:                                    ; preds = %5, %__internal_fast_icmp_abs_lt.exit.i, %91
  %z.2.i = phi double [ %80, %5 ], [ %100, %91 ], [ %z.0.i, %__internal_fast_icmp_abs_lt.exit.i ], !dbg !45
  %101 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %59, double %z.2.i) #3, !dbg !46
  %102 = fsub double %24, %29, !dbg !47
  %103 = tail call double @llvm.nvvm.fma.rn.d(double %32, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !48
  %104 = tail call i32 @llvm.nvvm.d2i.lo(double %103) #3, !dbg !48
  %105 = tail call double @llvm.nvvm.add.rn.d(double %103, double 0xC338000000000000) #3, !dbg !48
  %106 = tail call double @llvm.nvvm.fma.rn.d(double %105, double 0xBFE62E42FEFA39EF, double %32) #3, !dbg !48
  %107 = tail call double @llvm.nvvm.fma.rn.d(double %105, double 0xBC7ABC9E3B39803F, double %106) #3, !dbg !48
  %108 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %107, double 0x3E928AF3FCA213EA) #3, !dbg !48
  %109 = tail call double @llvm.nvvm.fma.rn.d(double %108, double %107, double 0x3EC71DEE62401315) #3, !dbg !48
  %110 = tail call double @llvm.nvvm.fma.rn.d(double %109, double %107, double 0x3EFA01997C89EB71) #3, !dbg !48
  %111 = tail call double @llvm.nvvm.fma.rn.d(double %110, double %107, double 0x3F2A01A014761F65) #3, !dbg !48
  %112 = tail call double @llvm.nvvm.fma.rn.d(double %111, double %107, double 0x3F56C16C1852B7AF) #3, !dbg !48
  %113 = tail call double @llvm.nvvm.fma.rn.d(double %112, double %107, double 0x3F81111111122322) #3, !dbg !48
  %114 = tail call double @llvm.nvvm.fma.rn.d(double %113, double %107, double 0x3FA55555555502A1) #3, !dbg !48
  %115 = tail call double @llvm.nvvm.fma.rn.d(double %114, double %107, double 0x3FC5555555555511) #3, !dbg !48
  %116 = tail call double @llvm.nvvm.fma.rn.d(double %115, double %107, double 0x3FE000000000000B) #3, !dbg !48
  %117 = tail call double @llvm.nvvm.fma.rn.d(double %116, double %107, double 1.000000e+00) #3, !dbg !48
  %118 = tail call double @llvm.nvvm.fma.rn.d(double %117, double %107, double 1.000000e+00) #3, !dbg !48
  %119 = tail call i32 @llvm.nvvm.d2i.lo(double %118) #3, !dbg !48
  %120 = tail call i32 @llvm.nvvm.d2i.hi(double %118) #3, !dbg !48
  %121 = shl i32 %104, 20, !dbg !48
  %122 = add i32 %120, %121, !dbg !48
  %123 = tail call double @llvm.nvvm.lohi.i2d(i32 %119, i32 %122) #3, !dbg !48
  %124 = tail call i32 @llvm.nvvm.d2i.hi(double %32) #3, !dbg !48
  %125 = bitcast i32 %124 to float, !dbg !48
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i2 = icmp eq i32 %126, 0, !dbg !48
  %127 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #3, !dbg !48
  %128 = tail call float @llvm.nvvm.fabs.f(float %125) #3, !dbg !48
  %.01.i3 = select i1 %.not.i2, float %128, float %127, !dbg !48
  %129 = fcmp olt float %.01.i3, 0x4010C46560000000, !dbg !48
  br i1 %129, label %__nv_exp.exit9, label %__internal_fast_icmp_abs_lt.exit.i4, !dbg !48

__internal_fast_icmp_abs_lt.exit.i4:              ; preds = %__nv_exp.exit
  %130 = fcmp olt double %32, 0.000000e+00, !dbg !48
  %131 = fadd double %32, 0x7FF0000000000000, !dbg !48
  %z.0.i5 = select i1 %130, double 0.000000e+00, double %131, !dbg !48
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not1.i6 = icmp eq i32 %132, 0, !dbg !48
  %.0.i7 = select i1 %.not1.i6, float %128, float %127, !dbg !48
  %133 = fcmp olt float %.0.i7, 0x4010E90000000000, !dbg !48
  br i1 %133, label %134, label %__nv_exp.exit9, !dbg !48

134:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i4
  %135 = sdiv i32 %104, 2, !dbg !48
  %136 = shl i32 %135, 20, !dbg !48
  %137 = add i32 %120, %136, !dbg !48
  %138 = tail call double @llvm.nvvm.lohi.i2d(i32 %119, i32 %137) #3, !dbg !48
  %139 = sub nsw i32 %104, %135, !dbg !48
  %140 = shl i32 %139, 20, !dbg !48
  %141 = add nsw i32 %140, 1072693248, !dbg !48
  %142 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %141) #3, !dbg !48
  %143 = fmul double %142, %138, !dbg !48
  br label %__nv_exp.exit9, !dbg !48

__nv_exp.exit9:                                   ; preds = %__nv_exp.exit, %__internal_fast_icmp_abs_lt.exit.i4, %134
  %z.2.i8 = phi double [ %123, %__nv_exp.exit ], [ %143, %134 ], [ %z.0.i5, %__internal_fast_icmp_abs_lt.exit.i4 ], !dbg !48
  %144 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %102, double %z.2.i8) #3, !dbg !49
  %145 = fsub double %35, %40, !dbg !50
  %146 = tail call double @llvm.nvvm.fma.rn.d(double %43, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !51
  %147 = tail call i32 @llvm.nvvm.d2i.lo(double %146) #3, !dbg !51
  %148 = tail call double @llvm.nvvm.add.rn.d(double %146, double 0xC338000000000000) #3, !dbg !51
  %149 = tail call double @llvm.nvvm.fma.rn.d(double %148, double 0xBFE62E42FEFA39EF, double %43) #3, !dbg !51
  %150 = tail call double @llvm.nvvm.fma.rn.d(double %148, double 0xBC7ABC9E3B39803F, double %149) #3, !dbg !51
  %151 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %150, double 0x3E928AF3FCA213EA) #3, !dbg !51
  %152 = tail call double @llvm.nvvm.fma.rn.d(double %151, double %150, double 0x3EC71DEE62401315) #3, !dbg !51
  %153 = tail call double @llvm.nvvm.fma.rn.d(double %152, double %150, double 0x3EFA01997C89EB71) #3, !dbg !51
  %154 = tail call double @llvm.nvvm.fma.rn.d(double %153, double %150, double 0x3F2A01A014761F65) #3, !dbg !51
  %155 = tail call double @llvm.nvvm.fma.rn.d(double %154, double %150, double 0x3F56C16C1852B7AF) #3, !dbg !51
  %156 = tail call double @llvm.nvvm.fma.rn.d(double %155, double %150, double 0x3F81111111122322) #3, !dbg !51
  %157 = tail call double @llvm.nvvm.fma.rn.d(double %156, double %150, double 0x3FA55555555502A1) #3, !dbg !51
  %158 = tail call double @llvm.nvvm.fma.rn.d(double %157, double %150, double 0x3FC5555555555511) #3, !dbg !51
  %159 = tail call double @llvm.nvvm.fma.rn.d(double %158, double %150, double 0x3FE000000000000B) #3, !dbg !51
  %160 = tail call double @llvm.nvvm.fma.rn.d(double %159, double %150, double 1.000000e+00) #3, !dbg !51
  %161 = tail call double @llvm.nvvm.fma.rn.d(double %160, double %150, double 1.000000e+00) #3, !dbg !51
  %162 = tail call i32 @llvm.nvvm.d2i.lo(double %161) #3, !dbg !51
  %163 = tail call i32 @llvm.nvvm.d2i.hi(double %161) #3, !dbg !51
  %164 = shl i32 %147, 20, !dbg !51
  %165 = add i32 %163, %164, !dbg !51
  %166 = tail call double @llvm.nvvm.lohi.i2d(i32 %162, i32 %165) #3, !dbg !51
  %167 = tail call i32 @llvm.nvvm.d2i.hi(double %43) #3, !dbg !51
  %168 = bitcast i32 %167 to float, !dbg !51
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i10 = icmp eq i32 %169, 0, !dbg !51
  %170 = tail call float @llvm.nvvm.fabs.ftz.f(float %168) #3, !dbg !51
  %171 = tail call float @llvm.nvvm.fabs.f(float %168) #3, !dbg !51
  %.01.i11 = select i1 %.not.i10, float %171, float %170, !dbg !51
  %172 = fcmp olt float %.01.i11, 0x4010C46560000000, !dbg !51
  br i1 %172, label %__nv_exp.exit17, label %__internal_fast_icmp_abs_lt.exit.i12, !dbg !51

__internal_fast_icmp_abs_lt.exit.i12:             ; preds = %__nv_exp.exit9
  %173 = fcmp olt double %43, 0.000000e+00, !dbg !51
  %174 = fadd double %43, 0x7FF0000000000000, !dbg !51
  %z.0.i13 = select i1 %173, double 0.000000e+00, double %174, !dbg !51
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not1.i14 = icmp eq i32 %175, 0, !dbg !51
  %.0.i15 = select i1 %.not1.i14, float %171, float %170, !dbg !51
  %176 = fcmp olt float %.0.i15, 0x4010E90000000000, !dbg !51
  br i1 %176, label %177, label %__nv_exp.exit17, !dbg !51

177:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i12
  %178 = sdiv i32 %147, 2, !dbg !51
  %179 = shl i32 %178, 20, !dbg !51
  %180 = add i32 %163, %179, !dbg !51
  %181 = tail call double @llvm.nvvm.lohi.i2d(i32 %162, i32 %180) #3, !dbg !51
  %182 = sub nsw i32 %147, %178, !dbg !51
  %183 = shl i32 %182, 20, !dbg !51
  %184 = add nsw i32 %183, 1072693248, !dbg !51
  %185 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %184) #3, !dbg !51
  %186 = fmul double %185, %181, !dbg !51
  br label %__nv_exp.exit17, !dbg !51

__nv_exp.exit17:                                  ; preds = %__nv_exp.exit9, %__internal_fast_icmp_abs_lt.exit.i12, %177
  %z.2.i16 = phi double [ %166, %__nv_exp.exit9 ], [ %186, %177 ], [ %z.0.i13, %__internal_fast_icmp_abs_lt.exit.i12 ], !dbg !51
  %187 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %145, double %z.2.i16) #3, !dbg !52
  %188 = fsub double %46, %51, !dbg !53
  %189 = tail call double @llvm.nvvm.fma.rn.d(double %54, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !54
  %190 = tail call i32 @llvm.nvvm.d2i.lo(double %189) #3, !dbg !54
  %191 = tail call double @llvm.nvvm.add.rn.d(double %189, double 0xC338000000000000) #3, !dbg !54
  %192 = tail call double @llvm.nvvm.fma.rn.d(double %191, double 0xBFE62E42FEFA39EF, double %54) #3, !dbg !54
  %193 = tail call double @llvm.nvvm.fma.rn.d(double %191, double 0xBC7ABC9E3B39803F, double %192) #3, !dbg !54
  %194 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %193, double 0x3E928AF3FCA213EA) #3, !dbg !54
  %195 = tail call double @llvm.nvvm.fma.rn.d(double %194, double %193, double 0x3EC71DEE62401315) #3, !dbg !54
  %196 = tail call double @llvm.nvvm.fma.rn.d(double %195, double %193, double 0x3EFA01997C89EB71) #3, !dbg !54
  %197 = tail call double @llvm.nvvm.fma.rn.d(double %196, double %193, double 0x3F2A01A014761F65) #3, !dbg !54
  %198 = tail call double @llvm.nvvm.fma.rn.d(double %197, double %193, double 0x3F56C16C1852B7AF) #3, !dbg !54
  %199 = tail call double @llvm.nvvm.fma.rn.d(double %198, double %193, double 0x3F81111111122322) #3, !dbg !54
  %200 = tail call double @llvm.nvvm.fma.rn.d(double %199, double %193, double 0x3FA55555555502A1) #3, !dbg !54
  %201 = tail call double @llvm.nvvm.fma.rn.d(double %200, double %193, double 0x3FC5555555555511) #3, !dbg !54
  %202 = tail call double @llvm.nvvm.fma.rn.d(double %201, double %193, double 0x3FE000000000000B) #3, !dbg !54
  %203 = tail call double @llvm.nvvm.fma.rn.d(double %202, double %193, double 1.000000e+00) #3, !dbg !54
  %204 = tail call double @llvm.nvvm.fma.rn.d(double %203, double %193, double 1.000000e+00) #3, !dbg !54
  %205 = tail call i32 @llvm.nvvm.d2i.lo(double %204) #3, !dbg !54
  %206 = tail call i32 @llvm.nvvm.d2i.hi(double %204) #3, !dbg !54
  %207 = shl i32 %190, 20, !dbg !54
  %208 = add i32 %206, %207, !dbg !54
  %209 = tail call double @llvm.nvvm.lohi.i2d(i32 %205, i32 %208) #3, !dbg !54
  %210 = tail call i32 @llvm.nvvm.d2i.hi(double %54) #3, !dbg !54
  %211 = bitcast i32 %210 to float, !dbg !54
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i18 = icmp eq i32 %212, 0, !dbg !54
  %213 = tail call float @llvm.nvvm.fabs.ftz.f(float %211) #3, !dbg !54
  %214 = tail call float @llvm.nvvm.fabs.f(float %211) #3, !dbg !54
  %.01.i19 = select i1 %.not.i18, float %214, float %213, !dbg !54
  %215 = fcmp olt float %.01.i19, 0x4010C46560000000, !dbg !54
  br i1 %215, label %__nv_exp.exit25, label %__internal_fast_icmp_abs_lt.exit.i20, !dbg !54

__internal_fast_icmp_abs_lt.exit.i20:             ; preds = %__nv_exp.exit17
  %216 = fcmp olt double %54, 0.000000e+00, !dbg !54
  %217 = fadd double %54, 0x7FF0000000000000, !dbg !54
  %z.0.i21 = select i1 %216, double 0.000000e+00, double %217, !dbg !54
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not1.i22 = icmp eq i32 %218, 0, !dbg !54
  %.0.i23 = select i1 %.not1.i22, float %214, float %213, !dbg !54
  %219 = fcmp olt float %.0.i23, 0x4010E90000000000, !dbg !54
  br i1 %219, label %220, label %__nv_exp.exit25, !dbg !54

220:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i20
  %221 = sdiv i32 %190, 2, !dbg !54
  %222 = shl i32 %221, 20, !dbg !54
  %223 = add i32 %206, %222, !dbg !54
  %224 = tail call double @llvm.nvvm.lohi.i2d(i32 %205, i32 %223) #3, !dbg !54
  %225 = sub nsw i32 %190, %221, !dbg !54
  %226 = shl i32 %225, 20, !dbg !54
  %227 = add nsw i32 %226, 1072693248, !dbg !54
  %228 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %227) #3, !dbg !54
  %229 = fmul double %228, %224, !dbg !54
  br label %__nv_exp.exit25, !dbg !54

__nv_exp.exit25:                                  ; preds = %__nv_exp.exit17, %__internal_fast_icmp_abs_lt.exit.i20, %220
  %z.2.i24 = phi double [ %209, %__nv_exp.exit17 ], [ %229, %220 ], [ %z.0.i21, %__internal_fast_icmp_abs_lt.exit.i20 ], !dbg !54
  %230 = tail call double asm "div.rn.f64 $0, $1, $2;", "=l,l,l"(double %188, double %z.2.i24) #3, !dbg !55
  %231 = tail call i32 @llvm.nvvm.d2i.hi(double %58) #3, !dbg !56
  %232 = tail call i32 @llvm.nvvm.d2i.lo(double %58) #3, !dbg !56
  %233 = icmp slt i32 %231, 1048576, !dbg !56
  br i1 %233, label %234, label %238, !dbg !56

234:                                              ; preds = %__nv_exp.exit25
  %235 = fmul double %58, 0x4350000000000000, !dbg !56
  %236 = tail call i32 @llvm.nvvm.d2i.hi(double %235) #3, !dbg !56
  %237 = tail call i32 @llvm.nvvm.d2i.lo(double %235) #3, !dbg !56
  br label %238, !dbg !56

238:                                              ; preds = %234, %__nv_exp.exit25
  %.0.i = phi double [ %235, %234 ], [ %58, %__nv_exp.exit25 ], !dbg !56
  %ihi.0.i = phi i32 [ %236, %234 ], [ %231, %__nv_exp.exit25 ], !dbg !56
  %ilo.0.i = phi i32 [ %237, %234 ], [ %232, %__nv_exp.exit25 ], !dbg !56
  %e.0.i = phi i32 [ -1077, %234 ], [ -1023, %__nv_exp.exit25 ], !dbg !56
  %239 = add i32 %ihi.0.i, -1, !dbg !56
  %or.cond.i = icmp ult i32 %239, 2146435071, !dbg !56
  br i1 %or.cond.i, label %240, label %289, !dbg !56

240:                                              ; preds = %238
  %241 = lshr i32 %ihi.0.i, 20, !dbg !56
  %242 = add nsw i32 %e.0.i, %241, !dbg !56
  %243 = and i32 %ihi.0.i, 1048575, !dbg !56
  %244 = or disjoint i32 %243, 1072693248, !dbg !56
  %245 = tail call double @llvm.nvvm.lohi.i2d(i32 %ilo.0.i, i32 %244) #3, !dbg !56
  %246 = icmp samesign ugt i32 %244, 1073127582, !dbg !56
  br i1 %246, label %247, label %253, !dbg !56

247:                                              ; preds = %240
  %248 = tail call i32 @llvm.nvvm.d2i.lo(double %245) #3, !dbg !56
  %249 = tail call i32 @llvm.nvvm.d2i.hi(double %245) #3, !dbg !56
  %250 = add i32 %249, -1048576, !dbg !56
  %251 = tail call double @llvm.nvvm.lohi.i2d(i32 %248, i32 %250) #3, !dbg !56
  %252 = add nsw i32 %242, 1, !dbg !56
  br label %253, !dbg !56

253:                                              ; preds = %247, %240
  %m.0.i = phi double [ %251, %247 ], [ %245, %240 ], !dbg !56
  %e.1.i = phi i32 [ %252, %247 ], [ %242, %240 ], !dbg !56
  %254 = fadd double %m.0.i, -1.000000e+00, !dbg !56
  %255 = fadd double %m.0.i, 1.000000e+00, !dbg !56
  %256 = tail call double @llvm.nvvm.rcp.approx.ftz.d(double %255) #3, !dbg !56
  %257 = fneg double %255, !dbg !56
  %258 = tail call double @llvm.nvvm.fma.rn.d(double %257, double %256, double 1.000000e+00) #3, !dbg !56
  %259 = tail call double @llvm.nvvm.fma.rn.d(double %258, double %258, double %258) #3, !dbg !56
  %260 = tail call double @llvm.nvvm.fma.rn.d(double %259, double %256, double %256) #3, !dbg !56
  %261 = fmul double %254, %260, !dbg !56
  %262 = fadd double %261, %261, !dbg !56
  %263 = fmul double %262, %262, !dbg !56
  %264 = tail call double @llvm.nvvm.fma.rn.d(double 0x3EB1380B3AE80F1E, double %263, double 0x3ED0EE258B7A8B04) #3, !dbg !56
  %265 = tail call double @llvm.nvvm.fma.rn.d(double %264, double %263, double 0x3EF3B2669F02676F) #3, !dbg !56
  %266 = tail call double @llvm.nvvm.fma.rn.d(double %265, double %263, double 0x3F1745CBA9AB0956) #3, !dbg !56
  %267 = tail call double @llvm.nvvm.fma.rn.d(double %266, double %263, double 0x3F3C71C72D1B5154) #3, !dbg !56
  %268 = tail call double @llvm.nvvm.fma.rn.d(double %267, double %263, double 0x3F624924923BE72D) #3, !dbg !56
  %269 = tail call double @llvm.nvvm.fma.rn.d(double %268, double %263, double 0x3F8999999999A3C4) #3, !dbg !56
  %270 = tail call double @llvm.nvvm.fma.rn.d(double %269, double %263, double 0x3FB5555555555554) #3, !dbg !56
  %271 = fsub double %254, %262, !dbg !56
  %272 = fmul double %271, 2.000000e+00, !dbg !56
  %273 = fneg double %262, !dbg !56
  %274 = tail call double @llvm.nvvm.fma.rn.d(double %273, double %254, double %272) #3, !dbg !56
  %275 = fmul double %260, %274, !dbg !56
  %276 = fmul double %263, %270, !dbg !56
  %277 = tail call double @llvm.nvvm.fma.rn.d(double %276, double %262, double %275) #3, !dbg !56
  %278 = xor i32 %e.1.i, -2147483648, !dbg !56
  %279 = tail call double @llvm.nvvm.lohi.i2d(i32 %278, i32 1127219200) #3, !dbg !56
  %280 = tail call double @llvm.nvvm.lohi.i2d(i32 -2147483648, i32 1127219200) #3, !dbg !56
  %281 = fsub double %279, %280, !dbg !56
  %282 = tail call double @llvm.nvvm.fma.rn.d(double %281, double 0x3FE62E42FEFA39EF, double %262) #3, !dbg !56
  %283 = fneg double %281, !dbg !56
  %284 = tail call double @llvm.nvvm.fma.rn.d(double %283, double 0x3FE62E42FEFA39EF, double %282) #3, !dbg !56
  %285 = fsub double %284, %262, !dbg !56
  %286 = fsub double %277, %285, !dbg !56
  %287 = tail call double @llvm.nvvm.fma.rn.d(double %281, double 0x3C7ABC9E3B39803F, double %286) #3, !dbg !56
  %288 = fadd double %282, %287, !dbg !56
  br label %__nv_log.exit, !dbg !56

289:                                              ; preds = %238
  %290 = tail call double @llvm.nvvm.fma.rn.d(double %.0.i, double 0x7FF0000000000000, double 0x7FF0000000000000) #3, !dbg !56
  %291 = tail call i32 @llvm.nvvm.d2i.hi(double %.0.i) #3, !dbg !56
  %292 = and i32 %291, 2147483647, !dbg !56
  %293 = icmp eq i32 %292, 0, !dbg !56
  %q.0.i = select i1 %293, double 0xFFF0000000000000, double %290, !dbg !56
  br label %__nv_log.exit, !dbg !56

__nv_log.exit:                                    ; preds = %253, %289
  %q.1.i = phi double [ %288, %253 ], [ %q.0.i, %289 ], !dbg !56
  %294 = fmul double %101, %101, !dbg !57
  %295 = fmul double %144, %144, !dbg !58
  %296 = fadd double %294, %295, !dbg !59
  %297 = fmul double %187, %187, !dbg !60
  %298 = fadd double %296, %297, !dbg !61
  %299 = fmul double %230, %230, !dbg !62
  %300 = fadd double %298, %299, !dbg !63
  %301 = and i32 %8, 28, !dbg !12
  %302 = fadd double %q.1.i, 0xC00D67F1C864BEB4, !dbg !64
  %303 = fmul double %300, 5.000000e-01, !dbg !65
  %304 = fsub double %302, %303, !dbg !66
  %305 = fadd double %21, %32, !dbg !67
  %306 = fadd double %305, %43, !dbg !68
  %307 = fadd double %306, %54, !dbg !69
  %308 = fsub double %304, %307, !dbg !70
  %309 = icmp eq i32 %301, 0, !dbg !71
  %310 = bitcast double %308 to i64, !dbg !71
  %311 = and i1 %309, %11, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %310, ptr addrspace(1) %56, i1 %311) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.hi(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.lo(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.lohi.i2d(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare double @llvm.nvvm.rcp.approx.ftz.d(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.fma.rn.d(double, double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.add.rn.d(double, double) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc3yyvlgkktq7qldehpkprvyvsoyh7aayv7sw2yzfmay5cjlp5lz.py", directory: "inductor_cache/c3")
!4 = !{ptr @triton_poi_fused_add_div_exp_log_mul_pow_sub_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_exp_log_mul_pow_sub_sum_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_exp_log_mul_pow_sub_sum_4", linkageName: "triton_poi_fused_add_div_exp_log_mul_pow_sub_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 20, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 42, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 20, scope: !7)
!37 = !DILocation(line: 39, column: 35, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 42, scope: !7)
!40 = !DILocation(line: 40, column: 31, scope: !7)
!41 = !DILocation(line: 40, column: 42, scope: !7)
!42 = !DILocation(line: 41, column: 35, scope: !7)
!43 = !DILocation(line: 41, column: 40, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 44, column: 18, scope: !7)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 26, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 26, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 26, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 26, scope: !7)
!57 = !DILocation(line: 45, column: 18, scope: !7)
!58 = !DILocation(line: 49, column: 20, scope: !7)
!59 = !DILocation(line: 50, column: 19, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 59, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 19, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 40, scope: !7)
!72 = !DILocation(line: 71, column: 4, scope: !7)
