; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_copy_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 1072812, !dbg !14
  %19 = icmp slt i32 %14, 1072812, !dbg !14
  %20 = insertelement <8 x i32> poison, i32 %17, i64 0, !dbg !15
  %21 = insertelement <8 x i32> %20, i32 %16, i64 1, !dbg !15
  %22 = insertelement <8 x i32> %21, i32 %15, i64 2, !dbg !15
  %23 = insertelement <8 x i32> %22, i32 %14, i64 3, !dbg !15
  %24 = insertelement <8 x i32> %23, i32 %13, i64 4, !dbg !15
  %25 = insertelement <8 x i32> %24, i32 %12, i64 5, !dbg !15
  %26 = insertelement <8 x i32> %25, i32 %11, i64 6, !dbg !15
  %27 = insertelement <8 x i32> %26, i32 %10, i64 7, !dbg !15
  %28 = sdiv <8 x i32> %27, splat (i32 89401), !dbg !15
  %29 = trunc nsw <8 x i32> %28 to <8 x i16>, !dbg !16
  %30 = srem <8 x i16> %29, splat (i16 3), !dbg !16
  %31 = shufflevector <8 x i16> %30, <8 x i16> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !16
  %32 = srem i32 %10, 89401, !dbg !17
  %33 = srem i32 %11, 89401, !dbg !17
  %34 = srem i32 %12, 89401, !dbg !17
  %35 = srem i32 %13, 89401, !dbg !17
  %36 = srem i32 %14, 89401, !dbg !17
  %37 = srem i32 %15, 89401, !dbg !17
  %38 = srem i32 %16, 89401, !dbg !17
  %39 = srem i32 %17, 89401, !dbg !17
  %40 = sdiv i32 %10, 268203, !dbg !18
  %41 = sdiv i32 %11, 268203, !dbg !18
  %42 = sdiv i32 %12, 268203, !dbg !18
  %43 = sdiv i32 %13, 268203, !dbg !18
  %44 = sdiv i32 %14, 268203, !dbg !18
  %45 = sdiv i32 %15, 268203, !dbg !18
  %46 = sdiv i32 %16, 268203, !dbg !18
  %47 = sdiv i32 %17, 268203, !dbg !18
  %48 = mul nsw i32 %40, 268224, !dbg !19
  %49 = mul nsw i32 %41, 268224, !dbg !19
  %50 = mul nsw i32 %42, 268224, !dbg !19
  %51 = mul nsw i32 %43, 268224, !dbg !19
  %52 = mul nsw i32 %44, 268224, !dbg !19
  %53 = mul nsw i32 %45, 268224, !dbg !19
  %54 = mul nsw i32 %46, 268224, !dbg !19
  %55 = mul nsw i32 %47, 268224, !dbg !19
  %56 = add i32 %48, %32, !dbg !20
  %57 = add i32 %49, %33, !dbg !20
  %58 = add i32 %50, %34, !dbg !20
  %59 = add i32 %51, %35, !dbg !20
  %60 = add i32 %52, %36, !dbg !20
  %61 = add i32 %53, %37, !dbg !20
  %62 = add i32 %54, %38, !dbg !20
  %63 = add i32 %55, %39, !dbg !20
  %64 = sext i32 %56 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !21
  %66 = sext i32 %57 to i64, !dbg !21
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !21
  %68 = sext i32 %58 to i64, !dbg !21
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !21
  %70 = sext i32 %59 to i64, !dbg !21
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !21
  %72 = sext i32 %60 to i64, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = sext i32 %61 to i64, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !21
  %76 = sext i32 %62 to i64, !dbg !21
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !21
  %78 = sext i32 %63 to i64, !dbg !21
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !21
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #1, !dbg !22
  %81 = bitcast i32 %80 to float, !dbg !22
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #1, !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #1, !dbg !22
  %85 = bitcast i32 %84 to float, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %18) #1, !dbg !22
  %87 = bitcast i32 %86 to float, !dbg !22
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #1, !dbg !22
  %89 = bitcast i32 %88 to float, !dbg !22
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %19) #1, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %19) #1, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %19) #1, !dbg !22
  %95 = bitcast i32 %94 to float, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %18) #1, !dbg !24
  %105 = bitcast i32 %104 to float, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %18) #1, !dbg !24
  %107 = bitcast i32 %106 to float, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %18) #1, !dbg !24
  %109 = bitcast i32 %108 to float, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %18) #1, !dbg !24
  %111 = bitcast i32 %110 to float, !dbg !24
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %19) #1, !dbg !24
  %113 = bitcast i32 %112 to float, !dbg !24
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %19) #1, !dbg !24
  %115 = bitcast i32 %114 to float, !dbg !24
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #1, !dbg !24
  %117 = bitcast i32 %116 to float, !dbg !24
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %19) #1, !dbg !24
  %119 = bitcast i32 %118 to float, !dbg !24
  %120 = add i32 %56, 89408, !dbg !25
  %121 = add i32 %57, 89408, !dbg !25
  %122 = add i32 %58, 89408, !dbg !25
  %123 = add i32 %59, 89408, !dbg !25
  %124 = add i32 %60, 89408, !dbg !25
  %125 = add i32 %61, 89408, !dbg !25
  %126 = add i32 %62, 89408, !dbg !25
  %127 = add i32 %63, 89408, !dbg !25
  %128 = sext i32 %120 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !26
  %130 = sext i32 %121 to i64, !dbg !26
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !26
  %132 = sext i32 %122 to i64, !dbg !26
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !26
  %134 = sext i32 %123 to i64, !dbg !26
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !26
  %136 = sext i32 %124 to i64, !dbg !26
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !26
  %138 = sext i32 %125 to i64, !dbg !26
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !26
  %140 = sext i32 %126 to i64, !dbg !26
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !26
  %142 = sext i32 %127 to i64, !dbg !26
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !26
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %18) #1, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %18) #1, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %18) #1, !dbg !27
  %151 = bitcast i32 %150 to float, !dbg !27
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %19) #1, !dbg !27
  %153 = bitcast i32 %152 to float, !dbg !27
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %19) #1, !dbg !27
  %155 = bitcast i32 %154 to float, !dbg !27
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #1, !dbg !27
  %157 = bitcast i32 %156 to float, !dbg !27
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %19) #1, !dbg !27
  %159 = bitcast i32 %158 to float, !dbg !27
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !28
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !28
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !28
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !28
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !28
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !28
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !28
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !28
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %18) #1, !dbg !29
  %169 = bitcast i32 %168 to float, !dbg !29
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %18) #1, !dbg !29
  %171 = bitcast i32 %170 to float, !dbg !29
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %18) #1, !dbg !29
  %173 = bitcast i32 %172 to float, !dbg !29
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %18) #1, !dbg !29
  %175 = bitcast i32 %174 to float, !dbg !29
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %19) #1, !dbg !29
  %177 = bitcast i32 %176 to float, !dbg !29
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #1, !dbg !29
  %179 = bitcast i32 %178 to float, !dbg !29
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %19) #1, !dbg !29
  %181 = bitcast i32 %180 to float, !dbg !29
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %19) #1, !dbg !29
  %183 = bitcast i32 %182 to float, !dbg !29
  %184 = extractelement <8 x i32> %28, i64 7, !dbg !30
  %185 = mul i32 %184, 89408, !dbg !30
  %186 = extractelement <8 x i32> %28, i64 6, !dbg !30
  %187 = mul i32 %186, 89408, !dbg !30
  %188 = extractelement <8 x i32> %28, i64 5, !dbg !30
  %189 = mul i32 %188, 89408, !dbg !30
  %190 = extractelement <8 x i32> %28, i64 4, !dbg !30
  %191 = mul i32 %190, 89408, !dbg !30
  %192 = extractelement <8 x i32> %28, i64 3, !dbg !30
  %193 = mul i32 %192, 89408, !dbg !30
  %194 = extractelement <8 x i32> %28, i64 2, !dbg !30
  %195 = mul i32 %194, 89408, !dbg !30
  %196 = extractelement <8 x i32> %28, i64 1, !dbg !30
  %197 = mul i32 %196, 89408, !dbg !30
  %198 = extractelement <8 x i32> %28, i64 0, !dbg !30
  %199 = mul i32 %198, 89408, !dbg !30
  %200 = add i32 %185, %32, !dbg !31
  %201 = add i32 %187, %33, !dbg !31
  %202 = add i32 %189, %34, !dbg !31
  %203 = add i32 %191, %35, !dbg !31
  %204 = add i32 %193, %36, !dbg !31
  %205 = add i32 %195, %37, !dbg !31
  %206 = add i32 %197, %38, !dbg !31
  %207 = add i32 %199, %39, !dbg !31
  %208 = sext i32 %200 to i64, !dbg !32
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !32
  %210 = sext i32 %201 to i64, !dbg !32
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !32
  %212 = sext i32 %202 to i64, !dbg !32
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !32
  %214 = sext i32 %203 to i64, !dbg !32
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !32
  %216 = sext i32 %204 to i64, !dbg !32
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !32
  %218 = sext i32 %205 to i64, !dbg !32
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !32
  %220 = sext i32 %206 to i64, !dbg !32
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !32
  %222 = sext i32 %207 to i64, !dbg !32
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !32
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %18) #1, !dbg !33
  %225 = bitcast i32 %224 to float, !dbg !33
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %18) #1, !dbg !33
  %227 = bitcast i32 %226 to float, !dbg !33
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %18) #1, !dbg !33
  %229 = bitcast i32 %228 to float, !dbg !33
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %18) #1, !dbg !33
  %231 = bitcast i32 %230 to float, !dbg !33
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %19) #1, !dbg !33
  %233 = bitcast i32 %232 to float, !dbg !33
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %19) #1, !dbg !33
  %235 = bitcast i32 %234 to float, !dbg !33
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %19) #1, !dbg !33
  %237 = bitcast i32 %236 to float, !dbg !33
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %19) #1, !dbg !33
  %239 = bitcast i32 %238 to float, !dbg !33
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !34
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !34
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !34
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !34
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !34
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !34
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !34
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !34
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %18) #1, !dbg !35
  %249 = bitcast i32 %248 to float, !dbg !35
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %18) #1, !dbg !35
  %251 = bitcast i32 %250 to float, !dbg !35
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %18) #1, !dbg !35
  %253 = bitcast i32 %252 to float, !dbg !35
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %18) #1, !dbg !35
  %255 = bitcast i32 %254 to float, !dbg !35
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %19) #1, !dbg !35
  %257 = bitcast i32 %256 to float, !dbg !35
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %19) #1, !dbg !35
  %259 = bitcast i32 %258 to float, !dbg !35
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %19) #1, !dbg !35
  %261 = bitcast i32 %260 to float, !dbg !35
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %19) #1, !dbg !35
  %263 = bitcast i32 %262 to float, !dbg !35
  %264 = fadd float %81, %105, !dbg !36
  %265 = fadd float %83, %107, !dbg !36
  %266 = fadd float %85, %109, !dbg !36
  %267 = fadd float %87, %111, !dbg !36
  %268 = fadd float %89, %113, !dbg !36
  %269 = fadd float %91, %115, !dbg !36
  %270 = fadd float %93, %117, !dbg !36
  %271 = fadd float %95, %119, !dbg !36
  %272 = fmul float %264, 0x3FDD4FDF40000000, !dbg !37
  %273 = fmul float %265, 0x3FDD4FDF40000000, !dbg !37
  %274 = fmul float %266, 0x3FDD4FDF40000000, !dbg !37
  %275 = fmul float %267, 0x3FDD4FDF40000000, !dbg !37
  %276 = fmul float %268, 0x3FDD4FDF40000000, !dbg !37
  %277 = fmul float %269, 0x3FDD4FDF40000000, !dbg !37
  %278 = fmul float %270, 0x3FDD4FDF40000000, !dbg !37
  %279 = fmul float %271, 0x3FDD4FDF40000000, !dbg !37
  %280 = fadd float %272, 0xBF9EB851E0000000, !dbg !38
  %281 = fadd float %273, 0xBF9EB851E0000000, !dbg !38
  %282 = fadd float %274, 0xBF9EB851E0000000, !dbg !38
  %283 = fadd float %275, 0xBF9EB851E0000000, !dbg !38
  %284 = fadd float %276, 0xBF9EB851E0000000, !dbg !38
  %285 = fadd float %277, 0xBF9EB851E0000000, !dbg !38
  %286 = fadd float %278, 0xBF9EB851E0000000, !dbg !38
  %287 = fadd float %279, 0xBF9EB851E0000000, !dbg !38
  %288 = fadd float %145, %169, !dbg !39
  %289 = fadd float %147, %171, !dbg !39
  %290 = fadd float %149, %173, !dbg !39
  %291 = fadd float %151, %175, !dbg !39
  %292 = fadd float %153, %177, !dbg !39
  %293 = fadd float %155, %179, !dbg !39
  %294 = fadd float %157, %181, !dbg !39
  %295 = fadd float %159, %183, !dbg !39
  %296 = fmul float %288, 0x3FDCAC0840000000, !dbg !40
  %297 = fmul float %289, 0x3FDCAC0840000000, !dbg !40
  %298 = fmul float %290, 0x3FDCAC0840000000, !dbg !40
  %299 = fmul float %291, 0x3FDCAC0840000000, !dbg !40
  %300 = fmul float %292, 0x3FDCAC0840000000, !dbg !40
  %301 = fmul float %293, 0x3FDCAC0840000000, !dbg !40
  %302 = fmul float %294, 0x3FDCAC0840000000, !dbg !40
  %303 = fmul float %295, 0x3FDCAC0840000000, !dbg !40
  %304 = fadd float %296, 0xBFB6872B00000000, !dbg !41
  %305 = fadd float %297, 0xBFB6872B00000000, !dbg !41
  %306 = fadd float %298, 0xBFB6872B00000000, !dbg !41
  %307 = fadd float %299, 0xBFB6872B00000000, !dbg !41
  %308 = fadd float %300, 0xBFB6872B00000000, !dbg !41
  %309 = fadd float %301, 0xBFB6872B00000000, !dbg !41
  %310 = fadd float %302, 0xBFB6872B00000000, !dbg !41
  %311 = fadd float %303, 0xBFB6872B00000000, !dbg !41
  %312 = icmp eq <16 x i16> %31, <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, !dbg !42
  %313 = fadd float %225, %249, !dbg !43
  %314 = fadd float %227, %251, !dbg !43
  %315 = fadd float %229, %253, !dbg !43
  %316 = fadd float %231, %255, !dbg !43
  %317 = fadd float %233, %257, !dbg !43
  %318 = fadd float %235, %259, !dbg !43
  %319 = fadd float %237, %261, !dbg !43
  %320 = fadd float %239, %263, !dbg !43
  %321 = extractelement <16 x i1> %312, i64 7, !dbg !44
  %322 = select i1 %321, float %280, float %313, !dbg !44
  %323 = extractelement <16 x i1> %312, i64 6, !dbg !44
  %324 = select i1 %323, float %281, float %314, !dbg !44
  %325 = extractelement <16 x i1> %312, i64 5, !dbg !44
  %326 = select i1 %325, float %282, float %315, !dbg !44
  %327 = extractelement <16 x i1> %312, i64 4, !dbg !44
  %328 = select i1 %327, float %283, float %316, !dbg !44
  %329 = extractelement <16 x i1> %312, i64 3, !dbg !44
  %330 = select i1 %329, float %284, float %317, !dbg !44
  %331 = extractelement <16 x i1> %312, i64 2, !dbg !44
  %332 = select i1 %331, float %285, float %318, !dbg !44
  %333 = extractelement <16 x i1> %312, i64 1, !dbg !44
  %334 = select i1 %333, float %286, float %319, !dbg !44
  %335 = extractelement <16 x i1> %312, i64 0, !dbg !44
  %336 = select i1 %335, float %287, float %320, !dbg !44
  %337 = extractelement <16 x i1> %312, i64 15, !dbg !45
  %338 = select i1 %337, float %304, float %322, !dbg !45
  %339 = extractelement <16 x i1> %312, i64 14, !dbg !45
  %340 = select i1 %339, float %305, float %324, !dbg !45
  %341 = extractelement <16 x i1> %312, i64 13, !dbg !45
  %342 = select i1 %341, float %306, float %326, !dbg !45
  %343 = extractelement <16 x i1> %312, i64 12, !dbg !45
  %344 = select i1 %343, float %307, float %328, !dbg !45
  %345 = extractelement <16 x i1> %312, i64 11, !dbg !45
  %346 = select i1 %345, float %308, float %330, !dbg !45
  %347 = extractelement <16 x i1> %312, i64 10, !dbg !45
  %348 = select i1 %347, float %309, float %332, !dbg !45
  %349 = extractelement <16 x i1> %312, i64 9, !dbg !45
  %350 = select i1 %349, float %310, float %334, !dbg !45
  %351 = extractelement <16 x i1> %312, i64 8, !dbg !45
  %352 = select i1 %351, float %311, float %336, !dbg !45
  %353 = sext i32 %10 to i64, !dbg !46
  %354 = getelementptr float, ptr addrspace(1) %2, i64 %353, !dbg !46
  %355 = sext i32 %14 to i64, !dbg !46
  %356 = getelementptr float, ptr addrspace(1) %2, i64 %355, !dbg !46
  %357 = bitcast float %338 to i32, !dbg !47
  %358 = bitcast float %340 to i32, !dbg !47
  %359 = bitcast float %342 to i32, !dbg !47
  %360 = bitcast float %344 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %357, i32 %358, i32 %359, i32 %360, ptr addrspace(1) %354, i1 %18) #1, !dbg !47
  %361 = bitcast float %346 to i32, !dbg !47
  %362 = bitcast float %348 to i32, !dbg !47
  %363 = bitcast float %350 to i32, !dbg !47
  %364 = bitcast float %352 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %362, i32 %363, i32 %364, ptr addrspace(1) %356, i1 %19) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czsjkplu4vuwjvbmqo4opacr5o5quwojzou6zsvommpfwnrzmygz.py", directory: "inductor_cache/zs")
!4 = !{ptr @triton_poi_fused_add_copy_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_copy_mul_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_copy_mul_1", linkageName: "triton_poi_fused_add_copy_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 42, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 47, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 47, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 56, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 56, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 47, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 47, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 54, column: 34, scope: !7)
!46 = !DILocation(line: 55, column: 25, scope: !7)
!47 = !DILocation(line: 55, column: 37, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
