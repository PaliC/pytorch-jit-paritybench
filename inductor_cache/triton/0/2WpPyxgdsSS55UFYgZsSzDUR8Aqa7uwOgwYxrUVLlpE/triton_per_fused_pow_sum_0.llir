; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_pow_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1024, !dbg !14
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = shl i32 %7, 7, !dbg !16
  %18 = and i32 %17, 31744, !dbg !16
  %19 = or disjoint i32 %18, 32768, !dbg !16
  %20 = add i32 %12, %18, !dbg !17
  %21 = add i32 %19, %12, !dbg !17
  %22 = sext i32 %20 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = fmul float %31, %31, !dbg !20
  %45 = fmul float %32, %32, !dbg !20
  %46 = fmul float %33, %33, !dbg !20
  %47 = fmul float %34, %34, !dbg !20
  %48 = fmul float %40, %40, !dbg !20
  %49 = fmul float %41, %41, !dbg !20
  %50 = fmul float %42, %42, !dbg !20
  %51 = fmul float %43, %43, !dbg !20
  %52 = fadd float %44, %48, !dbg !21
  %53 = select i1 %14, float %52, float 0.000000e+00, !dbg !21
  %54 = fadd float %45, %49, !dbg !21
  %55 = select i1 %14, float %54, float 0.000000e+00, !dbg !21
  %56 = fadd float %46, %50, !dbg !21
  %57 = select i1 %14, float %56, float 0.000000e+00, !dbg !21
  %58 = fadd float %47, %51, !dbg !21
  %59 = select i1 %14, float %58, float 0.000000e+00, !dbg !21
  %60 = bitcast float %53 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %53, %62, !dbg !21
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !21
  %68 = bitcast float %55 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %55, %70, !dbg !21
  %72 = bitcast float %71 to i32, !dbg !26
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = fadd float %71, %74, !dbg !21
  %76 = bitcast float %57 to i32, !dbg !26
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = fadd float %57, %78, !dbg !21
  %80 = bitcast float %79 to i32, !dbg !26
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = fadd float %79, %82, !dbg !21
  %84 = bitcast float %59 to i32, !dbg !26
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = fadd float %59, %86, !dbg !21
  %88 = bitcast float %87 to i32, !dbg !26
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = fadd float %87, %90, !dbg !21
  %92 = icmp eq i32 %8, 0, !dbg !26
  %93 = and i32 %16, 7, !dbg !26
  %94 = shl nuw nsw i32 %10, 3, !dbg !26
  %95 = or disjoint i32 %94, %93, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = bitcast float %67 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %92) #3, !dbg !26
  %98 = or disjoint i32 %94, 8, !dbg !26
  %99 = or disjoint i32 %98, %93, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = bitcast float %75 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %92) #3, !dbg !26
  %102 = or disjoint i32 %94, 16, !dbg !26
  %103 = or disjoint i32 %102, %93, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !26
  %105 = bitcast float %83 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %92) #3, !dbg !26
  %106 = or disjoint i32 %94, 24, !dbg !26
  %107 = or disjoint i32 %106, %93, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = bitcast float %91 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %92) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %110 = icmp slt i32 %7, 256, !dbg !26
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !26
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #3, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = fadd float %113, %115, !dbg !21
  %117 = bitcast float %116 to i32, !dbg !26
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = fadd float %116, %119, !dbg !21
  %121 = bitcast float %120 to i32, !dbg !26
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = fadd float %120, %123, !dbg !21
  %125 = and i32 %7, 7, !dbg !26
  %126 = icmp eq i32 %125, 0, !dbg !26
  %127 = and i1 %110, %126, !dbg !26
  %128 = bitcast float %124 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %128, i1 %127) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %130 = load i32, ptr addrspace(3) %129, align 16, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !26
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %134 = load i32, ptr addrspace(3) %133, align 16, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %137, i32 %130, i32 %132, i32 %134, i32 %136, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !27
  %140 = sext i32 %13 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !28
  %142 = icmp eq i32 %93, 0, !dbg !29
  %143 = and i1 %142, %15, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %141, i1 %143) #3, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckpuqddrfjza74o2nb3uuflir2muecdutmgwe33zdwhy6vuogcxm.py", directory: "inductor_cache/kp")
!4 = !{ptr @triton_per_fused_pow_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_pow_sum_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_pow_sum_0", linkageName: "triton_per_fused_pow_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 40, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 45, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 35, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 35, column: 27, scope: !7)
!28 = !DILocation(line: 36, column: 25, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 4, scope: !7)
