; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %17, 512, !dbg !13
  %22 = or disjoint i32 %17, 640, !dbg !13
  %23 = or disjoint i32 %17, 768, !dbg !13
  %24 = or disjoint i32 %17, 896, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = icmp slt i32 %25, 256, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %27 = sdiv i32 %.frozen, 256, !dbg !16
  %28 = mul i32 %27, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = sdiv i32 %16, 256, !dbg !16
  %30 = sdiv i32 %17, 256, !dbg !16
  %31 = sdiv i32 %18, 256, !dbg !16
  %32 = sdiv i32 %19, 256, !dbg !16
  %33 = sdiv i32 %20, 256, !dbg !16
  %34 = sdiv i32 %21, 256, !dbg !16
  %35 = sdiv i32 %22, 256, !dbg !16
  %36 = sdiv i32 %23, 256, !dbg !16
  %37 = sdiv i32 %24, 256, !dbg !16
  %38 = shl i32 %25, 8, !dbg !18
  %39 = add i32 %.decomposed, %38, !dbg !19
  %40 = shl i32 %27, 16, !dbg !20
  %41 = shl i32 %29, 16, !dbg !20
  %42 = add i32 %39, %40, !dbg !21
  %43 = add i32 %41, %.decomposed, !dbg !19
  %44 = add i32 %43, %38, !dbg !21
  %45 = sext i32 %42 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %44 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %26) #4, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %.idx = shl nuw nsw i32 %10, 3, !dbg !23
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %60 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !23
  %61 = shl nuw nsw i32 %10, 1, !dbg !23
  %62 = or disjoint i32 %61, 2, !dbg !23
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !23
  %64 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !23
  %65 = or disjoint i32 %61, 4, !dbg !23
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %67 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #4, !dbg !23
  %68 = or disjoint i32 %61, 6, !dbg !23
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !23
  %70 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !23
  %71 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %72 = load float, ptr addrspace(3) %71, align 8, !dbg !23
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !23
  %73 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !23
  %75 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %76 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !23
  %77 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %78 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %79 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %79, i1 true) #4, !dbg !23
  %80 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %80, i1 true) #4, !dbg !23
  %81 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %81, i1 true) #4, !dbg !23
  %82 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %82, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %83 = load float, ptr addrspace(3) %71, align 8, !dbg !23
  %84 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %85 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %86 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  %87 = shl nsw i32 %30, 8, !dbg !24
  %88 = shl nsw i32 %31, 8, !dbg !24
  %89 = shl nsw i32 %32, 8, !dbg !24
  %90 = shl nsw i32 %33, 8, !dbg !24
  %91 = shl nsw i32 %34, 8, !dbg !24
  %92 = shl nsw i32 %35, 8, !dbg !24
  %93 = shl nsw i32 %36, 8, !dbg !24
  %94 = shl nsw i32 %37, 8, !dbg !24
  %95 = add i32 %87, %25, !dbg !25
  %96 = add i32 %88, %25, !dbg !25
  %97 = add i32 %89, %25, !dbg !25
  %98 = add i32 %90, %25, !dbg !25
  %99 = add i32 %25, %91, !dbg !25
  %100 = add i32 %25, %92, !dbg !25
  %101 = add i32 %25, %93, !dbg !25
  %102 = add i32 %25, %94, !dbg !25
  %103 = sext i32 %95 to i64, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !26
  %105 = sext i32 %96 to i64, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !26
  %107 = sext i32 %97 to i64, !dbg !26
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !26
  %109 = sext i32 %98 to i64, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !26
  %111 = sext i32 %99 to i64, !dbg !26
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !26
  %113 = sext i32 %100 to i64, !dbg !26
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !26
  %115 = sext i32 %101 to i64, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !26
  %117 = sext i32 %102 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !26
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %26) #4, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %26) #4, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %26) #4, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %26) #4, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %26) #4, !dbg !27
  %128 = bitcast i32 %127 to float, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %26) #4, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %26) #4, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %26) #4, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %135, 0, !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %136, 0, !dbg !28
  br i1 %.not.i, label %142, label %137, !dbg !28

137:                                              ; preds = %5
  br i1 %.not1.i, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

142:                                              ; preds = %5
  br i1 %.not1.i, label %145, label %143, !dbg !28

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %138, %140, %143, %145
  %.0.i = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i5 = icmp eq i32 %147, 0, !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i8 = icmp eq i32 %148, 0, !dbg !28
  br i1 %.not.i5, label %154, label %149, !dbg !28

149:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !28
  br label %__nv_sqrtf.exit9, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !28
  br label %__nv_sqrtf.exit9, !dbg !28

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %157, label %155, !dbg !28

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !28
  br label %__nv_sqrtf.exit9, !dbg !28

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !28
  br label %__nv_sqrtf.exit9, !dbg !28

__nv_sqrtf.exit9:                                 ; preds = %150, %152, %155, %157
  %.0.i7 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i10 = icmp eq i32 %159, 0, !dbg !28
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i13 = icmp eq i32 %160, 0, !dbg !28
  br i1 %.not.i10, label %166, label %161, !dbg !28

161:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %164, label %162, !dbg !28

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !28
  br label %__nv_sqrtf.exit14, !dbg !28

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !28
  br label %__nv_sqrtf.exit14, !dbg !28

166:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %169, label %167, !dbg !28

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !28
  br label %__nv_sqrtf.exit14, !dbg !28

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !28
  br label %__nv_sqrtf.exit14, !dbg !28

__nv_sqrtf.exit14:                                ; preds = %162, %164, %167, %169
  %.0.i12 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !28
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i15 = icmp eq i32 %171, 0, !dbg !28
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i18 = icmp eq i32 %172, 0, !dbg !28
  br i1 %.not.i15, label %178, label %173, !dbg !28

173:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %176, label %174, !dbg !28

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

178:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %181, label %179, !dbg !28

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

__nv_sqrtf.exit19:                                ; preds = %174, %176, %179, %181
  %.0.i17 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !28
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i20 = icmp eq i32 %183, 0, !dbg !28
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i23 = icmp eq i32 %184, 0, !dbg !28
  br i1 %.not.i20, label %190, label %185, !dbg !28

185:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %188, label %186, !dbg !28

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

190:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %193, label %191, !dbg !28

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

__nv_sqrtf.exit24:                                ; preds = %186, %188, %191, %193
  %.0.i22 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !28
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i25 = icmp eq i32 %195, 0, !dbg !28
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i28 = icmp eq i32 %196, 0, !dbg !28
  br i1 %.not.i25, label %202, label %197, !dbg !28

197:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %200, label %198, !dbg !28

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

202:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %205, label %203, !dbg !28

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

__nv_sqrtf.exit29:                                ; preds = %198, %200, %203, %205
  %.0.i27 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !28
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i30 = icmp eq i32 %207, 0, !dbg !28
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i33 = icmp eq i32 %208, 0, !dbg !28
  br i1 %.not.i30, label %214, label %209, !dbg !28

209:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %212, label %210, !dbg !28

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

214:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %217, label %215, !dbg !28

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

__nv_sqrtf.exit34:                                ; preds = %210, %212, %215, %217
  %.0.i32 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !28
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i35 = icmp eq i32 %219, 0, !dbg !28
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i38 = icmp eq i32 %220, 0, !dbg !28
  br i1 %.not.i35, label %226, label %221, !dbg !28

221:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %224, label %222, !dbg !28

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

226:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %229, label %227, !dbg !28

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

__nv_sqrtf.exit39:                                ; preds = %222, %224, %227, %229
  %.0.i37 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !28
  %231 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !29
  %232 = fadd float %.0.i7, 0x3DDB7CDFE0000000, !dbg !29
  %233 = fadd float %.0.i12, 0x3DDB7CDFE0000000, !dbg !29
  %234 = fadd float %.0.i17, 0x3DDB7CDFE0000000, !dbg !29
  %235 = fadd float %.0.i22, 0x3DDB7CDFE0000000, !dbg !29
  %236 = fadd float %.0.i27, 0x3DDB7CDFE0000000, !dbg !29
  %237 = fadd float %.0.i32, 0x3DDB7CDFE0000000, !dbg !29
  %238 = fadd float %.0.i37, 0x3DDB7CDFE0000000, !dbg !29
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %231) #4, !dbg !30
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %232) #4, !dbg !30
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %233) #4, !dbg !30
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %234) #4, !dbg !30
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %235) #4, !dbg !30
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %236) #4, !dbg !30
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %237) #4, !dbg !30
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %238) #4, !dbg !30
  %247 = shl i32 %17, 8, !dbg !31
  %248 = shl i32 %18, 8, !dbg !31
  %249 = shl i32 %19, 8, !dbg !31
  %250 = shl i32 %20, 8, !dbg !31
  %251 = shl i32 %21, 8, !dbg !31
  %252 = shl i32 %22, 8, !dbg !31
  %253 = shl i32 %23, 8, !dbg !31
  %254 = shl i32 %24, 8, !dbg !31
  %255 = add i32 %247, %25, !dbg !32
  %256 = add i32 %248, %25, !dbg !32
  %257 = add i32 %249, %25, !dbg !32
  %258 = add i32 %250, %25, !dbg !32
  %259 = add i32 %25, %251, !dbg !32
  %260 = add i32 %25, %252, !dbg !32
  %261 = add i32 %25, %253, !dbg !32
  %262 = add i32 %25, %254, !dbg !32
  %263 = sext i32 %255 to i64, !dbg !33
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !33
  %265 = sext i32 %256 to i64, !dbg !33
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !33
  %267 = sext i32 %257 to i64, !dbg !33
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !33
  %269 = sext i32 %258 to i64, !dbg !33
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !33
  %271 = sext i32 %259 to i64, !dbg !33
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !33
  %273 = sext i32 %260 to i64, !dbg !33
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !33
  %275 = sext i32 %261 to i64, !dbg !33
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !33
  %277 = sext i32 %262 to i64, !dbg !33
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !33
  %279 = bitcast float %239 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %264, i1 %26) #4, !dbg !34
  %280 = bitcast float %240 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %280, ptr addrspace(1) %266, i1 %26) #4, !dbg !34
  %281 = bitcast float %241 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %281, ptr addrspace(1) %268, i1 %26) #4, !dbg !34
  %282 = bitcast float %242 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %270, i1 %26) #4, !dbg !34
  %283 = bitcast float %243 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %283, ptr addrspace(1) %272, i1 %26) #4, !dbg !34
  %284 = bitcast float %244 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %274, i1 %26) #4, !dbg !34
  %285 = bitcast float %245 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %276, i1 %26) #4, !dbg !34
  %286 = bitcast float %246 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %278, i1 %26) #4, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbz4vrgsakrmgibrwoz3lrwtgpdjfh3eyl7xoetset6qrmexmdew.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_18", linkageName: "triton_poi_fused_add_div_sqrt_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 34, scope: !7)
!32 = !DILocation(line: 38, column: 30, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 45, scope: !7)
!35 = !DILocation(line: 38, column: 4, scope: !7)
