; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %30 = sdiv i32 %.frozen, 4096, !dbg !14
  %31 = srem i32 %30, 320, !dbg !15
  %32 = mul i32 %30, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %32, !dbg !16
  %33 = srem i32 %29, 4096, !dbg !16
  %34 = sdiv i32 %28, 1310720, !dbg !17
  %35 = icmp slt i32 %31, 96, !dbg !18
  %36 = mul nsw i32 %.decomposed, 96, !dbg !19
  %37 = mul nsw i32 %33, 96, !dbg !19
  %38 = mul nsw i32 %34, 393216, !dbg !20
  %39 = add nsw i32 %36, %38, !dbg !21
  %40 = add nsw i32 %38, %37, !dbg !21
  %41 = add nsw i32 %39, %31, !dbg !22
  %42 = add nsw i32 %40, %31, !dbg !22
  %43 = sext i32 %41 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %42 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %35, i32 0, i1 %35) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %35, i32 0, i1 %35) #3, !dbg !24
  %49 = sext i32 %31 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %59 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %60, 0, !dbg !30
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %61, 0, !dbg !30
  br i1 %.not.i, label %67, label %62, !dbg !30

62:                                               ; preds = %22
  br i1 %.not1.i, label %65, label %63, !dbg !30

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

67:                                               ; preds = %22
  br i1 %.not1.i, label %70, label %68, !dbg !30

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !30
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %72, 0, !dbg !30
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !30
  br i1 %.not.i1, label %79, label %74, !dbg !30

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !30

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !30
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %92 = add nsw i32 %31, -96, !dbg !36
  %93 = icmp ult i32 %92, 64, !dbg !36
  %94 = shl nsw i32 %.decomposed, 6, !dbg !37
  %95 = shl nsw i32 %33, 6, !dbg !37
  %96 = shl nsw i32 %34, 18, !dbg !38
  %97 = add nsw i32 %94, %96, !dbg !39
  %98 = add nsw i32 %96, %95, !dbg !39
  %99 = add nsw i32 %97, %92, !dbg !40
  %100 = add nsw i32 %98, %92, !dbg !40
  %101 = sext i32 %99 to i64, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !41
  %103 = sext i32 %100 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !41
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %93, i32 0, i1 %93) #3, !dbg !42
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #3, !dbg !42
  %107 = sext i32 %92 to i64, !dbg !43
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %107, !dbg !43
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %93, i32 0, i1 %93) #3, !dbg !44
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %93, i32 0, i1 %93) #3, !dbg !44
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %107, !dbg !45
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %93, i32 0, i1 %93) #3, !dbg !46
  %113 = bitcast i32 %112 to float, !dbg !46
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %93, i32 0, i1 %93) #3, !dbg !46
  %115 = bitcast i32 %114 to float, !dbg !46
  %116 = fadd float %113, 0x3EE4F8B580000000, !dbg !47
  %117 = fadd float %115, 0x3EE4F8B580000000, !dbg !47
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i6 = icmp eq i32 %118, 0, !dbg !48
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i9 = icmp eq i32 %119, 0, !dbg !48
  br i1 %.not.i6, label %125, label %120, !dbg !48

120:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %123, label %121, !dbg !48

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !48

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

__nv_sqrtf.exit10:                                ; preds = %121, %123, %126, %128
  %.0.i8 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !48
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i11 = icmp eq i32 %130, 0, !dbg !48
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i14 = icmp eq i32 %131, 0, !dbg !48
  br i1 %.not.i11, label %137, label %132, !dbg !48

132:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %135, label %133, !dbg !48

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !48

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

__nv_sqrtf.exit15:                                ; preds = %133, %135, %138, %140
  %.0.i13 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !48
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !49
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !49
  %144 = getelementptr float, ptr addrspace(1) %8, i64 %107, !dbg !50
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %93, i32 0, i1 %93) #3, !dbg !51
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %93, i32 0, i1 %93) #3, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %9, i64 %107, !dbg !52
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %93, i32 0, i1 %93) #3, !dbg !53
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %93, i32 0, i1 %93) #3, !dbg !53
  %150 = add nsw i32 %31, -160, !dbg !54
  %151 = icmp ult i32 %150, 96, !dbg !54
  %152 = add nsw i32 %39, %150, !dbg !55
  %153 = add nsw i32 %40, %150, !dbg !55
  %154 = sext i32 %152 to i64, !dbg !56
  %155 = getelementptr float, ptr addrspace(1) %10, i64 %154, !dbg !56
  %156 = sext i32 %153 to i64, !dbg !56
  %157 = getelementptr float, ptr addrspace(1) %10, i64 %156, !dbg !56
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %151, i32 0, i1 %151) #3, !dbg !57
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %151, i32 0, i1 %151) #3, !dbg !57
  %160 = sext i32 %150 to i64, !dbg !58
  %161 = getelementptr float, ptr addrspace(1) %11, i64 %160, !dbg !58
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %151, i32 0, i1 %151) #3, !dbg !59
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %151, i32 0, i1 %151) #3, !dbg !59
  %164 = getelementptr float, ptr addrspace(1) %12, i64 %160, !dbg !60
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %151, i32 0, i1 %151) #3, !dbg !61
  %166 = bitcast i32 %165 to float, !dbg !61
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %151, i32 0, i1 %151) #3, !dbg !61
  %168 = bitcast i32 %167 to float, !dbg !61
  %169 = fadd float %166, 0x3EE4F8B580000000, !dbg !62
  %170 = fadd float %168, 0x3EE4F8B580000000, !dbg !62
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i16 = icmp eq i32 %171, 0, !dbg !63
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i19 = icmp eq i32 %172, 0, !dbg !63
  br i1 %.not.i16, label %178, label %173, !dbg !63

173:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %176, label %174, !dbg !63

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit20, !dbg !63

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit20, !dbg !63

178:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %181, label %179, !dbg !63

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit20, !dbg !63

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !63
  br label %__nv_sqrtf.exit20, !dbg !63

__nv_sqrtf.exit20:                                ; preds = %174, %176, %179, %181
  %.0.i18 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !63
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i21 = icmp eq i32 %183, 0, !dbg !63
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i24 = icmp eq i32 %184, 0, !dbg !63
  br i1 %.not.i21, label %190, label %185, !dbg !63

185:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %188, label %186, !dbg !63

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit25, !dbg !63

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit25, !dbg !63

190:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %193, label %191, !dbg !63

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit25, !dbg !63

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !63
  br label %__nv_sqrtf.exit25, !dbg !63

__nv_sqrtf.exit25:                                ; preds = %186, %188, %191, %193
  %.0.i23 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !63
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !64
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !64
  %197 = getelementptr float, ptr addrspace(1) %13, i64 %160, !dbg !65
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %151, i32 0, i1 %151) #3, !dbg !66
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %151, i32 0, i1 %151) #3, !dbg !66
  %200 = getelementptr float, ptr addrspace(1) %14, i64 %160, !dbg !67
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %151, i32 0, i1 %151) #3, !dbg !68
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %151, i32 0, i1 %151) #3, !dbg !68
  %203 = icmp sgt i32 %31, 255, !dbg !69
  %204 = add nsw i32 %31, -256, !dbg !70
  %205 = add nsw i32 %97, %204, !dbg !71
  %206 = add nsw i32 %98, %204, !dbg !71
  %207 = sext i32 %205 to i64, !dbg !72
  %208 = getelementptr float, ptr addrspace(1) %15, i64 %207, !dbg !72
  %209 = sext i32 %206 to i64, !dbg !72
  %210 = getelementptr float, ptr addrspace(1) %15, i64 %209, !dbg !72
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %203, i32 0, i1 %203) #3, !dbg !73
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %203, i32 0, i1 %203) #3, !dbg !73
  %213 = sext i32 %204 to i64, !dbg !74
  %214 = getelementptr float, ptr addrspace(1) %16, i64 %213, !dbg !74
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %203, i32 0, i1 %203) #3, !dbg !75
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %203, i32 0, i1 %203) #3, !dbg !75
  %217 = getelementptr float, ptr addrspace(1) %17, i64 %213, !dbg !76
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %203, i32 0, i1 %203) #3, !dbg !77
  %219 = bitcast i32 %218 to float, !dbg !77
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %203, i32 0, i1 %203) #3, !dbg !77
  %221 = bitcast i32 %220 to float, !dbg !77
  %222 = fadd float %219, 0x3EE4F8B580000000, !dbg !78
  %223 = fadd float %221, 0x3EE4F8B580000000, !dbg !78
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i26 = icmp eq i32 %224, 0, !dbg !79
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i29 = icmp eq i32 %225, 0, !dbg !79
  br i1 %.not.i26, label %231, label %226, !dbg !79

226:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %229, label %227, !dbg !79

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

231:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %234, label %232, !dbg !79

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

__nv_sqrtf.exit30:                                ; preds = %227, %229, %232, %234
  %.0.i28 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !79
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i31 = icmp eq i32 %236, 0, !dbg !79
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i34 = icmp eq i32 %237, 0, !dbg !79
  br i1 %.not.i31, label %243, label %238, !dbg !79

238:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %241, label %239, !dbg !79

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

243:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %246, label %244, !dbg !79

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

__nv_sqrtf.exit35:                                ; preds = %239, %241, %244, %246
  %.0.i33 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !79
  %248 = insertelement <8 x i32> poison, i32 %212, i64 0, !dbg !73
  %249 = insertelement <8 x i32> %248, i32 %211, i64 1, !dbg !73
  %250 = insertelement <8 x i32> %249, i32 %47, i64 2, !dbg !73
  %251 = insertelement <8 x i32> %250, i32 %48, i64 3, !dbg !73
  %252 = insertelement <8 x i32> %251, i32 %105, i64 4, !dbg !73
  %253 = insertelement <8 x i32> %252, i32 %106, i64 5, !dbg !73
  %254 = insertelement <8 x i32> %253, i32 %158, i64 6, !dbg !73
  %255 = insertelement <8 x i32> %254, i32 %159, i64 7, !dbg !73
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !73
  %257 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !75
  %258 = insertelement <8 x i32> %257, i32 %215, i64 1, !dbg !75
  %259 = insertelement <8 x i32> %258, i32 %51, i64 2, !dbg !75
  %260 = insertelement <8 x i32> %259, i32 %52, i64 3, !dbg !75
  %261 = insertelement <8 x i32> %260, i32 %109, i64 4, !dbg !75
  %262 = insertelement <8 x i32> %261, i32 %110, i64 5, !dbg !75
  %263 = insertelement <8 x i32> %262, i32 %162, i64 6, !dbg !75
  %264 = insertelement <8 x i32> %263, i32 %163, i64 7, !dbg !75
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !75
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !80
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !80
  %268 = getelementptr float, ptr addrspace(1) %18, i64 %213, !dbg !81
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %203, i32 0, i1 %203) #3, !dbg !82
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %203, i32 0, i1 %203) #3, !dbg !82
  %271 = getelementptr float, ptr addrspace(1) %19, i64 %213, !dbg !83
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %203, i32 0, i1 %203) #3, !dbg !84
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %203, i32 0, i1 %203) #3, !dbg !84
  %274 = fsub <8 x float> %256, %265, !dbg !85
  %275 = insertelement <8 x float> poison, float %267, i64 0, !dbg !86
  %276 = insertelement <8 x float> %275, float %266, i64 1, !dbg !86
  %277 = insertelement <8 x float> %276, float %84, i64 2, !dbg !86
  %278 = insertelement <8 x float> %277, float %85, i64 3, !dbg !86
  %279 = insertelement <8 x float> %278, float %142, i64 4, !dbg !86
  %280 = insertelement <8 x float> %279, float %143, i64 5, !dbg !86
  %281 = insertelement <8 x float> %280, float %195, i64 6, !dbg !86
  %282 = insertelement <8 x float> %281, float %196, i64 7, !dbg !86
  %283 = fmul <8 x float> %274, %282, !dbg !86
  %284 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !82
  %285 = insertelement <8 x i32> %284, i32 %269, i64 1, !dbg !82
  %286 = insertelement <8 x i32> %285, i32 %87, i64 2, !dbg !82
  %287 = insertelement <8 x i32> %286, i32 %88, i64 3, !dbg !82
  %288 = insertelement <8 x i32> %287, i32 %145, i64 4, !dbg !82
  %289 = insertelement <8 x i32> %288, i32 %146, i64 5, !dbg !82
  %290 = insertelement <8 x i32> %289, i32 %198, i64 6, !dbg !82
  %291 = insertelement <8 x i32> %290, i32 %199, i64 7, !dbg !82
  %292 = bitcast <8 x i32> %291 to <8 x float>, !dbg !82
  %293 = fmul <8 x float> %283, %292, !dbg !87
  %294 = insertelement <8 x i32> poison, i32 %273, i64 0, !dbg !84
  %295 = insertelement <8 x i32> %294, i32 %272, i64 1, !dbg !84
  %296 = insertelement <8 x i32> %295, i32 %90, i64 2, !dbg !84
  %297 = insertelement <8 x i32> %296, i32 %91, i64 3, !dbg !84
  %298 = insertelement <8 x i32> %297, i32 %148, i64 4, !dbg !84
  %299 = insertelement <8 x i32> %298, i32 %149, i64 5, !dbg !84
  %300 = insertelement <8 x i32> %299, i32 %201, i64 6, !dbg !84
  %301 = insertelement <8 x i32> %300, i32 %202, i64 7, !dbg !84
  %302 = bitcast <8 x i32> %301 to <8 x float>, !dbg !84
  %303 = fadd <8 x float> %293, %302, !dbg !88
  %304 = fcmp olt <8 x float> %303, zeroinitializer, !dbg !89
  %305 = extractelement <8 x i1> %304, i64 7, !dbg !93
  %306 = extractelement <8 x float> %303, i64 7, !dbg !93
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !93
  %308 = extractelement <8 x i1> %304, i64 6, !dbg !93
  %309 = extractelement <8 x float> %303, i64 6, !dbg !93
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !93
  %311 = extractelement <8 x i1> %304, i64 5, !dbg !95
  %312 = extractelement <8 x float> %303, i64 5, !dbg !95
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !95
  %314 = extractelement <8 x i1> %304, i64 4, !dbg !95
  %315 = extractelement <8 x float> %303, i64 4, !dbg !95
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !95
  %317 = extractelement <8 x i1> %304, i64 3, !dbg !97
  %318 = extractelement <8 x float> %303, i64 3, !dbg !97
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !97
  %320 = extractelement <8 x i1> %304, i64 2, !dbg !97
  %321 = extractelement <8 x float> %303, i64 2, !dbg !97
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !97
  %323 = extractelement <8 x i1> %304, i64 1, !dbg !99
  %324 = extractelement <8 x float> %303, i64 1, !dbg !99
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !99
  %326 = extractelement <8 x i1> %304, i64 0, !dbg !99
  %327 = extractelement <8 x float> %303, i64 0, !dbg !99
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !99
  %329 = select i1 %203, float %325, float 0.000000e+00, !dbg !100
  %330 = select i1 %203, float %328, float 0.000000e+00, !dbg !100
  %331 = select i1 %151, float %310, float %329, !dbg !101
  %332 = select i1 %151, float %307, float %330, !dbg !101
  %333 = select i1 %93, float %316, float %331, !dbg !101
  %334 = select i1 %93, float %313, float %332, !dbg !101
  %335 = select i1 %35, float %322, float %333, !dbg !101
  %336 = select i1 %35, float %319, float %334, !dbg !101
  %337 = sext i32 %28 to i64, !dbg !102
  %338 = getelementptr float, ptr addrspace(1) %20, i64 %337, !dbg !102
  %339 = bitcast float %335 to i32, !dbg !103
  %340 = bitcast float %336 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %339, i32 %340, ptr addrspace(1) %338, i1 true) #3, !dbg !103
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyojx5rxtmc46wbk5xuzfdftcvrwx4yutxbw2mbclu5b5xnlw4mt.py", directory: "inductor_cache/yo")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 33, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 56, column: 20, scope: !7)
!37 = !DILocation(line: 57, column: 34, scope: !7)
!38 = !DILocation(line: 57, column: 46, scope: !7)
!39 = !DILocation(line: 57, column: 39, scope: !7)
!40 = !DILocation(line: 57, column: 52, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 66, scope: !7)
!43 = !DILocation(line: 58, column: 31, scope: !7)
!44 = !DILocation(line: 58, column: 44, scope: !7)
!45 = !DILocation(line: 60, column: 31, scope: !7)
!46 = !DILocation(line: 60, column: 44, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 27, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 69, column: 31, scope: !7)
!51 = !DILocation(line: 69, column: 44, scope: !7)
!52 = !DILocation(line: 71, column: 31, scope: !7)
!53 = !DILocation(line: 71, column: 44, scope: !7)
!54 = !DILocation(line: 80, column: 20, scope: !7)
!55 = !DILocation(line: 81, column: 53, scope: !7)
!56 = !DILocation(line: 81, column: 32, scope: !7)
!57 = !DILocation(line: 81, column: 68, scope: !7)
!58 = !DILocation(line: 82, column: 32, scope: !7)
!59 = !DILocation(line: 82, column: 46, scope: !7)
!60 = !DILocation(line: 84, column: 32, scope: !7)
!61 = !DILocation(line: 84, column: 46, scope: !7)
!62 = !DILocation(line: 86, column: 20, scope: !7)
!63 = !DILocation(line: 87, column: 27, scope: !7)
!64 = !DILocation(line: 89, column: 20, scope: !7)
!65 = !DILocation(line: 93, column: 32, scope: !7)
!66 = !DILocation(line: 93, column: 46, scope: !7)
!67 = !DILocation(line: 95, column: 32, scope: !7)
!68 = !DILocation(line: 95, column: 46, scope: !7)
!69 = !DILocation(line: 101, column: 20, scope: !7)
!70 = !DILocation(line: 104, column: 62, scope: !7)
!71 = !DILocation(line: 104, column: 53, scope: !7)
!72 = !DILocation(line: 104, column: 32, scope: !7)
!73 = !DILocation(line: 104, column: 68, scope: !7)
!74 = !DILocation(line: 105, column: 32, scope: !7)
!75 = !DILocation(line: 105, column: 46, scope: !7)
!76 = !DILocation(line: 107, column: 32, scope: !7)
!77 = !DILocation(line: 107, column: 46, scope: !7)
!78 = !DILocation(line: 109, column: 20, scope: !7)
!79 = !DILocation(line: 110, column: 27, scope: !7)
!80 = !DILocation(line: 112, column: 20, scope: !7)
!81 = !DILocation(line: 116, column: 32, scope: !7)
!82 = !DILocation(line: 116, column: 46, scope: !7)
!83 = !DILocation(line: 118, column: 32, scope: !7)
!84 = !DILocation(line: 118, column: 46, scope: !7)
!85 = !DILocation(line: 106, column: 20, scope: !7)
!86 = !DILocation(line: 115, column: 20, scope: !7)
!87 = !DILocation(line: 117, column: 20, scope: !7)
!88 = !DILocation(line: 119, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 121, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !94)
!94 = !DILocation(line: 98, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 74, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !98)
!98 = !DILocation(line: 50, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!100 = !DILocation(line: 123, column: 35, scope: !7)
!101 = !DILocation(line: 0, scope: !7)
!102 = !DILocation(line: 127, column: 25, scope: !7)
!103 = !DILocation(line: 127, column: 37, scope: !7)
!104 = !DILocation(line: 127, column: 4, scope: !7)
