; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_sum_37(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 1024, !dbg !15
  %16 = mul i32 %15, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %7, 7, !dbg !17
  %18 = and i32 %17, 15360, !dbg !17
  %19 = add nsw i32 %.decomposed, %18, !dbg !18
  %20 = shl i32 %15, 14, !dbg !19
  %21 = add i32 %19, %20, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !22
  %29 = bitcast i32 %25 to float, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = add nsw i32 %19, 65536, !dbg !23
  %34 = add i32 %33, %20, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = fadd float %29, %42, !dbg !27
  %47 = fadd float %30, %43, !dbg !27
  %48 = fadd float %31, %44, !dbg !27
  %49 = fadd float %32, %45, !dbg !27
  %50 = bitcast float %46 to i32, !dbg !28
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = fadd float %46, %52, !dbg !32
  %54 = bitcast float %53 to i32, !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = fadd float %53, %56, !dbg !32
  %58 = bitcast float %47 to i32, !dbg !28
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = fadd float %47, %60, !dbg !32
  %62 = bitcast float %61 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fadd float %61, %64, !dbg !32
  %66 = bitcast float %48 to i32, !dbg !28
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = fadd float %48, %68, !dbg !32
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %69, %72, !dbg !32
  %74 = bitcast float %49 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %49, %76, !dbg !32
  %78 = bitcast float %77 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %77, %80, !dbg !32
  %82 = icmp eq i32 %8, 0, !dbg !28
  %83 = and i32 %14, 3, !dbg !28
  %84 = shl nuw nsw i32 %10, 2, !dbg !28
  %85 = or disjoint i32 %84, %83, !dbg !28
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !28
  %87 = bitcast float %57 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %82) #3, !dbg !28
  %88 = or disjoint i32 %84, 4, !dbg !28
  %89 = or disjoint i32 %88, %83, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !28
  %91 = bitcast float %65 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %82) #3, !dbg !28
  %92 = or disjoint i32 %84, 8, !dbg !28
  %93 = or disjoint i32 %92, %83, !dbg !28
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  %95 = bitcast float %73 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %82) #3, !dbg !28
  %96 = or disjoint i32 %84, 12, !dbg !28
  %97 = or disjoint i32 %96, %83, !dbg !28
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !28
  %99 = bitcast float %81 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 %82) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %100 = icmp slt i32 %7, 128, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !28
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %101, i1 %100) #3, !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = fadd float %103, %105, !dbg !32
  %107 = bitcast float %106 to i32, !dbg !28
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = fadd float %106, %109, !dbg !32
  %111 = and i32 %7, 3, !dbg !28
  %112 = icmp eq i32 %111, 0, !dbg !28
  %113 = and i1 %100, %112, !dbg !28
  %114 = bitcast float %110 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %114, i1 %113) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !28
  %116 = load i32, ptr addrspace(3) %115, align 16, !dbg !28
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %118 = load i32, ptr addrspace(3) %117, align 16, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !28
  %120 = load i32, ptr addrspace(3) %119, align 16, !dbg !28
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !28
  %122 = load i32, ptr addrspace(3) %121, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %123, i32 %116, i32 %118, i32 %120, i32 %122, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !34
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 1.600000e+01) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %127 = sext i32 %13 to i64, !dbg !36
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !36
  %129 = icmp eq i32 %83, 0, !dbg !37
  %130 = bitcast float %126 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %128, i1 %129) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvyfli6e4lgkjhtwxzzgcpqgar5mw7ysn2furiwxf6encv55ia55.py", directory: "inductor_cache/vy")
!4 = !{ptr @triton_per_fused_mean_sum_37, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_sum_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_sum_37", linkageName: "triton_per_fused_mean_sum_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 40, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 51, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 56, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 34, column: 53, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 64, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 37, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
!36 = !DILocation(line: 41, column: 28, scope: !7)
!37 = !DILocation(line: 41, column: 39, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
