; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = icmp slt i32 %23, 289, !dbg !19
  %26 = icmp slt i32 %24, 289, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %27 = sdiv i32 %.frozen, 64, !dbg !20
  %28 = mul i32 %27, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = srem i32 %17, 64, !dbg !21
  %30 = shl i32 %23, 6, !dbg !22
  %31 = shl i32 %24, 6, !dbg !22
  %32 = mul i32 %27, 18496, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %33, %30, !dbg !25
  %35 = add i32 %33, %31, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = and i1 %18, %25, !dbg !27
  %41 = and i1 %26, %18, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #4, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #4, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = and i32 %12, 508, !dbg !28
  %53 = lshr i32 %12, 6, !dbg !28
  %54 = and i32 %53, 4, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %52, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %43, i32 %44, i32 %45, i32 %46, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %58 = load <2 x float>, ptr addrspace(3) %57, align 8, !dbg !28
  %59 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 1040, !dbg !28
  %60 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %48, i32 %49, i32 %50, i32 %51, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %61 = load <2 x float>, ptr addrspace(3) %57, align 8, !dbg !28
  %62 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !28
  %63 = sext i32 %29 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !29
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !31
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %19) #4, !dbg !32
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !32
  %70 = bitcast i32 %68 to float, !dbg !32
  %71 = bitcast i32 %69 to float, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !33
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %19) #4, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !35
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %19) #4, !dbg !36
  %76 = fadd float %70, 0x3EE4F8B580000000, !dbg !37
  %77 = fadd float %71, 0x3EE4F8B580000000, !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %78, 0, !dbg !38
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %79, 0, !dbg !38
  br i1 %.not.i, label %85, label %80, !dbg !38

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

85:                                               ; preds = %8
  br i1 %.not1.i, label %88, label %86, !dbg !38

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i11 = icmp eq i32 %90, 0, !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i14 = icmp eq i32 %91, 0, !dbg !38
  br i1 %.not.i11, label %97, label %92, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %93, %95, %98, %100
  %.0.i13 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !38
  %102 = extractvalue { i32, i32 } %65, 1, !dbg !30
  %103 = extractvalue { i32, i32 } %65, 0, !dbg !30
  %104 = extractelement <2 x float> %60, i64 1, !dbg !28
  %105 = extractelement <2 x float> %60, i64 0, !dbg !28
  %106 = extractelement <2 x float> %58, i64 1, !dbg !28
  %107 = extractelement <2 x float> %58, i64 0, !dbg !28
  %108 = extractvalue { i32, i32 } %75, 1, !dbg !36
  %109 = extractvalue { i32, i32 } %75, 0, !dbg !36
  %110 = extractvalue { i32, i32 } %73, 1, !dbg !34
  %111 = extractvalue { i32, i32 } %73, 0, !dbg !34
  %112 = and i32 %11, 3, !dbg !17
  %113 = or disjoint i32 %21, %112, !dbg !18
  %114 = icmp slt i32 %113, 289, !dbg !19
  %115 = lshr i32 %11, 2, !dbg !12
  %116 = and i32 %115, 31, !dbg !12
  %117 = or disjoint i32 %116, %10, !dbg !13
  %118 = or disjoint i32 %117, 224, !dbg !13
  %119 = icmp slt i32 %118, 256, !dbg !14
  %120 = and i1 %119, %114, !dbg !27
  %121 = or disjoint i32 %117, 192, !dbg !13
  %122 = icmp slt i32 %121, 256, !dbg !14
  %123 = and i1 %122, %114, !dbg !27
  %124 = or disjoint i32 %117, 160, !dbg !13
  %125 = icmp slt i32 %124, 256, !dbg !14
  %126 = and i1 %125, %114, !dbg !27
  %127 = or disjoint i32 %117, 128, !dbg !13
  %128 = icmp slt i32 %127, 256, !dbg !14
  %129 = and i1 %128, %114, !dbg !27
  %130 = or disjoint i32 %117, 96, !dbg !13
  %131 = icmp slt i32 %130, 256, !dbg !14
  %132 = and i1 %131, %114, !dbg !27
  %133 = or disjoint i32 %117, 64, !dbg !13
  %134 = icmp slt i32 %133, 256, !dbg !14
  %135 = and i1 %134, %114, !dbg !27
  %136 = or disjoint i32 %117, 32, !dbg !13
  %137 = icmp slt i32 %136, 256, !dbg !14
  %138 = and i1 %137, %114, !dbg !27
  %139 = icmp slt i32 %117, 256, !dbg !14
  %140 = and i1 %139, %114, !dbg !27
  %.frozen16 = freeze i32 %118, !dbg !20
  %141 = sdiv i32 %.frozen16, 64, !dbg !20
  %142 = sdiv i32 %121, 64, !dbg !20
  %.frozen20 = freeze i32 %124, !dbg !20
  %143 = sdiv i32 %.frozen20, 64, !dbg !20
  %144 = sdiv i32 %127, 64, !dbg !20
  %.frozen22 = freeze i32 %130, !dbg !20
  %145 = sdiv i32 %.frozen22, 64, !dbg !20
  %146 = sdiv i32 %133, 64, !dbg !20
  %.frozen24 = freeze i32 %136, !dbg !20
  %147 = sdiv i32 %.frozen24, 64, !dbg !20
  %.frozen18 = freeze i32 %117, !dbg !20
  %148 = sdiv i32 %.frozen18, 64, !dbg !20
  %149 = mul i32 %141, 64, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %149, !dbg !21
  %150 = mul i32 %148, 64, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %150, !dbg !21
  %151 = mul i32 %143, 64, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %151, !dbg !21
  %152 = mul i32 %145, 64, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %152, !dbg !21
  %153 = mul i32 %147, 64, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %153, !dbg !21
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %156 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !30
  %157 = insertelement <2 x i32> %156, i32 %103, i64 1, !dbg !30
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !30
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %160 = shufflevector <2 x float> %62, <2 x float> %61, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %161 = insertelement <8 x float> %160, float %104, i64 4, !dbg !40
  %162 = insertelement <8 x float> %161, float %105, i64 5, !dbg !40
  %163 = insertelement <8 x float> %162, float %106, i64 6, !dbg !40
  %164 = insertelement <8 x float> %163, float %107, i64 7, !dbg !40
  %165 = fsub <8 x float> %164, %159, !dbg !40
  %166 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !36
  %167 = insertelement <2 x i32> %166, i32 %109, i64 1, !dbg !36
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !36
  %169 = shufflevector <2 x float> %168, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %170 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !34
  %171 = insertelement <2 x i32> %170, i32 %111, i64 1, !dbg !34
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !34
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %174 = insertelement <8 x float> poison, float %155, i64 0, !dbg !41
  %175 = insertelement <8 x float> %174, float %154, i64 1, !dbg !41
  %176 = shufflevector <8 x float> %175, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %177 = fmul <8 x float> %165, %176, !dbg !41
  %178 = fmul <8 x float> %177, %173, !dbg !42
  %179 = fadd <8 x float> %178, %169, !dbg !43
  %180 = fcmp olt <8 x float> %179, zeroinitializer, !dbg !44
  %181 = extractelement <8 x i1> %180, i64 7, !dbg !48
  %182 = extractelement <8 x float> %179, i64 7, !dbg !48
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !48
  %184 = extractelement <8 x i1> %180, i64 6, !dbg !48
  %185 = extractelement <8 x float> %179, i64 6, !dbg !48
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !48
  %187 = extractelement <8 x i1> %180, i64 5, !dbg !48
  %188 = extractelement <8 x float> %179, i64 5, !dbg !48
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !48
  %190 = extractelement <8 x i1> %180, i64 4, !dbg !48
  %191 = extractelement <8 x float> %179, i64 4, !dbg !48
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !48
  %193 = extractelement <8 x i1> %180, i64 3, !dbg !48
  %194 = extractelement <8 x float> %179, i64 3, !dbg !48
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !48
  %196 = extractelement <8 x i1> %180, i64 2, !dbg !48
  %197 = extractelement <8 x float> %179, i64 2, !dbg !48
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !48
  %199 = extractelement <8 x i1> %180, i64 1, !dbg !48
  %200 = extractelement <8 x float> %179, i64 1, !dbg !48
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !48
  %202 = extractelement <8 x i1> %180, i64 0, !dbg !48
  %203 = extractelement <8 x float> %179, i64 0, !dbg !48
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !48
  %205 = mul nsw i32 %.decomposed19, 289, !dbg !49
  %206 = mul nsw i32 %.decomposed25, 289, !dbg !49
  %207 = mul nsw i32 %.decomposed23, 289, !dbg !49
  %208 = mul nsw i32 %.decomposed21, 289, !dbg !49
  %209 = mul nsw i32 %.decomposed17, 289, !dbg !49
  %210 = add i32 %205, %113, !dbg !50
  %211 = add i32 %206, %113, !dbg !50
  %212 = add i32 %207, %113, !dbg !50
  %213 = add i32 %208, %113, !dbg !50
  %214 = add i32 %209, %113, !dbg !50
  %215 = mul i32 %148, 110976, !dbg !51
  %216 = mul i32 %147, 110976, !dbg !51
  %217 = mul i32 %146, 110976, !dbg !51
  %218 = mul i32 %145, 110976, !dbg !51
  %219 = mul i32 %144, 110976, !dbg !51
  %220 = mul i32 %143, 110976, !dbg !51
  %221 = mul i32 %142, 110976, !dbg !51
  %222 = mul i32 %141, 110976, !dbg !51
  %223 = add i32 %210, %215, !dbg !52
  %224 = add i32 %211, %216, !dbg !52
  %225 = add i32 %210, %217, !dbg !52
  %226 = add i32 %212, %218, !dbg !52
  %227 = add i32 %210, %219, !dbg !52
  %228 = add i32 %213, %220, !dbg !52
  %229 = add i32 %210, %221, !dbg !52
  %230 = add i32 %214, %222, !dbg !52
  %231 = sext i32 %223 to i64, !dbg !53
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !53
  %233 = sext i32 %224 to i64, !dbg !53
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !53
  %235 = sext i32 %225 to i64, !dbg !53
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !53
  %237 = sext i32 %226 to i64, !dbg !53
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !53
  %239 = sext i32 %227 to i64, !dbg !53
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !53
  %241 = sext i32 %228 to i64, !dbg !53
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !53
  %243 = sext i32 %229 to i64, !dbg !53
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !53
  %245 = sext i32 %230 to i64, !dbg !53
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %247 = shl i32 %11, 3, !dbg !54
  %248 = and i32 %247, 1016, !dbg !54
  %249 = and i32 %11, 127, !dbg !54
  %250 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %248, !dbg !54
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !54
  %252 = bitcast float %183 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !54
  %253 = or disjoint i32 %248, 4, !dbg !54
  %254 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %253, !dbg !54
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %253, !dbg !54
  %256 = bitcast float %186 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !54
  %257 = or disjoint i32 %248, 1, !dbg !54
  %258 = getelementptr float, ptr addrspace(3) %250, i32 %257, !dbg !54
  %259 = bitcast float %189 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !54
  %260 = or disjoint i32 %248, 5, !dbg !54
  %261 = lshr i32 %260, 2, !dbg !54
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !54
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !54
  %264 = bitcast float %192 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !54
  %265 = or disjoint i32 %248, 2, !dbg !54
  %266 = getelementptr float, ptr addrspace(3) %250, i32 %265, !dbg !54
  %267 = bitcast float %195 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !54
  %268 = or disjoint i32 %248, 6, !dbg !54
  %269 = lshr i32 %268, 2, !dbg !54
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !54
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !54
  %272 = bitcast float %198 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !54
  %273 = or disjoint i32 %248, 3, !dbg !54
  %274 = getelementptr float, ptr addrspace(3) %250, i32 %273, !dbg !54
  %275 = bitcast float %201 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !54
  %276 = or disjoint i32 %248, 7, !dbg !54
  %277 = lshr i32 %276, 2, !dbg !54
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !54
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !54
  %280 = bitcast float %204 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %281 = lshr i32 %249, 2, !dbg !54
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !54
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %249, !dbg !54
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !54
  %285 = or disjoint i32 %249, 128, !dbg !54
  %286 = lshr i32 %285, 2, !dbg !54
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !54
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !54
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !54
  %290 = or disjoint i32 %249, 256, !dbg !54
  %291 = lshr i32 %290, 2, !dbg !54
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !54
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !54
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !54
  %295 = or disjoint i32 %249, 384, !dbg !54
  %296 = lshr i32 %295, 2, !dbg !54
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !54
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !54
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !54
  %300 = or disjoint i32 %249, 512, !dbg !54
  %301 = lshr i32 %300, 2, !dbg !54
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !54
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !54
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !54
  %305 = or disjoint i32 %249, 640, !dbg !54
  %306 = lshr i32 %305, 2, !dbg !54
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !54
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !54
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !54
  %310 = or disjoint i32 %249, 768, !dbg !54
  %311 = lshr i32 %310, 2, !dbg !54
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !54
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !54
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !54
  %315 = or disjoint i32 %249, 896, !dbg !54
  %316 = lshr i32 %315, 2, !dbg !54
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !54
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !54
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %232, i1 %140) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %234, i1 %138) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %236, i1 %135) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %238, i1 %132) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %240, i1 %129) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %242, i1 %126) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %244, i1 %123) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %246, i1 %120) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyvvxjqypy5rye6lgizmzepubvl2ov5mocgdwc3su7vr7r42stux.py", directory: "inductor_cache/yv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 49, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 62, scope: !7)
!28 = !DILocation(line: 31, column: 54, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 48, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 49, column: 34, scope: !7)
!50 = !DILocation(line: 49, column: 30, scope: !7)
!51 = !DILocation(line: 49, column: 46, scope: !7)
!52 = !DILocation(line: 49, column: 39, scope: !7)
!53 = !DILocation(line: 49, column: 25, scope: !7)
!54 = !DILocation(line: 49, column: 58, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
