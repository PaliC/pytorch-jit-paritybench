; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 64, !dbg !14
  %21 = sdiv i32 %19, 64, !dbg !14
  %22 = srem i32 %20, 64, !dbg !15
  %23 = srem i32 %21, 64, !dbg !15
  %24 = mul i32 %20, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 64, !dbg !16
  %26 = sdiv i32 %17, 4096, !dbg !17
  %27 = sdiv i32 %19, 4096, !dbg !17
  %28 = srem i32 %26, 256, !dbg !18
  %29 = srem i32 %27, 256, !dbg !18
  %30 = sext i32 %22 to i64, !dbg !19
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = sext i32 %23 to i64, !dbg !19
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %42 = sext i32 %.decomposed to i64, !dbg !21
  %43 = getelementptr i64, ptr addrspace(1) %2, i64 %42, !dbg !21
  %44 = sext i32 %25 to i64, !dbg !21
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !22
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !22
  %58 = getelementptr i64, ptr addrspace(1) %4, i64 %42, !dbg !23
  %59 = getelementptr i64, ptr addrspace(1) %4, i64 %44, !dbg !23
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !24
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !24
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !24
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !24
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !24
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !24
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !24
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = getelementptr i64, ptr addrspace(1) %6, i64 %30, !dbg !27
  %84 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !27
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = sext i32 %17 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %8, i64 %111, !dbg !31
  %113 = sext i32 %19 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %8, i64 %113, !dbg !31
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !32
  %120 = bitcast i32 %116 to float, !dbg !32
  %121 = bitcast i32 %117 to float, !dbg !32
  %122 = bitcast i32 %118 to float, !dbg !32
  %123 = bitcast i32 %119 to float, !dbg !32
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !32
  %129 = bitcast i32 %125 to float, !dbg !32
  %130 = bitcast i32 %126 to float, !dbg !32
  %131 = bitcast i32 %127 to float, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = sext i32 %28 to i64, !dbg !33
  %134 = getelementptr float, ptr addrspace(1) %9, i64 %133, !dbg !33
  %135 = sext i32 %29 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %9, i64 %135, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !34
  %140 = bitcast i32 %139 to float, !dbg !34
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !34
  %142 = bitcast i32 %141 to float, !dbg !34
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !34
  %144 = bitcast i32 %143 to float, !dbg !34
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !34
  %146 = bitcast i32 %145 to float, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !34
  %148 = bitcast i32 %147 to float, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = lshr i64 %34, 57, !dbg !35
  %154 = and i64 %153, 64, !dbg !35
  %155 = add i64 %154, %34, !dbg !35
  %156 = lshr i64 %38, 57, !dbg !35
  %157 = and i64 %156, 64, !dbg !35
  %158 = add i64 %157, %38, !dbg !35
  %159 = lshr i64 %47, 57, !dbg !36
  %160 = and i64 %159, 64, !dbg !36
  %161 = lshr i64 %48, 57, !dbg !36
  %162 = and i64 %161, 64, !dbg !36
  %163 = lshr i64 %50, 57, !dbg !36
  %164 = and i64 %163, 64, !dbg !36
  %165 = lshr i64 %51, 57, !dbg !36
  %166 = and i64 %165, 64, !dbg !36
  %167 = lshr i64 %53, 57, !dbg !36
  %168 = and i64 %167, 64, !dbg !36
  %169 = lshr i64 %54, 57, !dbg !36
  %170 = and i64 %169, 64, !dbg !36
  %171 = lshr i64 %56, 57, !dbg !36
  %172 = and i64 %171, 64, !dbg !36
  %173 = lshr i64 %57, 57, !dbg !36
  %174 = and i64 %173, 64, !dbg !36
  %175 = shl i64 %155, 6, !dbg !37
  %176 = shl i64 %158, 6, !dbg !37
  %177 = shl nsw i32 %26, 12, !dbg !38
  %178 = shl nsw i32 %27, 12, !dbg !38
  %179 = sext i32 %177 to i64, !dbg !39
  %180 = sext i32 %178 to i64, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !40
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %160, !dbg !40
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %175, !dbg !40
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %179, !dbg !40
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !40
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %162, !dbg !40
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %175, !dbg !40
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %179, !dbg !40
  %189 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !40
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %164, !dbg !40
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %175, !dbg !40
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %179, !dbg !40
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !40
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %166, !dbg !40
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %175, !dbg !40
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %179, !dbg !40
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !40
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %168, !dbg !40
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %176, !dbg !40
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %180, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %170, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %176, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %180, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %172, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %176, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %180, !dbg !40
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %174, !dbg !40
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %176, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %180, !dbg !40
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #1, !dbg !41
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #1, !dbg !41
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #1, !dbg !41
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !41
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !41
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !41
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !41
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !41
  %221 = lshr i64 %61, 57, !dbg !42
  %222 = and i64 %221, 64, !dbg !42
  %223 = lshr i64 %62, 57, !dbg !42
  %224 = and i64 %223, 64, !dbg !42
  %225 = lshr i64 %64, 57, !dbg !42
  %226 = and i64 %225, 64, !dbg !42
  %227 = lshr i64 %65, 57, !dbg !42
  %228 = and i64 %227, 64, !dbg !42
  %229 = lshr i64 %67, 57, !dbg !42
  %230 = and i64 %229, 64, !dbg !42
  %231 = lshr i64 %68, 57, !dbg !42
  %232 = and i64 %231, 64, !dbg !42
  %233 = lshr i64 %70, 57, !dbg !42
  %234 = and i64 %233, 64, !dbg !42
  %235 = lshr i64 %71, 57, !dbg !42
  %236 = and i64 %235, 64, !dbg !42
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !43
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %222, !dbg !43
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %175, !dbg !43
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %179, !dbg !43
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %224, !dbg !43
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %175, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %179, !dbg !43
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !43
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %226, !dbg !43
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %175, !dbg !43
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %179, !dbg !43
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !43
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %228, !dbg !43
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %175, !dbg !43
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %179, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !43
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %230, !dbg !43
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %176, !dbg !43
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %180, !dbg !43
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !43
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %232, !dbg !43
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %176, !dbg !43
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %180, !dbg !43
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %234, !dbg !43
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %176, !dbg !43
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %180, !dbg !43
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !43
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %236, !dbg !43
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %176, !dbg !43
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %180, !dbg !43
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !44
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !44
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !44
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !44
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !44
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #1, !dbg !44
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !44
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !44
  %277 = lshr i64 %85, 57, !dbg !45
  %278 = and i64 %277, 64, !dbg !45
  %279 = add i64 %278, %85, !dbg !45
  %280 = lshr i64 %89, 57, !dbg !45
  %281 = and i64 %280, 64, !dbg !45
  %282 = add i64 %281, %89, !dbg !45
  %283 = shl i64 %279, 6, !dbg !46
  %284 = shl i64 %282, 6, !dbg !46
  %285 = getelementptr float, ptr addrspace(1) %182, i64 %283, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %179, !dbg !47
  %287 = getelementptr float, ptr addrspace(1) %186, i64 %283, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %179, !dbg !47
  %289 = getelementptr float, ptr addrspace(1) %190, i64 %283, !dbg !47
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %179, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %194, i64 %283, !dbg !47
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %179, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %198, i64 %284, !dbg !47
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %180, !dbg !47
  %295 = getelementptr float, ptr addrspace(1) %202, i64 %284, !dbg !47
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %180, !dbg !47
  %297 = getelementptr float, ptr addrspace(1) %206, i64 %284, !dbg !47
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %180, !dbg !47
  %299 = getelementptr float, ptr addrspace(1) %210, i64 %284, !dbg !47
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %180, !dbg !47
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !48
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !48
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !48
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !48
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !48
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #1, !dbg !48
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !48
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !48
  %309 = getelementptr float, ptr addrspace(1) %238, i64 %283, !dbg !49
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %179, !dbg !49
  %311 = getelementptr float, ptr addrspace(1) %242, i64 %283, !dbg !49
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %179, !dbg !49
  %313 = getelementptr float, ptr addrspace(1) %246, i64 %283, !dbg !49
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %179, !dbg !49
  %315 = getelementptr float, ptr addrspace(1) %250, i64 %283, !dbg !49
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %179, !dbg !49
  %317 = getelementptr float, ptr addrspace(1) %254, i64 %284, !dbg !49
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %180, !dbg !49
  %319 = getelementptr float, ptr addrspace(1) %258, i64 %284, !dbg !49
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %180, !dbg !49
  %321 = getelementptr float, ptr addrspace(1) %262, i64 %284, !dbg !49
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %180, !dbg !49
  %323 = getelementptr float, ptr addrspace(1) %266, i64 %284, !dbg !49
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %180, !dbg !49
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #1, !dbg !50
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #1, !dbg !50
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 true) #1, !dbg !50
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 true) #1, !dbg !50
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #1, !dbg !50
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 true) #1, !dbg !50
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 true) #1, !dbg !50
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 true) #1, !dbg !50
  %333 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !48
  %334 = insertelement <2 x i32> %333, i32 %213, i64 1, !dbg !48
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !48
  %336 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !50
  %337 = insertelement <2 x i32> %336, i32 %269, i64 1, !dbg !50
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !50
  %339 = fsub <2 x float> %338, %335, !dbg !51
  %340 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !52
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !52
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %343 = fmul <2 x float> %339, %342, !dbg !52
  %344 = fadd <2 x float> %343, %335, !dbg !53
  %345 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !48
  %346 = insertelement <2 x i32> %345, i32 %214, i64 1, !dbg !48
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !48
  %348 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !50
  %349 = insertelement <2 x i32> %348, i32 %270, i64 1, !dbg !50
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !50
  %351 = fsub <2 x float> %350, %347, !dbg !51
  %352 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !52
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !52
  %354 = shufflevector <2 x float> %353, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %355 = fmul <2 x float> %351, %354, !dbg !52
  %356 = fadd <2 x float> %355, %347, !dbg !53
  %357 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !48
  %358 = insertelement <2 x i32> %357, i32 %215, i64 1, !dbg !48
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !48
  %360 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !50
  %361 = insertelement <2 x i32> %360, i32 %271, i64 1, !dbg !50
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !50
  %363 = fsub <2 x float> %362, %359, !dbg !51
  %364 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !52
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !52
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %367 = fmul <2 x float> %363, %366, !dbg !52
  %368 = fadd <2 x float> %367, %359, !dbg !53
  %369 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !48
  %370 = insertelement <2 x i32> %369, i32 %216, i64 1, !dbg !48
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !48
  %372 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !50
  %373 = insertelement <2 x i32> %372, i32 %272, i64 1, !dbg !50
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !50
  %375 = fsub <2 x float> %374, %371, !dbg !51
  %376 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !52
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !52
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %379 = fmul <2 x float> %375, %378, !dbg !52
  %380 = fadd <2 x float> %379, %371, !dbg !53
  %381 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !48
  %382 = insertelement <2 x i32> %381, i32 %217, i64 1, !dbg !48
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !48
  %384 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !50
  %385 = insertelement <2 x i32> %384, i32 %273, i64 1, !dbg !50
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !50
  %387 = fsub <2 x float> %386, %383, !dbg !51
  %388 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !52
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !52
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %391 = fmul <2 x float> %387, %390, !dbg !52
  %392 = fadd <2 x float> %391, %383, !dbg !53
  %393 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !48
  %394 = insertelement <2 x i32> %393, i32 %218, i64 1, !dbg !48
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !48
  %396 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !50
  %397 = insertelement <2 x i32> %396, i32 %274, i64 1, !dbg !50
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !50
  %399 = fsub <2 x float> %398, %395, !dbg !51
  %400 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !52
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !52
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %403 = fmul <2 x float> %399, %402, !dbg !52
  %404 = fadd <2 x float> %403, %395, !dbg !53
  %405 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !48
  %406 = insertelement <2 x i32> %405, i32 %219, i64 1, !dbg !48
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !48
  %408 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !50
  %409 = insertelement <2 x i32> %408, i32 %275, i64 1, !dbg !50
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !50
  %411 = fsub <2 x float> %410, %407, !dbg !51
  %412 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !52
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !52
  %414 = shufflevector <2 x float> %413, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %415 = fmul <2 x float> %411, %414, !dbg !52
  %416 = fadd <2 x float> %415, %407, !dbg !53
  %417 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !48
  %418 = insertelement <2 x i32> %417, i32 %220, i64 1, !dbg !48
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !48
  %420 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !50
  %421 = insertelement <2 x i32> %420, i32 %276, i64 1, !dbg !50
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !50
  %423 = fsub <2 x float> %422, %419, !dbg !51
  %424 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !52
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !52
  %426 = shufflevector <2 x float> %425, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %427 = fmul <2 x float> %423, %426, !dbg !52
  %428 = fadd <2 x float> %427, %419, !dbg !53
  %429 = extractelement <2 x float> %344, i64 0, !dbg !54
  %430 = extractelement <2 x float> %344, i64 1, !dbg !55
  %431 = fsub float %429, %430, !dbg !54
  %432 = extractelement <2 x float> %356, i64 0, !dbg !54
  %433 = extractelement <2 x float> %356, i64 1, !dbg !55
  %434 = fsub float %432, %433, !dbg !54
  %435 = extractelement <2 x float> %368, i64 0, !dbg !54
  %436 = extractelement <2 x float> %368, i64 1, !dbg !55
  %437 = fsub float %435, %436, !dbg !54
  %438 = extractelement <2 x float> %380, i64 0, !dbg !54
  %439 = extractelement <2 x float> %380, i64 1, !dbg !55
  %440 = fsub float %438, %439, !dbg !54
  %441 = extractelement <2 x float> %392, i64 0, !dbg !54
  %442 = extractelement <2 x float> %392, i64 1, !dbg !55
  %443 = fsub float %441, %442, !dbg !54
  %444 = extractelement <2 x float> %404, i64 0, !dbg !54
  %445 = extractelement <2 x float> %404, i64 1, !dbg !55
  %446 = fsub float %444, %445, !dbg !54
  %447 = extractelement <2 x float> %416, i64 0, !dbg !54
  %448 = extractelement <2 x float> %416, i64 1, !dbg !55
  %449 = fsub float %447, %448, !dbg !54
  %450 = extractelement <2 x float> %428, i64 0, !dbg !54
  %451 = extractelement <2 x float> %428, i64 1, !dbg !55
  %452 = fsub float %450, %451, !dbg !54
  %453 = fmul float %431, %96, !dbg !56
  %454 = fmul float %434, %98, !dbg !56
  %455 = fmul float %437, %100, !dbg !56
  %456 = fmul float %440, %102, !dbg !56
  %457 = fmul float %443, %104, !dbg !56
  %458 = fmul float %446, %106, !dbg !56
  %459 = fmul float %449, %108, !dbg !56
  %460 = fmul float %452, %110, !dbg !56
  %461 = fadd float %430, %453, !dbg !55
  %462 = fadd float %433, %454, !dbg !55
  %463 = fadd float %436, %455, !dbg !55
  %464 = fadd float %439, %456, !dbg !55
  %465 = fadd float %442, %457, !dbg !55
  %466 = fadd float %445, %458, !dbg !55
  %467 = fadd float %448, %459, !dbg !55
  %468 = fadd float %451, %460, !dbg !55
  %469 = fadd float %120, %138, !dbg !57
  %470 = fadd float %121, %140, !dbg !57
  %471 = fadd float %122, %142, !dbg !57
  %472 = fadd float %123, %144, !dbg !57
  %473 = fadd float %129, %146, !dbg !57
  %474 = fadd float %130, %148, !dbg !57
  %475 = fadd float %131, %150, !dbg !57
  %476 = fadd float %132, %152, !dbg !57
  %477 = fadd float %469, %461, !dbg !58
  %478 = fadd float %470, %462, !dbg !58
  %479 = fadd float %471, %463, !dbg !58
  %480 = fadd float %472, %464, !dbg !58
  %481 = fadd float %473, %465, !dbg !58
  %482 = fadd float %474, %466, !dbg !58
  %483 = fadd float %475, %467, !dbg !58
  %484 = fadd float %476, %468, !dbg !58
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !59
  %486 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !59
  %487 = bitcast float %477 to i32, !dbg !60
  %488 = bitcast float %478 to i32, !dbg !60
  %489 = bitcast float %479 to i32, !dbg !60
  %490 = bitcast float %480 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %488, i32 %489, i32 %490, ptr addrspace(1) %485, i1 true) #1, !dbg !60
  %491 = bitcast float %481 to i32, !dbg !60
  %492 = bitcast float %482 to i32, !dbg !60
  %493 = bitcast float %483 to i32, !dbg !60
  %494 = bitcast float %484 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %491, i32 %492, i32 %493, i32 %494, ptr addrspace(1) %486, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmrtbzfwxvbldl7mlfase4metxdhjjd4vd2rak7xutalajdqqrzh.py", directory: "inductor_cache/mr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_4", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 40, scope: !7)
!38 = !DILocation(line: 44, column: 52, scope: !7)
!39 = !DILocation(line: 44, column: 47, scope: !7)
!40 = !DILocation(line: 44, column: 30, scope: !7)
!41 = !DILocation(line: 44, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 59, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 55, column: 41, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 59, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 60, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 28, scope: !7)
!60 = !DILocation(line: 65, column: 40, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
