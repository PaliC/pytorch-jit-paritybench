; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 1152000, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 900, !dbg !15
  %22 = srem i32 %21, 320, !dbg !16
  %23 = mul i32 %21, 900, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %19, 900, !dbg !17
  %25 = sdiv i32 %18, 288000, !dbg !18
  %26 = icmp slt i32 %22, 256, !dbg !19
  %27 = shl nsw i32 %.decomposed, 8, !dbg !20
  %28 = shl nsw i32 %24, 8, !dbg !20
  %29 = mul nsw i32 %25, 230400, !dbg !21
  %30 = add nsw i32 %22, %29, !dbg !22
  %31 = add nsw i32 %30, %27, !dbg !23
  %32 = add nsw i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %20, %26, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %40 = sext i32 %22 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %37, i32 0, i1 %37) #3, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %37, i32 0, i1 %37) #3, !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %37, i32 0, i1 %37) #3, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fadd float %46, 0x3EE4F8B580000000, !dbg !31
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %51, 0, !dbg !32
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %52, 0, !dbg !32
  br i1 %.not.i, label %58, label %53, !dbg !32

53:                                               ; preds = %12
  br i1 %.not1.i, label %56, label %54, !dbg !32

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

58:                                               ; preds = %12
  br i1 %.not1.i, label %61, label %59, !dbg !32

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !32
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %63, 0, !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !32
  br i1 %.not.i1, label %70, label %65, !dbg !32

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !32

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !32

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !32
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %37, i32 0, i1 %37) #3, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %37, i32 0, i1 %37) #3, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %37, i32 0, i1 %37) #3, !dbg !37
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %37, i32 0, i1 %37) #3, !dbg !37
  %83 = icmp sgt i32 %22, 255, !dbg !38
  %84 = shl nsw i32 %.decomposed, 6, !dbg !39
  %85 = shl nsw i32 %24, 6, !dbg !39
  %86 = mul nsw i32 %25, 57600, !dbg !40
  %87 = add nsw i32 %22, -256, !dbg !41
  %88 = add nsw i32 %87, %86, !dbg !42
  %89 = add nsw i32 %88, %84, !dbg !43
  %90 = add nsw i32 %88, %85, !dbg !43
  %91 = sext i32 %89 to i64, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !44
  %93 = sext i32 %90 to i64, !dbg !44
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !44
  %95 = and i1 %20, %83, !dbg !45
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %95, i32 0, i1 %95) #3, !dbg !46
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 0, i1 %95) #3, !dbg !46
  %98 = sext i32 %87 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !47
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %95, i32 0, i1 %95) #3, !dbg !48
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %95, i32 0, i1 %95) #3, !dbg !48
  %102 = getelementptr float, ptr addrspace(1) %7, i64 %98, !dbg !49
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %95, i32 0, i1 %95) #3, !dbg !50
  %104 = bitcast i32 %103 to float, !dbg !50
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %95, i32 0, i1 %95) #3, !dbg !50
  %106 = bitcast i32 %105 to float, !dbg !50
  %107 = fadd float %104, 0x3F50624DE0000000, !dbg !51
  %108 = fadd float %106, 0x3F50624DE0000000, !dbg !51
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %109, 0, !dbg !52
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !52
  br i1 %.not.i6, label %116, label %111, !dbg !52

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !52

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !52

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !52
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %121, 0, !dbg !52
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !52
  br i1 %.not.i11, label %128, label %123, !dbg !52

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !52

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !52

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !52
  %133 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !46
  %134 = insertelement <4 x i32> %133, i32 %96, i64 1, !dbg !46
  %135 = insertelement <4 x i32> %134, i32 %38, i64 2, !dbg !46
  %136 = insertelement <4 x i32> %135, i32 %39, i64 3, !dbg !46
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !46
  %138 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !48
  %139 = insertelement <4 x i32> %138, i32 %100, i64 1, !dbg !48
  %140 = insertelement <4 x i32> %139, i32 %42, i64 2, !dbg !48
  %141 = insertelement <4 x i32> %140, i32 %43, i64 3, !dbg !48
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !48
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !53
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !53
  %145 = getelementptr float, ptr addrspace(1) %8, i64 %98, !dbg !54
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %95, i32 0, i1 %95) #3, !dbg !55
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %95, i32 0, i1 %95) #3, !dbg !55
  %148 = getelementptr float, ptr addrspace(1) %9, i64 %98, !dbg !56
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %95, i32 0, i1 %95) #3, !dbg !57
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %95, i32 0, i1 %95) #3, !dbg !57
  %151 = fsub <4 x float> %137, %142, !dbg !58
  %152 = insertelement <4 x float> poison, float %144, i64 0, !dbg !59
  %153 = insertelement <4 x float> %152, float %143, i64 1, !dbg !59
  %154 = insertelement <4 x float> %153, float %75, i64 2, !dbg !59
  %155 = insertelement <4 x float> %154, float %76, i64 3, !dbg !59
  %156 = fmul <4 x float> %151, %155, !dbg !59
  %157 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !55
  %158 = insertelement <4 x i32> %157, i32 %146, i64 1, !dbg !55
  %159 = insertelement <4 x i32> %158, i32 %78, i64 2, !dbg !55
  %160 = insertelement <4 x i32> %159, i32 %79, i64 3, !dbg !55
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !55
  %162 = fmul <4 x float> %156, %161, !dbg !60
  %163 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !57
  %164 = insertelement <4 x i32> %163, i32 %149, i64 1, !dbg !57
  %165 = insertelement <4 x i32> %164, i32 %81, i64 2, !dbg !57
  %166 = insertelement <4 x i32> %165, i32 %82, i64 3, !dbg !57
  %167 = bitcast <4 x i32> %166 to <4 x float>, !dbg !57
  %168 = fadd <4 x float> %162, %167, !dbg !61
  %169 = fcmp olt <4 x float> %168, zeroinitializer, !dbg !62
  %170 = extractelement <4 x i1> %169, i64 3, !dbg !66
  %171 = extractelement <4 x float> %168, i64 3, !dbg !66
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !66
  %173 = extractelement <4 x i1> %169, i64 2, !dbg !66
  %174 = extractelement <4 x float> %168, i64 2, !dbg !66
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !66
  %176 = extractelement <4 x i1> %169, i64 1, !dbg !68
  %177 = extractelement <4 x float> %168, i64 1, !dbg !68
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !68
  %179 = extractelement <4 x i1> %169, i64 0, !dbg !68
  %180 = extractelement <4 x float> %168, i64 0, !dbg !68
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !68
  %182 = select i1 %26, float %175, float %178, !dbg !69
  %183 = select i1 %26, float %172, float %181, !dbg !69
  %184 = sext i32 %18 to i64, !dbg !70
  %185 = getelementptr float, ptr addrspace(1) %10, i64 %184, !dbg !70
  %186 = bitcast float %182 to i32, !dbg !71
  %187 = bitcast float %183 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %185, i1 %20) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpll5cic6idphn6urmwdsvztost3664bgkox2yezdlvtqfehcyt.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 65, scope: !7)
!26 = !DILocation(line: 33, column: 58, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 34, scope: !7)
!40 = !DILocation(line: 56, column: 45, scope: !7)
!41 = !DILocation(line: 56, column: 60, scope: !7)
!42 = !DILocation(line: 56, column: 39, scope: !7)
!43 = !DILocation(line: 56, column: 51, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 74, scope: !7)
!46 = !DILocation(line: 56, column: 66, scope: !7)
!47 = !DILocation(line: 57, column: 31, scope: !7)
!48 = !DILocation(line: 57, column: 45, scope: !7)
!49 = !DILocation(line: 59, column: 31, scope: !7)
!50 = !DILocation(line: 59, column: 45, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 27, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 68, column: 31, scope: !7)
!55 = !DILocation(line: 68, column: 45, scope: !7)
!56 = !DILocation(line: 70, column: 31, scope: !7)
!57 = !DILocation(line: 70, column: 45, scope: !7)
!58 = !DILocation(line: 58, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 73, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !67)
!67 = !DILocation(line: 50, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!69 = !DILocation(line: 0, scope: !7)
!70 = !DILocation(line: 77, column: 25, scope: !7)
!71 = !DILocation(line: 77, column: 37, scope: !7)
!72 = !DILocation(line: 77, column: 4, scope: !7)
