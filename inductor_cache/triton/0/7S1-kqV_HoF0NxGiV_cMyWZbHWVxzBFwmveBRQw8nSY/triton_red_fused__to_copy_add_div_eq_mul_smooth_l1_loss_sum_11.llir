; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp46 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp38 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp17 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !11 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 255, !dbg !12
  %13 = lshr i32 %12, 4, !dbg !13
  %14 = lshr i32 %12, 6, !dbg !14
  %15 = and i32 %11, 3, !dbg !15
  %16 = zext nneg i32 %13 to i64, !dbg !16
  %17 = getelementptr i64, ptr addrspace(1) %2, i64 %16, !dbg !16
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %17, i1 true, i1 true) #4, !dbg !17
  %19 = zext nneg i32 %12 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true) #4, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true) #4, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #4, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true) #4, !dbg !25
  %28 = lshr i64 %18, 61, !dbg !26
  %29 = and i64 %28, 4, !dbg !26
  %30 = add i64 %29, %18, !dbg !26
  %31 = icmp ugt i64 %30, 3, !dbg !27
  br i1 %31, label %32, label %33, !dbg !28

32:                                               ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 46, ptr nonnull @assertFunc_0, i64 1), !dbg !28
  unreachable, !dbg !28

33:                                               ; preds = %10
  %34 = lshr i32 %11, 2, !dbg !29
  %35 = and i32 %34, 3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %36 = shl nuw nsw i64 %30, 2, !dbg !31
  %37 = zext nneg i32 %35 to i64, !dbg !32
  %38 = shl nuw nsw i32 %14, 4, !dbg !33
  %39 = zext nneg i32 %38 to i64, !dbg !34
  %40 = or disjoint i64 %36, %39, !dbg !32
  %41 = or disjoint i64 %40, %37, !dbg !34
  %42 = getelementptr i64, ptr addrspace(1) %3, i64 %41, !dbg !35
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 true, i1 true) #4, !dbg !36
  %44 = lshr i64 %43, 61, !dbg !37
  %45 = and i64 %44, 4, !dbg !37
  %46 = add i64 %45, %43, !dbg !37
  %47 = icmp ugt i64 %46, 3, !dbg !38
  br i1 %47, label %48, label %49, !dbg !39

48:                                               ; preds = %33
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 51, ptr nonnull @assertFunc_1, i64 1), !dbg !39
  unreachable, !dbg !39

49:                                               ; preds = %33
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %50 = shl nuw nsw i32 %14, 2, !dbg !40
  %51 = zext nneg i32 %50 to i64, !dbg !41
  %52 = or disjoint i64 %30, %51, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 true, i32 0, i1 true) #4, !dbg !43
  %55 = or disjoint i64 %46, %51, !dbg !44
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !45
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 true, i32 0, i1 true) #4, !dbg !46
  %58 = zext nneg i32 %15 to i64, !dbg !47
  %59 = or disjoint i64 %40, %58, !dbg !48
  %60 = getelementptr i64, ptr addrspace(1) %3, i64 %59, !dbg !49
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %60, i1 true, i1 true) #4, !dbg !50
  %62 = lshr i64 %61, 61, !dbg !51
  %63 = and i64 %62, 4, !dbg !51
  %64 = add i64 %63, %61, !dbg !51
  %65 = icmp ugt i64 %64, 3, !dbg !52
  br i1 %65, label %66, label %67, !dbg !53

66:                                               ; preds = %49
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 59, ptr nonnull @assertFunc_2, i64 1), !dbg !53
  unreachable, !dbg !53

67:                                               ; preds = %49
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %68 = or disjoint i64 %64, %51, !dbg !54
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !55
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 true, i1 true) #4, !dbg !58
  %72 = lshr i64 %71, 61, !dbg !59
  %73 = and i64 %72, 4, !dbg !59
  %74 = add i64 %73, %71, !dbg !59
  %75 = icmp ugt i64 %74, 3, !dbg !60
  br i1 %75, label %76, label %77, !dbg !61

76:                                               ; preds = %67
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 76, ptr nonnull @assertFunc_4, i64 1), !dbg !61
  unreachable, !dbg !61

77:                                               ; preds = %67
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 true, i32 0, i1 true) #4, !dbg !62
  %79 = or disjoint i64 %74, %51, !dbg !63
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !64
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 true, i32 0, i1 true) #4, !dbg !65
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %60, i1 true, i1 true) #4, !dbg !66
  %83 = lshr i64 %82, 61, !dbg !67
  %84 = and i64 %83, 4, !dbg !67
  %85 = add i64 %84, %82, !dbg !67
  %86 = icmp ugt i64 %85, 3, !dbg !68
  br i1 %86, label %87, label %88, !dbg !69

87:                                               ; preds = %77
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 84, ptr nonnull @assertFunc_5, i64 1), !dbg !69
  unreachable, !dbg !69

88:                                               ; preds = %77
  %89 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !46
  %90 = insertelement <2 x i32> %89, i32 %78, i64 1, !dbg !46
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !46
  %92 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !43
  %93 = insertelement <2 x i32> %92, i32 %81, i64 1, !dbg !43
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !43
  %95 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !21
  %96 = insertelement <2 x i32> %95, i32 %25, i64 1, !dbg !21
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !21
  %98 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %99 = insertelement <2 x i32> %98, i32 %27, i64 1, !dbg !19
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !19
  %101 = lshr i32 %11, 5, !dbg !12
  %102 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %103 = or disjoint i64 %85, %51, !dbg !70
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %103, !dbg !71
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 true, i32 0, i1 true) #4, !dbg !72
  %106 = fadd <2 x float> %91, %94, !dbg !73
  %107 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !56
  %108 = insertelement <2 x i32> %107, i32 %105, i64 1, !dbg !56
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !56
  %110 = shufflevector <2 x float> %94, <2 x float> %91, <2 x i32> <i32 0, i32 3>, !dbg !74
  %111 = fadd <2 x float> %110, %109, !dbg !74
  %112 = fmul <2 x float> %106, %111, !dbg !75
  %113 = fcmp oeq <2 x float> %112, splat (float 4.000000e+00), !dbg !76
  %114 = uitofp <2 x i1> %113 to <2 x float>, !dbg !77
  %115 = fmul <2 x float> %100, %114, !dbg !78
  %116 = fmul <2 x float> %115, %97, !dbg !79
  %shift = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %117 = fsub <2 x float> %116, %shift, !dbg !80
  %118 = extractelement <2 x float> %117, i64 0, !dbg !80
  %119 = tail call float @llvm.fabs.f32(float %118), !dbg !81
  %120 = fcmp olt float %119, 1.000000e+00, !dbg !82
  %121 = fmul float %118, %118, !dbg !83
  %122 = fmul float %121, 5.000000e-01, !dbg !84
  %123 = fadd float %119, -5.000000e-01, !dbg !85
  %124 = fadd float %122, 0.000000e+00, !dbg !86
  %125 = select i1 %120, float %124, float %123, !dbg !87
  %126 = extractelement <2 x float> %115, i64 0, !dbg !88
  %127 = fadd float %126, 0.000000e+00, !dbg !88
  %128 = bitcast float %125 to i32, !dbg !89
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !89
  %130 = bitcast i32 %129 to float, !dbg !89
  %131 = fadd float %125, %130, !dbg !93
  %132 = bitcast float %131 to i32, !dbg !89
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !89
  %134 = bitcast i32 %133 to float, !dbg !89
  %135 = fadd float %131, %134, !dbg !93
  %136 = bitcast float %135 to i32, !dbg !89
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !89
  %138 = bitcast i32 %137 to float, !dbg !89
  %139 = fadd float %135, %138, !dbg !93
  %140 = bitcast float %139 to i32, !dbg !89
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !89
  %142 = bitcast i32 %141 to float, !dbg !89
  %143 = fadd float %139, %142, !dbg !93
  %144 = bitcast float %143 to i32, !dbg !89
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !89
  %146 = bitcast i32 %145 to float, !dbg !89
  %147 = fadd float %143, %146, !dbg !93
  %148 = icmp eq i32 %102, 0, !dbg !89
  %149 = and i32 %101, 7, !dbg !89
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !89
  %151 = bitcast float %147 to <1 x i32>, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %148) #4, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %152 = icmp slt i32 %11, 8, !dbg !89
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !89
  %154 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %152) #4, !dbg !89
  %155 = bitcast i32 %154 to float, !dbg !89
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !89
  %157 = bitcast i32 %156 to float, !dbg !89
  %158 = fadd float %155, %157, !dbg !93
  %159 = bitcast float %158 to i32, !dbg !89
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !89
  %161 = bitcast i32 %160 to float, !dbg !89
  %162 = fadd float %158, %161, !dbg !93
  %163 = bitcast float %162 to i32, !dbg !89
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !89
  %165 = bitcast i32 %164 to float, !dbg !89
  %166 = fadd float %162, %165, !dbg !93
  %167 = and i32 %11, 7, !dbg !89
  %168 = icmp eq i32 %167, 0, !dbg !89
  %169 = and i1 %152, %168, !dbg !89
  %170 = bitcast float %166 to <1 x i32>, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %170, i1 %169) #4, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %171 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %172 = bitcast float %127 to i32, !dbg !95
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !95
  %174 = bitcast i32 %173 to float, !dbg !95
  %175 = fadd float %127, %174, !dbg !97
  %176 = bitcast float %175 to i32, !dbg !95
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !95
  %178 = bitcast i32 %177 to float, !dbg !95
  %179 = fadd float %175, %178, !dbg !97
  %180 = bitcast float %179 to i32, !dbg !95
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !95
  %182 = bitcast i32 %181 to float, !dbg !95
  %183 = fadd float %179, %182, !dbg !97
  %184 = bitcast float %183 to i32, !dbg !95
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !95
  %186 = bitcast i32 %185 to float, !dbg !95
  %187 = fadd float %183, %186, !dbg !97
  %188 = bitcast float %187 to i32, !dbg !95
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !95
  %190 = bitcast i32 %189 to float, !dbg !95
  %191 = fadd float %187, %190, !dbg !97
  %192 = bitcast float %191 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %192, i1 %148) #4, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %193 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %152) #4, !dbg !95
  %194 = bitcast i32 %193 to float, !dbg !95
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !95
  %196 = bitcast i32 %195 to float, !dbg !95
  %197 = fadd float %194, %196, !dbg !97
  %198 = bitcast float %197 to i32, !dbg !95
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !95
  %200 = bitcast i32 %199 to float, !dbg !95
  %201 = fadd float %197, %200, !dbg !97
  %202 = bitcast float %201 to i32, !dbg !95
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !95
  %204 = bitcast i32 %203 to float, !dbg !95
  %205 = fadd float %201, %204, !dbg !97
  %206 = bitcast float %205 to <1 x i32>, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %206, i1 %169) #4, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %207 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #4, !dbg !98
  %209 = bitcast i32 %208 to float, !dbg !98
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #4, !dbg !99
  %211 = bitcast i32 %210 to float, !dbg !99
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #4, !dbg !100
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %207) #4, !dbg !101
  %214 = fadd float %212, %213, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %215 = icmp eq i32 %12, 0, !dbg !104
  %216 = bitcast float %214 to i32, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %1, i1 %215) #4, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", linkageName: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 23, scope: !11)
!14 = !DILocation(line: 33, column: 23, scope: !11)
!15 = !DILocation(line: 34, column: 23, scope: !11)
!16 = !DILocation(line: 36, column: 34, scope: !11)
!17 = !DILocation(line: 36, column: 39, scope: !11)
!18 = !DILocation(line: 37, column: 35, scope: !11)
!19 = !DILocation(line: 37, column: 40, scope: !11)
!20 = !DILocation(line: 38, column: 39, scope: !11)
!21 = !DILocation(line: 38, column: 44, scope: !11)
!22 = !DILocation(line: 39, column: 35, scope: !11)
!23 = !DILocation(line: 39, column: 40, scope: !11)
!24 = !DILocation(line: 41, column: 35, scope: !11)
!25 = !DILocation(line: 41, column: 40, scope: !11)
!26 = !DILocation(line: 45, column: 36, scope: !11)
!27 = !DILocation(line: 46, column: 41, scope: !11)
!28 = !DILocation(line: 46, column: 64, scope: !11)
!29 = !DILocation(line: 32, column: 25, scope: !11)
!30 = !DILocation(line: 32, column: 30, scope: !11)
!31 = !DILocation(line: 47, column: 41, scope: !11)
!32 = !DILocation(line: 47, column: 39, scope: !11)
!33 = !DILocation(line: 47, column: 51, scope: !11)
!34 = !DILocation(line: 47, column: 48, scope: !11)
!35 = !DILocation(line: 47, column: 34, scope: !11)
!36 = !DILocation(line: 47, column: 56, scope: !11)
!37 = !DILocation(line: 50, column: 36, scope: !11)
!38 = !DILocation(line: 51, column: 41, scope: !11)
!39 = !DILocation(line: 51, column: 64, scope: !11)
!40 = !DILocation(line: 52, column: 44, scope: !11)
!41 = !DILocation(line: 52, column: 42, scope: !11)
!42 = !DILocation(line: 52, column: 35, scope: !11)
!43 = !DILocation(line: 52, column: 49, scope: !11)
!44 = !DILocation(line: 53, column: 42, scope: !11)
!45 = !DILocation(line: 53, column: 35, scope: !11)
!46 = !DILocation(line: 53, column: 49, scope: !11)
!47 = !DILocation(line: 55, column: 40, scope: !11)
!48 = !DILocation(line: 55, column: 49, scope: !11)
!49 = !DILocation(line: 55, column: 35, scope: !11)
!50 = !DILocation(line: 55, column: 57, scope: !11)
!51 = !DILocation(line: 58, column: 39, scope: !11)
!52 = !DILocation(line: 59, column: 42, scope: !11)
!53 = !DILocation(line: 59, column: 66, scope: !11)
!54 = !DILocation(line: 60, column: 43, scope: !11)
!55 = !DILocation(line: 60, column: 35, scope: !11)
!56 = !DILocation(line: 60, column: 50, scope: !11)
!57 = !DILocation(line: 71, column: 66, scope: !11)
!58 = !DILocation(line: 72, column: 81, scope: !11)
!59 = !DILocation(line: 75, column: 39, scope: !11)
!60 = !DILocation(line: 76, column: 42, scope: !11)
!61 = !DILocation(line: 76, column: 66, scope: !11)
!62 = !DILocation(line: 77, column: 58, scope: !11)
!63 = !DILocation(line: 78, column: 43, scope: !11)
!64 = !DILocation(line: 78, column: 35, scope: !11)
!65 = !DILocation(line: 78, column: 58, scope: !11)
!66 = !DILocation(line: 80, column: 74, scope: !11)
!67 = !DILocation(line: 83, column: 39, scope: !11)
!68 = !DILocation(line: 84, column: 42, scope: !11)
!69 = !DILocation(line: 84, column: 66, scope: !11)
!70 = !DILocation(line: 85, column: 43, scope: !11)
!71 = !DILocation(line: 85, column: 35, scope: !11)
!72 = !DILocation(line: 85, column: 58, scope: !11)
!73 = !DILocation(line: 54, column: 24, scope: !11)
!74 = !DILocation(line: 61, column: 24, scope: !11)
!75 = !DILocation(line: 62, column: 24, scope: !11)
!76 = !DILocation(line: 64, column: 25, scope: !11)
!77 = !DILocation(line: 65, column: 25, scope: !11)
!78 = !DILocation(line: 66, column: 24, scope: !11)
!79 = !DILocation(line: 67, column: 24, scope: !11)
!80 = !DILocation(line: 92, column: 24, scope: !11)
!81 = !DILocation(line: 93, column: 28, scope: !11)
!82 = !DILocation(line: 95, column: 24, scope: !11)
!83 = !DILocation(line: 96, column: 24, scope: !11)
!84 = !DILocation(line: 98, column: 24, scope: !11)
!85 = !DILocation(line: 100, column: 24, scope: !11)
!86 = !DILocation(line: 103, column: 25, scope: !11)
!87 = !DILocation(line: 101, column: 39, scope: !11)
!88 = !DILocation(line: 106, column: 25, scope: !11)
!89 = !DILocation(line: 267, column: 36, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !11, file: !91, discriminator: 0)
!91 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!92 = !DILocation(line: 108, column: 27, scope: !11)
!93 = !DILocation(line: 256, column: 15, scope: !94, inlinedAt: !92)
!94 = distinct !DILexicalBlockFile(scope: !90, file: !91, discriminator: 0)
!95 = !DILocation(line: 267, column: 36, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 109, column: 27, scope: !11)
!97 = !DILocation(line: 256, column: 15, scope: !94, inlinedAt: !96)
!98 = !DILocation(line: 110, column: 20, scope: !11)
!99 = !DILocation(line: 112, column: 20, scope: !11)
!100 = !DILocation(line: 114, column: 20, scope: !11)
!101 = !DILocation(line: 115, column: 20, scope: !11)
!102 = !DILocation(line: 116, column: 20, scope: !11)
!103 = !DILocation(line: 117, column: 4, scope: !11)
!104 = !DILocation(line: 118, column: 71, scope: !11)
!105 = !DILocation(line: 118, column: 4, scope: !11)
