#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0]}>
#loc = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0)
#loc1 = loc(unknown)
#loc121 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":108:27)
#loc124 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":109:27)
#loc137 = loc(callsite(#loc1 at #loc121))
#loc140 = loc(callsite(#loc1 at #loc124))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e-01> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x256xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<true> : tensor<1x256xi1, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<true> : tensor<1x256xi1, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<16> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc2)
    %4 = arith.cmpi slt, %2, %cst_13 : tensor<1x256xi32, #blocked> loc(#loc3)
    %5 = arith.cmpi slt, %3, %cst_9 : tensor<1x256xi32, #blocked1> loc(#loc3)
    %6 = arith.divsi %2, %cst_14 : tensor<1x256xi32, #blocked> loc(#loc4)
    %7 = arith.divsi %2, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc5)
    %8 = arith.remsi %7, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc6)
    %9 = arith.divsi %2, %cst_16 : tensor<1x256xi32, #blocked> loc(#loc7)
    %10 = arith.divsi %3, %cst_7 : tensor<1x256xi32, #blocked1> loc(#loc7)
    %11 = arith.remsi %2, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc8)
    %12 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc9)
    %13 = tt.addptr %12, %6 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc9)
    %14 = tt.load %13, %4, %cst_4 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc10)
    %15 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %16 = tt.addptr %15, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc11)
    %17 = tt.load %16, %5, %cst_10 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %18 = triton_gpu.convert_layout %17 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc12)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %20 = tt.addptr %19, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc13)
    %21 = tt.load %20, %5, %cst_10 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %22 = triton_gpu.convert_layout %21 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc14)
    %23 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %24 = tt.addptr %23, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc15)
    %25 = tt.load %24, %5, %cst_10 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %26 = triton_gpu.convert_layout %25 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc16)
    %27 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %28 = tt.addptr %27, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc17)
    %29 = tt.load %28, %5, %cst_10 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %30 = triton_gpu.convert_layout %29 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc18)
    %31 = arith.addi %14, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc19)
    %32 = arith.cmpi slt, %14, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc20)
    %33 = arith.select %32, %31, %14 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc21)
    %34 = arith.cmpi sge, %33, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc22)
    %35 = arith.cmpi slt, %33, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc23)
    %36 = arith.andi %34, %35 : tensor<1x256xi1, #blocked> loc(#loc24)
    %37 = arith.xori %4, %cst_12 : tensor<1x256xi1, #blocked> loc(#loc25)
    %38 = arith.xori %5, %cst_11 : tensor<1x256xi1, #blocked1> loc(#loc25)
    %39 = arith.ori %36, %37 : tensor<1x256xi1, #blocked> loc(#loc26)
    tt.assert %39, "index out of bounds: 0 <= tmp4 < 4" : tensor<1x256xi1, #blocked> loc(#loc27)
    %40 = arith.muli %33, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc28)
    %41 = arith.extsi %8 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc29)
    %42 = arith.addi %41, %40 : tensor<1x256xi64, #blocked> loc(#loc29)
    %43 = arith.muli %9, %cst_14 : tensor<1x256xi32, #blocked> loc(#loc30)
    %44 = arith.extsi %43 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc31)
    %45 = arith.addi %42, %44 : tensor<1x256xi64, #blocked> loc(#loc31)
    %46 = tt.splat %arg3 : !tt.ptr<i64> -> tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc32)
    %47 = tt.addptr %46, %45 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc32)
    %48 = tt.load %47, %4, %cst_4 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc33)
    %49 = arith.addi %48, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc34)
    %50 = arith.cmpi slt, %48, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc35)
    %51 = arith.select %50, %49, %48 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc36)
    %52 = arith.cmpi sge, %51, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc37)
    %53 = arith.cmpi slt, %51, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc38)
    %54 = arith.andi %52, %53 : tensor<1x256xi1, #blocked> loc(#loc39)
    %55 = arith.ori %54, %37 : tensor<1x256xi1, #blocked> loc(#loc40)
    tt.assert %55, "index out of bounds: 0 <= tmp9 < 4" : tensor<1x256xi1, #blocked> loc(#loc41)
    %56 = arith.muli %9, %cst_15 : tensor<1x256xi32, #blocked> loc(#loc42)
    %57 = arith.muli %10, %cst_8 : tensor<1x256xi32, #blocked1> loc(#loc42)
    %58 = arith.extsi %56 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc43)
    %59 = arith.extsi %57 : tensor<1x256xi32, #blocked1> to tensor<1x256xi64, #blocked1> loc(#loc43)
    %60 = arith.addi %33, %58 : tensor<1x256xi64, #blocked> loc(#loc43)
    %61 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %62 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc44)
    %63 = tt.addptr %62, %60 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc44)
    %64 = tt.load %63, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc45)
    %65 = arith.addi %51, %58 : tensor<1x256xi64, #blocked> loc(#loc46)
    %66 = tt.addptr %62, %65 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc47)
    %67 = tt.load %66, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc48)
    %68 = arith.addf %64, %67 : tensor<1x256xf32, #blocked> loc(#loc49)
    %69 = arith.extsi %11 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc50)
    %70 = arith.addi %69, %40 : tensor<1x256xi64, #blocked> loc(#loc50)
    %71 = arith.addi %70, %44 : tensor<1x256xi64, #blocked> loc(#loc51)
    %72 = tt.addptr %46, %71 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc52)
    %73 = triton_gpu.convert_layout %72 : tensor<1x256x!tt.ptr<i64>, #blocked> -> tensor<1x256x!tt.ptr<i64>, #blocked1> loc(#loc53)
    %74 = tt.load %73, %5, %cst_5 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<i64>, #blocked1> loc(#loc53)
    %75 = arith.addi %74, %cst_6 : tensor<1x256xi64, #blocked1> loc(#loc54)
    %76 = arith.cmpi slt, %74, %cst_5 : tensor<1x256xi64, #blocked1> loc(#loc55)
    %77 = arith.select %76, %75, %74 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc56)
    %78 = arith.cmpi sge, %77, %cst_5 : tensor<1x256xi64, #blocked1> loc(#loc57)
    %79 = arith.cmpi slt, %77, %cst_6 : tensor<1x256xi64, #blocked1> loc(#loc58)
    %80 = arith.andi %78, %79 : tensor<1x256xi1, #blocked1> loc(#loc59)
    %81 = arith.ori %80, %38 : tensor<1x256xi1, #blocked1> loc(#loc60)
    tt.assert %81, "index out of bounds: 0 <= tmp17 < 4" : tensor<1x256xi1, #blocked1> loc(#loc61)
    %82 = arith.addi %77, %59 : tensor<1x256xi64, #blocked1> loc(#loc62)
    %83 = tt.addptr %61, %82 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc63)
    %84 = triton_gpu.convert_layout %83 : tensor<1x256x!tt.ptr<f32>, #blocked1> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc64)
    %85 = tt.load %84, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc64)
    %86 = arith.addf %64, %85 : tensor<1x256xf32, #blocked> loc(#loc65)
    %87 = arith.mulf %68, %86 : tensor<1x256xf32, #blocked> loc(#loc66)
    %88 = arith.cmpf oeq, %87, %cst_1 : tensor<1x256xf32, #blocked> loc(#loc67)
    %89 = arith.uitofp %88 : tensor<1x256xi1, #blocked> to tensor<1x256xf32, #blocked> loc(#loc68)
    %90 = arith.mulf %89, %18 : tensor<1x256xf32, #blocked> loc(#loc69)
    %91 = arith.mulf %22, %90 : tensor<1x256xf32, #blocked> loc(#loc70)
    tt.assert %39, "index out of bounds: 0 <= tmp33 < 4" : tensor<1x256xi1, #blocked> loc(#loc71)
    %92 = arith.addi %40, %44 : tensor<1x256xi64, #blocked> loc(#loc72)
    %93 = arith.addi %92, %41 : tensor<1x256xi64, #blocked> loc(#loc73)
    %94 = tt.addptr %46, %93 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc74)
    %95 = tt.load %94, %4, %cst_4 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc75)
    %96 = arith.addi %95, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc76)
    %97 = arith.cmpi slt, %95, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc77)
    %98 = arith.select %97, %96, %95 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc78)
    %99 = arith.cmpi sge, %98, %cst_4 : tensor<1x256xi64, #blocked> loc(#loc79)
    %100 = arith.cmpi slt, %98, %cst_0 : tensor<1x256xi64, #blocked> loc(#loc80)
    %101 = arith.andi %99, %100 : tensor<1x256xi1, #blocked> loc(#loc81)
    %102 = arith.ori %101, %37 : tensor<1x256xi1, #blocked> loc(#loc82)
    tt.assert %102, "index out of bounds: 0 <= tmp38 < 4" : tensor<1x256xi1, #blocked> loc(#loc83)
    %103 = tt.load %63, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc84)
    %104 = arith.addi %98, %58 : tensor<1x256xi64, #blocked> loc(#loc85)
    %105 = tt.addptr %62, %104 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc86)
    %106 = tt.load %105, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc87)
    %107 = arith.addf %103, %106 : tensor<1x256xf32, #blocked> loc(#loc88)
    %108 = arith.addi %92, %69 : tensor<1x256xi64, #blocked> loc(#loc89)
    %109 = tt.addptr %46, %108 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc90)
    %110 = triton_gpu.convert_layout %109 : tensor<1x256x!tt.ptr<i64>, #blocked> -> tensor<1x256x!tt.ptr<i64>, #blocked1> loc(#loc91)
    %111 = tt.load %110, %5, %cst_5 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<i64>, #blocked1> loc(#loc91)
    %112 = arith.addi %111, %cst_6 : tensor<1x256xi64, #blocked1> loc(#loc92)
    %113 = arith.cmpi slt, %111, %cst_5 : tensor<1x256xi64, #blocked1> loc(#loc93)
    %114 = arith.select %113, %112, %111 : tensor<1x256xi1, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc94)
    %115 = arith.cmpi sge, %114, %cst_5 : tensor<1x256xi64, #blocked1> loc(#loc95)
    %116 = arith.cmpi slt, %114, %cst_6 : tensor<1x256xi64, #blocked1> loc(#loc96)
    %117 = arith.andi %115, %116 : tensor<1x256xi1, #blocked1> loc(#loc97)
    %118 = arith.ori %117, %38 : tensor<1x256xi1, #blocked1> loc(#loc98)
    tt.assert %118, "index out of bounds: 0 <= tmp46 < 4" : tensor<1x256xi1, #blocked1> loc(#loc99)
    %119 = arith.addi %114, %59 : tensor<1x256xi64, #blocked1> loc(#loc100)
    %120 = tt.addptr %61, %119 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi64, #blocked1> loc(#loc101)
    %121 = triton_gpu.convert_layout %120 : tensor<1x256x!tt.ptr<f32>, #blocked1> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc102)
    %122 = tt.load %121, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc102)
    %123 = arith.addf %103, %122 : tensor<1x256xf32, #blocked> loc(#loc103)
    %124 = arith.mulf %107, %123 : tensor<1x256xf32, #blocked> loc(#loc104)
    %125 = arith.cmpf oeq, %124, %cst_1 : tensor<1x256xf32, #blocked> loc(#loc105)
    %126 = arith.uitofp %125 : tensor<1x256xi1, #blocked> to tensor<1x256xf32, #blocked> loc(#loc106)
    %127 = arith.mulf %126, %30 : tensor<1x256xf32, #blocked> loc(#loc107)
    %128 = arith.mulf %26, %127 : tensor<1x256xf32, #blocked> loc(#loc108)
    %129 = arith.subf %91, %128 : tensor<1x256xf32, #blocked> loc(#loc109)
    %130 = math.absf %129 : tensor<1x256xf32, #blocked> loc(#loc110)
    %131 = arith.cmpf olt, %130, %cst_2 : tensor<1x256xf32, #blocked> loc(#loc111)
    %132 = arith.mulf %130, %130 : tensor<1x256xf32, #blocked> loc(#loc112)
    %133 = arith.mulf %132, %cst_3 : tensor<1x256xf32, #blocked> loc(#loc113)
    %134 = arith.subf %130, %cst_3 : tensor<1x256xf32, #blocked> loc(#loc114)
    %135 = arith.select %131, %133, %134 : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc115)
    %136 = arith.addf %135, %cst : tensor<1x256xf32, #blocked> loc(#loc116)
    %137 = arith.select %4, %136, %cst : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc117)
    %138 = arith.addf %90, %cst : tensor<1x256xf32, #blocked> loc(#loc118)
    %139 = arith.select %4, %138, %cst : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc119)
    %140 = "tt.reduce"(%137) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc121)), %arg11: f32 loc(callsite(#loc1 at #loc121))):
      %153 = arith.addf %arg10, %arg11 : f32 loc(#loc141)
      tt.reduce.return %153 : f32 loc(#loc136)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc136)
    %141 = tt.expand_dims %140 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc123)
    %142 = "tt.reduce"(%139) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc124)), %arg11: f32 loc(callsite(#loc1 at #loc124))):
      %153 = arith.addf %arg10, %arg11 : f32 loc(#loc142)
      tt.reduce.return %153 : f32 loc(#loc139)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc139)
    %143 = tt.expand_dims %142 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc125)
    %144 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc126)
    %145 = tt.load %144 : !tt.ptr<f32> loc(#loc127)
    %146 = tt.addptr %arg8, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc128)
    %147 = tt.load %146 : !tt.ptr<f32> loc(#loc129)
    %148 = arith.divf %145, %147 : f32 loc(#loc130)
    %149 = tt.splat %148 : f32 -> tensor<1x1xf32, #blocked> loc(#loc130)
    %150 = arith.divf %141, %143 : tensor<1x1xf32, #blocked> loc(#loc131)
    %151 = arith.addf %149, %150 : tensor<1x1xf32, #blocked> loc(#loc132)
    gpu.barrier loc(#loc133)
    %152 = tt.splat %144 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc134)
    tt.store %152, %151 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc134)
    tt.return loc(#loc135)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":25:33)
#loc3 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":30:25)
#loc4 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":31:23)
#loc5 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":32:25)
#loc6 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":32:30)
#loc7 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":33:23)
#loc8 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":34:23)
#loc9 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":36:34)
#loc10 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":36:39)
#loc11 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":37:35)
#loc12 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":37:40)
#loc13 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":38:39)
#loc14 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":38:44)
#loc15 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":39:35)
#loc16 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":39:40)
#loc17 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":41:35)
#loc18 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":41:40)
#loc19 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":43:22)
#loc20 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":44:22)
#loc21 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":45:36)
#loc22 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:32)
#loc23 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:48)
#loc24 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:41)
#loc25 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:56)
#loc26 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:54)
#loc27 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:64)
#loc28 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:41)
#loc29 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:39)
#loc30 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:51)
#loc31 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:48)
#loc32 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:34)
#loc33 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:56)
#loc34 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":48:22)
#loc35 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":49:22)
#loc36 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":50:36)
#loc37 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:32)
#loc38 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:48)
#loc39 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:41)
#loc40 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:54)
#loc41 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:64)
#loc42 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:44)
#loc43 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:42)
#loc44 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:35)
#loc45 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:49)
#loc46 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:42)
#loc47 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:35)
#loc48 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:49)
#loc49 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":54:24)
#loc50 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:40)
#loc51 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:49)
#loc52 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:35)
#loc53 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:57)
#loc54 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":56:24)
#loc55 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":57:24)
#loc56 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":58:39)
#loc57 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:32)
#loc58 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:50)
#loc59 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:42)
#loc60 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:56)
#loc61 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:66)
#loc62 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:43)
#loc63 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:35)
#loc64 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:50)
#loc65 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":61:24)
#loc66 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":62:24)
#loc67 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":64:25)
#loc68 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":65:25)
#loc69 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":66:24)
#loc70 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":67:24)
#loc71 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":71:66)
#loc72 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:45)
#loc73 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:63)
#loc74 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:35)
#loc75 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:81)
#loc76 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":73:24)
#loc77 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":74:24)
#loc78 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":75:39)
#loc79 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:32)
#loc80 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:50)
#loc81 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:42)
#loc82 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:56)
#loc83 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:66)
#loc84 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":77:58)
#loc85 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:43)
#loc86 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:35)
#loc87 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:58)
#loc88 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":79:24)
#loc89 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:63)
#loc90 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:35)
#loc91 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:74)
#loc92 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":81:24)
#loc93 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":82:24)
#loc94 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":83:39)
#loc95 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:32)
#loc96 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:50)
#loc97 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:42)
#loc98 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:56)
#loc99 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:66)
#loc100 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:43)
#loc101 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:35)
#loc102 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:58)
#loc103 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":86:24)
#loc104 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":87:24)
#loc105 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":88:25)
#loc106 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":89:25)
#loc107 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":90:24)
#loc108 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":91:24)
#loc109 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":92:24)
#loc110 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":93:28)
#loc111 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":95:24)
#loc112 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":96:24)
#loc113 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":98:24)
#loc114 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":100:24)
#loc115 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":101:39)
#loc116 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":103:25)
#loc117 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":104:40)
#loc118 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":106:25)
#loc119 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":107:40)
#loc120 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc122 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc123 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":108:30)
#loc125 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":109:30)
#loc126 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":110:35)
#loc127 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":110:20)
#loc128 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":112:31)
#loc129 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":112:20)
#loc130 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":114:20)
#loc131 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":115:20)
#loc132 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":116:20)
#loc133 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":117:4)
#loc134 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":118:71)
#loc135 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":118:4)
#loc136 = loc(callsite(#loc120 at #loc121))
#loc138 = loc(callsite(#loc122 at #loc120))
#loc139 = loc(callsite(#loc120 at #loc124))
#loc141 = loc(callsite(#loc138 at #loc121))
#loc142 = loc(callsite(#loc138 at #loc124))
