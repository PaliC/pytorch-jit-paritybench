; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 508, !dbg !11
  %13 = shl i32 %7, 9, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = zext nneg i32 %12 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %33 = bitcast i32 %29 to float, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = bitcast i32 %42 to float, !dbg !19
  %47 = fadd float %22, %33, !dbg !20
  %48 = fadd float %23, %34, !dbg !20
  %49 = fadd float %24, %35, !dbg !20
  %50 = fadd float %25, %36, !dbg !20
  %51 = fcmp olt float %47, 0.000000e+00, !dbg !21
  %52 = fcmp olt float %48, 0.000000e+00, !dbg !21
  %53 = fcmp olt float %49, 0.000000e+00, !dbg !21
  %54 = fcmp olt float %50, 0.000000e+00, !dbg !21
  %55 = select i1 %51, float 0.000000e+00, float %47, !dbg !25
  %56 = select i1 %52, float 0.000000e+00, float %48, !dbg !25
  %57 = select i1 %53, float 0.000000e+00, float %49, !dbg !25
  %58 = select i1 %54, float 0.000000e+00, float %50, !dbg !25
  %59 = fadd float %33, %43, !dbg !26
  %60 = fadd float %34, %44, !dbg !26
  %61 = fadd float %35, %45, !dbg !26
  %62 = fadd float %36, %46, !dbg !26
  %63 = fcmp olt float %59, 0.000000e+00, !dbg !27
  %64 = fcmp olt float %60, 0.000000e+00, !dbg !27
  %65 = fcmp olt float %61, 0.000000e+00, !dbg !27
  %66 = fcmp olt float %62, 0.000000e+00, !dbg !27
  %67 = select i1 %63, float 0.000000e+00, float %59, !dbg !29
  %68 = select i1 %64, float 0.000000e+00, float %60, !dbg !29
  %69 = select i1 %65, float 0.000000e+00, float %61, !dbg !29
  %70 = select i1 %66, float 0.000000e+00, float %62, !dbg !29
  %71 = fmul float %55, %55, !dbg !30
  %72 = fmul float %56, %56, !dbg !30
  %73 = fmul float %57, %57, !dbg !30
  %74 = fmul float %58, %58, !dbg !30
  %75 = fadd float %71, %72, !dbg !31
  %76 = fadd float %73, %75, !dbg !31
  %77 = fadd float %74, %76, !dbg !31
  %78 = bitcast float %77 to i32, !dbg !36
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = fadd float %77, %80, !dbg !31
  %82 = bitcast float %81 to i32, !dbg !36
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !36
  %84 = bitcast i32 %83 to float, !dbg !36
  %85 = fadd float %81, %84, !dbg !31
  %86 = bitcast float %85 to i32, !dbg !36
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = fadd float %85, %88, !dbg !31
  %90 = bitcast float %89 to i32, !dbg !36
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = fadd float %89, %92, !dbg !31
  %94 = bitcast float %93 to i32, !dbg !36
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !36
  %96 = bitcast i32 %95 to float, !dbg !36
  %97 = fadd float %93, %96, !dbg !31
  %98 = icmp eq i32 %9, 0, !dbg !36
  %99 = and i32 %10, 3, !dbg !36
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !36
  %101 = bitcast float %97 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %98) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %102 = icmp slt i32 %8, 4, !dbg !36
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !36
  %104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %103, i1 %102) #5, !dbg !36
  %105 = bitcast i32 %104 to float, !dbg !36
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !36
  %107 = bitcast i32 %106 to float, !dbg !36
  %108 = fadd float %105, %107, !dbg !31
  %109 = bitcast float %108 to i32, !dbg !36
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !36
  %111 = bitcast i32 %110 to float, !dbg !36
  %112 = fadd float %108, %111, !dbg !31
  %113 = and i32 %8, 3, !dbg !36
  %114 = icmp eq i32 %113, 0, !dbg !36
  %115 = and i1 %102, %114, !dbg !36
  %116 = bitcast float %112 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %116, i1 %115) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %117 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %118 = fadd float %117, 0.000000e+00, !dbg !37
  %119 = fmul float %67, %67, !dbg !39
  %120 = fmul float %68, %68, !dbg !39
  %121 = fmul float %69, %69, !dbg !39
  %122 = fmul float %70, %70, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %123 = fadd float %119, %120, !dbg !42
  %124 = fadd float %121, %123, !dbg !42
  %125 = fadd float %122, %124, !dbg !42
  %126 = bitcast float %125 to i32, !dbg !40
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !40
  %128 = bitcast i32 %127 to float, !dbg !40
  %129 = fadd float %125, %128, !dbg !42
  %130 = bitcast float %129 to i32, !dbg !40
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !40
  %132 = bitcast i32 %131 to float, !dbg !40
  %133 = fadd float %129, %132, !dbg !42
  %134 = bitcast float %133 to i32, !dbg !40
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !40
  %136 = bitcast i32 %135 to float, !dbg !40
  %137 = fadd float %133, %136, !dbg !42
  %138 = bitcast float %137 to i32, !dbg !40
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !40
  %140 = bitcast i32 %139 to float, !dbg !40
  %141 = fadd float %137, %140, !dbg !42
  %142 = bitcast float %141 to i32, !dbg !40
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !40
  %144 = bitcast i32 %143 to float, !dbg !40
  %145 = fadd float %141, %144, !dbg !42
  %146 = bitcast float %145 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %146, i1 %98) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %147 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %103, i1 %102) #5, !dbg !40
  %148 = bitcast i32 %147 to float, !dbg !40
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !40
  %150 = bitcast i32 %149 to float, !dbg !40
  %151 = fadd float %148, %150, !dbg !42
  %152 = bitcast float %151 to i32, !dbg !40
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !40
  %154 = bitcast i32 %153 to float, !dbg !40
  %155 = fadd float %151, %154, !dbg !42
  %156 = bitcast float %155 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %156, i1 %115) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %157 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %158 = fadd float %157, 0.000000e+00, !dbg !43
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %159, 0, !dbg !45
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i = icmp eq i32 %160, 0, !dbg !45
  br i1 %.not.i, label %166, label %161, !dbg !45

161:                                              ; preds = %6
  br i1 %.not1.i, label %164, label %162, !dbg !45

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

166:                                              ; preds = %6
  br i1 %.not1.i, label %169, label %167, !dbg !45

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %162, %164, %167, %169
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !45
  %171 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !46
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %171) #5, !dbg !47
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %171) #5, !dbg !47
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %171) #5, !dbg !47
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %171) #5, !dbg !47
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i1 = icmp eq i32 %176, 0, !dbg !48
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !48
  %.not1.i4 = icmp eq i32 %177, 0, !dbg !48
  br i1 %.not.i1, label %183, label %178, !dbg !48

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %181, label %179, !dbg !48

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

183:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %186, label %184, !dbg !48

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %179, %181, %184, %186
  %.0.i3 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !48
  %188 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !49
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %188) #5, !dbg !50
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %188) #5, !dbg !50
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %188) #5, !dbg !50
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %188) #5, !dbg !50
  %193 = fsub float %172, %189, !dbg !51
  %194 = fsub float %173, %190, !dbg !51
  %195 = fsub float %174, %191, !dbg !51
  %196 = fsub float %175, %192, !dbg !51
  %197 = fmul float %193, %193, !dbg !52
  %198 = fmul float %194, %194, !dbg !52
  %199 = fmul float %195, %195, !dbg !52
  %200 = fmul float %196, %196, !dbg !52
  %201 = bitcast float %55 to i32, !dbg !53
  %202 = bitcast float %56 to i32, !dbg !53
  %203 = bitcast float %57 to i32, !dbg !53
  %204 = bitcast float %58 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %16, i1 true) #5, !dbg !53
  %205 = bitcast float %67 to i32, !dbg !54
  %206 = bitcast float %68 to i32, !dbg !54
  %207 = bitcast float %69 to i32, !dbg !54
  %208 = bitcast float %70 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %37, i1 true) #5, !dbg !54
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !55
  %210 = bitcast float %197 to i32, !dbg !56
  %211 = bitcast float %198 to i32, !dbg !56
  %212 = bitcast float %199 to i32, !dbg !56
  %213 = bitcast float %200 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %209, i1 true) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cixfuffzp4msbatopv7nfzbo4vkomrwkhgl4coc3shliq5j2l56y.py", directory: "inductor_cache/ix")
!4 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_19, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_19", linkageName: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 48, scope: !7)
!20 = !DILocation(line: 35, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !28)
!28 = !DILocation(line: 39, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !28)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 42, column: 58, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !38)
!38 = !DILocation(line: 42, column: 45, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 45, column: 59, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !44)
!44 = !DILocation(line: 45, column: 45, scope: !7)
!45 = !DILocation(line: 46, column: 27, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 27, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 19, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 48, scope: !7)
!54 = !DILocation(line: 56, column: 48, scope: !7)
!55 = !DILocation(line: 57, column: 25, scope: !7)
!56 = !DILocation(line: 57, column: 46, scope: !7)
!57 = !DILocation(line: 57, column: 4, scope: !7)
