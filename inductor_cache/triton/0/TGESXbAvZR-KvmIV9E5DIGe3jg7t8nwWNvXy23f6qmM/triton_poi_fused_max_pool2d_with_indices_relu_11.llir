; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %.lobit3 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = or disjoint i32 %13, 32, !dbg !13
  %22 = or disjoint i32 %13, 36, !dbg !13
  %23 = or disjoint i32 %13, 40, !dbg !13
  %24 = or disjoint i32 %13, 44, !dbg !13
  %25 = or disjoint i32 %13, 48, !dbg !13
  %26 = or disjoint i32 %13, 52, !dbg !13
  %27 = or disjoint i32 %13, 56, !dbg !13
  %28 = or disjoint i32 %13, 60, !dbg !13
  %29 = icmp slt i32 %12, 100, !dbg !14
  %30 = icmp slt i32 %13, 100, !dbg !14
  %31 = icmp slt i32 %14, 100, !dbg !14
  %32 = icmp slt i32 %15, 100, !dbg !14
  %33 = icmp slt i32 %16, 100, !dbg !14
  %34 = icmp slt i32 %17, 100, !dbg !14
  %35 = icmp slt i32 %18, 100, !dbg !14
  %36 = icmp slt i32 %19, 100, !dbg !14
  %37 = icmp slt i32 %20, 100, !dbg !14
  %38 = icmp slt i32 %21, 100, !dbg !14
  %39 = icmp slt i32 %22, 100, !dbg !14
  %40 = icmp slt i32 %23, 100, !dbg !14
  %41 = icmp slt i32 %24, 100, !dbg !14
  %42 = icmp slt i32 %25, 100, !dbg !14
  %43 = icmp slt i32 %26, 100, !dbg !14
  %44 = icmp slt i32 %27, 100, !dbg !14
  %45 = icmp slt i32 %28, 100, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %47 = shl i32 %46, 6, !dbg !16
  %48 = shl i32 %8, 4, !dbg !17
  %49 = and i32 %48, 48, !dbg !17
  %50 = and i32 %8, 63, !dbg !17
  %51 = or disjoint i32 %47, %49, !dbg !18
  %52 = or disjoint i32 %51, 4, !dbg !18
  %53 = or disjoint i32 %51, 8, !dbg !18
  %54 = or disjoint i32 %51, 12, !dbg !18
  %55 = or disjoint i32 %47, %50, !dbg !18
  %56 = icmp slt i32 %51, 128, !dbg !19
  %57 = icmp slt i32 %55, 128, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %58 = sdiv i32 %.frozen, 5, !dbg !20
  %59 = mul i32 %58, 5, !dbg !21
  %.decomposed = sub i32 %.frozen, %59, !dbg !21
  %.frozen11 = freeze i32 %13, !dbg !22
  %60 = sdiv i32 %.frozen11, 25, !dbg !22
  %.frozen13 = freeze i32 %14, !dbg !22
  %61 = sdiv i32 %.frozen13, 25, !dbg !22
  %.frozen15 = freeze i32 %15, !dbg !22
  %62 = sdiv i32 %.frozen15, 25, !dbg !22
  %.frozen17 = freeze i32 %16, !dbg !22
  %63 = sdiv i32 %.frozen17, 25, !dbg !22
  %.frozen19 = freeze i32 %17, !dbg !22
  %64 = sdiv i32 %.frozen19, 25, !dbg !22
  %.frozen21 = freeze i32 %18, !dbg !22
  %65 = sdiv i32 %.frozen21, 25, !dbg !22
  %.frozen23 = freeze i32 %19, !dbg !22
  %66 = sdiv i32 %.frozen23, 25, !dbg !22
  %.frozen25 = freeze i32 %20, !dbg !22
  %67 = sdiv i32 %.frozen25, 25, !dbg !22
  %.frozen27 = freeze i32 %21, !dbg !22
  %68 = sdiv i32 %.frozen27, 25, !dbg !22
  %.frozen29 = freeze i32 %22, !dbg !22
  %69 = sdiv i32 %.frozen29, 25, !dbg !22
  %.frozen31 = freeze i32 %23, !dbg !22
  %70 = sdiv i32 %.frozen31, 25, !dbg !22
  %.frozen33 = freeze i32 %24, !dbg !22
  %71 = sdiv i32 %.frozen33, 25, !dbg !22
  %.frozen35 = freeze i32 %25, !dbg !22
  %72 = sdiv i32 %.frozen35, 25, !dbg !22
  %.frozen37 = freeze i32 %26, !dbg !22
  %73 = sdiv i32 %.frozen37, 25, !dbg !22
  %.frozen39 = freeze i32 %27, !dbg !22
  %74 = sdiv i32 %.frozen39, 25, !dbg !22
  %.frozen41 = freeze i32 %28, !dbg !22
  %75 = sdiv i32 %.frozen41, 25, !dbg !22
  %76 = mul i32 %60, 25, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %76, !dbg !23
  %77 = mul i32 %61, 25, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %77, !dbg !23
  %78 = mul i32 %62, 25, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %78, !dbg !23
  %79 = mul i32 %63, 25, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %79, !dbg !23
  %80 = mul i32 %64, 25, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %80, !dbg !23
  %81 = mul i32 %65, 25, !dbg !23
  %.decomposed22 = sub i32 %.frozen21, %81, !dbg !23
  %82 = mul i32 %66, 25, !dbg !23
  %.decomposed24 = sub i32 %.frozen23, %82, !dbg !23
  %83 = mul i32 %67, 25, !dbg !23
  %.decomposed26 = sub i32 %.frozen25, %83, !dbg !23
  %84 = mul i32 %68, 25, !dbg !23
  %.decomposed28 = sub i32 %.frozen27, %84, !dbg !23
  %85 = mul i32 %69, 25, !dbg !23
  %.decomposed30 = sub i32 %.frozen29, %85, !dbg !23
  %86 = mul i32 %70, 25, !dbg !23
  %.decomposed32 = sub i32 %.frozen31, %86, !dbg !23
  %87 = mul i32 %71, 25, !dbg !23
  %.decomposed34 = sub i32 %.frozen33, %87, !dbg !23
  %88 = mul i32 %72, 25, !dbg !23
  %.decomposed36 = sub i32 %.frozen35, %88, !dbg !23
  %89 = mul i32 %73, 25, !dbg !23
  %.decomposed38 = sub i32 %.frozen37, %89, !dbg !23
  %90 = mul i32 %74, 25, !dbg !23
  %.decomposed40 = sub i32 %.frozen39, %90, !dbg !23
  %91 = mul i32 %75, 25, !dbg !23
  %.decomposed42 = sub i32 %.frozen41, %91, !dbg !23
  %92 = shl nsw i32 %.decomposed, 8, !dbg !24
  %93 = mul i32 %58, 2560, !dbg !25
  %94 = add i32 %93, %92, !dbg !26
  %95 = add i32 %94, %51, !dbg !27
  %96 = add i32 %94, %52, !dbg !27
  %97 = add i32 %94, %53, !dbg !27
  %98 = add i32 %94, %54, !dbg !27
  %99 = sext i32 %95 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %96 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %97 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %98 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = and i1 %29, %56, !dbg !29
  %108 = and i1 %30, %57, !dbg !29
  %109 = and i1 %31, %57, !dbg !29
  %110 = and i1 %32, %57, !dbg !29
  %111 = and i1 %33, %57, !dbg !29
  %112 = and i1 %34, %57, !dbg !29
  %113 = and i1 %35, %57, !dbg !29
  %114 = and i1 %36, %57, !dbg !29
  %115 = and i1 %37, %57, !dbg !29
  %116 = and i1 %38, %57, !dbg !29
  %117 = and i1 %39, %57, !dbg !29
  %118 = and i1 %40, %57, !dbg !29
  %119 = and i1 %41, %57, !dbg !29
  %120 = and i1 %42, %57, !dbg !29
  %121 = and i1 %43, %57, !dbg !29
  %122 = and i1 %44, %57, !dbg !29
  %123 = and i1 %45, %57, !dbg !29
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %107) #2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !30
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %107) #2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !30
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %107) #2, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !30
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %107) #2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !30
  %144 = or disjoint i32 %94, 128, !dbg !31
  %145 = add i32 %144, %51, !dbg !32
  %146 = add i32 %144, %52, !dbg !32
  %147 = add i32 %144, %53, !dbg !32
  %148 = add i32 %144, %54, !dbg !32
  %149 = sext i32 %145 to i64, !dbg !33
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !33
  %151 = sext i32 %146 to i64, !dbg !33
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !33
  %153 = sext i32 %147 to i64, !dbg !33
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !33
  %155 = sext i32 %148 to i64, !dbg !33
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !33
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %107) #2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !34
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %107) #2, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !34
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %107) #2, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !34
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %107) #2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !34
  %177 = add i32 %94, 1280, !dbg !35
  %178 = add i32 %177, %51, !dbg !36
  %179 = add i32 %177, %52, !dbg !36
  %180 = add i32 %177, %53, !dbg !36
  %181 = add i32 %177, %54, !dbg !36
  %182 = sext i32 %178 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !37
  %184 = sext i32 %179 to i64, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !37
  %186 = sext i32 %180 to i64, !dbg !37
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !37
  %188 = sext i32 %181 to i64, !dbg !37
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !37
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %107) #2, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !38
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %107) #2, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !38
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %107) #2, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !38
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !38
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !38
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !38
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %107) #2, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !38
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !38
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !38
  %210 = add i32 %94, 1408, !dbg !39
  %211 = add i32 %210, %51, !dbg !40
  %212 = add i32 %210, %52, !dbg !40
  %213 = add i32 %210, %53, !dbg !40
  %214 = add i32 %210, %54, !dbg !40
  %215 = sext i32 %211 to i64, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !41
  %217 = sext i32 %212 to i64, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !41
  %219 = sext i32 %213 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !41
  %221 = sext i32 %214 to i64, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !41
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %107) #2, !dbg !42
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !42
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !42
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !42
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !42
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %107) #2, !dbg !42
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !42
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !42
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !42
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !42
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %107) #2, !dbg !42
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !42
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !42
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !42
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !42
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %107) #2, !dbg !42
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !42
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !42
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !42
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !42
  %243 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !30
  %244 = insertelement <4 x i32> %243, i32 %126, i64 1, !dbg !30
  %245 = insertelement <4 x i32> %244, i32 %127, i64 2, !dbg !30
  %246 = insertelement <4 x i32> %245, i32 %128, i64 3, !dbg !30
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !30
  %248 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !34
  %249 = insertelement <4 x i32> %248, i32 %159, i64 1, !dbg !34
  %250 = insertelement <4 x i32> %249, i32 %160, i64 2, !dbg !34
  %251 = insertelement <4 x i32> %250, i32 %161, i64 3, !dbg !34
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !34
  %253 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !38
  %254 = insertelement <4 x i32> %253, i32 %192, i64 1, !dbg !38
  %255 = insertelement <4 x i32> %254, i32 %193, i64 2, !dbg !38
  %256 = insertelement <4 x i32> %255, i32 %194, i64 3, !dbg !38
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !38
  %258 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !42
  %259 = insertelement <4 x i32> %258, i32 %225, i64 1, !dbg !42
  %260 = insertelement <4 x i32> %259, i32 %226, i64 2, !dbg !42
  %261 = insertelement <4 x i32> %260, i32 %227, i64 3, !dbg !42
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !42
  %263 = fcmp ogt <4 x float> %252, %247, !dbg !43
  %264 = zext <4 x i1> %263 to <4 x i8>, !dbg !44
  %265 = fcmp uno <4 x float> %252, zeroinitializer, !dbg !45
  %266 = or <4 x i1> %263, %265, !dbg !49
  %.v = select <4 x i1> %266, <4 x i32> %251, <4 x i32> %246, !dbg !50
  %267 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %268 = fcmp olt <4 x float> %267, %257, !dbg !51
  %269 = select <4 x i1> %268, <4 x i8> splat (i8 2), <4 x i8> %264, !dbg !52
  %270 = fcmp uno <4 x float> %257, zeroinitializer, !dbg !53
  %271 = or <4 x i1> %268, %270, !dbg !55
  %.v4 = select <4 x i1> %271, <4 x i32> %256, <4 x i32> %.v, !dbg !56
  %272 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !56
  %273 = shufflevector <4 x float> %272, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %274 = fcmp olt <4 x float> %272, %262, !dbg !57
  %275 = shufflevector <4 x i1> %274, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %276 = select <4 x i1> %274, <4 x i8> splat (i8 3), <4 x i8> %269, !dbg !58
  %277 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !30
  %278 = insertelement <4 x i32> %277, i32 %131, i64 1, !dbg !30
  %279 = insertelement <4 x i32> %278, i32 %132, i64 2, !dbg !30
  %280 = insertelement <4 x i32> %279, i32 %133, i64 3, !dbg !30
  %281 = bitcast <4 x i32> %280 to <4 x float>, !dbg !30
  %282 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !34
  %283 = insertelement <4 x i32> %282, i32 %164, i64 1, !dbg !34
  %284 = insertelement <4 x i32> %283, i32 %165, i64 2, !dbg !34
  %285 = insertelement <4 x i32> %284, i32 %166, i64 3, !dbg !34
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !34
  %287 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !38
  %288 = insertelement <4 x i32> %287, i32 %197, i64 1, !dbg !38
  %289 = insertelement <4 x i32> %288, i32 %198, i64 2, !dbg !38
  %290 = insertelement <4 x i32> %289, i32 %199, i64 3, !dbg !38
  %291 = bitcast <4 x i32> %290 to <4 x float>, !dbg !38
  %292 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !42
  %293 = insertelement <4 x i32> %292, i32 %230, i64 1, !dbg !42
  %294 = insertelement <4 x i32> %293, i32 %231, i64 2, !dbg !42
  %295 = insertelement <4 x i32> %294, i32 %232, i64 3, !dbg !42
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !42
  %297 = fcmp ogt <4 x float> %286, %281, !dbg !43
  %298 = zext <4 x i1> %297 to <4 x i8>, !dbg !44
  %299 = fcmp uno <4 x float> %286, zeroinitializer, !dbg !45
  %300 = or <4 x i1> %297, %299, !dbg !49
  %.v5 = select <4 x i1> %300, <4 x i32> %285, <4 x i32> %280, !dbg !50
  %301 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !50
  %302 = fcmp olt <4 x float> %301, %291, !dbg !51
  %303 = select <4 x i1> %302, <4 x i8> splat (i8 2), <4 x i8> %298, !dbg !52
  %304 = fcmp uno <4 x float> %291, zeroinitializer, !dbg !53
  %305 = or <4 x i1> %302, %304, !dbg !55
  %.v6 = select <4 x i1> %305, <4 x i32> %290, <4 x i32> %.v5, !dbg !56
  %306 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !56
  %307 = shufflevector <4 x float> %306, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %308 = fcmp olt <4 x float> %306, %296, !dbg !57
  %309 = shufflevector <4 x i1> %308, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %310 = select <4 x i1> %308, <4 x i8> splat (i8 3), <4 x i8> %303, !dbg !58
  %311 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !30
  %312 = insertelement <4 x i32> %311, i32 %136, i64 1, !dbg !30
  %313 = insertelement <4 x i32> %312, i32 %137, i64 2, !dbg !30
  %314 = insertelement <4 x i32> %313, i32 %138, i64 3, !dbg !30
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !30
  %316 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !34
  %317 = insertelement <4 x i32> %316, i32 %169, i64 1, !dbg !34
  %318 = insertelement <4 x i32> %317, i32 %170, i64 2, !dbg !34
  %319 = insertelement <4 x i32> %318, i32 %171, i64 3, !dbg !34
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !34
  %321 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !38
  %322 = insertelement <4 x i32> %321, i32 %202, i64 1, !dbg !38
  %323 = insertelement <4 x i32> %322, i32 %203, i64 2, !dbg !38
  %324 = insertelement <4 x i32> %323, i32 %204, i64 3, !dbg !38
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !38
  %326 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !42
  %327 = insertelement <4 x i32> %326, i32 %235, i64 1, !dbg !42
  %328 = insertelement <4 x i32> %327, i32 %236, i64 2, !dbg !42
  %329 = insertelement <4 x i32> %328, i32 %237, i64 3, !dbg !42
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !42
  %331 = fcmp ogt <4 x float> %320, %315, !dbg !43
  %332 = zext <4 x i1> %331 to <4 x i8>, !dbg !44
  %333 = fcmp uno <4 x float> %320, zeroinitializer, !dbg !45
  %334 = or <4 x i1> %331, %333, !dbg !49
  %.v7 = select <4 x i1> %334, <4 x i32> %319, <4 x i32> %314, !dbg !50
  %335 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !50
  %336 = fcmp olt <4 x float> %335, %325, !dbg !51
  %337 = select <4 x i1> %336, <4 x i8> splat (i8 2), <4 x i8> %332, !dbg !52
  %338 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !53
  %339 = or <4 x i1> %336, %338, !dbg !55
  %.v8 = select <4 x i1> %339, <4 x i32> %324, <4 x i32> %.v7, !dbg !56
  %340 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !56
  %341 = fcmp olt <4 x float> %340, %330, !dbg !57
  %342 = select <4 x i1> %341, <4 x i8> splat (i8 3), <4 x i8> %337, !dbg !58
  %343 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !30
  %344 = insertelement <4 x i32> %343, i32 %141, i64 1, !dbg !30
  %345 = insertelement <4 x i32> %344, i32 %142, i64 2, !dbg !30
  %346 = insertelement <4 x i32> %345, i32 %143, i64 3, !dbg !30
  %347 = bitcast <4 x i32> %346 to <4 x float>, !dbg !30
  %348 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !34
  %349 = insertelement <4 x i32> %348, i32 %174, i64 1, !dbg !34
  %350 = insertelement <4 x i32> %349, i32 %175, i64 2, !dbg !34
  %351 = insertelement <4 x i32> %350, i32 %176, i64 3, !dbg !34
  %352 = bitcast <4 x i32> %351 to <4 x float>, !dbg !34
  %353 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !38
  %354 = insertelement <4 x i32> %353, i32 %207, i64 1, !dbg !38
  %355 = insertelement <4 x i32> %354, i32 %208, i64 2, !dbg !38
  %356 = insertelement <4 x i32> %355, i32 %209, i64 3, !dbg !38
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !38
  %358 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !42
  %359 = insertelement <4 x i32> %358, i32 %240, i64 1, !dbg !42
  %360 = insertelement <4 x i32> %359, i32 %241, i64 2, !dbg !42
  %361 = insertelement <4 x i32> %360, i32 %242, i64 3, !dbg !42
  %362 = bitcast <4 x i32> %361 to <4 x float>, !dbg !42
  %363 = fcmp ogt <4 x float> %352, %347, !dbg !43
  %364 = zext <4 x i1> %363 to <4 x i8>, !dbg !44
  %365 = fcmp uno <4 x float> %352, zeroinitializer, !dbg !45
  %366 = or <4 x i1> %363, %365, !dbg !49
  %.v9 = select <4 x i1> %366, <4 x i32> %351, <4 x i32> %346, !dbg !50
  %367 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !50
  %368 = fcmp olt <4 x float> %367, %357, !dbg !51
  %369 = select <4 x i1> %368, <4 x i8> splat (i8 2), <4 x i8> %364, !dbg !52
  %370 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !53
  %371 = or <4 x i1> %368, %370, !dbg !55
  %.v10 = select <4 x i1> %371, <4 x i32> %356, <4 x i32> %.v9, !dbg !56
  %372 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !56
  %373 = fcmp olt <4 x float> %372, %362, !dbg !57
  %374 = select <4 x i1> %373, <4 x i8> splat (i8 3), <4 x i8> %369, !dbg !58
  %375 = bitcast i32 %224 to float, !dbg !59
  %376 = bitcast i32 %225 to float, !dbg !59
  %377 = bitcast i32 %226 to float, !dbg !59
  %378 = bitcast i32 %227 to float, !dbg !59
  %379 = bitcast i32 %229 to float, !dbg !59
  %380 = bitcast i32 %230 to float, !dbg !59
  %381 = bitcast i32 %231 to float, !dbg !59
  %382 = bitcast i32 %232 to float, !dbg !59
  %383 = shufflevector <4 x float> %362, <4 x float> %330, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %384 = insertelement <16 x float> %383, float %382, i64 8, !dbg !59
  %385 = insertelement <16 x float> %384, float %381, i64 9, !dbg !59
  %386 = insertelement <16 x float> %385, float %380, i64 10, !dbg !59
  %387 = insertelement <16 x float> %386, float %379, i64 11, !dbg !59
  %388 = insertelement <16 x float> %387, float %378, i64 12, !dbg !59
  %389 = insertelement <16 x float> %388, float %377, i64 13, !dbg !59
  %390 = insertelement <16 x float> %389, float %376, i64 14, !dbg !59
  %391 = insertelement <16 x float> %390, float %375, i64 15, !dbg !59
  %392 = fcmp uno <16 x float> %391, zeroinitializer, !dbg !59
  %393 = shufflevector <4 x i1> %373, <4 x i1> %341, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %394 = shufflevector <16 x i1> %393, <16 x i1> %309, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %395 = shufflevector <16 x i1> %394, <16 x i1> %275, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !61
  %396 = or <16 x i1> %395, %392, !dbg !61
  %397 = shufflevector <4 x float> %372, <4 x float> %340, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %398 = shufflevector <16 x float> %397, <16 x float> %307, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %399 = shufflevector <16 x float> %398, <16 x float> %273, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !62
  %400 = select <16 x i1> %396, <16 x float> %391, <16 x float> %399, !dbg !62
  %401 = fcmp olt <16 x float> %400, zeroinitializer, !dbg !63
  %402 = extractelement <16 x i1> %401, i64 15, !dbg !65
  %403 = extractelement <16 x float> %400, i64 15, !dbg !65
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !65
  %405 = extractelement <16 x i1> %401, i64 14, !dbg !65
  %406 = extractelement <16 x float> %400, i64 14, !dbg !65
  %407 = select i1 %405, float 0.000000e+00, float %406, !dbg !65
  %408 = extractelement <16 x i1> %401, i64 13, !dbg !65
  %409 = extractelement <16 x float> %400, i64 13, !dbg !65
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !65
  %411 = extractelement <16 x i1> %401, i64 12, !dbg !65
  %412 = extractelement <16 x float> %400, i64 12, !dbg !65
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !65
  %414 = extractelement <16 x i1> %401, i64 11, !dbg !65
  %415 = extractelement <16 x float> %400, i64 11, !dbg !65
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !65
  %417 = extractelement <16 x i1> %401, i64 10, !dbg !65
  %418 = extractelement <16 x float> %400, i64 10, !dbg !65
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !65
  %420 = extractelement <16 x i1> %401, i64 9, !dbg !65
  %421 = extractelement <16 x float> %400, i64 9, !dbg !65
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !65
  %423 = extractelement <16 x i1> %401, i64 8, !dbg !65
  %424 = extractelement <16 x float> %400, i64 8, !dbg !65
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !65
  %426 = extractelement <16 x i1> %401, i64 7, !dbg !65
  %427 = extractelement <16 x float> %400, i64 7, !dbg !65
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !65
  %429 = extractelement <16 x i1> %401, i64 6, !dbg !65
  %430 = extractelement <16 x float> %400, i64 6, !dbg !65
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !65
  %432 = extractelement <16 x i1> %401, i64 5, !dbg !65
  %433 = extractelement <16 x float> %400, i64 5, !dbg !65
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !65
  %435 = extractelement <16 x i1> %401, i64 4, !dbg !65
  %436 = extractelement <16 x float> %400, i64 4, !dbg !65
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !65
  %438 = extractelement <16 x i1> %401, i64 3, !dbg !65
  %439 = extractelement <16 x float> %400, i64 3, !dbg !65
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !65
  %441 = extractelement <16 x i1> %401, i64 2, !dbg !65
  %442 = extractelement <16 x float> %400, i64 2, !dbg !65
  %443 = select i1 %441, float 0.000000e+00, float %442, !dbg !65
  %444 = extractelement <16 x i1> %401, i64 1, !dbg !65
  %445 = extractelement <16 x float> %400, i64 1, !dbg !65
  %446 = select i1 %444, float 0.000000e+00, float %445, !dbg !65
  %447 = extractelement <16 x i1> %401, i64 0, !dbg !65
  %448 = extractelement <16 x float> %400, i64 0, !dbg !65
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !65
  %450 = shl i32 %12, 7, !dbg !66
  %451 = add i32 %51, %450, !dbg !67
  %452 = sext i32 %451 to i64, !dbg !68
  %453 = getelementptr i8, ptr addrspace(1) %1, i64 %452, !dbg !68
  %454 = bitcast <4 x i8> %276 to i32, !dbg !69
  %455 = bitcast <4 x i8> %310 to i32, !dbg !69
  %456 = bitcast <4 x i8> %342 to i32, !dbg !69
  %457 = bitcast <4 x i8> %374 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %453, i1 %107) #2, !dbg !69
  %458 = mul i32 %55, 25, !dbg !70
  %459 = add i32 %458, %.decomposed12, !dbg !71
  %460 = mul i32 %60, 3200, !dbg !72
  %461 = mul i32 %61, 3200, !dbg !72
  %462 = mul i32 %62, 3200, !dbg !72
  %463 = mul i32 %63, 3200, !dbg !72
  %464 = mul i32 %64, 3200, !dbg !72
  %465 = mul i32 %65, 3200, !dbg !72
  %466 = mul i32 %66, 3200, !dbg !72
  %467 = mul i32 %67, 3200, !dbg !72
  %468 = mul i32 %68, 3200, !dbg !72
  %469 = mul i32 %69, 3200, !dbg !72
  %470 = mul i32 %70, 3200, !dbg !72
  %471 = mul i32 %71, 3200, !dbg !72
  %472 = mul i32 %72, 3200, !dbg !72
  %473 = mul i32 %73, 3200, !dbg !72
  %474 = mul i32 %74, 3200, !dbg !72
  %475 = mul i32 %75, 3200, !dbg !72
  %476 = add i32 %459, %460, !dbg !73
  %477 = add i32 %461, %.decomposed14, !dbg !71
  %478 = add i32 %477, %458, !dbg !73
  %479 = add i32 %462, %.decomposed16, !dbg !71
  %480 = add i32 %479, %458, !dbg !73
  %481 = add i32 %463, %.decomposed18, !dbg !71
  %482 = add i32 %481, %458, !dbg !73
  %483 = add i32 %464, %.decomposed20, !dbg !71
  %484 = add i32 %483, %458, !dbg !73
  %485 = add i32 %465, %.decomposed22, !dbg !71
  %486 = add i32 %485, %458, !dbg !73
  %487 = add i32 %466, %.decomposed24, !dbg !71
  %488 = add i32 %487, %458, !dbg !73
  %489 = add i32 %467, %.decomposed26, !dbg !71
  %490 = add i32 %489, %458, !dbg !73
  %491 = add i32 %468, %.decomposed28, !dbg !71
  %492 = add i32 %491, %458, !dbg !73
  %493 = add i32 %469, %.decomposed30, !dbg !71
  %494 = add i32 %493, %458, !dbg !73
  %495 = add i32 %470, %.decomposed32, !dbg !71
  %496 = add i32 %495, %458, !dbg !73
  %497 = add i32 %471, %.decomposed34, !dbg !71
  %498 = add i32 %497, %458, !dbg !73
  %499 = add i32 %472, %.decomposed36, !dbg !71
  %500 = add i32 %499, %458, !dbg !73
  %501 = add i32 %473, %.decomposed38, !dbg !71
  %502 = add i32 %501, %458, !dbg !73
  %503 = add i32 %474, %.decomposed40, !dbg !71
  %504 = add i32 %503, %458, !dbg !73
  %505 = add i32 %475, %.decomposed42, !dbg !71
  %506 = add i32 %505, %458, !dbg !73
  %507 = sext i32 %476 to i64, !dbg !74
  %508 = getelementptr float, ptr addrspace(1) %2, i64 %507, !dbg !74
  %509 = sext i32 %478 to i64, !dbg !74
  %510 = getelementptr float, ptr addrspace(1) %2, i64 %509, !dbg !74
  %511 = sext i32 %480 to i64, !dbg !74
  %512 = getelementptr float, ptr addrspace(1) %2, i64 %511, !dbg !74
  %513 = sext i32 %482 to i64, !dbg !74
  %514 = getelementptr float, ptr addrspace(1) %2, i64 %513, !dbg !74
  %515 = sext i32 %484 to i64, !dbg !74
  %516 = getelementptr float, ptr addrspace(1) %2, i64 %515, !dbg !74
  %517 = sext i32 %486 to i64, !dbg !74
  %518 = getelementptr float, ptr addrspace(1) %2, i64 %517, !dbg !74
  %519 = sext i32 %488 to i64, !dbg !74
  %520 = getelementptr float, ptr addrspace(1) %2, i64 %519, !dbg !74
  %521 = sext i32 %490 to i64, !dbg !74
  %522 = getelementptr float, ptr addrspace(1) %2, i64 %521, !dbg !74
  %523 = sext i32 %492 to i64, !dbg !74
  %524 = getelementptr float, ptr addrspace(1) %2, i64 %523, !dbg !74
  %525 = sext i32 %494 to i64, !dbg !74
  %526 = getelementptr float, ptr addrspace(1) %2, i64 %525, !dbg !74
  %527 = sext i32 %496 to i64, !dbg !74
  %528 = getelementptr float, ptr addrspace(1) %2, i64 %527, !dbg !74
  %529 = sext i32 %498 to i64, !dbg !74
  %530 = getelementptr float, ptr addrspace(1) %2, i64 %529, !dbg !74
  %531 = sext i32 %500 to i64, !dbg !74
  %532 = getelementptr float, ptr addrspace(1) %2, i64 %531, !dbg !74
  %533 = sext i32 %502 to i64, !dbg !74
  %534 = getelementptr float, ptr addrspace(1) %2, i64 %533, !dbg !74
  %535 = sext i32 %504 to i64, !dbg !74
  %536 = getelementptr float, ptr addrspace(1) %2, i64 %535, !dbg !74
  %537 = sext i32 %506 to i64, !dbg !74
  %538 = getelementptr float, ptr addrspace(1) %2, i64 %537, !dbg !74
  %539 = and i32 %48, 4080, !dbg !75
  %540 = and i32 %8, 255, !dbg !75
  %541 = lshr i32 %539, 6, !dbg !75
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !75
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !75
  %544 = bitcast float %404 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #2, !dbg !75
  %545 = or disjoint i32 %539, 1, !dbg !75
  %546 = getelementptr float, ptr addrspace(3) %542, i32 %545, !dbg !75
  %547 = bitcast float %407 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %547, i1 true) #2, !dbg !75
  %548 = or disjoint i32 %539, 2, !dbg !75
  %549 = getelementptr float, ptr addrspace(3) %542, i32 %548, !dbg !75
  %550 = bitcast float %410 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #2, !dbg !75
  %551 = or disjoint i32 %539, 3, !dbg !75
  %552 = getelementptr float, ptr addrspace(3) %542, i32 %551, !dbg !75
  %553 = bitcast float %413 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %552, <1 x i32> %553, i1 true) #2, !dbg !75
  %554 = or disjoint i32 %539, 4, !dbg !75
  %555 = getelementptr float, ptr addrspace(3) %542, i32 %554, !dbg !75
  %556 = bitcast float %416 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #2, !dbg !75
  %557 = or disjoint i32 %539, 5, !dbg !75
  %558 = getelementptr float, ptr addrspace(3) %542, i32 %557, !dbg !75
  %559 = bitcast float %419 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %558, <1 x i32> %559, i1 true) #2, !dbg !75
  %560 = or disjoint i32 %539, 6, !dbg !75
  %561 = getelementptr float, ptr addrspace(3) %542, i32 %560, !dbg !75
  %562 = bitcast float %422 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 true) #2, !dbg !75
  %563 = or disjoint i32 %539, 7, !dbg !75
  %564 = getelementptr float, ptr addrspace(3) %542, i32 %563, !dbg !75
  %565 = bitcast float %425 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %565, i1 true) #2, !dbg !75
  %566 = or disjoint i32 %539, 8, !dbg !75
  %567 = getelementptr float, ptr addrspace(3) %542, i32 %566, !dbg !75
  %568 = bitcast float %428 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #2, !dbg !75
  %569 = or disjoint i32 %539, 9, !dbg !75
  %570 = getelementptr float, ptr addrspace(3) %542, i32 %569, !dbg !75
  %571 = bitcast float %431 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 true) #2, !dbg !75
  %572 = or disjoint i32 %539, 10, !dbg !75
  %573 = getelementptr float, ptr addrspace(3) %542, i32 %572, !dbg !75
  %574 = bitcast float %434 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #2, !dbg !75
  %575 = or disjoint i32 %539, 11, !dbg !75
  %576 = getelementptr float, ptr addrspace(3) %542, i32 %575, !dbg !75
  %577 = bitcast float %437 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #2, !dbg !75
  %578 = or disjoint i32 %539, 12, !dbg !75
  %579 = getelementptr float, ptr addrspace(3) %542, i32 %578, !dbg !75
  %580 = bitcast float %440 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #2, !dbg !75
  %581 = or disjoint i32 %539, 13, !dbg !75
  %582 = getelementptr float, ptr addrspace(3) %542, i32 %581, !dbg !75
  %583 = bitcast float %443 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %583, i1 true) #2, !dbg !75
  %584 = or disjoint i32 %539, 14, !dbg !75
  %585 = getelementptr float, ptr addrspace(3) %542, i32 %584, !dbg !75
  %586 = bitcast float %446 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %586, i1 true) #2, !dbg !75
  %587 = or disjoint i32 %539, 15, !dbg !75
  %588 = getelementptr float, ptr addrspace(3) %542, i32 %587, !dbg !75
  %589 = bitcast float %449 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %588, <1 x i32> %589, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %590 = lshr i32 %540, 6, !dbg !75
  %591 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %590, !dbg !75
  %592 = getelementptr inbounds float, ptr addrspace(3) %591, i32 %540, !dbg !75
  %593 = load i32, ptr addrspace(3) %592, align 4, !dbg !75
  %594 = or disjoint i32 %540, 256, !dbg !75
  %595 = lshr i32 %594, 6, !dbg !75
  %596 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %595, !dbg !75
  %597 = getelementptr inbounds float, ptr addrspace(3) %596, i32 %594, !dbg !75
  %598 = load i32, ptr addrspace(3) %597, align 4, !dbg !75
  %599 = or disjoint i32 %540, 512, !dbg !75
  %600 = lshr i32 %599, 6, !dbg !75
  %601 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %600, !dbg !75
  %602 = getelementptr inbounds float, ptr addrspace(3) %601, i32 %599, !dbg !75
  %603 = load i32, ptr addrspace(3) %602, align 4, !dbg !75
  %604 = or disjoint i32 %540, 768, !dbg !75
  %605 = lshr i32 %604, 6, !dbg !75
  %606 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %605, !dbg !75
  %607 = getelementptr inbounds float, ptr addrspace(3) %606, i32 %604, !dbg !75
  %608 = load i32, ptr addrspace(3) %607, align 4, !dbg !75
  %609 = or disjoint i32 %540, 1024, !dbg !75
  %610 = lshr i32 %609, 6, !dbg !75
  %611 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %610, !dbg !75
  %612 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %609, !dbg !75
  %613 = load i32, ptr addrspace(3) %612, align 4, !dbg !75
  %614 = or disjoint i32 %540, 1280, !dbg !75
  %615 = lshr i32 %614, 6, !dbg !75
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615, !dbg !75
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %614, !dbg !75
  %618 = load i32, ptr addrspace(3) %617, align 4, !dbg !75
  %619 = or disjoint i32 %540, 1536, !dbg !75
  %620 = lshr i32 %619, 6, !dbg !75
  %621 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %620, !dbg !75
  %622 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %619, !dbg !75
  %623 = load i32, ptr addrspace(3) %622, align 4, !dbg !75
  %624 = or disjoint i32 %540, 1792, !dbg !75
  %625 = lshr i32 %624, 6, !dbg !75
  %626 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %625, !dbg !75
  %627 = getelementptr inbounds float, ptr addrspace(3) %626, i32 %624, !dbg !75
  %628 = load i32, ptr addrspace(3) %627, align 4, !dbg !75
  %629 = or disjoint i32 %540, 2048, !dbg !75
  %630 = lshr i32 %629, 6, !dbg !75
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !75
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %629, !dbg !75
  %633 = load i32, ptr addrspace(3) %632, align 4, !dbg !75
  %634 = or disjoint i32 %540, 2304, !dbg !75
  %635 = lshr i32 %634, 6, !dbg !75
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !75
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %634, !dbg !75
  %638 = load i32, ptr addrspace(3) %637, align 4, !dbg !75
  %639 = or disjoint i32 %540, 2560, !dbg !75
  %640 = lshr i32 %639, 6, !dbg !75
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !75
  %642 = getelementptr inbounds float, ptr addrspace(3) %641, i32 %639, !dbg !75
  %643 = load i32, ptr addrspace(3) %642, align 4, !dbg !75
  %644 = or disjoint i32 %540, 2816, !dbg !75
  %645 = lshr i32 %644, 6, !dbg !75
  %646 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %645, !dbg !75
  %647 = getelementptr inbounds float, ptr addrspace(3) %646, i32 %644, !dbg !75
  %648 = load i32, ptr addrspace(3) %647, align 4, !dbg !75
  %649 = or disjoint i32 %540, 3072, !dbg !75
  %650 = lshr i32 %649, 6, !dbg !75
  %651 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %650, !dbg !75
  %652 = getelementptr inbounds float, ptr addrspace(3) %651, i32 %649, !dbg !75
  %653 = load i32, ptr addrspace(3) %652, align 4, !dbg !75
  %654 = or disjoint i32 %540, 3328, !dbg !75
  %655 = lshr i32 %654, 6, !dbg !75
  %656 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %655, !dbg !75
  %657 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %654, !dbg !75
  %658 = load i32, ptr addrspace(3) %657, align 4, !dbg !75
  %659 = or disjoint i32 %540, 3584, !dbg !75
  %660 = lshr i32 %659, 6, !dbg !75
  %661 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %660, !dbg !75
  %662 = getelementptr inbounds float, ptr addrspace(3) %661, i32 %659, !dbg !75
  %663 = load i32, ptr addrspace(3) %662, align 4, !dbg !75
  %664 = or disjoint i32 %540, 3840, !dbg !75
  %665 = lshr i32 %664, 6, !dbg !75
  %666 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %665, !dbg !75
  %667 = getelementptr inbounds float, ptr addrspace(3) %666, i32 %664, !dbg !75
  %668 = load i32, ptr addrspace(3) %667, align 4, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %593, ptr addrspace(1) %508, i1 %108) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %598, ptr addrspace(1) %510, i1 %109) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %603, ptr addrspace(1) %512, i1 %110) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %608, ptr addrspace(1) %514, i1 %111) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %613, ptr addrspace(1) %516, i1 %112) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %618, ptr addrspace(1) %518, i1 %113) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %623, ptr addrspace(1) %520, i1 %114) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %628, ptr addrspace(1) %522, i1 %115) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %633, ptr addrspace(1) %524, i1 %116) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %638, ptr addrspace(1) %526, i1 %117) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %643, ptr addrspace(1) %528, i1 %118) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %648, ptr addrspace(1) %530, i1 %119) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %653, ptr addrspace(1) %532, i1 %120) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %658, ptr addrspace(1) %534, i1 %121) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %663, ptr addrspace(1) %536, i1 %122) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %668, ptr addrspace(1) %538, i1 %123) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrb2epqdgq3emzqbxibuvgtlyureccubdfj5b4j4dkzfgctbisv.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!63 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !64)
!66 = !DILocation(line: 53, column: 34, scope: !7)
!67 = !DILocation(line: 53, column: 30, scope: !7)
!68 = !DILocation(line: 53, column: 25, scope: !7)
!69 = !DILocation(line: 53, column: 46, scope: !7)
!70 = !DILocation(line: 54, column: 33, scope: !7)
!71 = !DILocation(line: 54, column: 30, scope: !7)
!72 = !DILocation(line: 54, column: 43, scope: !7)
!73 = !DILocation(line: 54, column: 38, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 55, scope: !7)
!76 = !DILocation(line: 54, column: 4, scope: !7)
