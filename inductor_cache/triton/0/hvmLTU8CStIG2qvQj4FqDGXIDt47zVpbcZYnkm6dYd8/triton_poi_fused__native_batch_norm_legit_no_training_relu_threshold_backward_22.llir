; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !13
  %14 = shl i32 %13, 8, !dbg !14
  %15 = and i32 %12, 127, !dbg !15
  %16 = or disjoint i32 %15, 128, !dbg !15
  %17 = or disjoint i32 %14, %15, !dbg !16
  %18 = or disjoint i32 %14, %16, !dbg !16
  %19 = icmp slt i32 %17, 256, !dbg !17
  %20 = icmp slt i32 %18, 256, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %21 = sdiv i32 %.frozen, 512, !dbg !18
  %22 = mul i32 %21, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %22, !dbg !19
  %23 = shl i32 %17, 9, !dbg !20
  %24 = shl i32 %18, 9, !dbg !20
  %25 = shl i32 %21, 17, !dbg !21
  %26 = add i32 %25, %.decomposed, !dbg !22
  %27 = add i32 %26, %23, !dbg !23
  %28 = add i32 %26, %24, !dbg !23
  %29 = sext i32 %27 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = sext i32 %28 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #4, !dbg !25
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %20) #4, !dbg !25
  %35 = sext i32 %.decomposed to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !29
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !29
  %44 = bitcast i32 %40 to float, !dbg !29
  %45 = bitcast i32 %41 to float, !dbg !29
  %46 = bitcast i32 %42 to float, !dbg !29
  %47 = bitcast i32 %43 to float, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !30
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !33
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !34
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !34
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %56, 0, !dbg !35
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %57, 0, !dbg !35
  br i1 %.not.i, label %63, label %58, !dbg !35

58:                                               ; preds = %9
  br i1 %.not1.i, label %61, label %59, !dbg !35

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

63:                                               ; preds = %9
  br i1 %.not1.i, label %66, label %64, !dbg !35

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !35
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i2 = icmp eq i32 %68, 0, !dbg !35
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i5 = icmp eq i32 %69, 0, !dbg !35
  br i1 %.not.i2, label %75, label %70, !dbg !35

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %73, label %71, !dbg !35

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %78, label %76, !dbg !35

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

__nv_sqrtf.exit6:                                 ; preds = %71, %73, %76, %78
  %.0.i4 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !35
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i7 = icmp eq i32 %80, 0, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i10 = icmp eq i32 %81, 0, !dbg !35
  br i1 %.not.i7, label %87, label %82, !dbg !35

82:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %85, label %83, !dbg !35

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

87:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

__nv_sqrtf.exit11:                                ; preds = %83, %85, %88, %90
  %.0.i9 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !35
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i12 = icmp eq i32 %92, 0, !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i15 = icmp eq i32 %93, 0, !dbg !35
  br i1 %.not.i12, label %99, label %94, !dbg !35

94:                                               ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %97, label %95, !dbg !35

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

99:                                               ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %102, label %100, !dbg !35

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

__nv_sqrtf.exit16:                                ; preds = %95, %97, %100, %102
  %.0.i14 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !35
  %104 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !31
  %124 = shl i32 %12, 2, !dbg !15
  %125 = and i32 %124, 252, !dbg !15
  %126 = or disjoint i32 %14, %125, !dbg !16
  %127 = icmp slt i32 %126, 256, !dbg !17
  %128 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %128, 1, !dbg !12
  %129 = or disjoint i32 %.lobit, 2, !dbg !12
  %130 = or disjoint i32 %11, %129, !dbg !36
  %131 = or disjoint i32 %11, %.lobit, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !37
  %136 = shl i32 %131, 8, !dbg !38
  %137 = shl i32 %130, 8, !dbg !38
  %138 = add i32 %126, %136, !dbg !39
  %139 = add i32 %126, %137, !dbg !39
  %140 = sext i32 %138 to i64, !dbg !40
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !40
  %142 = sext i32 %139 to i64, !dbg !40
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !40
  %144 = and i32 %124, 508, !dbg !41
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !41
  %146 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 1028, !dbg !41
  %147 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 2056, !dbg !41
  %148 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 3084, !dbg !41
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !41
  %150 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 1540, !dbg !41
  %151 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 2568, !dbg !41
  %152 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 3596, !dbg !41
  %153 = lshr i32 %144, 8, !dbg !41
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !41
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %144, !dbg !41
  %156 = or disjoint i32 %144, 1, !dbg !41
  %157 = getelementptr float, ptr addrspace(3) %154, i32 %156, !dbg !41
  %158 = or disjoint i32 %144, 2, !dbg !41
  %159 = getelementptr float, ptr addrspace(3) %154, i32 %158, !dbg !41
  %160 = or disjoint i32 %144, 3, !dbg !41
  %161 = getelementptr float, ptr addrspace(3) %154, i32 %160, !dbg !41
  %162 = or disjoint i32 %144, 512, !dbg !41
  %163 = lshr i32 %162, 8, !dbg !41
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !41
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !41
  %166 = or disjoint i32 %144, 513, !dbg !41
  %167 = lshr i32 %166, 8, !dbg !41
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !41
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !41
  %170 = or disjoint i32 %144, 514, !dbg !41
  %171 = lshr i32 %170, 8, !dbg !41
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !41
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !41
  %174 = or disjoint i32 %144, 515, !dbg !41
  %175 = lshr i32 %174, 8, !dbg !41
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !41
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %174, !dbg !41
  %178 = getelementptr i1, ptr addrspace(1) %6, i64 %29, !dbg !42
  %179 = getelementptr i1, ptr addrspace(1) %6, i64 %31, !dbg !42
  %180 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !27
  %181 = insertelement <4 x i32> %180, i32 %109, i64 1, !dbg !27
  %182 = insertelement <4 x i32> %181, i32 %107, i64 2, !dbg !27
  %183 = insertelement <4 x i32> %182, i32 %105, i64 3, !dbg !27
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !27
  %185 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !25
  %186 = insertelement <4 x i32> %185, i32 %114, i64 1, !dbg !25
  %187 = insertelement <4 x i32> %186, i32 %113, i64 2, !dbg !25
  %188 = insertelement <4 x i32> %187, i32 %112, i64 3, !dbg !25
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !25
  %190 = fsub <4 x float> %189, %184, !dbg !43
  %191 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !33
  %192 = insertelement <4 x i32> %191, i32 %118, i64 1, !dbg !33
  %193 = insertelement <4 x i32> %192, i32 %117, i64 2, !dbg !33
  %194 = insertelement <4 x i32> %193, i32 %116, i64 3, !dbg !33
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !33
  %196 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !31
  %197 = insertelement <4 x i32> %196, i32 %122, i64 1, !dbg !31
  %198 = insertelement <4 x i32> %197, i32 %121, i64 2, !dbg !31
  %199 = insertelement <4 x i32> %198, i32 %120, i64 3, !dbg !31
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !31
  %201 = insertelement <4 x float> poison, float %132, i64 0, !dbg !44
  %202 = insertelement <4 x float> %201, float %133, i64 1, !dbg !44
  %203 = insertelement <4 x float> %202, float %134, i64 2, !dbg !44
  %204 = insertelement <4 x float> %203, float %135, i64 3, !dbg !44
  %205 = fmul <4 x float> %190, %204, !dbg !44
  %206 = fmul <4 x float> %205, %200, !dbg !45
  %207 = fadd <4 x float> %206, %195, !dbg !46
  %208 = fcmp olt <4 x float> %207, zeroinitializer, !dbg !47
  %209 = select <4 x i1> %208, <4 x float> zeroinitializer, <4 x float> %207, !dbg !51
  %210 = fcmp ole <4 x float> %209, zeroinitializer, !dbg !52
  %211 = extractelement <4 x float> %209, i64 0, !dbg !41
  %212 = bitcast float %211 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %212, i1 true) #4, !dbg !41
  %213 = extractelement <4 x float> %209, i64 1, !dbg !41
  %214 = bitcast float %213 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %214, i1 true) #4, !dbg !41
  %215 = extractelement <4 x float> %209, i64 2, !dbg !41
  %216 = bitcast float %215 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %216, i1 true) #4, !dbg !41
  %217 = extractelement <4 x float> %209, i64 3, !dbg !41
  %218 = bitcast float %217 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %218, i1 true) #4, !dbg !41
  %219 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !25
  %220 = insertelement <4 x i32> %219, i32 %108, i64 1, !dbg !25
  %221 = insertelement <4 x i32> %220, i32 %106, i64 2, !dbg !25
  %222 = insertelement <4 x i32> %221, i32 %104, i64 3, !dbg !25
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !25
  %224 = fsub <4 x float> %223, %184, !dbg !43
  %225 = fmul <4 x float> %224, %204, !dbg !44
  %226 = fmul <4 x float> %225, %200, !dbg !45
  %227 = fadd <4 x float> %226, %195, !dbg !46
  %228 = fcmp olt <4 x float> %227, zeroinitializer, !dbg !47
  %229 = select <4 x i1> %228, <4 x float> zeroinitializer, <4 x float> %227, !dbg !51
  %230 = fcmp ole <4 x float> %229, zeroinitializer, !dbg !52
  %231 = extractelement <4 x float> %229, i64 0, !dbg !41
  %232 = bitcast float %231 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %232, i1 true) #4, !dbg !41
  %233 = extractelement <4 x float> %229, i64 1, !dbg !41
  %234 = bitcast float %233 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %234, i1 true) #4, !dbg !41
  %235 = extractelement <4 x float> %229, i64 2, !dbg !41
  %236 = bitcast float %235 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %236, i1 true) #4, !dbg !41
  %237 = extractelement <4 x float> %229, i64 3, !dbg !41
  %238 = bitcast float %237 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %238, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %239 = load i32, ptr addrspace(3) %155, align 4, !dbg !41
  %240 = load i32, ptr addrspace(3) %157, align 4, !dbg !41
  %241 = load i32, ptr addrspace(3) %159, align 4, !dbg !41
  %242 = load i32, ptr addrspace(3) %161, align 4, !dbg !41
  %243 = load i32, ptr addrspace(3) %165, align 4, !dbg !41
  %244 = load i32, ptr addrspace(3) %169, align 4, !dbg !41
  %245 = load i32, ptr addrspace(3) %173, align 4, !dbg !41
  %246 = load i32, ptr addrspace(3) %177, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %240, i32 %241, i32 %242, ptr addrspace(1) %141, i1 %127) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %244, i32 %245, i32 %246, ptr addrspace(1) %143, i1 %127) #4, !dbg !41
  %247 = zext <4 x i1> %210 to <4 x i8>, !dbg !53
  %248 = bitcast <4 x i8> %247 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %248, ptr addrspace(1) %178, i1 %19) #4, !dbg !53
  %249 = zext <4 x i1> %230 to <4 x i8>, !dbg !53
  %250 = bitcast <4 x i8> %249 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %250, ptr addrspace(1) %179, i1 %20) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpwqwtng6etnobseqrwks4p2ky3ztlmn2j2a2iyoa2gnx7ouqmfk.py", directory: "inductor_cache/pw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 23, column: 23, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 34, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 46, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
