; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 5, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = lshr i32 %11, 3, !dbg !16
  %13 = and i32 %12, 15, !dbg !16
  %14 = or disjoint i32 %13, 16, !dbg !16
  %15 = shl i32 %11, 2, !dbg !16
  %16 = and i32 %15, 28, !dbg !16
  %17 = or disjoint i32 %10, %13, !dbg !17
  %18 = or disjoint i32 %10, %14, !dbg !17
  %19 = or disjoint i32 %10, %16, !dbg !17
  %20 = icmp slt i32 %17, 65536, !dbg !18
  %21 = icmp slt i32 %18, 65536, !dbg !18
  %22 = icmp slt i32 %19, 65536, !dbg !18
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %24 = shl i32 %23, 5, !dbg !20
  %25 = or disjoint i32 %24, %16, !dbg !21
  %26 = or disjoint i32 %24, %13, !dbg !21
  %27 = or disjoint i32 %24, %14, !dbg !21
  %28 = icmp slt i32 %25, 400, !dbg !22
  %29 = icmp slt i32 %26, 400, !dbg !22
  %30 = icmp slt i32 %27, 400, !dbg !22
  %.frozen = freeze i32 %19, !dbg !23
  %31 = sdiv i32 %.frozen, 256, !dbg !23
  %32 = mul i32 %31, 256, !dbg !24
  %.decomposed = sub i32 %.frozen, %32, !dbg !24
  %33 = mul i32 %17, 400, !dbg !25
  %34 = mul i32 %18, 400, !dbg !25
  %35 = add i32 %33, %25, !dbg !26
  %36 = add i32 %34, %25, !dbg !26
  %37 = sext i32 %35 to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !27
  %39 = sext i32 %36 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = and i1 %28, %20, !dbg !28
  %42 = and i1 %28, %21, !dbg !28
  %43 = and i1 %29, %22, !dbg !28
  %44 = and i1 %30, %22, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %55 = shl i32 %26, 8, !dbg !30
  %56 = shl i32 %27, 8, !dbg !30
  %57 = mul i32 %31, 102400, !dbg !31
  %58 = add i32 %57, %.decomposed, !dbg !32
  %59 = add i32 %58, %55, !dbg !33
  %60 = add i32 %58, %56, !dbg !33
  %61 = sext i32 %59 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !34
  %63 = sext i32 %60 to i64, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !34
  %65 = shl i32 %11, 7, !dbg !35
  %66 = and i32 %65, 896, !dbg !35
  %67 = or disjoint i32 %66, %13, !dbg !35
  %68 = and i32 %15, 508, !dbg !35
  %69 = lshr exact i32 %66, 1, !dbg !35
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !35
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %67, !dbg !35
  %72 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !35
  %73 = or disjoint i32 %67, 32, !dbg !35
  %74 = lshr i32 %73, 3, !dbg !35
  %75 = and i32 %74, 116, !dbg !35
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !35
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %73, !dbg !35
  %78 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !35
  %79 = or disjoint i32 %67, 64, !dbg !35
  %80 = lshr i32 %79, 3, !dbg !35
  %81 = and i32 %80, 120, !dbg !35
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !35
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %79, !dbg !35
  %84 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !35
  %85 = or disjoint i32 %67, 96, !dbg !35
  %86 = lshr i32 %85, 3, !dbg !35
  %87 = and i32 %86, 124, !dbg !35
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !35
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %85, !dbg !35
  %90 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !35
  %91 = or disjoint i32 %67, 16, !dbg !35
  %92 = getelementptr float, ptr addrspace(3) %70, i32 %91, !dbg !35
  %93 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !35
  %94 = or disjoint i32 %67, 48, !dbg !35
  %95 = lshr i32 %94, 3, !dbg !35
  %96 = and i32 %95, 116, !dbg !35
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !35
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !35
  %99 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !35
  %100 = or disjoint i32 %67, 80, !dbg !35
  %101 = lshr i32 %100, 3, !dbg !35
  %102 = and i32 %101, 120, !dbg !35
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !35
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100, !dbg !35
  %105 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !35
  %106 = or disjoint i32 %67, 112, !dbg !35
  %107 = lshr i32 %106, 3, !dbg !35
  %108 = and i32 %107, 124, !dbg !35
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !35
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %106, !dbg !35
  %111 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %112 = lshr i32 %15, 3, !dbg !35
  %113 = and i32 %112, 60, !dbg !35
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !35
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %68, !dbg !35
  %116 = or disjoint i32 %68, 512, !dbg !35
  %117 = lshr i32 %116, 3, !dbg !35
  %118 = and i32 %117, 124, !dbg !35
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !35
  %120 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %116, !dbg !35
  %121 = load <4 x i32>, ptr addrspace(3) %120, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %115, align 16, !dbg !35
  %122 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %122, align 4, !dbg !35
  %123 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %123, align 8, !dbg !35
  %124 = getelementptr inbounds i8, ptr addrspace(3) %115, i32 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %124, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %62, i1 %43) #2, !dbg !35
  %.extract11 = extractelement <4 x i32> %121, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %121, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %121, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %121, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %64, i1 %44) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyna3q6cj54fy5izbjyzpv6i2xlzjrufbjb6z2nhco4qyfpkbyx3.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_poi_fused_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_2", linkageName: "triton_poi_fused_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 23, scope: !7)
!22 = !DILocation(line: 27, column: 21, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 32, column: 39, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 32, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 34, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 39, scope: !7)
!34 = !DILocation(line: 33, column: 25, scope: !7)
!35 = !DILocation(line: 33, column: 57, scope: !7)
!36 = !DILocation(line: 33, column: 4, scope: !7)
