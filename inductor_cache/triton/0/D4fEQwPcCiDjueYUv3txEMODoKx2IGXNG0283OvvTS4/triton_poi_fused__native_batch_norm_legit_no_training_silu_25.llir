; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 5, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %13, 16, !dbg !12
  %16 = or disjoint i32 %13, 24, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = or disjoint i32 %10, %13, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = or disjoint i32 %10, %15, !dbg !13
  %21 = or disjoint i32 %10, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = shl i32 %22, 7, !dbg !15
  %24 = and i32 %17, 124, !dbg !16
  %25 = or disjoint i32 %23, %24, !dbg !17
  %26 = icmp slt i32 %25, 128, !dbg !18
  %27 = shl i32 %18, 7, !dbg !19
  %28 = shl i32 %19, 7, !dbg !19
  %29 = shl i32 %20, 7, !dbg !19
  %30 = shl i32 %21, 7, !dbg !19
  %31 = add i32 %25, %27, !dbg !20
  %32 = add i32 %25, %28, !dbg !20
  %33 = add i32 %25, %29, !dbg !20
  %34 = add i32 %25, %30, !dbg !20
  %35 = sext i32 %31 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = sext i32 %32 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %33 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %34 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %26) #4, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #4, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %26) #4, !dbg !22
  %47 = sext i32 %25 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %26) #4, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %26) #4, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %26) #4, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !29
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %26) #4, !dbg !30
  %64 = fadd float %56, 0x3F50624DE0000000, !dbg !31
  %65 = fadd float %57, 0x3F50624DE0000000, !dbg !31
  %66 = fadd float %58, 0x3F50624DE0000000, !dbg !31
  %67 = fadd float %59, 0x3F50624DE0000000, !dbg !31
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %68, 0, !dbg !32
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %69, 0, !dbg !32
  br i1 %.not.i, label %75, label %70, !dbg !32

70:                                               ; preds = %8
  br i1 %.not1.i, label %73, label %71, !dbg !32

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

75:                                               ; preds = %8
  br i1 %.not1.i, label %78, label %76, !dbg !32

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !32
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i34 = icmp eq i32 %80, 0, !dbg !32
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i37 = icmp eq i32 %81, 0, !dbg !32
  br i1 %.not.i34, label %87, label %82, !dbg !32

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %85, label %83, !dbg !32

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !32
  br label %__nv_sqrtf.exit38, !dbg !32

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !32
  br label %__nv_sqrtf.exit38, !dbg !32

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %90, label %88, !dbg !32

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !32
  br label %__nv_sqrtf.exit38, !dbg !32

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !32
  br label %__nv_sqrtf.exit38, !dbg !32

__nv_sqrtf.exit38:                                ; preds = %83, %85, %88, %90
  %.0.i36 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !32
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i39 = icmp eq i32 %92, 0, !dbg !32
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i42 = icmp eq i32 %93, 0, !dbg !32
  br i1 %.not.i39, label %99, label %94, !dbg !32

94:                                               ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %97, label %95, !dbg !32

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !32
  br label %__nv_sqrtf.exit43, !dbg !32

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !32
  br label %__nv_sqrtf.exit43, !dbg !32

99:                                               ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %102, label %100, !dbg !32

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !32
  br label %__nv_sqrtf.exit43, !dbg !32

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !32
  br label %__nv_sqrtf.exit43, !dbg !32

__nv_sqrtf.exit43:                                ; preds = %95, %97, %100, %102
  %.0.i41 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !32
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i44 = icmp eq i32 %104, 0, !dbg !32
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i47 = icmp eq i32 %105, 0, !dbg !32
  br i1 %.not.i44, label %111, label %106, !dbg !32

106:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %109, label %107, !dbg !32

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit48, !dbg !32

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit48, !dbg !32

111:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %114, label %112, !dbg !32

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit48, !dbg !32

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit48, !dbg !32

__nv_sqrtf.exit48:                                ; preds = %107, %109, %112, %114
  %.0.i46 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %117 = bitcast i32 %116 to float, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %119 = bitcast i32 %118 to float, !dbg !24
  %120 = fsub float %117, %119, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %122 = bitcast i32 %121 to float, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %124 = bitcast i32 %123 to float, !dbg !24
  %125 = fsub float %122, %124, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %127 = bitcast i32 %126 to float, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %129 = bitcast i32 %128 to float, !dbg !24
  %130 = fsub float %127, %129, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %132 = bitcast i32 %131 to float, !dbg !22
  %133 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %134 = bitcast i32 %133 to float, !dbg !24
  %135 = fsub float %132, %134, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %137 = bitcast i32 %136 to float, !dbg !22
  %138 = fsub float %137, %119, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %140 = bitcast i32 %139 to float, !dbg !22
  %141 = fsub float %140, %124, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %143 = bitcast i32 %142 to float, !dbg !22
  %144 = fsub float %143, %129, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %146 = bitcast i32 %145 to float, !dbg !22
  %147 = fsub float %146, %134, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %149 = bitcast i32 %148 to float, !dbg !22
  %150 = fsub float %149, %119, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %152 = bitcast i32 %151 to float, !dbg !22
  %153 = fsub float %152, %124, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %155 = bitcast i32 %154 to float, !dbg !22
  %156 = fsub float %155, %129, !dbg !33
  %157 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %158 = bitcast i32 %157 to float, !dbg !22
  %159 = fsub float %158, %134, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %161 = bitcast i32 %160 to float, !dbg !22
  %162 = fsub float %161, %119, !dbg !33
  %163 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %164 = bitcast i32 %163 to float, !dbg !22
  %165 = fsub float %164, %124, !dbg !33
  %166 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %167 = bitcast i32 %166 to float, !dbg !22
  %168 = fsub float %167, %129, !dbg !33
  %169 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %170 = bitcast i32 %169 to float, !dbg !22
  %171 = fsub float %170, %134, !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %181 = bitcast i32 %180 to float, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %185 = bitcast i32 %184 to float, !dbg !28
  %186 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %187 = bitcast i32 %186 to float, !dbg !28
  %188 = and i32 %17, 28, !dbg !12
  %189 = or disjoint i32 %10, %188, !dbg !13
  %.frozen = freeze i32 %189, !dbg !34
  %190 = sdiv i32 %.frozen, 256, !dbg !34
  %191 = mul i32 %190, 256, !dbg !35
  %.decomposed = sub i32 %.frozen, %191, !dbg !35
  %192 = lshr i32 %11, 3, !dbg !16
  %193 = and i32 %192, 31, !dbg !16
  %194 = or disjoint i32 %193, %23, !dbg !17
  %195 = or disjoint i32 %194, 96, !dbg !17
  %196 = icmp slt i32 %195, 128, !dbg !18
  %197 = or disjoint i32 %194, 64, !dbg !17
  %198 = icmp slt i32 %197, 128, !dbg !18
  %199 = or disjoint i32 %194, 32, !dbg !17
  %200 = icmp slt i32 %199, 128, !dbg !18
  %201 = icmp slt i32 %194, 128, !dbg !18
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !36
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !36
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !36
  %206 = fmul float %171, %202, !dbg !37
  %207 = fmul float %168, %203, !dbg !37
  %208 = fmul float %165, %204, !dbg !37
  %209 = fmul float %162, %205, !dbg !37
  %210 = fmul float %159, %202, !dbg !37
  %211 = fmul float %156, %203, !dbg !37
  %212 = fmul float %153, %204, !dbg !37
  %213 = fmul float %150, %205, !dbg !37
  %214 = fmul float %147, %202, !dbg !37
  %215 = fmul float %144, %203, !dbg !37
  %216 = fmul float %141, %204, !dbg !37
  %217 = fmul float %138, %205, !dbg !37
  %218 = fmul float %135, %202, !dbg !37
  %219 = fmul float %130, %203, !dbg !37
  %220 = fmul float %125, %204, !dbg !37
  %221 = fmul float %120, %205, !dbg !37
  %222 = fmul float %206, %187, !dbg !38
  %223 = fmul float %207, %185, !dbg !38
  %224 = fmul float %208, %183, !dbg !38
  %225 = fmul float %209, %181, !dbg !38
  %226 = fmul float %210, %187, !dbg !38
  %227 = fmul float %211, %185, !dbg !38
  %228 = fmul float %212, %183, !dbg !38
  %229 = fmul float %213, %181, !dbg !38
  %230 = fmul float %214, %187, !dbg !38
  %231 = fmul float %215, %185, !dbg !38
  %232 = fmul float %216, %183, !dbg !38
  %233 = fmul float %217, %181, !dbg !38
  %234 = fmul float %218, %187, !dbg !38
  %235 = fmul float %219, %185, !dbg !38
  %236 = fmul float %220, %183, !dbg !38
  %237 = fmul float %221, %181, !dbg !38
  %238 = fadd float %222, %179, !dbg !39
  %239 = fadd float %223, %177, !dbg !39
  %240 = fadd float %224, %175, !dbg !39
  %241 = fadd float %225, %173, !dbg !39
  %242 = fadd float %226, %179, !dbg !39
  %243 = fadd float %227, %177, !dbg !39
  %244 = fadd float %228, %175, !dbg !39
  %245 = fadd float %229, %173, !dbg !39
  %246 = fadd float %230, %179, !dbg !39
  %247 = fadd float %231, %177, !dbg !39
  %248 = fadd float %232, %175, !dbg !39
  %249 = fadd float %233, %173, !dbg !39
  %250 = fadd float %234, %179, !dbg !39
  %251 = fadd float %235, %177, !dbg !39
  %252 = fadd float %236, %175, !dbg !39
  %253 = fadd float %237, %173, !dbg !39
  %254 = fsub float 0.000000e+00, %238, !dbg !40
  %255 = fsub float 0.000000e+00, %239, !dbg !40
  %256 = fsub float 0.000000e+00, %240, !dbg !40
  %257 = fsub float 0.000000e+00, %241, !dbg !40
  %258 = fsub float 0.000000e+00, %242, !dbg !40
  %259 = fsub float 0.000000e+00, %243, !dbg !40
  %260 = fsub float 0.000000e+00, %244, !dbg !40
  %261 = fsub float 0.000000e+00, %245, !dbg !40
  %262 = fsub float 0.000000e+00, %246, !dbg !40
  %263 = fsub float 0.000000e+00, %247, !dbg !40
  %264 = fsub float 0.000000e+00, %248, !dbg !40
  %265 = fsub float 0.000000e+00, %249, !dbg !40
  %266 = fsub float 0.000000e+00, %250, !dbg !40
  %267 = fsub float 0.000000e+00, %251, !dbg !40
  %268 = fsub float 0.000000e+00, %252, !dbg !40
  %269 = fsub float 0.000000e+00, %253, !dbg !40
  %270 = fmul float %254, 0x3FF7154760000000, !dbg !44
  %271 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %270) #4, !dbg !44
  %272 = fmul float %255, 0x3FF7154760000000, !dbg !44
  %273 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %272) #4, !dbg !44
  %274 = fmul float %256, 0x3FF7154760000000, !dbg !44
  %275 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %274) #4, !dbg !44
  %276 = fmul float %257, 0x3FF7154760000000, !dbg !44
  %277 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %276) #4, !dbg !44
  %278 = fmul float %258, 0x3FF7154760000000, !dbg !44
  %279 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %278) #4, !dbg !44
  %280 = fmul float %259, 0x3FF7154760000000, !dbg !44
  %281 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %280) #4, !dbg !44
  %282 = fmul float %260, 0x3FF7154760000000, !dbg !44
  %283 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %282) #4, !dbg !44
  %284 = fmul float %261, 0x3FF7154760000000, !dbg !44
  %285 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %284) #4, !dbg !44
  %286 = fmul float %262, 0x3FF7154760000000, !dbg !44
  %287 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %286) #4, !dbg !44
  %288 = fmul float %263, 0x3FF7154760000000, !dbg !44
  %289 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %288) #4, !dbg !44
  %290 = fmul float %264, 0x3FF7154760000000, !dbg !44
  %291 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %290) #4, !dbg !44
  %292 = fmul float %265, 0x3FF7154760000000, !dbg !44
  %293 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #4, !dbg !44
  %294 = fmul float %266, 0x3FF7154760000000, !dbg !44
  %295 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %294) #4, !dbg !44
  %296 = fmul float %267, 0x3FF7154760000000, !dbg !44
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %296) #4, !dbg !44
  %298 = fmul float %268, 0x3FF7154760000000, !dbg !44
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %298) #4, !dbg !44
  %300 = fmul float %269, 0x3FF7154760000000, !dbg !44
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #4, !dbg !44
  %302 = fadd float %271, 1.000000e+00, !dbg !45
  %303 = fadd float %273, 1.000000e+00, !dbg !45
  %304 = fadd float %275, 1.000000e+00, !dbg !45
  %305 = fadd float %277, 1.000000e+00, !dbg !45
  %306 = fadd float %279, 1.000000e+00, !dbg !45
  %307 = fadd float %281, 1.000000e+00, !dbg !45
  %308 = fadd float %283, 1.000000e+00, !dbg !45
  %309 = fadd float %285, 1.000000e+00, !dbg !45
  %310 = fadd float %287, 1.000000e+00, !dbg !45
  %311 = fadd float %289, 1.000000e+00, !dbg !45
  %312 = fadd float %291, 1.000000e+00, !dbg !45
  %313 = fadd float %293, 1.000000e+00, !dbg !45
  %314 = fadd float %295, 1.000000e+00, !dbg !45
  %315 = fadd float %297, 1.000000e+00, !dbg !45
  %316 = fadd float %299, 1.000000e+00, !dbg !45
  %317 = fadd float %301, 1.000000e+00, !dbg !45
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %302) #4, !dbg !46
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %303) #4, !dbg !46
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #4, !dbg !46
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #4, !dbg !46
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #4, !dbg !46
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #4, !dbg !46
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #4, !dbg !46
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %309) #4, !dbg !46
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %310) #4, !dbg !46
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #4, !dbg !46
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #4, !dbg !46
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #4, !dbg !46
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #4, !dbg !46
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #4, !dbg !46
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #4, !dbg !46
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #4, !dbg !46
  %334 = fmul float %238, %318, !dbg !47
  %335 = fmul float %239, %319, !dbg !47
  %336 = fmul float %240, %320, !dbg !47
  %337 = fmul float %241, %321, !dbg !47
  %338 = fmul float %242, %322, !dbg !47
  %339 = fmul float %243, %323, !dbg !47
  %340 = fmul float %244, %324, !dbg !47
  %341 = fmul float %245, %325, !dbg !47
  %342 = fmul float %246, %326, !dbg !47
  %343 = fmul float %247, %327, !dbg !47
  %344 = fmul float %248, %328, !dbg !47
  %345 = fmul float %249, %329, !dbg !47
  %346 = fmul float %250, %330, !dbg !47
  %347 = fmul float %251, %331, !dbg !47
  %348 = fmul float %252, %332, !dbg !47
  %349 = fmul float %253, %333, !dbg !47
  %350 = shl i32 %194, 8, !dbg !48
  %351 = shl i32 %199, 8, !dbg !48
  %352 = shl i32 %197, 8, !dbg !48
  %353 = shl i32 %195, 8, !dbg !48
  %354 = shl i32 %190, 15, !dbg !49
  %355 = add i32 %354, %.decomposed, !dbg !50
  %356 = add i32 %355, %350, !dbg !51
  %357 = add i32 %355, %351, !dbg !51
  %358 = add i32 %355, %352, !dbg !51
  %359 = add i32 %355, %353, !dbg !51
  %360 = sext i32 %356 to i64, !dbg !52
  %361 = getelementptr float, ptr addrspace(1) %5, i64 %360, !dbg !52
  %362 = sext i32 %357 to i64, !dbg !52
  %363 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !52
  %364 = sext i32 %358 to i64, !dbg !52
  %365 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !52
  %366 = sext i32 %359 to i64, !dbg !52
  %367 = getelementptr float, ptr addrspace(1) %5, i64 %366, !dbg !52
  %368 = shl i32 %11, 7, !dbg !53
  %369 = and i32 %368, 3968, !dbg !53
  %370 = or disjoint i32 %369, %13, !dbg !53
  %371 = and i32 %17, 1020, !dbg !53
  %372 = lshr exact i32 %369, 1, !dbg !53
  %373 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %372, !dbg !53
  %374 = getelementptr float, ptr addrspace(3) %373, i32 %370, !dbg !53
  %375 = bitcast float %334 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !53
  %376 = or disjoint i32 %370, 32, !dbg !53
  %377 = lshr i32 %376, 3, !dbg !53
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !53
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %376, !dbg !53
  %380 = bitcast float %335 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !53
  %381 = or disjoint i32 %370, 64, !dbg !53
  %382 = lshr i32 %381, 3, !dbg !53
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !53
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %381, !dbg !53
  %385 = bitcast float %336 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !53
  %386 = or disjoint i32 %370, 96, !dbg !53
  %387 = lshr i32 %386, 3, !dbg !53
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !53
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %386, !dbg !53
  %390 = bitcast float %337 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !53
  %391 = or disjoint i32 %370, 8, !dbg !53
  %392 = getelementptr float, ptr addrspace(3) %373, i32 %391, !dbg !53
  %393 = bitcast float %338 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !53
  %394 = or disjoint i32 %370, 40, !dbg !53
  %395 = lshr i32 %394, 3, !dbg !53
  %396 = and i32 %395, 500, !dbg !53
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !53
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !53
  %399 = bitcast float %339 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !53
  %400 = or disjoint i32 %370, 72, !dbg !53
  %401 = lshr i32 %400, 3, !dbg !53
  %402 = and i32 %401, 504, !dbg !53
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !53
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !53
  %405 = bitcast float %340 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !53
  %406 = or disjoint i32 %370, 104, !dbg !53
  %407 = lshr i32 %406, 3, !dbg !53
  %408 = and i32 %407, 508, !dbg !53
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !53
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %406, !dbg !53
  %411 = bitcast float %341 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !53
  %412 = or disjoint i32 %370, 16, !dbg !53
  %413 = getelementptr float, ptr addrspace(3) %373, i32 %412, !dbg !53
  %414 = bitcast float %342 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #4, !dbg !53
  %415 = or disjoint i32 %370, 48, !dbg !53
  %416 = lshr i32 %415, 3, !dbg !53
  %417 = and i32 %416, 500, !dbg !53
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !53
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %415, !dbg !53
  %420 = bitcast float %343 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !53
  %421 = or disjoint i32 %370, 80, !dbg !53
  %422 = lshr i32 %421, 3, !dbg !53
  %423 = and i32 %422, 504, !dbg !53
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i32 %423, !dbg !53
  %425 = getelementptr float, ptr addrspace(3) %424, i32 %421, !dbg !53
  %426 = bitcast float %344 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #4, !dbg !53
  %427 = or disjoint i32 %370, 112, !dbg !53
  %428 = lshr i32 %427, 3, !dbg !53
  %429 = and i32 %428, 508, !dbg !53
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i32 %429, !dbg !53
  %431 = getelementptr float, ptr addrspace(3) %430, i32 %427, !dbg !53
  %432 = bitcast float %345 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #4, !dbg !53
  %433 = or disjoint i32 %370, 24, !dbg !53
  %434 = getelementptr float, ptr addrspace(3) %373, i32 %433, !dbg !53
  %435 = bitcast float %346 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !53
  %436 = or disjoint i32 %370, 56, !dbg !53
  %437 = lshr i32 %436, 3, !dbg !53
  %438 = and i32 %437, 500, !dbg !53
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !53
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !53
  %441 = bitcast float %347 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !53
  %442 = or disjoint i32 %370, 88, !dbg !53
  %443 = lshr i32 %442, 3, !dbg !53
  %444 = and i32 %443, 504, !dbg !53
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !53
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %442, !dbg !53
  %447 = bitcast float %348 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %447, i1 true) #4, !dbg !53
  %448 = or disjoint i32 %370, 120, !dbg !53
  %449 = lshr i32 %448, 3, !dbg !53
  %450 = and i32 %449, 508, !dbg !53
  %451 = getelementptr float, ptr addrspace(3) @global_smem, i32 %450, !dbg !53
  %452 = getelementptr float, ptr addrspace(3) %451, i32 %448, !dbg !53
  %453 = bitcast float %349 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %453, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %454 = lshr i32 %17, 3, !dbg !53
  %455 = and i32 %454, 124, !dbg !53
  %456 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %455, !dbg !53
  %457 = getelementptr inbounds float, ptr addrspace(3) %456, i32 %371, !dbg !53
  %458 = or disjoint i32 %371, 1024, !dbg !53
  %459 = lshr i32 %458, 3, !dbg !53
  %460 = and i32 %459, 252, !dbg !53
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !53
  %462 = getelementptr inbounds float, ptr addrspace(3) %461, i32 %458, !dbg !53
  %463 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !53
  %464 = or disjoint i32 %371, 2048, !dbg !53
  %465 = lshr i32 %464, 3, !dbg !53
  %466 = and i32 %465, 380, !dbg !53
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %466, !dbg !53
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %464, !dbg !53
  %469 = load <4 x i32>, ptr addrspace(3) %468, align 16, !dbg !53
  %470 = or disjoint i32 %371, 3072, !dbg !53
  %471 = lshr i32 %470, 3, !dbg !53
  %472 = and i32 %471, 508, !dbg !53
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !53
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %470, !dbg !53
  %475 = load <4 x i32>, ptr addrspace(3) %474, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %457, align 16, !dbg !53
  %476 = getelementptr inbounds i8, ptr addrspace(3) %457, i32 4, !dbg !53
  %.extract19 = load i32, ptr addrspace(3) %476, align 4, !dbg !53
  %477 = getelementptr inbounds i8, ptr addrspace(3) %457, i32 8, !dbg !53
  %.extract20 = load i32, ptr addrspace(3) %477, align 8, !dbg !53
  %478 = getelementptr inbounds i8, ptr addrspace(3) %457, i32 12, !dbg !53
  %.extract21 = load i32, ptr addrspace(3) %478, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %361, i1 %201) #4, !dbg !53
  %.extract22 = extractelement <4 x i32> %463, i64 0, !dbg !53
  %.extract23 = extractelement <4 x i32> %463, i64 1, !dbg !53
  %.extract24 = extractelement <4 x i32> %463, i64 2, !dbg !53
  %.extract25 = extractelement <4 x i32> %463, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %363, i1 %200) #4, !dbg !53
  %.extract26 = extractelement <4 x i32> %469, i64 0, !dbg !53
  %.extract27 = extractelement <4 x i32> %469, i64 1, !dbg !53
  %.extract28 = extractelement <4 x i32> %469, i64 2, !dbg !53
  %.extract29 = extractelement <4 x i32> %469, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %365, i1 %198) #4, !dbg !53
  %.extract30 = extractelement <4 x i32> %475, i64 0, !dbg !53
  %.extract31 = extractelement <4 x i32> %475, i64 1, !dbg !53
  %.extract32 = extractelement <4 x i32> %475, i64 2, !dbg !53
  %.extract33 = extractelement <4 x i32> %475, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %367, i1 %196) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py", directory: "inductor_cache/e3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 48, column: 23, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 39, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 57, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
