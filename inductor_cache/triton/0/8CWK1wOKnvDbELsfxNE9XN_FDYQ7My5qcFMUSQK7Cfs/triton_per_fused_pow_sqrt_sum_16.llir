; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_pow_sqrt_sum_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = shl i32 %7, 1, !dbg !12
  %12 = and i32 %11, 126, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 256, !dbg !15
  %16 = mul i32 %15, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %7, 3, !dbg !17
  %18 = and i32 %17, 256, !dbg !17
  %19 = add nsw i32 %.decomposed, %18, !dbg !18
  %20 = shl i32 %15, 9, !dbg !19
  %21 = add i32 %19, %20, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !22
  %29 = and i32 %10, 1, !dbg !23
  %30 = shl nuw nsw i32 %9, 1, !dbg !23
  %31 = or disjoint i32 %30, %29, !dbg !23
  %32 = getelementptr float, ptr addrspace(3) @global_smem, i32 %31, !dbg !23
  %33 = select i1 %14, i32 %25, i32 0, !dbg !27
  %34 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %34, i1 true) #5, !dbg !23
  %35 = or disjoint i32 %30, 2, !dbg !23
  %36 = or disjoint i32 %35, %29, !dbg !23
  %37 = getelementptr float, ptr addrspace(3) @global_smem, i32 %36, !dbg !23
  %38 = select i1 %14, i32 %26, i32 0, !dbg !27
  %39 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %39, i1 true) #5, !dbg !23
  %40 = or disjoint i32 %30, 4, !dbg !23
  %41 = or disjoint i32 %40, %29, !dbg !23
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i32 %41, !dbg !23
  %43 = select i1 %14, i32 %27, i32 0, !dbg !27
  %44 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %44, i1 true) #5, !dbg !23
  %45 = or disjoint i32 %30, 6, !dbg !23
  %46 = or disjoint i32 %45, %29, !dbg !23
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %46, !dbg !23
  %48 = select i1 %14, i32 %28, i32 0, !dbg !27
  %49 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %49, i1 true) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %50 = icmp slt i32 %7, 256, !dbg !23
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !23
  %52 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %51, i1 %50) #5, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = fadd float %53, %55, !dbg !28
  %57 = and i32 %7, 1, !dbg !23
  %58 = icmp eq i32 %57, 0, !dbg !23
  %59 = and i1 %50, %58, !dbg !23
  %60 = bitcast float %56 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %60, i1 %59) #5, !dbg !23
  %61 = getelementptr i8, ptr addrspace(3) %51, i32 256, !dbg !23
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %50) #5, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %63, %65, !dbg !28
  %67 = bitcast float %66 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %67, i1 %59) #5, !dbg !23
  %68 = getelementptr i8, ptr addrspace(3) %51, i32 512, !dbg !23
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %50) #5, !dbg !23
  %70 = bitcast i32 %69 to float, !dbg !23
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = fadd float %70, %72, !dbg !28
  %74 = bitcast float %73 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %74, i1 %59) #5, !dbg !23
  %75 = getelementptr i8, ptr addrspace(3) %51, i32 768, !dbg !23
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %50) #5, !dbg !23
  %77 = bitcast i32 %76 to float, !dbg !23
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !23
  %79 = bitcast i32 %78 to float, !dbg !23
  %80 = fadd float %77, %79, !dbg !28
  %81 = bitcast float %80 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %81, i1 %59) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !23
  %83 = load i32, ptr addrspace(3) %82, align 16, !dbg !23
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %35, !dbg !23
  %85 = load i32, ptr addrspace(3) %84, align 8, !dbg !23
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %40, !dbg !23
  %87 = load i32, ptr addrspace(3) %86, align 16, !dbg !23
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45, !dbg !23
  %89 = load i32, ptr addrspace(3) %88, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %90, i32 %83, i32 %85, i32 %87, i32 %89, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %92 = load float, ptr addrspace(3) %91, align 8, !dbg !30
  %93 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 4, !dbg !30
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !30
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %95, 0, !dbg !30
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %96, 0, !dbg !30
  br i1 %.not.i, label %102, label %97, !dbg !30

97:                                               ; preds = %4
  br i1 %.not1.i, label %100, label %98, !dbg !30

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

102:                                              ; preds = %4
  br i1 %.not1.i, label %105, label %103, !dbg !30

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !30
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i2 = icmp eq i32 %107, 0, !dbg !30
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i5 = icmp eq i32 %108, 0, !dbg !30
  br i1 %.not.i2, label %114, label %109, !dbg !30

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %112, label %110, !dbg !30

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #5, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #5, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %117, label %115, !dbg !30

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #5, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #5, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

__nv_sqrtf.exit6:                                 ; preds = %110, %112, %115, %117
  %.0.i4 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !30
  %119 = or disjoint i32 %6, %12, !dbg !13
  %120 = icmp slt i32 %119, 1024, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %121 = sext i32 %119 to i64, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !32
  %123 = bitcast float %.0.i to i32, !dbg !33
  %124 = bitcast float %.0.i4 to i32, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 %120) #5, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chikj3aqgj3gkiervnpnbi3suqtojwijl72225rpagxzgckmmxsl.py", directory: "inductor_cache/hi")
!4 = !{ptr @triton_per_fused_pow_sqrt_sum_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_pow_sqrt_sum_16, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_pow_sqrt_sum_16", linkageName: "triton_per_fused_pow_sqrt_sum_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 35, column: 33, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !26)
!29 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
!32 = !DILocation(line: 39, column: 28, scope: !7)
!33 = !DILocation(line: 39, column: 39, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
