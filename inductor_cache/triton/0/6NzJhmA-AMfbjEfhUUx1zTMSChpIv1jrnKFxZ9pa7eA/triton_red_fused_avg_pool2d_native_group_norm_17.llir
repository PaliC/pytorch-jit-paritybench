; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = lshr i32 %10, 4, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %9, %11, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = icmp slt i32 %16, 128, !dbg !14
  %20 = lshr i32 %10, 6, !dbg !15
  %21 = shl i32 %10, 2, !dbg !15
  %22 = and i32 %21, 60, !dbg !15
  %23 = shl i32 %14, 11, !dbg !16
  %24 = shl i32 %15, 9, !dbg !17
  %25 = shl i32 %16, 9, !dbg !17
  %26 = shl nuw nsw i32 %20, 1
  %27 = and i32 %26, 14
  %invariant.op = or disjoint i32 %27, 32, !dbg !18
  %invariant.op35 = or disjoint i32 %27, 64, !dbg !18
  %invariant.op37 = or disjoint i32 %27, 96, !dbg !18
  %invariant.op39 = or disjoint i32 %27, 128, !dbg !18
  %invariant.op41 = or disjoint i32 %27, 160, !dbg !18
  %invariant.op43 = or disjoint i32 %27, 192, !dbg !18
  %invariant.op45 = or disjoint i32 %27, 224, !dbg !18
  %28 = shl i32 %10, 6
  %29 = and i32 %28, 4032
  %30 = and i32 %20, 7
  %31 = or disjoint i32 %29, %30
  %32 = and i32 %21, 2044
  %33 = lshr exact i32 %29, 2
  %34 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %33
  %35 = getelementptr float, ptr addrspace(3) %34, i32 %31
  %36 = or disjoint i32 %31, 8
  %37 = getelementptr float, ptr addrspace(3) %34, i32 %36
  %38 = or disjoint i32 %31, 16
  %39 = getelementptr float, ptr addrspace(3) %34, i32 %38
  %40 = or disjoint i32 %31, 24
  %41 = getelementptr float, ptr addrspace(3) %34, i32 %40
  %42 = or disjoint i32 %31, 32
  %43 = getelementptr float, ptr addrspace(3) %34, i32 %42
  %44 = or disjoint i32 %31, 40
  %45 = getelementptr float, ptr addrspace(3) %34, i32 %44
  %46 = or disjoint i32 %31, 48
  %47 = getelementptr float, ptr addrspace(3) %34, i32 %46
  %48 = or disjoint i32 %31, 56
  %49 = getelementptr float, ptr addrspace(3) %34, i32 %48
  %50 = lshr i32 %21, 4
  %51 = and i32 %50, 124
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %32
  %54 = or disjoint i32 %32, 2048
  %55 = lshr i32 %54, 4
  %56 = and i32 %55, 252
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %54
  %59 = zext nneg i32 %27 to i64, !dbg !18
  %60 = sext i32 %23 to i64, !dbg !18
  %61 = zext nneg i32 %invariant.op to i64, !dbg !18
  %62 = zext nneg i32 %invariant.op35 to i64, !dbg !18
  %63 = zext nneg i32 %invariant.op37 to i64, !dbg !18
  %64 = zext nneg i32 %invariant.op39 to i64, !dbg !18
  %65 = zext nneg i32 %invariant.op41 to i64, !dbg !18
  %66 = zext nneg i32 %invariant.op43 to i64, !dbg !18
  %67 = zext nneg i32 %invariant.op45 to i64, !dbg !18
  %68 = zext nneg i32 %22 to i64, !dbg !18
  %69 = sext i32 %24 to i64, !dbg !18
  %70 = sext i32 %25 to i64, !dbg !18
  %invariant.op146 = or disjoint i64 %59, %60, !dbg !18
  %invariant.op147 = or disjoint i64 %61, %60, !dbg !18
  %invariant.op149 = or disjoint i64 %62, %60, !dbg !18
  %invariant.op151 = or disjoint i64 %63, %60, !dbg !18
  %invariant.op153 = or disjoint i64 %64, %60, !dbg !18
  %invariant.op155 = or disjoint i64 %65, %60, !dbg !18
  %invariant.op157 = or disjoint i64 %66, %60, !dbg !18
  %invariant.op159 = or disjoint i64 %67, %60, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !18
  %invariant.gep161 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !18
  %71 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 4
  %72 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 8
  %73 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 12
  %74 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !19
  %75 = shufflevector <8 x i1> %74, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !19
  %invariant.op218 = or i32 %27, %23, !dbg !18
  %invariant.op220 = or i32 %invariant.op, %23, !dbg !18
  %invariant.op222 = or i32 %invariant.op35, %23, !dbg !18
  %invariant.op224 = or i32 %invariant.op37, %23, !dbg !18
  %invariant.op226 = or i32 %invariant.op39, %23, !dbg !18
  %invariant.op228 = or i32 %invariant.op41, %23, !dbg !18
  %invariant.op230 = or i32 %invariant.op43, %23, !dbg !18
  %invariant.op232 = or i32 %invariant.op45, %23, !dbg !18
  br label %76, !dbg !18

76:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %357, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %358, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %359, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %360, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %361, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %362, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %363, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %364, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %349, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %350, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %351, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %352, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %353, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %354, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %355, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %356, %._crit_edge ]
  %93 = phi <8 x float> [ zeroinitializer, %7 ], [ %348, %._crit_edge ]
  %94 = or disjoint i64 %indvars.iv, %68, !dbg !20
  %95 = shl nuw nsw i64 %indvars.iv, 2, !dbg !21
  %.reass = or i64 %95, %invariant.op146
  %.reass148 = or i64 %95, %invariant.op147
  %.reass150 = or i64 %95, %invariant.op149
  %.reass152 = or i64 %95, %invariant.op151
  %.reass154 = or i64 %95, %invariant.op153
  %.reass156 = or i64 %95, %invariant.op155
  %.reass158 = or i64 %95, %invariant.op157
  %.reass160 = or i64 %95, %invariant.op159
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %.reass, !dbg !22
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %.reass148, !dbg !22
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %.reass150, !dbg !22
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %.reass152, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %.reass154, !dbg !22
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %.reass156, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %.reass158, !dbg !22
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %.reass160, !dbg !22
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %112 = trunc i64 %95 to i32, !dbg !24
  %.reass219 = or i32 %112, %invariant.op218
  %113 = or disjoint i32 %.reass219, 1, !dbg !24
  %114 = trunc i64 %95 to i32, !dbg !24
  %.reass221 = or i32 %114, %invariant.op220
  %115 = or disjoint i32 %.reass221, 1, !dbg !24
  %116 = trunc i64 %95 to i32, !dbg !24
  %.reass223 = or i32 %116, %invariant.op222
  %117 = or disjoint i32 %.reass223, 1, !dbg !24
  %118 = trunc i64 %95 to i32, !dbg !24
  %.reass225 = or i32 %118, %invariant.op224
  %119 = or disjoint i32 %.reass225, 1, !dbg !24
  %120 = trunc i64 %95 to i32, !dbg !24
  %.reass227 = or i32 %120, %invariant.op226
  %121 = or disjoint i32 %.reass227, 1, !dbg !24
  %122 = trunc i64 %95 to i32, !dbg !24
  %.reass229 = or i32 %122, %invariant.op228
  %123 = or disjoint i32 %.reass229, 1, !dbg !24
  %124 = trunc i64 %95 to i32, !dbg !24
  %.reass231 = or i32 %124, %invariant.op230
  %125 = or disjoint i32 %.reass231, 1, !dbg !24
  %126 = trunc i64 %95 to i32, !dbg !24
  %.reass233 = or i32 %126, %invariant.op232
  %127 = or disjoint i32 %.reass233, 1, !dbg !24
  %128 = sext i32 %113 to i64, !dbg !25
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !25
  %130 = sext i32 %115 to i64, !dbg !25
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !25
  %132 = sext i32 %117 to i64, !dbg !25
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !25
  %134 = sext i32 %119 to i64, !dbg !25
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !25
  %136 = sext i32 %121 to i64, !dbg !25
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !25
  %138 = sext i32 %123 to i64, !dbg !25
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !25
  %140 = sext i32 %125 to i64, !dbg !25
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !25
  %142 = sext i32 %127 to i64, !dbg !25
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !25
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %152 = or disjoint i32 %.reass219, 16, !dbg !27
  %153 = or disjoint i32 %.reass221, 16, !dbg !27
  %154 = or disjoint i32 %.reass223, 16, !dbg !27
  %155 = or disjoint i32 %.reass225, 16, !dbg !27
  %156 = or disjoint i32 %.reass227, 16, !dbg !27
  %157 = or disjoint i32 %.reass229, 16, !dbg !27
  %158 = or disjoint i32 %.reass231, 16, !dbg !27
  %159 = or disjoint i32 %.reass233, 16, !dbg !27
  %160 = sext i32 %152 to i64, !dbg !28
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !28
  %162 = sext i32 %153 to i64, !dbg !28
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !28
  %164 = sext i32 %154 to i64, !dbg !28
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !28
  %166 = sext i32 %155 to i64, !dbg !28
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !28
  %168 = sext i32 %156 to i64, !dbg !28
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !28
  %170 = sext i32 %157 to i64, !dbg !28
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !28
  %172 = sext i32 %158 to i64, !dbg !28
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !28
  %174 = sext i32 %159 to i64, !dbg !28
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !28
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %184 = or disjoint i32 %.reass219, 17, !dbg !30
  %185 = or disjoint i32 %.reass221, 17, !dbg !30
  %186 = or disjoint i32 %.reass223, 17, !dbg !30
  %187 = or disjoint i32 %.reass225, 17, !dbg !30
  %188 = or disjoint i32 %.reass227, 17, !dbg !30
  %189 = or disjoint i32 %.reass229, 17, !dbg !30
  %190 = or disjoint i32 %.reass231, 17, !dbg !30
  %191 = or disjoint i32 %.reass233, 17, !dbg !30
  %192 = sext i32 %184 to i64, !dbg !31
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !31
  %194 = sext i32 %185 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !31
  %196 = sext i32 %186 to i64, !dbg !31
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !31
  %198 = sext i32 %187 to i64, !dbg !31
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !31
  %200 = sext i32 %188 to i64, !dbg !31
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !31
  %202 = sext i32 %189 to i64, !dbg !31
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !31
  %204 = sext i32 %190 to i64, !dbg !31
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !31
  %206 = sext i32 %191 to i64, !dbg !31
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !31
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %216 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !23
  %217 = insertelement <8 x i32> %216, i32 %105, i64 1, !dbg !23
  %218 = insertelement <8 x i32> %217, i32 %106, i64 2, !dbg !23
  %219 = insertelement <8 x i32> %218, i32 %107, i64 3, !dbg !23
  %220 = insertelement <8 x i32> %219, i32 %108, i64 4, !dbg !23
  %221 = insertelement <8 x i32> %220, i32 %109, i64 5, !dbg !23
  %222 = insertelement <8 x i32> %221, i32 %110, i64 6, !dbg !23
  %223 = insertelement <8 x i32> %222, i32 %111, i64 7, !dbg !23
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !23
  %225 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !26
  %226 = insertelement <8 x i32> %225, i32 %145, i64 1, !dbg !26
  %227 = insertelement <8 x i32> %226, i32 %146, i64 2, !dbg !26
  %228 = insertelement <8 x i32> %227, i32 %147, i64 3, !dbg !26
  %229 = insertelement <8 x i32> %228, i32 %148, i64 4, !dbg !26
  %230 = insertelement <8 x i32> %229, i32 %149, i64 5, !dbg !26
  %231 = insertelement <8 x i32> %230, i32 %150, i64 6, !dbg !26
  %232 = insertelement <8 x i32> %231, i32 %151, i64 7, !dbg !26
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !26
  %234 = insertelement <8 x i32> poison, i32 %176, i64 0, !dbg !29
  %235 = insertelement <8 x i32> %234, i32 %177, i64 1, !dbg !29
  %236 = insertelement <8 x i32> %235, i32 %178, i64 2, !dbg !29
  %237 = insertelement <8 x i32> %236, i32 %179, i64 3, !dbg !29
  %238 = insertelement <8 x i32> %237, i32 %180, i64 4, !dbg !29
  %239 = insertelement <8 x i32> %238, i32 %181, i64 5, !dbg !29
  %240 = insertelement <8 x i32> %239, i32 %182, i64 6, !dbg !29
  %241 = insertelement <8 x i32> %240, i32 %183, i64 7, !dbg !29
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !29
  %243 = insertelement <8 x i32> poison, i32 %208, i64 0, !dbg !32
  %244 = insertelement <8 x i32> %243, i32 %209, i64 1, !dbg !32
  %245 = insertelement <8 x i32> %244, i32 %210, i64 2, !dbg !32
  %246 = insertelement <8 x i32> %245, i32 %211, i64 3, !dbg !32
  %247 = insertelement <8 x i32> %246, i32 %212, i64 4, !dbg !32
  %248 = insertelement <8 x i32> %247, i32 %213, i64 5, !dbg !32
  %249 = insertelement <8 x i32> %248, i32 %214, i64 6, !dbg !32
  %250 = insertelement <8 x i32> %249, i32 %215, i64 7, !dbg !32
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !32
  %252 = fadd <8 x float> %224, %233, !dbg !33
  %253 = fadd <8 x float> %252, %242, !dbg !34
  %254 = fadd <8 x float> %253, %251, !dbg !35
  %255 = fmul <8 x float> %254, splat (float 2.500000e-01), !dbg !36
  %256 = icmp eq i64 %indvars.iv, 0, !dbg !37
  br i1 %256, label %._crit_edge, label %257, !dbg !38

257:                                              ; preds = %76
  %258 = fsub <8 x float> %255, %93, !dbg !42
  %259 = extractelement <8 x float> %258, i64 0, !dbg !42
  %260 = fsub <8 x float> %255, %93, !dbg !42
  %261 = extractelement <8 x float> %260, i64 1, !dbg !42
  %262 = fsub <8 x float> %255, %93, !dbg !42
  %263 = extractelement <8 x float> %262, i64 2, !dbg !42
  %264 = fsub <8 x float> %255, %93, !dbg !42
  %265 = extractelement <8 x float> %264, i64 3, !dbg !42
  %266 = fsub <8 x float> %255, %93, !dbg !42
  %267 = extractelement <8 x float> %266, i64 4, !dbg !42
  %268 = fsub <8 x float> %255, %93, !dbg !42
  %269 = extractelement <8 x float> %268, i64 5, !dbg !42
  %270 = fsub <8 x float> %255, %93, !dbg !42
  %271 = extractelement <8 x float> %270, i64 6, !dbg !42
  %272 = fsub <8 x float> %255, %93, !dbg !42
  %273 = extractelement <8 x float> %272, i64 7, !dbg !42
  %274 = fadd float %77, 1.000000e+00, !dbg !43
  %275 = fadd float %78, 1.000000e+00, !dbg !43
  %276 = fadd float %79, 1.000000e+00, !dbg !43
  %277 = fadd float %80, 1.000000e+00, !dbg !43
  %278 = fadd float %81, 1.000000e+00, !dbg !43
  %279 = fadd float %82, 1.000000e+00, !dbg !43
  %280 = fadd float %83, 1.000000e+00, !dbg !43
  %281 = fadd float %84, 1.000000e+00, !dbg !43
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %274) #5, !dbg !44
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %275) #5, !dbg !44
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %276) #5, !dbg !44
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %277) #5, !dbg !44
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %278) #5, !dbg !44
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %279) #5, !dbg !44
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %280) #5, !dbg !44
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %281) #5, !dbg !44
  %290 = insertelement <8 x float> poison, float %282, i64 0, !dbg !45
  %291 = insertelement <8 x float> %290, float %283, i64 1, !dbg !45
  %292 = insertelement <8 x float> %291, float %284, i64 2, !dbg !45
  %293 = insertelement <8 x float> %292, float %285, i64 3, !dbg !45
  %294 = insertelement <8 x float> %293, float %286, i64 4, !dbg !45
  %295 = insertelement <8 x float> %294, float %287, i64 5, !dbg !45
  %296 = insertelement <8 x float> %295, float %288, i64 6, !dbg !45
  %297 = insertelement <8 x float> %296, float %289, i64 7, !dbg !45
  %298 = fadd <8 x float> %93, %297, !dbg !45
  %299 = fsub <8 x float> %255, %298, !dbg !46
  %300 = fsub <8 x float> %255, %298, !dbg !46
  %301 = fsub <8 x float> %255, %298, !dbg !46
  %302 = fsub <8 x float> %255, %298, !dbg !46
  %303 = fsub <8 x float> %255, %298, !dbg !46
  %304 = fsub <8 x float> %255, %298, !dbg !46
  %305 = fsub <8 x float> %255, %298, !dbg !46
  %306 = fsub <8 x float> %255, %298, !dbg !46
  %307 = fmul <8 x float> %258, %299, !dbg !47
  %308 = extractelement <8 x float> %307, i64 0, !dbg !47
  %309 = fmul <8 x float> %260, %300, !dbg !47
  %310 = extractelement <8 x float> %309, i64 1, !dbg !47
  %311 = fmul <8 x float> %262, %301, !dbg !47
  %312 = extractelement <8 x float> %311, i64 2, !dbg !47
  %313 = fmul <8 x float> %264, %302, !dbg !47
  %314 = extractelement <8 x float> %313, i64 3, !dbg !47
  %315 = fmul <8 x float> %266, %303, !dbg !47
  %316 = extractelement <8 x float> %315, i64 4, !dbg !47
  %317 = fmul <8 x float> %268, %304, !dbg !47
  %318 = extractelement <8 x float> %317, i64 5, !dbg !47
  %319 = fmul <8 x float> %270, %305, !dbg !47
  %320 = extractelement <8 x float> %319, i64 6, !dbg !47
  %321 = fmul <8 x float> %272, %306, !dbg !47
  %322 = extractelement <8 x float> %321, i64 7, !dbg !47
  %323 = fadd float %85, %308, !dbg !48
  %324 = fadd float %86, %310, !dbg !48
  %325 = fadd float %87, %312, !dbg !48
  %326 = fadd float %88, %314, !dbg !48
  %327 = fadd float %89, %316, !dbg !48
  %328 = fadd float %90, %318, !dbg !48
  %329 = fadd float %91, %320, !dbg !48
  %330 = fadd float %92, %322, !dbg !48
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %76, %257
  %331 = phi float [ %323, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %332 = phi float [ %324, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %333 = phi float [ %325, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %334 = phi float [ %326, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %335 = phi float [ %327, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %336 = phi float [ %328, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %337 = phi float [ %329, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %338 = phi float [ %330, %257 ], [ 0.000000e+00, %76 ], !dbg !41
  %339 = phi float [ %274, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %340 = phi float [ %275, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %341 = phi float [ %276, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %342 = phi float [ %277, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %343 = phi float [ %278, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %344 = phi float [ %279, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %345 = phi float [ %280, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %346 = phi float [ %281, %257 ], [ 1.000000e+00, %76 ], !dbg !41
  %347 = phi <8 x float> [ %298, %257 ], [ %255, %76 ]
  %348 = select <8 x i1> %75, <8 x float> %347, <8 x float> %93, !dbg !19
  %349 = select i1 %17, float %331, float %85, !dbg !49
  %350 = select i1 %17, float %332, float %86, !dbg !49
  %351 = select i1 %17, float %333, float %87, !dbg !49
  %352 = select i1 %17, float %334, float %88, !dbg !49
  %353 = select i1 %17, float %335, float %89, !dbg !49
  %354 = select i1 %17, float %336, float %90, !dbg !49
  %355 = select i1 %17, float %337, float %91, !dbg !49
  %356 = select i1 %17, float %338, float %92, !dbg !49
  %357 = select i1 %17, float %339, float %77, !dbg !50
  %358 = select i1 %17, float %340, float %78, !dbg !50
  %359 = select i1 %17, float %341, float %79, !dbg !50
  %360 = select i1 %17, float %342, float %80, !dbg !50
  %361 = select i1 %17, float %343, float %81, !dbg !50
  %362 = select i1 %17, float %344, float %82, !dbg !50
  %363 = select i1 %17, float %345, float %83, !dbg !50
  %364 = select i1 %17, float %346, float %84, !dbg !50
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %94, !dbg !51
  %gep162 = getelementptr float, ptr addrspace(1) %invariant.gep161, i64 %94, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %365 = extractelement <8 x float> %255, i64 0, !dbg !52
  %366 = bitcast float %365 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %366, i1 true) #5, !dbg !52
  %367 = extractelement <8 x float> %255, i64 1, !dbg !52
  %368 = bitcast float %367 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %368, i1 true) #5, !dbg !52
  %369 = extractelement <8 x float> %255, i64 2, !dbg !52
  %370 = bitcast float %369 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %370, i1 true) #5, !dbg !52
  %371 = extractelement <8 x float> %255, i64 3, !dbg !52
  %372 = bitcast float %371 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %372, i1 true) #5, !dbg !52
  %373 = extractelement <8 x float> %255, i64 4, !dbg !52
  %374 = bitcast float %373 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %374, i1 true) #5, !dbg !52
  %375 = extractelement <8 x float> %255, i64 5, !dbg !52
  %376 = bitcast float %375 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %376, i1 true) #5, !dbg !52
  %377 = extractelement <8 x float> %255, i64 6, !dbg !52
  %378 = bitcast float %377 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %378, i1 true) #5, !dbg !52
  %379 = extractelement <8 x float> %255, i64 7, !dbg !52
  %380 = bitcast float %379 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %380, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %381 = load <4 x i32>, ptr addrspace(3) %58, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !52
  %.extract26 = load i32, ptr addrspace(3) %71, align 4, !dbg !52
  %.extract27 = load i32, ptr addrspace(3) %72, align 8, !dbg !52
  %.extract28 = load i32, ptr addrspace(3) %73, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %gep, i1 %18) #5, !dbg !52
  %.extract29 = extractelement <4 x i32> %381, i64 0, !dbg !52
  %.extract30 = extractelement <4 x i32> %381, i64 1, !dbg !52
  %.extract31 = extractelement <4 x i32> %381, i64 2, !dbg !52
  %.extract32 = extractelement <4 x i32> %381, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %gep162, i1 %19) #5, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !18
  %382 = icmp samesign ult i64 %indvars.iv, 448, !dbg !18
  br i1 %382, label %76, label %383, !dbg !18

383:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %384 = extractelement <8 x float> %348, i64 0, !dbg !55
  %385 = extractelement <8 x float> %348, i64 1, !dbg !55
  %386 = fsub float %385, %384, !dbg !55
  %387 = fadd float %357, %358, !dbg !57
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !58
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float %387) #5, !dbg !59
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !60
  %391 = fmul float %386, %390, !dbg !61
  %392 = fadd float %384, %391, !dbg !62
  %393 = fadd float %349, %350, !dbg !63
  %394 = fmul float %386, %386, !dbg !64
  %395 = fmul float %394, %357, !dbg !65
  %396 = fmul float %395, %390, !dbg !66
  %397 = fadd float %393, %396, !dbg !67
  %398 = extractelement <8 x float> %348, i64 2, !dbg !55
  %399 = fsub float %398, %392, !dbg !55
  %400 = fadd float %359, %387, !dbg !57
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !58
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %400) #5, !dbg !59
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !60
  %404 = fmul float %403, %399, !dbg !61
  %405 = fadd float %392, %404, !dbg !62
  %406 = fadd float %351, %397, !dbg !63
  %407 = fmul float %399, %399, !dbg !64
  %408 = fmul float %387, %407, !dbg !65
  %409 = fmul float %403, %408, !dbg !66
  %410 = fadd float %406, %409, !dbg !67
  %411 = extractelement <8 x float> %348, i64 3, !dbg !55
  %412 = fsub float %411, %405, !dbg !55
  %413 = fadd float %360, %400, !dbg !57
  %414 = fcmp oeq float %413, 0.000000e+00, !dbg !58
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %413) #5, !dbg !59
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !60
  %417 = fmul float %416, %412, !dbg !61
  %418 = fadd float %405, %417, !dbg !62
  %419 = fadd float %352, %410, !dbg !63
  %420 = fmul float %412, %412, !dbg !64
  %421 = fmul float %400, %420, !dbg !65
  %422 = fmul float %416, %421, !dbg !66
  %423 = fadd float %419, %422, !dbg !67
  %424 = extractelement <8 x float> %348, i64 4, !dbg !55
  %425 = fsub float %424, %418, !dbg !55
  %426 = fadd float %361, %413, !dbg !57
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !58
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %426) #5, !dbg !59
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !60
  %430 = fmul float %429, %425, !dbg !61
  %431 = fadd float %418, %430, !dbg !62
  %432 = fadd float %353, %423, !dbg !63
  %433 = fmul float %425, %425, !dbg !64
  %434 = fmul float %413, %433, !dbg !65
  %435 = fmul float %429, %434, !dbg !66
  %436 = fadd float %432, %435, !dbg !67
  %437 = extractelement <8 x float> %348, i64 5, !dbg !55
  %438 = fsub float %437, %431, !dbg !55
  %439 = fadd float %362, %426, !dbg !57
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !58
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %439) #5, !dbg !59
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !60
  %443 = fmul float %442, %438, !dbg !61
  %444 = fadd float %431, %443, !dbg !62
  %445 = fadd float %354, %436, !dbg !63
  %446 = fmul float %438, %438, !dbg !64
  %447 = fmul float %426, %446, !dbg !65
  %448 = fmul float %442, %447, !dbg !66
  %449 = fadd float %445, %448, !dbg !67
  %450 = extractelement <8 x float> %348, i64 6, !dbg !55
  %451 = fsub float %450, %444, !dbg !55
  %452 = fadd float %363, %439, !dbg !57
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !58
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float %452) #5, !dbg !59
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !60
  %456 = fmul float %455, %451, !dbg !61
  %457 = fadd float %444, %456, !dbg !62
  %458 = fadd float %355, %449, !dbg !63
  %459 = fmul float %451, %451, !dbg !64
  %460 = fmul float %439, %459, !dbg !65
  %461 = fmul float %455, %460, !dbg !66
  %462 = fadd float %458, %461, !dbg !67
  %463 = extractelement <8 x float> %348, i64 7, !dbg !55
  %464 = fsub float %463, %457, !dbg !55
  %465 = fadd float %364, %452, !dbg !57
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !58
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %465) #5, !dbg !59
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !60
  %469 = fmul float %468, %464, !dbg !61
  %470 = fadd float %457, %469, !dbg !62
  %471 = fadd float %356, %462, !dbg !63
  %472 = fmul float %464, %464, !dbg !64
  %473 = fmul float %452, %472, !dbg !65
  %474 = fmul float %468, %473, !dbg !66
  %475 = fadd float %471, %474, !dbg !67
  %476 = shl nuw nsw i32 %11, 3, !dbg !53
  %477 = or disjoint i32 %476, %30, !dbg !53
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !53
  %479 = bitcast float %470 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #5, !dbg !53
  %480 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %477, !dbg !53
  %481 = bitcast float %475 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %481, i1 true) #5, !dbg !53
  %482 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %477, !dbg !53
  %483 = bitcast float %465 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %484 = icmp slt i32 %10, 512, !dbg !53
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !53
  %486 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %485, i1 %484) #5, !dbg !53
  %487 = bitcast i32 %486 to float, !dbg !53
  %488 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %10, !dbg !53
  %489 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %488, i1 %484) #5, !dbg !53
  %490 = bitcast i32 %489 to float, !dbg !53
  %491 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %10, !dbg !53
  %492 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %491, i1 %484) #5, !dbg !53
  %493 = bitcast i32 %492 to float, !dbg !53
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 4, i32 31), !dbg !53
  %495 = bitcast i32 %494 to float, !dbg !53
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 4, i32 31), !dbg !53
  %497 = bitcast i32 %496 to float, !dbg !53
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 4, i32 31), !dbg !53
  %499 = bitcast i32 %498 to float, !dbg !53
  %500 = fsub float %495, %487, !dbg !55
  %501 = fadd float %493, %499, !dbg !57
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !58
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float %501) #5, !dbg !59
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !60
  %505 = fmul float %500, %504, !dbg !61
  %506 = fadd float %505, %487, !dbg !62
  %507 = fadd float %490, %497, !dbg !63
  %508 = fmul float %500, %500, !dbg !64
  %509 = fmul float %508, %493, !dbg !65
  %510 = fmul float %509, %504, !dbg !66
  %511 = fadd float %507, %510, !dbg !67
  %512 = bitcast float %506 to i32, !dbg !53
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 2, i32 31), !dbg !53
  %514 = bitcast i32 %513 to float, !dbg !53
  %515 = bitcast float %511 to i32, !dbg !53
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 2, i32 31), !dbg !53
  %517 = bitcast i32 %516 to float, !dbg !53
  %518 = bitcast float %501 to i32, !dbg !53
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !53
  %520 = bitcast i32 %519 to float, !dbg !53
  %521 = fsub float %514, %506, !dbg !55
  %522 = fadd float %501, %520, !dbg !57
  %523 = fcmp oeq float %522, 0.000000e+00, !dbg !58
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %520, float %522) #5, !dbg !59
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !60
  %526 = fmul float %521, %525, !dbg !61
  %527 = fadd float %506, %526, !dbg !62
  %528 = fadd float %511, %517, !dbg !63
  %529 = fmul float %521, %521, !dbg !64
  %530 = fmul float %501, %529, !dbg !65
  %531 = fmul float %525, %530, !dbg !66
  %532 = fadd float %528, %531, !dbg !67
  %533 = bitcast float %527 to i32, !dbg !53
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 1, i32 31), !dbg !53
  %535 = bitcast i32 %534 to float, !dbg !53
  %536 = bitcast float %532 to i32, !dbg !53
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 1, i32 31), !dbg !53
  %538 = bitcast i32 %537 to float, !dbg !53
  %539 = bitcast float %522 to i32, !dbg !53
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !53
  %541 = bitcast i32 %540 to float, !dbg !53
  %542 = fsub float %535, %527, !dbg !55
  %543 = fadd float %522, %541, !dbg !57
  %544 = fcmp oeq float %543, 0.000000e+00, !dbg !58
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %541, float %543) #5, !dbg !59
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !60
  %547 = fmul float %542, %546, !dbg !61
  %548 = fadd float %527, %547, !dbg !62
  %549 = fadd float %532, %538, !dbg !63
  %550 = fmul float %542, %542, !dbg !64
  %551 = fmul float %522, %550, !dbg !65
  %552 = fmul float %546, %551, !dbg !66
  %553 = fadd float %549, %552, !dbg !67
  %554 = and i32 %10, 7, !dbg !53
  %555 = icmp eq i32 %554, 0, !dbg !53
  %556 = and i1 %484, %555, !dbg !53
  %557 = bitcast float %548 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %557, i1 %556) #5, !dbg !53
  %558 = bitcast float %553 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %558, i1 %556) #5, !dbg !53
  %559 = bitcast float %543 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %559, i1 %556) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !53
  %561 = load i32, ptr addrspace(3) %560, align 16, !dbg !53
  %562 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %476, !dbg !53
  %563 = load float, ptr addrspace(3) %562, align 16, !dbg !53
  %564 = sext i32 %14 to i64, !dbg !68
  %565 = getelementptr float, ptr addrspace(1) %2, i64 %564, !dbg !68
  %566 = icmp eq i32 %30, 0, !dbg !69
  %567 = and i1 %566, %17, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %561, ptr addrspace(1) %565, i1 %567) #5, !dbg !69
  %568 = getelementptr float, ptr addrspace(1) %3, i64 %564, !dbg !70
  %569 = bitcast float %563 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %569, ptr addrspace(1) %568, i1 %567) #5, !dbg !71
  %570 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %563, float 5.120000e+02) #5, !dbg !72
  %571 = fadd float %570, 0x3EE4F8B580000000, !dbg !73
  %572 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i = icmp eq i32 %572, 0, !dbg !74
  br i1 %.not.i, label %575, label %573, !dbg !74

573:                                              ; preds = %383
  %574 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %571), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

575:                                              ; preds = %383
  %576 = tail call float @llvm.nvvm.rsqrt.approx.f(float %571), !dbg !74
  br label %__nv_rsqrtf.exit, !dbg !74

__nv_rsqrtf.exit:                                 ; preds = %573, %575
  %.0.i = phi float [ %574, %573 ], [ %576, %575 ], !dbg !74
  %577 = getelementptr float, ptr addrspace(1) %4, i64 %564, !dbg !75
  %578 = bitcast float %.0.i to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %578, ptr addrspace(1) %577, i1 %567) #5, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_17", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 38, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 49, column: 62, scope: !7)
!20 = !DILocation(line: 31, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 44, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 53, scope: !7)
!25 = !DILocation(line: 37, column: 34, scope: !7)
!26 = !DILocation(line: 37, column: 63, scope: !7)
!27 = !DILocation(line: 38, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 34, scope: !7)
!29 = !DILocation(line: 38, column: 64, scope: !7)
!30 = !DILocation(line: 39, column: 54, scope: !7)
!31 = !DILocation(line: 39, column: 34, scope: !7)
!32 = !DILocation(line: 39, column: 64, scope: !7)
!33 = !DILocation(line: 40, column: 22, scope: !7)
!34 = !DILocation(line: 41, column: 22, scope: !7)
!35 = !DILocation(line: 42, column: 22, scope: !7)
!36 = !DILocation(line: 44, column: 22, scope: !7)
!37 = !DILocation(line: 47, column: 65, scope: !7)
!38 = !DILocation(line: 178, column: 7, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 54, scope: !7)
!42 = !DILocation(line: 183, column: 24, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 184, column: 30, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 185, column: 34, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 185, column: 26, scope: !39, inlinedAt: !41)
!46 = !DILocation(line: 186, column: 39, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 186, column: 31, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 186, column: 22, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 50, column: 58, scope: !7)
!50 = !DILocation(line: 51, column: 66, scope: !7)
!51 = !DILocation(line: 52, column: 29, scope: !7)
!52 = !DILocation(line: 52, column: 49, scope: !7)
!53 = !DILocation(line: 204, column: 46, scope: !39, inlinedAt: !54)
!54 = !DILocation(line: 54, column: 44, scope: !7)
!55 = !DILocation(line: 192, column: 21, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!57 = !DILocation(line: 193, column: 28, scope: !56, inlinedAt: !54)
!58 = !DILocation(line: 194, column: 39, scope: !56, inlinedAt: !54)
!59 = !DILocation(line: 194, column: 60, scope: !56, inlinedAt: !54)
!60 = !DILocation(line: 194, column: 49, scope: !56, inlinedAt: !54)
!61 = !DILocation(line: 196, column: 25, scope: !56, inlinedAt: !54)
!62 = !DILocation(line: 196, column: 17, scope: !56, inlinedAt: !54)
!63 = !DILocation(line: 197, column: 15, scope: !56, inlinedAt: !54)
!64 = !DILocation(line: 197, column: 30, scope: !56, inlinedAt: !54)
!65 = !DILocation(line: 197, column: 38, scope: !56, inlinedAt: !54)
!66 = !DILocation(line: 197, column: 49, scope: !56, inlinedAt: !54)
!67 = !DILocation(line: 197, column: 22, scope: !56, inlinedAt: !54)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 37, scope: !7)
!70 = !DILocation(line: 60, column: 25, scope: !7)
!71 = !DILocation(line: 60, column: 37, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 28, scope: !7)
!75 = !DILocation(line: 66, column: 25, scope: !7)
!76 = !DILocation(line: 66, column: 37, scope: !7)
!77 = !DILocation(line: 66, column: 4, scope: !7)
