; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_46(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
.peel.next:
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 2048, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = mul i32 %5, 18432, !dbg !13
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %16 = select i1 %6, float 1.000000e+00, float 0.000000e+00, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %21 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !15
  %22 = insertelement <4 x i32> %21, i32 %18, i64 1, !dbg !15
  %23 = insertelement <4 x i32> %22, i32 %19, i64 2, !dbg !15
  %24 = insertelement <4 x i32> %23, i32 %20, i64 3, !dbg !15
  %25 = bitcast <4 x i32> %24 to <4 x float>, !dbg !15
  %26 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !17
  %27 = shufflevector <4 x i1> %26, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  %28 = select <4 x i1> %27, <4 x float> %25, <4 x float> zeroinitializer, !dbg !17
  br label %29, !dbg !18

29:                                               ; preds = %.peel.next, %29
  %indvars.iv = phi i64 [ 2048, %.peel.next ], [ %indvars.iv.next, %29 ]
  %.pn74 = phi float [ %16, %.peel.next ], [ %69, %29 ]
  %.pn72 = phi float [ %16, %.peel.next ], [ %70, %29 ]
  %.pn70 = phi float [ %16, %.peel.next ], [ %71, %29 ]
  %.pn68 = phi float [ %16, %.peel.next ], [ %72, %29 ]
  %30 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %68, %29 ]
  %31 = phi <4 x float> [ %28, %.peel.next ], [ %67, %29 ]
  %32 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %33 = add i32 %12, %32, !dbg !19
  %34 = sext i32 %33 to i64, !dbg !14
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !14
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !15
  %41 = fadd float %.pn74, 1.000000e+00, !dbg !20
  %42 = fadd float %.pn72, 1.000000e+00, !dbg !20
  %43 = fadd float %.pn70, 1.000000e+00, !dbg !20
  %44 = fadd float %.pn68, 1.000000e+00, !dbg !20
  %45 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !15
  %46 = insertelement <4 x i32> %45, i32 %39, i64 1, !dbg !15
  %47 = insertelement <4 x i32> %46, i32 %38, i64 2, !dbg !15
  %48 = insertelement <4 x i32> %47, i32 %37, i64 3, !dbg !15
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !15
  %50 = fsub <4 x float> %49, %31, !dbg !24
  %51 = extractelement <4 x float> %50, i64 0, !dbg !25
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %41) #5, !dbg !25
  %53 = extractelement <4 x float> %50, i64 1, !dbg !25
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %42) #5, !dbg !25
  %55 = extractelement <4 x float> %50, i64 2, !dbg !25
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %43) #5, !dbg !25
  %57 = extractelement <4 x float> %50, i64 3, !dbg !25
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %44) #5, !dbg !25
  %59 = insertelement <4 x float> poison, float %52, i64 0, !dbg !26
  %60 = insertelement <4 x float> %59, float %54, i64 1, !dbg !26
  %61 = insertelement <4 x float> %60, float %56, i64 2, !dbg !26
  %62 = insertelement <4 x float> %61, float %58, i64 3, !dbg !26
  %63 = fadd <4 x float> %31, %62, !dbg !26
  %64 = fsub <4 x float> %49, %63, !dbg !27
  %65 = fmul <4 x float> %50, %64, !dbg !28
  %66 = fadd <4 x float> %30, %65, !dbg !29
  %67 = select <4 x i1> %27, <4 x float> %63, <4 x float> %31, !dbg !17
  %68 = select <4 x i1> %27, <4 x float> %66, <4 x float> %30, !dbg !30
  %69 = select i1 %6, float %41, float %.pn74, !dbg !16
  %70 = select i1 %6, float %42, float %.pn72, !dbg !16
  %71 = select i1 %6, float %43, float %.pn70, !dbg !16
  %72 = select i1 %6, float %44, float %.pn68, !dbg !16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !18
  %73 = icmp samesign ult i64 %indvars.iv, 16384, !dbg !18
  br i1 %73, label %29, label %.loopexit, !dbg !18, !llvm.loop !31

.loopexit:                                        ; preds = %29
  %74 = lshr i32 %7, 5, !dbg !12
  %75 = extractelement <4 x float> %67, i64 0, !dbg !33
  %76 = extractelement <4 x float> %67, i64 1, !dbg !33
  %77 = fsub float %76, %75, !dbg !33
  %78 = fadd float %69, %70, !dbg !36
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !37
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %78) #5, !dbg !38
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !39
  %82 = fmul float %77, %81, !dbg !40
  %83 = fadd float %75, %82, !dbg !41
  %shift = shufflevector <4 x float> %68, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !42
  %84 = fadd <4 x float> %68, %shift, !dbg !42
  %85 = extractelement <4 x float> %84, i64 0, !dbg !42
  %86 = fmul float %77, %77, !dbg !43
  %87 = fmul float %86, %69, !dbg !44
  %88 = fmul float %87, %81, !dbg !45
  %89 = fadd float %85, %88, !dbg !46
  %90 = extractelement <4 x float> %67, i64 2, !dbg !33
  %91 = fsub float %90, %83, !dbg !33
  %92 = fadd float %71, %78, !dbg !36
  %93 = fcmp oeq float %92, 0.000000e+00, !dbg !37
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %92) #5, !dbg !38
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !39
  %96 = fmul float %95, %91, !dbg !40
  %97 = fadd float %83, %96, !dbg !41
  %98 = extractelement <4 x float> %68, i64 2, !dbg !42
  %99 = fadd float %98, %89, !dbg !42
  %100 = fmul float %91, %91, !dbg !43
  %101 = fmul float %78, %100, !dbg !44
  %102 = fmul float %95, %101, !dbg !45
  %103 = fadd float %99, %102, !dbg !46
  %104 = extractelement <4 x float> %67, i64 3, !dbg !33
  %105 = fsub float %104, %97, !dbg !33
  %106 = fadd float %72, %92, !dbg !36
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !37
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %106) #5, !dbg !38
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !39
  %110 = fmul float %109, %105, !dbg !40
  %111 = fadd float %97, %110, !dbg !41
  %112 = extractelement <4 x float> %68, i64 3, !dbg !42
  %113 = fadd float %112, %103, !dbg !42
  %114 = fmul float %105, %105, !dbg !43
  %115 = fmul float %92, %114, !dbg !44
  %116 = fmul float %109, %115, !dbg !45
  %117 = fadd float %113, %116, !dbg !46
  %118 = bitcast float %111 to i32, !dbg !47
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !47
  %120 = bitcast i32 %119 to float, !dbg !47
  %121 = bitcast float %117 to i32, !dbg !47
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 16, i32 31), !dbg !47
  %123 = bitcast i32 %122 to float, !dbg !47
  %124 = bitcast float %106 to i32, !dbg !47
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !47
  %126 = bitcast i32 %125 to float, !dbg !47
  %127 = fsub float %120, %111, !dbg !33
  %128 = fadd float %106, %126, !dbg !36
  %129 = fcmp oeq float %128, 0.000000e+00, !dbg !37
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %128) #5, !dbg !38
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !39
  %132 = fmul float %131, %127, !dbg !40
  %133 = fadd float %111, %132, !dbg !41
  %134 = fadd float %117, %123, !dbg !42
  %135 = fmul float %127, %127, !dbg !43
  %136 = fmul float %106, %135, !dbg !44
  %137 = fmul float %131, %136, !dbg !45
  %138 = fadd float %134, %137, !dbg !46
  %139 = bitcast float %133 to i32, !dbg !47
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !47
  %141 = bitcast i32 %140 to float, !dbg !47
  %142 = bitcast float %138 to i32, !dbg !47
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !47
  %144 = bitcast i32 %143 to float, !dbg !47
  %145 = bitcast float %128 to i32, !dbg !47
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !47
  %147 = bitcast i32 %146 to float, !dbg !47
  %148 = fsub float %141, %133, !dbg !33
  %149 = fadd float %128, %147, !dbg !36
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %149) #5, !dbg !38
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !39
  %153 = fmul float %148, %152, !dbg !40
  %154 = fadd float %133, %153, !dbg !41
  %155 = fadd float %138, %144, !dbg !42
  %156 = fmul float %148, %148, !dbg !43
  %157 = fmul float %128, %156, !dbg !44
  %158 = fmul float %152, %157, !dbg !45
  %159 = fadd float %155, %158, !dbg !46
  %160 = bitcast float %154 to i32, !dbg !47
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !47
  %162 = bitcast i32 %161 to float, !dbg !47
  %163 = bitcast float %159 to i32, !dbg !47
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !47
  %165 = bitcast i32 %164 to float, !dbg !47
  %166 = bitcast float %149 to i32, !dbg !47
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !47
  %168 = bitcast i32 %167 to float, !dbg !47
  %169 = fsub float %162, %154, !dbg !33
  %170 = fadd float %149, %168, !dbg !36
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !37
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %170) #5, !dbg !38
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !39
  %174 = fmul float %169, %173, !dbg !40
  %175 = fadd float %154, %174, !dbg !41
  %176 = fadd float %159, %165, !dbg !42
  %177 = fmul float %169, %169, !dbg !43
  %178 = fmul float %149, %177, !dbg !44
  %179 = fmul float %173, %178, !dbg !45
  %180 = fadd float %176, %179, !dbg !46
  %181 = bitcast float %175 to i32, !dbg !47
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !47
  %183 = bitcast i32 %182 to float, !dbg !47
  %184 = bitcast float %180 to i32, !dbg !47
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !47
  %186 = bitcast i32 %185 to float, !dbg !47
  %187 = bitcast float %170 to i32, !dbg !47
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !47
  %189 = bitcast i32 %188 to float, !dbg !47
  %190 = fsub float %183, %175, !dbg !33
  %191 = fadd float %170, %189, !dbg !36
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !37
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %191) #5, !dbg !38
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !39
  %195 = fmul float %190, %194, !dbg !40
  %196 = fadd float %175, %195, !dbg !41
  %197 = fadd float %180, %186, !dbg !42
  %198 = fmul float %190, %190, !dbg !43
  %199 = fmul float %170, %198, !dbg !44
  %200 = fmul float %194, %199, !dbg !45
  %201 = fadd float %197, %200, !dbg !46
  %202 = bitcast float %196 to i32, !dbg !47
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !47
  %204 = bitcast i32 %203 to float, !dbg !47
  %205 = bitcast float %201 to i32, !dbg !47
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !47
  %207 = bitcast i32 %206 to float, !dbg !47
  %208 = bitcast float %191 to i32, !dbg !47
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !47
  %210 = bitcast i32 %209 to float, !dbg !47
  %211 = fsub float %204, %196, !dbg !33
  %212 = fadd float %191, %210, !dbg !36
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %212) #5, !dbg !38
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !39
  %216 = fmul float %211, %215, !dbg !40
  %217 = fadd float %196, %216, !dbg !41
  %218 = fadd float %201, %207, !dbg !42
  %219 = fmul float %211, %211, !dbg !43
  %220 = fmul float %191, %219, !dbg !44
  %221 = fmul float %215, %220, !dbg !45
  %222 = fadd float %218, %221, !dbg !46
  %223 = icmp eq i32 %8, 0, !dbg !47
  %224 = and i32 %74, 15, !dbg !47
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !47
  %226 = bitcast float %217 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 %223) #5, !dbg !47
  %227 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %224, !dbg !47
  %228 = bitcast float %222 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 %223) #5, !dbg !47
  %229 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %224, !dbg !47
  %230 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 %223) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %231 = icmp slt i32 %7, 16, !dbg !47
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !47
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %232, i1 %231) #5, !dbg !47
  %234 = bitcast i32 %233 to float, !dbg !47
  %235 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %7, !dbg !47
  %236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %235, i1 %231) #5, !dbg !47
  %237 = bitcast i32 %236 to float, !dbg !47
  %238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %7, !dbg !47
  %239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %238, i1 %231) #5, !dbg !47
  %240 = bitcast i32 %239 to float, !dbg !47
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !47
  %244 = bitcast i32 %243 to float, !dbg !47
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !47
  %246 = bitcast i32 %245 to float, !dbg !47
  %247 = fsub float %242, %234, !dbg !33
  %248 = fadd float %240, %246, !dbg !36
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !37
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #5, !dbg !38
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !39
  %252 = fmul float %247, %251, !dbg !40
  %253 = fadd float %252, %234, !dbg !41
  %254 = fadd float %237, %244, !dbg !42
  %255 = fmul float %247, %247, !dbg !43
  %256 = fmul float %255, %240, !dbg !44
  %257 = fmul float %256, %251, !dbg !45
  %258 = fadd float %254, %257, !dbg !46
  %259 = bitcast float %253 to i32, !dbg !47
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !47
  %261 = bitcast i32 %260 to float, !dbg !47
  %262 = bitcast float %258 to i32, !dbg !47
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !47
  %264 = bitcast i32 %263 to float, !dbg !47
  %265 = bitcast float %248 to i32, !dbg !47
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !47
  %267 = bitcast i32 %266 to float, !dbg !47
  %268 = fsub float %261, %253, !dbg !33
  %269 = fadd float %248, %267, !dbg !36
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !37
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #5, !dbg !38
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !39
  %273 = fmul float %268, %272, !dbg !40
  %274 = fadd float %253, %273, !dbg !41
  %275 = fadd float %258, %264, !dbg !42
  %276 = fmul float %268, %268, !dbg !43
  %277 = fmul float %248, %276, !dbg !44
  %278 = fmul float %272, %277, !dbg !45
  %279 = fadd float %275, %278, !dbg !46
  %280 = bitcast float %274 to i32, !dbg !47
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !47
  %282 = bitcast i32 %281 to float, !dbg !47
  %283 = bitcast float %279 to i32, !dbg !47
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !47
  %285 = bitcast i32 %284 to float, !dbg !47
  %286 = bitcast float %269 to i32, !dbg !47
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !47
  %288 = bitcast i32 %287 to float, !dbg !47
  %289 = fsub float %282, %274, !dbg !33
  %290 = fadd float %269, %288, !dbg !36
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !37
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #5, !dbg !38
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !39
  %294 = fmul float %289, %293, !dbg !40
  %295 = fadd float %274, %294, !dbg !41
  %296 = fadd float %279, %285, !dbg !42
  %297 = fmul float %289, %289, !dbg !43
  %298 = fmul float %269, %297, !dbg !44
  %299 = fmul float %293, %298, !dbg !45
  %300 = fadd float %296, %299, !dbg !46
  %301 = bitcast float %295 to i32, !dbg !47
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !47
  %303 = bitcast i32 %302 to float, !dbg !47
  %304 = bitcast float %300 to i32, !dbg !47
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !47
  %306 = bitcast i32 %305 to float, !dbg !47
  %307 = bitcast float %290 to i32, !dbg !47
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !47
  %309 = bitcast i32 %308 to float, !dbg !47
  %310 = fsub float %303, %295, !dbg !33
  %311 = fadd float %290, %309, !dbg !36
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !37
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #5, !dbg !38
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !39
  %315 = fmul float %310, %314, !dbg !40
  %316 = fadd float %295, %315, !dbg !41
  %317 = fadd float %300, %306, !dbg !42
  %318 = fmul float %310, %310, !dbg !43
  %319 = fmul float %290, %318, !dbg !44
  %320 = fmul float %314, %319, !dbg !45
  %321 = fadd float %317, %320, !dbg !46
  %322 = and i32 %7, 15, !dbg !47
  %323 = icmp eq i32 %322, 0, !dbg !47
  %324 = and i1 %231, %323, !dbg !47
  %325 = bitcast float %316 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %325, i1 %324) #5, !dbg !47
  %326 = bitcast float %321 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %326, i1 %324) #5, !dbg !47
  %327 = bitcast float %311 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %327, i1 %324) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %328 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %329 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !47
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float 1.843200e+04) #5, !dbg !48
  %331 = fadd float %330, 0x3DDB7CDFE0000000, !dbg !49
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %332, 0, !dbg !50
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i = icmp eq i32 %333, 0, !dbg !50
  br i1 %.not.i, label %339, label %334, !dbg !50

334:                                              ; preds = %.loopexit
  br i1 %.not1.i, label %337, label %335, !dbg !50

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

339:                                              ; preds = %.loopexit
  br i1 %.not1.i, label %342, label %340, !dbg !50

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %335, %337, %340, %342
  %.0.i = phi float [ %336, %335 ], [ %338, %337 ], [ %341, %340 ], [ %343, %342 ], !dbg !50
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i24 = icmp eq i32 %350, 0, !dbg !50
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i27 = icmp eq i32 %351, 0, !dbg !50
  br i1 %.not.i24, label %357, label %352, !dbg !50

352:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %355, label %353, !dbg !50

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

357:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %360, label %358, !dbg !50

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

__nv_sqrtf.exit28:                                ; preds = %353, %355, %358, %360
  %.0.i26 = phi float [ %354, %353 ], [ %356, %355 ], [ %359, %358 ], [ %361, %360 ], !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %362 = sext i32 %5 to i64, !dbg !52
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !52
  %urem = and i32 %7, 511, !dbg !53
  %364 = icmp eq i32 %urem, 0, !dbg !53
  %365 = bitcast float %.0.i to i32, !dbg !53
  %366 = and i1 %364, %6, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %363, i1 %366) #5, !dbg !53
  br label %367, !dbg !54

367:                                              ; preds = %__nv_sqrtf.exit28, %367
  %indvars.iv43 = phi i64 [ 0, %__nv_sqrtf.exit28 ], [ %indvars.iv.next44, %367 ]
  %368 = trunc nuw nsw i64 %indvars.iv43 to i32, !dbg !55
  %369 = add i32 %12, %368, !dbg !55
  %370 = sext i32 %369 to i64, !dbg !56
  %371 = getelementptr float, ptr addrspace(1) %1, i64 %370, !dbg !56
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !57
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !57
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !57
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !57
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !57
  %377 = bitcast i32 %373 to float, !dbg !57
  %378 = bitcast i32 %374 to float, !dbg !57
  %379 = bitcast i32 %375 to float, !dbg !57
  %380 = bitcast i32 %376 to float, !dbg !57
  %381 = fsub float %377, %328, !dbg !58
  %382 = fsub float %378, %328, !dbg !58
  %383 = fsub float %379, %328, !dbg !58
  %384 = fsub float %380, %328, !dbg !58
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float %.0.i26) #5, !dbg !59
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %.0.i26) #5, !dbg !59
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %.0.i26) #5, !dbg !59
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float %.0.i26) #5, !dbg !59
  %389 = getelementptr float, ptr addrspace(1) %2, i64 %370, !dbg !60
  %390 = bitcast float %385 to i32, !dbg !61
  %391 = bitcast float %386 to i32, !dbg !61
  %392 = bitcast float %387 to i32, !dbg !61
  %393 = bitcast float %388 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %389, i1 %6) #5, !dbg !61
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 2048, !dbg !54
  %394 = icmp samesign ult i64 %indvars.iv43, 16384, !dbg !54
  br i1 %394, label %367, label %395, !dbg !54

395:                                              ; preds = %367
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csgpzk3t3sjgai4rmf73wjrqgzeouzwh5ivfrkri4rckgiefevzy.py", directory: "inductor_cache/sg")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_46, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_46, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_46", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 45, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 50, scope: !7)
!16 = !DILocation(line: 41, column: 64, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 184, column: 30, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 37, column: 51, scope: !7)
!24 = !DILocation(line: 183, column: 24, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 185, column: 34, scope: !21, inlinedAt: !23)
!26 = !DILocation(line: 185, column: 26, scope: !21, inlinedAt: !23)
!27 = !DILocation(line: 186, column: 39, scope: !21, inlinedAt: !23)
!28 = !DILocation(line: 186, column: 31, scope: !21, inlinedAt: !23)
!29 = !DILocation(line: 186, column: 22, scope: !21, inlinedAt: !23)
!30 = !DILocation(line: 40, column: 56, scope: !7)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 192, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!35 = !DILocation(line: 43, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 15, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 30, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 38, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 49, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 197, column: 22, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 204, column: 46, scope: !21, inlinedAt: !35)
!48 = !DILocation(line: 49, column: 18, scope: !7)
!49 = !DILocation(line: 51, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 26, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
!52 = !DILocation(line: 54, column: 28, scope: !7)
!53 = !DILocation(line: 54, column: 39, scope: !7)
!54 = !DILocation(line: 55, column: 36, scope: !7)
!55 = !DILocation(line: 59, column: 40, scope: !7)
!56 = !DILocation(line: 59, column: 35, scope: !7)
!57 = !DILocation(line: 59, column: 51, scope: !7)
!58 = !DILocation(line: 60, column: 24, scope: !7)
!59 = !DILocation(line: 61, column: 24, scope: !7)
!60 = !DILocation(line: 62, column: 29, scope: !7)
!61 = !DILocation(line: 62, column: 52, scope: !7)
!62 = !DILocation(line: 55, column: 4, scope: !7)
