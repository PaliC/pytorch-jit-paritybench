; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 512, !dbg !14
  %13 = mul i32 %12, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = srem i32 %12, 16, !dbg !16
  %15 = sdiv i32 %11, 8192, !dbg !17
  %16 = shl nsw i32 %14, 10, !dbg !18
  %17 = shl i32 %15, 15, !dbg !19
  %18 = add i32 %17, %.decomposed, !dbg !20
  %19 = add i32 %18, %16, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !22
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !23
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !23
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !23
  %25 = bitcast i32 %23 to float, !dbg !23
  %26 = bitcast i32 %24 to float, !dbg !23
  %27 = add i32 %18, 512, !dbg !24
  %28 = add i32 %27, %16, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !27
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = bitcast i32 %33 to float, !dbg !27
  %36 = add i32 %18, 16384, !dbg !28
  %37 = add i32 %36, %16, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !31
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = bitcast i32 %42 to float, !dbg !31
  %45 = add i32 %18, 16896, !dbg !32
  %46 = add i32 %45, %16, !dbg !33
  %47 = sext i32 %46 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !34
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !35
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !35
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !35
  %52 = bitcast i32 %50 to float, !dbg !35
  %53 = bitcast i32 %51 to float, !dbg !35
  %54 = sext i32 %11 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !37
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !37
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !37
  %59 = bitcast i32 %57 to float, !dbg !37
  %60 = bitcast i32 %58 to float, !dbg !37
  %61 = sext i32 %.decomposed to i64, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !38
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !39
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !39
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !39
  %66 = bitcast i32 %64 to float, !dbg !39
  %67 = bitcast i32 %65 to float, !dbg !39
  %68 = fadd float %25, %34, !dbg !40
  %69 = fadd float %26, %35, !dbg !40
  %70 = fadd float %68, %43, !dbg !41
  %71 = fadd float %69, %44, !dbg !41
  %72 = fadd float %70, %52, !dbg !42
  %73 = fadd float %71, %53, !dbg !42
  %74 = fmul float %72, 2.500000e-01, !dbg !43
  %75 = fmul float %73, 2.500000e-01, !dbg !43
  %76 = fadd float %59, %66, !dbg !44
  %77 = fadd float %60, %67, !dbg !44
  %78 = fadd float %74, %76, !dbg !45
  %79 = fadd float %75, %77, !dbg !45
  %80 = fmul float %78, 0x3FE6A09E60000000, !dbg !46
  %81 = fmul float %79, 0x3FE6A09E60000000, !dbg !46
  %82 = fcmp ogt float %80, 0.000000e+00, !dbg !47
  %83 = fcmp ogt float %81, 0.000000e+00, !dbg !47
  %84 = fmul float %80, 0x3FC99999A0000000, !dbg !48
  %85 = fmul float %81, 0x3FC99999A0000000, !dbg !48
  %86 = select i1 %82, float %80, float %84, !dbg !49
  %87 = select i1 %83, float %81, float %85, !dbg !49
  %88 = bitcast float %80 to i32, !dbg !50
  %89 = bitcast float %81 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %55, i1 true) #1, !dbg !50
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !51
  %91 = bitcast float %86 to i32, !dbg !52
  %92 = bitcast float %87 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %91, i32 %92, ptr addrspace(1) %90, i1 true) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmd73jwr7r2ouq2hidy7hubmf7ogbdqvh364yaie6z42pycixp5t.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22", linkageName: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 51, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 56, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 62, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 53, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 64, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 53, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 64, scope: !7)
!36 = !DILocation(line: 32, column: 34, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 35, scope: !7)
!50 = !DILocation(line: 48, column: 40, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
