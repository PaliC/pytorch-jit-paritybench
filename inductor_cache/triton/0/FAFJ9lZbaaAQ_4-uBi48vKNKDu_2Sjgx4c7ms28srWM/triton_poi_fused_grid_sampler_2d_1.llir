; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_7 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp135 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_6 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp130 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_5 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp118 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_4 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp113 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp97 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp91 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp78 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bi/cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp72 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %6 = shl i32 %5, 7, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = and i32 %7, 127, !dbg !14
  %9 = or disjoint i32 %6, %8, !dbg !15
  %10 = icmp slt i32 %9, 256, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %11 = sdiv i32 %.frozen, 16, !dbg !17
  %12 = mul i32 %11, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %12, !dbg !18
  %13 = sdiv i32 %9, 64, !dbg !19
  %14 = mul nsw i32 %.decomposed, 6, !dbg !20
  %15 = mul i32 %13, 96, !dbg !21
  %16 = add i32 %15, %14, !dbg !22
  %17 = add i32 %16, 3, !dbg !23
  %18 = sext i32 %17 to i64, !dbg !24
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !24
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %10) #6, !dbg !25
  %21 = bitcast i32 %20 to float, !dbg !25
  %22 = add i32 %16, 4, !dbg !26
  %23 = sext i32 %22 to i64, !dbg !27
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !27
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #6, !dbg !28
  %26 = bitcast i32 %25 to float, !dbg !28
  %27 = add i32 %16, 5, !dbg !29
  %28 = sext i32 %27 to i64, !dbg !30
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !30
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %10) #6, !dbg !31
  %31 = bitcast i32 %30 to float, !dbg !31
  %32 = sext i32 %16 to i64, !dbg !32
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !32
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %10) #6, !dbg !33
  %35 = bitcast i32 %34 to float, !dbg !33
  %36 = or disjoint i32 %16, 1, !dbg !34
  %37 = sext i32 %36 to i64, !dbg !35
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !35
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #6, !dbg !36
  %40 = bitcast i32 %39 to float, !dbg !36
  %41 = add i32 %16, 2, !dbg !37
  %42 = sext i32 %41 to i64, !dbg !38
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !38
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %10) #6, !dbg !39
  %45 = bitcast i32 %44 to float, !dbg !39
  %46 = fadd float %21, %26, !dbg !40
  %47 = fadd float %46, %31, !dbg !41
  %48 = fmul float %47, 2.000000e+00, !dbg !42
  %49 = fadd float %48, 1.500000e+00, !dbg !43
  %50 = fadd float %49, 5.000000e-01, !dbg !44
  %51 = tail call float @llvm.fabs.f32(float %50), !dbg !45
  %52 = fmul float %51, 2.500000e-01, !dbg !46
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !47
  %.not.i = icmp eq i32 %53, 0, !dbg !47
  %54 = tail call float @llvm.nvvm.floor.ftz.f(float %52), !dbg !47
  %55 = tail call float @llvm.nvvm.floor.f(float %52), !dbg !47
  %.0.i = select i1 %.not.i, float %55, float %54, !dbg !47
  %56 = fptosi float %.0.i to i8, !dbg !48
  %57 = and i8 %56, 1, !dbg !49
  %58 = icmp eq i8 %57, 0, !dbg !50
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i19 = icmp eq i32 %59, 0, !dbg !51
  %60 = tail call float @llvm.nvvm.fabs.ftz.f(float 4.000000e+00) #6, !dbg !51
  %61 = tail call float @llvm.nvvm.fabs.f(float 4.000000e+00) #6, !dbg !51
  %.0.i20 = select i1 %.not.i19, float %61, float %60, !dbg !51
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not16.i = icmp eq i32 %62, 0, !dbg !51
  %63 = tail call float @llvm.nvvm.fabs.ftz.f(float %51) #6, !dbg !51
  %64 = tail call float @llvm.nvvm.fabs.f(float %51) #6, !dbg !51
  %.01.i = select i1 %.not16.i, float %64, float %63, !dbg !51
  %65 = fcmp olt float %.01.i, %.0.i20, !dbg !51
  br i1 %65, label %__internal_fmodf_kernel.exit.i, label %66, !dbg !51

66:                                               ; preds = %4
  %67 = fmul float %.0.i20, 0x4160000000000000, !dbg !51
  %68 = fcmp ugt float %.01.i, %67, !dbg !51
  br i1 %68, label %99, label %69, !dbg !51

69:                                               ; preds = %66
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not23.i = icmp eq i32 %70, 0, !dbg !51
  br i1 %.not23.i, label %73, label %71, !dbg !51

71:                                               ; preds = %69
  %72 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i, float %.0.i20) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i, !dbg !51

73:                                               ; preds = %69
  %74 = tail call float @llvm.nvvm.div.approx.f(float %.01.i, float %.0.i20) #6, !dbg !51
  br label %__nv_fast_fdividef.exit.i.i.i, !dbg !51

__nv_fast_fdividef.exit.i.i.i:                    ; preds = %73, %71
  %.02.i = phi float [ %72, %71 ], [ %74, %73 ], !dbg !51
  %75 = tail call float @llvm.nvvm.trunc.f(float %.02.i) #6, !dbg !51
  %76 = fneg float %.0.i20, !dbg !51
  %77 = tail call float @llvm.nvvm.fma.rn.f(float %76, float %75, float %.01.i) #6, !dbg !51
  %78 = bitcast float %77 to i32, !dbg !51
  %79 = bitcast float %.0.i20 to i32, !dbg !51
  %.not24.i = icmp ult i32 %78, %79, !dbg !51
  br i1 %.not24.i, label %__internal_fmodf_fastpath_quot.exit.i.i, label %80, !dbg !51

80:                                               ; preds = %__nv_fast_fdividef.exit.i.i.i
  %81 = icmp ugt i32 %78, -2147483648, !dbg !51
  br i1 %81, label %82, label %86, !dbg !51

82:                                               ; preds = %80
  %83 = fadd float %75, -1.000000e+00, !dbg !51
  %84 = fcmp olt float %77, %76, !dbg !51
  %85 = fadd float %83, -1.000000e+00, !dbg !51
  %quotient.i.i.0.i = select i1 %84, float %85, float %83, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i, !dbg !51

86:                                               ; preds = %80
  %87 = fadd float %75, 1.000000e+00, !dbg !51
  %88 = fmul float %.0.i20, 2.000000e+00, !dbg !51
  %89 = fcmp ult float %77, %88, !dbg !51
  br i1 %89, label %__internal_fmodf_fastpath_quot.exit.i.i, label %__nv_fmaf_rn.exit.i.i.i, !dbg !51

__nv_fmaf_rn.exit.i.i.i:                          ; preds = %86
  %90 = fadd float %87, 1.000000e+00, !dbg !51
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not25.i = icmp eq i32 %91, 0, !dbg !51
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i20, float %77) #6, !dbg !51
  %93 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i20, float %77) #6, !dbg !51
  %.03.i = select i1 %.not25.i, float %93, float %92, !dbg !51
  %94 = fcmp oge float %.03.i, 0.000000e+00, !dbg !51
  %95 = fadd float %90, 1.000000e+00, !dbg !51
  %quotient.i.i.1.i = select i1 %94, float %95, float %90, !dbg !51
  br label %__internal_fmodf_fastpath_quot.exit.i.i, !dbg !51

__internal_fmodf_fastpath_quot.exit.i.i:          ; preds = %__nv_fmaf_rn.exit.i.i.i, %86, %82, %__nv_fast_fdividef.exit.i.i.i
  %quotient.i.i.4.i = phi float [ %75, %__nv_fast_fdividef.exit.i.i.i ], [ %quotient.i.i.0.i, %82 ], [ %quotient.i.i.1.i, %__nv_fmaf_rn.exit.i.i.i ], [ %87, %86 ], !dbg !51
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not26.i = icmp eq i32 %96, 0, !dbg !51
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %76, float %quotient.i.i.4.i, float %.01.i) #6, !dbg !51
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %76, float %quotient.i.i.4.i, float %.01.i) #6, !dbg !51
  %.04.i = select i1 %.not26.i, float %98, float %97, !dbg !51
  br label %__internal_fmodf_kernel.exit.i, !dbg !51

99:                                               ; preds = %66
  %100 = bitcast float %.01.i to i32, !dbg !51
  %101 = bitcast float %67 to i32, !dbg !51
  %102 = and i32 %101, -8388608, !dbg !51
  %103 = and i32 %100, 8388607, !dbg !51
  %104 = or disjoint i32 %103, 1065353216, !dbg !51
  %105 = and i32 %101, 8388607, !dbg !51
  %106 = or disjoint i32 %105, 1065353216, !dbg !51
  %107 = bitcast i32 %104 to float, !dbg !51
  %108 = bitcast i32 %106 to float, !dbg !51
  %109 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %108) #7, !dbg !51, !srcloc !52
  %.neg64 = add i32 %100, 192937984, !dbg !51
  %110 = sub i32 %.neg64, %102, !dbg !51
  %111 = and i32 %110, -8388608, !dbg !51
  %.not = icmp eq i32 %111, 0, !dbg !51
  br i1 %.not, label %__internal_fmodf_slowpath_mod.exit.i.i, label %__nv_fmaf_rn.exit4.i.i.i.lr.ph, !dbg !51

__nv_fmaf_rn.exit4.i.i.i.lr.ph:                   ; preds = %99
  %112 = fneg float %108
  br label %__nv_fmaf_rn.exit4.i.i.i, !dbg !51

__nv_fmaf_rn.exit4.i.i.i:                         ; preds = %__nv_fmaf_rn.exit4.i.i.i.lr.ph, %__nv_fmaf_rn.exit4.i.i.i
  %ux.i.i.0.i69 = phi i32 [ %104, %__nv_fmaf_rn.exit4.i.i.i.lr.ph ], [ %135, %__nv_fmaf_rn.exit4.i.i.i ]
  %i.i.i.0.i68 = phi i32 [ %111, %__nv_fmaf_rn.exit4.i.i.i.lr.ph ], [ %134, %__nv_fmaf_rn.exit4.i.i.i ]
  %min2.i = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i68, i32 192937984), !dbg !51
  %113 = add i32 %ux.i.i.0.i69, %min2.i, !dbg !51
  %114 = bitcast i32 %113 to float, !dbg !51
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not17.i = icmp eq i32 %115, 0, !dbg !51
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %114, float %109, float -0.000000e+00) #6, !dbg !51
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %114, float %109, float -0.000000e+00) #6, !dbg !51
  %.010.i = select i1 %.not17.i, float %117, float %116, !dbg !51
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not18.i = icmp eq i32 %118, 0, !dbg !51
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float %.010.i, float %114) #6, !dbg !51
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %112, float %.010.i, float %114) #6, !dbg !51
  %.011.i = select i1 %.not18.i, float %120, float %119, !dbg !51
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not19.i = icmp eq i32 %121, 0, !dbg !51
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %109, float %.010.i) #6, !dbg !51
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %109, float %.010.i) #6, !dbg !51
  %.012.i = select i1 %.not19.i, float %123, float %122, !dbg !51
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not20.i = icmp eq i32 %124, 0, !dbg !51
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float %.012.i, float %114) #6, !dbg !51
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %112, float %.012.i, float %114) #6, !dbg !51
  %.09.i = select i1 %.not20.i, float %126, float %125, !dbg !51
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not21.i = icmp eq i32 %127, 0, !dbg !51
  %128 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i, float %109, float %.012.i) #6, !dbg !51
  %129 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i, float %109, float %.012.i) #6, !dbg !51
  %.08.i = select i1 %.not21.i, float %129, float %128, !dbg !51
  %130 = tail call float @llvm.nvvm.trunc.f(float %.08.i) #6, !dbg !51
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not22.i = icmp eq i32 %131, 0, !dbg !51
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %112, float %130, float %114) #6, !dbg !51
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %112, float %130, float %114) #6, !dbg !51
  %.07.i = select i1 %.not22.i, float %133, float %132, !dbg !51
  %134 = sub i32 %i.i.i.0.i68, %min2.i, !dbg !51
  %135 = bitcast float %.07.i to i32, !dbg !51
  %136 = icmp ne i32 %134, 0, !dbg !51
  %137 = icmp ne i32 %135, 0, !dbg !51
  %spec.select.i = select i1 %136, i1 %137, i1 false, !dbg !51
  br i1 %spec.select.i, label %__nv_fmaf_rn.exit4.i.i.i, label %__internal_fmodf_slowpath_mod.exit.i.i, !dbg !51

__internal_fmodf_slowpath_mod.exit.i.i:           ; preds = %__nv_fmaf_rn.exit4.i.i.i, %99
  %.06.i.lcssa = phi float [ %107, %99 ], [ %.07.i, %__nv_fmaf_rn.exit4.i.i.i ], !dbg !51
  %138 = bitcast i32 %102 to float, !dbg !51
  %139 = fcmp ule float %.0.i20, 0.000000e+00, !dbg !51
  %140 = icmp ugt i32 %100, 2139095039, !dbg !51
  %or.cond.i = or i1 %139, %140, !dbg !51
  %141 = select i1 %or.cond.i, float 0x7FFFFFFFE0000000, float %138, !dbg !51
  %142 = fmul float %.06.i.lcssa, 0x3E80000000000000, !dbg !51
  %143 = fmul float %141, %142, !dbg !51
  br label %__internal_fmodf_kernel.exit.i, !dbg !51

__internal_fmodf_kernel.exit.i:                   ; preds = %__internal_fmodf_slowpath_mod.exit.i.i, %__internal_fmodf_fastpath_quot.exit.i.i, %4
  %ans.i.1.i = phi float [ %.01.i, %4 ], [ %.04.i, %__internal_fmodf_fastpath_quot.exit.i.i ], [ %143, %__internal_fmodf_slowpath_mod.exit.i.i ], !dbg !51
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %145 = fadd float %ans.i.1.i, -5.000000e-01, !dbg !53
  %146 = fsub float 3.500000e+00, %ans.i.1.i, !dbg !54
  %147 = select i1 %58, float %145, float %146, !dbg !55
  %.inv = fcmp ole float %147, 0.000000e+00, !dbg !56
  %148 = select i1 %.inv, float 0.000000e+00, float %147, !dbg !56
  %149 = fcmp olt float %148, 3.000000e+00, !dbg !60
  %150 = fcmp uno float %148, 0.000000e+00, !dbg !62
  %151 = or i1 %149, %150, !dbg !63
  %152 = select i1 %151, float %148, float 3.000000e+00, !dbg !64
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !65
  %.not.i13 = icmp eq i32 %153, 0, !dbg !65
  %154 = tail call float @llvm.nvvm.floor.ftz.f(float %152), !dbg !65
  %155 = tail call float @llvm.nvvm.floor.f(float %152), !dbg !65
  %.0.i14 = select i1 %.not.i13, float %155, float %154, !dbg !65
  %156 = fadd float %35, %40, !dbg !66
  %157 = fadd float %156, %45, !dbg !67
  %158 = fmul float %157, 2.000000e+00, !dbg !68
  %159 = fadd float %158, 1.500000e+00, !dbg !69
  %160 = fadd float %159, 5.000000e-01, !dbg !70
  %161 = tail call float @llvm.fabs.f32(float %160), !dbg !71
  %162 = fmul float %161, 2.500000e-01, !dbg !72
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !73
  %.not.i15 = icmp eq i32 %163, 0, !dbg !73
  %164 = tail call float @llvm.nvvm.floor.ftz.f(float %162), !dbg !73
  %165 = tail call float @llvm.nvvm.floor.f(float %162), !dbg !73
  %.0.i16 = select i1 %.not.i15, float %165, float %164, !dbg !73
  %166 = fptosi float %.0.i16 to i8, !dbg !74
  %167 = and i8 %166, 1, !dbg !75
  %168 = icmp eq i8 %167, 0, !dbg !76
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not.i21 = icmp eq i32 %169, 0, !dbg !77
  %.0.i22 = select i1 %.not.i21, float %61, float %60, !dbg !77
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not16.i23 = icmp eq i32 %170, 0, !dbg !77
  %171 = tail call float @llvm.nvvm.fabs.ftz.f(float %161) #6, !dbg !77
  %172 = tail call float @llvm.nvvm.fabs.f(float %161) #6, !dbg !77
  %.01.i24 = select i1 %.not16.i23, float %172, float %171, !dbg !77
  %173 = fcmp olt float %.01.i24, %.0.i22, !dbg !77
  br i1 %173, label %__internal_fmodf_kernel.exit.i37, label %174, !dbg !77

174:                                              ; preds = %__internal_fmodf_kernel.exit.i
  %175 = fmul float %.0.i22, 0x4160000000000000, !dbg !77
  %176 = fcmp ugt float %.01.i24, %175, !dbg !77
  br i1 %176, label %207, label %177, !dbg !77

177:                                              ; preds = %174
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not23.i25 = icmp eq i32 %178, 0, !dbg !77
  br i1 %.not23.i25, label %181, label %179, !dbg !77

179:                                              ; preds = %177
  %180 = tail call float @llvm.nvvm.div.approx.ftz.f(float %.01.i24, float %.0.i22) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i26, !dbg !77

181:                                              ; preds = %177
  %182 = tail call float @llvm.nvvm.div.approx.f(float %.01.i24, float %.0.i22) #6, !dbg !77
  br label %__nv_fast_fdividef.exit.i.i.i26, !dbg !77

__nv_fast_fdividef.exit.i.i.i26:                  ; preds = %181, %179
  %.02.i27 = phi float [ %180, %179 ], [ %182, %181 ], !dbg !77
  %183 = tail call float @llvm.nvvm.trunc.f(float %.02.i27) #6, !dbg !77
  %184 = fneg float %.0.i22, !dbg !77
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %184, float %183, float %.01.i24) #6, !dbg !77
  %186 = bitcast float %185 to i32, !dbg !77
  %187 = bitcast float %.0.i22 to i32, !dbg !77
  %.not24.i28 = icmp ult i32 %186, %187, !dbg !77
  br i1 %.not24.i28, label %__internal_fmodf_fastpath_quot.exit.i.i33, label %188, !dbg !77

188:                                              ; preds = %__nv_fast_fdividef.exit.i.i.i26
  %189 = icmp ugt i32 %186, -2147483648, !dbg !77
  br i1 %189, label %190, label %194, !dbg !77

190:                                              ; preds = %188
  %191 = fadd float %183, -1.000000e+00, !dbg !77
  %192 = fcmp olt float %185, %184, !dbg !77
  %193 = fadd float %191, -1.000000e+00, !dbg !77
  %quotient.i.i.0.i41 = select i1 %192, float %193, float %191, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i33, !dbg !77

194:                                              ; preds = %188
  %195 = fadd float %183, 1.000000e+00, !dbg !77
  %196 = fmul float %.0.i22, 2.000000e+00, !dbg !77
  %197 = fcmp ult float %185, %196, !dbg !77
  br i1 %197, label %__internal_fmodf_fastpath_quot.exit.i.i33, label %__nv_fmaf_rn.exit.i.i.i29, !dbg !77

__nv_fmaf_rn.exit.i.i.i29:                        ; preds = %194
  %198 = fadd float %195, 1.000000e+00, !dbg !77
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not25.i30 = icmp eq i32 %199, 0, !dbg !77
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float -3.000000e+00, float %.0.i22, float %185) #6, !dbg !77
  %201 = tail call float @llvm.nvvm.fma.rn.f(float -3.000000e+00, float %.0.i22, float %185) #6, !dbg !77
  %.03.i31 = select i1 %.not25.i30, float %201, float %200, !dbg !77
  %202 = fcmp oge float %.03.i31, 0.000000e+00, !dbg !77
  %203 = fadd float %198, 1.000000e+00, !dbg !77
  %quotient.i.i.1.i32 = select i1 %202, float %203, float %198, !dbg !77
  br label %__internal_fmodf_fastpath_quot.exit.i.i33, !dbg !77

__internal_fmodf_fastpath_quot.exit.i.i33:        ; preds = %__nv_fmaf_rn.exit.i.i.i29, %194, %190, %__nv_fast_fdividef.exit.i.i.i26
  %quotient.i.i.4.i34 = phi float [ %183, %__nv_fast_fdividef.exit.i.i.i26 ], [ %quotient.i.i.0.i41, %190 ], [ %quotient.i.i.1.i32, %__nv_fmaf_rn.exit.i.i.i29 ], [ %195, %194 ], !dbg !77
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not26.i35 = icmp eq i32 %204, 0, !dbg !77
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %184, float %quotient.i.i.4.i34, float %.01.i24) #6, !dbg !77
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %184, float %quotient.i.i.4.i34, float %.01.i24) #6, !dbg !77
  %.04.i36 = select i1 %.not26.i35, float %206, float %205, !dbg !77
  br label %__internal_fmodf_kernel.exit.i37, !dbg !77

207:                                              ; preds = %174
  %208 = bitcast float %.01.i24 to i32, !dbg !77
  %209 = bitcast float %175 to i32, !dbg !77
  %210 = and i32 %209, -8388608, !dbg !77
  %211 = and i32 %208, 8388607, !dbg !77
  %212 = or disjoint i32 %211, 1065353216, !dbg !77
  %213 = and i32 %209, 8388607, !dbg !77
  %214 = or disjoint i32 %213, 1065353216, !dbg !77
  %215 = bitcast i32 %212 to float, !dbg !77
  %216 = bitcast i32 %214 to float, !dbg !77
  %217 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %216) #7, !dbg !77, !srcloc !52
  %.neg66 = add i32 %208, 192937984, !dbg !77
  %218 = sub i32 %.neg66, %210, !dbg !77
  %219 = and i32 %218, -8388608, !dbg !77
  %.not74 = icmp eq i32 %219, 0, !dbg !77
  br i1 %.not74, label %__internal_fmodf_slowpath_mod.exit.i.i47, label %__nv_fmaf_rn.exit4.i.i.i49.lr.ph, !dbg !77

__nv_fmaf_rn.exit4.i.i.i49.lr.ph:                 ; preds = %207
  %220 = fneg float %216
  br label %__nv_fmaf_rn.exit4.i.i.i49, !dbg !77

__nv_fmaf_rn.exit4.i.i.i49:                       ; preds = %__nv_fmaf_rn.exit4.i.i.i49.lr.ph, %__nv_fmaf_rn.exit4.i.i.i49
  %ux.i.i.0.i4572 = phi i32 [ %212, %__nv_fmaf_rn.exit4.i.i.i49.lr.ph ], [ %243, %__nv_fmaf_rn.exit4.i.i.i49 ]
  %i.i.i.0.i4471 = phi i32 [ %219, %__nv_fmaf_rn.exit4.i.i.i49.lr.ph ], [ %242, %__nv_fmaf_rn.exit4.i.i.i49 ]
  %min2.i50 = tail call i32 @llvm.umin.i32(i32 %i.i.i.0.i4471, i32 192937984), !dbg !77
  %221 = add i32 %ux.i.i.0.i4572, %min2.i50, !dbg !77
  %222 = bitcast i32 %221 to float, !dbg !77
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not17.i51 = icmp eq i32 %223, 0, !dbg !77
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %222, float %217, float -0.000000e+00) #6, !dbg !77
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %222, float %217, float -0.000000e+00) #6, !dbg !77
  %.010.i52 = select i1 %.not17.i51, float %225, float %224, !dbg !77
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not18.i53 = icmp eq i32 %226, 0, !dbg !77
  %227 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %220, float %.010.i52, float %222) #6, !dbg !77
  %228 = tail call float @llvm.nvvm.fma.rn.f(float %220, float %.010.i52, float %222) #6, !dbg !77
  %.011.i54 = select i1 %.not18.i53, float %228, float %227, !dbg !77
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not19.i55 = icmp eq i32 %229, 0, !dbg !77
  %230 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i54, float %217, float %.010.i52) #6, !dbg !77
  %231 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i54, float %217, float %.010.i52) #6, !dbg !77
  %.012.i56 = select i1 %.not19.i55, float %231, float %230, !dbg !77
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not20.i57 = icmp eq i32 %232, 0, !dbg !77
  %233 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %220, float %.012.i56, float %222) #6, !dbg !77
  %234 = tail call float @llvm.nvvm.fma.rn.f(float %220, float %.012.i56, float %222) #6, !dbg !77
  %.09.i58 = select i1 %.not20.i57, float %234, float %233, !dbg !77
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not21.i59 = icmp eq i32 %235, 0, !dbg !77
  %236 = tail call float @llvm.nvvm.fma.rz.ftz.f(float %.09.i58, float %217, float %.012.i56) #6, !dbg !77
  %237 = tail call float @llvm.nvvm.fma.rz.f(float %.09.i58, float %217, float %.012.i56) #6, !dbg !77
  %.08.i60 = select i1 %.not21.i59, float %237, float %236, !dbg !77
  %238 = tail call float @llvm.nvvm.trunc.f(float %.08.i60) #6, !dbg !77
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %.not22.i61 = icmp eq i32 %239, 0, !dbg !77
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %220, float %238, float %222) #6, !dbg !77
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %220, float %238, float %222) #6, !dbg !77
  %.07.i62 = select i1 %.not22.i61, float %241, float %240, !dbg !77
  %242 = sub i32 %i.i.i.0.i4471, %min2.i50, !dbg !77
  %243 = bitcast float %.07.i62 to i32, !dbg !77
  %244 = icmp ne i32 %242, 0, !dbg !77
  %245 = icmp ne i32 %243, 0, !dbg !77
  %spec.select.i46 = select i1 %244, i1 %245, i1 false, !dbg !77
  br i1 %spec.select.i46, label %__nv_fmaf_rn.exit4.i.i.i49, label %__internal_fmodf_slowpath_mod.exit.i.i47, !dbg !77

__internal_fmodf_slowpath_mod.exit.i.i47:         ; preds = %__nv_fmaf_rn.exit4.i.i.i49, %207
  %.06.i42.lcssa = phi float [ %215, %207 ], [ %.07.i62, %__nv_fmaf_rn.exit4.i.i.i49 ], !dbg !77
  %246 = bitcast i32 %210 to float, !dbg !77
  %247 = fcmp ule float %.0.i22, 0.000000e+00, !dbg !77
  %248 = icmp ugt i32 %208, 2139095039, !dbg !77
  %or.cond.i48 = or i1 %247, %248, !dbg !77
  %249 = select i1 %or.cond.i48, float 0x7FFFFFFFE0000000, float %246, !dbg !77
  %250 = fmul float %.06.i42.lcssa, 0x3E80000000000000, !dbg !77
  %251 = fmul float %249, %250, !dbg !77
  br label %__internal_fmodf_kernel.exit.i37, !dbg !77

__internal_fmodf_kernel.exit.i37:                 ; preds = %__internal_fmodf_slowpath_mod.exit.i.i47, %__internal_fmodf_fastpath_quot.exit.i.i33, %__internal_fmodf_kernel.exit.i
  %ans.i.1.i38 = phi float [ %.01.i24, %__internal_fmodf_kernel.exit.i ], [ %.04.i36, %__internal_fmodf_fastpath_quot.exit.i.i33 ], [ %251, %__internal_fmodf_slowpath_mod.exit.i.i47 ], !dbg !77
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !77
  %253 = fadd float %ans.i.1.i38, -5.000000e-01, !dbg !78
  %254 = fsub float 3.500000e+00, %ans.i.1.i38, !dbg !79
  %255 = select i1 %168, float %253, float %254, !dbg !80
  %.inv1 = fcmp ole float %255, 0.000000e+00, !dbg !81
  %256 = select i1 %.inv1, float 0.000000e+00, float %255, !dbg !81
  %257 = fcmp olt float %256, 3.000000e+00, !dbg !83
  %258 = fcmp uno float %256, 0.000000e+00, !dbg !85
  %259 = or i1 %257, %258, !dbg !86
  %260 = select i1 %259, float %256, float 3.000000e+00, !dbg !87
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !88
  %.not.i17 = icmp eq i32 %261, 0, !dbg !88
  %262 = tail call float @llvm.nvvm.floor.ftz.f(float %260), !dbg !88
  %263 = tail call float @llvm.nvvm.floor.f(float %260), !dbg !88
  %.0.i18 = select i1 %.not.i17, float %263, float %262, !dbg !88
  %264 = fadd float %.0.i18, 1.000000e+00, !dbg !89
  %265 = fadd float %.0.i14, 1.000000e+00, !dbg !90
  %266 = fcmp oge float %.0.i18, 0.000000e+00, !dbg !91
  %267 = fcmp olt float %.0.i18, 4.000000e+00, !dbg !92
  %268 = fcmp oge float %.0.i14, 0.000000e+00, !dbg !93
  %269 = fcmp olt float %.0.i14, 4.000000e+00, !dbg !94
  %270 = and i1 %268, %269, !dbg !95
  %271 = and i1 %270, %267, !dbg !96
  %272 = and i1 %266, %271, !dbg !97
  %273 = fptosi float %.0.i14 to i64, !dbg !98
  %274 = select i1 %272, i64 %273, i64 0, !dbg !99
  %275 = lshr i64 %274, 61, !dbg !100
  %276 = and i64 %275, 4, !dbg !100
  %277 = add i64 %276, %274, !dbg !100
  %278 = icmp ugt i64 %277, 3, !dbg !101
  %.not2 = and i1 %10, %278, !dbg !102
  br i1 %.not2, label %279, label %280, !dbg !102

279:                                              ; preds = %__internal_fmodf_kernel.exit.i37
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 101, ptr nonnull @assertFunc_0, i64 1), !dbg !102
  unreachable, !dbg !102

280:                                              ; preds = %__internal_fmodf_kernel.exit.i37
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %281 = fptosi float %.0.i18 to i64, !dbg !103
  %282 = select i1 %272, i64 %281, i64 0, !dbg !104
  %283 = lshr i64 %282, 61, !dbg !105
  %284 = and i64 %283, 4, !dbg !105
  %285 = add i64 %284, %282, !dbg !105
  %286 = icmp ugt i64 %285, 3, !dbg !106
  %.not3 = and i1 %10, %286, !dbg !107
  br i1 %.not3, label %287, label %288, !dbg !107

287:                                              ; preds = %280
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 107, ptr nonnull @assertFunc_1, i64 1), !dbg !107
  unreachable, !dbg !107

288:                                              ; preds = %280
  tail call void @llvm.nvvm.barrier0(), !dbg !107
  %289 = shl nsw i32 %11, 4, !dbg !108
  %290 = sext i32 %289 to i64, !dbg !109
  %291 = getelementptr float, ptr addrspace(1) %2, i64 %285, !dbg !110
  %.idx = shl i64 %277, 4, !dbg !110
  %292 = getelementptr i8, ptr addrspace(1) %291, i64 %.idx, !dbg !110
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %290, !dbg !110
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %10) #6, !dbg !111
  %295 = fcmp oge float %264, 0.000000e+00, !dbg !112
  %296 = fcmp olt float %264, 4.000000e+00, !dbg !113
  %297 = and i1 %270, %296, !dbg !114
  %298 = and i1 %295, %297, !dbg !115
  %299 = select i1 %298, i64 %273, i64 0, !dbg !116
  %300 = lshr i64 %299, 61, !dbg !117
  %301 = and i64 %300, 4, !dbg !117
  %302 = add i64 %301, %299, !dbg !117
  %303 = icmp ugt i64 %302, 3, !dbg !118
  %.not4 = and i1 %10, %303, !dbg !119
  br i1 %.not4, label %304, label %305, !dbg !119

304:                                              ; preds = %288
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 120, ptr nonnull @assertFunc_2, i64 1), !dbg !119
  unreachable, !dbg !119

305:                                              ; preds = %288
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %306 = fptosi float %264 to i64, !dbg !120
  %307 = select i1 %298, i64 %306, i64 0, !dbg !121
  %308 = lshr i64 %307, 61, !dbg !122
  %309 = and i64 %308, 4, !dbg !122
  %310 = add i64 %309, %307, !dbg !122
  %311 = icmp ugt i64 %310, 3, !dbg !123
  %.not5 = and i1 %10, %311, !dbg !124
  br i1 %.not5, label %312, label %313, !dbg !124

312:                                              ; preds = %305
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 126, ptr nonnull @assertFunc_3, i64 1), !dbg !124
  unreachable, !dbg !124

313:                                              ; preds = %305
  tail call void @llvm.nvvm.barrier0(), !dbg !124
  %314 = getelementptr float, ptr addrspace(1) %2, i64 %310, !dbg !125
  %.idx6 = shl i64 %302, 4, !dbg !125
  %315 = getelementptr i8, ptr addrspace(1) %314, i64 %.idx6, !dbg !125
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %290, !dbg !125
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 %10) #6, !dbg !126
  %318 = fcmp oge float %265, 0.000000e+00, !dbg !127
  %319 = fcmp olt float %265, 4.000000e+00, !dbg !128
  %320 = and i1 %318, %319, !dbg !129
  %321 = and i1 %320, %267, !dbg !130
  %322 = and i1 %266, %321, !dbg !131
  %323 = fptosi float %265 to i64, !dbg !132
  %324 = select i1 %322, i64 %323, i64 0, !dbg !133
  %325 = lshr i64 %324, 61, !dbg !134
  %326 = and i64 %325, 4, !dbg !134
  %327 = add i64 %326, %324, !dbg !134
  %328 = icmp ugt i64 %327, 3, !dbg !135
  %.not7 = and i1 %10, %328, !dbg !136
  br i1 %.not7, label %329, label %330, !dbg !136

329:                                              ; preds = %313
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 142, ptr nonnull @assertFunc_4, i64 1), !dbg !136
  unreachable, !dbg !136

330:                                              ; preds = %313
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %331 = select i1 %322, i64 %281, i64 0, !dbg !137
  %332 = lshr i64 %331, 61, !dbg !138
  %333 = and i64 %332, 4, !dbg !138
  %334 = add i64 %333, %331, !dbg !138
  %335 = icmp ugt i64 %334, 3, !dbg !139
  %.not8 = and i1 %10, %335, !dbg !140
  br i1 %.not8, label %336, label %337, !dbg !140

336:                                              ; preds = %330
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 147, ptr nonnull @assertFunc_5, i64 1), !dbg !140
  unreachable, !dbg !140

337:                                              ; preds = %330
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %338 = getelementptr float, ptr addrspace(1) %2, i64 %334, !dbg !141
  %.idx9 = shl i64 %327, 4, !dbg !141
  %339 = getelementptr i8, ptr addrspace(1) %338, i64 %.idx9, !dbg !141
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %290, !dbg !141
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %10) #6, !dbg !142
  %342 = and i1 %320, %296, !dbg !143
  %343 = and i1 %295, %342, !dbg !144
  %344 = select i1 %343, i64 %323, i64 0, !dbg !145
  %345 = lshr i64 %344, 61, !dbg !146
  %346 = and i64 %345, 4, !dbg !146
  %347 = add i64 %346, %344, !dbg !146
  %348 = icmp ugt i64 %347, 3, !dbg !147
  %.not10 = and i1 %10, %348, !dbg !148
  br i1 %.not10, label %349, label %350, !dbg !148

349:                                              ; preds = %337
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 159, ptr nonnull @assertFunc_6, i64 1), !dbg !148
  unreachable, !dbg !148

350:                                              ; preds = %337
  tail call void @llvm.nvvm.barrier0(), !dbg !148
  %351 = select i1 %343, i64 %306, i64 0, !dbg !149
  %352 = lshr i64 %351, 61, !dbg !150
  %353 = and i64 %352, 4, !dbg !150
  %354 = add i64 %353, %351, !dbg !150
  %355 = icmp ugt i64 %354, 3, !dbg !151
  %.not11 = and i1 %10, %355, !dbg !152
  br i1 %.not11, label %356, label %357, !dbg !152

356:                                              ; preds = %350
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 164, ptr nonnull @assertFunc_7, i64 1), !dbg !152
  unreachable, !dbg !152

357:                                              ; preds = %350
  %358 = fsub float %264, %260, !dbg !153
  %359 = fsub float %265, %152, !dbg !154
  %360 = fmul float %359, %358, !dbg !155
  %361 = select i1 %272, float %360, float 0.000000e+00, !dbg !156
  %362 = bitcast i32 %294 to float, !dbg !111
  %363 = fmul float %361, %362, !dbg !157
  %364 = fsub float %260, %.0.i18, !dbg !158
  %365 = fmul float %359, %364, !dbg !159
  %366 = select i1 %298, float %365, float 0.000000e+00, !dbg !160
  %367 = bitcast i32 %317 to float, !dbg !126
  %368 = fmul float %366, %367, !dbg !161
  %369 = fadd float %363, %368, !dbg !162
  %370 = fsub float %152, %.0.i14, !dbg !163
  %371 = fmul float %370, %358, !dbg !164
  %372 = select i1 %322, float %371, float 0.000000e+00, !dbg !165
  %373 = bitcast i32 %341 to float, !dbg !142
  %374 = fmul float %372, %373, !dbg !166
  %375 = fadd float %369, %374, !dbg !167
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %376 = getelementptr float, ptr addrspace(1) %2, i64 %354, !dbg !168
  %.idx12 = shl i64 %347, 4, !dbg !168
  %377 = getelementptr i8, ptr addrspace(1) %376, i64 %.idx12, !dbg !168
  %378 = getelementptr float, ptr addrspace(1) %377, i64 %290, !dbg !168
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 %10) #6, !dbg !169
  %380 = bitcast i32 %379 to float, !dbg !169
  %381 = fmul float %370, %364, !dbg !170
  %382 = select i1 %343, float %381, float 0.000000e+00, !dbg !171
  %383 = fmul float %382, %380, !dbg !172
  %384 = fadd float %375, %383, !dbg !173
  %385 = sext i32 %9 to i64, !dbg !174
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !174
  %387 = bitcast float %384 to i32, !dbg !175
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %386, i1 %10) #6, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.approx.ftz.f(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.approx.f(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.trunc.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rz.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rz.f(float, float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #5

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }
attributes #7 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbie7qjhsj6wzyfcje2ow2pljti7bbprrjbooyogrzldjgoyx3ft.py", directory: "inductor_cache/bi")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 27, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 36, scope: !11)
!21 = !DILocation(line: 28, column: 44, scope: !11)
!22 = !DILocation(line: 28, column: 34, scope: !11)
!23 = !DILocation(line: 28, column: 41, scope: !11)
!24 = !DILocation(line: 28, column: 30, scope: !11)
!25 = !DILocation(line: 28, column: 49, scope: !11)
!26 = !DILocation(line: 29, column: 41, scope: !11)
!27 = !DILocation(line: 29, column: 30, scope: !11)
!28 = !DILocation(line: 29, column: 49, scope: !11)
!29 = !DILocation(line: 30, column: 41, scope: !11)
!30 = !DILocation(line: 30, column: 30, scope: !11)
!31 = !DILocation(line: 30, column: 49, scope: !11)
!32 = !DILocation(line: 31, column: 31, scope: !11)
!33 = !DILocation(line: 31, column: 46, scope: !11)
!34 = !DILocation(line: 32, column: 42, scope: !11)
!35 = !DILocation(line: 32, column: 31, scope: !11)
!36 = !DILocation(line: 32, column: 50, scope: !11)
!37 = !DILocation(line: 33, column: 42, scope: !11)
!38 = !DILocation(line: 33, column: 31, scope: !11)
!39 = !DILocation(line: 33, column: 50, scope: !11)
!40 = !DILocation(line: 34, column: 18, scope: !11)
!41 = !DILocation(line: 35, column: 18, scope: !11)
!42 = !DILocation(line: 37, column: 18, scope: !11)
!43 = !DILocation(line: 39, column: 18, scope: !11)
!44 = !DILocation(line: 41, column: 19, scope: !11)
!45 = !DILocation(line: 42, column: 24, scope: !11)
!46 = !DILocation(line: 44, column: 20, scope: !11)
!47 = !DILocation(line: 45, column: 28, scope: !11)
!48 = !DILocation(line: 46, column: 21, scope: !11)
!49 = !DILocation(line: 48, column: 20, scope: !11)
!50 = !DILocation(line: 50, column: 21, scope: !11)
!51 = !DILocation(line: 52, column: 34, scope: !11)
!52 = !{i32 21046}
!53 = !DILocation(line: 53, column: 20, scope: !11)
!54 = !DILocation(line: 55, column: 20, scope: !11)
!55 = !DILocation(line: 56, column: 35, scope: !11)
!56 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !11, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 58, column: 42, scope: !11)
!60 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !61)
!61 = !DILocation(line: 60, column: 42, scope: !11)
!62 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !61)
!63 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !61)
!64 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !61)
!65 = !DILocation(line: 61, column: 28, scope: !11)
!66 = !DILocation(line: 62, column: 20, scope: !11)
!67 = !DILocation(line: 63, column: 20, scope: !11)
!68 = !DILocation(line: 64, column: 20, scope: !11)
!69 = !DILocation(line: 65, column: 20, scope: !11)
!70 = !DILocation(line: 66, column: 20, scope: !11)
!71 = !DILocation(line: 67, column: 24, scope: !11)
!72 = !DILocation(line: 68, column: 20, scope: !11)
!73 = !DILocation(line: 69, column: 28, scope: !11)
!74 = !DILocation(line: 70, column: 21, scope: !11)
!75 = !DILocation(line: 71, column: 20, scope: !11)
!76 = !DILocation(line: 72, column: 21, scope: !11)
!77 = !DILocation(line: 73, column: 34, scope: !11)
!78 = !DILocation(line: 74, column: 20, scope: !11)
!79 = !DILocation(line: 75, column: 20, scope: !11)
!80 = !DILocation(line: 76, column: 35, scope: !11)
!81 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !82)
!82 = !DILocation(line: 77, column: 42, scope: !11)
!83 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !84)
!84 = !DILocation(line: 78, column: 42, scope: !11)
!85 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !84)
!86 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !84)
!87 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !84)
!88 = !DILocation(line: 79, column: 28, scope: !11)
!89 = !DILocation(line: 81, column: 20, scope: !11)
!90 = !DILocation(line: 84, column: 20, scope: !11)
!91 = !DILocation(line: 87, column: 21, scope: !11)
!92 = !DILocation(line: 88, column: 20, scope: !11)
!93 = !DILocation(line: 89, column: 21, scope: !11)
!94 = !DILocation(line: 90, column: 20, scope: !11)
!95 = !DILocation(line: 91, column: 20, scope: !11)
!96 = !DILocation(line: 92, column: 20, scope: !11)
!97 = !DILocation(line: 93, column: 20, scope: !11)
!98 = !DILocation(line: 94, column: 21, scope: !11)
!99 = !DILocation(line: 96, column: 35, scope: !11)
!100 = !DILocation(line: 100, column: 35, scope: !11)
!101 = !DILocation(line: 101, column: 38, scope: !11)
!102 = !DILocation(line: 101, column: 62, scope: !11)
!103 = !DILocation(line: 102, column: 21, scope: !11)
!104 = !DILocation(line: 103, column: 35, scope: !11)
!105 = !DILocation(line: 106, column: 35, scope: !11)
!106 = !DILocation(line: 107, column: 38, scope: !11)
!107 = !DILocation(line: 107, column: 62, scope: !11)
!108 = !DILocation(line: 108, column: 52, scope: !11)
!109 = !DILocation(line: 108, column: 49, scope: !11)
!110 = !DILocation(line: 108, column: 31, scope: !11)
!111 = !DILocation(line: 108, column: 57, scope: !11)
!112 = !DILocation(line: 112, column: 21, scope: !11)
!113 = !DILocation(line: 113, column: 20, scope: !11)
!114 = !DILocation(line: 114, column: 20, scope: !11)
!115 = !DILocation(line: 115, column: 20, scope: !11)
!116 = !DILocation(line: 116, column: 35, scope: !11)
!117 = !DILocation(line: 119, column: 35, scope: !11)
!118 = !DILocation(line: 120, column: 38, scope: !11)
!119 = !DILocation(line: 120, column: 62, scope: !11)
!120 = !DILocation(line: 121, column: 21, scope: !11)
!121 = !DILocation(line: 122, column: 35, scope: !11)
!122 = !DILocation(line: 125, column: 35, scope: !11)
!123 = !DILocation(line: 126, column: 38, scope: !11)
!124 = !DILocation(line: 126, column: 62, scope: !11)
!125 = !DILocation(line: 127, column: 31, scope: !11)
!126 = !DILocation(line: 127, column: 57, scope: !11)
!127 = !DILocation(line: 132, column: 22, scope: !11)
!128 = !DILocation(line: 133, column: 21, scope: !11)
!129 = !DILocation(line: 134, column: 22, scope: !11)
!130 = !DILocation(line: 135, column: 21, scope: !11)
!131 = !DILocation(line: 136, column: 21, scope: !11)
!132 = !DILocation(line: 137, column: 22, scope: !11)
!133 = !DILocation(line: 138, column: 38, scope: !11)
!134 = !DILocation(line: 141, column: 38, scope: !11)
!135 = !DILocation(line: 142, column: 39, scope: !11)
!136 = !DILocation(line: 142, column: 64, scope: !11)
!137 = !DILocation(line: 143, column: 37, scope: !11)
!138 = !DILocation(line: 146, column: 38, scope: !11)
!139 = !DILocation(line: 147, column: 39, scope: !11)
!140 = !DILocation(line: 147, column: 64, scope: !11)
!141 = !DILocation(line: 148, column: 32, scope: !11)
!142 = !DILocation(line: 148, column: 60, scope: !11)
!143 = !DILocation(line: 153, column: 21, scope: !11)
!144 = !DILocation(line: 154, column: 21, scope: !11)
!145 = !DILocation(line: 155, column: 38, scope: !11)
!146 = !DILocation(line: 158, column: 38, scope: !11)
!147 = !DILocation(line: 159, column: 39, scope: !11)
!148 = !DILocation(line: 159, column: 64, scope: !11)
!149 = !DILocation(line: 160, column: 37, scope: !11)
!150 = !DILocation(line: 163, column: 38, scope: !11)
!151 = !DILocation(line: 164, column: 39, scope: !11)
!152 = !DILocation(line: 164, column: 64, scope: !11)
!153 = !DILocation(line: 82, column: 20, scope: !11)
!154 = !DILocation(line: 85, column: 20, scope: !11)
!155 = !DILocation(line: 109, column: 20, scope: !11)
!156 = !DILocation(line: 110, column: 35, scope: !11)
!157 = !DILocation(line: 111, column: 20, scope: !11)
!158 = !DILocation(line: 86, column: 20, scope: !11)
!159 = !DILocation(line: 128, column: 21, scope: !11)
!160 = !DILocation(line: 129, column: 37, scope: !11)
!161 = !DILocation(line: 130, column: 21, scope: !11)
!162 = !DILocation(line: 131, column: 21, scope: !11)
!163 = !DILocation(line: 83, column: 20, scope: !11)
!164 = !DILocation(line: 149, column: 21, scope: !11)
!165 = !DILocation(line: 150, column: 38, scope: !11)
!166 = !DILocation(line: 151, column: 22, scope: !11)
!167 = !DILocation(line: 152, column: 22, scope: !11)
!168 = !DILocation(line: 165, column: 32, scope: !11)
!169 = !DILocation(line: 165, column: 60, scope: !11)
!170 = !DILocation(line: 166, column: 21, scope: !11)
!171 = !DILocation(line: 167, column: 38, scope: !11)
!172 = !DILocation(line: 168, column: 22, scope: !11)
!173 = !DILocation(line: 169, column: 22, scope: !11)
!174 = !DILocation(line: 170, column: 28, scope: !11)
!175 = !DILocation(line: 170, column: 41, scope: !11)
!176 = !DILocation(line: 170, column: 4, scope: !11)
