; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = srem i32 %12, 4, !dbg !16
  %14 = mul i32 %12, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = srem i32 %10, 4, !dbg !17
  %16 = sdiv i32 %9, 16, !dbg !18
  %17 = tail call i32 @llvm.smax.i32(i32 %13, i32 0), !dbg !19
  %18 = uitofp nneg i32 %17 to float, !dbg !19
  %19 = fptosi float %18 to i32, !dbg !23
  %20 = tail call i32 @llvm.smin.i32(i32 %19, i32 2), !dbg !24
  %narrow = add nsw i32 %20, 1, !dbg !24
  %21 = sext i32 %narrow to i64, !dbg !24
  %22 = tail call i32 @llvm.smax.i32(i32 %.decomposed, i32 0), !dbg !26
  %23 = uitofp nneg i32 %22 to float, !dbg !26
  %24 = tail call i32 @llvm.smax.i32(i32 %15, i32 0), !dbg !26
  %25 = uitofp nneg i32 %24 to float, !dbg !26
  %26 = fptosi float %23 to i32, !dbg !28
  %27 = fptosi float %25 to i32, !dbg !28
  %28 = shl nsw i64 %21, 2, !dbg !29
  %29 = sext i32 %26 to i64, !dbg !30
  %30 = sext i32 %27 to i64, !dbg !30
  %31 = shl nsw i32 %16, 4, !dbg !31
  %32 = sext i32 %31 to i64, !dbg !32
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !33
  %34 = getelementptr float, ptr addrspace(1) %33, i64 %29, !dbg !33
  %35 = getelementptr float, ptr addrspace(1) %34, i64 %32, !dbg !33
  %36 = getelementptr float, ptr addrspace(1) %33, i64 %30, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %36, i64 %32, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #2, !dbg !34
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #2, !dbg !34
  %40 = tail call i64 @llvm.smin.i64(i64 %29, i64 2), !dbg !35
  %41 = tail call i64 @llvm.smin.i64(i64 %30, i64 2), !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !37
  %43 = getelementptr i8, ptr addrspace(1) %42, i64 4, !dbg !37
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %28, !dbg !37
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %32, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !37
  %47 = getelementptr i8, ptr addrspace(1) %46, i64 4, !dbg !37
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %28, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %32, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #2, !dbg !38
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #2, !dbg !38
  %52 = sitofp i32 %26 to float, !dbg !39
  %53 = sitofp i32 %27 to float, !dbg !39
  %54 = fsub float %23, %52, !dbg !40
  %55 = fsub float %25, %53, !dbg !40
  %56 = fcmp ogt float %54, 0.000000e+00, !dbg !41
  %57 = fcmp ogt float %55, 0.000000e+00, !dbg !41
  %58 = select i1 %56, float %54, float 0.000000e+00, !dbg !43
  %59 = select i1 %57, float %55, float 0.000000e+00, !dbg !43
  %60 = fcmp olt float %58, 1.000000e+00, !dbg !44
  %61 = fcmp olt float %59, 1.000000e+00, !dbg !44
  %62 = select i1 %60, float %58, float 1.000000e+00, !dbg !46
  %63 = select i1 %61, float %59, float 1.000000e+00, !dbg !46
  %64 = shl i32 %19, 2, !dbg !47
  %65 = add i32 %64, %31, !dbg !48
  %66 = add i32 %65, %26, !dbg !49
  %67 = add i32 %65, %27, !dbg !49
  %68 = sext i32 %66 to i64, !dbg !50
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !50
  %70 = sext i32 %67 to i64, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !50
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %11) #2, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %11) #2, !dbg !51
  %74 = sext i32 %64 to i64, !dbg !52
  %75 = getelementptr float, ptr addrspace(1) %43, i64 %74, !dbg !53
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %32, !dbg !53
  %77 = getelementptr float, ptr addrspace(1) %47, i64 %74, !dbg !53
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %32, !dbg !53
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %11) #2, !dbg !54
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %11) #2, !dbg !54
  %81 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !34
  %82 = insertelement <2 x i32> %81, i32 %72, i64 1, !dbg !34
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !34
  %84 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !38
  %85 = insertelement <2 x i32> %84, i32 %79, i64 1, !dbg !38
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !38
  %87 = fsub <2 x float> %86, %83, !dbg !55
  %88 = insertelement <2 x float> poison, float %62, i64 0, !dbg !56
  %89 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %90 = fmul <2 x float> %87, %89, !dbg !56
  %91 = fadd <2 x float> %90, %83, !dbg !57
  %92 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !34
  %93 = insertelement <2 x i32> %92, i32 %73, i64 1, !dbg !34
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !34
  %95 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !38
  %96 = insertelement <2 x i32> %95, i32 %80, i64 1, !dbg !38
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !38
  %98 = fsub <2 x float> %97, %94, !dbg !55
  %99 = insertelement <2 x float> poison, float %63, i64 0, !dbg !56
  %100 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %101 = fmul <2 x float> %100, %98, !dbg !56
  %102 = fadd <2 x float> %101, %94, !dbg !57
  %103 = extractelement <2 x float> %91, i64 0, !dbg !58
  %104 = extractelement <2 x float> %91, i64 1, !dbg !59
  %105 = fsub float %103, %104, !dbg !58
  %106 = extractelement <2 x float> %102, i64 0, !dbg !58
  %107 = extractelement <2 x float> %102, i64 1, !dbg !59
  %108 = fsub float %106, %107, !dbg !58
  %109 = sitofp i32 %19 to float, !dbg !60
  %110 = fsub float %18, %109, !dbg !61
  %111 = fcmp ogt float %110, 0.000000e+00, !dbg !62
  %112 = select i1 %111, float %110, float 0.000000e+00, !dbg !64
  %113 = fcmp olt float %112, 1.000000e+00, !dbg !65
  %114 = select i1 %113, float %112, float 1.000000e+00, !dbg !67
  %115 = fmul float %114, %105, !dbg !68
  %116 = fmul float %108, %114, !dbg !68
  %117 = fadd float %104, %115, !dbg !59
  %118 = fadd float %107, %116, !dbg !59
  %119 = sext i32 %9 to i64, !dbg !69
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !69
  %121 = bitcast float %117 to i32, !dbg !70
  %122 = bitcast float %118 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %11) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cce6rihnbvtla7ebewxj7iobd3agkzfjufuitzyfdburfg4d3vm5.py", directory: "inductor_cache/ce")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 33, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 19, scope: !7)
!24 = !DILocation(line: 113, column: 29, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 38, column: 41, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !27)
!27 = !DILocation(line: 42, column: 42, scope: !7)
!28 = !DILocation(line: 43, column: 21, scope: !7)
!29 = !DILocation(line: 44, column: 41, scope: !7)
!30 = !DILocation(line: 44, column: 39, scope: !7)
!31 = !DILocation(line: 44, column: 52, scope: !7)
!32 = !DILocation(line: 44, column: 49, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 57, scope: !7)
!35 = !DILocation(line: 113, column: 29, scope: !20, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 42, scope: !7)
!37 = !DILocation(line: 47, column: 31, scope: !7)
!38 = !DILocation(line: 47, column: 57, scope: !7)
!39 = !DILocation(line: 49, column: 21, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !42)
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !42)
!44 = !DILocation(line: 110, column: 15, scope: !20, inlinedAt: !45)
!45 = !DILocation(line: 52, column: 42, scope: !7)
!46 = !DILocation(line: 113, column: 29, scope: !20, inlinedAt: !45)
!47 = !DILocation(line: 55, column: 41, scope: !7)
!48 = !DILocation(line: 55, column: 39, scope: !7)
!49 = !DILocation(line: 55, column: 48, scope: !7)
!50 = !DILocation(line: 55, column: 31, scope: !7)
!51 = !DILocation(line: 55, column: 56, scope: !7)
!52 = !DILocation(line: 56, column: 39, scope: !7)
!53 = !DILocation(line: 56, column: 31, scope: !7)
!54 = !DILocation(line: 56, column: 56, scope: !7)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 19, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 110, column: 15, scope: !20, inlinedAt: !66)
!66 = !DILocation(line: 64, column: 42, scope: !7)
!67 = !DILocation(line: 113, column: 29, scope: !20, inlinedAt: !66)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 28, scope: !7)
!70 = !DILocation(line: 67, column: 40, scope: !7)
!71 = !DILocation(line: 67, column: 4, scope: !7)
