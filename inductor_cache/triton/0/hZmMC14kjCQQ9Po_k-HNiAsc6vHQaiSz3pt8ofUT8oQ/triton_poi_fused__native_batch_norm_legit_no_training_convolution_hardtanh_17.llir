; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 1704, !dbg !14
  %19 = icmp slt i32 %17, 1704, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = lshr i32 %12, 7, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = or disjoint i32 %23, 4, !dbg !18
  %26 = or disjoint i32 %23, 6, !dbg !18
  %27 = or disjoint i32 %23, 8, !dbg !18
  %28 = or disjoint i32 %23, 10, !dbg !18
  %29 = or disjoint i32 %23, 12, !dbg !18
  %30 = or disjoint i32 %23, 14, !dbg !18
  %31 = icmp slt i32 %23, 16, !dbg !19
  %32 = icmp slt i32 %24, 16, !dbg !19
  %33 = icmp slt i32 %25, 16, !dbg !19
  %34 = icmp slt i32 %26, 16, !dbg !19
  %35 = icmp slt i32 %27, 16, !dbg !19
  %36 = icmp slt i32 %28, 16, !dbg !19
  %37 = icmp slt i32 %29, 16, !dbg !19
  %38 = icmp slt i32 %30, 16, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %39 = sdiv i32 %.frozen, 426, !dbg !20
  %40 = mul i32 %39, 426, !dbg !21
  %.decomposed = sub i32 %.frozen, %40, !dbg !21
  %41 = srem i32 %17, 426, !dbg !21
  %42 = mul i32 %23, 426, !dbg !22
  %43 = mul i32 %24, 426, !dbg !22
  %44 = mul i32 %25, 426, !dbg !22
  %45 = mul i32 %26, 426, !dbg !22
  %46 = mul i32 %27, 426, !dbg !22
  %47 = mul i32 %28, 426, !dbg !22
  %48 = mul i32 %29, 426, !dbg !22
  %49 = mul i32 %30, 426, !dbg !22
  %50 = mul i32 %39, 6816, !dbg !23
  %51 = add i32 %50, %.decomposed, !dbg !24
  %52 = add i32 %51, %42, !dbg !25
  %53 = add i32 %51, %43, !dbg !25
  %54 = add i32 %51, %44, !dbg !25
  %55 = add i32 %51, %45, !dbg !25
  %56 = add i32 %51, %46, !dbg !25
  %57 = add i32 %51, %47, !dbg !25
  %58 = add i32 %51, %48, !dbg !25
  %59 = add i32 %51, %49, !dbg !25
  %60 = sext i32 %52 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = sext i32 %53 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !26
  %64 = sext i32 %54 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !26
  %66 = sext i32 %55 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !26
  %68 = sext i32 %56 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %57 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %58 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %59 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = and i1 %18, %31, !dbg !27
  %77 = and i1 %32, %18, !dbg !27
  %78 = and i1 %33, %18, !dbg !27
  %79 = and i1 %34, %18, !dbg !27
  %80 = and i1 %35, %18, !dbg !27
  %81 = and i1 %36, %18, !dbg !27
  %82 = and i1 %37, %18, !dbg !27
  %83 = and i1 %38, %18, !dbg !27
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %76) #4, !dbg !28
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !28
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !28
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %77) #4, !dbg !28
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !28
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %78) #4, !dbg !28
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !28
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %79) #4, !dbg !28
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !28
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !28
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %80) #4, !dbg !28
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !28
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %81) #4, !dbg !28
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !28
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !28
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %82) #4, !dbg !28
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !28
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !28
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %83) #4, !dbg !28
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !28
  %108 = and i32 %13, 510, !dbg !28
  %109 = lshr i32 %13, 7, !dbg !28
  %110 = and i32 %109, 2, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !28
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %108, !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %85, i32 %86, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %115 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 1032, !dbg !28
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %88, i32 %89, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %117 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %118 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %91, i32 %92, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %119 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %120 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %94, i32 %95, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %121 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %122 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %97, i32 %98, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %123 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %124 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %100, i32 %101, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %125 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %126 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %103, i32 %104, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %127 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %128 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %112, i32 %106, i32 %107, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %129 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %130 = load float, ptr addrspace(3) %115, align 4, !dbg !28
  %131 = sext i32 %41 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %19) #4, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !31
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %19) #4, !dbg !32
  %136 = bitcast i32 %135 to float, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !33
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %19) #4, !dbg !34
  %139 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !35
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %19) #4, !dbg !36
  %141 = fadd float %136, 0x3EE4F8B580000000, !dbg !37
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %142, 0, !dbg !38
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %143, 0, !dbg !38
  br i1 %.not.i, label %149, label %144, !dbg !38

144:                                              ; preds = %9
  br i1 %.not1.i, label %147, label %145, !dbg !38

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

149:                                              ; preds = %9
  br i1 %.not1.i, label %152, label %150, !dbg !38

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %145, %147, %150, %152
  %.0.i = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !38
  %154 = shl i32 %12, 2, !dbg !17
  %155 = and i32 %154, 12, !dbg !17
  %156 = or disjoint i32 %21, %155, !dbg !18
  %157 = icmp slt i32 %156, 16, !dbg !19
  %158 = lshr i32 %12, 2, !dbg !12
  %159 = and i32 %158, 63, !dbg !12
  %160 = or disjoint i32 %159, %11, !dbg !13
  %161 = or disjoint i32 %160, 192, !dbg !13
  %162 = icmp slt i32 %161, 1704, !dbg !14
  %163 = and i1 %162, %157, !dbg !27
  %164 = or disjoint i32 %160, 128, !dbg !13
  %165 = icmp slt i32 %164, 1704, !dbg !14
  %166 = and i1 %165, %157, !dbg !27
  %167 = or disjoint i32 %160, 64, !dbg !13
  %168 = icmp slt i32 %167, 1704, !dbg !14
  %169 = and i1 %168, %157, !dbg !27
  %170 = icmp slt i32 %160, 1704, !dbg !14
  %171 = and i1 %170, %157, !dbg !27
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %173 = insertelement <16 x float> poison, float %130, i64 0, !dbg !40
  %174 = insertelement <16 x float> %173, float %129, i64 1, !dbg !40
  %175 = insertelement <16 x float> %174, float %128, i64 2, !dbg !40
  %176 = insertelement <16 x float> %175, float %127, i64 3, !dbg !40
  %177 = insertelement <16 x float> %176, float %126, i64 4, !dbg !40
  %178 = insertelement <16 x float> %177, float %125, i64 5, !dbg !40
  %179 = insertelement <16 x float> %178, float %124, i64 6, !dbg !40
  %180 = insertelement <16 x float> %179, float %123, i64 7, !dbg !40
  %181 = insertelement <16 x float> %180, float %122, i64 8, !dbg !40
  %182 = insertelement <16 x float> %181, float %121, i64 9, !dbg !40
  %183 = insertelement <16 x float> %182, float %120, i64 10, !dbg !40
  %184 = insertelement <16 x float> %183, float %119, i64 11, !dbg !40
  %185 = insertelement <16 x float> %184, float %118, i64 12, !dbg !40
  %186 = insertelement <16 x float> %185, float %117, i64 13, !dbg !40
  %187 = insertelement <16 x float> %186, float %116, i64 14, !dbg !40
  %188 = insertelement <16 x float> %187, float %114, i64 15, !dbg !40
  %189 = insertelement <16 x i32> poison, i32 %133, i64 0, !dbg !40
  %190 = bitcast <16 x i32> %189 to <16 x float>, !dbg !40
  %191 = shufflevector <16 x float> %190, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %192 = fsub <16 x float> %188, %191, !dbg !40
  %193 = insertelement <16 x float> poison, float %172, i64 0, !dbg !41
  %194 = shufflevector <16 x float> %193, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %195 = fmul <16 x float> %192, %194, !dbg !41
  %196 = insertelement <16 x i32> poison, i32 %138, i64 0, !dbg !42
  %197 = bitcast <16 x i32> %196 to <16 x float>, !dbg !42
  %198 = shufflevector <16 x float> %197, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %199 = fmul <16 x float> %195, %198, !dbg !42
  %200 = insertelement <16 x i32> poison, i32 %140, i64 0, !dbg !43
  %201 = bitcast <16 x i32> %200 to <16 x float>, !dbg !43
  %202 = shufflevector <16 x float> %201, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %203 = fadd <16 x float> %199, %202, !dbg !43
  %204 = fcmp ole <16 x float> %203, zeroinitializer, !dbg !44
  %205 = select <16 x i1> %204, <16 x float> zeroinitializer, <16 x float> %203, !dbg !44
  %206 = fcmp olt <16 x float> %205, splat (float 6.000000e+00), !dbg !48
  %207 = extractelement <16 x float> %205, i64 15, !dbg !50
  %208 = fcmp uno float %207, 0.000000e+00, !dbg !51
  %209 = extractelement <16 x float> %205, i64 14, !dbg !50
  %210 = fcmp uno float %209, 0.000000e+00, !dbg !51
  %211 = extractelement <16 x float> %205, i64 13, !dbg !50
  %212 = fcmp uno float %211, 0.000000e+00, !dbg !51
  %213 = extractelement <16 x float> %205, i64 12, !dbg !50
  %214 = fcmp uno float %213, 0.000000e+00, !dbg !51
  %215 = extractelement <16 x float> %205, i64 11, !dbg !50
  %216 = fcmp uno float %215, 0.000000e+00, !dbg !51
  %217 = extractelement <16 x float> %205, i64 10, !dbg !50
  %218 = fcmp uno float %217, 0.000000e+00, !dbg !51
  %219 = extractelement <16 x float> %205, i64 9, !dbg !50
  %220 = fcmp uno float %219, 0.000000e+00, !dbg !51
  %221 = extractelement <16 x float> %205, i64 8, !dbg !50
  %222 = fcmp uno float %221, 0.000000e+00, !dbg !51
  %223 = extractelement <16 x float> %205, i64 7, !dbg !50
  %224 = fcmp uno float %223, 0.000000e+00, !dbg !51
  %225 = extractelement <16 x float> %205, i64 6, !dbg !50
  %226 = fcmp uno float %225, 0.000000e+00, !dbg !51
  %227 = extractelement <16 x float> %205, i64 5, !dbg !50
  %228 = fcmp uno float %227, 0.000000e+00, !dbg !51
  %229 = extractelement <16 x float> %205, i64 4, !dbg !50
  %230 = fcmp uno float %229, 0.000000e+00, !dbg !51
  %231 = extractelement <16 x float> %205, i64 3, !dbg !50
  %232 = fcmp uno float %231, 0.000000e+00, !dbg !51
  %233 = extractelement <16 x float> %205, i64 2, !dbg !50
  %234 = fcmp uno float %233, 0.000000e+00, !dbg !51
  %235 = extractelement <16 x float> %205, i64 1, !dbg !50
  %236 = fcmp uno float %235, 0.000000e+00, !dbg !51
  %237 = extractelement <16 x float> %205, i64 0, !dbg !50
  %238 = fcmp uno float %237, 0.000000e+00, !dbg !51
  %239 = extractelement <16 x i1> %206, i64 15, !dbg !52
  %240 = or i1 %239, %208, !dbg !52
  %241 = extractelement <16 x i1> %206, i64 14, !dbg !52
  %242 = or i1 %241, %210, !dbg !52
  %243 = extractelement <16 x i1> %206, i64 13, !dbg !52
  %244 = or i1 %243, %212, !dbg !52
  %245 = extractelement <16 x i1> %206, i64 12, !dbg !52
  %246 = or i1 %245, %214, !dbg !52
  %247 = extractelement <16 x i1> %206, i64 11, !dbg !52
  %248 = or i1 %247, %216, !dbg !52
  %249 = extractelement <16 x i1> %206, i64 10, !dbg !52
  %250 = or i1 %249, %218, !dbg !52
  %251 = extractelement <16 x i1> %206, i64 9, !dbg !52
  %252 = or i1 %251, %220, !dbg !52
  %253 = extractelement <16 x i1> %206, i64 8, !dbg !52
  %254 = or i1 %253, %222, !dbg !52
  %255 = extractelement <16 x i1> %206, i64 7, !dbg !52
  %256 = or i1 %255, %224, !dbg !52
  %257 = extractelement <16 x i1> %206, i64 6, !dbg !52
  %258 = or i1 %257, %226, !dbg !52
  %259 = extractelement <16 x i1> %206, i64 5, !dbg !52
  %260 = or i1 %259, %228, !dbg !52
  %261 = extractelement <16 x i1> %206, i64 4, !dbg !52
  %262 = or i1 %261, %230, !dbg !52
  %263 = extractelement <16 x i1> %206, i64 3, !dbg !52
  %264 = or i1 %263, %232, !dbg !52
  %265 = extractelement <16 x i1> %206, i64 2, !dbg !52
  %266 = or i1 %265, %234, !dbg !52
  %267 = extractelement <16 x i1> %206, i64 1, !dbg !52
  %268 = or i1 %267, %236, !dbg !52
  %269 = extractelement <16 x i1> %206, i64 0, !dbg !52
  %270 = or i1 %269, %238, !dbg !52
  %271 = shl i32 %160, 4, !dbg !53
  %272 = shl i32 %167, 4, !dbg !53
  %273 = shl i32 %164, 4, !dbg !53
  %274 = shl i32 %161, 4, !dbg !53
  %275 = add i32 %156, %271, !dbg !54
  %276 = add i32 %156, %272, !dbg !54
  %277 = add i32 %156, %273, !dbg !54
  %278 = add i32 %156, %274, !dbg !54
  %279 = sext i32 %275 to i64, !dbg !55
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !55
  %281 = sext i32 %276 to i64, !dbg !55
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !55
  %283 = sext i32 %277 to i64, !dbg !55
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !55
  %285 = sext i32 %278 to i64, !dbg !55
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %287 = shl i32 %12, 4, !dbg !50
  %288 = and i32 %287, 4080, !dbg !50
  %289 = and i32 %154, 1020, !dbg !50
  %290 = lshr exact i32 %288, 2, !dbg !50
  %291 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %290, !dbg !50
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !50
  %293 = bitcast float %207 to i32, !dbg !50
  %294 = select i1 %240, i32 %293, i32 1086324736, !dbg !56
  %295 = insertelement <1 x i32> poison, i32 %294, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %295, i1 true) #4, !dbg !50
  %296 = or disjoint i32 %288, 1, !dbg !50
  %297 = getelementptr float, ptr addrspace(3) %291, i32 %296, !dbg !50
  %298 = bitcast float %209 to i32, !dbg !50
  %299 = select i1 %242, i32 %298, i32 1086324736, !dbg !56
  %300 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %300, i1 true) #4, !dbg !50
  %301 = or disjoint i32 %288, 2, !dbg !50
  %302 = getelementptr float, ptr addrspace(3) %291, i32 %301, !dbg !50
  %303 = bitcast float %211 to i32, !dbg !50
  %304 = select i1 %244, i32 %303, i32 1086324736, !dbg !56
  %305 = insertelement <1 x i32> poison, i32 %304, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %305, i1 true) #4, !dbg !50
  %306 = or disjoint i32 %288, 3, !dbg !50
  %307 = getelementptr float, ptr addrspace(3) %291, i32 %306, !dbg !50
  %308 = bitcast float %213 to i32, !dbg !50
  %309 = select i1 %246, i32 %308, i32 1086324736, !dbg !56
  %310 = insertelement <1 x i32> poison, i32 %309, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %310, i1 true) #4, !dbg !50
  %311 = or disjoint i32 %288, 4, !dbg !50
  %312 = getelementptr float, ptr addrspace(3) %291, i32 %311, !dbg !50
  %313 = bitcast float %215 to i32, !dbg !50
  %314 = select i1 %248, i32 %313, i32 1086324736, !dbg !56
  %315 = insertelement <1 x i32> poison, i32 %314, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %315, i1 true) #4, !dbg !50
  %316 = or disjoint i32 %288, 5, !dbg !50
  %317 = getelementptr float, ptr addrspace(3) %291, i32 %316, !dbg !50
  %318 = bitcast float %217 to i32, !dbg !50
  %319 = select i1 %250, i32 %318, i32 1086324736, !dbg !56
  %320 = insertelement <1 x i32> poison, i32 %319, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %320, i1 true) #4, !dbg !50
  %321 = or disjoint i32 %288, 6, !dbg !50
  %322 = getelementptr float, ptr addrspace(3) %291, i32 %321, !dbg !50
  %323 = bitcast float %219 to i32, !dbg !50
  %324 = select i1 %252, i32 %323, i32 1086324736, !dbg !56
  %325 = insertelement <1 x i32> poison, i32 %324, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %325, i1 true) #4, !dbg !50
  %326 = or disjoint i32 %288, 7, !dbg !50
  %327 = getelementptr float, ptr addrspace(3) %291, i32 %326, !dbg !50
  %328 = bitcast float %221 to i32, !dbg !50
  %329 = select i1 %254, i32 %328, i32 1086324736, !dbg !56
  %330 = insertelement <1 x i32> poison, i32 %329, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %330, i1 true) #4, !dbg !50
  %331 = or disjoint i32 %288, 8, !dbg !50
  %332 = getelementptr float, ptr addrspace(3) %291, i32 %331, !dbg !50
  %333 = bitcast float %223 to i32, !dbg !50
  %334 = select i1 %256, i32 %333, i32 1086324736, !dbg !56
  %335 = insertelement <1 x i32> poison, i32 %334, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %335, i1 true) #4, !dbg !50
  %336 = or disjoint i32 %288, 9, !dbg !50
  %337 = getelementptr float, ptr addrspace(3) %291, i32 %336, !dbg !50
  %338 = bitcast float %225 to i32, !dbg !50
  %339 = select i1 %258, i32 %338, i32 1086324736, !dbg !56
  %340 = insertelement <1 x i32> poison, i32 %339, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %340, i1 true) #4, !dbg !50
  %341 = or disjoint i32 %288, 10, !dbg !50
  %342 = getelementptr float, ptr addrspace(3) %291, i32 %341, !dbg !50
  %343 = bitcast float %227 to i32, !dbg !50
  %344 = select i1 %260, i32 %343, i32 1086324736, !dbg !56
  %345 = insertelement <1 x i32> poison, i32 %344, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %345, i1 true) #4, !dbg !50
  %346 = or disjoint i32 %288, 11, !dbg !50
  %347 = getelementptr float, ptr addrspace(3) %291, i32 %346, !dbg !50
  %348 = bitcast float %229 to i32, !dbg !50
  %349 = select i1 %262, i32 %348, i32 1086324736, !dbg !56
  %350 = insertelement <1 x i32> poison, i32 %349, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %350, i1 true) #4, !dbg !50
  %351 = or disjoint i32 %288, 12, !dbg !50
  %352 = getelementptr float, ptr addrspace(3) %291, i32 %351, !dbg !50
  %353 = bitcast float %231 to i32, !dbg !50
  %354 = select i1 %264, i32 %353, i32 1086324736, !dbg !56
  %355 = insertelement <1 x i32> poison, i32 %354, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %355, i1 true) #4, !dbg !50
  %356 = or disjoint i32 %288, 13, !dbg !50
  %357 = getelementptr float, ptr addrspace(3) %291, i32 %356, !dbg !50
  %358 = bitcast float %233 to i32, !dbg !50
  %359 = select i1 %266, i32 %358, i32 1086324736, !dbg !56
  %360 = insertelement <1 x i32> poison, i32 %359, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %360, i1 true) #4, !dbg !50
  %361 = or disjoint i32 %288, 14, !dbg !50
  %362 = getelementptr float, ptr addrspace(3) %291, i32 %361, !dbg !50
  %363 = bitcast float %235 to i32, !dbg !50
  %364 = select i1 %268, i32 %363, i32 1086324736, !dbg !56
  %365 = insertelement <1 x i32> poison, i32 %364, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %365, i1 true) #4, !dbg !50
  %366 = or disjoint i32 %288, 15, !dbg !50
  %367 = getelementptr float, ptr addrspace(3) %291, i32 %366, !dbg !50
  %368 = bitcast float %237 to i32, !dbg !50
  %369 = select i1 %270, i32 %368, i32 1086324736, !dbg !56
  %370 = insertelement <1 x i32> poison, i32 %369, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %370, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %371 = lshr i32 %289, 4, !dbg !50
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !50
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %289, !dbg !50
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !50
  %375 = or disjoint i32 %289, 1, !dbg !50
  %376 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %375, !dbg !50
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !50
  %378 = or disjoint i32 %289, 2, !dbg !50
  %379 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %378, !dbg !50
  %380 = load i32, ptr addrspace(3) %379, align 4, !dbg !50
  %381 = or disjoint i32 %289, 3, !dbg !50
  %382 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %381, !dbg !50
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !50
  %384 = or disjoint i32 %289, 1024, !dbg !50
  %385 = lshr i32 %384, 4, !dbg !50
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %385, !dbg !50
  %387 = getelementptr inbounds float, ptr addrspace(3) %386, i32 %384, !dbg !50
  %388 = load i32, ptr addrspace(3) %387, align 4, !dbg !50
  %389 = or disjoint i32 %289, 1025, !dbg !50
  %390 = lshr i32 %389, 4, !dbg !50
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !50
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %389, !dbg !50
  %393 = load i32, ptr addrspace(3) %392, align 4, !dbg !50
  %394 = or disjoint i32 %289, 1026, !dbg !50
  %395 = lshr i32 %394, 4, !dbg !50
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !50
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %394, !dbg !50
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !50
  %399 = or disjoint i32 %289, 1027, !dbg !50
  %400 = lshr i32 %399, 4, !dbg !50
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !50
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %399, !dbg !50
  %403 = load i32, ptr addrspace(3) %402, align 4, !dbg !50
  %404 = or disjoint i32 %289, 2048, !dbg !50
  %405 = lshr i32 %404, 4, !dbg !50
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !50
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %404, !dbg !50
  %408 = load i32, ptr addrspace(3) %407, align 4, !dbg !50
  %409 = or disjoint i32 %289, 2049, !dbg !50
  %410 = lshr i32 %409, 4, !dbg !50
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !50
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %409, !dbg !50
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !50
  %414 = or disjoint i32 %289, 2050, !dbg !50
  %415 = lshr i32 %414, 4, !dbg !50
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !50
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %414, !dbg !50
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !50
  %419 = or disjoint i32 %289, 2051, !dbg !50
  %420 = lshr i32 %419, 4, !dbg !50
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !50
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %419, !dbg !50
  %423 = load i32, ptr addrspace(3) %422, align 4, !dbg !50
  %424 = or disjoint i32 %289, 3072, !dbg !50
  %425 = lshr i32 %424, 4, !dbg !50
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %425, !dbg !50
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %424, !dbg !50
  %428 = load i32, ptr addrspace(3) %427, align 4, !dbg !50
  %429 = or disjoint i32 %289, 3073, !dbg !50
  %430 = lshr i32 %429, 4, !dbg !50
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !50
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %429, !dbg !50
  %433 = load i32, ptr addrspace(3) %432, align 4, !dbg !50
  %434 = or disjoint i32 %289, 3074, !dbg !50
  %435 = lshr i32 %434, 4, !dbg !50
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !50
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %434, !dbg !50
  %438 = load i32, ptr addrspace(3) %437, align 4, !dbg !50
  %439 = or disjoint i32 %289, 3075, !dbg !50
  %440 = lshr i32 %439, 4, !dbg !50
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !50
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %439, !dbg !50
  %443 = load i32, ptr addrspace(3) %442, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %374, i32 %377, i32 %380, i32 %383, ptr addrspace(1) %280, i1 %171) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %388, i32 %393, i32 %398, i32 %403, ptr addrspace(1) %282, i1 %169) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %413, i32 %418, i32 %423, ptr addrspace(1) %284, i1 %166) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %428, i32 %433, i32 %438, i32 %443, ptr addrspace(1) %286, i1 %163) #4, !dbg !50
  %444 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !57
  %445 = getelementptr float, ptr addrspace(1) %6, i64 %62, !dbg !57
  %446 = getelementptr float, ptr addrspace(1) %6, i64 %64, !dbg !57
  %447 = getelementptr float, ptr addrspace(1) %6, i64 %66, !dbg !57
  %448 = getelementptr float, ptr addrspace(1) %6, i64 %68, !dbg !57
  %449 = getelementptr float, ptr addrspace(1) %6, i64 %70, !dbg !57
  %450 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !57
  %451 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %295, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %300, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %452 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %305, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %310, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %453 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %315, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %320, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %454 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %325, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %330, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %455 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %335, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %340, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %456 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %345, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %350, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %457 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %355, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %360, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %458 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %365, i1 true) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %370, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %459 = load <2 x i32>, ptr addrspace(3) %112, align 8, !dbg !58
  %.extract = extractelement <2 x i32> %452, i64 0, !dbg !58
  %.extract34 = extractelement <2 x i32> %452, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract34, ptr addrspace(1) %444, i1 %76) #4, !dbg !58
  %.extract35 = extractelement <2 x i32> %453, i64 0, !dbg !58
  %.extract36 = extractelement <2 x i32> %453, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract35, i32 %.extract36, ptr addrspace(1) %445, i1 %77) #4, !dbg !58
  %.extract37 = extractelement <2 x i32> %454, i64 0, !dbg !58
  %.extract38 = extractelement <2 x i32> %454, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract37, i32 %.extract38, ptr addrspace(1) %446, i1 %78) #4, !dbg !58
  %.extract39 = extractelement <2 x i32> %455, i64 0, !dbg !58
  %.extract40 = extractelement <2 x i32> %455, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract39, i32 %.extract40, ptr addrspace(1) %447, i1 %79) #4, !dbg !58
  %.extract41 = extractelement <2 x i32> %456, i64 0, !dbg !58
  %.extract42 = extractelement <2 x i32> %456, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract41, i32 %.extract42, ptr addrspace(1) %448, i1 %80) #4, !dbg !58
  %.extract43 = extractelement <2 x i32> %457, i64 0, !dbg !58
  %.extract44 = extractelement <2 x i32> %457, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract43, i32 %.extract44, ptr addrspace(1) %449, i1 %81) #4, !dbg !58
  %.extract45 = extractelement <2 x i32> %458, i64 0, !dbg !58
  %.extract46 = extractelement <2 x i32> %458, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract45, i32 %.extract46, ptr addrspace(1) %450, i1 %82) #4, !dbg !58
  %.extract47 = extractelement <2 x i32> %459, i64 0, !dbg !58
  %.extract48 = extractelement <2 x i32> %459, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract47, i32 %.extract48, ptr addrspace(1) %451, i1 %83) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2pzzijc735sxjb72dr6so7ubglxiju7skdcarifq5m7re7d4efi.py", directory: "inductor_cache/2p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 53, column: 25, scope: !7)
!58 = !DILocation(line: 53, column: 56, scope: !7)
!59 = !DILocation(line: 53, column: 4, scope: !7)
