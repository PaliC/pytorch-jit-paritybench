; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 124, !dbg !12
  %14 = lshr i32 %11, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %15, 16, !dbg !12
  %18 = or disjoint i32 %15, 24, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 5, !dbg !15
  %22 = or disjoint i32 %21, %15, !dbg !16
  %23 = or disjoint i32 %21, %16, !dbg !16
  %24 = or disjoint i32 %21, %17, !dbg !16
  %25 = or disjoint i32 %21, %18, !dbg !16
  %26 = icmp slt i32 %22, 25, !dbg !17
  %27 = icmp slt i32 %23, 25, !dbg !17
  %28 = icmp slt i32 %24, 25, !dbg !17
  %29 = icmp slt i32 %25, 25, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %30 = sdiv i32 %.frozen, 256, !dbg !18
  %31 = mul i32 %30, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = shl i32 %22, 8, !dbg !20
  %33 = shl i32 %23, 8, !dbg !20
  %34 = shl i32 %24, 8, !dbg !20
  %35 = shl i32 %25, 8, !dbg !20
  %36 = mul i32 %30, 6400, !dbg !21
  %37 = add i32 %36, %.decomposed, !dbg !22
  %38 = add i32 %37, %32, !dbg !23
  %39 = add i32 %37, %33, !dbg !23
  %40 = add i32 %37, %34, !dbg !23
  %41 = add i32 %37, %35, !dbg !23
  %42 = sext i32 %38 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %40 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %41 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %27) #4, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %28) #4, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %29) #4, !dbg !25
  %54 = sext i32 %.decomposed to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #4, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = bitcast i32 %60 to float, !dbg !29
  %65 = bitcast i32 %61 to float, !dbg !29
  %66 = bitcast i32 %62 to float, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !33
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !34
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !34
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %75, 0, !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %76, 0, !dbg !35
  br i1 %.not.i, label %82, label %77, !dbg !35

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

82:                                               ; preds = %8
  br i1 %.not1.i, label %85, label %83, !dbg !35

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i2 = icmp eq i32 %87, 0, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i5 = icmp eq i32 %88, 0, !dbg !35
  br i1 %.not.i2, label %94, label %89, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %97, label %95, !dbg !35

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

__nv_sqrtf.exit6:                                 ; preds = %90, %92, %95, %97
  %.0.i4 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i7 = icmp eq i32 %99, 0, !dbg !35
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i10 = icmp eq i32 %100, 0, !dbg !35
  br i1 %.not.i7, label %106, label %101, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

106:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

__nv_sqrtf.exit11:                                ; preds = %102, %104, %107, %109
  %.0.i9 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !35
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i12 = icmp eq i32 %111, 0, !dbg !35
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i15 = icmp eq i32 %112, 0, !dbg !35
  br i1 %.not.i12, label %118, label %113, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

118:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %121, label %119, !dbg !35

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

__nv_sqrtf.exit16:                                ; preds = %114, %116, %119, %121
  %.0.i14 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %124 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %126 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %129 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %142 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %143 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %150 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %151 = or disjoint i32 %10, %15, !dbg !12
  %152 = or disjoint i32 %151, 120, !dbg !13
  %.frozen17 = freeze i32 %152, !dbg !18
  %153 = sdiv i32 %.frozen17, 256, !dbg !18
  %154 = or disjoint i32 %151, 112, !dbg !13
  %.frozen19 = freeze i32 %154, !dbg !18
  %155 = sdiv i32 %.frozen19, 256, !dbg !18
  %156 = or disjoint i32 %151, 104, !dbg !13
  %.frozen21 = freeze i32 %156, !dbg !18
  %157 = sdiv i32 %.frozen21, 256, !dbg !18
  %158 = or disjoint i32 %151, 96, !dbg !13
  %.frozen23 = freeze i32 %158, !dbg !18
  %159 = sdiv i32 %.frozen23, 256, !dbg !18
  %160 = or disjoint i32 %151, 88, !dbg !13
  %.frozen25 = freeze i32 %160, !dbg !18
  %161 = sdiv i32 %.frozen25, 256, !dbg !18
  %162 = or disjoint i32 %151, 80, !dbg !13
  %.frozen27 = freeze i32 %162, !dbg !18
  %163 = sdiv i32 %.frozen27, 256, !dbg !18
  %164 = or disjoint i32 %151, 72, !dbg !13
  %.frozen29 = freeze i32 %164, !dbg !18
  %165 = sdiv i32 %.frozen29, 256, !dbg !18
  %166 = or disjoint i32 %151, 64, !dbg !13
  %.frozen31 = freeze i32 %166, !dbg !18
  %167 = sdiv i32 %.frozen31, 256, !dbg !18
  %168 = or disjoint i32 %151, 56, !dbg !13
  %.frozen33 = freeze i32 %168, !dbg !18
  %169 = sdiv i32 %.frozen33, 256, !dbg !18
  %170 = or disjoint i32 %151, 48, !dbg !13
  %.frozen35 = freeze i32 %170, !dbg !18
  %171 = sdiv i32 %.frozen35, 256, !dbg !18
  %172 = or disjoint i32 %151, 40, !dbg !13
  %.frozen37 = freeze i32 %172, !dbg !18
  %173 = sdiv i32 %.frozen37, 256, !dbg !18
  %174 = or disjoint i32 %151, 32, !dbg !13
  %.frozen39 = freeze i32 %174, !dbg !18
  %175 = sdiv i32 %.frozen39, 256, !dbg !18
  %176 = or disjoint i32 %10, %18, !dbg !13
  %.frozen41 = freeze i32 %176, !dbg !18
  %177 = sdiv i32 %.frozen41, 256, !dbg !18
  %178 = or disjoint i32 %10, %17, !dbg !13
  %.frozen43 = freeze i32 %178, !dbg !18
  %179 = sdiv i32 %.frozen43, 256, !dbg !18
  %180 = or disjoint i32 %10, %16, !dbg !13
  %.frozen45 = freeze i32 %180, !dbg !18
  %181 = sdiv i32 %.frozen45, 256, !dbg !18
  %.frozen47 = freeze i32 %151, !dbg !18
  %182 = sdiv i32 %.frozen47, 256, !dbg !18
  %183 = mul i32 %153, 256, !dbg !19
  %.decomposed18 = sub i32 %.frozen17, %183, !dbg !19
  %184 = mul i32 %155, 256, !dbg !19
  %.decomposed20 = sub i32 %.frozen19, %184, !dbg !19
  %185 = mul i32 %157, 256, !dbg !19
  %.decomposed22 = sub i32 %.frozen21, %185, !dbg !19
  %186 = mul i32 %159, 256, !dbg !19
  %.decomposed24 = sub i32 %.frozen23, %186, !dbg !19
  %187 = mul i32 %161, 256, !dbg !19
  %.decomposed26 = sub i32 %.frozen25, %187, !dbg !19
  %188 = mul i32 %163, 256, !dbg !19
  %.decomposed28 = sub i32 %.frozen27, %188, !dbg !19
  %189 = mul i32 %165, 256, !dbg !19
  %.decomposed30 = sub i32 %.frozen29, %189, !dbg !19
  %190 = mul i32 %167, 256, !dbg !19
  %.decomposed32 = sub i32 %.frozen31, %190, !dbg !19
  %191 = mul i32 %169, 256, !dbg !19
  %.decomposed34 = sub i32 %.frozen33, %191, !dbg !19
  %192 = mul i32 %171, 256, !dbg !19
  %.decomposed36 = sub i32 %.frozen35, %192, !dbg !19
  %193 = mul i32 %173, 256, !dbg !19
  %.decomposed38 = sub i32 %.frozen37, %193, !dbg !19
  %194 = mul i32 %175, 256, !dbg !19
  %.decomposed40 = sub i32 %.frozen39, %194, !dbg !19
  %195 = mul i32 %177, 256, !dbg !19
  %.decomposed42 = sub i32 %.frozen41, %195, !dbg !19
  %196 = mul i32 %179, 256, !dbg !19
  %.decomposed44 = sub i32 %.frozen43, %196, !dbg !19
  %197 = mul i32 %181, 256, !dbg !19
  %.decomposed46 = sub i32 %.frozen45, %197, !dbg !19
  %198 = mul i32 %182, 256, !dbg !19
  %.decomposed48 = sub i32 %.frozen47, %198, !dbg !19
  %199 = and i32 %11, 31, !dbg !36
  %200 = or disjoint i32 %21, %199, !dbg !16
  %201 = icmp slt i32 %200, 25, !dbg !17
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !37
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !37
  %206 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !27
  %207 = insertelement <4 x i32> %206, i32 %126, i64 1, !dbg !27
  %208 = insertelement <4 x i32> %207, i32 %128, i64 2, !dbg !27
  %209 = insertelement <4 x i32> %208, i32 %130, i64 3, !dbg !27
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !27
  %211 = shufflevector <4 x float> %210, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %212 = insertelement <16 x i32> poison, i32 %123, i64 0, !dbg !25
  %213 = insertelement <16 x i32> %212, i32 %125, i64 1, !dbg !25
  %214 = insertelement <16 x i32> %213, i32 %127, i64 2, !dbg !25
  %215 = insertelement <16 x i32> %214, i32 %129, i64 3, !dbg !25
  %216 = insertelement <16 x i32> %215, i32 %131, i64 4, !dbg !25
  %217 = insertelement <16 x i32> %216, i32 %132, i64 5, !dbg !25
  %218 = insertelement <16 x i32> %217, i32 %133, i64 6, !dbg !25
  %219 = insertelement <16 x i32> %218, i32 %134, i64 7, !dbg !25
  %220 = insertelement <16 x i32> %219, i32 %135, i64 8, !dbg !25
  %221 = insertelement <16 x i32> %220, i32 %136, i64 9, !dbg !25
  %222 = insertelement <16 x i32> %221, i32 %137, i64 10, !dbg !25
  %223 = insertelement <16 x i32> %222, i32 %138, i64 11, !dbg !25
  %224 = insertelement <16 x i32> %223, i32 %139, i64 12, !dbg !25
  %225 = insertelement <16 x i32> %224, i32 %140, i64 13, !dbg !25
  %226 = insertelement <16 x i32> %225, i32 %141, i64 14, !dbg !25
  %227 = insertelement <16 x i32> %226, i32 %142, i64 15, !dbg !25
  %228 = bitcast <16 x i32> %227 to <16 x float>, !dbg !25
  %229 = fsub <16 x float> %228, %211, !dbg !38
  %230 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !33
  %231 = insertelement <4 x i32> %230, i32 %144, i64 1, !dbg !33
  %232 = insertelement <4 x i32> %231, i32 %145, i64 2, !dbg !33
  %233 = insertelement <4 x i32> %232, i32 %146, i64 3, !dbg !33
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !33
  %235 = shufflevector <4 x float> %234, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %236 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !31
  %237 = insertelement <4 x i32> %236, i32 %148, i64 1, !dbg !31
  %238 = insertelement <4 x i32> %237, i32 %149, i64 2, !dbg !31
  %239 = insertelement <4 x i32> %238, i32 %150, i64 3, !dbg !31
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !31
  %241 = shufflevector <4 x float> %240, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %242 = insertelement <16 x float> poison, float %205, i64 0, !dbg !39
  %243 = insertelement <16 x float> %242, float %204, i64 1, !dbg !39
  %244 = insertelement <16 x float> %243, float %203, i64 2, !dbg !39
  %245 = insertelement <16 x float> %244, float %202, i64 3, !dbg !39
  %246 = shufflevector <16 x float> %245, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %247 = fmul <16 x float> %229, %246, !dbg !39
  %248 = fmul <16 x float> %247, %241, !dbg !40
  %249 = fadd <16 x float> %248, %235, !dbg !41
  %250 = fcmp olt <16 x float> %249, zeroinitializer, !dbg !42
  %251 = extractelement <16 x i1> %250, i64 15, !dbg !46
  %252 = extractelement <16 x float> %249, i64 15, !dbg !46
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !46
  %254 = extractelement <16 x i1> %250, i64 14, !dbg !46
  %255 = extractelement <16 x float> %249, i64 14, !dbg !46
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !46
  %257 = extractelement <16 x i1> %250, i64 13, !dbg !46
  %258 = extractelement <16 x float> %249, i64 13, !dbg !46
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !46
  %260 = extractelement <16 x i1> %250, i64 12, !dbg !46
  %261 = extractelement <16 x float> %249, i64 12, !dbg !46
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !46
  %263 = extractelement <16 x i1> %250, i64 11, !dbg !46
  %264 = extractelement <16 x float> %249, i64 11, !dbg !46
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !46
  %266 = extractelement <16 x i1> %250, i64 10, !dbg !46
  %267 = extractelement <16 x float> %249, i64 10, !dbg !46
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !46
  %269 = extractelement <16 x i1> %250, i64 9, !dbg !46
  %270 = extractelement <16 x float> %249, i64 9, !dbg !46
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !46
  %272 = extractelement <16 x i1> %250, i64 8, !dbg !46
  %273 = extractelement <16 x float> %249, i64 8, !dbg !46
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !46
  %275 = extractelement <16 x i1> %250, i64 7, !dbg !46
  %276 = extractelement <16 x float> %249, i64 7, !dbg !46
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !46
  %278 = extractelement <16 x i1> %250, i64 6, !dbg !46
  %279 = extractelement <16 x float> %249, i64 6, !dbg !46
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !46
  %281 = extractelement <16 x i1> %250, i64 5, !dbg !46
  %282 = extractelement <16 x float> %249, i64 5, !dbg !46
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !46
  %284 = extractelement <16 x i1> %250, i64 4, !dbg !46
  %285 = extractelement <16 x float> %249, i64 4, !dbg !46
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !46
  %287 = extractelement <16 x i1> %250, i64 3, !dbg !46
  %288 = extractelement <16 x float> %249, i64 3, !dbg !46
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !46
  %290 = extractelement <16 x i1> %250, i64 2, !dbg !46
  %291 = extractelement <16 x float> %249, i64 2, !dbg !46
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !46
  %293 = extractelement <16 x i1> %250, i64 1, !dbg !46
  %294 = extractelement <16 x float> %249, i64 1, !dbg !46
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !46
  %296 = extractelement <16 x i1> %250, i64 0, !dbg !46
  %297 = extractelement <16 x float> %249, i64 0, !dbg !46
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !46
  %299 = mul nsw i32 %.decomposed48, 25, !dbg !47
  %300 = mul nsw i32 %.decomposed46, 25, !dbg !47
  %301 = mul nsw i32 %.decomposed44, 25, !dbg !47
  %302 = mul nsw i32 %.decomposed42, 25, !dbg !47
  %303 = mul nsw i32 %.decomposed40, 25, !dbg !47
  %304 = mul nsw i32 %.decomposed38, 25, !dbg !47
  %305 = mul nsw i32 %.decomposed36, 25, !dbg !47
  %306 = mul nsw i32 %.decomposed34, 25, !dbg !47
  %307 = mul nsw i32 %.decomposed32, 25, !dbg !47
  %308 = mul nsw i32 %.decomposed30, 25, !dbg !47
  %309 = mul nsw i32 %.decomposed28, 25, !dbg !47
  %310 = mul nsw i32 %.decomposed26, 25, !dbg !47
  %311 = mul nsw i32 %.decomposed24, 25, !dbg !47
  %312 = mul nsw i32 %.decomposed22, 25, !dbg !47
  %313 = mul nsw i32 %.decomposed20, 25, !dbg !47
  %314 = mul nsw i32 %.decomposed18, 25, !dbg !47
  %315 = add i32 %299, %200, !dbg !48
  %316 = add i32 %300, %200, !dbg !48
  %317 = add i32 %301, %200, !dbg !48
  %318 = add i32 %302, %200, !dbg !48
  %319 = mul i32 %182, 38400, !dbg !49
  %320 = mul i32 %181, 38400, !dbg !49
  %321 = mul i32 %179, 38400, !dbg !49
  %322 = mul i32 %177, 38400, !dbg !49
  %323 = mul i32 %175, 38400, !dbg !49
  %324 = mul i32 %173, 38400, !dbg !49
  %325 = mul i32 %171, 38400, !dbg !49
  %326 = mul i32 %169, 38400, !dbg !49
  %327 = mul i32 %167, 38400, !dbg !49
  %328 = mul i32 %165, 38400, !dbg !49
  %329 = mul i32 %163, 38400, !dbg !49
  %330 = mul i32 %161, 38400, !dbg !49
  %331 = mul i32 %159, 38400, !dbg !49
  %332 = mul i32 %157, 38400, !dbg !49
  %333 = mul i32 %155, 38400, !dbg !49
  %334 = mul i32 %153, 38400, !dbg !49
  %335 = add i32 %315, %319, !dbg !50
  %336 = add i32 %316, %320, !dbg !50
  %337 = add i32 %317, %321, !dbg !50
  %338 = add i32 %318, %322, !dbg !50
  %339 = add i32 %323, %303, !dbg !48
  %340 = add i32 %339, %200, !dbg !50
  %341 = add i32 %324, %304, !dbg !48
  %342 = add i32 %341, %200, !dbg !50
  %343 = add i32 %325, %305, !dbg !48
  %344 = add i32 %343, %200, !dbg !50
  %345 = add i32 %326, %306, !dbg !48
  %346 = add i32 %345, %200, !dbg !50
  %347 = add i32 %327, %307, !dbg !48
  %348 = add i32 %347, %200, !dbg !50
  %349 = add i32 %328, %308, !dbg !48
  %350 = add i32 %349, %200, !dbg !50
  %351 = add i32 %329, %309, !dbg !48
  %352 = add i32 %351, %200, !dbg !50
  %353 = add i32 %330, %310, !dbg !48
  %354 = add i32 %353, %200, !dbg !50
  %355 = add i32 %331, %311, !dbg !48
  %356 = add i32 %355, %200, !dbg !50
  %357 = add i32 %332, %312, !dbg !48
  %358 = add i32 %357, %200, !dbg !50
  %359 = add i32 %333, %313, !dbg !48
  %360 = add i32 %359, %200, !dbg !50
  %361 = add i32 %334, %314, !dbg !48
  %362 = add i32 %361, %200, !dbg !50
  %363 = sext i32 %335 to i64, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %5, i64 %363, !dbg !51
  %365 = sext i32 %336 to i64, !dbg !51
  %366 = getelementptr float, ptr addrspace(1) %5, i64 %365, !dbg !51
  %367 = sext i32 %337 to i64, !dbg !51
  %368 = getelementptr float, ptr addrspace(1) %5, i64 %367, !dbg !51
  %369 = sext i32 %338 to i64, !dbg !51
  %370 = getelementptr float, ptr addrspace(1) %5, i64 %369, !dbg !51
  %371 = sext i32 %340 to i64, !dbg !51
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %371, !dbg !51
  %373 = sext i32 %342 to i64, !dbg !51
  %374 = getelementptr float, ptr addrspace(1) %5, i64 %373, !dbg !51
  %375 = sext i32 %344 to i64, !dbg !51
  %376 = getelementptr float, ptr addrspace(1) %5, i64 %375, !dbg !51
  %377 = sext i32 %346 to i64, !dbg !51
  %378 = getelementptr float, ptr addrspace(1) %5, i64 %377, !dbg !51
  %379 = sext i32 %348 to i64, !dbg !51
  %380 = getelementptr float, ptr addrspace(1) %5, i64 %379, !dbg !51
  %381 = sext i32 %350 to i64, !dbg !51
  %382 = getelementptr float, ptr addrspace(1) %5, i64 %381, !dbg !51
  %383 = sext i32 %352 to i64, !dbg !51
  %384 = getelementptr float, ptr addrspace(1) %5, i64 %383, !dbg !51
  %385 = sext i32 %354 to i64, !dbg !51
  %386 = getelementptr float, ptr addrspace(1) %5, i64 %385, !dbg !51
  %387 = sext i32 %356 to i64, !dbg !51
  %388 = getelementptr float, ptr addrspace(1) %5, i64 %387, !dbg !51
  %389 = sext i32 %358 to i64, !dbg !51
  %390 = getelementptr float, ptr addrspace(1) %5, i64 %389, !dbg !51
  %391 = sext i32 %360 to i64, !dbg !51
  %392 = getelementptr float, ptr addrspace(1) %5, i64 %391, !dbg !51
  %393 = sext i32 %362 to i64, !dbg !51
  %394 = getelementptr float, ptr addrspace(1) %5, i64 %393, !dbg !51
  %395 = shl i32 %11, 7, !dbg !52
  %396 = and i32 %395, 3968, !dbg !52
  %397 = or disjoint i32 %396, %15, !dbg !52
  %398 = and i32 %11, 255, !dbg !52
  %399 = lshr exact i32 %396, 3, !dbg !52
  %400 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %399, !dbg !52
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %397, !dbg !52
  %402 = bitcast float %253 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !52
  %403 = or disjoint i32 %397, 32, !dbg !52
  %404 = lshr i32 %403, 5, !dbg !52
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %404, !dbg !52
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %403, !dbg !52
  %407 = bitcast float %256 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !52
  %408 = or disjoint i32 %397, 64, !dbg !52
  %409 = lshr i32 %408, 5, !dbg !52
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !52
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %408, !dbg !52
  %412 = bitcast float %259 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !52
  %413 = or disjoint i32 %397, 96, !dbg !52
  %414 = lshr i32 %413, 5, !dbg !52
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i32 %414, !dbg !52
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %413, !dbg !52
  %417 = bitcast float %262 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #4, !dbg !52
  %418 = or disjoint i32 %397, 8, !dbg !52
  %419 = getelementptr float, ptr addrspace(3) %400, i32 %418, !dbg !52
  %420 = bitcast float %265 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !52
  %421 = or disjoint i32 %397, 40, !dbg !52
  %422 = lshr i32 %421, 5, !dbg !52
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !52
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %421, !dbg !52
  %425 = bitcast float %268 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #4, !dbg !52
  %426 = or disjoint i32 %397, 72, !dbg !52
  %427 = lshr i32 %426, 5, !dbg !52
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !52
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %426, !dbg !52
  %430 = bitcast float %271 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !52
  %431 = or disjoint i32 %397, 104, !dbg !52
  %432 = lshr i32 %431, 5, !dbg !52
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !52
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %431, !dbg !52
  %435 = bitcast float %274 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !52
  %436 = or disjoint i32 %397, 16, !dbg !52
  %437 = getelementptr float, ptr addrspace(3) %400, i32 %436, !dbg !52
  %438 = bitcast float %277 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !52
  %439 = or disjoint i32 %397, 48, !dbg !52
  %440 = lshr i32 %439, 5, !dbg !52
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !52
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !52
  %443 = bitcast float %280 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #4, !dbg !52
  %444 = or disjoint i32 %397, 80, !dbg !52
  %445 = lshr i32 %444, 5, !dbg !52
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !52
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %444, !dbg !52
  %448 = bitcast float %283 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #4, !dbg !52
  %449 = or disjoint i32 %397, 112, !dbg !52
  %450 = lshr i32 %449, 5, !dbg !52
  %451 = getelementptr float, ptr addrspace(3) @global_smem, i32 %450, !dbg !52
  %452 = getelementptr float, ptr addrspace(3) %451, i32 %449, !dbg !52
  %453 = bitcast float %286 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %453, i1 true) #4, !dbg !52
  %454 = or disjoint i32 %397, 24, !dbg !52
  %455 = getelementptr float, ptr addrspace(3) %400, i32 %454, !dbg !52
  %456 = bitcast float %289 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !52
  %457 = or disjoint i32 %397, 56, !dbg !52
  %458 = lshr i32 %457, 5, !dbg !52
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !52
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %457, !dbg !52
  %461 = bitcast float %292 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #4, !dbg !52
  %462 = or disjoint i32 %397, 88, !dbg !52
  %463 = lshr i32 %462, 5, !dbg !52
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !52
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %462, !dbg !52
  %466 = bitcast float %295 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #4, !dbg !52
  %467 = or disjoint i32 %397, 120, !dbg !52
  %468 = lshr i32 %467, 5, !dbg !52
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !52
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %467, !dbg !52
  %471 = bitcast float %298 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %471, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %472 = lshr i32 %398, 5, !dbg !52
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !52
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %398, !dbg !52
  %475 = load i32, ptr addrspace(3) %474, align 4, !dbg !52
  %476 = or disjoint i32 %398, 256, !dbg !52
  %477 = lshr i32 %476, 5, !dbg !52
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !52
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %476, !dbg !52
  %480 = load i32, ptr addrspace(3) %479, align 4, !dbg !52
  %481 = or disjoint i32 %398, 512, !dbg !52
  %482 = lshr i32 %481, 5, !dbg !52
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !52
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %481, !dbg !52
  %485 = load i32, ptr addrspace(3) %484, align 4, !dbg !52
  %486 = or disjoint i32 %398, 768, !dbg !52
  %487 = lshr i32 %486, 5, !dbg !52
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !52
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %486, !dbg !52
  %490 = load i32, ptr addrspace(3) %489, align 4, !dbg !52
  %491 = or disjoint i32 %398, 1024, !dbg !52
  %492 = lshr i32 %491, 5, !dbg !52
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %492, !dbg !52
  %494 = getelementptr inbounds float, ptr addrspace(3) %493, i32 %491, !dbg !52
  %495 = load i32, ptr addrspace(3) %494, align 4, !dbg !52
  %496 = or disjoint i32 %398, 1280, !dbg !52
  %497 = lshr i32 %496, 5, !dbg !52
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !52
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %496, !dbg !52
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !52
  %501 = or disjoint i32 %398, 1536, !dbg !52
  %502 = lshr i32 %501, 5, !dbg !52
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %502, !dbg !52
  %504 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %501, !dbg !52
  %505 = load i32, ptr addrspace(3) %504, align 4, !dbg !52
  %506 = or disjoint i32 %398, 1792, !dbg !52
  %507 = lshr i32 %506, 5, !dbg !52
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %507, !dbg !52
  %509 = getelementptr inbounds float, ptr addrspace(3) %508, i32 %506, !dbg !52
  %510 = load i32, ptr addrspace(3) %509, align 4, !dbg !52
  %511 = or disjoint i32 %398, 2048, !dbg !52
  %512 = lshr i32 %511, 5, !dbg !52
  %513 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %512, !dbg !52
  %514 = getelementptr inbounds float, ptr addrspace(3) %513, i32 %511, !dbg !52
  %515 = load i32, ptr addrspace(3) %514, align 4, !dbg !52
  %516 = or disjoint i32 %398, 2304, !dbg !52
  %517 = lshr i32 %516, 5, !dbg !52
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !52
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %516, !dbg !52
  %520 = load i32, ptr addrspace(3) %519, align 4, !dbg !52
  %521 = or disjoint i32 %398, 2560, !dbg !52
  %522 = lshr i32 %521, 5, !dbg !52
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !52
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %521, !dbg !52
  %525 = load i32, ptr addrspace(3) %524, align 4, !dbg !52
  %526 = or disjoint i32 %398, 2816, !dbg !52
  %527 = lshr i32 %526, 5, !dbg !52
  %528 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %527, !dbg !52
  %529 = getelementptr inbounds float, ptr addrspace(3) %528, i32 %526, !dbg !52
  %530 = load i32, ptr addrspace(3) %529, align 4, !dbg !52
  %531 = or disjoint i32 %398, 3072, !dbg !52
  %532 = lshr i32 %531, 5, !dbg !52
  %533 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %532, !dbg !52
  %534 = getelementptr inbounds float, ptr addrspace(3) %533, i32 %531, !dbg !52
  %535 = load i32, ptr addrspace(3) %534, align 4, !dbg !52
  %536 = or disjoint i32 %398, 3328, !dbg !52
  %537 = lshr i32 %536, 5, !dbg !52
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !52
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %536, !dbg !52
  %540 = load i32, ptr addrspace(3) %539, align 4, !dbg !52
  %541 = or disjoint i32 %398, 3584, !dbg !52
  %542 = lshr i32 %541, 5, !dbg !52
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %542, !dbg !52
  %544 = getelementptr inbounds float, ptr addrspace(3) %543, i32 %541, !dbg !52
  %545 = load i32, ptr addrspace(3) %544, align 4, !dbg !52
  %546 = or disjoint i32 %398, 3840, !dbg !52
  %547 = lshr i32 %546, 5, !dbg !52
  %548 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %547, !dbg !52
  %549 = getelementptr inbounds float, ptr addrspace(3) %548, i32 %546, !dbg !52
  %550 = load i32, ptr addrspace(3) %549, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %364, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %366, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %485, ptr addrspace(1) %368, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %490, ptr addrspace(1) %370, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %372, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %374, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %376, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %378, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %380, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %382, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %384, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %530, ptr addrspace(1) %386, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %388, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %390, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %392, i1 %201) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %550, ptr addrspace(1) %394, i1 %201) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpfamsqjavnl5v5fj4l77poi4jjmrk2rua37mvryotgedfmqdwgn.py", directory: "inductor_cache/pf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 49, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 44, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 33, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 44, scope: !7)
!50 = !DILocation(line: 49, column: 38, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 56, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
