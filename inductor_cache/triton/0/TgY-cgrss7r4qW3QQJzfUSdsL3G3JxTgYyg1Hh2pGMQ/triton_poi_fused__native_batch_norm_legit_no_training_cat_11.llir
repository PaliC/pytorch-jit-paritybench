; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 576, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 16, !dbg !15
  %22 = srem i32 %21, 9, !dbg !16
  %23 = mul i32 %21, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen16 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen16, 144, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !26
  %40 = icmp slt i32 %22, 5, !dbg !27
  %41 = mul i32 %24, 144, !dbg !28
  %srem.decomposed = sub i32 %.frozen16, %41, !dbg !28
  %42 = mul nsw i32 %24, 80, !dbg !29
  %43 = add nsw i32 %42, %srem.decomposed, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = and i1 %20, %40, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !33
  %48 = icmp sgt i32 %22, 4, !dbg !34
  %49 = add nsw i32 %22, -5, !dbg !35
  %50 = shl nsw i32 %49, 4, !dbg !36
  %51 = shl nsw i32 %24, 6, !dbg !37
  %52 = add nsw i32 %51, %.decomposed, !dbg !38
  %53 = add nsw i32 %52, %50, !dbg !39
  %54 = sext i32 %53 to i64, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !40
  %56 = and i1 %20, %48, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !42
  %58 = sext i32 %49 to i64, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !43
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %56, i32 0, i1 %56) #3, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %56, i32 0, i1 %56) #3, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %56, i32 0, i1 %56) #3, !dbg !46
  %64 = bitcast i32 %63 to float, !dbg !46
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %56, i32 0, i1 %56) #3, !dbg !46
  %66 = bitcast i32 %65 to float, !dbg !46
  %67 = fadd float %64, 0x3EE4F8B580000000, !dbg !47
  %68 = fadd float %66, 0x3EE4F8B580000000, !dbg !47
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %69, 0, !dbg !48
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %70, 0, !dbg !48
  br i1 %.not.i, label %76, label %71, !dbg !48

71:                                               ; preds = %13
  br i1 %.not1.i, label %74, label %72, !dbg !48

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

76:                                               ; preds = %13
  br i1 %.not1.i, label %79, label %77, !dbg !48

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %81, 0, !dbg !48
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !48
  br i1 %.not.i1, label %88, label %83, !dbg !48

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !48

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !48

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !48
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !50
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %56, i32 0, i1 %56) #3, !dbg !51
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %56, i32 0, i1 %56) #3, !dbg !51
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !52
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %56, i32 0, i1 %56) #3, !dbg !53
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %56, i32 0, i1 %56) #3, !dbg !53
  %101 = fadd float %31, 0x3EE4F8B580000000, !dbg !54
  %102 = fadd float %33, 0x3EE4F8B580000000, !dbg !54
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i6 = icmp eq i32 %103, 0, !dbg !55
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i9 = icmp eq i32 %104, 0, !dbg !55
  br i1 %.not.i6, label %110, label %105, !dbg !55

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !55

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !55

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

__nv_sqrtf.exit10:                                ; preds = %106, %108, %111, %113
  %.0.i8 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !55
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i11 = icmp eq i32 %115, 0, !dbg !55
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i14 = icmp eq i32 %116, 0, !dbg !55
  br i1 %.not.i11, label %122, label %117, !dbg !55

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !55

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !55
  br label %__nv_sqrtf.exit15, !dbg !55

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !55
  br label %__nv_sqrtf.exit15, !dbg !55

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !55

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !55
  br label %__nv_sqrtf.exit15, !dbg !55

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !55
  br label %__nv_sqrtf.exit15, !dbg !55

__nv_sqrtf.exit15:                                ; preds = %118, %120, %123, %125
  %.0.i13 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !55
  %127 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %130 = bitcast i32 %129 to float, !dbg !42
  %131 = bitcast i32 %61 to float, !dbg !44
  %132 = fsub float %130, %131, !dbg !56
  %133 = fmul float %132, %94, !dbg !57
  %134 = bitcast i32 %97 to float, !dbg !51
  %135 = fmul float %133, %134, !dbg !58
  %136 = bitcast i32 %100 to float, !dbg !53
  %137 = fadd float %135, %136, !dbg !59
  %138 = fcmp olt float %137, 0.000000e+00, !dbg !60
  %139 = select i1 %138, float 0.000000e+00, float %137, !dbg !64
  %140 = select i1 %40, float %128, float %139, !dbg !65
  %141 = bitcast i32 %28 to float, !dbg !20
  %142 = fsub float %140, %141, !dbg !66
  %143 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %144 = bitcast i32 %143 to float, !dbg !33
  %145 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = bitcast i32 %60 to float, !dbg !44
  %148 = fsub float %146, %147, !dbg !56
  %149 = fmul float %148, %93, !dbg !57
  %150 = bitcast i32 %96 to float, !dbg !51
  %151 = fmul float %149, %150, !dbg !58
  %152 = bitcast i32 %99 to float, !dbg !53
  %153 = fadd float %151, %152, !dbg !59
  %154 = fcmp olt float %153, 0.000000e+00, !dbg !60
  %155 = select i1 %154, float 0.000000e+00, float %153, !dbg !64
  %156 = select i1 %40, float %144, float %155, !dbg !65
  %157 = bitcast i32 %27 to float, !dbg !20
  %158 = fsub float %156, %157, !dbg !66
  %159 = bitcast i32 %39 to float, !dbg !26
  %160 = bitcast i32 %38 to float, !dbg !26
  %161 = bitcast i32 %36 to float, !dbg !24
  %162 = bitcast i32 %35 to float, !dbg !24
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !67
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !67
  %165 = fmul float %158, %163, !dbg !68
  %166 = fmul float %142, %164, !dbg !68
  %167 = fmul float %165, %162, !dbg !69
  %168 = fmul float %166, %161, !dbg !69
  %169 = fadd float %167, %160, !dbg !70
  %170 = fadd float %168, %159, !dbg !70
  %171 = sext i32 %19 to i64, !dbg !71
  %172 = getelementptr float, ptr addrspace(1) %10, i64 %171, !dbg !71
  %173 = bitcast float %156 to i32, !dbg !72
  %174 = bitcast float %140 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %20) #3, !dbg !72
  %175 = getelementptr float, ptr addrspace(1) %11, i64 %171, !dbg !73
  %176 = bitcast float %169 to i32, !dbg !74
  %177 = bitcast float %170 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %20) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqlkfbvfjjgm6x73e43foner3i3uccmn5ckecqftwmjkqfabhzs3.py", directory: "inductor_cache/ql")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 48, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 60, scope: !7)
!33 = !DILocation(line: 37, column: 53, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 46, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 41, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 35, scope: !7)
!39 = !DILocation(line: 41, column: 52, scope: !7)
!40 = !DILocation(line: 41, column: 30, scope: !7)
!41 = !DILocation(line: 41, column: 67, scope: !7)
!42 = !DILocation(line: 41, column: 60, scope: !7)
!43 = !DILocation(line: 42, column: 31, scope: !7)
!44 = !DILocation(line: 42, column: 43, scope: !7)
!45 = !DILocation(line: 44, column: 31, scope: !7)
!46 = !DILocation(line: 44, column: 43, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 27, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 31, scope: !7)
!51 = !DILocation(line: 53, column: 43, scope: !7)
!52 = !DILocation(line: 55, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 43, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 27, scope: !7)
!56 = !DILocation(line: 43, column: 19, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 58, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 61, column: 33, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 20, scope: !7)
!70 = !DILocation(line: 72, column: 20, scope: !7)
!71 = !DILocation(line: 73, column: 25, scope: !7)
!72 = !DILocation(line: 73, column: 37, scope: !7)
!73 = !DILocation(line: 74, column: 25, scope: !7)
!74 = !DILocation(line: 74, column: 37, scope: !7)
!75 = !DILocation(line: 74, column: 4, scope: !7)
