; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = icmp slt i32 %20, 1536, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %23 = sdiv i32 %.frozen, 6, !dbg !15
  %24 = mul i32 %23, 6, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %21, 6, !dbg !16
  %26 = sdiv i32 %20, 96, !dbg !17
  %27 = srem i32 %26, 4, !dbg !18
  %28 = icmp slt i32 %.decomposed, 1, !dbg !19
  %29 = icmp slt i32 %25, 1, !dbg !19
  %30 = sext i32 %23 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = and i1 %22, %28, !dbg !21
  %33 = and i1 %29, %22, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #1, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %33, i32 0, i1 %33) #1, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = sext i32 %27 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %32, i32 0, i1 %32) #1, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %33, i32 0, i1 %33) #1, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = fadd float %35, %41, !dbg !25
  %45 = fadd float %37, %43, !dbg !25
  %46 = icmp sgt i32 %25, 0, !dbg !26
  %47 = icmp slt i32 %.decomposed, 2, !dbg !27
  %48 = and i1 %46, %47, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !29
  %50 = and i1 %22, %48, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false) #1, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50) #1, !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 false, i32 0, i1 false) #1, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50) #1, !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = fadd float %53, %57, !dbg !34
  %59 = icmp sgt i32 %.decomposed, 1, !dbg !35
  %60 = icmp slt i32 %25, 3, !dbg !36
  %61 = icmp eq i32 %.decomposed, 2, !dbg !37
  %62 = and i1 %60, %59, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !38
  %64 = and i1 %22, %61, !dbg !39
  %65 = and i1 %22, %62, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64) #1, !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 0, i1 %65) #1, !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %64, i32 0, i1 %64) #1, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %65, i32 0, i1 %65) #1, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = fadd float %67, %72, !dbg !43
  %76 = fadd float %69, %74, !dbg !43
  %77 = icmp sgt i32 %25, 2, !dbg !44
  %78 = icmp slt i32 %.decomposed, 4, !dbg !45
  %79 = and i1 %77, %78, !dbg !46
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !47
  %81 = and i1 %22, %79, !dbg !48
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 false, i32 0, i1 false) #1, !dbg !49
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81) #1, !dbg !49
  %84 = bitcast i32 %83 to float, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !50
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 false, i32 0, i1 false) #1, !dbg !51
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %81, i32 0, i1 %81) #1, !dbg !51
  %88 = bitcast i32 %87 to float, !dbg !51
  %89 = fadd float %84, %88, !dbg !52
  %90 = icmp sgt i32 %.decomposed, 3, !dbg !53
  %91 = icmp slt i32 %25, 5, !dbg !54
  %92 = icmp eq i32 %.decomposed, 4, !dbg !55
  %93 = and i1 %91, %90, !dbg !55
  %94 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !56
  %95 = and i1 %22, %92, !dbg !57
  %96 = and i1 %22, %93, !dbg !57
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 0, i1 %95) #1, !dbg !58
  %98 = bitcast i32 %97 to float, !dbg !58
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %96, i32 0, i1 %96) #1, !dbg !58
  %100 = bitcast i32 %99 to float, !dbg !58
  %101 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !59
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %95, i32 0, i1 %95) #1, !dbg !60
  %103 = bitcast i32 %102 to float, !dbg !60
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %96, i32 0, i1 %96) #1, !dbg !60
  %105 = bitcast i32 %104 to float, !dbg !60
  %106 = fadd float %98, %103, !dbg !61
  %107 = fadd float %100, %105, !dbg !61
  %108 = icmp sgt i32 %.decomposed, 4, !dbg !62
  %109 = icmp sgt i32 %25, 4, !dbg !62
  %110 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !63
  %111 = and i1 %22, %108, !dbg !64
  %112 = and i1 %109, %22, !dbg !64
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %111, i32 0, i1 %111) #1, !dbg !65
  %114 = bitcast i32 %113 to float, !dbg !65
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %112, i32 0, i1 %112) #1, !dbg !65
  %116 = bitcast i32 %115 to float, !dbg !65
  %117 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !66
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %111, i32 0, i1 %111) #1, !dbg !67
  %119 = bitcast i32 %118 to float, !dbg !67
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %112, i32 0, i1 %112) #1, !dbg !67
  %121 = bitcast i32 %120 to float, !dbg !67
  %122 = fadd float %114, %119, !dbg !68
  %123 = fadd float %116, %121, !dbg !68
  %124 = select i1 %108, float %122, float 0.000000e+00, !dbg !69
  %125 = select i1 %109, float %123, float 0.000000e+00, !dbg !69
  %126 = select i1 %92, float %106, float %124, !dbg !70
  %127 = select i1 %93, float %107, float %125, !dbg !70
  %128 = select i1 %79, float %89, float %127, !dbg !70
  %129 = select i1 %61, float %75, float %126, !dbg !70
  %130 = select i1 %62, float %76, float %128, !dbg !70
  %131 = select i1 %48, float %58, float %130, !dbg !70
  %132 = select i1 %28, float %44, float %129, !dbg !70
  %133 = select i1 %29, float %45, float %131, !dbg !70
  %134 = sext i32 %20 to i64, !dbg !71
  %135 = getelementptr float, ptr addrspace(1) %12, i64 %134, !dbg !71
  %136 = bitcast float %132 to i32, !dbg !72
  %137 = bitcast float %133 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %135, i1 %22) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csorrlpxiuk4v36p4amj7g7t7kxfnerqyhl7u5q7jxzqf2jvc7mm.py", directory: "inductor_cache/so")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 20, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 42, column: 31, scope: !7)
!30 = !DILocation(line: 42, column: 44, scope: !7)
!31 = !DILocation(line: 42, column: 36, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 19, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 31, scope: !7)
!39 = !DILocation(line: 51, column: 44, scope: !7)
!40 = !DILocation(line: 51, column: 36, scope: !7)
!41 = !DILocation(line: 52, column: 31, scope: !7)
!42 = !DILocation(line: 52, column: 36, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 19, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 44, scope: !7)
!49 = !DILocation(line: 60, column: 36, scope: !7)
!50 = !DILocation(line: 61, column: 31, scope: !7)
!51 = !DILocation(line: 61, column: 36, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 19, scope: !7)
!55 = !DILocation(line: 68, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 31, scope: !7)
!57 = !DILocation(line: 69, column: 44, scope: !7)
!58 = !DILocation(line: 69, column: 36, scope: !7)
!59 = !DILocation(line: 70, column: 31, scope: !7)
!60 = !DILocation(line: 70, column: 36, scope: !7)
!61 = !DILocation(line: 71, column: 20, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 77, column: 32, scope: !7)
!64 = !DILocation(line: 77, column: 45, scope: !7)
!65 = !DILocation(line: 77, column: 37, scope: !7)
!66 = !DILocation(line: 78, column: 32, scope: !7)
!67 = !DILocation(line: 78, column: 37, scope: !7)
!68 = !DILocation(line: 79, column: 20, scope: !7)
!69 = !DILocation(line: 81, column: 35, scope: !7)
!70 = !DILocation(line: 0, scope: !7)
!71 = !DILocation(line: 87, column: 25, scope: !7)
!72 = !DILocation(line: 87, column: 37, scope: !7)
!73 = !DILocation(line: 87, column: 4, scope: !7)
