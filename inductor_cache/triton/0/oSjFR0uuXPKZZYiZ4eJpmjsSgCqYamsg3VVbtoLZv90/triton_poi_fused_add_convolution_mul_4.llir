; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = lshr i32 %11, 2, !dbg !12
  %15 = and i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = lshr i32 %11, 2, !dbg !12
  %18 = and i32 %17, 8, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %11, 64, !dbg !12
  %21 = lshr exact i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = or disjoint i32 %22, 32, !dbg !12
  %24 = shl i32 %11, 2, !dbg !12
  %25 = and i32 %24, 12, !dbg !12
  %26 = and i32 %24, 60, !dbg !12
  %27 = or disjoint i32 %10, %22, !dbg !13
  %28 = or disjoint i32 %10, %23, !dbg !13
  %29 = or disjoint i32 %10, %26, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 4, !dbg !15
  %.lobit110 = lshr i32 %11, 4, !dbg !16
  %32 = and i32 %.lobit110, 3, !dbg !16
  %33 = lshr exact i32 %20, 4, !dbg !16
  %34 = or disjoint i32 %32, %33, !dbg !16
  %35 = or disjoint i32 %31, %25, !dbg !17
  %36 = or disjoint i32 %31, %34, !dbg !17
  %37 = or disjoint i32 %36, 8, !dbg !17
  %38 = icmp slt i32 %35, 16, !dbg !18
  %39 = icmp slt i32 %36, 16, !dbg !18
  %40 = icmp slt i32 %37, 16, !dbg !18
  %.frozen = freeze i32 %29, !dbg !19
  %41 = sdiv i32 %.frozen, 512, !dbg !19
  %42 = mul i32 %41, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %27, 4, !dbg !21
  %44 = shl i32 %28, 4, !dbg !21
  %45 = add i32 %35, %43, !dbg !22
  %46 = add i32 %35, %44, !dbg !22
  %47 = sext i32 %45 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %46 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %38) #2, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %38) #2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = shl i32 %11, 8, !dbg !24
  %62 = and i32 %61, 768, !dbg !24
  %63 = or disjoint i32 %13, %62, !dbg !24
  %64 = or disjoint i32 %63, %15, !dbg !24
  %65 = or disjoint i32 %64, %18, !dbg !24
  %66 = or disjoint i32 %65, %21, !dbg !24
  %67 = and i32 %24, 508, !dbg !24
  %68 = lshr exact i32 %62, 2, !dbg !24
  %69 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %68, !dbg !24
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %66, !dbg !24
  %71 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !24
  %72 = or disjoint i32 %66, 64, !dbg !24
  %73 = lshr i32 %72, 4, !dbg !24
  %74 = and i32 %73, 268435452, !dbg !24
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !24
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %72, !dbg !24
  %77 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !24
  %78 = or disjoint i32 %66, 128, !dbg !24
  %79 = lshr i32 %78, 4, !dbg !24
  %80 = and i32 %79, 268435452, !dbg !24
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !24
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %78, !dbg !24
  %83 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !24
  %84 = or disjoint i32 %66, 192, !dbg !24
  %85 = lshr i32 %84, 4, !dbg !24
  %86 = and i32 %85, 268435452, !dbg !24
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !24
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %84, !dbg !24
  %89 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !24
  %90 = or disjoint i32 %66, 32, !dbg !24
  %91 = getelementptr float, ptr addrspace(3) %69, i32 %90, !dbg !24
  %92 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !24
  %93 = or disjoint i32 %66, 96, !dbg !24
  %94 = lshr i32 %93, 4, !dbg !24
  %95 = and i32 %94, 268435452, !dbg !24
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !24
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !24
  %99 = or disjoint i32 %66, 160, !dbg !24
  %100 = lshr i32 %99, 4, !dbg !24
  %101 = and i32 %100, 268435452, !dbg !24
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !24
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !24
  %105 = or disjoint i32 %66, 224, !dbg !24
  %106 = lshr i32 %105, 4, !dbg !24
  %107 = and i32 %106, 268435452, !dbg !24
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !24
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %105, !dbg !24
  %110 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %111 = lshr i32 %24, 4, !dbg !24
  %112 = and i32 %111, 28, !dbg !24
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !24
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %67, !dbg !24
  %115 = load float, ptr addrspace(3) %114, align 16, !dbg !24
  %116 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 4, !dbg !24
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !24
  %118 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 8, !dbg !24
  %119 = load float, ptr addrspace(3) %118, align 8, !dbg !24
  %120 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 12, !dbg !24
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !24
  %122 = or disjoint i32 %67, 512, !dbg !24
  %123 = lshr i32 %122, 4, !dbg !24
  %124 = and i32 %123, 60, !dbg !24
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !24
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %122, !dbg !24
  %127 = load float, ptr addrspace(3) %126, align 16, !dbg !24
  %128 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 4, !dbg !24
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !24
  %130 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 8, !dbg !24
  %131 = load float, ptr addrspace(3) %130, align 8, !dbg !24
  %132 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 12, !dbg !24
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !24
  %134 = shl i32 %36, 9, !dbg !25
  %135 = shl i32 %37, 9, !dbg !25
  %136 = shl i32 %41, 13, !dbg !26
  %137 = add i32 %136, %.decomposed, !dbg !27
  %138 = add i32 %137, %134, !dbg !28
  %139 = add i32 %137, %135, !dbg !28
  %140 = sext i32 %138 to i64, !dbg !29
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !29
  %142 = sext i32 %139 to i64, !dbg !29
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !29
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %39) #2, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !30
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = bitcast i32 %147 to float, !dbg !30
  %152 = bitcast i32 %148 to float, !dbg !30
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %40) #2, !dbg !30
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !30
  %158 = bitcast i32 %154 to float, !dbg !30
  %159 = bitcast i32 %155 to float, !dbg !30
  %160 = bitcast i32 %156 to float, !dbg !30
  %161 = bitcast i32 %157 to float, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !31
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !31
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %39) #2, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !32
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !32
  %169 = bitcast i32 %165 to float, !dbg !32
  %170 = bitcast i32 %166 to float, !dbg !32
  %171 = bitcast i32 %167 to float, !dbg !32
  %172 = bitcast i32 %168 to float, !dbg !32
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %40) #2, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !32
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !32
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !32
  %178 = bitcast i32 %174 to float, !dbg !32
  %179 = bitcast i32 %175 to float, !dbg !32
  %180 = bitcast i32 %176 to float, !dbg !32
  %181 = bitcast i32 %177 to float, !dbg !32
  %182 = sext i32 %.decomposed to i64, !dbg !33
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %182, !dbg !33
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 true) #2, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !34
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !34
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !34
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !34
  %189 = bitcast i32 %185 to float, !dbg !34
  %190 = bitcast i32 %186 to float, !dbg !34
  %191 = bitcast i32 %187 to float, !dbg !34
  %192 = bitcast i32 %188 to float, !dbg !34
  %193 = shl nsw i32 %41, 2, !dbg !35
  %194 = or disjoint i32 %193, 3, !dbg !36
  %195 = sext i32 %194 to i64, !dbg !37
  %196 = getelementptr float, ptr addrspace(1) %4, i64 %195, !dbg !37
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !38
  %198 = bitcast i32 %197 to float, !dbg !38
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !38
  %200 = bitcast i32 %199 to float, !dbg !38
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !38
  %202 = bitcast i32 %201 to float, !dbg !38
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !38
  %204 = bitcast i32 %203 to float, !dbg !38
  %205 = fadd float %169, %189, !dbg !39
  %206 = fadd float %170, %190, !dbg !39
  %207 = fadd float %171, %191, !dbg !39
  %208 = fadd float %172, %192, !dbg !39
  %209 = fadd float %178, %189, !dbg !39
  %210 = fadd float %179, %190, !dbg !39
  %211 = fadd float %180, %191, !dbg !39
  %212 = fadd float %181, %192, !dbg !39
  %213 = fmul float %205, %198, !dbg !40
  %214 = fmul float %206, %200, !dbg !40
  %215 = fmul float %207, %202, !dbg !40
  %216 = fmul float %208, %204, !dbg !40
  %217 = fmul float %209, %198, !dbg !40
  %218 = fmul float %210, %200, !dbg !40
  %219 = fmul float %211, %202, !dbg !40
  %220 = fmul float %212, %204, !dbg !40
  %221 = fadd float %213, %149, !dbg !41
  %222 = fadd float %214, %150, !dbg !41
  %223 = fadd float %215, %151, !dbg !41
  %224 = fadd float %216, %152, !dbg !41
  %225 = fadd float %217, %158, !dbg !41
  %226 = fadd float %218, %159, !dbg !41
  %227 = fadd float %219, %160, !dbg !41
  %228 = fadd float %220, %161, !dbg !41
  %229 = fadd float %115, %221, !dbg !42
  %230 = fadd float %117, %222, !dbg !42
  %231 = fadd float %119, %223, !dbg !42
  %232 = fadd float %121, %224, !dbg !42
  %233 = fadd float %127, %225, !dbg !42
  %234 = fadd float %129, %226, !dbg !42
  %235 = fadd float %131, %227, !dbg !42
  %236 = fadd float %133, %228, !dbg !42
  %237 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !43
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %239 = shl i32 %11, 6, !dbg !44
  %240 = and i32 %239, 960, !dbg !44
  %241 = or disjoint i32 %32, %240, !dbg !44
  %242 = or disjoint i32 %241, %33, !dbg !44
  %243 = lshr exact i32 %240, 2, !dbg !44
  %244 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %243, !dbg !44
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !44
  %246 = bitcast float %229 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !44
  %247 = or disjoint i32 %242, 16, !dbg !44
  %248 = lshr i32 %247, 4, !dbg !44
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !44
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %247, !dbg !44
  %251 = bitcast float %230 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !44
  %252 = or disjoint i32 %242, 32, !dbg !44
  %253 = lshr i32 %252, 4, !dbg !44
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !44
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !44
  %256 = bitcast float %231 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !44
  %257 = or disjoint i32 %242, 48, !dbg !44
  %258 = lshr i32 %257, 4, !dbg !44
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !44
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !44
  %261 = bitcast float %232 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !44
  %262 = or disjoint i32 %242, 8, !dbg !44
  %263 = getelementptr float, ptr addrspace(3) %244, i32 %262, !dbg !44
  %264 = bitcast float %233 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !44
  %265 = or disjoint i32 %242, 24, !dbg !44
  %266 = lshr i32 %265, 4, !dbg !44
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !44
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !44
  %269 = bitcast float %234 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !44
  %270 = or disjoint i32 %242, 40, !dbg !44
  %271 = lshr i32 %270, 4, !dbg !44
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !44
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !44
  %274 = bitcast float %235 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !44
  %275 = or disjoint i32 %242, 56, !dbg !44
  %276 = lshr i32 %275, 4, !dbg !44
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !44
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !44
  %279 = bitcast float %236 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %280 = lshr i32 %67, 4, !dbg !44
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !44
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %67, !dbg !44
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !44
  %284 = or disjoint i32 %67, 1, !dbg !44
  %285 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %284, !dbg !44
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !44
  %287 = or disjoint i32 %67, 2, !dbg !44
  %288 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %287, !dbg !44
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !44
  %290 = or disjoint i32 %67, 3, !dbg !44
  %291 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %290, !dbg !44
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !44
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !44
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %122, !dbg !44
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !44
  %296 = or disjoint i32 %67, 513, !dbg !44
  %297 = lshr i32 %296, 4, !dbg !44
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %297, !dbg !44
  %299 = getelementptr inbounds float, ptr addrspace(3) %298, i32 %296, !dbg !44
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !44
  %301 = or disjoint i32 %67, 514, !dbg !44
  %302 = lshr i32 %301, 4, !dbg !44
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !44
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %301, !dbg !44
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !44
  %306 = or disjoint i32 %67, 515, !dbg !44
  %307 = lshr i32 %306, 4, !dbg !44
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %307, !dbg !44
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %306, !dbg !44
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %286, i32 %289, i32 %292, ptr addrspace(1) %237, i1 %38) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %300, i32 %305, i32 %310, ptr addrspace(1) %238, i1 %38) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cevbcvbo2pygphozyqc2m3xhua7bzw3vwrslzyas422wu5ngoh2f.py", directory: "inductor_cache/ev")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_4", linkageName: "triton_poi_fused_add_convolution_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 49, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 54, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 34, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 25, scope: !7)
!44 = !DILocation(line: 41, column: 44, scope: !7)
!45 = !DILocation(line: 41, column: 4, scope: !7)
