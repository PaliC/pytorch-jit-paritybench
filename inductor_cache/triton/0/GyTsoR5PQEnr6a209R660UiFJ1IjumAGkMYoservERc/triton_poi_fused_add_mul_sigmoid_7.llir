; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %15, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 640, !dbg !13
  %24 = or disjoint i32 %18, 768, !dbg !13
  %25 = or disjoint i32 %18, 896, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %27 = icmp slt i32 %26, 512, !dbg !15
  %28 = sdiv i32 %18, 4096, !dbg !16
  %29 = sdiv i32 %19, 4096, !dbg !16
  %30 = sdiv i32 %20, 4096, !dbg !16
  %31 = sdiv i32 %21, 4096, !dbg !16
  %32 = sdiv i32 %22, 4096, !dbg !16
  %33 = sdiv i32 %23, 4096, !dbg !16
  %34 = sdiv i32 %24, 4096, !dbg !16
  %35 = sdiv i32 %25, 4096, !dbg !16
  %.frozen = freeze i32 %16, !dbg !16
  %36 = sdiv i32 %.frozen, 4096, !dbg !16
  %.frozen19 = freeze i32 %17, !dbg !16
  %37 = sdiv i32 %.frozen19, 4096, !dbg !16
  %38 = mul i32 %36, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %38, !dbg !17
  %39 = mul i32 %37, 4096, !dbg !17
  %.decomposed20 = sub i32 %.frozen19, %39, !dbg !17
  %40 = sext i32 %16 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = sext i32 %17 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = bitcast i32 %45 to float, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = bitcast i32 %47 to float, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = bitcast i32 %57 to float, !dbg !19
  %62 = shl i32 %18, 9, !dbg !20
  %63 = shl i32 %19, 9, !dbg !20
  %64 = shl i32 %20, 9, !dbg !20
  %65 = shl i32 %21, 9, !dbg !20
  %66 = shl i32 %22, 9, !dbg !20
  %67 = shl i32 %23, 9, !dbg !20
  %68 = shl i32 %24, 9, !dbg !20
  %69 = shl i32 %25, 9, !dbg !20
  %70 = add i32 %62, %26, !dbg !21
  %71 = add i32 %63, %26, !dbg !21
  %72 = add i32 %64, %26, !dbg !21
  %73 = add i32 %65, %26, !dbg !21
  %74 = add i32 %26, %66, !dbg !21
  %75 = add i32 %26, %67, !dbg !21
  %76 = add i32 %26, %68, !dbg !21
  %77 = add i32 %26, %69, !dbg !21
  %78 = sext i32 %70 to i64, !dbg !22
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !22
  %80 = sext i32 %71 to i64, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !22
  %82 = sext i32 %72 to i64, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !22
  %84 = sext i32 %73 to i64, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !22
  %86 = sext i32 %74 to i64, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !22
  %88 = sext i32 %75 to i64, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !22
  %90 = sext i32 %76 to i64, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !22
  %92 = sext i32 %77 to i64, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %27) #2, !dbg !23
  %97 = bitcast i32 %96 to float, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %27) #2, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %27) #2, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %27) #2, !dbg !23
  %103 = bitcast i32 %102 to float, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %27) #2, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %27) #2, !dbg !23
  %107 = bitcast i32 %106 to float, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %27) #2, !dbg !23
  %109 = bitcast i32 %108 to float, !dbg !23
  %110 = shl nsw i32 %28, 9, !dbg !24
  %111 = shl nsw i32 %29, 9, !dbg !24
  %112 = shl nsw i32 %30, 9, !dbg !24
  %113 = shl nsw i32 %31, 9, !dbg !24
  %114 = shl nsw i32 %32, 9, !dbg !24
  %115 = shl nsw i32 %33, 9, !dbg !24
  %116 = shl nsw i32 %34, 9, !dbg !24
  %117 = shl nsw i32 %35, 9, !dbg !24
  %118 = add i32 %110, %26, !dbg !25
  %119 = add i32 %111, %26, !dbg !25
  %120 = add i32 %112, %26, !dbg !25
  %121 = add i32 %113, %26, !dbg !25
  %122 = add i32 %26, %114, !dbg !25
  %123 = add i32 %26, %115, !dbg !25
  %124 = add i32 %26, %116, !dbg !25
  %125 = add i32 %26, %117, !dbg !25
  %126 = sext i32 %118 to i64, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !26
  %128 = sext i32 %119 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !26
  %130 = sext i32 %120 to i64, !dbg !26
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !26
  %132 = sext i32 %121 to i64, !dbg !26
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !26
  %134 = sext i32 %122 to i64, !dbg !26
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !26
  %136 = sext i32 %123 to i64, !dbg !26
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !26
  %138 = sext i32 %124 to i64, !dbg !26
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !26
  %140 = sext i32 %125 to i64, !dbg !26
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !26
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %27) #2, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %27) #2, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %27) #2, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %27) #2, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %27) #2, !dbg !27
  %151 = bitcast i32 %150 to float, !dbg !27
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %27) #2, !dbg !27
  %153 = bitcast i32 %152 to float, !dbg !27
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %27) #2, !dbg !27
  %155 = bitcast i32 %154 to float, !dbg !27
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %27) #2, !dbg !27
  %157 = bitcast i32 %156 to float, !dbg !27
  %158 = fsub float 0.000000e+00, %49, !dbg !28
  %159 = fsub float 0.000000e+00, %50, !dbg !28
  %160 = fsub float 0.000000e+00, %51, !dbg !28
  %161 = fsub float 0.000000e+00, %52, !dbg !28
  %162 = fsub float 0.000000e+00, %58, !dbg !28
  %163 = fsub float 0.000000e+00, %59, !dbg !28
  %164 = fsub float 0.000000e+00, %60, !dbg !28
  %165 = fsub float 0.000000e+00, %61, !dbg !28
  %166 = fmul float %158, 0x3FF7154760000000, !dbg !32
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #2, !dbg !32
  %168 = fmul float %159, 0x3FF7154760000000, !dbg !32
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #2, !dbg !32
  %170 = fmul float %160, 0x3FF7154760000000, !dbg !32
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #2, !dbg !32
  %172 = fmul float %161, 0x3FF7154760000000, !dbg !32
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #2, !dbg !32
  %174 = fmul float %162, 0x3FF7154760000000, !dbg !32
  %175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %174) #2, !dbg !32
  %176 = fmul float %163, 0x3FF7154760000000, !dbg !32
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #2, !dbg !32
  %178 = fmul float %164, 0x3FF7154760000000, !dbg !32
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #2, !dbg !32
  %180 = fmul float %165, 0x3FF7154760000000, !dbg !32
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #2, !dbg !32
  %182 = fadd float %167, 1.000000e+00, !dbg !33
  %183 = fadd float %169, 1.000000e+00, !dbg !33
  %184 = fadd float %171, 1.000000e+00, !dbg !33
  %185 = fadd float %173, 1.000000e+00, !dbg !33
  %186 = fadd float %175, 1.000000e+00, !dbg !33
  %187 = fadd float %177, 1.000000e+00, !dbg !33
  %188 = fadd float %179, 1.000000e+00, !dbg !33
  %189 = fadd float %181, 1.000000e+00, !dbg !33
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %182) #2, !dbg !34
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %183) #2, !dbg !34
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %184) #2, !dbg !34
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %185) #2, !dbg !34
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #2, !dbg !34
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #2, !dbg !34
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %188) #2, !dbg !34
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %189) #2, !dbg !34
  %.idx = shl nuw nsw i32 %11, 3, !dbg !34
  %198 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !34
  %199 = bitcast float %190 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !34
  %200 = shl nuw nsw i32 %11, 1, !dbg !34
  %201 = or disjoint i32 %200, 2, !dbg !34
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !34
  %203 = bitcast float %191 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !34
  %204 = or disjoint i32 %200, 4, !dbg !34
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !34
  %206 = bitcast float %192 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !34
  %207 = or disjoint i32 %200, 6, !dbg !34
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !34
  %209 = bitcast float %193 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !34
  %210 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !34
  %211 = load float, ptr addrspace(3) %210, align 8, !dbg !34
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !34
  %212 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !34
  %213 = load float, ptr addrspace(3) %212, align 8, !dbg !34
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !34
  %214 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !34
  %215 = load float, ptr addrspace(3) %214, align 8, !dbg !34
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !34
  %216 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !34
  %217 = load float, ptr addrspace(3) %216, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %218 = bitcast float %194 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %218, i1 true) #2, !dbg !34
  %219 = bitcast float %195 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %219, i1 true) #2, !dbg !34
  %220 = bitcast float %196 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %220, i1 true) #2, !dbg !34
  %221 = bitcast float %197 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %221, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %222 = load float, ptr addrspace(3) %210, align 8, !dbg !34
  %223 = load float, ptr addrspace(3) %212, align 8, !dbg !34
  %224 = load float, ptr addrspace(3) %214, align 8, !dbg !34
  %225 = load float, ptr addrspace(3) %216, align 8, !dbg !34
  %226 = fmul float %211, %95, !dbg !35
  %227 = fmul float %213, %97, !dbg !35
  %228 = fmul float %215, %99, !dbg !35
  %229 = fmul float %217, %101, !dbg !35
  %230 = fmul float %222, %103, !dbg !35
  %231 = fmul float %223, %105, !dbg !35
  %232 = fmul float %224, %107, !dbg !35
  %233 = fmul float %225, %109, !dbg !35
  %234 = fmul float %95, %143, !dbg !36
  %235 = fmul float %97, %145, !dbg !36
  %236 = fmul float %99, %147, !dbg !36
  %237 = fmul float %101, %149, !dbg !36
  %238 = fmul float %103, %151, !dbg !36
  %239 = fmul float %105, %153, !dbg !36
  %240 = fmul float %107, %155, !dbg !36
  %241 = fmul float %109, %157, !dbg !36
  %242 = fadd float %234, %226, !dbg !37
  %243 = fadd float %235, %227, !dbg !37
  %244 = fadd float %236, %228, !dbg !37
  %245 = fadd float %237, %229, !dbg !37
  %246 = fadd float %238, %230, !dbg !37
  %247 = fadd float %239, %231, !dbg !37
  %248 = fadd float %240, %232, !dbg !37
  %249 = fadd float %241, %233, !dbg !37
  %250 = shl i32 %26, 12, !dbg !38
  %251 = add i32 %.decomposed, %250, !dbg !39
  %252 = shl i32 %36, 21, !dbg !40
  %253 = shl i32 %37, 21, !dbg !40
  %254 = add i32 %251, %252, !dbg !41
  %255 = add i32 %253, %.decomposed20, !dbg !39
  %256 = add i32 %255, %250, !dbg !41
  %257 = sext i32 %254 to i64, !dbg !42
  %258 = getelementptr float, ptr addrspace(1) %3, i64 %257, !dbg !42
  %259 = sext i32 %256 to i64, !dbg !42
  %260 = getelementptr float, ptr addrspace(1) %3, i64 %259, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %262 = bitcast float %242 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #2, !dbg !43
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %264 = bitcast float %243 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !43
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %266 = bitcast float %244 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !43
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !43
  %268 = bitcast float %245 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !43
  %270 = load <4 x i32>, ptr addrspace(3) %269, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %271 = bitcast float %246 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %271, i1 true) #2, !dbg !43
  %272 = bitcast float %247 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %272, i1 true) #2, !dbg !43
  %273 = bitcast float %248 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %273, i1 true) #2, !dbg !43
  %274 = bitcast float %249 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %274, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %275 = load <4 x i32>, ptr addrspace(3) %269, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %270, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %270, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %270, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %270, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %258, i1 %27) #2, !dbg !43
  %.extract15 = extractelement <4 x i32> %275, i64 0, !dbg !43
  %.extract16 = extractelement <4 x i32> %275, i64 1, !dbg !43
  %.extract17 = extractelement <4 x i32> %275, i64 2, !dbg !43
  %.extract18 = extractelement <4 x i32> %275, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %260, i1 %27) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 35, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 35, scope: !7)
!39 = !DILocation(line: 39, column: 30, scope: !7)
!40 = !DILocation(line: 39, column: 48, scope: !7)
!41 = !DILocation(line: 39, column: 40, scope: !7)
!42 = !DILocation(line: 39, column: 25, scope: !7)
!43 = !DILocation(line: 39, column: 59, scope: !7)
!44 = !DILocation(line: 39, column: 4, scope: !7)
