#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_mul_sigmoid_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x1024xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x1024xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<1x1024xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<2097152> : tensor<1x1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x1024xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x1024xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x1024xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x1024xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x1024xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x1024xi32, #blocked1> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.cmpi slt, %10, %c512_i32 : i32 loc(#loc7)
    %12 = arith.divsi %9, %cst_1 : tensor<1x1024xi32, #blocked1> loc(#loc8)
    %13 = arith.divsi %8, %cst_2 : tensor<1x1024xi32, #blocked> loc(#loc8)
    %14 = arith.remsi %8, %cst_2 : tensor<1x1024xi32, #blocked> loc(#loc9)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %16 = tt.addptr %15, %8 : tensor<1x1024x!tt.ptr<f32>, #blocked>, tensor<1x1024xi32, #blocked> loc(#loc10)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc11)
    %18 = arith.muli %9, %cst_3 : tensor<1x1024xi32, #blocked1> loc(#loc12)
    %19 = tt.splat %10 : i32 -> tensor<1x1024xi32, #blocked1> loc(#loc13)
    %20 = arith.addi %19, %18 : tensor<1x1024xi32, #blocked1> loc(#loc13)
    %21 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %22 = tt.addptr %21, %20 : tensor<1x1024x!tt.ptr<f32>, #blocked1>, tensor<1x1024xi32, #blocked1> loc(#loc14)
    %23 = tt.splat %11 : i1 -> tensor<1x1024xi1, #blocked1> loc(#loc15)
    %24 = tt.load %22, %23 evictionPolicy = evict_last : tensor<1x1024x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %25 = arith.muli %12, %cst_3 : tensor<1x1024xi32, #blocked1> loc(#loc16)
    %26 = arith.addi %19, %25 : tensor<1x1024xi32, #blocked1> loc(#loc17)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %28 = tt.addptr %27, %26 : tensor<1x1024x!tt.ptr<f32>, #blocked1>, tensor<1x1024xi32, #blocked1> loc(#loc18)
    %29 = tt.load %28, %23 evictionPolicy = evict_last : tensor<1x1024x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %30 = arith.subf %cst_0, %17 : tensor<1x1024xf32, #blocked> loc(#loc35)
    %31 = math.exp %30 : tensor<1x1024xf32, #blocked> loc(#loc36)
    %32 = arith.addf %31, %cst : tensor<1x1024xf32, #blocked> loc(#loc37)
    %33 = arith.divf %cst, %32 : tensor<1x1024xf32, #blocked> loc(#loc38)
    %34 = triton_gpu.convert_layout %33 {fastmath = #arith.fastmath<none>} : tensor<1x1024xf32, #blocked> -> tensor<1x1024xf32, #blocked1> loc(#loc38)
    %35 = arith.mulf %34, %24 : tensor<1x1024xf32, #blocked1> loc(#loc25)
    %36 = arith.mulf %29, %24 : tensor<1x1024xf32, #blocked1> loc(#loc26)
    %37 = arith.addf %35, %36 : tensor<1x1024xf32, #blocked1> loc(#loc27)
    %38 = arith.muli %10, %c4096_i32 : i32 loc(#loc28)
    %39 = tt.splat %38 : i32 -> tensor<1x1024xi32, #blocked> loc(#loc29)
    %40 = arith.addi %14, %39 : tensor<1x1024xi32, #blocked> loc(#loc29)
    %41 = arith.muli %13, %cst_4 : tensor<1x1024xi32, #blocked> loc(#loc30)
    %42 = arith.addi %40, %41 : tensor<1x1024xi32, #blocked> loc(#loc31)
    %43 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc32)
    %44 = tt.addptr %43, %42 : tensor<1x1024x!tt.ptr<f32>, #blocked>, tensor<1x1024xi32, #blocked> loc(#loc32)
    %45 = triton_gpu.convert_layout %37 : tensor<1x1024xf32, #blocked1> -> tensor<1x1024xf32, #blocked> loc(#loc33)
    %46 = tt.splat %11 : i1 -> tensor<1x1024xi1, #blocked> loc(#loc33)
    tt.store %44, %45, %46 : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":22:28)
#loc3 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":22:33)
#loc4 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":23:44)
#loc5 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":23:23)
#loc6 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":25:28)
#loc7 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":27:21)
#loc8 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":30:19)
#loc9 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":31:19)
#loc10 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":32:30)
#loc11 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":32:35)
#loc12 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:39)
#loc13 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:35)
#loc14 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:30)
#loc15 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:44)
#loc16 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:39)
#loc17 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:35)
#loc18 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:30)
#loc19 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:44)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc21 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":35:22)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc25 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":36:18)
#loc26 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":37:18)
#loc27 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":38:18)
#loc28 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:35)
#loc29 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:30)
#loc30 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:48)
#loc31 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:40)
#loc32 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:25)
#loc33 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:59)
#loc34 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:4)
#loc35 = loc(callsite(#loc20 at #loc21))
#loc36 = loc(callsite(#loc22 at #loc21))
#loc37 = loc(callsite(#loc23 at #loc21))
#loc38 = loc(callsite(#loc24 at #loc21))
