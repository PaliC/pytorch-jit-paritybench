#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":24:0)
#loc1 = loc(unknown)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cumsum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":24:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":24:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":24:0), %arg3: i32 loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":24:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<8x4xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<8x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %9 = arith.remsi %5, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc8)
    %10 = arith.divsi %5, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc9)
    %11 = arith.muli %8, %cst_0 : tensor<1x4xi32, #blocked> loc(#loc10)
    %12 = tt.broadcast %9 : tensor<8x1xi32, #blocked> -> tensor<8x4xi32, #blocked> loc(#loc11)
    %13 = tt.broadcast %11 : tensor<1x4xi32, #blocked> -> tensor<8x4xi32, #blocked> loc(#loc11)
    %14 = arith.addi %12, %13 : tensor<8x4xi32, #blocked> loc(#loc11)
    %15 = arith.muli %10, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc12)
    %16 = tt.broadcast %15 : tensor<8x1xi32, #blocked> -> tensor<8x4xi32, #blocked> loc(#loc13)
    %17 = arith.addi %14, %16 : tensor<8x4xi32, #blocked> loc(#loc13)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x4x!tt.ptr<f32>, #blocked> loc(#loc14)
    %19 = tt.addptr %18, %17 : tensor<8x4x!tt.ptr<f32>, #blocked>, tensor<8x4xi32, #blocked> loc(#loc14)
    %20 = tt.broadcast %6 : tensor<8x1xi1, #blocked> -> tensor<8x4xi1, #blocked> loc(#loc15)
    %21 = tt.load %19, %20, %cst : tensor<8x4x!tt.ptr<f32>, #blocked> loc(#loc15)
    %22 = "tt.scan"(%21) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg4: f32 loc(unknown), %arg5: f32 loc(unknown)):
      %25 = arith.addf %arg4, %arg5 : f32 loc(#loc21)
      tt.scan.return %25 : f32 loc(#loc16)
    }) : (tensor<8x4xf32, #blocked>) -> tensor<8x4xf32, #blocked> loc(#loc16)
    %23 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x4x!tt.ptr<f32>, #blocked> loc(#loc18)
    %24 = tt.addptr %23, %17 : tensor<8x4x!tt.ptr<f32>, #blocked>, tensor<8x4xi32, #blocked> loc(#loc18)
    tt.store %24, %22, %20 : tensor<8x4x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":28:28)
#loc3 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":28:33)
#loc4 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":29:44)
#loc5 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":29:23)
#loc6 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":30:21)
#loc7 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":31:34)
#loc8 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":35:19)
#loc9 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":36:19)
#loc10 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:37)
#loc11 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:35)
#loc12 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:45)
#loc13 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:42)
#loc14 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:30)
#loc15 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":37:50)
#loc16 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":40:44)
#loc17 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":13:20)
#loc18 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":41:25)
#loc19 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":41:51)
#loc20 = loc("inductor_cache/wg/cwgn4d7iayzsmxegmyjmhp5j2xhe4du7jxju6pnvgbt3teswcxwf.py":41:4)
#loc21 = loc(callsite(#loc17 at #loc16))
