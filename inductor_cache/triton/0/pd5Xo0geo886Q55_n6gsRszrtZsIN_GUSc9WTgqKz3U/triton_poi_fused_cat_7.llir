; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 16, !dbg !14
  %17 = srem i32 %16, 64, !dbg !15
  %18 = srem i32 %15, 4, !dbg !16
  %19 = sdiv i32 %14, 4, !dbg !17
  %20 = sdiv i32 %14, 1024, !dbg !18
  %21 = mul i32 %16, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = icmp slt i32 %17, 32, !dbg !20
  %23 = shl nsw i32 %17, 6, !dbg !21
  %24 = shl i32 %20, 11, !dbg !22
  %25 = shl nsw i32 %18, 5, !dbg !23
  %26 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !16
  %27 = insertelement <2 x i32> %26, i32 %19, i64 1, !dbg !16
  %28 = srem <2 x i32> %27, splat (i32 4), !dbg !16
  %29 = extractelement <2 x i32> %28, i64 1, !dbg !24
  %30 = shl nsw i32 %29, 3, !dbg !24
  %31 = extractelement <2 x i32> %28, i64 0, !dbg !25
  %32 = add i32 %24, %31, !dbg !25
  %33 = add i32 %32, %30, !dbg !26
  %34 = add i32 %33, %23, !dbg !27
  %35 = sext i32 %34 to i64, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !28
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !29
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !29
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !29
  %40 = bitcast i32 %38 to float, !dbg !29
  %41 = bitcast i32 %39 to float, !dbg !29
  %42 = shl nsw <2 x i32> %28, <i32 5, i32 8>, !dbg !23
  %43 = add i32 %17, %24, !dbg !30
  %44 = extractelement <2 x i32> %42, i64 0, !dbg !31
  %45 = add i32 %43, %44, !dbg !31
  %46 = extractelement <2 x i32> %42, i64 1, !dbg !32
  %47 = add i32 %45, %46, !dbg !32
  %48 = add i32 %43, %25, !dbg !31
  %49 = add i32 %48, %46, !dbg !32
  %50 = sext i32 %47 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !33
  %52 = sext i32 %49 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %22, i32 0, i1 %22) #1, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %22, i32 0, i1 %22) #1, !dbg !34
  %56 = sext i32 %17 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %22, i32 0, i1 %22) #1, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %22, i32 0, i1 %22) #1, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %22, i32 0, i1 %22) #1, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %22, i32 0, i1 %22) #1, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %22, i32 0, i1 %22) #1, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %22, i32 0, i1 %22) #1, !dbg !40
  %67 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !34
  %68 = insertelement <2 x i32> %67, i32 %62, i64 1, !dbg !34
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !34
  %70 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !36
  %71 = insertelement <2 x i32> %70, i32 %65, i64 1, !dbg !36
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !36
  %73 = fadd <2 x float> %69, %72, !dbg !41
  %74 = extractelement <2 x float> %73, i64 0, !dbg !42
  %75 = fadd float %74, %40, !dbg !42
  %76 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !34
  %77 = insertelement <2 x i32> %76, i32 %63, i64 1, !dbg !34
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !34
  %79 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !36
  %80 = insertelement <2 x i32> %79, i32 %66, i64 1, !dbg !36
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !36
  %82 = fadd <2 x float> %78, %81, !dbg !41
  %83 = extractelement <2 x float> %82, i64 0, !dbg !42
  %84 = fadd float %83, %41, !dbg !42
  %85 = extractelement <2 x float> %73, i64 1, !dbg !43
  %86 = fadd float %75, %85, !dbg !43
  %87 = extractelement <2 x float> %82, i64 1, !dbg !43
  %88 = fadd float %84, %87, !dbg !43
  %89 = icmp sgt i32 %17, 31, !dbg !44
  %90 = shl nsw i32 %17, 4, !dbg !45
  %91 = shl nsw i32 %20, 9, !dbg !46
  %92 = add nsw i32 %.decomposed, -512, !dbg !45
  %93 = add nsw i32 %92, %91, !dbg !47
  %94 = add nsw i32 %93, %90, !dbg !48
  %95 = sext i32 %94 to i64, !dbg !49
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !49
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #1, !dbg !50
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !50
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !50
  %100 = bitcast i32 %98 to float, !dbg !50
  %101 = bitcast i32 %99 to float, !dbg !50
  %102 = fsub float 0.000000e+00, %100, !dbg !51
  %103 = fsub float 0.000000e+00, %101, !dbg !51
  %104 = fmul float %102, 0x3FF7154760000000, !dbg !55
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #1, !dbg !55
  %106 = fmul float %103, 0x3FF7154760000000, !dbg !55
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #1, !dbg !55
  %108 = fadd float %105, 1.000000e+00, !dbg !56
  %109 = fadd float %107, 1.000000e+00, !dbg !56
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #1, !dbg !57
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #1, !dbg !57
  %112 = fmul float %110, %100, !dbg !58
  %113 = fmul float %111, %101, !dbg !58
  %114 = select i1 %22, float %86, float %112, !dbg !59
  %115 = select i1 %22, float %88, float %113, !dbg !59
  %116 = sext i32 %14 to i64, !dbg !60
  %117 = getelementptr float, ptr addrspace(1) %6, i64 %116, !dbg !60
  %118 = bitcast float %114 to i32, !dbg !61
  %119 = bitcast float %115 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 true) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clwrmiekskja5bwoicu7sdb6clcoeg2dgkjpndb5ctzdy2rd4phr.py", directory: "inductor_cache/lw")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 46, scope: !7)
!22 = !DILocation(line: 35, column: 57, scope: !7)
!23 = !DILocation(line: 36, column: 33, scope: !7)
!24 = !DILocation(line: 35, column: 37, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 42, scope: !7)
!27 = !DILocation(line: 35, column: 52, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 62, scope: !7)
!30 = !DILocation(line: 36, column: 38, scope: !7)
!31 = !DILocation(line: 36, column: 47, scope: !7)
!32 = !DILocation(line: 36, column: 58, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 64, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 65, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 40, scope: !7)
!46 = !DILocation(line: 49, column: 58, scope: !7)
!47 = !DILocation(line: 49, column: 36, scope: !7)
!48 = !DILocation(line: 49, column: 54, scope: !7)
!49 = !DILocation(line: 49, column: 31, scope: !7)
!50 = !DILocation(line: 49, column: 63, scope: !7)
!51 = !DILocation(line: 47, column: 30, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!54 = !DILocation(line: 50, column: 23, scope: !7)
!55 = !DILocation(line: 47, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 47, column: 20, scope: !52, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 16, scope: !52, inlinedAt: !54)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 55, column: 25, scope: !7)
!61 = !DILocation(line: 55, column: 37, scope: !7)
!62 = !DILocation(line: 55, column: 4, scope: !7)
