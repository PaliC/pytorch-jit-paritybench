; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mul_rsub_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl i32 %8, 2, !dbg !10
  %12 = and i32 %11, 12, !dbg !10
  %13 = and i32 %11, 252, !dbg !10
  %14 = zext nneg i32 %13 to i64, !dbg !11
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !11
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !12
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = bitcast i32 %20 to float, !dbg !12
  %25 = shl i32 %8, 4, !dbg !13
  %26 = and i32 %25, 192, !dbg !13
  %27 = or disjoint i32 %12, %26, !dbg !14
  %28 = zext nneg i32 %27 to i64, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = bitcast i32 %33 to float, !dbg !16
  %38 = bitcast i32 %34 to float, !dbg !16
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !17
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = bitcast i32 %42 to float, !dbg !18
  %47 = bitcast i32 %43 to float, !dbg !18
  %48 = bitcast i32 %44 to float, !dbg !18
  %49 = fadd float %21, %22, !dbg !19
  %50 = fadd float %49, %23, !dbg !19
  %51 = fadd float %50, %24, !dbg !19
  %52 = bitcast float %51 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fadd float %51, %54, !dbg !19
  %56 = bitcast float %55 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fadd float %55, %58, !dbg !19
  %60 = bitcast float %59 to i32, !dbg !24
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = fadd float %59, %62, !dbg !19
  %64 = bitcast float %63 to i32, !dbg !24
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !24
  %66 = bitcast i32 %65 to float, !dbg !24
  %67 = fadd float %63, %66, !dbg !19
  %68 = bitcast float %67 to i32, !dbg !24
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = fadd float %67, %70, !dbg !19
  %72 = icmp eq i32 %9, 0, !dbg !24
  %73 = and i32 %10, 1, !dbg !24
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %75 = bitcast float %71 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 %72) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %76 = icmp slt i32 %8, 2, !dbg !24
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !24
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #3, !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = fadd float %79, %81, !dbg !19
  %83 = and i32 %8, 1, !dbg !24
  %84 = icmp eq i32 %83, 0, !dbg !24
  %85 = and i1 %76, %84, !dbg !24
  %86 = bitcast float %82 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %86, i1 %85) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %88 = fadd float %87, 0.000000e+00, !dbg !25
  %89 = fsub float %35, %45, !dbg !29
  %90 = fsub float %36, %46, !dbg !29
  %91 = fsub float %37, %47, !dbg !29
  %92 = fsub float %38, %48, !dbg !29
  %93 = tail call float @llvm.fabs.f32(float %89), !dbg !30
  %94 = tail call float @llvm.fabs.f32(float %90), !dbg !30
  %95 = tail call float @llvm.fabs.f32(float %91), !dbg !30
  %96 = tail call float @llvm.fabs.f32(float %92), !dbg !30
  %97 = fmul float %93, %21, !dbg !31
  %98 = fmul float %94, %22, !dbg !31
  %99 = fmul float %95, %23, !dbg !31
  %100 = fmul float %96, %24, !dbg !31
  %101 = fsub float 1.000000e+00, %21, !dbg !32
  %102 = fsub float 1.000000e+00, %22, !dbg !32
  %103 = fsub float 1.000000e+00, %23, !dbg !32
  %104 = fsub float 1.000000e+00, %24, !dbg !32
  %105 = fmul float %101, %93, !dbg !33
  %106 = fmul float %102, %94, !dbg !33
  %107 = fmul float %103, %95, !dbg !33
  %108 = fmul float %104, %96, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !34
  %110 = bitcast float %97 to i32, !dbg !35
  %111 = bitcast float %98 to i32, !dbg !35
  %112 = bitcast float %99 to i32, !dbg !35
  %113 = bitcast float %100 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %110, i32 %111, i32 %112, i32 %113, ptr addrspace(1) %109, i1 true) #3, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %14, !dbg !36
  %115 = bitcast float %105 to i32, !dbg !37
  %116 = bitcast float %106 to i32, !dbg !37
  %117 = bitcast float %107 to i32, !dbg !37
  %118 = bitcast float %108 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %114, i1 true) #3, !dbg !37
  %urem = and i32 %8, 63, !dbg !38
  %119 = icmp eq i32 %urem, 0, !dbg !38
  %120 = bitcast float %88 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %3, i1 %119) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjn7olwfmajd34uonqcidejnt4duqigihxoozdfpz6y6y723w55a.py", directory: "inductor_cache/jn")
!4 = !{ptr @triton_per_fused_abs_mul_rsub_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mul_rsub_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mul_rsub_sub_sum_0", linkageName: "triton_per_fused_abs_mul_rsub_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 33, column: 30, scope: !7)
!12 = !DILocation(line: 33, column: 35, scope: !7)
!13 = !DILocation(line: 34, column: 38, scope: !7)
!14 = !DILocation(line: 34, column: 35, scope: !7)
!15 = !DILocation(line: 34, column: 30, scope: !7)
!16 = !DILocation(line: 34, column: 43, scope: !7)
!17 = !DILocation(line: 35, column: 30, scope: !7)
!18 = !DILocation(line: 35, column: 35, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 37, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 37, column: 44, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 23, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 25, scope: !7)
!35 = !DILocation(line: 44, column: 63, scope: !7)
!36 = !DILocation(line: 45, column: 25, scope: !7)
!37 = !DILocation(line: 45, column: 64, scope: !7)
!38 = !DILocation(line: 46, column: 59, scope: !7)
!39 = !DILocation(line: 46, column: 4, scope: !7)
