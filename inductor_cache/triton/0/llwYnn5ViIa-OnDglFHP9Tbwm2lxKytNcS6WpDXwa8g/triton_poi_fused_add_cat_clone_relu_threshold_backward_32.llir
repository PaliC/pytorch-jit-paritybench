; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = lshr i32 %18, 2, !dbg !12
  %20 = and i32 %19, 3, !dbg !12
  %21 = and i32 %18, 16, !dbg !12
  %22 = lshr exact i32 %21, 2, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !12
  %24 = and i32 %18, 32, !dbg !12
  %25 = lshr exact i32 %24, 2, !dbg !12
  %26 = or disjoint i32 %23, %25, !dbg !12
  %27 = and i32 %18, 64, !dbg !12
  %28 = lshr exact i32 %27, 2, !dbg !12
  %29 = or disjoint i32 %26, %28, !dbg !12
  %30 = and i32 %18, 128, !dbg !12
  %31 = lshr exact i32 %30, 2, !dbg !12
  %32 = or disjoint i32 %29, %31, !dbg !12
  %33 = xor i32 %32, 64, !dbg !12
  %34 = xor i32 %32, 128, !dbg !12
  %35 = xor i32 %32, 192, !dbg !12
  %36 = shl i32 %18, 4, !dbg !12
  %37 = and i32 %36, 240, !dbg !12
  %38 = or disjoint i32 %17, %32, !dbg !13
  %39 = add nuw i32 %17, %33, !dbg !13
  %40 = add nuw i32 %17, %34, !dbg !13
  %41 = add nuw i32 %17, %35, !dbg !13
  %42 = or disjoint i32 %17, %37, !dbg !13
  %43 = or disjoint i32 %42, 4, !dbg !13
  %44 = or disjoint i32 %42, 8, !dbg !13
  %45 = or disjoint i32 %42, 12, !dbg !13
  %46 = icmp slt i32 %38, 512, !dbg !14
  %47 = icmp slt i32 %39, 512, !dbg !14
  %48 = icmp slt i32 %40, 512, !dbg !14
  %49 = icmp slt i32 %41, 512, !dbg !14
  %50 = icmp slt i32 %42, 512, !dbg !14
  %51 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %52 = shl i32 %51, 4, !dbg !16
  %53 = shl i32 %18, 2, !dbg !17
  %54 = and i32 %53, 12, !dbg !17
  %.lobit1 = lshr exact i32 %21, 4, !dbg !17
  %55 = lshr exact i32 %24, 4, !dbg !17
  %56 = or disjoint i32 %.lobit1, %55, !dbg !17
  %57 = lshr exact i32 %27, 4, !dbg !17
  %58 = or disjoint i32 %56, %57, !dbg !17
  %59 = lshr exact i32 %30, 4, !dbg !17
  %60 = or disjoint i32 %58, %59, !dbg !17
  %61 = or disjoint i32 %52, %54, !dbg !18
  %62 = or disjoint i32 %60, %52, !dbg !18
  %63 = icmp slt i32 %61, 64, !dbg !19
  %64 = icmp slt i32 %62, 64, !dbg !19
  %.frozen = freeze i32 %42, !dbg !20
  %65 = sdiv i32 %.frozen, 128, !dbg !20
  %66 = mul i32 %65, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %66, !dbg !21
  %67 = srem i32 %43, 128, !dbg !21
  %68 = srem i32 %44, 128, !dbg !21
  %69 = srem i32 %45, 128, !dbg !21
  %70 = shl i32 %38, 6, !dbg !22
  %71 = shl i32 %39, 6, !dbg !22
  %72 = shl i32 %40, 6, !dbg !22
  %73 = shl i32 %41, 6, !dbg !22
  %74 = add i32 %61, %70, !dbg !23
  %75 = add i32 %61, %71, !dbg !23
  %76 = add i32 %61, %72, !dbg !23
  %77 = add i32 %61, %73, !dbg !23
  %78 = sext i32 %74 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %10, i64 %78, !dbg !24
  %80 = sext i32 %75 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %10, i64 %80, !dbg !24
  %82 = sext i32 %76 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %10, i64 %82, !dbg !24
  %84 = sext i32 %77 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %10, i64 %84, !dbg !24
  %86 = and i1 %46, %63, !dbg !25
  %87 = and i1 %47, %63, !dbg !25
  %88 = and i1 %48, %63, !dbg !25
  %89 = and i1 %49, %63, !dbg !25
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %86) #4, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %87) #4, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !26
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %88) #4, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !26
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %89) #4, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !26
  %110 = shl i32 %18, 10, !dbg !26
  %111 = and i32 %110, 3072, !dbg !26
  %112 = or disjoint i32 %20, %111, !dbg !26
  %113 = or disjoint i32 %112, %22, !dbg !26
  %114 = or disjoint i32 %113, %25, !dbg !26
  %115 = or disjoint i32 %28, %114, !dbg !26
  %116 = or disjoint i32 %115, %31, !dbg !26
  %117 = and i32 %36, 4080, !dbg !26
  %118 = lshr exact i32 %111, 2, !dbg !26
  %119 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %116, !dbg !26
  %121 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !26
  %122 = xor i32 %116, 256, !dbg !26
  %123 = lshr i32 %122, 4, !dbg !26
  %124 = and i32 %123, 268435440, !dbg !26
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %122, !dbg !26
  %127 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #4, !dbg !26
  %128 = xor i32 %116, 512, !dbg !26
  %129 = lshr i32 %128, 4, !dbg !26
  %130 = and i32 %129, 268435440, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !26
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !26
  %133 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !26
  %134 = xor i32 %116, 768, !dbg !26
  %135 = lshr i32 %134, 4, !dbg !26
  %136 = and i32 %135, 268435440, !dbg !26
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %134, !dbg !26
  %139 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !26
  %140 = xor i32 %116, 64, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) %119, i32 %140, !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !26
  %143 = xor i32 %116, 320, !dbg !26
  %144 = lshr i32 %143, 4, !dbg !26
  %145 = and i32 %144, 268435440, !dbg !26
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !26
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !26
  %148 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !26
  %149 = xor i32 %116, 576, !dbg !26
  %150 = lshr i32 %149, 4, !dbg !26
  %151 = and i32 %150, 268435440, !dbg !26
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %149, !dbg !26
  %154 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !26
  %155 = xor i32 %116, 832, !dbg !26
  %156 = lshr i32 %155, 4, !dbg !26
  %157 = and i32 %156, 268435440, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %155, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !26
  %161 = xor i32 %116, 128, !dbg !26
  %162 = getelementptr float, ptr addrspace(3) %119, i32 %161, !dbg !26
  %163 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #4, !dbg !26
  %164 = xor i32 %116, 384, !dbg !26
  %165 = lshr i32 %164, 4, !dbg !26
  %166 = and i32 %165, 268435440, !dbg !26
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !26
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %164, !dbg !26
  %169 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #4, !dbg !26
  %170 = xor i32 %116, 640, !dbg !26
  %171 = lshr i32 %170, 4, !dbg !26
  %172 = and i32 %171, 268435440, !dbg !26
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !26
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !26
  %175 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #4, !dbg !26
  %176 = xor i32 %116, 896, !dbg !26
  %177 = lshr i32 %176, 4, !dbg !26
  %178 = and i32 %177, 268435440, !dbg !26
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !26
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !26
  %181 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !26
  %182 = xor i32 %116, 192, !dbg !26
  %183 = getelementptr float, ptr addrspace(3) %119, i32 %182, !dbg !26
  %184 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #4, !dbg !26
  %185 = xor i32 %116, 448, !dbg !26
  %186 = lshr i32 %185, 4, !dbg !26
  %187 = and i32 %186, 268435440, !dbg !26
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %185, !dbg !26
  %190 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #4, !dbg !26
  %191 = xor i32 %116, 704, !dbg !26
  %192 = lshr i32 %191, 4, !dbg !26
  %193 = and i32 %192, 268435440, !dbg !26
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !26
  %196 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #4, !dbg !26
  %197 = xor i32 %116, 960, !dbg !26
  %198 = lshr i32 %197, 4, !dbg !26
  %199 = and i32 %198, 268435440, !dbg !26
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !26
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %197, !dbg !26
  %202 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %203 = and i32 %18, 240, !dbg !26
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !26
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %117, !dbg !26
  %206 = load <4 x float>, ptr addrspace(3) %205, align 16, !dbg !26
  %207 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 16, !dbg !26
  %208 = load <4 x float>, ptr addrspace(3) %207, align 16, !dbg !26
  %209 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 32, !dbg !26
  %210 = load <4 x float>, ptr addrspace(3) %209, align 16, !dbg !26
  %211 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 48, !dbg !26
  %212 = load <4 x float>, ptr addrspace(3) %211, align 16, !dbg !26
  %213 = icmp slt i32 %.decomposed, 64, !dbg !27
  %214 = shl i32 %62, 6, !dbg !28
  %215 = shl i32 %65, 12, !dbg !29
  %216 = add i32 %214, %215, !dbg !30
  %217 = add i32 %216, %.decomposed, !dbg !31
  %218 = add i32 %216, %67, !dbg !31
  %219 = add i32 %216, %68, !dbg !31
  %220 = add i32 %216, %69, !dbg !31
  %221 = sext i32 %217 to i64, !dbg !32
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !32
  %223 = sext i32 %218 to i64, !dbg !32
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !32
  %225 = sext i32 %219 to i64, !dbg !32
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !32
  %227 = sext i32 %220 to i64, !dbg !32
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !32
  %229 = and i1 %213, %64, !dbg !33
  %230 = and i1 %50, %229, !dbg !34
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %222, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !35
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %224, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !35
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !35
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !35
  %235 = sext i32 %.decomposed to i64, !dbg !36
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !36
  %237 = sext i32 %67 to i64, !dbg !36
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !36
  %239 = sext i32 %68 to i64, !dbg !36
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !36
  %241 = sext i32 %69 to i64, !dbg !36
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !36
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !37
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %238, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !37
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !37
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !37
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !38
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !38
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !38
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !38
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !39
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !39
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !39
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !39
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !39
  %256 = bitcast i32 %252 to float, !dbg !39
  %257 = bitcast i32 %253 to float, !dbg !39
  %258 = bitcast i32 %254 to float, !dbg !39
  %259 = bitcast i32 %255 to float, !dbg !39
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %248, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !39
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !39
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !39
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !39
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !39
  %265 = bitcast i32 %261 to float, !dbg !39
  %266 = bitcast i32 %262 to float, !dbg !39
  %267 = bitcast i32 %263 to float, !dbg !39
  %268 = bitcast i32 %264 to float, !dbg !39
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !39
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !39
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !39
  %274 = bitcast i32 %270 to float, !dbg !39
  %275 = bitcast i32 %271 to float, !dbg !39
  %276 = bitcast i32 %272 to float, !dbg !39
  %277 = bitcast i32 %273 to float, !dbg !39
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !39
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !39
  %283 = bitcast i32 %279 to float, !dbg !39
  %284 = bitcast i32 %280 to float, !dbg !39
  %285 = bitcast i32 %281 to float, !dbg !39
  %286 = bitcast i32 %282 to float, !dbg !39
  %287 = fadd float %256, 0x3EE4F8B580000000, !dbg !40
  %288 = fadd float %257, 0x3EE4F8B580000000, !dbg !40
  %289 = fadd float %258, 0x3EE4F8B580000000, !dbg !40
  %290 = fadd float %259, 0x3EE4F8B580000000, !dbg !40
  %291 = fadd float %265, 0x3EE4F8B580000000, !dbg !40
  %292 = fadd float %266, 0x3EE4F8B580000000, !dbg !40
  %293 = fadd float %267, 0x3EE4F8B580000000, !dbg !40
  %294 = fadd float %268, 0x3EE4F8B580000000, !dbg !40
  %295 = fadd float %274, 0x3EE4F8B580000000, !dbg !40
  %296 = fadd float %275, 0x3EE4F8B580000000, !dbg !40
  %297 = fadd float %276, 0x3EE4F8B580000000, !dbg !40
  %298 = fadd float %277, 0x3EE4F8B580000000, !dbg !40
  %299 = fadd float %283, 0x3EE4F8B580000000, !dbg !40
  %300 = fadd float %284, 0x3EE4F8B580000000, !dbg !40
  %301 = fadd float %285, 0x3EE4F8B580000000, !dbg !40
  %302 = fadd float %286, 0x3EE4F8B580000000, !dbg !40
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %303, 0, !dbg !41
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %304, 0, !dbg !41
  br i1 %.not.i, label %310, label %305, !dbg !41

305:                                              ; preds = %15
  br i1 %.not1.i, label %308, label %306, !dbg !41

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %287) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %287) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

310:                                              ; preds = %15
  br i1 %.not1.i, label %313, label %311, !dbg !41

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %287) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %287) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %306, %308, %311, %313
  %.0.i = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !41
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i18 = icmp eq i32 %315, 0, !dbg !41
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i21 = icmp eq i32 %316, 0, !dbg !41
  br i1 %.not.i18, label %322, label %317, !dbg !41

317:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %320, label %318, !dbg !41

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %288) #4, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %288) #4, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

322:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %325, label %323, !dbg !41

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %288) #4, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %288) #4, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

__nv_sqrtf.exit22:                                ; preds = %318, %320, %323, %325
  %.0.i20 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !41
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i23 = icmp eq i32 %327, 0, !dbg !41
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i26 = icmp eq i32 %328, 0, !dbg !41
  br i1 %.not.i23, label %334, label %329, !dbg !41

329:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %332, label %330, !dbg !41

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %289) #4, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %289) #4, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

334:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %337, label %335, !dbg !41

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %289) #4, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %289) #4, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

__nv_sqrtf.exit27:                                ; preds = %330, %332, %335, %337
  %.0.i25 = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !41
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i28 = icmp eq i32 %339, 0, !dbg !41
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i31 = icmp eq i32 %340, 0, !dbg !41
  br i1 %.not.i28, label %346, label %341, !dbg !41

341:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %344, label %342, !dbg !41

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %290) #4, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %290) #4, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

346:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %349, label %347, !dbg !41

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.f(float %290) #4, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.f(float %290) #4, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

__nv_sqrtf.exit32:                                ; preds = %342, %344, %347, %349
  %.0.i30 = phi float [ %343, %342 ], [ %345, %344 ], [ %348, %347 ], [ %350, %349 ], !dbg !41
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i33 = icmp eq i32 %351, 0, !dbg !41
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i36 = icmp eq i32 %352, 0, !dbg !41
  br i1 %.not.i33, label %358, label %353, !dbg !41

353:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %356, label %354, !dbg !41

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %291) #4, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %291) #4, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

358:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %361, label %359, !dbg !41

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.f(float %291) #4, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.f(float %291) #4, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

__nv_sqrtf.exit37:                                ; preds = %354, %356, %359, %361
  %.0.i35 = phi float [ %355, %354 ], [ %357, %356 ], [ %360, %359 ], [ %362, %361 ], !dbg !41
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i38 = icmp eq i32 %363, 0, !dbg !41
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i41 = icmp eq i32 %364, 0, !dbg !41
  br i1 %.not.i38, label %370, label %365, !dbg !41

365:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %368, label %366, !dbg !41

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %292) #4, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %292) #4, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

370:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %373, label %371, !dbg !41

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.f(float %292) #4, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.f(float %292) #4, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

__nv_sqrtf.exit42:                                ; preds = %366, %368, %371, %373
  %.0.i40 = phi float [ %367, %366 ], [ %369, %368 ], [ %372, %371 ], [ %374, %373 ], !dbg !41
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i43 = icmp eq i32 %375, 0, !dbg !41
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i46 = icmp eq i32 %376, 0, !dbg !41
  br i1 %.not.i43, label %382, label %377, !dbg !41

377:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %380, label %378, !dbg !41

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %293) #4, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %293) #4, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

382:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %385, label %383, !dbg !41

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.f(float %293) #4, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.f(float %293) #4, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

__nv_sqrtf.exit47:                                ; preds = %378, %380, %383, %385
  %.0.i45 = phi float [ %379, %378 ], [ %381, %380 ], [ %384, %383 ], [ %386, %385 ], !dbg !41
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i48 = icmp eq i32 %387, 0, !dbg !41
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i51 = icmp eq i32 %388, 0, !dbg !41
  br i1 %.not.i48, label %394, label %389, !dbg !41

389:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %392, label %390, !dbg !41

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %294) #4, !dbg !41
  br label %__nv_sqrtf.exit52, !dbg !41

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %294) #4, !dbg !41
  br label %__nv_sqrtf.exit52, !dbg !41

394:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %397, label %395, !dbg !41

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.f(float %294) #4, !dbg !41
  br label %__nv_sqrtf.exit52, !dbg !41

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.f(float %294) #4, !dbg !41
  br label %__nv_sqrtf.exit52, !dbg !41

__nv_sqrtf.exit52:                                ; preds = %390, %392, %395, %397
  %.0.i50 = phi float [ %391, %390 ], [ %393, %392 ], [ %396, %395 ], [ %398, %397 ], !dbg !41
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i53 = icmp eq i32 %399, 0, !dbg !41
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i56 = icmp eq i32 %400, 0, !dbg !41
  br i1 %.not.i53, label %406, label %401, !dbg !41

401:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %404, label %402, !dbg !41

402:                                              ; preds = %401
  %403 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #4, !dbg !41
  br label %__nv_sqrtf.exit57, !dbg !41

404:                                              ; preds = %401
  %405 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #4, !dbg !41
  br label %__nv_sqrtf.exit57, !dbg !41

406:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %409, label %407, !dbg !41

407:                                              ; preds = %406
  %408 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #4, !dbg !41
  br label %__nv_sqrtf.exit57, !dbg !41

409:                                              ; preds = %406
  %410 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #4, !dbg !41
  br label %__nv_sqrtf.exit57, !dbg !41

__nv_sqrtf.exit57:                                ; preds = %402, %404, %407, %409
  %.0.i55 = phi float [ %403, %402 ], [ %405, %404 ], [ %408, %407 ], [ %410, %409 ], !dbg !41
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i58 = icmp eq i32 %411, 0, !dbg !41
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i61 = icmp eq i32 %412, 0, !dbg !41
  br i1 %.not.i58, label %418, label %413, !dbg !41

413:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %416, label %414, !dbg !41

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #4, !dbg !41
  br label %__nv_sqrtf.exit62, !dbg !41

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #4, !dbg !41
  br label %__nv_sqrtf.exit62, !dbg !41

418:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %421, label %419, !dbg !41

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #4, !dbg !41
  br label %__nv_sqrtf.exit62, !dbg !41

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #4, !dbg !41
  br label %__nv_sqrtf.exit62, !dbg !41

__nv_sqrtf.exit62:                                ; preds = %414, %416, %419, %421
  %.0.i60 = phi float [ %415, %414 ], [ %417, %416 ], [ %420, %419 ], [ %422, %421 ], !dbg !41
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i63 = icmp eq i32 %423, 0, !dbg !41
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i66 = icmp eq i32 %424, 0, !dbg !41
  br i1 %.not.i63, label %430, label %425, !dbg !41

425:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %428, label %426, !dbg !41

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #4, !dbg !41
  br label %__nv_sqrtf.exit67, !dbg !41

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #4, !dbg !41
  br label %__nv_sqrtf.exit67, !dbg !41

430:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %433, label %431, !dbg !41

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #4, !dbg !41
  br label %__nv_sqrtf.exit67, !dbg !41

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #4, !dbg !41
  br label %__nv_sqrtf.exit67, !dbg !41

__nv_sqrtf.exit67:                                ; preds = %426, %428, %431, %433
  %.0.i65 = phi float [ %427, %426 ], [ %429, %428 ], [ %432, %431 ], [ %434, %433 ], !dbg !41
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i68 = icmp eq i32 %435, 0, !dbg !41
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i71 = icmp eq i32 %436, 0, !dbg !41
  br i1 %.not.i68, label %442, label %437, !dbg !41

437:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %440, label %438, !dbg !41

438:                                              ; preds = %437
  %439 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %298) #4, !dbg !41
  br label %__nv_sqrtf.exit72, !dbg !41

440:                                              ; preds = %437
  %441 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %298) #4, !dbg !41
  br label %__nv_sqrtf.exit72, !dbg !41

442:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %445, label %443, !dbg !41

443:                                              ; preds = %442
  %444 = tail call float @llvm.nvvm.sqrt.rn.f(float %298) #4, !dbg !41
  br label %__nv_sqrtf.exit72, !dbg !41

445:                                              ; preds = %442
  %446 = tail call float @llvm.nvvm.sqrt.approx.f(float %298) #4, !dbg !41
  br label %__nv_sqrtf.exit72, !dbg !41

__nv_sqrtf.exit72:                                ; preds = %438, %440, %443, %445
  %.0.i70 = phi float [ %439, %438 ], [ %441, %440 ], [ %444, %443 ], [ %446, %445 ], !dbg !41
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i73 = icmp eq i32 %447, 0, !dbg !41
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i76 = icmp eq i32 %448, 0, !dbg !41
  br i1 %.not.i73, label %454, label %449, !dbg !41

449:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %452, label %450, !dbg !41

450:                                              ; preds = %449
  %451 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %299) #4, !dbg !41
  br label %__nv_sqrtf.exit77, !dbg !41

452:                                              ; preds = %449
  %453 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %299) #4, !dbg !41
  br label %__nv_sqrtf.exit77, !dbg !41

454:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %457, label %455, !dbg !41

455:                                              ; preds = %454
  %456 = tail call float @llvm.nvvm.sqrt.rn.f(float %299) #4, !dbg !41
  br label %__nv_sqrtf.exit77, !dbg !41

457:                                              ; preds = %454
  %458 = tail call float @llvm.nvvm.sqrt.approx.f(float %299) #4, !dbg !41
  br label %__nv_sqrtf.exit77, !dbg !41

__nv_sqrtf.exit77:                                ; preds = %450, %452, %455, %457
  %.0.i75 = phi float [ %451, %450 ], [ %453, %452 ], [ %456, %455 ], [ %458, %457 ], !dbg !41
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i78 = icmp eq i32 %459, 0, !dbg !41
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i81 = icmp eq i32 %460, 0, !dbg !41
  br i1 %.not.i78, label %466, label %461, !dbg !41

461:                                              ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %464, label %462, !dbg !41

462:                                              ; preds = %461
  %463 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #4, !dbg !41
  br label %__nv_sqrtf.exit82, !dbg !41

464:                                              ; preds = %461
  %465 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #4, !dbg !41
  br label %__nv_sqrtf.exit82, !dbg !41

466:                                              ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %469, label %467, !dbg !41

467:                                              ; preds = %466
  %468 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #4, !dbg !41
  br label %__nv_sqrtf.exit82, !dbg !41

469:                                              ; preds = %466
  %470 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #4, !dbg !41
  br label %__nv_sqrtf.exit82, !dbg !41

__nv_sqrtf.exit82:                                ; preds = %462, %464, %467, %469
  %.0.i80 = phi float [ %463, %462 ], [ %465, %464 ], [ %468, %467 ], [ %470, %469 ], !dbg !41
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i83 = icmp eq i32 %471, 0, !dbg !41
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i86 = icmp eq i32 %472, 0, !dbg !41
  br i1 %.not.i83, label %478, label %473, !dbg !41

473:                                              ; preds = %__nv_sqrtf.exit82
  br i1 %.not1.i86, label %476, label %474, !dbg !41

474:                                              ; preds = %473
  %475 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #4, !dbg !41
  br label %__nv_sqrtf.exit87, !dbg !41

476:                                              ; preds = %473
  %477 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #4, !dbg !41
  br label %__nv_sqrtf.exit87, !dbg !41

478:                                              ; preds = %__nv_sqrtf.exit82
  br i1 %.not1.i86, label %481, label %479, !dbg !41

479:                                              ; preds = %478
  %480 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #4, !dbg !41
  br label %__nv_sqrtf.exit87, !dbg !41

481:                                              ; preds = %478
  %482 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #4, !dbg !41
  br label %__nv_sqrtf.exit87, !dbg !41

__nv_sqrtf.exit87:                                ; preds = %474, %476, %479, %481
  %.0.i85 = phi float [ %475, %474 ], [ %477, %476 ], [ %480, %479 ], [ %482, %481 ], !dbg !41
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i88 = icmp eq i32 %483, 0, !dbg !41
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i91 = icmp eq i32 %484, 0, !dbg !41
  br i1 %.not.i88, label %490, label %485, !dbg !41

485:                                              ; preds = %__nv_sqrtf.exit87
  br i1 %.not1.i91, label %488, label %486, !dbg !41

486:                                              ; preds = %485
  %487 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #4, !dbg !41
  br label %__nv_sqrtf.exit92, !dbg !41

488:                                              ; preds = %485
  %489 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #4, !dbg !41
  br label %__nv_sqrtf.exit92, !dbg !41

490:                                              ; preds = %__nv_sqrtf.exit87
  br i1 %.not1.i91, label %493, label %491, !dbg !41

491:                                              ; preds = %490
  %492 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #4, !dbg !41
  br label %__nv_sqrtf.exit92, !dbg !41

493:                                              ; preds = %490
  %494 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #4, !dbg !41
  br label %__nv_sqrtf.exit92, !dbg !41

__nv_sqrtf.exit92:                                ; preds = %486, %488, %491, %493
  %.0.i90 = phi float [ %487, %486 ], [ %489, %488 ], [ %492, %491 ], [ %494, %493 ], !dbg !41
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !42
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !42
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !42
  %499 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !42
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !42
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !42
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !42
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !42
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !42
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !42
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !42
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !42
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i80) #4, !dbg !42
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i85) #4, !dbg !42
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i90) #4, !dbg !42
  %511 = getelementptr float, ptr addrspace(1) %3, i64 %235, !dbg !43
  %512 = getelementptr float, ptr addrspace(1) %3, i64 %237, !dbg !43
  %513 = getelementptr float, ptr addrspace(1) %3, i64 %239, !dbg !43
  %514 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !43
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %511, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !44
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %512, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !44
  %517 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %513, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !44
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %514, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !44
  %519 = getelementptr float, ptr addrspace(1) %4, i64 %235, !dbg !45
  %520 = getelementptr float, ptr addrspace(1) %4, i64 %237, !dbg !45
  %521 = getelementptr float, ptr addrspace(1) %4, i64 %239, !dbg !45
  %522 = getelementptr float, ptr addrspace(1) %4, i64 %241, !dbg !45
  %523 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %519, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !46
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %520, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !46
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %521, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !46
  %526 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %522, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230, i32 0, i1 %230) #4, !dbg !46
  %527 = icmp sgt i32 %.decomposed, 63, !dbg !47
  %528 = add nsw i32 %.decomposed, -64, !dbg !48
  %529 = add nsw i32 %67, -64, !dbg !48
  %530 = add nsw i32 %68, -64, !dbg !48
  %531 = add nsw i32 %69, -64, !dbg !48
  %532 = add i32 %216, %528, !dbg !49
  %533 = add i32 %216, %529, !dbg !49
  %534 = add i32 %216, %530, !dbg !49
  %535 = add i32 %216, %531, !dbg !49
  %536 = sext i32 %532 to i64, !dbg !50
  %537 = getelementptr float, ptr addrspace(1) %5, i64 %536, !dbg !50
  %538 = sext i32 %533 to i64, !dbg !50
  %539 = getelementptr float, ptr addrspace(1) %5, i64 %538, !dbg !50
  %540 = sext i32 %534 to i64, !dbg !50
  %541 = getelementptr float, ptr addrspace(1) %5, i64 %540, !dbg !50
  %542 = sext i32 %535 to i64, !dbg !50
  %543 = getelementptr float, ptr addrspace(1) %5, i64 %542, !dbg !50
  %544 = and i1 %527, %64, !dbg !51
  %545 = and i1 %50, %544, !dbg !52
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %537, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !53
  %547 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %539, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !53
  %548 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %541, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !53
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %543, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !53
  %550 = sext i32 %528 to i64, !dbg !54
  %551 = getelementptr float, ptr addrspace(1) %6, i64 %550, !dbg !54
  %552 = sext i32 %529 to i64, !dbg !54
  %553 = getelementptr float, ptr addrspace(1) %6, i64 %552, !dbg !54
  %554 = sext i32 %530 to i64, !dbg !54
  %555 = getelementptr float, ptr addrspace(1) %6, i64 %554, !dbg !54
  %556 = sext i32 %531 to i64, !dbg !54
  %557 = getelementptr float, ptr addrspace(1) %6, i64 %556, !dbg !54
  %558 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %551, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !55
  %559 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %553, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !55
  %560 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %555, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !55
  %561 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %557, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !55
  %562 = getelementptr float, ptr addrspace(1) %7, i64 %550, !dbg !56
  %563 = getelementptr float, ptr addrspace(1) %7, i64 %552, !dbg !56
  %564 = getelementptr float, ptr addrspace(1) %7, i64 %554, !dbg !56
  %565 = getelementptr float, ptr addrspace(1) %7, i64 %556, !dbg !56
  %566 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %562, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !57
  %567 = extractvalue { i32, i32, i32, i32 } %566, 0, !dbg !57
  %568 = extractvalue { i32, i32, i32, i32 } %566, 1, !dbg !57
  %569 = extractvalue { i32, i32, i32, i32 } %566, 2, !dbg !57
  %570 = extractvalue { i32, i32, i32, i32 } %566, 3, !dbg !57
  %571 = bitcast i32 %567 to float, !dbg !57
  %572 = bitcast i32 %568 to float, !dbg !57
  %573 = bitcast i32 %569 to float, !dbg !57
  %574 = bitcast i32 %570 to float, !dbg !57
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %563, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !57
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !57
  %577 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !57
  %578 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !57
  %579 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !57
  %580 = bitcast i32 %576 to float, !dbg !57
  %581 = bitcast i32 %577 to float, !dbg !57
  %582 = bitcast i32 %578 to float, !dbg !57
  %583 = bitcast i32 %579 to float, !dbg !57
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %564, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !57
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !57
  %586 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !57
  %587 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !57
  %588 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !57
  %589 = bitcast i32 %585 to float, !dbg !57
  %590 = bitcast i32 %586 to float, !dbg !57
  %591 = bitcast i32 %587 to float, !dbg !57
  %592 = bitcast i32 %588 to float, !dbg !57
  %593 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %565, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !57
  %594 = extractvalue { i32, i32, i32, i32 } %593, 0, !dbg !57
  %595 = extractvalue { i32, i32, i32, i32 } %593, 1, !dbg !57
  %596 = extractvalue { i32, i32, i32, i32 } %593, 2, !dbg !57
  %597 = extractvalue { i32, i32, i32, i32 } %593, 3, !dbg !57
  %598 = bitcast i32 %594 to float, !dbg !57
  %599 = bitcast i32 %595 to float, !dbg !57
  %600 = bitcast i32 %596 to float, !dbg !57
  %601 = bitcast i32 %597 to float, !dbg !57
  %602 = fadd float %571, 0x3EE4F8B580000000, !dbg !58
  %603 = fadd float %572, 0x3EE4F8B580000000, !dbg !58
  %604 = fadd float %573, 0x3EE4F8B580000000, !dbg !58
  %605 = fadd float %574, 0x3EE4F8B580000000, !dbg !58
  %606 = fadd float %580, 0x3EE4F8B580000000, !dbg !58
  %607 = fadd float %581, 0x3EE4F8B580000000, !dbg !58
  %608 = fadd float %582, 0x3EE4F8B580000000, !dbg !58
  %609 = fadd float %583, 0x3EE4F8B580000000, !dbg !58
  %610 = fadd float %589, 0x3EE4F8B580000000, !dbg !58
  %611 = fadd float %590, 0x3EE4F8B580000000, !dbg !58
  %612 = fadd float %591, 0x3EE4F8B580000000, !dbg !58
  %613 = fadd float %592, 0x3EE4F8B580000000, !dbg !58
  %614 = fadd float %598, 0x3EE4F8B580000000, !dbg !58
  %615 = fadd float %599, 0x3EE4F8B580000000, !dbg !58
  %616 = fadd float %600, 0x3EE4F8B580000000, !dbg !58
  %617 = fadd float %601, 0x3EE4F8B580000000, !dbg !58
  %618 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i93 = icmp eq i32 %618, 0, !dbg !59
  %619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i96 = icmp eq i32 %619, 0, !dbg !59
  br i1 %.not.i93, label %625, label %620, !dbg !59

620:                                              ; preds = %__nv_sqrtf.exit92
  br i1 %.not1.i96, label %623, label %621, !dbg !59

621:                                              ; preds = %620
  %622 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %602) #4, !dbg !59
  br label %__nv_sqrtf.exit97, !dbg !59

623:                                              ; preds = %620
  %624 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %602) #4, !dbg !59
  br label %__nv_sqrtf.exit97, !dbg !59

625:                                              ; preds = %__nv_sqrtf.exit92
  br i1 %.not1.i96, label %628, label %626, !dbg !59

626:                                              ; preds = %625
  %627 = tail call float @llvm.nvvm.sqrt.rn.f(float %602) #4, !dbg !59
  br label %__nv_sqrtf.exit97, !dbg !59

628:                                              ; preds = %625
  %629 = tail call float @llvm.nvvm.sqrt.approx.f(float %602) #4, !dbg !59
  br label %__nv_sqrtf.exit97, !dbg !59

__nv_sqrtf.exit97:                                ; preds = %621, %623, %626, %628
  %.0.i95 = phi float [ %622, %621 ], [ %624, %623 ], [ %627, %626 ], [ %629, %628 ], !dbg !59
  %630 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i98 = icmp eq i32 %630, 0, !dbg !59
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i101 = icmp eq i32 %631, 0, !dbg !59
  br i1 %.not.i98, label %637, label %632, !dbg !59

632:                                              ; preds = %__nv_sqrtf.exit97
  br i1 %.not1.i101, label %635, label %633, !dbg !59

633:                                              ; preds = %632
  %634 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %603) #4, !dbg !59
  br label %__nv_sqrtf.exit102, !dbg !59

635:                                              ; preds = %632
  %636 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %603) #4, !dbg !59
  br label %__nv_sqrtf.exit102, !dbg !59

637:                                              ; preds = %__nv_sqrtf.exit97
  br i1 %.not1.i101, label %640, label %638, !dbg !59

638:                                              ; preds = %637
  %639 = tail call float @llvm.nvvm.sqrt.rn.f(float %603) #4, !dbg !59
  br label %__nv_sqrtf.exit102, !dbg !59

640:                                              ; preds = %637
  %641 = tail call float @llvm.nvvm.sqrt.approx.f(float %603) #4, !dbg !59
  br label %__nv_sqrtf.exit102, !dbg !59

__nv_sqrtf.exit102:                               ; preds = %633, %635, %638, %640
  %.0.i100 = phi float [ %634, %633 ], [ %636, %635 ], [ %639, %638 ], [ %641, %640 ], !dbg !59
  %642 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i103 = icmp eq i32 %642, 0, !dbg !59
  %643 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i106 = icmp eq i32 %643, 0, !dbg !59
  br i1 %.not.i103, label %649, label %644, !dbg !59

644:                                              ; preds = %__nv_sqrtf.exit102
  br i1 %.not1.i106, label %647, label %645, !dbg !59

645:                                              ; preds = %644
  %646 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %604) #4, !dbg !59
  br label %__nv_sqrtf.exit107, !dbg !59

647:                                              ; preds = %644
  %648 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %604) #4, !dbg !59
  br label %__nv_sqrtf.exit107, !dbg !59

649:                                              ; preds = %__nv_sqrtf.exit102
  br i1 %.not1.i106, label %652, label %650, !dbg !59

650:                                              ; preds = %649
  %651 = tail call float @llvm.nvvm.sqrt.rn.f(float %604) #4, !dbg !59
  br label %__nv_sqrtf.exit107, !dbg !59

652:                                              ; preds = %649
  %653 = tail call float @llvm.nvvm.sqrt.approx.f(float %604) #4, !dbg !59
  br label %__nv_sqrtf.exit107, !dbg !59

__nv_sqrtf.exit107:                               ; preds = %645, %647, %650, %652
  %.0.i105 = phi float [ %646, %645 ], [ %648, %647 ], [ %651, %650 ], [ %653, %652 ], !dbg !59
  %654 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i108 = icmp eq i32 %654, 0, !dbg !59
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i111 = icmp eq i32 %655, 0, !dbg !59
  br i1 %.not.i108, label %661, label %656, !dbg !59

656:                                              ; preds = %__nv_sqrtf.exit107
  br i1 %.not1.i111, label %659, label %657, !dbg !59

657:                                              ; preds = %656
  %658 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %605) #4, !dbg !59
  br label %__nv_sqrtf.exit112, !dbg !59

659:                                              ; preds = %656
  %660 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %605) #4, !dbg !59
  br label %__nv_sqrtf.exit112, !dbg !59

661:                                              ; preds = %__nv_sqrtf.exit107
  br i1 %.not1.i111, label %664, label %662, !dbg !59

662:                                              ; preds = %661
  %663 = tail call float @llvm.nvvm.sqrt.rn.f(float %605) #4, !dbg !59
  br label %__nv_sqrtf.exit112, !dbg !59

664:                                              ; preds = %661
  %665 = tail call float @llvm.nvvm.sqrt.approx.f(float %605) #4, !dbg !59
  br label %__nv_sqrtf.exit112, !dbg !59

__nv_sqrtf.exit112:                               ; preds = %657, %659, %662, %664
  %.0.i110 = phi float [ %658, %657 ], [ %660, %659 ], [ %663, %662 ], [ %665, %664 ], !dbg !59
  %666 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i113 = icmp eq i32 %666, 0, !dbg !59
  %667 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i116 = icmp eq i32 %667, 0, !dbg !59
  br i1 %.not.i113, label %673, label %668, !dbg !59

668:                                              ; preds = %__nv_sqrtf.exit112
  br i1 %.not1.i116, label %671, label %669, !dbg !59

669:                                              ; preds = %668
  %670 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %606) #4, !dbg !59
  br label %__nv_sqrtf.exit117, !dbg !59

671:                                              ; preds = %668
  %672 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %606) #4, !dbg !59
  br label %__nv_sqrtf.exit117, !dbg !59

673:                                              ; preds = %__nv_sqrtf.exit112
  br i1 %.not1.i116, label %676, label %674, !dbg !59

674:                                              ; preds = %673
  %675 = tail call float @llvm.nvvm.sqrt.rn.f(float %606) #4, !dbg !59
  br label %__nv_sqrtf.exit117, !dbg !59

676:                                              ; preds = %673
  %677 = tail call float @llvm.nvvm.sqrt.approx.f(float %606) #4, !dbg !59
  br label %__nv_sqrtf.exit117, !dbg !59

__nv_sqrtf.exit117:                               ; preds = %669, %671, %674, %676
  %.0.i115 = phi float [ %670, %669 ], [ %672, %671 ], [ %675, %674 ], [ %677, %676 ], !dbg !59
  %678 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i118 = icmp eq i32 %678, 0, !dbg !59
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i121 = icmp eq i32 %679, 0, !dbg !59
  br i1 %.not.i118, label %685, label %680, !dbg !59

680:                                              ; preds = %__nv_sqrtf.exit117
  br i1 %.not1.i121, label %683, label %681, !dbg !59

681:                                              ; preds = %680
  %682 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %607) #4, !dbg !59
  br label %__nv_sqrtf.exit122, !dbg !59

683:                                              ; preds = %680
  %684 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %607) #4, !dbg !59
  br label %__nv_sqrtf.exit122, !dbg !59

685:                                              ; preds = %__nv_sqrtf.exit117
  br i1 %.not1.i121, label %688, label %686, !dbg !59

686:                                              ; preds = %685
  %687 = tail call float @llvm.nvvm.sqrt.rn.f(float %607) #4, !dbg !59
  br label %__nv_sqrtf.exit122, !dbg !59

688:                                              ; preds = %685
  %689 = tail call float @llvm.nvvm.sqrt.approx.f(float %607) #4, !dbg !59
  br label %__nv_sqrtf.exit122, !dbg !59

__nv_sqrtf.exit122:                               ; preds = %681, %683, %686, %688
  %.0.i120 = phi float [ %682, %681 ], [ %684, %683 ], [ %687, %686 ], [ %689, %688 ], !dbg !59
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i123 = icmp eq i32 %690, 0, !dbg !59
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i126 = icmp eq i32 %691, 0, !dbg !59
  br i1 %.not.i123, label %697, label %692, !dbg !59

692:                                              ; preds = %__nv_sqrtf.exit122
  br i1 %.not1.i126, label %695, label %693, !dbg !59

693:                                              ; preds = %692
  %694 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %608) #4, !dbg !59
  br label %__nv_sqrtf.exit127, !dbg !59

695:                                              ; preds = %692
  %696 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %608) #4, !dbg !59
  br label %__nv_sqrtf.exit127, !dbg !59

697:                                              ; preds = %__nv_sqrtf.exit122
  br i1 %.not1.i126, label %700, label %698, !dbg !59

698:                                              ; preds = %697
  %699 = tail call float @llvm.nvvm.sqrt.rn.f(float %608) #4, !dbg !59
  br label %__nv_sqrtf.exit127, !dbg !59

700:                                              ; preds = %697
  %701 = tail call float @llvm.nvvm.sqrt.approx.f(float %608) #4, !dbg !59
  br label %__nv_sqrtf.exit127, !dbg !59

__nv_sqrtf.exit127:                               ; preds = %693, %695, %698, %700
  %.0.i125 = phi float [ %694, %693 ], [ %696, %695 ], [ %699, %698 ], [ %701, %700 ], !dbg !59
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i128 = icmp eq i32 %702, 0, !dbg !59
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i131 = icmp eq i32 %703, 0, !dbg !59
  br i1 %.not.i128, label %709, label %704, !dbg !59

704:                                              ; preds = %__nv_sqrtf.exit127
  br i1 %.not1.i131, label %707, label %705, !dbg !59

705:                                              ; preds = %704
  %706 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %609) #4, !dbg !59
  br label %__nv_sqrtf.exit132, !dbg !59

707:                                              ; preds = %704
  %708 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %609) #4, !dbg !59
  br label %__nv_sqrtf.exit132, !dbg !59

709:                                              ; preds = %__nv_sqrtf.exit127
  br i1 %.not1.i131, label %712, label %710, !dbg !59

710:                                              ; preds = %709
  %711 = tail call float @llvm.nvvm.sqrt.rn.f(float %609) #4, !dbg !59
  br label %__nv_sqrtf.exit132, !dbg !59

712:                                              ; preds = %709
  %713 = tail call float @llvm.nvvm.sqrt.approx.f(float %609) #4, !dbg !59
  br label %__nv_sqrtf.exit132, !dbg !59

__nv_sqrtf.exit132:                               ; preds = %705, %707, %710, %712
  %.0.i130 = phi float [ %706, %705 ], [ %708, %707 ], [ %711, %710 ], [ %713, %712 ], !dbg !59
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i133 = icmp eq i32 %714, 0, !dbg !59
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i136 = icmp eq i32 %715, 0, !dbg !59
  br i1 %.not.i133, label %721, label %716, !dbg !59

716:                                              ; preds = %__nv_sqrtf.exit132
  br i1 %.not1.i136, label %719, label %717, !dbg !59

717:                                              ; preds = %716
  %718 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %610) #4, !dbg !59
  br label %__nv_sqrtf.exit137, !dbg !59

719:                                              ; preds = %716
  %720 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %610) #4, !dbg !59
  br label %__nv_sqrtf.exit137, !dbg !59

721:                                              ; preds = %__nv_sqrtf.exit132
  br i1 %.not1.i136, label %724, label %722, !dbg !59

722:                                              ; preds = %721
  %723 = tail call float @llvm.nvvm.sqrt.rn.f(float %610) #4, !dbg !59
  br label %__nv_sqrtf.exit137, !dbg !59

724:                                              ; preds = %721
  %725 = tail call float @llvm.nvvm.sqrt.approx.f(float %610) #4, !dbg !59
  br label %__nv_sqrtf.exit137, !dbg !59

__nv_sqrtf.exit137:                               ; preds = %717, %719, %722, %724
  %.0.i135 = phi float [ %718, %717 ], [ %720, %719 ], [ %723, %722 ], [ %725, %724 ], !dbg !59
  %726 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i138 = icmp eq i32 %726, 0, !dbg !59
  %727 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i141 = icmp eq i32 %727, 0, !dbg !59
  br i1 %.not.i138, label %733, label %728, !dbg !59

728:                                              ; preds = %__nv_sqrtf.exit137
  br i1 %.not1.i141, label %731, label %729, !dbg !59

729:                                              ; preds = %728
  %730 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %611) #4, !dbg !59
  br label %__nv_sqrtf.exit142, !dbg !59

731:                                              ; preds = %728
  %732 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %611) #4, !dbg !59
  br label %__nv_sqrtf.exit142, !dbg !59

733:                                              ; preds = %__nv_sqrtf.exit137
  br i1 %.not1.i141, label %736, label %734, !dbg !59

734:                                              ; preds = %733
  %735 = tail call float @llvm.nvvm.sqrt.rn.f(float %611) #4, !dbg !59
  br label %__nv_sqrtf.exit142, !dbg !59

736:                                              ; preds = %733
  %737 = tail call float @llvm.nvvm.sqrt.approx.f(float %611) #4, !dbg !59
  br label %__nv_sqrtf.exit142, !dbg !59

__nv_sqrtf.exit142:                               ; preds = %729, %731, %734, %736
  %.0.i140 = phi float [ %730, %729 ], [ %732, %731 ], [ %735, %734 ], [ %737, %736 ], !dbg !59
  %738 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i143 = icmp eq i32 %738, 0, !dbg !59
  %739 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i146 = icmp eq i32 %739, 0, !dbg !59
  br i1 %.not.i143, label %745, label %740, !dbg !59

740:                                              ; preds = %__nv_sqrtf.exit142
  br i1 %.not1.i146, label %743, label %741, !dbg !59

741:                                              ; preds = %740
  %742 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %612) #4, !dbg !59
  br label %__nv_sqrtf.exit147, !dbg !59

743:                                              ; preds = %740
  %744 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %612) #4, !dbg !59
  br label %__nv_sqrtf.exit147, !dbg !59

745:                                              ; preds = %__nv_sqrtf.exit142
  br i1 %.not1.i146, label %748, label %746, !dbg !59

746:                                              ; preds = %745
  %747 = tail call float @llvm.nvvm.sqrt.rn.f(float %612) #4, !dbg !59
  br label %__nv_sqrtf.exit147, !dbg !59

748:                                              ; preds = %745
  %749 = tail call float @llvm.nvvm.sqrt.approx.f(float %612) #4, !dbg !59
  br label %__nv_sqrtf.exit147, !dbg !59

__nv_sqrtf.exit147:                               ; preds = %741, %743, %746, %748
  %.0.i145 = phi float [ %742, %741 ], [ %744, %743 ], [ %747, %746 ], [ %749, %748 ], !dbg !59
  %750 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i148 = icmp eq i32 %750, 0, !dbg !59
  %751 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i151 = icmp eq i32 %751, 0, !dbg !59
  br i1 %.not.i148, label %757, label %752, !dbg !59

752:                                              ; preds = %__nv_sqrtf.exit147
  br i1 %.not1.i151, label %755, label %753, !dbg !59

753:                                              ; preds = %752
  %754 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %613) #4, !dbg !59
  br label %__nv_sqrtf.exit152, !dbg !59

755:                                              ; preds = %752
  %756 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %613) #4, !dbg !59
  br label %__nv_sqrtf.exit152, !dbg !59

757:                                              ; preds = %__nv_sqrtf.exit147
  br i1 %.not1.i151, label %760, label %758, !dbg !59

758:                                              ; preds = %757
  %759 = tail call float @llvm.nvvm.sqrt.rn.f(float %613) #4, !dbg !59
  br label %__nv_sqrtf.exit152, !dbg !59

760:                                              ; preds = %757
  %761 = tail call float @llvm.nvvm.sqrt.approx.f(float %613) #4, !dbg !59
  br label %__nv_sqrtf.exit152, !dbg !59

__nv_sqrtf.exit152:                               ; preds = %753, %755, %758, %760
  %.0.i150 = phi float [ %754, %753 ], [ %756, %755 ], [ %759, %758 ], [ %761, %760 ], !dbg !59
  %762 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i153 = icmp eq i32 %762, 0, !dbg !59
  %763 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i156 = icmp eq i32 %763, 0, !dbg !59
  br i1 %.not.i153, label %769, label %764, !dbg !59

764:                                              ; preds = %__nv_sqrtf.exit152
  br i1 %.not1.i156, label %767, label %765, !dbg !59

765:                                              ; preds = %764
  %766 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %614) #4, !dbg !59
  br label %__nv_sqrtf.exit157, !dbg !59

767:                                              ; preds = %764
  %768 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %614) #4, !dbg !59
  br label %__nv_sqrtf.exit157, !dbg !59

769:                                              ; preds = %__nv_sqrtf.exit152
  br i1 %.not1.i156, label %772, label %770, !dbg !59

770:                                              ; preds = %769
  %771 = tail call float @llvm.nvvm.sqrt.rn.f(float %614) #4, !dbg !59
  br label %__nv_sqrtf.exit157, !dbg !59

772:                                              ; preds = %769
  %773 = tail call float @llvm.nvvm.sqrt.approx.f(float %614) #4, !dbg !59
  br label %__nv_sqrtf.exit157, !dbg !59

__nv_sqrtf.exit157:                               ; preds = %765, %767, %770, %772
  %.0.i155 = phi float [ %766, %765 ], [ %768, %767 ], [ %771, %770 ], [ %773, %772 ], !dbg !59
  %774 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i158 = icmp eq i32 %774, 0, !dbg !59
  %775 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i161 = icmp eq i32 %775, 0, !dbg !59
  br i1 %.not.i158, label %781, label %776, !dbg !59

776:                                              ; preds = %__nv_sqrtf.exit157
  br i1 %.not1.i161, label %779, label %777, !dbg !59

777:                                              ; preds = %776
  %778 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %615) #4, !dbg !59
  br label %__nv_sqrtf.exit162, !dbg !59

779:                                              ; preds = %776
  %780 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %615) #4, !dbg !59
  br label %__nv_sqrtf.exit162, !dbg !59

781:                                              ; preds = %__nv_sqrtf.exit157
  br i1 %.not1.i161, label %784, label %782, !dbg !59

782:                                              ; preds = %781
  %783 = tail call float @llvm.nvvm.sqrt.rn.f(float %615) #4, !dbg !59
  br label %__nv_sqrtf.exit162, !dbg !59

784:                                              ; preds = %781
  %785 = tail call float @llvm.nvvm.sqrt.approx.f(float %615) #4, !dbg !59
  br label %__nv_sqrtf.exit162, !dbg !59

__nv_sqrtf.exit162:                               ; preds = %777, %779, %782, %784
  %.0.i160 = phi float [ %778, %777 ], [ %780, %779 ], [ %783, %782 ], [ %785, %784 ], !dbg !59
  %786 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i163 = icmp eq i32 %786, 0, !dbg !59
  %787 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i166 = icmp eq i32 %787, 0, !dbg !59
  br i1 %.not.i163, label %793, label %788, !dbg !59

788:                                              ; preds = %__nv_sqrtf.exit162
  br i1 %.not1.i166, label %791, label %789, !dbg !59

789:                                              ; preds = %788
  %790 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %616) #4, !dbg !59
  br label %__nv_sqrtf.exit167, !dbg !59

791:                                              ; preds = %788
  %792 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %616) #4, !dbg !59
  br label %__nv_sqrtf.exit167, !dbg !59

793:                                              ; preds = %__nv_sqrtf.exit162
  br i1 %.not1.i166, label %796, label %794, !dbg !59

794:                                              ; preds = %793
  %795 = tail call float @llvm.nvvm.sqrt.rn.f(float %616) #4, !dbg !59
  br label %__nv_sqrtf.exit167, !dbg !59

796:                                              ; preds = %793
  %797 = tail call float @llvm.nvvm.sqrt.approx.f(float %616) #4, !dbg !59
  br label %__nv_sqrtf.exit167, !dbg !59

__nv_sqrtf.exit167:                               ; preds = %789, %791, %794, %796
  %.0.i165 = phi float [ %790, %789 ], [ %792, %791 ], [ %795, %794 ], [ %797, %796 ], !dbg !59
  %798 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i168 = icmp eq i32 %798, 0, !dbg !59
  %799 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i171 = icmp eq i32 %799, 0, !dbg !59
  br i1 %.not.i168, label %805, label %800, !dbg !59

800:                                              ; preds = %__nv_sqrtf.exit167
  br i1 %.not1.i171, label %803, label %801, !dbg !59

801:                                              ; preds = %800
  %802 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %617) #4, !dbg !59
  br label %__nv_sqrtf.exit172, !dbg !59

803:                                              ; preds = %800
  %804 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %617) #4, !dbg !59
  br label %__nv_sqrtf.exit172, !dbg !59

805:                                              ; preds = %__nv_sqrtf.exit167
  br i1 %.not1.i171, label %808, label %806, !dbg !59

806:                                              ; preds = %805
  %807 = tail call float @llvm.nvvm.sqrt.rn.f(float %617) #4, !dbg !59
  br label %__nv_sqrtf.exit172, !dbg !59

808:                                              ; preds = %805
  %809 = tail call float @llvm.nvvm.sqrt.approx.f(float %617) #4, !dbg !59
  br label %__nv_sqrtf.exit172, !dbg !59

__nv_sqrtf.exit172:                               ; preds = %801, %803, %806, %808
  %.0.i170 = phi float [ %802, %801 ], [ %804, %803 ], [ %807, %806 ], [ %809, %808 ], !dbg !59
  %810 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !53
  %811 = extractvalue { i32, i32, i32, i32 } %561, 3, !dbg !55
  %812 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !53
  %813 = extractvalue { i32, i32, i32, i32 } %561, 2, !dbg !55
  %814 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !53
  %815 = extractvalue { i32, i32, i32, i32 } %561, 1, !dbg !55
  %816 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !53
  %817 = extractvalue { i32, i32, i32, i32 } %561, 0, !dbg !55
  %818 = insertelement <4 x i32> poison, i32 %816, i64 0, !dbg !53
  %819 = insertelement <4 x i32> %818, i32 %814, i64 1, !dbg !53
  %820 = insertelement <4 x i32> %819, i32 %812, i64 2, !dbg !53
  %821 = insertelement <4 x i32> %820, i32 %810, i64 3, !dbg !53
  %822 = bitcast <4 x i32> %821 to <4 x float>, !dbg !53
  %823 = insertelement <4 x i32> poison, i32 %817, i64 0, !dbg !55
  %824 = insertelement <4 x i32> %823, i32 %815, i64 1, !dbg !55
  %825 = insertelement <4 x i32> %824, i32 %813, i64 2, !dbg !55
  %826 = insertelement <4 x i32> %825, i32 %811, i64 3, !dbg !55
  %827 = bitcast <4 x i32> %826 to <4 x float>, !dbg !55
  %828 = fsub <4 x float> %822, %827, !dbg !60
  %829 = extractvalue { i32, i32, i32, i32 } %548, 3, !dbg !53
  %830 = extractvalue { i32, i32, i32, i32 } %560, 3, !dbg !55
  %831 = extractvalue { i32, i32, i32, i32 } %548, 2, !dbg !53
  %832 = extractvalue { i32, i32, i32, i32 } %560, 2, !dbg !55
  %833 = extractvalue { i32, i32, i32, i32 } %548, 1, !dbg !53
  %834 = extractvalue { i32, i32, i32, i32 } %560, 1, !dbg !55
  %835 = extractvalue { i32, i32, i32, i32 } %548, 0, !dbg !53
  %836 = extractvalue { i32, i32, i32, i32 } %560, 0, !dbg !55
  %837 = insertelement <4 x i32> poison, i32 %835, i64 0, !dbg !53
  %838 = insertelement <4 x i32> %837, i32 %833, i64 1, !dbg !53
  %839 = insertelement <4 x i32> %838, i32 %831, i64 2, !dbg !53
  %840 = insertelement <4 x i32> %839, i32 %829, i64 3, !dbg !53
  %841 = bitcast <4 x i32> %840 to <4 x float>, !dbg !53
  %842 = insertelement <4 x i32> poison, i32 %836, i64 0, !dbg !55
  %843 = insertelement <4 x i32> %842, i32 %834, i64 1, !dbg !55
  %844 = insertelement <4 x i32> %843, i32 %832, i64 2, !dbg !55
  %845 = insertelement <4 x i32> %844, i32 %830, i64 3, !dbg !55
  %846 = bitcast <4 x i32> %845 to <4 x float>, !dbg !55
  %847 = fsub <4 x float> %841, %846, !dbg !60
  %848 = extractvalue { i32, i32, i32, i32 } %547, 3, !dbg !53
  %849 = extractvalue { i32, i32, i32, i32 } %559, 3, !dbg !55
  %850 = extractvalue { i32, i32, i32, i32 } %547, 2, !dbg !53
  %851 = extractvalue { i32, i32, i32, i32 } %559, 2, !dbg !55
  %852 = extractvalue { i32, i32, i32, i32 } %547, 1, !dbg !53
  %853 = extractvalue { i32, i32, i32, i32 } %559, 1, !dbg !55
  %854 = extractvalue { i32, i32, i32, i32 } %547, 0, !dbg !53
  %855 = extractvalue { i32, i32, i32, i32 } %559, 0, !dbg !55
  %856 = insertelement <4 x i32> poison, i32 %854, i64 0, !dbg !53
  %857 = insertelement <4 x i32> %856, i32 %852, i64 1, !dbg !53
  %858 = insertelement <4 x i32> %857, i32 %850, i64 2, !dbg !53
  %859 = insertelement <4 x i32> %858, i32 %848, i64 3, !dbg !53
  %860 = bitcast <4 x i32> %859 to <4 x float>, !dbg !53
  %861 = insertelement <4 x i32> poison, i32 %855, i64 0, !dbg !55
  %862 = insertelement <4 x i32> %861, i32 %853, i64 1, !dbg !55
  %863 = insertelement <4 x i32> %862, i32 %851, i64 2, !dbg !55
  %864 = insertelement <4 x i32> %863, i32 %849, i64 3, !dbg !55
  %865 = bitcast <4 x i32> %864 to <4 x float>, !dbg !55
  %866 = fsub <4 x float> %860, %865, !dbg !60
  %867 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !53
  %868 = extractvalue { i32, i32, i32, i32 } %558, 3, !dbg !55
  %869 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !53
  %870 = extractvalue { i32, i32, i32, i32 } %558, 2, !dbg !55
  %871 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !53
  %872 = extractvalue { i32, i32, i32, i32 } %558, 1, !dbg !55
  %873 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !53
  %874 = extractvalue { i32, i32, i32, i32 } %558, 0, !dbg !55
  %875 = insertelement <4 x i32> poison, i32 %873, i64 0, !dbg !53
  %876 = insertelement <4 x i32> %875, i32 %871, i64 1, !dbg !53
  %877 = insertelement <4 x i32> %876, i32 %869, i64 2, !dbg !53
  %878 = insertelement <4 x i32> %877, i32 %867, i64 3, !dbg !53
  %879 = bitcast <4 x i32> %878 to <4 x float>, !dbg !53
  %880 = insertelement <4 x i32> poison, i32 %874, i64 0, !dbg !55
  %881 = insertelement <4 x i32> %880, i32 %872, i64 1, !dbg !55
  %882 = insertelement <4 x i32> %881, i32 %870, i64 2, !dbg !55
  %883 = insertelement <4 x i32> %882, i32 %868, i64 3, !dbg !55
  %884 = bitcast <4 x i32> %883 to <4 x float>, !dbg !55
  %885 = fsub <4 x float> %879, %884, !dbg !60
  %886 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !35
  %887 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !37
  %888 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !44
  %889 = extractvalue { i32, i32, i32, i32 } %526, 3, !dbg !46
  %890 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !35
  %891 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !37
  %892 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !44
  %893 = extractvalue { i32, i32, i32, i32 } %526, 2, !dbg !46
  %894 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !35
  %895 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !37
  %896 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !44
  %897 = extractvalue { i32, i32, i32, i32 } %526, 1, !dbg !46
  %898 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !35
  %899 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !37
  %900 = insertelement <4 x i32> poison, i32 %898, i64 0, !dbg !35
  %901 = insertelement <4 x i32> %900, i32 %894, i64 1, !dbg !35
  %902 = insertelement <4 x i32> %901, i32 %890, i64 2, !dbg !35
  %903 = insertelement <4 x i32> %902, i32 %886, i64 3, !dbg !35
  %904 = bitcast <4 x i32> %903 to <4 x float>, !dbg !35
  %905 = insertelement <4 x i32> poison, i32 %899, i64 0, !dbg !37
  %906 = insertelement <4 x i32> %905, i32 %895, i64 1, !dbg !37
  %907 = insertelement <4 x i32> %906, i32 %891, i64 2, !dbg !37
  %908 = insertelement <4 x i32> %907, i32 %887, i64 3, !dbg !37
  %909 = bitcast <4 x i32> %908 to <4 x float>, !dbg !37
  %910 = fsub <4 x float> %904, %909, !dbg !61
  %911 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !44
  %912 = extractvalue { i32, i32, i32, i32 } %526, 0, !dbg !46
  %913 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !35
  %914 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !37
  %915 = extractvalue { i32, i32, i32, i32 } %517, 3, !dbg !44
  %916 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !46
  %917 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !35
  %918 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !37
  %919 = extractvalue { i32, i32, i32, i32 } %517, 2, !dbg !44
  %920 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !46
  %921 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !35
  %922 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !37
  %923 = extractvalue { i32, i32, i32, i32 } %517, 1, !dbg !44
  %924 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !46
  %925 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !35
  %926 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !37
  %927 = insertelement <4 x i32> poison, i32 %925, i64 0, !dbg !35
  %928 = insertelement <4 x i32> %927, i32 %921, i64 1, !dbg !35
  %929 = insertelement <4 x i32> %928, i32 %917, i64 2, !dbg !35
  %930 = insertelement <4 x i32> %929, i32 %913, i64 3, !dbg !35
  %931 = bitcast <4 x i32> %930 to <4 x float>, !dbg !35
  %932 = insertelement <4 x i32> poison, i32 %926, i64 0, !dbg !37
  %933 = insertelement <4 x i32> %932, i32 %922, i64 1, !dbg !37
  %934 = insertelement <4 x i32> %933, i32 %918, i64 2, !dbg !37
  %935 = insertelement <4 x i32> %934, i32 %914, i64 3, !dbg !37
  %936 = bitcast <4 x i32> %935 to <4 x float>, !dbg !37
  %937 = fsub <4 x float> %931, %936, !dbg !61
  %938 = extractvalue { i32, i32, i32, i32 } %517, 0, !dbg !44
  %939 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !46
  %940 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !35
  %941 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !37
  %942 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !44
  %943 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !46
  %944 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !35
  %945 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !37
  %946 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !44
  %947 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !46
  %948 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !35
  %949 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !37
  %950 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !44
  %951 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !46
  %952 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !35
  %953 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !37
  %954 = insertelement <4 x i32> poison, i32 %952, i64 0, !dbg !35
  %955 = insertelement <4 x i32> %954, i32 %948, i64 1, !dbg !35
  %956 = insertelement <4 x i32> %955, i32 %944, i64 2, !dbg !35
  %957 = insertelement <4 x i32> %956, i32 %940, i64 3, !dbg !35
  %958 = bitcast <4 x i32> %957 to <4 x float>, !dbg !35
  %959 = insertelement <4 x i32> poison, i32 %953, i64 0, !dbg !37
  %960 = insertelement <4 x i32> %959, i32 %949, i64 1, !dbg !37
  %961 = insertelement <4 x i32> %960, i32 %945, i64 2, !dbg !37
  %962 = insertelement <4 x i32> %961, i32 %941, i64 3, !dbg !37
  %963 = bitcast <4 x i32> %962 to <4 x float>, !dbg !37
  %964 = fsub <4 x float> %958, %963, !dbg !61
  %965 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !44
  %966 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !46
  %967 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !35
  %968 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !37
  %969 = extractvalue { i32, i32, i32, i32 } %515, 3, !dbg !44
  %970 = extractvalue { i32, i32, i32, i32 } %523, 3, !dbg !46
  %971 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !35
  %972 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !37
  %973 = extractvalue { i32, i32, i32, i32 } %515, 2, !dbg !44
  %974 = extractvalue { i32, i32, i32, i32 } %523, 2, !dbg !46
  %975 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !35
  %976 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !37
  %977 = extractvalue { i32, i32, i32, i32 } %515, 1, !dbg !44
  %978 = extractvalue { i32, i32, i32, i32 } %523, 1, !dbg !46
  %979 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !35
  %980 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !37
  %981 = insertelement <4 x i32> poison, i32 %979, i64 0, !dbg !35
  %982 = insertelement <4 x i32> %981, i32 %975, i64 1, !dbg !35
  %983 = insertelement <4 x i32> %982, i32 %971, i64 2, !dbg !35
  %984 = insertelement <4 x i32> %983, i32 %967, i64 3, !dbg !35
  %985 = bitcast <4 x i32> %984 to <4 x float>, !dbg !35
  %986 = insertelement <4 x i32> poison, i32 %980, i64 0, !dbg !37
  %987 = insertelement <4 x i32> %986, i32 %976, i64 1, !dbg !37
  %988 = insertelement <4 x i32> %987, i32 %972, i64 2, !dbg !37
  %989 = insertelement <4 x i32> %988, i32 %968, i64 3, !dbg !37
  %990 = bitcast <4 x i32> %989 to <4 x float>, !dbg !37
  %991 = fsub <4 x float> %985, %990, !dbg !61
  %992 = extractvalue { i32, i32, i32, i32 } %515, 0, !dbg !44
  %993 = extractvalue { i32, i32, i32, i32 } %523, 0, !dbg !46
  %994 = and i1 %50, %64, !dbg !25
  %.frozen173 = freeze i32 %41, !dbg !62
  %995 = sdiv i32 %.frozen173, 64, !dbg !62
  %996 = srem i32 %995, 2, !dbg !63
  %.frozen175 = freeze i32 %40, !dbg !62
  %997 = sdiv i32 %.frozen175, 64, !dbg !62
  %998 = srem i32 %997, 2, !dbg !63
  %.frozen177 = freeze i32 %39, !dbg !62
  %999 = sdiv i32 %.frozen177, 64, !dbg !62
  %1000 = srem i32 %999, 2, !dbg !63
  %.frozen179 = freeze i32 %38, !dbg !62
  %1001 = sdiv i32 %.frozen179, 64, !dbg !62
  %1002 = srem i32 %1001, 2, !dbg !63
  %1003 = mul i32 %995, 64, !dbg !64
  %.decomposed174 = sub i32 %.frozen173, %1003, !dbg !64
  %1004 = mul i32 %997, 64, !dbg !64
  %.decomposed176 = sub i32 %.frozen175, %1004, !dbg !64
  %1005 = mul i32 %999, 64, !dbg !64
  %.decomposed178 = sub i32 %.frozen177, %1005, !dbg !64
  %1006 = mul i32 %1001, 64, !dbg !64
  %.decomposed180 = sub i32 %.frozen179, %1006, !dbg !64
  %1007 = sdiv i32 %41, 128, !dbg !20
  %1008 = sdiv i32 %40, 128, !dbg !20
  %1009 = sdiv i32 %39, 128, !dbg !20
  %1010 = sdiv i32 %38, 128, !dbg !20
  %1011 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i95) #4, !dbg !65
  %1012 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i100) #4, !dbg !65
  %1013 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i105) #4, !dbg !65
  %1014 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i110) #4, !dbg !65
  %1015 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i115) #4, !dbg !65
  %1016 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i120) #4, !dbg !65
  %1017 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i125) #4, !dbg !65
  %1018 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i130) #4, !dbg !65
  %1019 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i135) #4, !dbg !65
  %1020 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i140) #4, !dbg !65
  %1021 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i145) #4, !dbg !65
  %1022 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i150) #4, !dbg !65
  %1023 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i155) #4, !dbg !65
  %1024 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i160) #4, !dbg !65
  %1025 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i165) #4, !dbg !65
  %1026 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i170) #4, !dbg !65
  %1027 = getelementptr float, ptr addrspace(1) %8, i64 %550, !dbg !66
  %1028 = getelementptr float, ptr addrspace(1) %8, i64 %552, !dbg !66
  %1029 = getelementptr float, ptr addrspace(1) %8, i64 %554, !dbg !66
  %1030 = getelementptr float, ptr addrspace(1) %8, i64 %556, !dbg !66
  %1031 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1027, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !67
  %1032 = extractvalue { i32, i32, i32, i32 } %1031, 0, !dbg !67
  %1033 = extractvalue { i32, i32, i32, i32 } %1031, 1, !dbg !67
  %1034 = extractvalue { i32, i32, i32, i32 } %1031, 2, !dbg !67
  %1035 = extractvalue { i32, i32, i32, i32 } %1031, 3, !dbg !67
  %1036 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1028, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !67
  %1037 = extractvalue { i32, i32, i32, i32 } %1036, 0, !dbg !67
  %1038 = extractvalue { i32, i32, i32, i32 } %1036, 1, !dbg !67
  %1039 = extractvalue { i32, i32, i32, i32 } %1036, 2, !dbg !67
  %1040 = extractvalue { i32, i32, i32, i32 } %1036, 3, !dbg !67
  %1041 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1029, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !67
  %1042 = extractvalue { i32, i32, i32, i32 } %1041, 0, !dbg !67
  %1043 = extractvalue { i32, i32, i32, i32 } %1041, 1, !dbg !67
  %1044 = extractvalue { i32, i32, i32, i32 } %1041, 2, !dbg !67
  %1045 = extractvalue { i32, i32, i32, i32 } %1041, 3, !dbg !67
  %1046 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1030, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !67
  %1047 = extractvalue { i32, i32, i32, i32 } %1046, 0, !dbg !67
  %1048 = extractvalue { i32, i32, i32, i32 } %1046, 1, !dbg !67
  %1049 = extractvalue { i32, i32, i32, i32 } %1046, 2, !dbg !67
  %1050 = extractvalue { i32, i32, i32, i32 } %1046, 3, !dbg !67
  %1051 = getelementptr float, ptr addrspace(1) %9, i64 %550, !dbg !68
  %1052 = getelementptr float, ptr addrspace(1) %9, i64 %552, !dbg !68
  %1053 = getelementptr float, ptr addrspace(1) %9, i64 %554, !dbg !68
  %1054 = getelementptr float, ptr addrspace(1) %9, i64 %556, !dbg !68
  %1055 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1051, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !69
  %1056 = extractvalue { i32, i32, i32, i32 } %1055, 0, !dbg !69
  %1057 = extractvalue { i32, i32, i32, i32 } %1055, 1, !dbg !69
  %1058 = extractvalue { i32, i32, i32, i32 } %1055, 2, !dbg !69
  %1059 = extractvalue { i32, i32, i32, i32 } %1055, 3, !dbg !69
  %1060 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1052, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !69
  %1061 = extractvalue { i32, i32, i32, i32 } %1060, 0, !dbg !69
  %1062 = extractvalue { i32, i32, i32, i32 } %1060, 1, !dbg !69
  %1063 = extractvalue { i32, i32, i32, i32 } %1060, 2, !dbg !69
  %1064 = extractvalue { i32, i32, i32, i32 } %1060, 3, !dbg !69
  %1065 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1053, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !69
  %1066 = extractvalue { i32, i32, i32, i32 } %1065, 0, !dbg !69
  %1067 = extractvalue { i32, i32, i32, i32 } %1065, 1, !dbg !69
  %1068 = extractvalue { i32, i32, i32, i32 } %1065, 2, !dbg !69
  %1069 = extractvalue { i32, i32, i32, i32 } %1065, 3, !dbg !69
  %1070 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1054, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545, i32 0, i1 %545) #4, !dbg !69
  %1071 = extractvalue { i32, i32, i32, i32 } %1070, 0, !dbg !69
  %1072 = extractvalue { i32, i32, i32, i32 } %1070, 1, !dbg !69
  %1073 = extractvalue { i32, i32, i32, i32 } %1070, 2, !dbg !69
  %1074 = extractvalue { i32, i32, i32, i32 } %1070, 3, !dbg !69
  %1075 = shl nsw i32 %1002, 6, !dbg !70
  %1076 = shl nsw i32 %1000, 6, !dbg !70
  %1077 = shl nsw i32 %998, 6, !dbg !70
  %1078 = shl nsw i32 %996, 6, !dbg !70
  %1079 = shl nsw i32 %.decomposed180, 7, !dbg !71
  %1080 = shl nsw i32 %.decomposed178, 7, !dbg !71
  %1081 = shl nsw i32 %.decomposed176, 7, !dbg !71
  %1082 = shl nsw i32 %.decomposed174, 7, !dbg !71
  %1083 = shl i32 %1010, 13, !dbg !72
  %1084 = shl i32 %1009, 13, !dbg !72
  %1085 = shl i32 %1008, 13, !dbg !72
  %1086 = shl i32 %1007, 13, !dbg !72
  %1087 = shl i32 %65, 13, !dbg !72
  %1088 = add i32 %1079, %61, !dbg !73
  %1089 = add i32 %1088, %1083, !dbg !74
  %1090 = add i32 %1089, %1075, !dbg !75
  %1091 = add i32 %1080, %61, !dbg !73
  %1092 = add i32 %1091, %1084, !dbg !74
  %1093 = add i32 %1092, %1076, !dbg !75
  %1094 = add i32 %1081, %61, !dbg !73
  %1095 = add i32 %1094, %1085, !dbg !74
  %1096 = add i32 %1095, %1077, !dbg !75
  %1097 = add i32 %1082, %61, !dbg !73
  %1098 = add i32 %1097, %1086, !dbg !74
  %1099 = add i32 %1098, %1078, !dbg !75
  %1100 = sext i32 %1090 to i64, !dbg !76
  %1101 = getelementptr float, ptr addrspace(1) %11, i64 %1100, !dbg !76
  %1102 = sext i32 %1093 to i64, !dbg !76
  %1103 = getelementptr float, ptr addrspace(1) %11, i64 %1102, !dbg !76
  %1104 = sext i32 %1096 to i64, !dbg !76
  %1105 = getelementptr float, ptr addrspace(1) %11, i64 %1104, !dbg !76
  %1106 = sext i32 %1099 to i64, !dbg !76
  %1107 = getelementptr float, ptr addrspace(1) %11, i64 %1106, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1108 = shl i32 %18, 8, !dbg !77
  %1109 = and i32 %1108, 3840, !dbg !77
  %1110 = or disjoint i32 %1109, %.lobit1, !dbg !77
  %1111 = or disjoint i32 %1110, %55, !dbg !77
  %1112 = or disjoint i32 %1111, %57, !dbg !77
  %1113 = or disjoint i32 %1112, %59, !dbg !77
  %1114 = and i32 %53, 1020, !dbg !77
  %1115 = lshr exact i32 %1109, 2, !dbg !77
  %1116 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1115, !dbg !77
  %1117 = getelementptr float, ptr addrspace(3) %1116, i32 %1113, !dbg !77
  %1118 = xor i32 %1113, 16, !dbg !77
  %1119 = lshr i32 %1118, 4, !dbg !77
  %1120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1119, !dbg !77
  %1121 = getelementptr float, ptr addrspace(3) %1120, i32 %1118, !dbg !77
  %1122 = xor i32 %1113, 32, !dbg !77
  %1123 = lshr i32 %1122, 4, !dbg !77
  %1124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1123, !dbg !77
  %1125 = getelementptr float, ptr addrspace(3) %1124, i32 %1122, !dbg !77
  %1126 = xor i32 %1113, 48, !dbg !77
  %1127 = lshr i32 %1126, 4, !dbg !77
  %1128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1127, !dbg !77
  %1129 = getelementptr float, ptr addrspace(3) %1128, i32 %1126, !dbg !77
  %1130 = xor i32 %1113, 64, !dbg !77
  %1131 = lshr i32 %1130, 4, !dbg !77
  %1132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1131, !dbg !77
  %1133 = getelementptr float, ptr addrspace(3) %1132, i32 %1130, !dbg !77
  %1134 = xor i32 %1113, 80, !dbg !77
  %1135 = lshr i32 %1134, 4, !dbg !77
  %1136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1135, !dbg !77
  %1137 = getelementptr float, ptr addrspace(3) %1136, i32 %1134, !dbg !77
  %1138 = xor i32 %1113, 96, !dbg !77
  %1139 = lshr i32 %1138, 4, !dbg !77
  %1140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1139, !dbg !77
  %1141 = getelementptr float, ptr addrspace(3) %1140, i32 %1138, !dbg !77
  %1142 = xor i32 %1113, 112, !dbg !77
  %1143 = lshr i32 %1142, 4, !dbg !77
  %1144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1143, !dbg !77
  %1145 = getelementptr float, ptr addrspace(3) %1144, i32 %1142, !dbg !77
  %1146 = xor i32 %1113, 128, !dbg !77
  %1147 = lshr i32 %1146, 4, !dbg !77
  %1148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1147, !dbg !77
  %1149 = getelementptr float, ptr addrspace(3) %1148, i32 %1146, !dbg !77
  %1150 = xor i32 %1113, 144, !dbg !77
  %1151 = lshr i32 %1150, 4, !dbg !77
  %1152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1151, !dbg !77
  %1153 = getelementptr float, ptr addrspace(3) %1152, i32 %1150, !dbg !77
  %1154 = xor i32 %1113, 160, !dbg !77
  %1155 = lshr i32 %1154, 4, !dbg !77
  %1156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1155, !dbg !77
  %1157 = getelementptr float, ptr addrspace(3) %1156, i32 %1154, !dbg !77
  %1158 = xor i32 %1113, 176, !dbg !77
  %1159 = lshr i32 %1158, 4, !dbg !77
  %1160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1159, !dbg !77
  %1161 = getelementptr float, ptr addrspace(3) %1160, i32 %1158, !dbg !77
  %1162 = xor i32 %1113, 192, !dbg !77
  %1163 = lshr i32 %1162, 4, !dbg !77
  %1164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1163, !dbg !77
  %1165 = getelementptr float, ptr addrspace(3) %1164, i32 %1162, !dbg !77
  %1166 = xor i32 %1113, 208, !dbg !77
  %1167 = lshr i32 %1166, 4, !dbg !77
  %1168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1167, !dbg !77
  %1169 = getelementptr float, ptr addrspace(3) %1168, i32 %1166, !dbg !77
  %1170 = xor i32 %1113, 224, !dbg !77
  %1171 = lshr i32 %1170, 4, !dbg !77
  %1172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1171, !dbg !77
  %1173 = getelementptr float, ptr addrspace(3) %1172, i32 %1170, !dbg !77
  %1174 = xor i32 %1113, 240, !dbg !77
  %1175 = lshr i32 %1174, 4, !dbg !77
  %1176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1175, !dbg !77
  %1177 = getelementptr float, ptr addrspace(3) %1176, i32 %1174, !dbg !77
  %1178 = lshr i32 %1114, 4, !dbg !77
  %1179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1178, !dbg !77
  %1180 = getelementptr inbounds float, ptr addrspace(3) %1179, i32 %1114, !dbg !77
  %1181 = or disjoint i32 %1114, 1, !dbg !77
  %1182 = getelementptr inbounds float, ptr addrspace(3) %1179, i32 %1181, !dbg !77
  %1183 = or disjoint i32 %1114, 2, !dbg !77
  %1184 = getelementptr inbounds float, ptr addrspace(3) %1179, i32 %1183, !dbg !77
  %1185 = or disjoint i32 %1114, 3, !dbg !77
  %1186 = getelementptr inbounds float, ptr addrspace(3) %1179, i32 %1185, !dbg !77
  %1187 = or disjoint i32 %1114, 1024, !dbg !77
  %1188 = lshr i32 %1187, 4, !dbg !77
  %1189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1188, !dbg !77
  %1190 = getelementptr inbounds float, ptr addrspace(3) %1189, i32 %1187, !dbg !77
  %1191 = or disjoint i32 %1114, 1025, !dbg !77
  %1192 = lshr i32 %1191, 4, !dbg !77
  %1193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1192, !dbg !77
  %1194 = getelementptr inbounds float, ptr addrspace(3) %1193, i32 %1191, !dbg !77
  %1195 = or disjoint i32 %1114, 1026, !dbg !77
  %1196 = lshr i32 %1195, 4, !dbg !77
  %1197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1196, !dbg !77
  %1198 = getelementptr inbounds float, ptr addrspace(3) %1197, i32 %1195, !dbg !77
  %1199 = or disjoint i32 %1114, 1027, !dbg !77
  %1200 = lshr i32 %1199, 4, !dbg !77
  %1201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1200, !dbg !77
  %1202 = getelementptr inbounds float, ptr addrspace(3) %1201, i32 %1199, !dbg !77
  %1203 = or disjoint i32 %1114, 2048, !dbg !77
  %1204 = lshr i32 %1203, 4, !dbg !77
  %1205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1204, !dbg !77
  %1206 = getelementptr inbounds float, ptr addrspace(3) %1205, i32 %1203, !dbg !77
  %1207 = or disjoint i32 %1114, 2049, !dbg !77
  %1208 = lshr i32 %1207, 4, !dbg !77
  %1209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1208, !dbg !77
  %1210 = getelementptr inbounds float, ptr addrspace(3) %1209, i32 %1207, !dbg !77
  %1211 = or disjoint i32 %1114, 2050, !dbg !77
  %1212 = lshr i32 %1211, 4, !dbg !77
  %1213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1212, !dbg !77
  %1214 = getelementptr inbounds float, ptr addrspace(3) %1213, i32 %1211, !dbg !77
  %1215 = or disjoint i32 %1114, 2051, !dbg !77
  %1216 = lshr i32 %1215, 4, !dbg !77
  %1217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1216, !dbg !77
  %1218 = getelementptr inbounds float, ptr addrspace(3) %1217, i32 %1215, !dbg !77
  %1219 = or disjoint i32 %1114, 3072, !dbg !77
  %1220 = lshr i32 %1219, 4, !dbg !77
  %1221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1220, !dbg !77
  %1222 = getelementptr inbounds float, ptr addrspace(3) %1221, i32 %1219, !dbg !77
  %1223 = or disjoint i32 %1114, 3073, !dbg !77
  %1224 = lshr i32 %1223, 4, !dbg !77
  %1225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1224, !dbg !77
  %1226 = getelementptr inbounds float, ptr addrspace(3) %1225, i32 %1223, !dbg !77
  %1227 = or disjoint i32 %1114, 3074, !dbg !77
  %1228 = lshr i32 %1227, 4, !dbg !77
  %1229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1228, !dbg !77
  %1230 = getelementptr inbounds float, ptr addrspace(3) %1229, i32 %1227, !dbg !77
  %1231 = or disjoint i32 %1114, 3075, !dbg !77
  %1232 = lshr i32 %1231, 4, !dbg !77
  %1233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1232, !dbg !77
  %1234 = getelementptr inbounds float, ptr addrspace(3) %1233, i32 %1231, !dbg !77
  %1235 = shl i32 %62, 7, !dbg !78
  %1236 = add i32 %1235, %.decomposed, !dbg !79
  %1237 = add i32 %1236, %1087, !dbg !80
  %1238 = sext i32 %1237 to i64, !dbg !81
  %1239 = getelementptr i1, ptr addrspace(1) %12, i64 %1238, !dbg !81
  %1240 = insertelement <4 x float> poison, float %495, i64 0, !dbg !82
  %1241 = insertelement <4 x float> %1240, float %496, i64 1, !dbg !82
  %1242 = insertelement <4 x float> %1241, float %497, i64 2, !dbg !82
  %1243 = insertelement <4 x float> %1242, float %498, i64 3, !dbg !82
  %1244 = fmul <4 x float> %991, %1243, !dbg !82
  %1245 = insertelement <4 x i32> poison, i32 %992, i64 0, !dbg !44
  %1246 = insertelement <4 x i32> %1245, i32 %977, i64 1, !dbg !44
  %1247 = insertelement <4 x i32> %1246, i32 %973, i64 2, !dbg !44
  %1248 = insertelement <4 x i32> %1247, i32 %969, i64 3, !dbg !44
  %1249 = bitcast <4 x i32> %1248 to <4 x float>, !dbg !44
  %1250 = fmul <4 x float> %1244, %1249, !dbg !83
  %1251 = insertelement <4 x i32> poison, i32 %993, i64 0, !dbg !46
  %1252 = insertelement <4 x i32> %1251, i32 %978, i64 1, !dbg !46
  %1253 = insertelement <4 x i32> %1252, i32 %974, i64 2, !dbg !46
  %1254 = insertelement <4 x i32> %1253, i32 %970, i64 3, !dbg !46
  %1255 = bitcast <4 x i32> %1254 to <4 x float>, !dbg !46
  %1256 = fadd <4 x float> %1250, %1255, !dbg !84
  %1257 = fcmp olt <4 x float> %1256, zeroinitializer, !dbg !85
  %1258 = select <4 x i1> %1257, <4 x float> zeroinitializer, <4 x float> %1256, !dbg !89
  %1259 = insertelement <4 x float> poison, float %1011, i64 0, !dbg !90
  %1260 = insertelement <4 x float> %1259, float %1012, i64 1, !dbg !90
  %1261 = insertelement <4 x float> %1260, float %1013, i64 2, !dbg !90
  %1262 = insertelement <4 x float> %1261, float %1014, i64 3, !dbg !90
  %1263 = fmul <4 x float> %885, %1262, !dbg !90
  %1264 = insertelement <4 x i32> poison, i32 %1032, i64 0, !dbg !67
  %1265 = insertelement <4 x i32> %1264, i32 %1033, i64 1, !dbg !67
  %1266 = insertelement <4 x i32> %1265, i32 %1034, i64 2, !dbg !67
  %1267 = insertelement <4 x i32> %1266, i32 %1035, i64 3, !dbg !67
  %1268 = bitcast <4 x i32> %1267 to <4 x float>, !dbg !67
  %1269 = fmul <4 x float> %1263, %1268, !dbg !91
  %1270 = insertelement <4 x i32> poison, i32 %1056, i64 0, !dbg !69
  %1271 = insertelement <4 x i32> %1270, i32 %1057, i64 1, !dbg !69
  %1272 = insertelement <4 x i32> %1271, i32 %1058, i64 2, !dbg !69
  %1273 = insertelement <4 x i32> %1272, i32 %1059, i64 3, !dbg !69
  %1274 = bitcast <4 x i32> %1273 to <4 x float>, !dbg !69
  %1275 = fadd <4 x float> %1269, %1274, !dbg !92
  %1276 = fcmp olt <4 x float> %1275, zeroinitializer, !dbg !93
  %1277 = select <4 x i1> %1276, <4 x float> zeroinitializer, <4 x float> %1275, !dbg !95
  %1278 = insertelement <4 x i1> poison, i1 %213, i64 0, !dbg !96
  %1279 = shufflevector <4 x i1> %1278, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !96
  %1280 = select <4 x i1> %1279, <4 x float> %1258, <4 x float> %1277, !dbg !96
  %1281 = fadd <4 x float> %206, %1280, !dbg !97
  %1282 = fcmp olt <4 x float> %1281, zeroinitializer, !dbg !98
  %1283 = select <4 x i1> %1282, <4 x float> zeroinitializer, <4 x float> %1281, !dbg !100
  %1284 = fcmp ole <4 x float> %1283, zeroinitializer, !dbg !101
  %1285 = extractelement <4 x float> %1283, i64 0, !dbg !77
  %1286 = bitcast float %1285 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1117, <1 x i32> %1286, i1 true) #4, !dbg !77
  %1287 = extractelement <4 x float> %1283, i64 1, !dbg !77
  %1288 = bitcast float %1287 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1121, <1 x i32> %1288, i1 true) #4, !dbg !77
  %1289 = extractelement <4 x float> %1283, i64 2, !dbg !77
  %1290 = bitcast float %1289 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1125, <1 x i32> %1290, i1 true) #4, !dbg !77
  %1291 = extractelement <4 x float> %1283, i64 3, !dbg !77
  %1292 = bitcast float %1291 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1129, <1 x i32> %1292, i1 true) #4, !dbg !77
  %1293 = insertelement <4 x float> poison, float %499, i64 0, !dbg !82
  %1294 = insertelement <4 x float> %1293, float %500, i64 1, !dbg !82
  %1295 = insertelement <4 x float> %1294, float %501, i64 2, !dbg !82
  %1296 = insertelement <4 x float> %1295, float %502, i64 3, !dbg !82
  %1297 = fmul <4 x float> %964, %1296, !dbg !82
  %1298 = insertelement <4 x i32> poison, i32 %965, i64 0, !dbg !44
  %1299 = insertelement <4 x i32> %1298, i32 %950, i64 1, !dbg !44
  %1300 = insertelement <4 x i32> %1299, i32 %946, i64 2, !dbg !44
  %1301 = insertelement <4 x i32> %1300, i32 %942, i64 3, !dbg !44
  %1302 = bitcast <4 x i32> %1301 to <4 x float>, !dbg !44
  %1303 = fmul <4 x float> %1297, %1302, !dbg !83
  %1304 = insertelement <4 x i32> poison, i32 %966, i64 0, !dbg !46
  %1305 = insertelement <4 x i32> %1304, i32 %951, i64 1, !dbg !46
  %1306 = insertelement <4 x i32> %1305, i32 %947, i64 2, !dbg !46
  %1307 = insertelement <4 x i32> %1306, i32 %943, i64 3, !dbg !46
  %1308 = bitcast <4 x i32> %1307 to <4 x float>, !dbg !46
  %1309 = fadd <4 x float> %1303, %1308, !dbg !84
  %1310 = fcmp olt <4 x float> %1309, zeroinitializer, !dbg !85
  %1311 = select <4 x i1> %1310, <4 x float> zeroinitializer, <4 x float> %1309, !dbg !89
  %1312 = insertelement <4 x float> poison, float %1015, i64 0, !dbg !90
  %1313 = insertelement <4 x float> %1312, float %1016, i64 1, !dbg !90
  %1314 = insertelement <4 x float> %1313, float %1017, i64 2, !dbg !90
  %1315 = insertelement <4 x float> %1314, float %1018, i64 3, !dbg !90
  %1316 = fmul <4 x float> %866, %1315, !dbg !90
  %1317 = insertelement <4 x i32> poison, i32 %1037, i64 0, !dbg !67
  %1318 = insertelement <4 x i32> %1317, i32 %1038, i64 1, !dbg !67
  %1319 = insertelement <4 x i32> %1318, i32 %1039, i64 2, !dbg !67
  %1320 = insertelement <4 x i32> %1319, i32 %1040, i64 3, !dbg !67
  %1321 = bitcast <4 x i32> %1320 to <4 x float>, !dbg !67
  %1322 = fmul <4 x float> %1316, %1321, !dbg !91
  %1323 = insertelement <4 x i32> poison, i32 %1061, i64 0, !dbg !69
  %1324 = insertelement <4 x i32> %1323, i32 %1062, i64 1, !dbg !69
  %1325 = insertelement <4 x i32> %1324, i32 %1063, i64 2, !dbg !69
  %1326 = insertelement <4 x i32> %1325, i32 %1064, i64 3, !dbg !69
  %1327 = bitcast <4 x i32> %1326 to <4 x float>, !dbg !69
  %1328 = fadd <4 x float> %1322, %1327, !dbg !92
  %1329 = fcmp olt <4 x float> %1328, zeroinitializer, !dbg !93
  %1330 = select <4 x i1> %1329, <4 x float> zeroinitializer, <4 x float> %1328, !dbg !95
  %1331 = select <4 x i1> %1279, <4 x float> %1311, <4 x float> %1330, !dbg !96
  %1332 = fadd <4 x float> %208, %1331, !dbg !97
  %1333 = fcmp olt <4 x float> %1332, zeroinitializer, !dbg !98
  %1334 = select <4 x i1> %1333, <4 x float> zeroinitializer, <4 x float> %1332, !dbg !100
  %1335 = fcmp ole <4 x float> %1334, zeroinitializer, !dbg !101
  %1336 = extractelement <4 x float> %1334, i64 0, !dbg !77
  %1337 = bitcast float %1336 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1133, <1 x i32> %1337, i1 true) #4, !dbg !77
  %1338 = extractelement <4 x float> %1334, i64 1, !dbg !77
  %1339 = bitcast float %1338 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, <1 x i32> %1339, i1 true) #4, !dbg !77
  %1340 = extractelement <4 x float> %1334, i64 2, !dbg !77
  %1341 = bitcast float %1340 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1141, <1 x i32> %1341, i1 true) #4, !dbg !77
  %1342 = extractelement <4 x float> %1334, i64 3, !dbg !77
  %1343 = bitcast float %1342 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1145, <1 x i32> %1343, i1 true) #4, !dbg !77
  %1344 = insertelement <4 x float> poison, float %503, i64 0, !dbg !82
  %1345 = insertelement <4 x float> %1344, float %504, i64 1, !dbg !82
  %1346 = insertelement <4 x float> %1345, float %505, i64 2, !dbg !82
  %1347 = insertelement <4 x float> %1346, float %506, i64 3, !dbg !82
  %1348 = fmul <4 x float> %937, %1347, !dbg !82
  %1349 = insertelement <4 x i32> poison, i32 %938, i64 0, !dbg !44
  %1350 = insertelement <4 x i32> %1349, i32 %923, i64 1, !dbg !44
  %1351 = insertelement <4 x i32> %1350, i32 %919, i64 2, !dbg !44
  %1352 = insertelement <4 x i32> %1351, i32 %915, i64 3, !dbg !44
  %1353 = bitcast <4 x i32> %1352 to <4 x float>, !dbg !44
  %1354 = fmul <4 x float> %1348, %1353, !dbg !83
  %1355 = insertelement <4 x i32> poison, i32 %939, i64 0, !dbg !46
  %1356 = insertelement <4 x i32> %1355, i32 %924, i64 1, !dbg !46
  %1357 = insertelement <4 x i32> %1356, i32 %920, i64 2, !dbg !46
  %1358 = insertelement <4 x i32> %1357, i32 %916, i64 3, !dbg !46
  %1359 = bitcast <4 x i32> %1358 to <4 x float>, !dbg !46
  %1360 = fadd <4 x float> %1354, %1359, !dbg !84
  %1361 = fcmp olt <4 x float> %1360, zeroinitializer, !dbg !85
  %1362 = select <4 x i1> %1361, <4 x float> zeroinitializer, <4 x float> %1360, !dbg !89
  %1363 = insertelement <4 x float> poison, float %1019, i64 0, !dbg !90
  %1364 = insertelement <4 x float> %1363, float %1020, i64 1, !dbg !90
  %1365 = insertelement <4 x float> %1364, float %1021, i64 2, !dbg !90
  %1366 = insertelement <4 x float> %1365, float %1022, i64 3, !dbg !90
  %1367 = fmul <4 x float> %847, %1366, !dbg !90
  %1368 = insertelement <4 x i32> poison, i32 %1042, i64 0, !dbg !67
  %1369 = insertelement <4 x i32> %1368, i32 %1043, i64 1, !dbg !67
  %1370 = insertelement <4 x i32> %1369, i32 %1044, i64 2, !dbg !67
  %1371 = insertelement <4 x i32> %1370, i32 %1045, i64 3, !dbg !67
  %1372 = bitcast <4 x i32> %1371 to <4 x float>, !dbg !67
  %1373 = fmul <4 x float> %1367, %1372, !dbg !91
  %1374 = insertelement <4 x i32> poison, i32 %1066, i64 0, !dbg !69
  %1375 = insertelement <4 x i32> %1374, i32 %1067, i64 1, !dbg !69
  %1376 = insertelement <4 x i32> %1375, i32 %1068, i64 2, !dbg !69
  %1377 = insertelement <4 x i32> %1376, i32 %1069, i64 3, !dbg !69
  %1378 = bitcast <4 x i32> %1377 to <4 x float>, !dbg !69
  %1379 = fadd <4 x float> %1373, %1378, !dbg !92
  %1380 = fcmp olt <4 x float> %1379, zeroinitializer, !dbg !93
  %1381 = select <4 x i1> %1380, <4 x float> zeroinitializer, <4 x float> %1379, !dbg !95
  %1382 = select <4 x i1> %1279, <4 x float> %1362, <4 x float> %1381, !dbg !96
  %1383 = fadd <4 x float> %210, %1382, !dbg !97
  %1384 = fcmp olt <4 x float> %1383, zeroinitializer, !dbg !98
  %1385 = select <4 x i1> %1384, <4 x float> zeroinitializer, <4 x float> %1383, !dbg !100
  %1386 = fcmp ole <4 x float> %1385, zeroinitializer, !dbg !101
  %1387 = extractelement <4 x float> %1385, i64 0, !dbg !77
  %1388 = bitcast float %1387 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1149, <1 x i32> %1388, i1 true) #4, !dbg !77
  %1389 = extractelement <4 x float> %1385, i64 1, !dbg !77
  %1390 = bitcast float %1389 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1153, <1 x i32> %1390, i1 true) #4, !dbg !77
  %1391 = extractelement <4 x float> %1385, i64 2, !dbg !77
  %1392 = bitcast float %1391 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1157, <1 x i32> %1392, i1 true) #4, !dbg !77
  %1393 = extractelement <4 x float> %1385, i64 3, !dbg !77
  %1394 = bitcast float %1393 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1161, <1 x i32> %1394, i1 true) #4, !dbg !77
  %1395 = insertelement <4 x float> poison, float %507, i64 0, !dbg !82
  %1396 = insertelement <4 x float> %1395, float %508, i64 1, !dbg !82
  %1397 = insertelement <4 x float> %1396, float %509, i64 2, !dbg !82
  %1398 = insertelement <4 x float> %1397, float %510, i64 3, !dbg !82
  %1399 = fmul <4 x float> %910, %1398, !dbg !82
  %1400 = insertelement <4 x i32> poison, i32 %911, i64 0, !dbg !44
  %1401 = insertelement <4 x i32> %1400, i32 %896, i64 1, !dbg !44
  %1402 = insertelement <4 x i32> %1401, i32 %892, i64 2, !dbg !44
  %1403 = insertelement <4 x i32> %1402, i32 %888, i64 3, !dbg !44
  %1404 = bitcast <4 x i32> %1403 to <4 x float>, !dbg !44
  %1405 = fmul <4 x float> %1399, %1404, !dbg !83
  %1406 = insertelement <4 x i32> poison, i32 %912, i64 0, !dbg !46
  %1407 = insertelement <4 x i32> %1406, i32 %897, i64 1, !dbg !46
  %1408 = insertelement <4 x i32> %1407, i32 %893, i64 2, !dbg !46
  %1409 = insertelement <4 x i32> %1408, i32 %889, i64 3, !dbg !46
  %1410 = bitcast <4 x i32> %1409 to <4 x float>, !dbg !46
  %1411 = fadd <4 x float> %1405, %1410, !dbg !84
  %1412 = fcmp olt <4 x float> %1411, zeroinitializer, !dbg !85
  %1413 = select <4 x i1> %1412, <4 x float> zeroinitializer, <4 x float> %1411, !dbg !89
  %1414 = insertelement <4 x float> poison, float %1023, i64 0, !dbg !90
  %1415 = insertelement <4 x float> %1414, float %1024, i64 1, !dbg !90
  %1416 = insertelement <4 x float> %1415, float %1025, i64 2, !dbg !90
  %1417 = insertelement <4 x float> %1416, float %1026, i64 3, !dbg !90
  %1418 = fmul <4 x float> %828, %1417, !dbg !90
  %1419 = insertelement <4 x i32> poison, i32 %1047, i64 0, !dbg !67
  %1420 = insertelement <4 x i32> %1419, i32 %1048, i64 1, !dbg !67
  %1421 = insertelement <4 x i32> %1420, i32 %1049, i64 2, !dbg !67
  %1422 = insertelement <4 x i32> %1421, i32 %1050, i64 3, !dbg !67
  %1423 = bitcast <4 x i32> %1422 to <4 x float>, !dbg !67
  %1424 = fmul <4 x float> %1418, %1423, !dbg !91
  %1425 = insertelement <4 x i32> poison, i32 %1071, i64 0, !dbg !69
  %1426 = insertelement <4 x i32> %1425, i32 %1072, i64 1, !dbg !69
  %1427 = insertelement <4 x i32> %1426, i32 %1073, i64 2, !dbg !69
  %1428 = insertelement <4 x i32> %1427, i32 %1074, i64 3, !dbg !69
  %1429 = bitcast <4 x i32> %1428 to <4 x float>, !dbg !69
  %1430 = fadd <4 x float> %1424, %1429, !dbg !92
  %1431 = fcmp olt <4 x float> %1430, zeroinitializer, !dbg !93
  %1432 = select <4 x i1> %1431, <4 x float> zeroinitializer, <4 x float> %1430, !dbg !95
  %1433 = select <4 x i1> %1279, <4 x float> %1413, <4 x float> %1432, !dbg !96
  %1434 = fadd <4 x float> %212, %1433, !dbg !97
  %1435 = fcmp olt <4 x float> %1434, zeroinitializer, !dbg !98
  %1436 = select <4 x i1> %1435, <4 x float> zeroinitializer, <4 x float> %1434, !dbg !100
  %1437 = fcmp ole <4 x float> %1436, zeroinitializer, !dbg !101
  %1438 = extractelement <4 x float> %1436, i64 0, !dbg !77
  %1439 = bitcast float %1438 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1165, <1 x i32> %1439, i1 true) #4, !dbg !77
  %1440 = extractelement <4 x float> %1436, i64 1, !dbg !77
  %1441 = bitcast float %1440 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1169, <1 x i32> %1441, i1 true) #4, !dbg !77
  %1442 = extractelement <4 x float> %1436, i64 2, !dbg !77
  %1443 = bitcast float %1442 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1173, <1 x i32> %1443, i1 true) #4, !dbg !77
  %1444 = extractelement <4 x float> %1436, i64 3, !dbg !77
  %1445 = bitcast float %1444 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1177, <1 x i32> %1445, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1446 = load i32, ptr addrspace(3) %1180, align 4, !dbg !77
  %1447 = load i32, ptr addrspace(3) %1182, align 4, !dbg !77
  %1448 = load i32, ptr addrspace(3) %1184, align 4, !dbg !77
  %1449 = load i32, ptr addrspace(3) %1186, align 4, !dbg !77
  %1450 = load i32, ptr addrspace(3) %1190, align 4, !dbg !77
  %1451 = load i32, ptr addrspace(3) %1194, align 4, !dbg !77
  %1452 = load i32, ptr addrspace(3) %1198, align 4, !dbg !77
  %1453 = load i32, ptr addrspace(3) %1202, align 4, !dbg !77
  %1454 = load i32, ptr addrspace(3) %1206, align 4, !dbg !77
  %1455 = load i32, ptr addrspace(3) %1210, align 4, !dbg !77
  %1456 = load i32, ptr addrspace(3) %1214, align 4, !dbg !77
  %1457 = load i32, ptr addrspace(3) %1218, align 4, !dbg !77
  %1458 = load i32, ptr addrspace(3) %1222, align 4, !dbg !77
  %1459 = load i32, ptr addrspace(3) %1226, align 4, !dbg !77
  %1460 = load i32, ptr addrspace(3) %1230, align 4, !dbg !77
  %1461 = load i32, ptr addrspace(3) %1234, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1446, i32 %1447, i32 %1448, i32 %1449, ptr addrspace(1) %1101, i1 %86) #4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1450, i32 %1451, i32 %1452, i32 %1453, ptr addrspace(1) %1103, i1 %87) #4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1454, i32 %1455, i32 %1456, i32 %1457, ptr addrspace(1) %1105, i1 %88) #4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1458, i32 %1459, i32 %1460, i32 %1461, ptr addrspace(1) %1107, i1 %89) #4, !dbg !77
  %1462 = zext <4 x i1> %1284 to <4 x i8>, !dbg !102
  %1463 = bitcast <4 x i8> %1462 to i32, !dbg !102
  %1464 = zext <4 x i1> %1335 to <4 x i8>, !dbg !102
  %1465 = bitcast <4 x i8> %1464 to i32, !dbg !102
  %1466 = zext <4 x i1> %1386 to <4 x i8>, !dbg !102
  %1467 = bitcast <4 x i8> %1466 to i32, !dbg !102
  %1468 = zext <4 x i1> %1437 to <4 x i8>, !dbg !102
  %1469 = bitcast <4 x i8> %1468 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1463, i32 %1465, i32 %1467, i32 %1469, ptr addrspace(1) %1239, i1 %994) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cclf6fdsfcrwu3ednodpbznmvyyu6wqyv2prfe7bbqfdrpfnb64y.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 49, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 62, scope: !7)
!34 = !DILocation(line: 40, column: 70, scope: !7)
!35 = !DILocation(line: 40, column: 55, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 58, scope: !7)
!49 = !DILocation(line: 63, column: 50, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 72, scope: !7)
!52 = !DILocation(line: 63, column: 80, scope: !7)
!53 = !DILocation(line: 63, column: 64, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 32, column: 19, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 79, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 79, scope: !7)
!70 = !DILocation(line: 89, column: 33, scope: !7)
!71 = !DILocation(line: 89, column: 42, scope: !7)
!72 = !DILocation(line: 89, column: 52, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 38, scope: !7)
!75 = !DILocation(line: 89, column: 47, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 64, scope: !7)
!78 = !DILocation(line: 90, column: 34, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 39, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
