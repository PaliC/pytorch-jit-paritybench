; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = icmp slt i32 %20, 1056, !dbg !14
  %23 = icmp slt i32 %21, 1056, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %25 = icmp slt i32 %24, 64, !dbg !16
  %26 = sdiv i32 %20, 264, !dbg !17
  %27 = sdiv i32 %21, 264, !dbg !17
  %28 = mul i32 %24, 44, !dbg !18
  %29 = mul i32 %26, 2816, !dbg !19
  %30 = mul i32 %27, 2816, !dbg !19
  %31 = add i32 %29, %28, !dbg !20
  %32 = add i32 %28, %30, !dbg !20
  %33 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %34 = insertelement <2 x i32> %33, i32 %20, i64 1, !dbg !21
  %35 = srem <2 x i32> %34, splat (i32 264), !dbg !21
  %36 = icmp slt <2 x i32> %35, splat (i32 44), !dbg !22
  %37 = extractelement <2 x i32> %35, i64 1, !dbg !23
  %38 = add i32 %31, %37, !dbg !24
  %39 = extractelement <2 x i32> %35, i64 0, !dbg !23
  %40 = add i32 %32, %39, !dbg !24
  %41 = sext i32 %38 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = extractelement <2 x i1> %36, i64 1, !dbg !26
  %46 = and i1 %25, %45, !dbg !26
  %47 = extractelement <2 x i1> %36, i64 0, !dbg !26
  %48 = and i1 %47, %25, !dbg !26
  %49 = and i1 %22, %46, !dbg !27
  %50 = and i1 %23, %48, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !28
  %53 = add nsw <2 x i32> %35, splat (i32 -44), !dbg !29
  %54 = icmp ult <2 x i32> %53, splat (i32 44), !dbg !29
  %55 = extractelement <2 x i32> %53, i64 1, !dbg !30
  %56 = add i32 %31, %55, !dbg !30
  %57 = extractelement <2 x i32> %53, i64 0, !dbg !30
  %58 = add i32 %32, %57, !dbg !30
  %59 = sext i32 %56 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = sext i32 %58 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = extractelement <2 x i1> %54, i64 1, !dbg !32
  %64 = and i1 %25, %63, !dbg !32
  %65 = extractelement <2 x i1> %54, i64 0, !dbg !32
  %66 = and i1 %65, %25, !dbg !32
  %67 = and i1 %22, %64, !dbg !33
  %68 = and i1 %23, %66, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !34
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !34
  %71 = add nsw <2 x i32> %35, splat (i32 -88), !dbg !35
  %72 = icmp ult <2 x i32> %71, splat (i32 44), !dbg !35
  %73 = extractelement <2 x i32> %71, i64 1, !dbg !36
  %74 = add i32 %31, %73, !dbg !36
  %75 = extractelement <2 x i32> %71, i64 0, !dbg !36
  %76 = add i32 %32, %75, !dbg !36
  %77 = sext i32 %74 to i64, !dbg !37
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !37
  %79 = sext i32 %76 to i64, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !37
  %81 = extractelement <2 x i1> %72, i64 1, !dbg !38
  %82 = and i1 %25, %81, !dbg !38
  %83 = extractelement <2 x i1> %72, i64 0, !dbg !38
  %84 = and i1 %83, %25, !dbg !38
  %85 = and i1 %22, %82, !dbg !39
  %86 = and i1 %23, %84, !dbg !39
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #3, !dbg !40
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !40
  %89 = add nsw <2 x i32> %35, splat (i32 -132), !dbg !41
  %90 = icmp ult <2 x i32> %89, splat (i32 44), !dbg !41
  %91 = extractelement <2 x i32> %89, i64 1, !dbg !42
  %92 = add i32 %31, %91, !dbg !42
  %93 = extractelement <2 x i32> %89, i64 0, !dbg !42
  %94 = add i32 %32, %93, !dbg !42
  %95 = sext i32 %92 to i64, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !43
  %97 = sext i32 %94 to i64, !dbg !43
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !43
  %99 = extractelement <2 x i1> %90, i64 1, !dbg !44
  %100 = and i1 %25, %99, !dbg !44
  %101 = extractelement <2 x i1> %90, i64 0, !dbg !44
  %102 = and i1 %101, %25, !dbg !44
  %103 = and i1 %22, %100, !dbg !45
  %104 = and i1 %23, %102, !dbg !45
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !46
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !46
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !47
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !47
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !48
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !48
  %111 = add nsw <2 x i32> %35, splat (i32 -176), !dbg !49
  %112 = icmp ult <2 x i32> %111, splat (i32 44), !dbg !49
  %113 = extractelement <2 x i32> %111, i64 1, !dbg !50
  %114 = add i32 %31, %113, !dbg !50
  %115 = extractelement <2 x i32> %111, i64 0, !dbg !50
  %116 = add i32 %32, %115, !dbg !50
  %117 = sext i32 %114 to i64, !dbg !51
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !51
  %119 = sext i32 %116 to i64, !dbg !51
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !51
  %121 = extractelement <2 x i1> %112, i64 1, !dbg !52
  %122 = and i1 %25, %121, !dbg !52
  %123 = extractelement <2 x i1> %112, i64 0, !dbg !52
  %124 = and i1 %123, %25, !dbg !52
  %125 = and i1 %22, %122, !dbg !53
  %126 = and i1 %23, %124, !dbg !53
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #3, !dbg !54
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !54
  %129 = icmp sgt <2 x i32> %35, splat (i32 219), !dbg !55
  %130 = add nsw i32 %37, -220, !dbg !23
  %131 = add nsw i32 %39, -220, !dbg !23
  %132 = add i32 %31, %130, !dbg !56
  %133 = add i32 %32, %131, !dbg !56
  %134 = sext i32 %132 to i64, !dbg !57
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %134, !dbg !57
  %136 = sext i32 %133 to i64, !dbg !57
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !57
  %138 = extractelement <2 x i1> %129, i64 1, !dbg !58
  %139 = and i1 %25, %138, !dbg !58
  %140 = extractelement <2 x i1> %129, i64 0, !dbg !58
  %141 = and i1 %140, %25, !dbg !58
  %142 = and i1 %22, %139, !dbg !59
  %143 = and i1 %23, %141, !dbg !59
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !60
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !60
  %146 = sext i32 %130 to i64, !dbg !61
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %146, !dbg !61
  %148 = sext i32 %131 to i64, !dbg !61
  %149 = getelementptr float, ptr addrspace(1) %6, i64 %148, !dbg !61
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !62
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !62
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %146, !dbg !63
  %153 = getelementptr float, ptr addrspace(1) %7, i64 %148, !dbg !63
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !64
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !64
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !64
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !64
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !64
  %159 = bitcast i32 %155 to float, !dbg !64
  %160 = bitcast i32 %156 to float, !dbg !64
  %161 = bitcast i32 %157 to float, !dbg !64
  %162 = bitcast i32 %158 to float, !dbg !64
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !64
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !64
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !64
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !64
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !64
  %168 = bitcast i32 %164 to float, !dbg !64
  %169 = bitcast i32 %165 to float, !dbg !64
  %170 = bitcast i32 %166 to float, !dbg !64
  %171 = bitcast i32 %167 to float, !dbg !64
  %172 = fadd float %159, 0x3F50624DE0000000, !dbg !65
  %173 = fadd float %160, 0x3F50624DE0000000, !dbg !65
  %174 = fadd float %161, 0x3F50624DE0000000, !dbg !65
  %175 = fadd float %162, 0x3F50624DE0000000, !dbg !65
  %176 = fadd float %168, 0x3F50624DE0000000, !dbg !65
  %177 = fadd float %169, 0x3F50624DE0000000, !dbg !65
  %178 = fadd float %170, 0x3F50624DE0000000, !dbg !65
  %179 = fadd float %171, 0x3F50624DE0000000, !dbg !65
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %180, 0, !dbg !66
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %181, 0, !dbg !66
  br i1 %.not.i, label %187, label %182, !dbg !66

182:                                              ; preds = %14
  br i1 %.not1.i, label %185, label %183, !dbg !66

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

187:                                              ; preds = %14
  br i1 %.not1.i, label %190, label %188, !dbg !66

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %183, %185, %188, %190
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !66
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %192, 0, !dbg !66
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %193, 0, !dbg !66
  br i1 %.not.i1, label %199, label %194, !dbg !66

194:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %197, label %195, !dbg !66

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

199:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %202, label %200, !dbg !66

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %195, %197, %200, %202
  %.0.i3 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !66
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i6 = icmp eq i32 %204, 0, !dbg !66
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i9 = icmp eq i32 %205, 0, !dbg !66
  br i1 %.not.i6, label %211, label %206, !dbg !66

206:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %209, label %207, !dbg !66

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

211:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %214, label %212, !dbg !66

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

__nv_sqrtf.exit10:                                ; preds = %207, %209, %212, %214
  %.0.i8 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !66
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i11 = icmp eq i32 %216, 0, !dbg !66
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i14 = icmp eq i32 %217, 0, !dbg !66
  br i1 %.not.i11, label %223, label %218, !dbg !66

218:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %221, label %219, !dbg !66

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

223:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %226, label %224, !dbg !66

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

__nv_sqrtf.exit15:                                ; preds = %219, %221, %224, %226
  %.0.i13 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !66
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i16 = icmp eq i32 %228, 0, !dbg !66
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i19 = icmp eq i32 %229, 0, !dbg !66
  br i1 %.not.i16, label %235, label %230, !dbg !66

230:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %233, label %231, !dbg !66

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #3, !dbg !66
  br label %__nv_sqrtf.exit20, !dbg !66

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #3, !dbg !66
  br label %__nv_sqrtf.exit20, !dbg !66

235:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %238, label %236, !dbg !66

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #3, !dbg !66
  br label %__nv_sqrtf.exit20, !dbg !66

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #3, !dbg !66
  br label %__nv_sqrtf.exit20, !dbg !66

__nv_sqrtf.exit20:                                ; preds = %231, %233, %236, %238
  %.0.i18 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !66
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i21 = icmp eq i32 %240, 0, !dbg !66
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i24 = icmp eq i32 %241, 0, !dbg !66
  br i1 %.not.i21, label %247, label %242, !dbg !66

242:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %245, label %243, !dbg !66

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !66
  br label %__nv_sqrtf.exit25, !dbg !66

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !66
  br label %__nv_sqrtf.exit25, !dbg !66

247:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %250, label %248, !dbg !66

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !66
  br label %__nv_sqrtf.exit25, !dbg !66

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !66
  br label %__nv_sqrtf.exit25, !dbg !66

__nv_sqrtf.exit25:                                ; preds = %243, %245, %248, %250
  %.0.i23 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !66
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i26 = icmp eq i32 %252, 0, !dbg !66
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i29 = icmp eq i32 %253, 0, !dbg !66
  br i1 %.not.i26, label %259, label %254, !dbg !66

254:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %257, label %255, !dbg !66

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

259:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %262, label %260, !dbg !66

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

__nv_sqrtf.exit30:                                ; preds = %255, %257, %260, %262
  %.0.i28 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !66
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i31 = icmp eq i32 %264, 0, !dbg !66
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i34 = icmp eq i32 %265, 0, !dbg !66
  br i1 %.not.i31, label %271, label %266, !dbg !66

266:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %269, label %267, !dbg !66

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

271:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %274, label %272, !dbg !66

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

__nv_sqrtf.exit35:                                ; preds = %267, %269, %272, %274
  %.0.i33 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !66
  %276 = shufflevector <2 x i1> %129, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !55
  %277 = shufflevector <2 x i1> %112, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %278 = shufflevector <2 x i1> %90, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %279 = shufflevector <2 x i1> %72, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %280 = shufflevector <2 x i1> %54, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !29
  %281 = shufflevector <2 x i1> %36, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !22
  %282 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !60
  %283 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !62
  %284 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !60
  %285 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !62
  %286 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !60
  %287 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !62
  %288 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !60
  %289 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !62
  %290 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !60
  %291 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !62
  %292 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !60
  %293 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !62
  %294 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !60
  %295 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !62
  %296 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !60
  %297 = insertelement <8 x i32> poison, i32 %282, i64 0, !dbg !60
  %298 = insertelement <8 x i32> %297, i32 %284, i64 1, !dbg !60
  %299 = insertelement <8 x i32> %298, i32 %286, i64 2, !dbg !60
  %300 = insertelement <8 x i32> %299, i32 %288, i64 3, !dbg !60
  %301 = insertelement <8 x i32> %300, i32 %290, i64 4, !dbg !60
  %302 = insertelement <8 x i32> %301, i32 %292, i64 5, !dbg !60
  %303 = insertelement <8 x i32> %302, i32 %294, i64 6, !dbg !60
  %304 = insertelement <8 x i32> %303, i32 %296, i64 7, !dbg !60
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !60
  %306 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !62
  %307 = insertelement <8 x i32> poison, i32 %283, i64 0, !dbg !62
  %308 = insertelement <8 x i32> %307, i32 %285, i64 1, !dbg !62
  %309 = insertelement <8 x i32> %308, i32 %287, i64 2, !dbg !62
  %310 = insertelement <8 x i32> %309, i32 %289, i64 3, !dbg !62
  %311 = insertelement <8 x i32> %310, i32 %291, i64 4, !dbg !62
  %312 = insertelement <8 x i32> %311, i32 %293, i64 5, !dbg !62
  %313 = insertelement <8 x i32> %312, i32 %295, i64 6, !dbg !62
  %314 = insertelement <8 x i32> %313, i32 %306, i64 7, !dbg !62
  %315 = bitcast <8 x i32> %314 to <8 x float>, !dbg !62
  %316 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !54
  %317 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !54
  %318 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !54
  %319 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !54
  %320 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !54
  %321 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !54
  %322 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !54
  %323 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !54
  %324 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !46
  %325 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !48
  %326 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !46
  %327 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !48
  %328 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !46
  %329 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !48
  %330 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !46
  %331 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !48
  %332 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !46
  %333 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !48
  %334 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !46
  %335 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !48
  %336 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !46
  %337 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !48
  %338 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !46
  %339 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !48
  %340 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !40
  %341 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !40
  %342 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !40
  %343 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !40
  %344 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !40
  %345 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !40
  %346 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !40
  %347 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !40
  %348 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %349 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %350 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %351 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %352 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !34
  %353 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !34
  %354 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !34
  %355 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !34
  %356 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %357 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %358 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %359 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %360 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %361 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %362 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %363 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !67
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !67
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !67
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !67
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !67
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !67
  %372 = getelementptr float, ptr addrspace(1) %8, i64 %146, !dbg !68
  %373 = getelementptr float, ptr addrspace(1) %8, i64 %148, !dbg !68
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %372, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !69
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !69
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !69
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !69
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !69
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !69
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !69
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !69
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !69
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !69
  %384 = getelementptr float, ptr addrspace(1) %9, i64 %146, !dbg !70
  %385 = getelementptr float, ptr addrspace(1) %9, i64 %148, !dbg !70
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %384, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !71
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !71
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !71
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !71
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !71
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %385, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !71
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !71
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !71
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !71
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !71
  %396 = getelementptr float, ptr addrspace(1) %10, i64 %134, !dbg !72
  %397 = getelementptr float, ptr addrspace(1) %10, i64 %136, !dbg !72
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %396, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !73
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !73
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !73
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !73
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !73
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %397, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !73
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !73
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !73
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !73
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !73
  %408 = fsub <8 x float> %305, %315, !dbg !74
  %409 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !54
  %410 = insertelement <8 x i32> %409, i32 %317, i64 1, !dbg !54
  %411 = insertelement <8 x i32> %410, i32 %318, i64 2, !dbg !54
  %412 = insertelement <8 x i32> %411, i32 %319, i64 3, !dbg !54
  %413 = insertelement <8 x i32> %412, i32 %320, i64 4, !dbg !54
  %414 = insertelement <8 x i32> %413, i32 %321, i64 5, !dbg !54
  %415 = insertelement <8 x i32> %414, i32 %322, i64 6, !dbg !54
  %416 = insertelement <8 x i32> %415, i32 %323, i64 7, !dbg !54
  %417 = bitcast <8 x i32> %416 to <8 x float>, !dbg !54
  %418 = fadd <8 x float> %417, %417, !dbg !75
  %419 = insertelement <8 x i32> poison, i32 %324, i64 0, !dbg !46
  %420 = insertelement <8 x i32> %419, i32 %326, i64 1, !dbg !46
  %421 = insertelement <8 x i32> %420, i32 %328, i64 2, !dbg !46
  %422 = insertelement <8 x i32> %421, i32 %330, i64 3, !dbg !46
  %423 = insertelement <8 x i32> %422, i32 %332, i64 4, !dbg !46
  %424 = insertelement <8 x i32> %423, i32 %334, i64 5, !dbg !46
  %425 = insertelement <8 x i32> %424, i32 %336, i64 6, !dbg !46
  %426 = insertelement <8 x i32> %425, i32 %338, i64 7, !dbg !46
  %427 = bitcast <8 x i32> %426 to <8 x float>, !dbg !46
  %428 = insertelement <8 x i32> poison, i32 %325, i64 0, !dbg !48
  %429 = insertelement <8 x i32> %428, i32 %327, i64 1, !dbg !48
  %430 = insertelement <8 x i32> %429, i32 %329, i64 2, !dbg !48
  %431 = insertelement <8 x i32> %430, i32 %331, i64 3, !dbg !48
  %432 = insertelement <8 x i32> %431, i32 %333, i64 4, !dbg !48
  %433 = insertelement <8 x i32> %432, i32 %335, i64 5, !dbg !48
  %434 = insertelement <8 x i32> %433, i32 %337, i64 6, !dbg !48
  %435 = insertelement <8 x i32> %434, i32 %339, i64 7, !dbg !48
  %436 = bitcast <8 x i32> %435 to <8 x float>, !dbg !48
  %437 = fadd <8 x float> %427, %436, !dbg !76
  %438 = insertelement <8 x i32> poison, i32 %340, i64 0, !dbg !40
  %439 = insertelement <8 x i32> %438, i32 %341, i64 1, !dbg !40
  %440 = insertelement <8 x i32> %439, i32 %342, i64 2, !dbg !40
  %441 = insertelement <8 x i32> %440, i32 %343, i64 3, !dbg !40
  %442 = insertelement <8 x i32> %441, i32 %344, i64 4, !dbg !40
  %443 = insertelement <8 x i32> %442, i32 %345, i64 5, !dbg !40
  %444 = insertelement <8 x i32> %443, i32 %346, i64 6, !dbg !40
  %445 = insertelement <8 x i32> %444, i32 %347, i64 7, !dbg !40
  %446 = bitcast <8 x i32> %445 to <8 x float>, !dbg !40
  %447 = insertelement <8 x i32> poison, i32 %348, i64 0, !dbg !34
  %448 = insertelement <8 x i32> %447, i32 %349, i64 1, !dbg !34
  %449 = insertelement <8 x i32> %448, i32 %350, i64 2, !dbg !34
  %450 = insertelement <8 x i32> %449, i32 %351, i64 3, !dbg !34
  %451 = insertelement <8 x i32> %450, i32 %352, i64 4, !dbg !34
  %452 = insertelement <8 x i32> %451, i32 %353, i64 5, !dbg !34
  %453 = insertelement <8 x i32> %452, i32 %354, i64 6, !dbg !34
  %454 = insertelement <8 x i32> %453, i32 %355, i64 7, !dbg !34
  %455 = bitcast <8 x i32> %454 to <8 x float>, !dbg !34
  %456 = insertelement <8 x i32> poison, i32 %356, i64 0, !dbg !28
  %457 = insertelement <8 x i32> %456, i32 %357, i64 1, !dbg !28
  %458 = insertelement <8 x i32> %457, i32 %358, i64 2, !dbg !28
  %459 = insertelement <8 x i32> %458, i32 %359, i64 3, !dbg !28
  %460 = insertelement <8 x i32> %459, i32 %360, i64 4, !dbg !28
  %461 = insertelement <8 x i32> %460, i32 %361, i64 5, !dbg !28
  %462 = insertelement <8 x i32> %461, i32 %362, i64 6, !dbg !28
  %463 = insertelement <8 x i32> %462, i32 %363, i64 7, !dbg !28
  %464 = bitcast <8 x i32> %463 to <8 x float>, !dbg !28
  %465 = insertelement <8 x float> poison, float %371, i64 0, !dbg !77
  %466 = insertelement <8 x float> %465, float %370, i64 1, !dbg !77
  %467 = insertelement <8 x float> %466, float %369, i64 2, !dbg !77
  %468 = insertelement <8 x float> %467, float %368, i64 3, !dbg !77
  %469 = insertelement <8 x float> %468, float %367, i64 4, !dbg !77
  %470 = insertelement <8 x float> %469, float %366, i64 5, !dbg !77
  %471 = insertelement <8 x float> %470, float %365, i64 6, !dbg !77
  %472 = insertelement <8 x float> %471, float %364, i64 7, !dbg !77
  %473 = fmul <8 x float> %408, %472, !dbg !77
  %474 = insertelement <8 x i32> poison, i32 %383, i64 0, !dbg !69
  %475 = insertelement <8 x i32> %474, i32 %382, i64 1, !dbg !69
  %476 = insertelement <8 x i32> %475, i32 %381, i64 2, !dbg !69
  %477 = insertelement <8 x i32> %476, i32 %380, i64 3, !dbg !69
  %478 = insertelement <8 x i32> %477, i32 %378, i64 4, !dbg !69
  %479 = insertelement <8 x i32> %478, i32 %377, i64 5, !dbg !69
  %480 = insertelement <8 x i32> %479, i32 %376, i64 6, !dbg !69
  %481 = insertelement <8 x i32> %480, i32 %375, i64 7, !dbg !69
  %482 = bitcast <8 x i32> %481 to <8 x float>, !dbg !69
  %483 = fmul <8 x float> %473, %482, !dbg !78
  %484 = insertelement <8 x i32> poison, i32 %395, i64 0, !dbg !71
  %485 = insertelement <8 x i32> %484, i32 %394, i64 1, !dbg !71
  %486 = insertelement <8 x i32> %485, i32 %393, i64 2, !dbg !71
  %487 = insertelement <8 x i32> %486, i32 %392, i64 3, !dbg !71
  %488 = insertelement <8 x i32> %487, i32 %390, i64 4, !dbg !71
  %489 = insertelement <8 x i32> %488, i32 %389, i64 5, !dbg !71
  %490 = insertelement <8 x i32> %489, i32 %388, i64 6, !dbg !71
  %491 = insertelement <8 x i32> %490, i32 %387, i64 7, !dbg !71
  %492 = bitcast <8 x i32> %491 to <8 x float>, !dbg !71
  %493 = fadd <8 x float> %483, %492, !dbg !79
  %494 = insertelement <8 x i32> poison, i32 %407, i64 0, !dbg !73
  %495 = insertelement <8 x i32> %494, i32 %406, i64 1, !dbg !73
  %496 = insertelement <8 x i32> %495, i32 %405, i64 2, !dbg !73
  %497 = insertelement <8 x i32> %496, i32 %404, i64 3, !dbg !73
  %498 = insertelement <8 x i32> %497, i32 %402, i64 4, !dbg !73
  %499 = insertelement <8 x i32> %498, i32 %401, i64 5, !dbg !73
  %500 = insertelement <8 x i32> %499, i32 %400, i64 6, !dbg !73
  %501 = insertelement <8 x i32> %500, i32 %399, i64 7, !dbg !73
  %502 = bitcast <8 x i32> %501 to <8 x float>, !dbg !73
  %503 = fadd <8 x float> %493, %502, !dbg !80
  %504 = select <8 x i1> %276, <8 x float> %503, <8 x float> zeroinitializer, !dbg !81
  %505 = select <8 x i1> %277, <8 x float> %418, <8 x float> %504, !dbg !82
  %506 = select <8 x i1> %278, <8 x float> %437, <8 x float> %505, !dbg !82
  %507 = select <8 x i1> %279, <8 x float> %446, <8 x float> %506, !dbg !83
  %508 = select <8 x i1> %280, <8 x float> %455, <8 x float> %507, !dbg !84
  %509 = select <8 x i1> %281, <8 x float> %464, <8 x float> %508, !dbg !85
  %510 = fcmp olt <8 x float> %509, zeroinitializer, !dbg !86
  %511 = extractelement <8 x i1> %510, i64 7, !dbg !90
  %512 = extractelement <8 x i1> %510, i64 6, !dbg !90
  %513 = extractelement <8 x i1> %510, i64 5, !dbg !90
  %514 = extractelement <8 x i1> %510, i64 4, !dbg !90
  %515 = extractelement <8 x i1> %510, i64 3, !dbg !90
  %516 = extractelement <8 x i1> %510, i64 2, !dbg !90
  %517 = extractelement <8 x i1> %510, i64 1, !dbg !90
  %518 = extractelement <8 x i1> %510, i64 0, !dbg !90
  %519 = mul i32 %24, 264, !dbg !91
  %520 = add i32 %37, %519, !dbg !92
  %521 = mul i32 %26, 16896, !dbg !93
  %522 = mul i32 %27, 16896, !dbg !93
  %523 = add i32 %520, %521, !dbg !94
  %524 = add i32 %522, %39, !dbg !92
  %525 = add i32 %524, %519, !dbg !94
  %526 = sext i32 %523 to i64, !dbg !95
  %527 = getelementptr float, ptr addrspace(1) %11, i64 %526, !dbg !95
  %528 = sext i32 %525 to i64, !dbg !95
  %529 = getelementptr float, ptr addrspace(1) %11, i64 %528, !dbg !95
  %530 = and i1 %25, %22, !dbg !96
  %531 = and i1 %23, %25, !dbg !96
  %bc = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %532 = extractelement <8 x i32> %bc, i64 7, !dbg !97
  %533 = select i1 %511, i32 0, i32 %532, !dbg !90
  %bc36 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %534 = extractelement <8 x i32> %bc36, i64 6, !dbg !97
  %535 = select i1 %512, i32 0, i32 %534, !dbg !90
  %bc37 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %536 = extractelement <8 x i32> %bc37, i64 5, !dbg !97
  %537 = select i1 %513, i32 0, i32 %536, !dbg !90
  %bc38 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %538 = extractelement <8 x i32> %bc38, i64 4, !dbg !97
  %539 = select i1 %514, i32 0, i32 %538, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %535, i32 %537, i32 %539, ptr addrspace(1) %527, i1 %530) #3, !dbg !97
  %bc39 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %540 = extractelement <8 x i32> %bc39, i64 3, !dbg !97
  %541 = select i1 %515, i32 0, i32 %540, !dbg !90
  %bc40 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %542 = extractelement <8 x i32> %bc40, i64 2, !dbg !97
  %543 = select i1 %516, i32 0, i32 %542, !dbg !90
  %bc41 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %544 = extractelement <8 x i32> %bc41, i64 1, !dbg !97
  %545 = select i1 %517, i32 0, i32 %544, !dbg !90
  %bc42 = bitcast <8 x float> %509 to <8 x i32>, !dbg !97
  %546 = extractelement <8 x i32> %bc42, i64 0, !dbg !97
  %547 = select i1 %518, i32 0, i32 %546, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %543, i32 %545, i32 %547, ptr addrspace(1) %529, i1 %531) #3, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf2uqmnj2dyrf2c5wwjhii2zohyyuguiqtzamlxijlxbaf3fvyz2.py", directory: "inductor_cache/f2")
!4 = !{ptr @triton_poi_fused_cat_relu_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_31", linkageName: "triton_poi_fused_cat_relu_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 37, column: 33, scope: !7)
!19 = !DILocation(line: 37, column: 43, scope: !7)
!20 = !DILocation(line: 37, column: 38, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 68, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 49, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 62, scope: !7)
!27 = !DILocation(line: 37, column: 70, scope: !7)
!28 = !DILocation(line: 37, column: 55, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 42, column: 50, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 71, scope: !7)
!33 = !DILocation(line: 42, column: 79, scope: !7)
!34 = !DILocation(line: 42, column: 64, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 50, scope: !7)
!37 = !DILocation(line: 47, column: 31, scope: !7)
!38 = !DILocation(line: 47, column: 72, scope: !7)
!39 = !DILocation(line: 47, column: 80, scope: !7)
!40 = !DILocation(line: 47, column: 64, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 50, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 73, scope: !7)
!45 = !DILocation(line: 52, column: 81, scope: !7)
!46 = !DILocation(line: 52, column: 65, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 65, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 50, scope: !7)
!51 = !DILocation(line: 61, column: 31, scope: !7)
!52 = !DILocation(line: 61, column: 73, scope: !7)
!53 = !DILocation(line: 61, column: 81, scope: !7)
!54 = !DILocation(line: 61, column: 65, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 68, column: 50, scope: !7)
!57 = !DILocation(line: 68, column: 31, scope: !7)
!58 = !DILocation(line: 68, column: 73, scope: !7)
!59 = !DILocation(line: 68, column: 81, scope: !7)
!60 = !DILocation(line: 68, column: 65, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 80, scope: !7)
!63 = !DILocation(line: 71, column: 31, scope: !7)
!64 = !DILocation(line: 71, column: 80, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 27, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 80, column: 31, scope: !7)
!69 = !DILocation(line: 80, column: 80, scope: !7)
!70 = !DILocation(line: 82, column: 31, scope: !7)
!71 = !DILocation(line: 82, column: 80, scope: !7)
!72 = !DILocation(line: 84, column: 32, scope: !7)
!73 = !DILocation(line: 84, column: 66, scope: !7)
!74 = !DILocation(line: 70, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 54, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 87, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 90, column: 35, scope: !7)
!84 = !DILocation(line: 91, column: 34, scope: !7)
!85 = !DILocation(line: 92, column: 33, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 94, column: 42, scope: !7)
!90 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!91 = !DILocation(line: 95, column: 34, scope: !7)
!92 = !DILocation(line: 95, column: 30, scope: !7)
!93 = !DILocation(line: 95, column: 45, scope: !7)
!94 = !DILocation(line: 95, column: 39, scope: !7)
!95 = !DILocation(line: 95, column: 25, scope: !7)
!96 = !DILocation(line: 95, column: 65, scope: !7)
!97 = !DILocation(line: 95, column: 57, scope: !7)
!98 = !DILocation(line: 95, column: 4, scope: !7)
