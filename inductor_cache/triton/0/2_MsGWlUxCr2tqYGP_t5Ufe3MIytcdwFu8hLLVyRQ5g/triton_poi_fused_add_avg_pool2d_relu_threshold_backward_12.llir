; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, 1, !dbg !13
  %17 = or disjoint i32 %15, 4, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = srem i32 %16, 2, !dbg !14
  %21 = ashr exact i32 %15, 2, !dbg !15
  %22 = ashr exact i32 %17, 2, !dbg !15
  %23 = srem i32 %21, 512, !dbg !16
  %24 = srem i32 %22, 512, !dbg !16
  %25 = shl nsw i32 %20, 2, !dbg !17
  %26 = shl i32 %15, 4, !dbg !18
  %27 = or disjoint i32 %26, 32, !dbg !18
  %28 = shl i32 %17, 4, !dbg !18
  %29 = or disjoint i32 %26, 96, !dbg !18
  %30 = add i32 %25, %26, !dbg !19
  %31 = add i32 %25, %27, !dbg !19
  %32 = add i32 %25, %28, !dbg !19
  %33 = add i32 %25, %29, !dbg !19
  %34 = sext i32 %26 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = sext i32 %30 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = sext i32 %27 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %31 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %28 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %32 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %29 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = sext i32 %33 to i64, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !21
  %58 = or disjoint i32 %25, 1, !dbg !22
  %59 = or disjoint i32 %26, 1, !dbg !23
  %60 = add i32 %58, %26, !dbg !23
  %61 = or disjoint i32 %26, 33, !dbg !23
  %62 = add i32 %58, %27, !dbg !23
  %63 = or disjoint i32 %28, 1, !dbg !23
  %64 = add i32 %58, %28, !dbg !23
  %65 = or disjoint i32 %26, 97, !dbg !23
  %66 = add i32 %58, %29, !dbg !23
  %67 = sext i32 %59 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %60 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %61 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %62 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %63 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %64 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %65 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = sext i32 %66 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !25
  %91 = or disjoint i32 %25, 2, !dbg !26
  %92 = or disjoint i32 %26, 2, !dbg !27
  %93 = add i32 %91, %26, !dbg !27
  %94 = or disjoint i32 %26, 34, !dbg !27
  %95 = add i32 %91, %27, !dbg !27
  %96 = or disjoint i32 %28, 2, !dbg !27
  %97 = add i32 %91, %28, !dbg !27
  %98 = or disjoint i32 %26, 98, !dbg !27
  %99 = add i32 %91, %29, !dbg !27
  %100 = sext i32 %92 to i64, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !28
  %102 = sext i32 %93 to i64, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !28
  %104 = sext i32 %94 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !28
  %106 = sext i32 %95 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !28
  %108 = sext i32 %96 to i64, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !28
  %110 = sext i32 %97 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !28
  %112 = sext i32 %98 to i64, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !28
  %114 = sext i32 %99 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !29
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !29
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #2, !dbg !29
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !29
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #2, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !29
  %124 = or disjoint i32 %25, 3, !dbg !30
  %125 = or disjoint i32 %26, 3, !dbg !31
  %126 = add i32 %124, %26, !dbg !31
  %127 = or disjoint i32 %26, 35, !dbg !31
  %128 = add i32 %124, %27, !dbg !31
  %129 = or disjoint i32 %28, 3, !dbg !31
  %130 = add i32 %124, %28, !dbg !31
  %131 = or disjoint i32 %26, 99, !dbg !31
  %132 = add i32 %124, %29, !dbg !31
  %133 = sext i32 %125 to i64, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !32
  %135 = sext i32 %126 to i64, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !32
  %137 = sext i32 %127 to i64, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !32
  %139 = sext i32 %128 to i64, !dbg !32
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !32
  %141 = sext i32 %129 to i64, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !32
  %143 = sext i32 %130 to i64, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !32
  %145 = sext i32 %131 to i64, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !32
  %147 = sext i32 %132 to i64, !dbg !32
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #2, !dbg !33
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !33
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #2, !dbg !33
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !33
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #2, !dbg !33
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #2, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #2, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !33
  %157 = add nsw i32 %25, 8, !dbg !34
  %158 = or disjoint i32 %26, 8, !dbg !35
  %159 = add nuw i32 %157, %26, !dbg !35
  %160 = or disjoint i32 %26, 40, !dbg !35
  %161 = add nuw i32 %157, %27, !dbg !35
  %162 = or disjoint i32 %28, 8, !dbg !35
  %163 = add nuw i32 %157, %28, !dbg !35
  %164 = or disjoint i32 %26, 104, !dbg !35
  %165 = add nuw i32 %157, %29, !dbg !35
  %166 = sext i32 %158 to i64, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !36
  %168 = sext i32 %159 to i64, !dbg !36
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !36
  %170 = sext i32 %160 to i64, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !36
  %172 = sext i32 %161 to i64, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !36
  %174 = sext i32 %162 to i64, !dbg !36
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !36
  %176 = sext i32 %163 to i64, !dbg !36
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !36
  %178 = sext i32 %164 to i64, !dbg !36
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !36
  %180 = sext i32 %165 to i64, !dbg !36
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !36
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #2, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #2, !dbg !37
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #2, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #2, !dbg !37
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #2, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #2, !dbg !37
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #2, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #2, !dbg !37
  %190 = add nsw i32 %25, 9, !dbg !38
  %191 = or disjoint i32 %26, 9, !dbg !39
  %192 = add nuw i32 %190, %26, !dbg !39
  %193 = or disjoint i32 %26, 41, !dbg !39
  %194 = add nuw i32 %190, %27, !dbg !39
  %195 = or disjoint i32 %28, 9, !dbg !39
  %196 = add nuw i32 %190, %28, !dbg !39
  %197 = or disjoint i32 %26, 105, !dbg !39
  %198 = add nuw i32 %190, %29, !dbg !39
  %199 = sext i32 %191 to i64, !dbg !40
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !40
  %201 = sext i32 %192 to i64, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !40
  %203 = sext i32 %193 to i64, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !40
  %205 = sext i32 %194 to i64, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !40
  %207 = sext i32 %195 to i64, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !40
  %209 = sext i32 %196 to i64, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !40
  %211 = sext i32 %197 to i64, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !40
  %213 = sext i32 %198 to i64, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !40
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #2, !dbg !41
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #2, !dbg !41
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #2, !dbg !41
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #2, !dbg !41
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #2, !dbg !41
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #2, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #2, !dbg !41
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #2, !dbg !41
  %223 = add nsw i32 %25, 10, !dbg !42
  %224 = or disjoint i32 %26, 10, !dbg !43
  %225 = add nuw i32 %223, %26, !dbg !43
  %226 = or disjoint i32 %26, 42, !dbg !43
  %227 = add nuw i32 %223, %27, !dbg !43
  %228 = or disjoint i32 %28, 10, !dbg !43
  %229 = add nuw i32 %223, %28, !dbg !43
  %230 = or disjoint i32 %26, 106, !dbg !43
  %231 = add nuw i32 %223, %29, !dbg !43
  %232 = sext i32 %224 to i64, !dbg !44
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !44
  %234 = sext i32 %225 to i64, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !44
  %236 = sext i32 %226 to i64, !dbg !44
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !44
  %238 = sext i32 %227 to i64, !dbg !44
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !44
  %240 = sext i32 %228 to i64, !dbg !44
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !44
  %242 = sext i32 %229 to i64, !dbg !44
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !44
  %244 = sext i32 %230 to i64, !dbg !44
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !44
  %246 = sext i32 %231 to i64, !dbg !44
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !44
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #2, !dbg !45
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 true) #2, !dbg !45
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #2, !dbg !45
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 true) #2, !dbg !45
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 true) #2, !dbg !45
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 true) #2, !dbg !45
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 true) #2, !dbg !45
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #2, !dbg !45
  %256 = add nsw i32 %25, 11, !dbg !46
  %257 = or disjoint i32 %26, 11, !dbg !47
  %258 = add nuw i32 %256, %26, !dbg !47
  %259 = or disjoint i32 %26, 43, !dbg !47
  %260 = add nuw i32 %256, %27, !dbg !47
  %261 = or disjoint i32 %28, 11, !dbg !47
  %262 = add nuw i32 %256, %28, !dbg !47
  %263 = or disjoint i32 %26, 107, !dbg !47
  %264 = add nuw i32 %256, %29, !dbg !47
  %265 = sext i32 %257 to i64, !dbg !48
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !48
  %267 = sext i32 %258 to i64, !dbg !48
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !48
  %269 = sext i32 %259 to i64, !dbg !48
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !48
  %271 = sext i32 %260 to i64, !dbg !48
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !48
  %273 = sext i32 %261 to i64, !dbg !48
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !48
  %275 = sext i32 %262 to i64, !dbg !48
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !48
  %277 = sext i32 %263 to i64, !dbg !48
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !48
  %279 = sext i32 %264 to i64, !dbg !48
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !48
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #2, !dbg !49
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #2, !dbg !49
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #2, !dbg !49
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #2, !dbg !49
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #2, !dbg !49
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #2, !dbg !49
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #2, !dbg !49
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #2, !dbg !49
  %289 = add nsw i32 %25, 16, !dbg !50
  %290 = or disjoint i32 %26, 16, !dbg !51
  %291 = add i32 %289, %26, !dbg !51
  %292 = or disjoint i32 %26, 48, !dbg !51
  %293 = add i32 %289, %27, !dbg !51
  %294 = or disjoint i32 %28, 16, !dbg !51
  %295 = add i32 %289, %28, !dbg !51
  %296 = or disjoint i32 %26, 112, !dbg !51
  %297 = add i32 %289, %29, !dbg !51
  %298 = sext i32 %290 to i64, !dbg !52
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %298, !dbg !52
  %300 = sext i32 %291 to i64, !dbg !52
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !52
  %302 = sext i32 %292 to i64, !dbg !52
  %303 = getelementptr float, ptr addrspace(1) %0, i64 %302, !dbg !52
  %304 = sext i32 %293 to i64, !dbg !52
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !52
  %306 = sext i32 %294 to i64, !dbg !52
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !52
  %308 = sext i32 %295 to i64, !dbg !52
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !52
  %310 = sext i32 %296 to i64, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !52
  %312 = sext i32 %297 to i64, !dbg !52
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !52
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #2, !dbg !53
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #2, !dbg !53
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #2, !dbg !53
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #2, !dbg !53
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #2, !dbg !53
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #2, !dbg !53
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 true) #2, !dbg !53
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 true) #2, !dbg !53
  %322 = add nsw i32 %25, 17, !dbg !54
  %323 = or disjoint i32 %26, 17, !dbg !55
  %324 = add i32 %322, %26, !dbg !55
  %325 = or disjoint i32 %26, 49, !dbg !55
  %326 = add i32 %322, %27, !dbg !55
  %327 = or disjoint i32 %28, 17, !dbg !55
  %328 = add i32 %322, %28, !dbg !55
  %329 = or disjoint i32 %26, 113, !dbg !55
  %330 = add i32 %322, %29, !dbg !55
  %331 = sext i32 %323 to i64, !dbg !56
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !56
  %333 = sext i32 %324 to i64, !dbg !56
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !56
  %335 = sext i32 %325 to i64, !dbg !56
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !56
  %337 = sext i32 %326 to i64, !dbg !56
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !56
  %339 = sext i32 %327 to i64, !dbg !56
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !56
  %341 = sext i32 %328 to i64, !dbg !56
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !56
  %343 = sext i32 %329 to i64, !dbg !56
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !56
  %345 = sext i32 %330 to i64, !dbg !56
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !56
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 true) #2, !dbg !57
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #2, !dbg !57
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #2, !dbg !57
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #2, !dbg !57
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 true) #2, !dbg !57
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #2, !dbg !57
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 true) #2, !dbg !57
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 true) #2, !dbg !57
  %355 = add nsw i32 %25, 18, !dbg !58
  %356 = or disjoint i32 %26, 18, !dbg !59
  %357 = add i32 %355, %26, !dbg !59
  %358 = or disjoint i32 %26, 50, !dbg !59
  %359 = add i32 %355, %27, !dbg !59
  %360 = or disjoint i32 %28, 18, !dbg !59
  %361 = add i32 %355, %28, !dbg !59
  %362 = or disjoint i32 %26, 114, !dbg !59
  %363 = add i32 %355, %29, !dbg !59
  %364 = sext i32 %356 to i64, !dbg !60
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !60
  %366 = sext i32 %357 to i64, !dbg !60
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !60
  %368 = sext i32 %358 to i64, !dbg !60
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !60
  %370 = sext i32 %359 to i64, !dbg !60
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !60
  %372 = sext i32 %360 to i64, !dbg !60
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !60
  %374 = sext i32 %361 to i64, !dbg !60
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !60
  %376 = sext i32 %362 to i64, !dbg !60
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !60
  %378 = sext i32 %363 to i64, !dbg !60
  %379 = getelementptr float, ptr addrspace(1) %0, i64 %378, !dbg !60
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 true) #2, !dbg !61
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 true) #2, !dbg !61
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 true) #2, !dbg !61
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 true) #2, !dbg !61
  %384 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !61
  %385 = insertelement <4 x i32> %384, i32 %381, i64 1, !dbg !61
  %386 = insertelement <4 x i32> %385, i32 %382, i64 2, !dbg !61
  %387 = insertelement <4 x i32> %386, i32 %383, i64 3, !dbg !61
  %388 = bitcast <4 x i32> %387 to <4 x float>, !dbg !61
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 true) #2, !dbg !61
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 true) #2, !dbg !61
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 true) #2, !dbg !61
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 true) #2, !dbg !61
  %393 = insertelement <4 x i32> poison, i32 %389, i64 0, !dbg !61
  %394 = insertelement <4 x i32> %393, i32 %390, i64 1, !dbg !61
  %395 = insertelement <4 x i32> %394, i32 %391, i64 2, !dbg !61
  %396 = insertelement <4 x i32> %395, i32 %392, i64 3, !dbg !61
  %397 = bitcast <4 x i32> %396 to <4 x float>, !dbg !61
  %398 = add nsw i32 %25, 19, !dbg !62
  %399 = or disjoint i32 %26, 19, !dbg !63
  %400 = add i32 %398, %26, !dbg !63
  %401 = or disjoint i32 %26, 51, !dbg !63
  %402 = add i32 %398, %27, !dbg !63
  %403 = or disjoint i32 %28, 19, !dbg !63
  %404 = add i32 %398, %28, !dbg !63
  %405 = or disjoint i32 %26, 115, !dbg !63
  %406 = add i32 %398, %29, !dbg !63
  %407 = sext i32 %399 to i64, !dbg !64
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !64
  %409 = sext i32 %400 to i64, !dbg !64
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !64
  %411 = sext i32 %401 to i64, !dbg !64
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !64
  %413 = sext i32 %402 to i64, !dbg !64
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !64
  %415 = sext i32 %403 to i64, !dbg !64
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !64
  %417 = sext i32 %404 to i64, !dbg !64
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !64
  %419 = sext i32 %405 to i64, !dbg !64
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !64
  %421 = sext i32 %406 to i64, !dbg !64
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !64
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 true) #2, !dbg !65
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 true) #2, !dbg !65
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 true) #2, !dbg !65
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 true) #2, !dbg !65
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 true) #2, !dbg !65
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %418, i1 true) #2, !dbg !65
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %420, i1 true) #2, !dbg !65
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %422, i1 true) #2, !dbg !65
  %431 = add nsw i32 %25, 24, !dbg !66
  %432 = or disjoint i32 %26, 24, !dbg !67
  %433 = add i32 %431, %26, !dbg !67
  %434 = or disjoint i32 %26, 56, !dbg !67
  %435 = add i32 %431, %27, !dbg !67
  %436 = or disjoint i32 %28, 24, !dbg !67
  %437 = add i32 %431, %28, !dbg !67
  %438 = or disjoint i32 %26, 120, !dbg !67
  %439 = add i32 %431, %29, !dbg !67
  %440 = sext i32 %432 to i64, !dbg !68
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !68
  %442 = sext i32 %433 to i64, !dbg !68
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !68
  %444 = sext i32 %434 to i64, !dbg !68
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !68
  %446 = sext i32 %435 to i64, !dbg !68
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !68
  %448 = sext i32 %436 to i64, !dbg !68
  %449 = getelementptr float, ptr addrspace(1) %0, i64 %448, !dbg !68
  %450 = sext i32 %437 to i64, !dbg !68
  %451 = getelementptr float, ptr addrspace(1) %0, i64 %450, !dbg !68
  %452 = sext i32 %438 to i64, !dbg !68
  %453 = getelementptr float, ptr addrspace(1) %0, i64 %452, !dbg !68
  %454 = sext i32 %439 to i64, !dbg !68
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !68
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 true) #2, !dbg !69
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 true) #2, !dbg !69
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 true) #2, !dbg !69
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 true) #2, !dbg !69
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %449, i1 true) #2, !dbg !69
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %451, i1 true) #2, !dbg !69
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %453, i1 true) #2, !dbg !69
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 true) #2, !dbg !69
  %464 = add nsw i32 %25, 25, !dbg !70
  %465 = or disjoint i32 %26, 25, !dbg !71
  %466 = add i32 %464, %26, !dbg !71
  %467 = or disjoint i32 %26, 57, !dbg !71
  %468 = add i32 %464, %27, !dbg !71
  %469 = or disjoint i32 %28, 25, !dbg !71
  %470 = add i32 %464, %28, !dbg !71
  %471 = or disjoint i32 %26, 121, !dbg !71
  %472 = add i32 %464, %29, !dbg !71
  %473 = sext i32 %465 to i64, !dbg !72
  %474 = getelementptr float, ptr addrspace(1) %0, i64 %473, !dbg !72
  %475 = sext i32 %466 to i64, !dbg !72
  %476 = getelementptr float, ptr addrspace(1) %0, i64 %475, !dbg !72
  %477 = sext i32 %467 to i64, !dbg !72
  %478 = getelementptr float, ptr addrspace(1) %0, i64 %477, !dbg !72
  %479 = sext i32 %468 to i64, !dbg !72
  %480 = getelementptr float, ptr addrspace(1) %0, i64 %479, !dbg !72
  %481 = sext i32 %469 to i64, !dbg !72
  %482 = getelementptr float, ptr addrspace(1) %0, i64 %481, !dbg !72
  %483 = sext i32 %470 to i64, !dbg !72
  %484 = getelementptr float, ptr addrspace(1) %0, i64 %483, !dbg !72
  %485 = sext i32 %471 to i64, !dbg !72
  %486 = getelementptr float, ptr addrspace(1) %0, i64 %485, !dbg !72
  %487 = sext i32 %472 to i64, !dbg !72
  %488 = getelementptr float, ptr addrspace(1) %0, i64 %487, !dbg !72
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %474, i1 true) #2, !dbg !73
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %476, i1 true) #2, !dbg !73
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %478, i1 true) #2, !dbg !73
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %480, i1 true) #2, !dbg !73
  %493 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %482, i1 true) #2, !dbg !73
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %484, i1 true) #2, !dbg !73
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %486, i1 true) #2, !dbg !73
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %488, i1 true) #2, !dbg !73
  %497 = add nsw i32 %25, 26, !dbg !74
  %498 = or disjoint i32 %26, 26, !dbg !75
  %499 = add i32 %497, %26, !dbg !75
  %500 = or disjoint i32 %26, 58, !dbg !75
  %501 = add i32 %497, %27, !dbg !75
  %502 = or disjoint i32 %28, 26, !dbg !75
  %503 = add i32 %497, %28, !dbg !75
  %504 = or disjoint i32 %26, 122, !dbg !75
  %505 = add i32 %497, %29, !dbg !75
  %506 = sext i32 %498 to i64, !dbg !76
  %507 = getelementptr float, ptr addrspace(1) %0, i64 %506, !dbg !76
  %508 = sext i32 %499 to i64, !dbg !76
  %509 = getelementptr float, ptr addrspace(1) %0, i64 %508, !dbg !76
  %510 = sext i32 %500 to i64, !dbg !76
  %511 = getelementptr float, ptr addrspace(1) %0, i64 %510, !dbg !76
  %512 = sext i32 %501 to i64, !dbg !76
  %513 = getelementptr float, ptr addrspace(1) %0, i64 %512, !dbg !76
  %514 = sext i32 %502 to i64, !dbg !76
  %515 = getelementptr float, ptr addrspace(1) %0, i64 %514, !dbg !76
  %516 = sext i32 %503 to i64, !dbg !76
  %517 = getelementptr float, ptr addrspace(1) %0, i64 %516, !dbg !76
  %518 = sext i32 %504 to i64, !dbg !76
  %519 = getelementptr float, ptr addrspace(1) %0, i64 %518, !dbg !76
  %520 = sext i32 %505 to i64, !dbg !76
  %521 = getelementptr float, ptr addrspace(1) %0, i64 %520, !dbg !76
  %522 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %507, i1 true) #2, !dbg !77
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %509, i1 true) #2, !dbg !77
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %511, i1 true) #2, !dbg !77
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %513, i1 true) #2, !dbg !77
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %515, i1 true) #2, !dbg !77
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %517, i1 true) #2, !dbg !77
  %528 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %519, i1 true) #2, !dbg !77
  %529 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %521, i1 true) #2, !dbg !77
  %530 = add nsw i32 %25, 27, !dbg !78
  %531 = or disjoint i32 %26, 27, !dbg !79
  %532 = add i32 %530, %26, !dbg !79
  %533 = or disjoint i32 %26, 59, !dbg !79
  %534 = add i32 %530, %27, !dbg !79
  %535 = or disjoint i32 %28, 27, !dbg !79
  %536 = add i32 %530, %28, !dbg !79
  %537 = or disjoint i32 %26, 123, !dbg !79
  %538 = add i32 %530, %29, !dbg !79
  %539 = sext i32 %531 to i64, !dbg !80
  %540 = getelementptr float, ptr addrspace(1) %0, i64 %539, !dbg !80
  %541 = sext i32 %532 to i64, !dbg !80
  %542 = getelementptr float, ptr addrspace(1) %0, i64 %541, !dbg !80
  %543 = sext i32 %533 to i64, !dbg !80
  %544 = getelementptr float, ptr addrspace(1) %0, i64 %543, !dbg !80
  %545 = sext i32 %534 to i64, !dbg !80
  %546 = getelementptr float, ptr addrspace(1) %0, i64 %545, !dbg !80
  %547 = sext i32 %535 to i64, !dbg !80
  %548 = getelementptr float, ptr addrspace(1) %0, i64 %547, !dbg !80
  %549 = sext i32 %536 to i64, !dbg !80
  %550 = getelementptr float, ptr addrspace(1) %0, i64 %549, !dbg !80
  %551 = sext i32 %537 to i64, !dbg !80
  %552 = getelementptr float, ptr addrspace(1) %0, i64 %551, !dbg !80
  %553 = sext i32 %538 to i64, !dbg !80
  %554 = getelementptr float, ptr addrspace(1) %0, i64 %553, !dbg !80
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 true) #2, !dbg !81
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %542, i1 true) #2, !dbg !81
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %544, i1 true) #2, !dbg !81
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %546, i1 true) #2, !dbg !81
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %548, i1 true) #2, !dbg !81
  %560 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %550, i1 true) #2, !dbg !81
  %561 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %552, i1 true) #2, !dbg !81
  %562 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %554, i1 true) #2, !dbg !81
  %563 = sext i32 %21 to i64, !dbg !82
  %564 = getelementptr float, ptr addrspace(1) %1, i64 %563, !dbg !82
  %565 = sext i32 %22 to i64, !dbg !82
  %566 = getelementptr float, ptr addrspace(1) %1, i64 %565, !dbg !82
  %567 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #2, !dbg !83
  %568 = bitcast i32 %567 to float, !dbg !83
  %569 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #2, !dbg !83
  %570 = bitcast i32 %569 to float, !dbg !83
  %571 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #2, !dbg !83
  %572 = bitcast i32 %571 to float, !dbg !83
  %573 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #2, !dbg !83
  %574 = bitcast i32 %573 to float, !dbg !83
  %575 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #2, !dbg !83
  %576 = bitcast i32 %575 to float, !dbg !83
  %577 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #2, !dbg !83
  %578 = bitcast i32 %577 to float, !dbg !83
  %579 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #2, !dbg !83
  %580 = bitcast i32 %579 to float, !dbg !83
  %581 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #2, !dbg !83
  %582 = bitcast i32 %581 to float, !dbg !83
  %583 = sext i32 %23 to i64, !dbg !84
  %584 = getelementptr float, ptr addrspace(1) %2, i64 %583, !dbg !84
  %585 = sext i32 %24 to i64, !dbg !84
  %586 = getelementptr float, ptr addrspace(1) %2, i64 %585, !dbg !84
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %584, i1 true) #2, !dbg !85
  %588 = bitcast i32 %587 to float, !dbg !85
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %584, i1 true) #2, !dbg !85
  %590 = bitcast i32 %589 to float, !dbg !85
  %591 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %584, i1 true) #2, !dbg !85
  %592 = bitcast i32 %591 to float, !dbg !85
  %593 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %584, i1 true) #2, !dbg !85
  %594 = bitcast i32 %593 to float, !dbg !85
  %595 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %586, i1 true) #2, !dbg !85
  %596 = bitcast i32 %595 to float, !dbg !85
  %597 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %586, i1 true) #2, !dbg !85
  %598 = bitcast i32 %597 to float, !dbg !85
  %599 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %586, i1 true) #2, !dbg !85
  %600 = bitcast i32 %599 to float, !dbg !85
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %586, i1 true) #2, !dbg !85
  %602 = bitcast i32 %601 to float, !dbg !85
  %603 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !21
  %604 = insertelement <4 x i32> %603, i32 %51, i64 1, !dbg !21
  %605 = insertelement <4 x i32> %604, i32 %52, i64 2, !dbg !21
  %606 = insertelement <4 x i32> %605, i32 %53, i64 3, !dbg !21
  %607 = bitcast <4 x i32> %606 to <4 x float>, !dbg !21
  %608 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !25
  %609 = insertelement <4 x i32> %608, i32 %84, i64 1, !dbg !25
  %610 = insertelement <4 x i32> %609, i32 %85, i64 2, !dbg !25
  %611 = insertelement <4 x i32> %610, i32 %86, i64 3, !dbg !25
  %612 = bitcast <4 x i32> %611 to <4 x float>, !dbg !25
  %613 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !29
  %614 = insertelement <4 x i32> %613, i32 %117, i64 1, !dbg !29
  %615 = insertelement <4 x i32> %614, i32 %118, i64 2, !dbg !29
  %616 = insertelement <4 x i32> %615, i32 %119, i64 3, !dbg !29
  %617 = bitcast <4 x i32> %616 to <4 x float>, !dbg !29
  %618 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !33
  %619 = insertelement <4 x i32> %618, i32 %150, i64 1, !dbg !33
  %620 = insertelement <4 x i32> %619, i32 %151, i64 2, !dbg !33
  %621 = insertelement <4 x i32> %620, i32 %152, i64 3, !dbg !33
  %622 = bitcast <4 x i32> %621 to <4 x float>, !dbg !33
  %623 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !37
  %624 = insertelement <4 x i32> %623, i32 %183, i64 1, !dbg !37
  %625 = insertelement <4 x i32> %624, i32 %184, i64 2, !dbg !37
  %626 = insertelement <4 x i32> %625, i32 %185, i64 3, !dbg !37
  %627 = bitcast <4 x i32> %626 to <4 x float>, !dbg !37
  %628 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !41
  %629 = insertelement <4 x i32> %628, i32 %216, i64 1, !dbg !41
  %630 = insertelement <4 x i32> %629, i32 %217, i64 2, !dbg !41
  %631 = insertelement <4 x i32> %630, i32 %218, i64 3, !dbg !41
  %632 = bitcast <4 x i32> %631 to <4 x float>, !dbg !41
  %633 = insertelement <4 x i32> poison, i32 %248, i64 0, !dbg !45
  %634 = insertelement <4 x i32> %633, i32 %249, i64 1, !dbg !45
  %635 = insertelement <4 x i32> %634, i32 %250, i64 2, !dbg !45
  %636 = insertelement <4 x i32> %635, i32 %251, i64 3, !dbg !45
  %637 = bitcast <4 x i32> %636 to <4 x float>, !dbg !45
  %638 = insertelement <4 x i32> poison, i32 %281, i64 0, !dbg !49
  %639 = insertelement <4 x i32> %638, i32 %282, i64 1, !dbg !49
  %640 = insertelement <4 x i32> %639, i32 %283, i64 2, !dbg !49
  %641 = insertelement <4 x i32> %640, i32 %284, i64 3, !dbg !49
  %642 = bitcast <4 x i32> %641 to <4 x float>, !dbg !49
  %643 = insertelement <4 x i32> poison, i32 %314, i64 0, !dbg !53
  %644 = insertelement <4 x i32> %643, i32 %315, i64 1, !dbg !53
  %645 = insertelement <4 x i32> %644, i32 %316, i64 2, !dbg !53
  %646 = insertelement <4 x i32> %645, i32 %317, i64 3, !dbg !53
  %647 = bitcast <4 x i32> %646 to <4 x float>, !dbg !53
  %648 = insertelement <4 x i32> poison, i32 %347, i64 0, !dbg !57
  %649 = insertelement <4 x i32> %648, i32 %348, i64 1, !dbg !57
  %650 = insertelement <4 x i32> %649, i32 %349, i64 2, !dbg !57
  %651 = insertelement <4 x i32> %650, i32 %350, i64 3, !dbg !57
  %652 = bitcast <4 x i32> %651 to <4 x float>, !dbg !57
  %653 = fadd <4 x float> %607, %612, !dbg !86
  %654 = fadd <4 x float> %653, %617, !dbg !87
  %655 = fadd <4 x float> %654, %622, !dbg !88
  %656 = fadd <4 x float> %655, %627, !dbg !89
  %657 = fadd <4 x float> %656, %632, !dbg !90
  %658 = fadd <4 x float> %657, %637, !dbg !91
  %659 = fadd <4 x float> %658, %642, !dbg !92
  %660 = fadd <4 x float> %659, %647, !dbg !93
  %661 = fadd <4 x float> %660, %652, !dbg !94
  %662 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !21
  %663 = insertelement <4 x i32> %662, i32 %55, i64 1, !dbg !21
  %664 = insertelement <4 x i32> %663, i32 %56, i64 2, !dbg !21
  %665 = insertelement <4 x i32> %664, i32 %57, i64 3, !dbg !21
  %666 = bitcast <4 x i32> %665 to <4 x float>, !dbg !21
  %667 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !25
  %668 = insertelement <4 x i32> %667, i32 %88, i64 1, !dbg !25
  %669 = insertelement <4 x i32> %668, i32 %89, i64 2, !dbg !25
  %670 = insertelement <4 x i32> %669, i32 %90, i64 3, !dbg !25
  %671 = bitcast <4 x i32> %670 to <4 x float>, !dbg !25
  %672 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !29
  %673 = insertelement <4 x i32> %672, i32 %121, i64 1, !dbg !29
  %674 = insertelement <4 x i32> %673, i32 %122, i64 2, !dbg !29
  %675 = insertelement <4 x i32> %674, i32 %123, i64 3, !dbg !29
  %676 = bitcast <4 x i32> %675 to <4 x float>, !dbg !29
  %677 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !33
  %678 = insertelement <4 x i32> %677, i32 %154, i64 1, !dbg !33
  %679 = insertelement <4 x i32> %678, i32 %155, i64 2, !dbg !33
  %680 = insertelement <4 x i32> %679, i32 %156, i64 3, !dbg !33
  %681 = bitcast <4 x i32> %680 to <4 x float>, !dbg !33
  %682 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !37
  %683 = insertelement <4 x i32> %682, i32 %187, i64 1, !dbg !37
  %684 = insertelement <4 x i32> %683, i32 %188, i64 2, !dbg !37
  %685 = insertelement <4 x i32> %684, i32 %189, i64 3, !dbg !37
  %686 = bitcast <4 x i32> %685 to <4 x float>, !dbg !37
  %687 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !41
  %688 = insertelement <4 x i32> %687, i32 %220, i64 1, !dbg !41
  %689 = insertelement <4 x i32> %688, i32 %221, i64 2, !dbg !41
  %690 = insertelement <4 x i32> %689, i32 %222, i64 3, !dbg !41
  %691 = bitcast <4 x i32> %690 to <4 x float>, !dbg !41
  %692 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !45
  %693 = insertelement <4 x i32> %692, i32 %253, i64 1, !dbg !45
  %694 = insertelement <4 x i32> %693, i32 %254, i64 2, !dbg !45
  %695 = insertelement <4 x i32> %694, i32 %255, i64 3, !dbg !45
  %696 = bitcast <4 x i32> %695 to <4 x float>, !dbg !45
  %697 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !49
  %698 = insertelement <4 x i32> %697, i32 %286, i64 1, !dbg !49
  %699 = insertelement <4 x i32> %698, i32 %287, i64 2, !dbg !49
  %700 = insertelement <4 x i32> %699, i32 %288, i64 3, !dbg !49
  %701 = bitcast <4 x i32> %700 to <4 x float>, !dbg !49
  %702 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !53
  %703 = insertelement <4 x i32> %702, i32 %319, i64 1, !dbg !53
  %704 = insertelement <4 x i32> %703, i32 %320, i64 2, !dbg !53
  %705 = insertelement <4 x i32> %704, i32 %321, i64 3, !dbg !53
  %706 = bitcast <4 x i32> %705 to <4 x float>, !dbg !53
  %707 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !57
  %708 = insertelement <4 x i32> %707, i32 %352, i64 1, !dbg !57
  %709 = insertelement <4 x i32> %708, i32 %353, i64 2, !dbg !57
  %710 = insertelement <4 x i32> %709, i32 %354, i64 3, !dbg !57
  %711 = bitcast <4 x i32> %710 to <4 x float>, !dbg !57
  %712 = fadd <4 x float> %666, %671, !dbg !86
  %713 = fadd <4 x float> %712, %676, !dbg !87
  %714 = fadd <4 x float> %713, %681, !dbg !88
  %715 = fadd <4 x float> %714, %686, !dbg !89
  %716 = fadd <4 x float> %715, %691, !dbg !90
  %717 = fadd <4 x float> %716, %696, !dbg !91
  %718 = fadd <4 x float> %717, %701, !dbg !92
  %719 = fadd <4 x float> %718, %706, !dbg !93
  %720 = fadd <4 x float> %719, %711, !dbg !94
  %721 = fadd float %568, %588, !dbg !95
  %722 = fadd float %570, %590, !dbg !95
  %723 = fadd float %572, %592, !dbg !95
  %724 = fadd float %574, %594, !dbg !95
  %725 = fadd float %576, %596, !dbg !95
  %726 = fadd float %578, %598, !dbg !95
  %727 = fadd float %580, %600, !dbg !95
  %728 = fadd float %582, %602, !dbg !95
  %729 = sext i32 %18 to i64, !dbg !96
  %730 = getelementptr float, ptr addrspace(1) %3, i64 %729, !dbg !96
  %731 = sext i32 %19 to i64, !dbg !96
  %732 = getelementptr float, ptr addrspace(1) %3, i64 %731, !dbg !96
  %733 = zext nneg i32 %11 to i64, !dbg !97
  %734 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %733, !dbg !97
  %735 = getelementptr inbounds i8, ptr addrspace(3) %734, i64 16, !dbg !97
  %736 = zext nneg i32 %13 to i64, !dbg !97
  %737 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %736, !dbg !97
  %738 = zext nneg i32 %14 to i64, !dbg !97
  %739 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %738, !dbg !97
  %740 = getelementptr inbounds i8, ptr addrspace(3) %737, i64 4, !dbg !97
  %741 = getelementptr inbounds i8, ptr addrspace(3) %737, i64 8, !dbg !97
  %742 = getelementptr inbounds i8, ptr addrspace(3) %737, i64 12, !dbg !97
  %743 = sext i32 %15 to i64, !dbg !98
  %744 = getelementptr i1, ptr addrspace(1) %4, i64 %743, !dbg !98
  %745 = insertelement <4 x i32> poison, i32 %423, i64 0, !dbg !65
  %746 = insertelement <4 x i32> %745, i32 %424, i64 1, !dbg !65
  %747 = insertelement <4 x i32> %746, i32 %425, i64 2, !dbg !65
  %748 = insertelement <4 x i32> %747, i32 %426, i64 3, !dbg !65
  %749 = bitcast <4 x i32> %748 to <4 x float>, !dbg !65
  %750 = insertelement <4 x i32> poison, i32 %456, i64 0, !dbg !69
  %751 = insertelement <4 x i32> %750, i32 %457, i64 1, !dbg !69
  %752 = insertelement <4 x i32> %751, i32 %458, i64 2, !dbg !69
  %753 = insertelement <4 x i32> %752, i32 %459, i64 3, !dbg !69
  %754 = bitcast <4 x i32> %753 to <4 x float>, !dbg !69
  %755 = insertelement <4 x i32> poison, i32 %489, i64 0, !dbg !73
  %756 = insertelement <4 x i32> %755, i32 %490, i64 1, !dbg !73
  %757 = insertelement <4 x i32> %756, i32 %491, i64 2, !dbg !73
  %758 = insertelement <4 x i32> %757, i32 %492, i64 3, !dbg !73
  %759 = bitcast <4 x i32> %758 to <4 x float>, !dbg !73
  %760 = insertelement <4 x i32> poison, i32 %522, i64 0, !dbg !77
  %761 = insertelement <4 x i32> %760, i32 %523, i64 1, !dbg !77
  %762 = insertelement <4 x i32> %761, i32 %524, i64 2, !dbg !77
  %763 = insertelement <4 x i32> %762, i32 %525, i64 3, !dbg !77
  %764 = bitcast <4 x i32> %763 to <4 x float>, !dbg !77
  %765 = insertelement <4 x i32> poison, i32 %555, i64 0, !dbg !81
  %766 = insertelement <4 x i32> %765, i32 %556, i64 1, !dbg !81
  %767 = insertelement <4 x i32> %766, i32 %557, i64 2, !dbg !81
  %768 = insertelement <4 x i32> %767, i32 %558, i64 3, !dbg !81
  %769 = bitcast <4 x i32> %768 to <4 x float>, !dbg !81
  %770 = fadd <4 x float> %661, %388, !dbg !99
  %771 = fadd <4 x float> %770, %749, !dbg !100
  %772 = fadd <4 x float> %771, %754, !dbg !101
  %773 = fadd <4 x float> %772, %759, !dbg !102
  %774 = fadd <4 x float> %773, %764, !dbg !103
  %775 = fadd <4 x float> %774, %769, !dbg !104
  %776 = fmul <4 x float> %775, splat (float 6.250000e-02), !dbg !105
  %777 = fcmp olt <4 x float> %776, zeroinitializer, !dbg !106
  %778 = select <4 x i1> %777, <4 x float> zeroinitializer, <4 x float> %776, !dbg !110
  %779 = extractelement <4 x float> %778, i64 0, !dbg !111
  %780 = fadd float %779, %721, !dbg !111
  %781 = extractelement <4 x float> %778, i64 1, !dbg !111
  %782 = fadd float %781, %722, !dbg !111
  %783 = extractelement <4 x float> %778, i64 2, !dbg !111
  %784 = fadd float %783, %723, !dbg !111
  %785 = extractelement <4 x float> %778, i64 3, !dbg !111
  %786 = fadd float %785, %724, !dbg !111
  %787 = fcmp ole <4 x float> %778, zeroinitializer, !dbg !112
  %788 = bitcast float %780 to i32, !dbg !97
  %789 = bitcast float %782 to i32, !dbg !97
  %790 = bitcast float %784 to i32, !dbg !97
  %791 = bitcast float %786 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %734, i32 %788, i32 %789, i32 %790, i32 %791, i1 true) #2, !dbg !97
  %792 = insertelement <4 x i32> poison, i32 %427, i64 0, !dbg !65
  %793 = insertelement <4 x i32> %792, i32 %428, i64 1, !dbg !65
  %794 = insertelement <4 x i32> %793, i32 %429, i64 2, !dbg !65
  %795 = insertelement <4 x i32> %794, i32 %430, i64 3, !dbg !65
  %796 = bitcast <4 x i32> %795 to <4 x float>, !dbg !65
  %797 = insertelement <4 x i32> poison, i32 %460, i64 0, !dbg !69
  %798 = insertelement <4 x i32> %797, i32 %461, i64 1, !dbg !69
  %799 = insertelement <4 x i32> %798, i32 %462, i64 2, !dbg !69
  %800 = insertelement <4 x i32> %799, i32 %463, i64 3, !dbg !69
  %801 = bitcast <4 x i32> %800 to <4 x float>, !dbg !69
  %802 = insertelement <4 x i32> poison, i32 %493, i64 0, !dbg !73
  %803 = insertelement <4 x i32> %802, i32 %494, i64 1, !dbg !73
  %804 = insertelement <4 x i32> %803, i32 %495, i64 2, !dbg !73
  %805 = insertelement <4 x i32> %804, i32 %496, i64 3, !dbg !73
  %806 = bitcast <4 x i32> %805 to <4 x float>, !dbg !73
  %807 = insertelement <4 x i32> poison, i32 %526, i64 0, !dbg !77
  %808 = insertelement <4 x i32> %807, i32 %527, i64 1, !dbg !77
  %809 = insertelement <4 x i32> %808, i32 %528, i64 2, !dbg !77
  %810 = insertelement <4 x i32> %809, i32 %529, i64 3, !dbg !77
  %811 = bitcast <4 x i32> %810 to <4 x float>, !dbg !77
  %812 = insertelement <4 x i32> poison, i32 %559, i64 0, !dbg !81
  %813 = insertelement <4 x i32> %812, i32 %560, i64 1, !dbg !81
  %814 = insertelement <4 x i32> %813, i32 %561, i64 2, !dbg !81
  %815 = insertelement <4 x i32> %814, i32 %562, i64 3, !dbg !81
  %816 = bitcast <4 x i32> %815 to <4 x float>, !dbg !81
  %817 = fadd <4 x float> %720, %397, !dbg !99
  %818 = fadd <4 x float> %817, %796, !dbg !100
  %819 = fadd <4 x float> %818, %801, !dbg !101
  %820 = fadd <4 x float> %819, %806, !dbg !102
  %821 = fadd <4 x float> %820, %811, !dbg !103
  %822 = fadd <4 x float> %821, %816, !dbg !104
  %823 = fmul <4 x float> %822, splat (float 6.250000e-02), !dbg !105
  %824 = fcmp olt <4 x float> %823, zeroinitializer, !dbg !106
  %825 = select <4 x i1> %824, <4 x float> zeroinitializer, <4 x float> %823, !dbg !110
  %826 = extractelement <4 x float> %825, i64 0, !dbg !111
  %827 = fadd float %826, %725, !dbg !111
  %828 = extractelement <4 x float> %825, i64 1, !dbg !111
  %829 = fadd float %828, %726, !dbg !111
  %830 = extractelement <4 x float> %825, i64 2, !dbg !111
  %831 = fadd float %830, %727, !dbg !111
  %832 = extractelement <4 x float> %825, i64 3, !dbg !111
  %833 = fadd float %832, %728, !dbg !111
  %834 = fcmp ole <4 x float> %825, zeroinitializer, !dbg !112
  %835 = bitcast float %827 to i32, !dbg !97
  %836 = bitcast float %829 to i32, !dbg !97
  %837 = bitcast float %831 to i32, !dbg !97
  %838 = bitcast float %833 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %735, i32 %835, i32 %836, i32 %837, i32 %838, i1 true) #2, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %839 = load <4 x i32>, ptr addrspace(3) %739, align 16, !dbg !97
  %.extract = load i32, ptr addrspace(3) %737, align 16, !dbg !97
  %.extract8 = load i32, ptr addrspace(3) %740, align 4, !dbg !97
  %.extract9 = load i32, ptr addrspace(3) %741, align 8, !dbg !97
  %.extract10 = load i32, ptr addrspace(3) %742, align 4, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %730, i1 true) #2, !dbg !97
  %.extract11 = extractelement <4 x i32> %839, i64 0, !dbg !97
  %.extract12 = extractelement <4 x i32> %839, i64 1, !dbg !97
  %.extract13 = extractelement <4 x i32> %839, i64 2, !dbg !97
  %.extract14 = extractelement <4 x i32> %839, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %732, i1 true) #2, !dbg !97
  %840 = zext <4 x i1> %787 to <4 x i8>, !dbg !113
  %841 = bitcast <4 x i8> %840 to i32, !dbg !113
  %842 = zext <4 x i1> %834 to <4 x i8>, !dbg !113
  %843 = bitcast <4 x i8> %842 to i32, !dbg !113
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %841, i32 %843, ptr addrspace(1) %744, i1 true) #2, !dbg !113
  ret void, !dbg !114
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5n73dhkgjqpaabxovrqdhqskaq2estbuyfl5wstufwixfwppjyi.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12", linkageName: "triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 26, scope: !7)
!17 = !DILocation(line: 29, column: 32, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 29, column: 37, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 45, scope: !7)
!22 = !DILocation(line: 30, column: 34, scope: !7)
!23 = !DILocation(line: 30, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 49, scope: !7)
!26 = !DILocation(line: 31, column: 34, scope: !7)
!27 = !DILocation(line: 31, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 49, scope: !7)
!30 = !DILocation(line: 32, column: 34, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 34, scope: !7)
!35 = !DILocation(line: 33, column: 41, scope: !7)
!36 = !DILocation(line: 33, column: 30, scope: !7)
!37 = !DILocation(line: 33, column: 49, scope: !7)
!38 = !DILocation(line: 34, column: 34, scope: !7)
!39 = !DILocation(line: 34, column: 41, scope: !7)
!40 = !DILocation(line: 34, column: 30, scope: !7)
!41 = !DILocation(line: 34, column: 49, scope: !7)
!42 = !DILocation(line: 35, column: 36, scope: !7)
!43 = !DILocation(line: 35, column: 43, scope: !7)
!44 = !DILocation(line: 35, column: 31, scope: !7)
!45 = !DILocation(line: 35, column: 51, scope: !7)
!46 = !DILocation(line: 36, column: 36, scope: !7)
!47 = !DILocation(line: 36, column: 43, scope: !7)
!48 = !DILocation(line: 36, column: 31, scope: !7)
!49 = !DILocation(line: 36, column: 51, scope: !7)
!50 = !DILocation(line: 37, column: 36, scope: !7)
!51 = !DILocation(line: 37, column: 43, scope: !7)
!52 = !DILocation(line: 37, column: 31, scope: !7)
!53 = !DILocation(line: 37, column: 51, scope: !7)
!54 = !DILocation(line: 38, column: 36, scope: !7)
!55 = !DILocation(line: 38, column: 43, scope: !7)
!56 = !DILocation(line: 38, column: 31, scope: !7)
!57 = !DILocation(line: 38, column: 51, scope: !7)
!58 = !DILocation(line: 39, column: 36, scope: !7)
!59 = !DILocation(line: 39, column: 43, scope: !7)
!60 = !DILocation(line: 39, column: 31, scope: !7)
!61 = !DILocation(line: 39, column: 51, scope: !7)
!62 = !DILocation(line: 40, column: 36, scope: !7)
!63 = !DILocation(line: 40, column: 43, scope: !7)
!64 = !DILocation(line: 40, column: 31, scope: !7)
!65 = !DILocation(line: 40, column: 51, scope: !7)
!66 = !DILocation(line: 41, column: 36, scope: !7)
!67 = !DILocation(line: 41, column: 43, scope: !7)
!68 = !DILocation(line: 41, column: 31, scope: !7)
!69 = !DILocation(line: 41, column: 51, scope: !7)
!70 = !DILocation(line: 42, column: 36, scope: !7)
!71 = !DILocation(line: 42, column: 43, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 51, scope: !7)
!74 = !DILocation(line: 43, column: 36, scope: !7)
!75 = !DILocation(line: 43, column: 43, scope: !7)
!76 = !DILocation(line: 43, column: 31, scope: !7)
!77 = !DILocation(line: 43, column: 51, scope: !7)
!78 = !DILocation(line: 44, column: 36, scope: !7)
!79 = !DILocation(line: 44, column: 43, scope: !7)
!80 = !DILocation(line: 44, column: 31, scope: !7)
!81 = !DILocation(line: 44, column: 51, scope: !7)
!82 = !DILocation(line: 45, column: 31, scope: !7)
!83 = !DILocation(line: 45, column: 36, scope: !7)
!84 = !DILocation(line: 46, column: 31, scope: !7)
!85 = !DILocation(line: 46, column: 36, scope: !7)
!86 = !DILocation(line: 47, column: 18, scope: !7)
!87 = !DILocation(line: 48, column: 18, scope: !7)
!88 = !DILocation(line: 49, column: 18, scope: !7)
!89 = !DILocation(line: 50, column: 18, scope: !7)
!90 = !DILocation(line: 51, column: 19, scope: !7)
!91 = !DILocation(line: 52, column: 20, scope: !7)
!92 = !DILocation(line: 53, column: 20, scope: !7)
!93 = !DILocation(line: 54, column: 20, scope: !7)
!94 = !DILocation(line: 55, column: 20, scope: !7)
!95 = !DILocation(line: 66, column: 20, scope: !7)
!96 = !DILocation(line: 70, column: 25, scope: !7)
!97 = !DILocation(line: 70, column: 37, scope: !7)
!98 = !DILocation(line: 71, column: 25, scope: !7)
!99 = !DILocation(line: 56, column: 20, scope: !7)
!100 = !DILocation(line: 57, column: 20, scope: !7)
!101 = !DILocation(line: 58, column: 20, scope: !7)
!102 = !DILocation(line: 59, column: 20, scope: !7)
!103 = !DILocation(line: 60, column: 20, scope: !7)
!104 = !DILocation(line: 61, column: 20, scope: !7)
!105 = !DILocation(line: 63, column: 20, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 65, column: 42, scope: !7)
!110 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 67, column: 20, scope: !7)
!112 = !DILocation(line: 69, column: 21, scope: !7)
!113 = !DILocation(line: 71, column: 37, scope: !7)
!114 = !DILocation(line: 71, column: 4, scope: !7)
