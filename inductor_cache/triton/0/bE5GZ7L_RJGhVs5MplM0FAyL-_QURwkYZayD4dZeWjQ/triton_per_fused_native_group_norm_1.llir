; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 126, !dbg !12
  %15 = or disjoint i32 %9, %11, !dbg !13
  %16 = or disjoint i32 %9, %12, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = shl i32 %15, 1, !dbg !15
  %20 = shl i32 %16, 1, !dbg !15
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = sext i32 %20 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !16
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !17
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !17
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !17
  %28 = bitcast i32 %26 to float, !dbg !17
  %29 = bitcast i32 %27 to float, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !17
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !17
  %33 = bitcast i32 %31 to float, !dbg !17
  %34 = bitcast i32 %32 to float, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !19
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !19
  %40 = bitcast i32 %38 to float, !dbg !19
  %41 = bitcast i32 %39 to float, !dbg !19
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !19
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !19
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !19
  %45 = bitcast i32 %43 to float, !dbg !19
  %46 = bitcast i32 %44 to float, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !21
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !21
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !21
  %52 = bitcast i32 %50 to float, !dbg !21
  %53 = bitcast i32 %51 to float, !dbg !21
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !21
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !21
  %57 = bitcast i32 %55 to float, !dbg !21
  %58 = bitcast i32 %56 to float, !dbg !21
  %59 = select i1 %17, float %28, float 0.000000e+00, !dbg !22
  %60 = select i1 %17, float %29, float 0.000000e+00, !dbg !22
  %61 = select i1 %18, float %33, float 0.000000e+00, !dbg !22
  %62 = select i1 %18, float %34, float 0.000000e+00, !dbg !22
  %63 = select i1 %17, float %52, float 0.000000e+00, !dbg !23
  %64 = select i1 %17, float %53, float 0.000000e+00, !dbg !23
  %65 = select i1 %18, float %57, float 0.000000e+00, !dbg !23
  %66 = select i1 %18, float %58, float 0.000000e+00, !dbg !23
  %67 = fsub float %60, %59, !dbg !24
  %68 = fadd float %63, %64, !dbg !29
  %69 = fcmp oeq float %68, 0.000000e+00, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %68) #4, !dbg !31
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !32
  %72 = fmul float %67, %71, !dbg !33
  %73 = fadd float %59, %72, !dbg !34
  %74 = fadd float %40, %41, !dbg !35
  %75 = select i1 %17, float %74, float 0.000000e+00, !dbg !35
  %76 = fmul float %67, %67, !dbg !36
  %77 = fmul float %76, %63, !dbg !37
  %78 = fmul float %77, %71, !dbg !38
  %79 = fadd float %75, %78, !dbg !39
  %80 = fsub float %62, %61, !dbg !24
  %81 = fadd float %65, %66, !dbg !29
  %82 = fcmp oeq float %81, 0.000000e+00, !dbg !30
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %81) #4, !dbg !31
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !32
  %85 = fmul float %80, %84, !dbg !33
  %86 = fadd float %61, %85, !dbg !34
  %87 = fadd float %45, %46, !dbg !35
  %88 = select i1 %18, float %87, float 0.000000e+00, !dbg !35
  %89 = fmul float %80, %80, !dbg !36
  %90 = fmul float %89, %65, !dbg !37
  %91 = fmul float %90, %84, !dbg !38
  %92 = fadd float %88, %91, !dbg !39
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %94 = bitcast float %73 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !40
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !40
  %96 = bitcast float %86 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !40
  %98 = load <2 x i32>, ptr addrspace(3) %97, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %99 = bitcast float %79 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %99, i1 true) #4, !dbg !41
  %100 = bitcast float %92 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %100, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %101 = load float, ptr addrspace(3) %97, align 8, !dbg !41
  %102 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 4, !dbg !41
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !41
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.638400e+04) #4, !dbg !42
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.638400e+04) #4, !dbg !42
  %106 = fadd float %104, 0x3EE4F8B580000000, !dbg !43
  %107 = fadd float %105, 0x3EE4F8B580000000, !dbg !43
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %108, 0, !dbg !41
  br i1 %.not.i, label %111, label %109, !dbg !41

109:                                              ; preds = %7
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

111:                                              ; preds = %7
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %109, %111
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], !dbg !41
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i5 = icmp eq i32 %113, 0, !dbg !41
  br i1 %.not.i5, label %116, label %114, !dbg !41

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !41
  br label %__nv_rsqrtf.exit7, !dbg !41

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !41
  br label %__nv_rsqrtf.exit7, !dbg !41

__nv_rsqrtf.exit7:                                ; preds = %114, %116
  %.0.i6 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !41
  %118 = or disjoint i32 %9, %14, !dbg !13
  %119 = icmp slt i32 %118, 128, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %120 = sext i32 %118 to i64, !dbg !45
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !45
  %122 = bitcast float %.0.i to i32, !dbg !46
  %123 = bitcast float %.0.i6 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 %119) #4, !dbg !46
  %124 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !47
  %.extract = extractelement <2 x i32> %98, i64 0, !dbg !48
  %.extract4 = extractelement <2 x i32> %98, i64 1, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %124, i1 %119) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cngsd7ypfn6rjoncmysndkh6ypmp5xtvevjy2dc4v2pkp3iwznre.py", directory: "inductor_cache/ng")
!4 = !{ptr @triton_per_fused_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_1", linkageName: "triton_per_fused_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 42, scope: !7)
!22 = !DILocation(line: 37, column: 33, scope: !7)
!23 = !DILocation(line: 39, column: 33, scope: !7)
!24 = !DILocation(line: 192, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 40, column: 67, scope: !7)
!29 = !DILocation(line: 193, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 194, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 194, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 194, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 196, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 196, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 197, column: 15, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 197, column: 30, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 197, column: 38, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 197, column: 49, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 197, column: 22, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 48, column: 28, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 4, scope: !7)
!45 = !DILocation(line: 50, column: 28, scope: !7)
!46 = !DILocation(line: 50, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 25, scope: !7)
!48 = !DILocation(line: 51, column: 37, scope: !7)
!49 = !DILocation(line: 51, column: 4, scope: !7)
