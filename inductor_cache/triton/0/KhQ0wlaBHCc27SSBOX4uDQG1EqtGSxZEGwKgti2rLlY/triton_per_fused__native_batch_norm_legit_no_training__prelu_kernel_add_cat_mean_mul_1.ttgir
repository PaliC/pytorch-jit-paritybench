#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0)
#loc1 = loc(unknown)
#loc59 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":71:26)
#loc76 = loc(callsite(#loc1 at #loc59))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c-2_i32 = arith.constant -2 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1.000000e-03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e-03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %6 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %7 = arith.divsi %0, %c4_i32 : i32 loc(#loc6)
    %8 = tt.addptr %arg3, %6 : !tt.ptr<f32>, i32 loc(#loc7)
    %9 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc8)
    %12 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc8)
    %13 = tt.load %9, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %14 = tt.load %10, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %15 = tt.addptr %arg4, %6 : !tt.ptr<f32>, i32 loc(#loc9)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %17 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %18 = tt.load %16, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %19 = tt.load %17, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %20 = tt.addptr %arg5, %6 : !tt.ptr<f32>, i32 loc(#loc11)
    %21 = tt.splat %20 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %22 = tt.splat %20 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.load %21, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %24 = tt.load %22, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %25 = tt.addptr %arg6, %6 : !tt.ptr<f32>, i32 loc(#loc13)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %27 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %28 = tt.load %26, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %29 = tt.load %27, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %30 = arith.muli %0, %c16_i32 : i32 loc(#loc15)
    %31 = tt.splat %30 : i32 -> tensor<1x16xi32, #blocked> loc(#loc16)
    %32 = arith.addi %5, %31 : tensor<1x16xi32, #blocked> loc(#loc16)
    %33 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %34 = tt.addptr %33, %32 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc17)
    %35 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc18)
    %36 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc18)
    %37 = tt.load %34, %36, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %38 = tt.addptr %arg8, %6 : !tt.ptr<f32>, i32 loc(#loc19)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %40 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %41 = tt.load %39, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %42 = tt.load %40, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %43 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc21)
    %44 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %45 = tt.load %44, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %46 = arith.extsi %6 : i32 to i64 loc(#loc23)
    %47 = arith.cmpi slt, %46, %c2_i64 : i64 loc(#loc23)
    %48 = arith.muli %6, %c16_i32 : i32 loc(#loc24)
    %49 = tt.splat %48 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc25)
    %50 = tt.splat %48 : i32 -> tensor<1x16xi32, #blocked> loc(#loc25)
    %51 = arith.addi %4, %49 : tensor<1x16xi32, #blocked1> loc(#loc25)
    %52 = arith.addi %5, %50 : tensor<1x16xi32, #blocked> loc(#loc25)
    %53 = arith.muli %7, %c32_i32 : i32 loc(#loc26)
    %54 = tt.splat %53 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc27)
    %55 = tt.splat %53 : i32 -> tensor<1x16xi32, #blocked> loc(#loc27)
    %56 = arith.addi %51, %54 : tensor<1x16xi32, #blocked1> loc(#loc27)
    %57 = arith.addi %52, %55 : tensor<1x16xi32, #blocked> loc(#loc27)
    %58 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %59 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc28)
    %60 = tt.addptr %58, %56 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc28)
    %61 = tt.addptr %59, %57 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc28)
    %62 = arith.andi %47, %1 : i1 loc(#loc29)
    %63 = tt.splat %62 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc30)
    %64 = tt.splat %62 : i1 -> tensor<1x16xi1, #blocked> loc(#loc30)
    %65 = tt.load %60, %63, %cst_6 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc30)
    %66 = tt.load %61, %64, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc30)
    %67 = arith.cmpi sge, %46, %c2_i64 : i64 loc(#loc31)
    %68 = arith.addi %6, %c-2_i32 : i32 loc(#loc32)
    %69 = arith.muli %68, %c16_i32 : i32 loc(#loc33)
    %70 = tt.splat %69 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc34)
    %71 = tt.splat %69 : i32 -> tensor<1x16xi32, #blocked> loc(#loc34)
    %72 = arith.addi %4, %70 : tensor<1x16xi32, #blocked1> loc(#loc34)
    %73 = arith.addi %5, %71 : tensor<1x16xi32, #blocked> loc(#loc34)
    %74 = arith.addi %72, %54 : tensor<1x16xi32, #blocked1> loc(#loc35)
    %75 = arith.addi %73, %55 : tensor<1x16xi32, #blocked> loc(#loc35)
    %76 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %77 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc36)
    %78 = tt.addptr %76, %74 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc36)
    %79 = tt.addptr %77, %75 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc36)
    %80 = arith.andi %67, %1 : i1 loc(#loc37)
    %81 = tt.splat %80 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc38)
    %82 = tt.splat %80 : i1 -> tensor<1x16xi1, #blocked> loc(#loc38)
    %83 = tt.load %78, %81, %cst_6 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %84 = tt.load %79, %82, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc38)
    %85 = tt.splat %47 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc39)
    %86 = tt.splat %47 : i1 -> tensor<1x16xi1, #blocked> loc(#loc39)
    %87 = arith.select %85, %65, %83 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc39)
    %88 = arith.select %86, %66, %84 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc39)
    %89 = tt.broadcast %13 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc40)
    %90 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc40)
    %91 = arith.subf %87, %89 : tensor<1x16xf32, #blocked1> loc(#loc40)
    %92 = arith.subf %88, %90 : tensor<1x16xf32, #blocked> loc(#loc40)
    %93 = arith.addf %18, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc41)
    %94 = arith.addf %19, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc41)
    %95 = tt.extern_elementwise %93 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %96 = tt.extern_elementwise %94 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc42)
    %97 = arith.divf %cst_1, %95 : tensor<1x1xf32, #blocked1> loc(#loc43)
    %98 = arith.divf %cst_2, %96 : tensor<1x1xf32, #blocked> loc(#loc43)
    %99 = tt.broadcast %97 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc44)
    %100 = tt.broadcast %98 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc44)
    %101 = arith.mulf %91, %99 : tensor<1x16xf32, #blocked1> loc(#loc44)
    %102 = arith.mulf %92, %100 : tensor<1x16xf32, #blocked> loc(#loc44)
    %103 = tt.broadcast %23 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc45)
    %104 = tt.broadcast %24 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc45)
    %105 = arith.mulf %101, %103 : tensor<1x16xf32, #blocked1> loc(#loc45)
    %106 = arith.mulf %102, %104 : tensor<1x16xf32, #blocked> loc(#loc45)
    %107 = tt.broadcast %28 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc46)
    %108 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc46)
    %109 = arith.addf %105, %107 : tensor<1x16xf32, #blocked1> loc(#loc46)
    %110 = arith.addf %106, %108 : tensor<1x16xf32, #blocked> loc(#loc46)
    %111 = arith.cmpf ogt, %109, %cst_6 : tensor<1x16xf32, #blocked1> loc(#loc47)
    %112 = arith.cmpf ogt, %110, %cst : tensor<1x16xf32, #blocked> loc(#loc47)
    %113 = tt.broadcast %41 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc48)
    %114 = tt.broadcast %42 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc48)
    %115 = arith.mulf %113, %109 : tensor<1x16xf32, #blocked1> loc(#loc48)
    %116 = arith.mulf %114, %110 : tensor<1x16xf32, #blocked> loc(#loc48)
    %117 = arith.select %111, %109, %115 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc49)
    %118 = arith.select %112, %110, %116 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc49)
    %119 = arith.subf %cst_0, %45 : tensor<1x1xf32, #blocked> loc(#loc71)
    %120 = math.exp %119 : tensor<1x1xf32, #blocked> loc(#loc72)
    %121 = arith.addf %120, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc73)
    %122 = arith.divf %cst_2, %121 : tensor<1x1xf32, #blocked> loc(#loc74)
    %123 = tt.broadcast %122 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc55)
    %124 = arith.mulf %118, %123 : tensor<1x16xf32, #blocked> loc(#loc55)
    %125 = arith.addf %37, %124 : tensor<1x16xf32, #blocked> loc(#loc56)
    %126 = arith.select %35, %117, %cst_6 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc57)
    %127 = "tt.reduce"(%126) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32 loc(callsite(#loc1 at #loc59)), %arg15: f32 loc(callsite(#loc1 at #loc59))):
      %136 = arith.addf %arg14, %arg15 : f32 loc(#loc78)
      tt.reduce.return %136 : f32 loc(#loc75)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc75)
    %128 = tt.expand_dims %127 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc61)
    %129 = arith.divf %128, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc62)
    %130 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc63)
    %131 = tt.addptr %130, %32 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc63)
    tt.store %131, %88, %36 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc64)
    %132 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc65)
    %133 = tt.addptr %132, %32 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc65)
    tt.store %133, %125, %36 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc66)
    gpu.barrier loc(#loc67)
    %134 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc68)
    %135 = tt.splat %134 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc69)
    tt.store %135, %129, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc69)
    tt.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":23:28)
#loc3 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":25:21)
#loc4 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":26:34)
#loc5 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":29:19)
#loc6 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":31:19)
#loc7 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":33:31)
#loc8 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":33:36)
#loc9 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":34:31)
#loc10 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":34:36)
#loc11 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":35:31)
#loc12 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":35:36)
#loc13 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":36:31)
#loc14 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":36:36)
#loc15 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":37:39)
#loc16 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":37:36)
#loc17 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":37:31)
#loc18 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":37:44)
#loc19 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":38:31)
#loc20 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":38:36)
#loc21 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":39:31)
#loc22 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":39:36)
#loc23 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":44:18)
#loc24 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:39)
#loc25 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:35)
#loc26 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:48)
#loc27 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:45)
#loc28 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:30)
#loc29 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:60)
#loc30 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":45:53)
#loc31 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":46:19)
#loc32 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:46)
#loc33 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:39)
#loc34 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:35)
#loc35 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:52)
#loc36 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:30)
#loc37 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:67)
#loc38 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":49:60)
#loc39 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":50:33)
#loc40 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":51:20)
#loc41 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":53:20)
#loc42 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":54:27)
#loc43 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":56:20)
#loc44 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":59:20)
#loc45 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":60:20)
#loc46 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":61:20)
#loc47 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":63:20)
#loc48 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":64:20)
#loc49 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":65:35)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc51 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":66:23)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc55 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":67:20)
#loc56 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":68:20)
#loc57 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":70:35)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc61 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":71:29)
#loc62 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":73:20)
#loc63 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":74:25)
#loc64 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":74:45)
#loc65 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":75:25)
#loc66 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":75:45)
#loc67 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":76:4)
#loc68 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":77:28)
#loc69 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":77:40)
#loc70 = loc("inductor_cache/mp/cmpi2y7ot3b6siwn27t2asnah3ewmbimeiuller6asngvgb4lkb3.py":77:4)
#loc71 = loc(callsite(#loc50 at #loc51))
#loc72 = loc(callsite(#loc52 at #loc51))
#loc73 = loc(callsite(#loc53 at #loc51))
#loc74 = loc(callsite(#loc54 at #loc51))
#loc75 = loc(callsite(#loc58 at #loc59))
#loc77 = loc(callsite(#loc60 at #loc58))
#loc78 = loc(callsite(#loc77 at #loc59))
