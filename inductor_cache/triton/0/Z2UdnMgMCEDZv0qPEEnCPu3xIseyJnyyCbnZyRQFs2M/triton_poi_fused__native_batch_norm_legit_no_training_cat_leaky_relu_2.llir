; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 1024, !dbg !14
  %19 = mul i32 %18, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = sext i32 %.decomposed to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !16
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !18
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !19
  %27 = bitcast i32 %25 to float, !dbg !19
  %28 = bitcast i32 %26 to float, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = icmp slt i32 %.decomposed, 256, !dbg !24
  %34 = shl nsw i32 %18, 8, !dbg !25
  %35 = add nsw i32 %34, %.decomposed, !dbg !26
  %36 = sext i32 %35 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !27
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !28
  %39 = and i32 %.decomposed, -256, !dbg !29
  %40 = icmp eq i32 %39, 256, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !30
  %42 = getelementptr i8, ptr addrspace(1) %41, i64 -1024, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !31
  %44 = icmp eq i32 %39, 512, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !33
  %46 = getelementptr i8, ptr addrspace(1) %45, i64 -2048, !dbg !33
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !34
  %48 = icmp sgt i32 %.decomposed, 767, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !36
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 -3072, !dbg !36
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !37
  %52 = fadd float %27, 0x3EE4F8B580000000, !dbg !38
  %53 = fadd float %28, 0x3EE4F8B580000000, !dbg !38
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %54, 0, !dbg !39
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %55, 0, !dbg !39
  br i1 %.not.i, label %61, label %56, !dbg !39

56:                                               ; preds = %11
  br i1 %.not1.i, label %59, label %57, !dbg !39

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

61:                                               ; preds = %11
  br i1 %.not1.i, label %64, label %62, !dbg !39

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !39
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %66, 0, !dbg !39
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %67, 0, !dbg !39
  br i1 %.not.i6, label %73, label %68, !dbg !39

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %76, label %74, !dbg !39

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %69, %71, %74, %76
  %.0.i8 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !39
  %78 = extractvalue { i32, i32 } %38, 1, !dbg !28
  %79 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %80 = extractvalue { i32, i32 } %47, 1, !dbg !34
  %81 = extractvalue { i32, i32 } %51, 1, !dbg !37
  %.v1 = select i1 %44, i32 %80, i32 %81, !dbg !40
  %.v3 = select i1 %40, i32 %79, i32 %.v1, !dbg !41
  %.v5 = select i1 %33, i32 %78, i32 %.v3, !dbg !42
  %82 = bitcast i32 %.v5 to float, !dbg !42
  %83 = extractvalue { i32, i32 } %22, 1, !dbg !17
  %84 = bitcast i32 %83 to float, !dbg !17
  %85 = fsub float %82, %84, !dbg !43
  %86 = extractvalue { i32, i32 } %38, 0, !dbg !28
  %87 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %88 = extractvalue { i32, i32 } %47, 0, !dbg !34
  %89 = extractvalue { i32, i32 } %51, 0, !dbg !37
  %.v = select i1 %44, i32 %88, i32 %89, !dbg !40
  %.v2 = select i1 %40, i32 %87, i32 %.v, !dbg !41
  %.v4 = select i1 %33, i32 %86, i32 %.v2, !dbg !42
  %90 = bitcast i32 %.v4 to float, !dbg !42
  %91 = extractvalue { i32, i32 } %22, 0, !dbg !17
  %92 = bitcast i32 %91 to float, !dbg !17
  %93 = fsub float %90, %92, !dbg !43
  %94 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %97 = bitcast i32 %96 to float, !dbg !23
  %98 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %99 = bitcast i32 %98 to float, !dbg !21
  %100 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %101 = bitcast i32 %100 to float, !dbg !21
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !44
  %104 = fmul float %93, %102, !dbg !45
  %105 = fmul float %85, %103, !dbg !45
  %106 = fmul float %104, %101, !dbg !46
  %107 = fmul float %105, %99, !dbg !46
  %108 = fadd float %106, %97, !dbg !47
  %109 = fadd float %107, %95, !dbg !47
  %110 = fcmp ogt float %108, 0.000000e+00, !dbg !48
  %111 = fcmp ogt float %109, 0.000000e+00, !dbg !48
  %112 = fmul float %108, 0x3F847AE140000000, !dbg !49
  %113 = fmul float %109, 0x3F847AE140000000, !dbg !49
  %114 = select i1 %110, float %108, float %112, !dbg !50
  %115 = select i1 %111, float %109, float %113, !dbg !50
  %116 = sext i32 %17 to i64, !dbg !51
  %117 = getelementptr float, ptr addrspace(1) %9, i64 %116, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %117, i1 true) #3, !dbg !52
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !53
  %119 = bitcast float %114 to i32, !dbg !54
  %120 = bitcast float %115 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %118, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnewqgjmp7t7egsutsy52xvlxakqe4ypiw7xrlxi5xatu6mxgqyf.py", directory: "inductor_cache/ne")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_leaky_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 56, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 56, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 56, scope: !7)
!38 = !DILocation(line: 56, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 27, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 34, scope: !7)
!42 = !DILocation(line: 53, column: 33, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 64, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 20, scope: !7)
!50 = !DILocation(line: 69, column: 35, scope: !7)
!51 = !DILocation(line: 70, column: 25, scope: !7)
!52 = !DILocation(line: 70, column: 37, scope: !7)
!53 = !DILocation(line: 71, column: 28, scope: !7)
!54 = !DILocation(line: 71, column: 40, scope: !7)
!55 = !DILocation(line: 71, column: 4, scope: !7)
