#loc = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":19:0)
#loc1 = loc(unknown)
#loc23 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":41:24)
#loc32 = loc(callsite(#loc1 at #loc23))
module {
  tt.func public @triton_per_fused_leaky_relu_mean_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<32x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-01> : tensor<32x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x64xf32> loc(#loc1)
    %cst_2 = arith.constant dense<16384> : tensor<32x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<32x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<1024> : tensor<32x1xi32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<32x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<32x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<32x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_4 : tensor<32x1xi32> loc(#loc10)
    %10 = arith.divsi %5, %cst_4 : tensor<32x1xi32> loc(#loc11)
    %11 = arith.muli %8, %cst_3 : tensor<1x64xi32> loc(#loc12)
    %12 = tt.broadcast %9 : tensor<32x1xi32> -> tensor<32x64xi32> loc(#loc13)
    %13 = tt.broadcast %11 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc13)
    %14 = arith.addi %12, %13 : tensor<32x64xi32> loc(#loc13)
    %15 = arith.muli %10, %cst_2 : tensor<32x1xi32> loc(#loc14)
    %16 = tt.broadcast %15 : tensor<32x1xi32> -> tensor<32x64xi32> loc(#loc15)
    %17 = arith.addi %14, %16 : tensor<32x64xi32> loc(#loc15)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x64x!tt.ptr<f32>> loc(#loc16)
    %19 = tt.addptr %18, %17 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc16)
    %20 = tt.broadcast %6 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc17)
    %21 = tt.load %19, %20, %cst_1 : tensor<32x64x!tt.ptr<f32>> loc(#loc17)
    %22 = arith.cmpf ogt, %21, %cst_1 : tensor<32x64xf32> loc(#loc18)
    %23 = arith.mulf %21, %cst_0 : tensor<32x64xf32> loc(#loc19)
    %24 = arith.select %22, %21, %23 : tensor<32x64xi1>, tensor<32x64xf32> loc(#loc20)
    %25 = arith.select %20, %24, %cst_1 : tensor<32x64xi1>, tensor<32x64xf32> loc(#loc21)
    %26 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc23)), %arg5: f32 loc(callsite(#loc1 at #loc23))):
      %31 = arith.addf %arg4, %arg5 : f32 loc(#loc34)
      tt.reduce.return %31 : f32 loc(#loc31)
    }) : (tensor<32x64xf32>) -> tensor<32xf32> loc(#loc31)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<32xf32> -> tensor<32x1xf32> loc(#loc25)
    %28 = arith.divf %27, %cst : tensor<32x1xf32> loc(#loc26)
    gpu.barrier loc(#loc27)
    %29 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc28)
    %30 = tt.addptr %29, %5 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc28)
    tt.store %30, %28, %6 : tensor<32x1x!tt.ptr<f32>> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":23:28)
#loc3 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":23:33)
#loc4 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":24:36)
#loc5 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":24:44)
#loc6 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":24:23)
#loc7 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":25:21)
#loc8 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":26:26)
#loc9 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":26:34)
#loc10 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":30:19)
#loc11 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":31:19)
#loc12 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:39)
#loc13 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:35)
#loc14 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:50)
#loc15 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:44)
#loc16 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:30)
#loc17 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":33:55)
#loc18 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":35:18)
#loc19 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":37:18)
#loc20 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":38:32)
#loc21 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":40:33)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc25 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":41:27)
#loc26 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":43:19)
#loc27 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":44:4)
#loc28 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":45:28)
#loc29 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":45:40)
#loc30 = loc("inductor_cache/lj/clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py":45:4)
#loc31 = loc(callsite(#loc22 at #loc23))
#loc33 = loc(callsite(#loc24 at #loc22))
#loc34 = loc(callsite(#loc33 at #loc23))
