; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_mean_27(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1024, !dbg !14
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 256, !dbg !16
  %18 = mul i32 %17, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %7, 5, !dbg !18
  %20 = and i32 %19, 7936, !dbg !18
  %21 = shl i32 %17, 14, !dbg !19
  %22 = add i32 %21, %.decomposed, !dbg !20
  %23 = add i32 %22, %20, !dbg !21
  %24 = add i32 %22, 8192, !dbg !20
  %25 = add nuw i32 %24, %20, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %41 = insertelement <2 x i32> %40, i32 %36, i64 1, !dbg !23
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !23
  %43 = fcmp ogt <2 x float> %42, zeroinitializer, !dbg !24
  %44 = fmul <2 x float> %42, splat (float 0x3FB99999A0000000), !dbg !25
  %45 = select <2 x i1> %43, <2 x float> %42, <2 x float> %44, !dbg !26
  %46 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %37, i64 1, !dbg !23
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !23
  %49 = fcmp ogt <2 x float> %48, zeroinitializer, !dbg !24
  %50 = fmul <2 x float> %48, splat (float 0x3FB99999A0000000), !dbg !25
  %51 = select <2 x i1> %49, <2 x float> %48, <2 x float> %50, !dbg !26
  %52 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !23
  %53 = insertelement <2 x i32> %52, i32 %38, i64 1, !dbg !23
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !23
  %55 = fcmp ogt <2 x float> %54, zeroinitializer, !dbg !24
  %56 = fmul <2 x float> %54, splat (float 0x3FB99999A0000000), !dbg !25
  %57 = select <2 x i1> %55, <2 x float> %54, <2 x float> %56, !dbg !26
  %58 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %59 = insertelement <2 x i32> %58, i32 %39, i64 1, !dbg !23
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !23
  %61 = fcmp ogt <2 x float> %60, zeroinitializer, !dbg !24
  %62 = fmul <2 x float> %60, splat (float 0x3FB99999A0000000), !dbg !25
  %63 = select <2 x i1> %61, <2 x float> %60, <2 x float> %62, !dbg !26
  %shift = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %64 = fadd <2 x float> %45, %shift, !dbg !27
  %65 = extractelement <2 x float> %64, i64 0, !dbg !27
  %66 = select i1 %14, float %65, float 0.000000e+00, !dbg !27
  %shift1 = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %67 = fadd <2 x float> %51, %shift1, !dbg !27
  %68 = extractelement <2 x float> %67, i64 0, !dbg !27
  %69 = select i1 %14, float %68, float 0.000000e+00, !dbg !27
  %shift2 = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %70 = fadd <2 x float> %57, %shift2, !dbg !27
  %71 = extractelement <2 x float> %70, i64 0, !dbg !27
  %72 = select i1 %14, float %71, float 0.000000e+00, !dbg !27
  %shift3 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %73 = fadd <2 x float> %63, %shift3, !dbg !27
  %74 = extractelement <2 x float> %73, i64 0, !dbg !27
  %75 = select i1 %14, float %74, float 0.000000e+00, !dbg !27
  %76 = bitcast float %66 to i32, !dbg !32
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !32
  %78 = bitcast i32 %77 to float, !dbg !32
  %79 = fadd float %66, %78, !dbg !27
  %80 = bitcast float %79 to i32, !dbg !32
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !32
  %82 = bitcast i32 %81 to float, !dbg !32
  %83 = fadd float %79, %82, !dbg !27
  %84 = bitcast float %69 to i32, !dbg !32
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = fadd float %69, %86, !dbg !27
  %88 = bitcast float %87 to i32, !dbg !32
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !32
  %90 = bitcast i32 %89 to float, !dbg !32
  %91 = fadd float %87, %90, !dbg !27
  %92 = bitcast float %72 to i32, !dbg !32
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !32
  %94 = bitcast i32 %93 to float, !dbg !32
  %95 = fadd float %72, %94, !dbg !27
  %96 = bitcast float %95 to i32, !dbg !32
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = fadd float %95, %98, !dbg !27
  %100 = bitcast float %75 to i32, !dbg !32
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = fadd float %75, %102, !dbg !27
  %104 = bitcast float %103 to i32, !dbg !32
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = fadd float %103, %106, !dbg !27
  %108 = icmp eq i32 %8, 0, !dbg !32
  %109 = and i32 %16, 7, !dbg !32
  %110 = shl nuw nsw i32 %10, 3, !dbg !32
  %111 = or disjoint i32 %110, %109, !dbg !32
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %113 = bitcast float %83 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %108) #3, !dbg !32
  %114 = or disjoint i32 %110, 8, !dbg !32
  %115 = or disjoint i32 %114, %109, !dbg !32
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %117 = bitcast float %91 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 %108) #3, !dbg !32
  %118 = or disjoint i32 %110, 16, !dbg !32
  %119 = or disjoint i32 %118, %109, !dbg !32
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !32
  %121 = bitcast float %99 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %108) #3, !dbg !32
  %122 = or disjoint i32 %110, 24, !dbg !32
  %123 = or disjoint i32 %122, %109, !dbg !32
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !32
  %125 = bitcast float %107 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %108) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %126 = icmp slt i32 %7, 256, !dbg !32
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !32
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !32
  %129 = bitcast i32 %128 to float, !dbg !32
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = fadd float %129, %131, !dbg !27
  %133 = bitcast float %132 to i32, !dbg !32
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !32
  %135 = bitcast i32 %134 to float, !dbg !32
  %136 = fadd float %132, %135, !dbg !27
  %137 = bitcast float %136 to i32, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fadd float %136, %139, !dbg !27
  %141 = and i32 %7, 7, !dbg !32
  %142 = icmp eq i32 %141, 0, !dbg !32
  %143 = and i1 %126, %142, !dbg !32
  %144 = bitcast float %140 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %144, i1 %143) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !32
  %146 = load i32, ptr addrspace(3) %145, align 16, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !32
  %148 = load i32, ptr addrspace(3) %147, align 16, !dbg !32
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !32
  %150 = load i32, ptr addrspace(3) %149, align 16, !dbg !32
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !32
  %152 = load i32, ptr addrspace(3) %151, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %153, i32 %146, i32 %148, i32 %150, i32 %152, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !33
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 6.400000e+01) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %157 = sext i32 %13 to i64, !dbg !35
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !35
  %159 = icmp eq i32 %109, 0, !dbg !36
  %160 = bitcast float %156 to i32, !dbg !36
  %161 = and i1 %159, %15, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %158, i1 %161) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clj5yvwf5tlmizpunawmt4wqpu4cyf5uglj2kx3kl56hwpfb4pyd.py", directory: "inductor_cache/lj")
!4 = !{ptr @triton_per_fused_leaky_relu_mean_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_mean_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_mean_27", linkageName: "triton_per_fused_leaky_relu_mean_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 50, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 32, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 41, column: 24, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 4, scope: !7)
!35 = !DILocation(line: 45, column: 28, scope: !7)
!36 = !DILocation(line: 45, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 4, scope: !7)
