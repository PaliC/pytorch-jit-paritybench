; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 4064256, !dbg !14
  %19 = icmp slt i32 %14, 4064256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %20 = sdiv i32 %.frozen, 126, !dbg !15
  %21 = mul i32 %20, 126, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %11, 126, !dbg !16
  %.frozen4 = freeze i32 %12, !dbg !15
  %23 = sdiv i32 %.frozen4, 126, !dbg !15
  %24 = mul i32 %23, 126, !dbg !16
  %.decomposed5 = sub i32 %.frozen4, %24, !dbg !16
  %25 = srem i32 %13, 126, !dbg !16
  %.frozen6 = freeze i32 %14, !dbg !15
  %26 = sdiv i32 %.frozen6, 126, !dbg !15
  %27 = mul i32 %26, 126, !dbg !16
  %.decomposed7 = sub i32 %.frozen6, %27, !dbg !16
  %28 = srem i32 %15, 126, !dbg !16
  %.frozen8 = freeze i32 %16, !dbg !15
  %29 = sdiv i32 %.frozen8, 126, !dbg !15
  %30 = mul i32 %29, 126, !dbg !16
  %.decomposed9 = sub i32 %.frozen8, %30, !dbg !16
  %31 = srem i32 %17, 126, !dbg !16
  %.frozen10 = freeze i32 %10, !dbg !17
  %32 = sdiv i32 %.frozen10, 15876, !dbg !17
  %.frozen12 = freeze i32 %14, !dbg !17
  %33 = sdiv i32 %.frozen12, 15876, !dbg !17
  %34 = mul i32 %32, 15876, !dbg !18
  %.decomposed11 = sub i32 %.frozen10, %34, !dbg !18
  %35 = mul i32 %33, 15876, !dbg !18
  %.decomposed13 = sub i32 %.frozen12, %35, !dbg !18
  %36 = shl nsw i32 %.decomposed, 1, !dbg !19
  %37 = shl nsw i32 %22, 1, !dbg !19
  %38 = shl nsw i32 %.decomposed5, 1, !dbg !19
  %39 = shl nsw i32 %25, 1, !dbg !19
  %40 = shl nsw i32 %.decomposed7, 1, !dbg !19
  %41 = shl nsw i32 %28, 1, !dbg !19
  %42 = shl nsw i32 %.decomposed9, 1, !dbg !19
  %43 = shl nsw i32 %31, 1, !dbg !19
  %44 = mul i32 %20, 504, !dbg !20
  %45 = mul i32 %23, 504, !dbg !20
  %46 = mul i32 %26, 504, !dbg !20
  %47 = mul i32 %29, 504, !dbg !20
  %48 = add i32 %36, %44, !dbg !21
  %49 = add i32 %44, %37, !dbg !21
  %50 = add i32 %38, %45, !dbg !21
  %51 = add i32 %39, %45, !dbg !21
  %52 = add i32 %40, %46, !dbg !21
  %53 = add i32 %41, %46, !dbg !21
  %54 = add i32 %42, %47, !dbg !21
  %55 = add i32 %43, %47, !dbg !21
  %56 = sext i32 %48 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %49 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %50 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %51 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %52 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = sext i32 %53 to i64, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !22
  %68 = sext i32 %54 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !22
  %70 = sext i32 %55 to i64, !dbg !22
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #1, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #1, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %18) #1, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #1, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #1, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %19) #1, !dbg !23
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %19) #1, !dbg !23
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %19) #1, !dbg !23
  %80 = or disjoint i32 %48, 1, !dbg !24
  %81 = or disjoint i32 %49, 1, !dbg !24
  %82 = or disjoint i32 %50, 1, !dbg !24
  %83 = or disjoint i32 %51, 1, !dbg !24
  %84 = or disjoint i32 %52, 1, !dbg !24
  %85 = or disjoint i32 %53, 1, !dbg !24
  %86 = or disjoint i32 %54, 1, !dbg !24
  %87 = or disjoint i32 %55, 1, !dbg !24
  %88 = sext i32 %80 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !25
  %90 = sext i32 %81 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !25
  %92 = sext i32 %82 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !25
  %94 = sext i32 %83 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !25
  %96 = sext i32 %84 to i64, !dbg !25
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !25
  %98 = sext i32 %85 to i64, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !25
  %100 = sext i32 %86 to i64, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !25
  %102 = sext i32 %87 to i64, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !25
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %18) #1, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %18) #1, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #1, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %19) #1, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %19) #1, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %19) #1, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %19) #1, !dbg !26
  %112 = add i32 %48, 252, !dbg !27
  %113 = add i32 %49, 252, !dbg !27
  %114 = add i32 %50, 252, !dbg !27
  %115 = add i32 %51, 252, !dbg !27
  %116 = add i32 %52, 252, !dbg !27
  %117 = add i32 %53, 252, !dbg !27
  %118 = add i32 %54, 252, !dbg !27
  %119 = add i32 %55, 252, !dbg !27
  %120 = sext i32 %112 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !28
  %122 = sext i32 %113 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !28
  %124 = sext i32 %114 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = sext i32 %115 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !28
  %128 = sext i32 %116 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !28
  %130 = sext i32 %117 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %118 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = sext i32 %119 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !28
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %18) #1, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %18) #1, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %18) #1, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %18) #1, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %19) #1, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %19) #1, !dbg !29
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %19) #1, !dbg !29
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %19) #1, !dbg !29
  %144 = add i32 %48, 253, !dbg !30
  %145 = add i32 %49, 253, !dbg !30
  %146 = add i32 %50, 253, !dbg !30
  %147 = add i32 %51, 253, !dbg !30
  %148 = add i32 %52, 253, !dbg !30
  %149 = add i32 %53, 253, !dbg !30
  %150 = add i32 %54, 253, !dbg !30
  %151 = add i32 %55, 253, !dbg !30
  %152 = sext i32 %144 to i64, !dbg !31
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !31
  %154 = sext i32 %145 to i64, !dbg !31
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !31
  %156 = sext i32 %146 to i64, !dbg !31
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !31
  %158 = sext i32 %147 to i64, !dbg !31
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !31
  %160 = sext i32 %148 to i64, !dbg !31
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !31
  %162 = sext i32 %149 to i64, !dbg !31
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !31
  %164 = sext i32 %150 to i64, !dbg !31
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !31
  %166 = sext i32 %151 to i64, !dbg !31
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !31
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %18) #1, !dbg !32
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %18) #1, !dbg !32
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %18) #1, !dbg !32
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %18) #1, !dbg !32
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %19) #1, !dbg !32
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %19) #1, !dbg !32
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #1, !dbg !32
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %19) #1, !dbg !32
  %176 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !23
  %177 = insertelement <4 x i32> %176, i32 %73, i64 1, !dbg !23
  %178 = insertelement <4 x i32> %177, i32 %74, i64 2, !dbg !23
  %179 = insertelement <4 x i32> %178, i32 %75, i64 3, !dbg !23
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !23
  %181 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !26
  %182 = insertelement <4 x i32> %181, i32 %105, i64 1, !dbg !26
  %183 = insertelement <4 x i32> %182, i32 %106, i64 2, !dbg !26
  %184 = insertelement <4 x i32> %183, i32 %107, i64 3, !dbg !26
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !26
  %186 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %137, i64 1, !dbg !29
  %188 = insertelement <4 x i32> %187, i32 %138, i64 2, !dbg !29
  %189 = insertelement <4 x i32> %188, i32 %139, i64 3, !dbg !29
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !29
  %191 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !32
  %192 = insertelement <4 x i32> %191, i32 %169, i64 1, !dbg !32
  %193 = insertelement <4 x i32> %192, i32 %170, i64 2, !dbg !32
  %194 = insertelement <4 x i32> %193, i32 %171, i64 3, !dbg !32
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !32
  %196 = fcmp ogt <4 x float> %185, %180, !dbg !33
  %197 = fcmp uno <4 x float> %185, zeroinitializer, !dbg !37
  %198 = or <4 x i1> %196, %197, !dbg !38
  %.v = select <4 x i1> %198, <4 x i32> %184, <4 x i32> %179, !dbg !39
  %199 = bitcast <4 x i32> %.v to <4 x float>, !dbg !39
  %200 = fcmp olt <4 x float> %199, %190, !dbg !40
  %201 = fcmp uno <4 x float> %190, zeroinitializer, !dbg !42
  %202 = or <4 x i1> %200, %201, !dbg !43
  %.v1 = select <4 x i1> %202, <4 x i32> %189, <4 x i32> %.v, !dbg !44
  %203 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !44
  %204 = fcmp olt <4 x float> %203, %195, !dbg !45
  %205 = extractelement <4 x i1> %204, i64 0, !dbg !47
  %206 = extractelement <4 x i1> %204, i64 1, !dbg !47
  %207 = extractelement <4 x i1> %204, i64 2, !dbg !47
  %208 = extractelement <4 x i1> %204, i64 3, !dbg !47
  %209 = zext <4 x i1> %196 to <4 x i8>, !dbg !48
  %210 = select <4 x i1> %200, <4 x i8> splat (i8 2), <4 x i8> %209, !dbg !49
  %211 = select <4 x i1> %204, <4 x i8> splat (i8 3), <4 x i8> %210, !dbg !50
  %212 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !23
  %213 = insertelement <4 x i32> %212, i32 %77, i64 1, !dbg !23
  %214 = insertelement <4 x i32> %213, i32 %78, i64 2, !dbg !23
  %215 = insertelement <4 x i32> %214, i32 %79, i64 3, !dbg !23
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !23
  %217 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !26
  %218 = insertelement <4 x i32> %217, i32 %109, i64 1, !dbg !26
  %219 = insertelement <4 x i32> %218, i32 %110, i64 2, !dbg !26
  %220 = insertelement <4 x i32> %219, i32 %111, i64 3, !dbg !26
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !26
  %222 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !29
  %223 = insertelement <4 x i32> %222, i32 %141, i64 1, !dbg !29
  %224 = insertelement <4 x i32> %223, i32 %142, i64 2, !dbg !29
  %225 = insertelement <4 x i32> %224, i32 %143, i64 3, !dbg !29
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !29
  %227 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !32
  %228 = insertelement <4 x i32> %227, i32 %173, i64 1, !dbg !32
  %229 = insertelement <4 x i32> %228, i32 %174, i64 2, !dbg !32
  %230 = insertelement <4 x i32> %229, i32 %175, i64 3, !dbg !32
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !32
  %232 = fcmp ogt <4 x float> %221, %216, !dbg !33
  %233 = fcmp uno <4 x float> %221, zeroinitializer, !dbg !37
  %234 = or <4 x i1> %232, %233, !dbg !38
  %.v2 = select <4 x i1> %234, <4 x i32> %220, <4 x i32> %215, !dbg !39
  %235 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !39
  %236 = fcmp olt <4 x float> %235, %226, !dbg !40
  %237 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !42
  %238 = or <4 x i1> %236, %237, !dbg !43
  %.v3 = select <4 x i1> %238, <4 x i32> %225, <4 x i32> %.v2, !dbg !44
  %239 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !44
  %240 = fcmp olt <4 x float> %239, %231, !dbg !45
  %241 = shufflevector <4 x float> %231, <4 x float> %195, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !51
  %242 = fcmp uno <8 x float> %241, zeroinitializer, !dbg !51
  %243 = extractelement <8 x i1> %242, i64 7, !dbg !47
  %244 = or i1 %205, %243, !dbg !47
  %245 = extractelement <8 x i1> %242, i64 6, !dbg !47
  %246 = or i1 %206, %245, !dbg !47
  %247 = extractelement <8 x i1> %242, i64 5, !dbg !47
  %248 = or i1 %207, %247, !dbg !47
  %249 = extractelement <8 x i1> %242, i64 4, !dbg !47
  %250 = or i1 %208, %249, !dbg !47
  %251 = extractelement <4 x i1> %240, i64 0, !dbg !47
  %252 = extractelement <8 x i1> %242, i64 3, !dbg !47
  %253 = or i1 %251, %252, !dbg !47
  %254 = extractelement <4 x i1> %240, i64 1, !dbg !47
  %255 = extractelement <8 x i1> %242, i64 2, !dbg !47
  %256 = or i1 %254, %255, !dbg !47
  %257 = extractelement <4 x i1> %240, i64 2, !dbg !47
  %258 = extractelement <8 x i1> %242, i64 1, !dbg !47
  %259 = or i1 %257, %258, !dbg !47
  %260 = extractelement <4 x i1> %240, i64 3, !dbg !47
  %261 = extractelement <8 x i1> %242, i64 0, !dbg !47
  %262 = or i1 %260, %261, !dbg !47
  %263 = zext <4 x i1> %232 to <4 x i8>, !dbg !48
  %264 = select <4 x i1> %236, <4 x i8> splat (i8 2), <4 x i8> %263, !dbg !49
  %265 = select <4 x i1> %240, <4 x i8> splat (i8 3), <4 x i8> %264, !dbg !50
  %266 = mul i32 %32, 15904, !dbg !52
  %267 = mul i32 %33, 15904, !dbg !52
  %268 = add i32 %266, %.decomposed11, !dbg !53
  %269 = add i32 %267, %.decomposed13, !dbg !53
  %270 = sext i32 %268 to i64, !dbg !54
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !54
  %272 = sext i32 %269 to i64, !dbg !54
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !54
  %274 = extractelement <4 x i32> %.v1, i64 0, !dbg !55
  %275 = select i1 %244, i32 %168, i32 %274, !dbg !56
  %276 = extractelement <4 x i32> %.v1, i64 1, !dbg !55
  %277 = select i1 %246, i32 %169, i32 %276, !dbg !56
  %278 = extractelement <4 x i32> %.v1, i64 2, !dbg !55
  %279 = select i1 %248, i32 %170, i32 %278, !dbg !56
  %280 = extractelement <4 x i32> %.v1, i64 3, !dbg !55
  %281 = select i1 %250, i32 %171, i32 %280, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %275, i32 %277, i32 %279, i32 %281, ptr addrspace(1) %271, i1 %18) #1, !dbg !55
  %282 = extractelement <4 x i32> %.v3, i64 0, !dbg !55
  %283 = select i1 %253, i32 %172, i32 %282, !dbg !56
  %284 = extractelement <4 x i32> %.v3, i64 1, !dbg !55
  %285 = select i1 %256, i32 %173, i32 %284, !dbg !56
  %286 = extractelement <4 x i32> %.v3, i64 2, !dbg !55
  %287 = select i1 %259, i32 %174, i32 %286, !dbg !56
  %288 = extractelement <4 x i32> %.v3, i64 3, !dbg !55
  %289 = select i1 %262, i32 %175, i32 %288, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %285, i32 %287, i32 %289, ptr addrspace(1) %273, i1 %19) #1, !dbg !55
  %290 = mul i32 %32, 16000, !dbg !57
  %291 = mul i32 %33, 16000, !dbg !57
  %292 = add i32 %290, %.decomposed11, !dbg !58
  %293 = add i32 %291, %.decomposed13, !dbg !58
  %294 = sext i32 %292 to i64, !dbg !59
  %295 = getelementptr i8, ptr addrspace(1) %2, i64 %294, !dbg !59
  %296 = sext i32 %293 to i64, !dbg !59
  %297 = getelementptr i8, ptr addrspace(1) %2, i64 %296, !dbg !59
  %298 = bitcast <4 x i8> %211 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %295, i1 %18) #1, !dbg !60
  %299 = bitcast <4 x i8> %265 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %297, i1 %19) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7z74gq4vhxj6x4m64zom6b7ur3bhmrjlvd6mbaj3odbyiyi6mhm.py", directory: "inductor_cache/7z")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_2", linkageName: "triton_poi_fused_max_pool2d_with_indices_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 46, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 50, scope: !7)
!27 = !DILocation(line: 30, column: 43, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 31, column: 43, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 52, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 32, column: 40, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 38, column: 33, scope: !7)
!49 = !DILocation(line: 41, column: 35, scope: !7)
!50 = !DILocation(line: 44, column: 35, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!52 = !DILocation(line: 45, column: 36, scope: !7)
!53 = !DILocation(line: 45, column: 30, scope: !7)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 47, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!57 = !DILocation(line: 46, column: 36, scope: !7)
!58 = !DILocation(line: 46, column: 30, scope: !7)
!59 = !DILocation(line: 46, column: 25, scope: !7)
!60 = !DILocation(line: 46, column: 48, scope: !7)
!61 = !DILocation(line: 46, column: 4, scope: !7)
