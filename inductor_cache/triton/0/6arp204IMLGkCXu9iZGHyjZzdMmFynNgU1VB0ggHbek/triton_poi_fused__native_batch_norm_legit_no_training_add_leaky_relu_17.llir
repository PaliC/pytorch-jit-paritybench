; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 1, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %11, %.lobit, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 8, !dbg !16
  %18 = shl i32 %12, 2, !dbg !17
  %19 = and i32 %18, 252, !dbg !17
  %20 = shl i32 %12, 1, !dbg !17
  %21 = and i32 %20, 254, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %17, %21, !dbg !18
  %24 = icmp slt i32 %22, 256, !dbg !19
  %25 = icmp slt i32 %23, 256, !dbg !19
  %26 = shl i32 %14, 8, !dbg !20
  %27 = add i32 %22, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = and i1 %15, %24, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #4, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !24
  %36 = and i32 %18, 508, !dbg !24
  %37 = lshr i32 %36, 8, !dbg !24
  %38 = or disjoint i32 %37, %36, !dbg !24
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %38, !dbg !24
  %40 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #4, !dbg !24
  %41 = or disjoint i32 %36, 1, !dbg !24
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %37, !dbg !24
  %43 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %41, !dbg !24
  %44 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #4, !dbg !24
  %45 = or disjoint i32 %38, 2, !dbg !24
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !24
  %47 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !24
  %48 = or disjoint i32 %36, 3, !dbg !24
  %49 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %48, !dbg !24
  %50 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !24
  %52 = or disjoint i32 %21, 257, !dbg !24
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !24
  %54 = load <2 x float>, ptr addrspace(3) %51, align 8, !dbg !24
  %55 = load <2 x float>, ptr addrspace(3) %53, align 4, !dbg !24
  %56 = sext i32 %23 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !25
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !27
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %25) #4, !dbg !28
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !28
  %63 = bitcast i32 %61 to float, !dbg !28
  %64 = bitcast i32 %62 to float, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !29
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %25) #4, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !31
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %25) #4, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %30) #4, !dbg !34
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !35
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %73, 0, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %74, 0, !dbg !36
  br i1 %.not.i, label %80, label %75, !dbg !36

75:                                               ; preds = %9
  br i1 %.not1.i, label %78, label %76, !dbg !36

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !36

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !36
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %85, 0, !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %86, 0, !dbg !36
  br i1 %.not.i8, label %92, label %87, !dbg !36

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %90, label %88, !dbg !36

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %95, label %93, !dbg !36

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %88, %90, %93, %95
  %.0.i10 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !36
  %97 = shufflevector <2 x float> %55, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !24
  %98 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !24
  %99 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 1032, !dbg !24
  %100 = or disjoint i32 %21, 1, !dbg !24
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !24
  %102 = extractvalue { i32, i32 } %58, 1, !dbg !26
  %103 = extractvalue { i32, i32 } %58, 0, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %107 = bitcast i32 %106 to float, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %111 = bitcast i32 %110 to float, !dbg !34
  %112 = extractvalue { i32, i32 } %68, 1, !dbg !32
  %113 = extractvalue { i32, i32 } %68, 0, !dbg !32
  %114 = extractvalue { i32, i32 } %66, 1, !dbg !30
  %115 = extractvalue { i32, i32 } %66, 0, !dbg !30
  %116 = and i32 %12, 127, !dbg !17
  %117 = or disjoint i32 %116, %17, !dbg !18
  %118 = or disjoint i32 %117, 128, !dbg !18
  %119 = icmp slt i32 %118, 256, !dbg !19
  %120 = icmp slt i32 %11, 256, !dbg !14
  %121 = and i1 %120, %119, !dbg !23
  %122 = icmp slt i32 %117, 256, !dbg !19
  %123 = and i1 %120, %122, !dbg !23
  %.frozen = freeze i32 %11, !dbg !37
  %124 = sdiv i32 %.frozen, 64, !dbg !37
  %125 = mul i32 %124, 64, !dbg !38
  %.decomposed = sub i32 %.frozen, %125, !dbg !38
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %128 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !26
  %129 = insertelement <2 x i32> %128, i32 %103, i64 1, !dbg !26
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !26
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !26
  %132 = shufflevector <2 x float> %97, <2 x float> %98, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %133 = fsub <4 x float> %132, %131, !dbg !40
  %134 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !32
  %135 = insertelement <2 x i32> %134, i32 %113, i64 1, !dbg !32
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !32
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %138 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !30
  %139 = insertelement <2 x i32> %138, i32 %115, i64 1, !dbg !30
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !30
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %142 = insertelement <4 x float> poison, float %127, i64 0, !dbg !41
  %143 = insertelement <4 x float> %142, float %126, i64 1, !dbg !41
  %144 = shufflevector <4 x float> %143, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %145 = fmul <4 x float> %133, %144, !dbg !41
  %146 = fmul <4 x float> %145, %141, !dbg !42
  %147 = fadd <4 x float> %146, %137, !dbg !43
  %148 = fcmp ogt <4 x float> %147, zeroinitializer, !dbg !44
  %149 = extractelement <4 x float> %147, i64 3, !dbg !45
  %150 = fmul float %149, 0x3FB99999A0000000, !dbg !46
  %151 = extractelement <4 x float> %147, i64 2, !dbg !45
  %152 = fmul float %151, 0x3FB99999A0000000, !dbg !46
  %153 = extractelement <4 x float> %147, i64 1, !dbg !45
  %154 = fmul float %153, 0x3FB99999A0000000, !dbg !46
  %155 = extractelement <4 x float> %147, i64 0, !dbg !45
  %156 = fmul float %155, 0x3FB99999A0000000, !dbg !46
  %157 = extractelement <4 x i1> %148, i64 3, !dbg !45
  %158 = select i1 %157, float %149, float %150, !dbg !45
  %159 = extractelement <4 x i1> %148, i64 2, !dbg !45
  %160 = select i1 %159, float %151, float %152, !dbg !45
  %161 = extractelement <4 x i1> %148, i64 1, !dbg !45
  %162 = select i1 %161, float %153, float %154, !dbg !45
  %163 = extractelement <4 x i1> %148, i64 0, !dbg !45
  %164 = select i1 %163, float %155, float %156, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %165 = bitcast float %158 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %165, i1 true) #4, !dbg !45
  %166 = bitcast float %160 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %166, i1 true) #4, !dbg !45
  %167 = bitcast float %162 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %167, i1 true) #4, !dbg !45
  %168 = bitcast float %164 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %168, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %169 = load float, ptr addrspace(3) %39, align 4, !dbg !45
  %170 = load float, ptr addrspace(3) %43, align 4, !dbg !45
  %171 = load float, ptr addrspace(3) %46, align 4, !dbg !45
  %172 = load float, ptr addrspace(3) %49, align 4, !dbg !45
  %173 = fadd float %169, %111, !dbg !47
  %174 = fadd float %170, %109, !dbg !47
  %175 = fadd float %171, %107, !dbg !47
  %176 = fadd float %172, %105, !dbg !47
  %177 = shl i32 %117, 6, !dbg !48
  %178 = shl i32 %118, 6, !dbg !48
  %179 = shl i32 %124, 14, !dbg !49
  %180 = add i32 %179, %.decomposed, !dbg !50
  %181 = add i32 %180, %177, !dbg !51
  %182 = add i32 %180, %178, !dbg !51
  %183 = sext i32 %181 to i64, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %6, i64 %183, !dbg !52
  %185 = sext i32 %182 to i64, !dbg !52
  %186 = getelementptr float, ptr addrspace(1) %6, i64 %185, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %187 = shl i32 %12, 3, !dbg !53
  %188 = and i32 %187, 504, !dbg !53
  %189 = or disjoint i32 %188, %.lobit, !dbg !53
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !53
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %189, !dbg !53
  %192 = bitcast float %173 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !53
  %193 = or disjoint i32 %189, 2, !dbg !53
  %194 = or disjoint i32 %188, 2, !dbg !53
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !53
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !53
  %197 = bitcast float %174 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !53
  %198 = or disjoint i32 %189, 4, !dbg !53
  %199 = or disjoint i32 %188, 4, !dbg !53
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !53
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %198, !dbg !53
  %202 = bitcast float %175 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #4, !dbg !53
  %203 = or disjoint i32 %189, 6, !dbg !53
  %204 = or disjoint i32 %188, 6, !dbg !53
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !53
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %203, !dbg !53
  %207 = bitcast float %176 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx = shl nuw nsw i32 %21, 3, !dbg !53
  %208 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !53
  %209 = shl nuw nsw i32 %21, 1, !dbg !53
  %210 = or disjoint i32 %209, 512, !dbg !53
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !53
  %212 = load <2 x i32>, ptr addrspace(3) %211, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %208, align 16, !dbg !53
  %213 = getelementptr inbounds i8, ptr addrspace(3) %208, i32 4, !dbg !53
  %.extract5 = load i32, ptr addrspace(3) %213, align 4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %184, i1 %123) #4, !dbg !53
  %.extract6 = extractelement <2 x i32> %212, i64 0, !dbg !53
  %.extract7 = extractelement <2 x i32> %212, i64 1, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %186, i1 %121) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cox3upgia62ws6ysgk42leozv7edlyamh5m5iy3rw3vk3nicgmyp.py", directory: "inductor_cache/ox")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 45, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 33, scope: !7)
!49 = !DILocation(line: 55, column: 44, scope: !7)
!50 = !DILocation(line: 55, column: 30, scope: !7)
!51 = !DILocation(line: 55, column: 38, scope: !7)
!52 = !DILocation(line: 55, column: 25, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
