; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = srem i32 %17, 64, !dbg !14
  %20 = sext i32 %17 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = sext i32 %18 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = sext i32 %19 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %67 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %68 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %69 = fadd float %50, 0x3EE4F8B580000000, !dbg !31
  %70 = fadd float %51, 0x3EE4F8B580000000, !dbg !31
  %71 = fadd float %57, 0x3EE4F8B580000000, !dbg !31
  %72 = fadd float %58, 0x3EE4F8B580000000, !dbg !31
  %73 = fadd float %59, 0x3EE4F8B580000000, !dbg !31
  %74 = fadd float %60, 0x3EE4F8B580000000, !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %75, 0, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %76, 0, !dbg !32
  br i1 %.not.i, label %82, label %77, !dbg !32

77:                                               ; preds = %11
  br i1 %.not1.i, label %80, label %78, !dbg !32

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

82:                                               ; preds = %11
  br i1 %.not1.i, label %85, label %83, !dbg !32

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %87, 0, !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !32
  br i1 %.not.i1, label %94, label %89, !dbg !32

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !32

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !32

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !32
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %99, 0, !dbg !32
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !32
  br i1 %.not.i6, label %106, label %101, !dbg !32

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !32

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !32

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !32
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %111, 0, !dbg !32
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %112, 0, !dbg !32
  br i1 %.not.i11, label %118, label %113, !dbg !32

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !32

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !32

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %114, %116, %119, %121
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !32
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %123, 0, !dbg !32
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %124, 0, !dbg !32
  br i1 %.not.i16, label %130, label %125, !dbg !32

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !32

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

130:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %133, label %131, !dbg !32

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %126, %128, %131, %133
  %.0.i18 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %135, 0, !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %136, 0, !dbg !32
  br i1 %.not.i21, label %142, label %137, !dbg !32

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !32

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

142:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %145, label %143, !dbg !32

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %138, %140, %143, %145
  %.0.i23 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !32
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %147, 0, !dbg !32
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %148, 0, !dbg !32
  br i1 %.not.i26, label %154, label %149, !dbg !32

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !32

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

154:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %157, label %155, !dbg !32

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %150, %152, %155, %157
  %.0.i28 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !32
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %159, 0, !dbg !32
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %160, 0, !dbg !32
  br i1 %.not.i31, label %166, label %161, !dbg !32

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !32

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

166:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %169, label %167, !dbg !32

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %162, %164, %167, %169
  %.0.i33 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %172 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %173 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %174 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %175 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %176 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %181 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %182 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %187 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %190 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %191 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %192 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %193 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %194 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %195 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %197 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %198 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %199 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %200 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %201 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %202 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %203 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %204 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %207 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %209 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %210 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %213 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %217 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %221 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %222 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %223 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %224 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %225 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %226 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %235 = insertelement <8 x i32> poison, i32 %171, i64 0, !dbg !16
  %236 = insertelement <8 x i32> %235, i32 %176, i64 1, !dbg !16
  %237 = insertelement <8 x i32> %236, i32 %181, i64 2, !dbg !16
  %238 = insertelement <8 x i32> %237, i32 %186, i64 3, !dbg !16
  %239 = insertelement <8 x i32> %238, i32 %191, i64 4, !dbg !16
  %240 = insertelement <8 x i32> %239, i32 %196, i64 5, !dbg !16
  %241 = insertelement <8 x i32> %240, i32 %201, i64 6, !dbg !16
  %242 = insertelement <8 x i32> %241, i32 %206, i64 7, !dbg !16
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !16
  %244 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !18
  %245 = insertelement <8 x i32> %244, i32 %177, i64 1, !dbg !18
  %246 = insertelement <8 x i32> %245, i32 %182, i64 2, !dbg !18
  %247 = insertelement <8 x i32> %246, i32 %187, i64 3, !dbg !18
  %248 = insertelement <8 x i32> %247, i32 %192, i64 4, !dbg !18
  %249 = insertelement <8 x i32> %248, i32 %197, i64 5, !dbg !18
  %250 = insertelement <8 x i32> %249, i32 %202, i64 6, !dbg !18
  %251 = insertelement <8 x i32> %250, i32 %207, i64 7, !dbg !18
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !18
  %253 = fadd <8 x float> %243, %252, !dbg !34
  %254 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !20
  %255 = insertelement <8 x i32> %254, i32 %178, i64 1, !dbg !20
  %256 = insertelement <8 x i32> %255, i32 %183, i64 2, !dbg !20
  %257 = insertelement <8 x i32> %256, i32 %188, i64 3, !dbg !20
  %258 = insertelement <8 x i32> %257, i32 %193, i64 4, !dbg !20
  %259 = insertelement <8 x i32> %258, i32 %198, i64 5, !dbg !20
  %260 = insertelement <8 x i32> %259, i32 %203, i64 6, !dbg !20
  %261 = insertelement <8 x i32> %260, i32 %208, i64 7, !dbg !20
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !20
  %263 = fadd <8 x float> %253, %262, !dbg !35
  %264 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !22
  %265 = insertelement <8 x i32> %264, i32 %179, i64 1, !dbg !22
  %266 = insertelement <8 x i32> %265, i32 %184, i64 2, !dbg !22
  %267 = insertelement <8 x i32> %266, i32 %189, i64 3, !dbg !22
  %268 = insertelement <8 x i32> %267, i32 %194, i64 4, !dbg !22
  %269 = insertelement <8 x i32> %268, i32 %199, i64 5, !dbg !22
  %270 = insertelement <8 x i32> %269, i32 %204, i64 6, !dbg !22
  %271 = insertelement <8 x i32> %270, i32 %209, i64 7, !dbg !22
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !22
  %273 = fadd <8 x float> %263, %272, !dbg !36
  %274 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !24
  %275 = insertelement <8 x i32> %274, i32 %180, i64 1, !dbg !24
  %276 = insertelement <8 x i32> %275, i32 %185, i64 2, !dbg !24
  %277 = insertelement <8 x i32> %276, i32 %190, i64 3, !dbg !24
  %278 = insertelement <8 x i32> %277, i32 %195, i64 4, !dbg !24
  %279 = insertelement <8 x i32> %278, i32 %200, i64 5, !dbg !24
  %280 = insertelement <8 x i32> %279, i32 %205, i64 6, !dbg !24
  %281 = insertelement <8 x i32> %280, i32 %210, i64 7, !dbg !24
  %282 = bitcast <8 x i32> %281 to <8 x float>, !dbg !24
  %283 = fsub <8 x float> %273, %282, !dbg !37
  %284 = insertelement <8 x i32> poison, i32 %211, i64 0, !dbg !30
  %285 = insertelement <8 x i32> %284, i32 %212, i64 1, !dbg !30
  %286 = insertelement <8 x i32> %285, i32 %213, i64 2, !dbg !30
  %287 = insertelement <8 x i32> %286, i32 %214, i64 3, !dbg !30
  %288 = insertelement <8 x i32> %287, i32 %215, i64 4, !dbg !30
  %289 = insertelement <8 x i32> %288, i32 %216, i64 5, !dbg !30
  %290 = insertelement <8 x i32> %289, i32 %217, i64 6, !dbg !30
  %291 = insertelement <8 x i32> %290, i32 %218, i64 7, !dbg !30
  %292 = bitcast <8 x i32> %291 to <8 x float>, !dbg !30
  %293 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !28
  %294 = insertelement <8 x i32> %293, i32 %220, i64 1, !dbg !28
  %295 = insertelement <8 x i32> %294, i32 %221, i64 2, !dbg !28
  %296 = insertelement <8 x i32> %295, i32 %222, i64 3, !dbg !28
  %297 = insertelement <8 x i32> %296, i32 %223, i64 4, !dbg !28
  %298 = insertelement <8 x i32> %297, i32 %224, i64 5, !dbg !28
  %299 = insertelement <8 x i32> %298, i32 %225, i64 6, !dbg !28
  %300 = insertelement <8 x i32> %299, i32 %226, i64 7, !dbg !28
  %301 = bitcast <8 x i32> %300 to <8 x float>, !dbg !28
  %302 = insertelement <8 x float> poison, float %234, i64 0, !dbg !38
  %303 = insertelement <8 x float> %302, float %233, i64 1, !dbg !38
  %304 = insertelement <8 x float> %303, float %232, i64 2, !dbg !38
  %305 = insertelement <8 x float> %304, float %231, i64 3, !dbg !38
  %306 = insertelement <8 x float> %305, float %230, i64 4, !dbg !38
  %307 = insertelement <8 x float> %306, float %229, i64 5, !dbg !38
  %308 = insertelement <8 x float> %307, float %228, i64 6, !dbg !38
  %309 = insertelement <8 x float> %308, float %227, i64 7, !dbg !38
  %310 = fmul <8 x float> %283, %309, !dbg !38
  %311 = fmul <8 x float> %310, %301, !dbg !39
  %312 = fadd <8 x float> %311, %292, !dbg !40
  %313 = fcmp olt <8 x float> %312, zeroinitializer, !dbg !41
  %314 = extractelement <8 x i1> %313, i64 7, !dbg !45
  %315 = extractelement <8 x i1> %313, i64 6, !dbg !45
  %316 = extractelement <8 x i1> %313, i64 5, !dbg !45
  %317 = extractelement <8 x i1> %313, i64 4, !dbg !45
  %318 = extractelement <8 x i1> %313, i64 3, !dbg !45
  %319 = extractelement <8 x i1> %313, i64 2, !dbg !45
  %320 = extractelement <8 x i1> %313, i64 1, !dbg !45
  %321 = extractelement <8 x i1> %313, i64 0, !dbg !45
  %322 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !46
  %323 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !46
  %bc = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %324 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %325 = select i1 %314, i32 0, i32 %324, !dbg !45
  %bc36 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %326 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %327 = select i1 %315, i32 0, i32 %326, !dbg !45
  %bc37 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %328 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %329 = select i1 %316, i32 0, i32 %328, !dbg !45
  %bc38 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %330 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %331 = select i1 %317, i32 0, i32 %330, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %327, i32 %329, i32 %331, ptr addrspace(1) %322, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %332 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %333 = select i1 %318, i32 0, i32 %332, !dbg !45
  %bc40 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %334 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %335 = select i1 %319, i32 0, i32 %334, !dbg !45
  %bc41 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %336 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %337 = select i1 %320, i32 0, i32 %336, !dbg !45
  %bc42 = bitcast <8 x float> %312 to <8 x i32>, !dbg !47
  %338 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %339 = select i1 %321, i32 0, i32 %338, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %335, i32 %337, i32 %339, ptr addrspace(1) %323, i1 true) #3, !dbg !47
  %340 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !48
  %341 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !48
  %bc43 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %342 = extractelement <8 x i32> %bc43, i64 7, !dbg !49
  %bc44 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %343 = extractelement <8 x i32> %bc44, i64 6, !dbg !49
  %bc45 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %344 = extractelement <8 x i32> %bc45, i64 5, !dbg !49
  %bc46 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %345 = extractelement <8 x i32> %bc46, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %343, i32 %344, i32 %345, ptr addrspace(1) %340, i1 true) #3, !dbg !49
  %bc47 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %346 = extractelement <8 x i32> %bc47, i64 3, !dbg !49
  %bc48 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %347 = extractelement <8 x i32> %bc48, i64 2, !dbg !49
  %bc49 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %348 = extractelement <8 x i32> %bc49, i64 1, !dbg !49
  %bc50 = bitcast <8 x float> %283 to <8 x i32>, !dbg !49
  %349 = extractelement <8 x i32> %bc50, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %347, i32 %348, i32 %349, ptr addrspace(1) %341, i1 true) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgtn5ym225twmwli6d3cqs3faxedyc3gmwmcsqaodacswjuf6uux.py", directory: "inductor_cache/gt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 4, scope: !7)
