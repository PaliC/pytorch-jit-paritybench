; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = add i32 %9, -20, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -16, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -12, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !21
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %22 = sdiv <2 x i32> %21, <i32 16, i32 4>, !dbg !21
  %23 = srem <2 x i32> %22, splat (i32 4), !dbg !22
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !23
  %25 = icmp sgt i32 %24, 0, !dbg !24
  %26 = icmp sgt <2 x i32> %23, <i32 -1, i32 0>, !dbg !25
  %27 = extractelement <2 x i1> %26, i64 1, !dbg !26
  %28 = and i1 %25, %27, !dbg !26
  %29 = and i1 %10, %28, !dbg !27
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %13, i1 %29, i32 -8388608, i1 %29, i32 -8388608, i1 %29) #1, !dbg !28
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !28
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !28
  %33 = bitcast i32 %31 to float, !dbg !28
  %34 = bitcast i32 %32 to float, !dbg !28
  %35 = extractelement <2 x i32> %23, i64 1, !dbg !29
  %36 = icmp sgt i32 %35, -1, !dbg !30
  %37 = and i1 %25, %36, !dbg !31
  %38 = and i1 %10, %37, !dbg !32
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %38, i32 -8388608, i1 %38, i32 -8388608, i1 %38) #1, !dbg !33
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !33
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !33
  %42 = bitcast i32 %40 to float, !dbg !33
  %43 = bitcast i32 %41 to float, !dbg !33
  %44 = fcmp ogt float %42, %33, !dbg !34
  %45 = fcmp ogt float %43, %34, !dbg !34
  %46 = fcmp uno float %42, 0.000000e+00, !dbg !38
  %47 = fcmp uno float %43, 0.000000e+00, !dbg !38
  %48 = or i1 %44, %46, !dbg !39
  %49 = or i1 %45, %47, !dbg !39
  %50 = select i1 %48, float %42, float %33, !dbg !40
  %51 = select i1 %49, float %43, float %34, !dbg !40
  %52 = add nsw i32 %35, 1, !dbg !41
  %53 = icmp ult i32 %52, 4, !dbg !41
  %54 = and i1 %25, %53, !dbg !42
  %55 = and i1 %10, %54, !dbg !43
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %55, i32 -8388608, i1 %55, i32 -8388608, i1 %55) #1, !dbg !44
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !44
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !44
  %59 = bitcast i32 %57 to float, !dbg !44
  %60 = bitcast i32 %58 to float, !dbg !44
  %61 = fcmp olt float %50, %59, !dbg !45
  %62 = fcmp olt float %51, %60, !dbg !45
  %63 = fcmp uno float %59, 0.000000e+00, !dbg !47
  %64 = fcmp uno float %60, 0.000000e+00, !dbg !47
  %65 = or i1 %63, %61, !dbg !48
  %66 = or i1 %64, %62, !dbg !48
  %67 = select i1 %65, float %59, float %50, !dbg !49
  %68 = select i1 %66, float %60, float %51, !dbg !49
  %69 = extractelement <2 x i1> %26, i64 0, !dbg !50
  %70 = and i1 %69, %27, !dbg !50
  %71 = add i32 %9, -4, !dbg !51
  %72 = sext i32 %71 to i64, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !52
  %74 = and i1 %10, %70, !dbg !53
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #1, !dbg !54
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !54
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !54
  %78 = bitcast i32 %76 to float, !dbg !54
  %79 = bitcast i32 %77 to float, !dbg !54
  %80 = fcmp olt float %67, %78, !dbg !55
  %81 = fcmp olt float %68, %79, !dbg !55
  %82 = fcmp uno float %78, 0.000000e+00, !dbg !57
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !57
  %84 = or i1 %82, %80, !dbg !58
  %85 = or i1 %83, %81, !dbg !58
  %86 = select i1 %84, float %78, float %67, !dbg !59
  %87 = select i1 %85, float %79, float %68, !dbg !59
  %88 = or i32 %24, %35, !dbg !29
  %89 = icmp sgt i32 %88, -1, !dbg !29
  %90 = sext i32 %9 to i64, !dbg !60
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !60
  %92 = and i1 %10, %89, !dbg !61
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92) #1, !dbg !62
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !62
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !62
  %96 = bitcast i32 %94 to float, !dbg !62
  %97 = bitcast i32 %95 to float, !dbg !62
  %98 = fcmp olt float %86, %96, !dbg !63
  %99 = fcmp olt float %87, %97, !dbg !63
  %100 = fcmp uno float %96, 0.000000e+00, !dbg !65
  %101 = fcmp uno float %97, 0.000000e+00, !dbg !65
  %102 = or i1 %100, %98, !dbg !66
  %103 = or i1 %101, %99, !dbg !66
  %104 = select i1 %102, float %96, float %86, !dbg !67
  %105 = select i1 %103, float %97, float %87, !dbg !67
  %106 = and i1 %69, %53, !dbg !68
  %107 = add i32 %9, 4, !dbg !69
  %108 = sext i32 %107 to i64, !dbg !70
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !70
  %110 = and i1 %10, %106, !dbg !71
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #1, !dbg !72
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !72
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !72
  %114 = bitcast i32 %112 to float, !dbg !72
  %115 = bitcast i32 %113 to float, !dbg !72
  %116 = fcmp olt float %104, %114, !dbg !73
  %117 = fcmp olt float %105, %115, !dbg !73
  %118 = fcmp uno float %114, 0.000000e+00, !dbg !75
  %119 = fcmp uno float %115, 0.000000e+00, !dbg !75
  %120 = or i1 %118, %116, !dbg !76
  %121 = or i1 %119, %117, !dbg !76
  %122 = select i1 %120, float %114, float %104, !dbg !77
  %123 = select i1 %121, float %115, float %105, !dbg !77
  %124 = add nsw i32 %24, 1, !dbg !23
  %125 = icmp ult i32 %124, 4, !dbg !23
  %126 = and i1 %27, %125, !dbg !78
  %127 = add i32 %9, 12, !dbg !79
  %128 = sext i32 %127 to i64, !dbg !80
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !80
  %130 = and i1 %10, %126, !dbg !81
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %129, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #1, !dbg !82
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !82
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !82
  %134 = bitcast i32 %132 to float, !dbg !82
  %135 = bitcast i32 %133 to float, !dbg !82
  %136 = fcmp olt float %122, %134, !dbg !83
  %137 = fcmp olt float %123, %135, !dbg !83
  %138 = fcmp uno float %134, 0.000000e+00, !dbg !85
  %139 = fcmp uno float %135, 0.000000e+00, !dbg !85
  %140 = or i1 %138, %136, !dbg !86
  %141 = or i1 %139, %137, !dbg !86
  %142 = select i1 %140, float %134, float %122, !dbg !87
  %143 = select i1 %141, float %135, float %123, !dbg !87
  %144 = and i1 %36, %125, !dbg !88
  %145 = add i32 %9, 16, !dbg !89
  %146 = sext i32 %145 to i64, !dbg !90
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !90
  %148 = and i1 %10, %144, !dbg !91
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %147, i1 %148, i32 -8388608, i1 %148, i32 -8388608, i1 %148) #1, !dbg !92
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !92
  %151 = extractvalue { i32, i32 } %149, 1, !dbg !92
  %152 = bitcast i32 %150 to float, !dbg !92
  %153 = bitcast i32 %151 to float, !dbg !92
  %154 = fcmp olt float %142, %152, !dbg !93
  %155 = fcmp olt float %143, %153, !dbg !93
  %156 = fcmp uno float %152, 0.000000e+00, !dbg !95
  %157 = fcmp uno float %153, 0.000000e+00, !dbg !95
  %158 = or i1 %156, %154, !dbg !96
  %159 = or i1 %157, %155, !dbg !96
  %160 = select i1 %158, float %152, float %142, !dbg !97
  %161 = select i1 %159, float %153, float %143, !dbg !97
  %162 = or i32 %124, %52, !dbg !98
  %163 = icmp ult i32 %162, 4, !dbg !98
  %164 = add i32 %9, 20, !dbg !99
  %165 = sext i32 %164 to i64, !dbg !100
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !100
  %167 = and i1 %10, %163, !dbg !101
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 %167, i32 -8388608, i1 %167, i32 -8388608, i1 %167) #1, !dbg !102
  %169 = extractvalue { i32, i32 } %168, 0, !dbg !102
  %170 = extractvalue { i32, i32 } %168, 1, !dbg !102
  %171 = bitcast i32 %169 to float, !dbg !102
  %172 = bitcast i32 %170 to float, !dbg !102
  %173 = fcmp olt float %160, %171, !dbg !103
  %174 = fcmp olt float %161, %172, !dbg !103
  %175 = fcmp uno float %171, 0.000000e+00, !dbg !105
  %176 = fcmp uno float %172, 0.000000e+00, !dbg !105
  %177 = or i1 %175, %173, !dbg !106
  %178 = or i1 %176, %174, !dbg !106
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !107
  %180 = bitcast float %160 to i32, !dbg !108
  %181 = select i1 %177, i32 %169, i32 %180, !dbg !109
  %182 = bitcast float %161 to i32, !dbg !108
  %183 = select i1 %178, i32 %170, i32 %182, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %183, ptr addrspace(1) %179, i1 %10) #1, !dbg !108
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzl747b7uembunjcqx5pm6wqu44rdvt2e6qoiowuksrwrelynug.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 39, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 39, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 39, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 24, column: 21, scope: !7)
!22 = !DILocation(line: 24, column: 27, scope: !7)
!23 = !DILocation(line: 69, column: 20, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 54, column: 21, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 52, scope: !7)
!28 = !DILocation(line: 38, column: 44, scope: !7)
!29 = !DILocation(line: 60, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 21, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 52, scope: !7)
!33 = !DILocation(line: 44, column: 44, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 19, scope: !7)
!43 = !DILocation(line: 51, column: 52, scope: !7)
!44 = !DILocation(line: 51, column: 44, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !46)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 38, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 51, scope: !7)
!54 = !DILocation(line: 58, column: 43, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !56)
!56 = !DILocation(line: 59, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !56)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 44, scope: !7)
!62 = !DILocation(line: 61, column: 36, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !64)
!64 = !DILocation(line: 62, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !64)
!68 = !DILocation(line: 63, column: 20, scope: !7)
!69 = !DILocation(line: 64, column: 35, scope: !7)
!70 = !DILocation(line: 64, column: 31, scope: !7)
!71 = !DILocation(line: 64, column: 48, scope: !7)
!72 = !DILocation(line: 64, column: 40, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !74)
!74 = !DILocation(line: 65, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !74)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 36, scope: !7)
!80 = !DILocation(line: 71, column: 31, scope: !7)
!81 = !DILocation(line: 71, column: 49, scope: !7)
!82 = !DILocation(line: 71, column: 41, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !84)
!84 = !DILocation(line: 72, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !84)
!88 = !DILocation(line: 73, column: 20, scope: !7)
!89 = !DILocation(line: 74, column: 36, scope: !7)
!90 = !DILocation(line: 74, column: 31, scope: !7)
!91 = !DILocation(line: 74, column: 49, scope: !7)
!92 = !DILocation(line: 74, column: 41, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !94)
!94 = !DILocation(line: 75, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !94)
!98 = !DILocation(line: 76, column: 20, scope: !7)
!99 = !DILocation(line: 77, column: 36, scope: !7)
!100 = !DILocation(line: 77, column: 31, scope: !7)
!101 = !DILocation(line: 77, column: 49, scope: !7)
!102 = !DILocation(line: 77, column: 41, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !104)
!104 = !DILocation(line: 78, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !104)
!107 = !DILocation(line: 79, column: 25, scope: !7)
!108 = !DILocation(line: 79, column: 37, scope: !7)
!109 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !104)
!110 = !DILocation(line: 79, column: 4, scope: !7)
