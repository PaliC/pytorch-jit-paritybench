; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %14, 4, !dbg !16
  %21 = and i32 %20, 7, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = icmp slt i32 %22, 16, !dbg !18
  %25 = icmp slt i32 %23, 16, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %26 = sdiv i32 %.frozen, 4, !dbg !19
  %27 = sdiv i32 %23, 4, !dbg !19
  %28 = mul i32 %26, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen4 = freeze i32 %17, !dbg !21
  %29 = sdiv i32 %.frozen4, 256, !dbg !21
  %30 = mul i32 %29, 256, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %30, !dbg !22
  %31 = sext i32 %26 to i64, !dbg !23
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %27 to i64, !dbg !23
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #1, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #1, !dbg !24
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #1, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %24) #1, !dbg !24
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #1, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #1, !dbg !24
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #1, !dbg !24
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %25) #1, !dbg !24
  %43 = sext i32 %.decomposed to i64, !dbg !25
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !25
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #1, !dbg !26
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #1, !dbg !26
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #1, !dbg !26
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %24) #1, !dbg !26
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #1, !dbg !26
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #1, !dbg !26
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #1, !dbg !26
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %25) #1, !dbg !26
  %53 = sext i32 %.decomposed5 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = getelementptr i64, ptr addrspace(1) %4, i64 %43, !dbg !29
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %24) #1, !dbg !30
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %24) #1, !dbg !30
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %24) #1, !dbg !30
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %24) #1, !dbg !30
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %25) #1, !dbg !30
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %25) #1, !dbg !30
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %25) #1, !dbg !30
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %25) #1, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #1, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #1, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #1, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #1, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %25) #1, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %25) #1, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %25) #1, !dbg !32
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %25) #1, !dbg !32
  %78 = getelementptr i64, ptr addrspace(1) %6, i64 %31, !dbg !33
  %79 = getelementptr i64, ptr addrspace(1) %6, i64 %33, !dbg !33
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %24) #1, !dbg !34
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %24) #1, !dbg !34
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %24) #1, !dbg !34
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %24) #1, !dbg !34
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %25) #1, !dbg !34
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %25) #1, !dbg !34
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %25) #1, !dbg !34
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %25) #1, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %24) #1, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %24) #1, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %24) #1, !dbg !36
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %24) #1, !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #1, !dbg !36
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #1, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #1, !dbg !36
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %25) #1, !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = lshr i64 %38, 62, !dbg !37
  %101 = and i64 %100, 2, !dbg !37
  %102 = add i64 %101, %38, !dbg !37
  %103 = lshr i64 %42, 62, !dbg !37
  %104 = and i64 %103, 2, !dbg !37
  %105 = add i64 %104, %42, !dbg !37
  %106 = lshr i64 %48, 62, !dbg !38
  %107 = and i64 %106, 2, !dbg !38
  %108 = add i64 %107, %48, !dbg !38
  %109 = lshr i64 %52, 62, !dbg !38
  %110 = and i64 %109, 2, !dbg !38
  %111 = add i64 %110, %52, !dbg !38
  %112 = shl i64 %102, 9, !dbg !39
  %113 = shl i64 %105, 9, !dbg !39
  %114 = shl i32 %29, 10, !dbg !40
  %115 = sext i32 %114 to i64, !dbg !41
  %.idx = shl i64 %108, 10, !dbg !42
  %116 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !42
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %53, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %112, !dbg !42
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %115, !dbg !42
  %.idx1 = shl i64 %111, 10, !dbg !42
  %120 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !42
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %53, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %113, !dbg !42
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %115, !dbg !42
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %24) #1, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %25) #1, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !43
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !43
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !43
  %134 = lshr i64 %64, 62, !dbg !44
  %135 = and i64 %134, 2, !dbg !44
  %136 = add i64 %135, %64, !dbg !44
  %137 = lshr i64 %68, 62, !dbg !44
  %138 = and i64 %137, 2, !dbg !44
  %139 = add i64 %138, %68, !dbg !44
  %.idx2 = shl i64 %136, 10, !dbg !45
  %140 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %53, !dbg !45
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %112, !dbg !45
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %115, !dbg !45
  %.idx3 = shl i64 %139, 10, !dbg !45
  %144 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %53, !dbg !45
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %113, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %115, !dbg !45
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %24) #1, !dbg !46
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !46
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !46
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !46
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !46
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %25) #1, !dbg !46
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !46
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !46
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !46
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !46
  %158 = lshr i64 %83, 62, !dbg !47
  %159 = and i64 %158, 2, !dbg !47
  %160 = add i64 %159, %83, !dbg !47
  %161 = lshr i64 %87, 62, !dbg !47
  %162 = and i64 %161, 2, !dbg !47
  %163 = add i64 %162, %87, !dbg !47
  %164 = shl i64 %160, 9, !dbg !48
  %165 = shl i64 %163, 9, !dbg !48
  %166 = getelementptr float, ptr addrspace(1) %117, i64 %164, !dbg !49
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %115, !dbg !49
  %168 = getelementptr float, ptr addrspace(1) %121, i64 %165, !dbg !49
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %115, !dbg !49
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %24) #1, !dbg !50
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !50
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !50
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !50
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !50
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %25) #1, !dbg !50
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !50
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !50
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !50
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !50
  %180 = getelementptr float, ptr addrspace(1) %141, i64 %164, !dbg !51
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %115, !dbg !51
  %182 = getelementptr float, ptr addrspace(1) %145, i64 %165, !dbg !51
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %115, !dbg !51
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %24) #1, !dbg !52
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !52
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !52
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !52
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !52
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %25) #1, !dbg !52
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !52
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !52
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !52
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !52
  %194 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !50
  %195 = insertelement <2 x i32> %194, i32 %125, i64 1, !dbg !50
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !50
  %197 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !53
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !53
  %199 = shufflevector <2 x float> %198, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %200 = fadd <2 x float> %199, %196, !dbg !53
  %201 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !52
  %202 = insertelement <2 x i32> %201, i32 %149, i64 1, !dbg !52
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !52
  %204 = fadd <2 x float> %199, %203, !dbg !54
  %205 = fsub <2 x float> %204, %200, !dbg !55
  %206 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !56
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !56
  %208 = shufflevector <2 x float> %207, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %209 = fmul <2 x float> %205, %208, !dbg !56
  %210 = fadd <2 x float> %200, %209, !dbg !57
  %211 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !50
  %212 = insertelement <2 x i32> %211, i32 %126, i64 1, !dbg !50
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !50
  %214 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !53
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !53
  %216 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %217 = fadd <2 x float> %216, %213, !dbg !53
  %218 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !52
  %219 = insertelement <2 x i32> %218, i32 %150, i64 1, !dbg !52
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !52
  %221 = fadd <2 x float> %216, %220, !dbg !54
  %222 = fsub <2 x float> %221, %217, !dbg !55
  %223 = fmul <2 x float> %222, %208, !dbg !56
  %224 = fadd <2 x float> %217, %223, !dbg !57
  %225 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !50
  %226 = insertelement <2 x i32> %225, i32 %127, i64 1, !dbg !50
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !50
  %228 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !53
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !53
  %230 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %231 = fadd <2 x float> %230, %227, !dbg !53
  %232 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !52
  %233 = insertelement <2 x i32> %232, i32 %151, i64 1, !dbg !52
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !52
  %235 = fadd <2 x float> %230, %234, !dbg !54
  %236 = fsub <2 x float> %235, %231, !dbg !55
  %237 = fmul <2 x float> %236, %208, !dbg !56
  %238 = fadd <2 x float> %231, %237, !dbg !57
  %239 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !50
  %240 = insertelement <2 x i32> %239, i32 %128, i64 1, !dbg !50
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !50
  %242 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !53
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !53
  %244 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %245 = fadd <2 x float> %244, %241, !dbg !53
  %246 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !52
  %247 = insertelement <2 x i32> %246, i32 %152, i64 1, !dbg !52
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !52
  %249 = fadd <2 x float> %244, %248, !dbg !54
  %250 = fsub <2 x float> %249, %245, !dbg !55
  %251 = fmul <2 x float> %250, %208, !dbg !56
  %252 = fadd <2 x float> %245, %251, !dbg !57
  %253 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !50
  %254 = insertelement <2 x i32> %253, i32 %130, i64 1, !dbg !50
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !50
  %256 = fadd <2 x float> %199, %255, !dbg !53
  %257 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !52
  %258 = insertelement <2 x i32> %257, i32 %154, i64 1, !dbg !52
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !52
  %260 = fadd <2 x float> %199, %259, !dbg !54
  %261 = fsub <2 x float> %260, %256, !dbg !55
  %262 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !56
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !56
  %264 = shufflevector <2 x float> %263, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %265 = fmul <2 x float> %261, %264, !dbg !56
  %266 = fadd <2 x float> %256, %265, !dbg !57
  %267 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !50
  %268 = insertelement <2 x i32> %267, i32 %131, i64 1, !dbg !50
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !50
  %270 = fadd <2 x float> %216, %269, !dbg !53
  %271 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !52
  %272 = insertelement <2 x i32> %271, i32 %155, i64 1, !dbg !52
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !52
  %274 = fadd <2 x float> %216, %273, !dbg !54
  %275 = fsub <2 x float> %274, %270, !dbg !55
  %276 = fmul <2 x float> %275, %264, !dbg !56
  %277 = fadd <2 x float> %270, %276, !dbg !57
  %278 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !50
  %279 = insertelement <2 x i32> %278, i32 %132, i64 1, !dbg !50
  %280 = bitcast <2 x i32> %279 to <2 x float>, !dbg !50
  %281 = fadd <2 x float> %230, %280, !dbg !53
  %282 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !52
  %283 = insertelement <2 x i32> %282, i32 %156, i64 1, !dbg !52
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !52
  %285 = fadd <2 x float> %230, %284, !dbg !54
  %286 = fsub <2 x float> %285, %281, !dbg !55
  %287 = fmul <2 x float> %286, %264, !dbg !56
  %288 = fadd <2 x float> %281, %287, !dbg !57
  %289 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !50
  %290 = insertelement <2 x i32> %289, i32 %133, i64 1, !dbg !50
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !50
  %292 = fadd <2 x float> %244, %291, !dbg !53
  %293 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !52
  %294 = insertelement <2 x i32> %293, i32 %157, i64 1, !dbg !52
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !52
  %296 = fadd <2 x float> %244, %295, !dbg !54
  %297 = fsub <2 x float> %296, %292, !dbg !55
  %298 = fmul <2 x float> %297, %264, !dbg !56
  %299 = fadd <2 x float> %292, %298, !dbg !57
  %300 = extractelement <2 x float> %210, i64 0, !dbg !58
  %301 = extractelement <2 x float> %210, i64 1, !dbg !59
  %302 = fsub float %300, %301, !dbg !58
  %303 = extractelement <2 x float> %224, i64 0, !dbg !58
  %304 = extractelement <2 x float> %224, i64 1, !dbg !59
  %305 = fsub float %303, %304, !dbg !58
  %306 = extractelement <2 x float> %238, i64 0, !dbg !58
  %307 = extractelement <2 x float> %238, i64 1, !dbg !59
  %308 = fsub float %306, %307, !dbg !58
  %309 = extractelement <2 x float> %252, i64 0, !dbg !58
  %310 = extractelement <2 x float> %252, i64 1, !dbg !59
  %311 = fsub float %309, %310, !dbg !58
  %312 = extractelement <2 x float> %266, i64 0, !dbg !58
  %313 = extractelement <2 x float> %266, i64 1, !dbg !59
  %314 = fsub float %312, %313, !dbg !58
  %315 = extractelement <2 x float> %277, i64 0, !dbg !58
  %316 = extractelement <2 x float> %277, i64 1, !dbg !59
  %317 = fsub float %315, %316, !dbg !58
  %318 = extractelement <2 x float> %288, i64 0, !dbg !58
  %319 = extractelement <2 x float> %288, i64 1, !dbg !59
  %320 = fsub float %318, %319, !dbg !58
  %321 = extractelement <2 x float> %299, i64 0, !dbg !58
  %322 = extractelement <2 x float> %299, i64 1, !dbg !59
  %323 = fsub float %321, %322, !dbg !58
  %324 = fmul float %302, %94, !dbg !60
  %325 = fmul float %305, %94, !dbg !60
  %326 = fmul float %308, %94, !dbg !60
  %327 = fmul float %311, %94, !dbg !60
  %328 = fmul float %314, %99, !dbg !60
  %329 = fmul float %317, %99, !dbg !60
  %330 = fmul float %320, %99, !dbg !60
  %331 = fmul float %323, %99, !dbg !60
  %332 = fadd float %301, %324, !dbg !59
  %333 = fadd float %304, %325, !dbg !59
  %334 = fadd float %307, %326, !dbg !59
  %335 = fadd float %310, %327, !dbg !59
  %336 = fadd float %313, %328, !dbg !59
  %337 = fadd float %316, %329, !dbg !59
  %338 = fadd float %319, %330, !dbg !59
  %339 = fadd float %322, %331, !dbg !59
  %340 = shl i32 %22, 8, !dbg !61
  %341 = shl i32 %23, 8, !dbg !61
  %342 = shl i32 %29, 12, !dbg !62
  %343 = add i32 %342, %.decomposed5, !dbg !63
  %344 = add i32 %343, %340, !dbg !64
  %345 = add i32 %343, %341, !dbg !64
  %346 = sext i32 %344 to i64, !dbg !65
  %347 = getelementptr float, ptr addrspace(1) %8, i64 %346, !dbg !65
  %348 = sext i32 %345 to i64, !dbg !65
  %349 = getelementptr float, ptr addrspace(1) %8, i64 %348, !dbg !65
  %350 = bitcast float %332 to i32, !dbg !66
  %351 = bitcast float %333 to i32, !dbg !66
  %352 = bitcast float %334 to i32, !dbg !66
  %353 = bitcast float %335 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %350, i32 %351, i32 %352, i32 %353, ptr addrspace(1) %347, i1 %24) #1, !dbg !66
  %354 = bitcast float %336 to i32, !dbg !66
  %355 = bitcast float %337 to i32, !dbg !66
  %356 = bitcast float %338 to i32, !dbg !66
  %357 = bitcast float %339 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %355, i32 %356, i32 %357, ptr addrspace(1) %349, i1 %25) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3fiiehl3syuq5yykkpwi7bsyoyvlpxtdko5e3oj4zq53sc4lua.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 44, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 32, scope: !7)
!39 = !DILocation(line: 48, column: 50, scope: !7)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 48, column: 57, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 67, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 69, scope: !7)
!47 = !DILocation(line: 60, column: 35, scope: !7)
!48 = !DILocation(line: 61, column: 51, scope: !7)
!49 = !DILocation(line: 61, column: 31, scope: !7)
!50 = !DILocation(line: 61, column: 69, scope: !7)
!51 = !DILocation(line: 63, column: 31, scope: !7)
!52 = !DILocation(line: 63, column: 70, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 34, scope: !7)
!62 = !DILocation(line: 71, column: 44, scope: !7)
!63 = !DILocation(line: 71, column: 30, scope: !7)
!64 = !DILocation(line: 71, column: 39, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 56, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
