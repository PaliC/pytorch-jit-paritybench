; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 5, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit85 = lshr i32 %18, 3, !dbg !12
  %19 = and i32 %.lobit85, 3, !dbg !12
  %20 = and i32 %18, 32, !dbg !12
  %21 = lshr exact i32 %20, 3, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = and i32 %18, 64, !dbg !12
  %24 = lshr exact i32 %23, 3, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !12
  %26 = shl i32 %18, 3, !dbg !12
  %27 = and i32 %26, 24, !dbg !12
  %28 = or disjoint i32 %17, %25, !dbg !13
  %29 = or disjoint i32 %28, 16, !dbg !13
  %30 = or disjoint i32 %17, %27, !dbg !13
  %31 = or disjoint i32 %30, 4, !dbg !13
  %32 = icmp slt i32 %28, 512, !dbg !14
  %33 = icmp slt i32 %29, 512, !dbg !14
  %34 = icmp slt i32 %30, 512, !dbg !14
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %36 = shl i32 %35, 5, !dbg !16
  %37 = shl i32 %18, 2, !dbg !17
  %38 = and i32 %37, 28, !dbg !17
  %39 = lshr i32 %18, 2, !dbg !17
  %.lobit1 = and i32 %39, 1, !dbg !17
  %40 = lshr i32 %18, 2, !dbg !17
  %41 = and i32 %40, 2, !dbg !17
  %42 = or disjoint i32 %.lobit1, %41, !dbg !17
  %43 = lshr i32 %18, 2, !dbg !17
  %44 = and i32 %43, 4, !dbg !17
  %45 = or disjoint i32 %42, %44, !dbg !17
  %46 = lshr exact i32 %20, 2, !dbg !17
  %47 = or disjoint i32 %45, %46, !dbg !17
  %48 = lshr exact i32 %23, 2, !dbg !17
  %49 = or disjoint i32 %47, %48, !dbg !17
  %50 = or disjoint i32 %36, %38, !dbg !18
  %51 = or disjoint i32 %49, %36, !dbg !18
  %52 = icmp slt i32 %50, 64, !dbg !19
  %53 = icmp slt i32 %51, 64, !dbg !19
  %.frozen = freeze i32 %30, !dbg !20
  %54 = sdiv i32 %.frozen, 128, !dbg !20
  %55 = mul i32 %54, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %55, !dbg !21
  %56 = srem i32 %31, 128, !dbg !21
  %57 = shl i32 %28, 6, !dbg !22
  %58 = shl i32 %29, 6, !dbg !22
  %59 = add i32 %50, %57, !dbg !23
  %60 = add i32 %50, %58, !dbg !23
  %61 = sext i32 %59 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %61, !dbg !24
  %63 = sext i32 %60 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %63, !dbg !24
  %65 = and i1 %32, %52, !dbg !25
  %66 = and i1 %33, %52, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %65) #4, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %66) #4, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = shl i32 %18, 7, !dbg !26
  %78 = and i32 %77, 896, !dbg !26
  %79 = or disjoint i32 %19, %78, !dbg !26
  %80 = or disjoint i32 %79, %21, !dbg !26
  %81 = or disjoint i32 %80, %24, !dbg !26
  %82 = and i32 %26, 1016, !dbg !26
  %83 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %81, !dbg !26
  %85 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !26
  %86 = or disjoint i32 %81, 32, !dbg !26
  %87 = lshr i32 %86, 2, !dbg !26
  %88 = and i32 %87, 1073741816, !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr inbounds float, ptr addrspace(3) %89, i32 %86, !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !26
  %92 = or disjoint i32 %81, 64, !dbg !26
  %93 = lshr i32 %92, 2, !dbg !26
  %94 = and i32 %93, 1073741816, !dbg !26
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %92, !dbg !26
  %97 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !26
  %98 = or disjoint i32 %81, 96, !dbg !26
  %99 = lshr i32 %98, 2, !dbg !26
  %100 = and i32 %99, 1073741816, !dbg !26
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !26
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %98, !dbg !26
  %103 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !26
  %104 = or disjoint i32 %81, 16, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %104, !dbg !26
  %106 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !26
  %107 = or disjoint i32 %81, 48, !dbg !26
  %108 = lshr i32 %107, 2, !dbg !26
  %109 = and i32 %108, 1073741816, !dbg !26
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %107, !dbg !26
  %112 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #4, !dbg !26
  %113 = or disjoint i32 %81, 80, !dbg !26
  %114 = lshr i32 %113, 2, !dbg !26
  %115 = and i32 %114, 1073741816, !dbg !26
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %113, !dbg !26
  %118 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !26
  %119 = or disjoint i32 %81, 112, !dbg !26
  %120 = lshr i32 %119, 2, !dbg !26
  %121 = and i32 %120, 1073741816, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %119, !dbg !26
  %124 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %125 = lshr exact i32 %26, 2, !dbg !26
  %126 = and i32 %125, 248, !dbg !26
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !26
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %82, !dbg !26
  %129 = load <4 x float>, ptr addrspace(3) %128, align 16, !dbg !26
  %130 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 16, !dbg !26
  %131 = load <4 x float>, ptr addrspace(3) %130, align 16, !dbg !26
  %132 = icmp slt i32 %.decomposed, 64, !dbg !27
  %133 = shl i32 %51, 6, !dbg !28
  %134 = shl i32 %54, 12, !dbg !29
  %135 = add i32 %133, %134, !dbg !30
  %136 = add i32 %135, %.decomposed, !dbg !31
  %137 = add i32 %135, %56, !dbg !31
  %138 = sext i32 %136 to i64, !dbg !32
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !32
  %140 = sext i32 %137 to i64, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !32
  %142 = and i1 %132, %53, !dbg !33
  %143 = and i1 %34, %142, !dbg !34
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !35
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !35
  %146 = sext i32 %.decomposed to i64, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !36
  %148 = sext i32 %56 to i64, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !36
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !37
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !38
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !39
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !39
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !39
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !39
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !39
  %159 = bitcast i32 %155 to float, !dbg !39
  %160 = bitcast i32 %156 to float, !dbg !39
  %161 = bitcast i32 %157 to float, !dbg !39
  %162 = bitcast i32 %158 to float, !dbg !39
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !39
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !39
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !39
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !39
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !39
  %168 = bitcast i32 %164 to float, !dbg !39
  %169 = bitcast i32 %165 to float, !dbg !39
  %170 = bitcast i32 %166 to float, !dbg !39
  %171 = bitcast i32 %167 to float, !dbg !39
  %172 = fadd float %159, 0x3EE4F8B580000000, !dbg !40
  %173 = fadd float %160, 0x3EE4F8B580000000, !dbg !40
  %174 = fadd float %161, 0x3EE4F8B580000000, !dbg !40
  %175 = fadd float %162, 0x3EE4F8B580000000, !dbg !40
  %176 = fadd float %168, 0x3EE4F8B580000000, !dbg !40
  %177 = fadd float %169, 0x3EE4F8B580000000, !dbg !40
  %178 = fadd float %170, 0x3EE4F8B580000000, !dbg !40
  %179 = fadd float %171, 0x3EE4F8B580000000, !dbg !40
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %180, 0, !dbg !41
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %181, 0, !dbg !41
  br i1 %.not.i, label %187, label %182, !dbg !41

182:                                              ; preds = %15
  br i1 %.not1.i, label %185, label %183, !dbg !41

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

187:                                              ; preds = %15
  br i1 %.not1.i, label %190, label %188, !dbg !41

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %183, %185, %188, %190
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !41
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i10 = icmp eq i32 %192, 0, !dbg !41
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i13 = icmp eq i32 %193, 0, !dbg !41
  br i1 %.not.i10, label %199, label %194, !dbg !41

194:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %197, label %195, !dbg !41

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

199:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %202, label %200, !dbg !41

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

__nv_sqrtf.exit14:                                ; preds = %195, %197, %200, %202
  %.0.i12 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !41
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i15 = icmp eq i32 %204, 0, !dbg !41
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i18 = icmp eq i32 %205, 0, !dbg !41
  br i1 %.not.i15, label %211, label %206, !dbg !41

206:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %209, label %207, !dbg !41

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

211:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %214, label %212, !dbg !41

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

__nv_sqrtf.exit19:                                ; preds = %207, %209, %212, %214
  %.0.i17 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !41
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i20 = icmp eq i32 %216, 0, !dbg !41
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i23 = icmp eq i32 %217, 0, !dbg !41
  br i1 %.not.i20, label %223, label %218, !dbg !41

218:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %221, label %219, !dbg !41

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit24, !dbg !41

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit24, !dbg !41

223:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %226, label %224, !dbg !41

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit24, !dbg !41

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit24, !dbg !41

__nv_sqrtf.exit24:                                ; preds = %219, %221, %224, %226
  %.0.i22 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !41
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i25 = icmp eq i32 %228, 0, !dbg !41
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i28 = icmp eq i32 %229, 0, !dbg !41
  br i1 %.not.i25, label %235, label %230, !dbg !41

230:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %233, label %231, !dbg !41

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit29, !dbg !41

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit29, !dbg !41

235:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %238, label %236, !dbg !41

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit29, !dbg !41

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit29, !dbg !41

__nv_sqrtf.exit29:                                ; preds = %231, %233, %236, %238
  %.0.i27 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !41
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i30 = icmp eq i32 %240, 0, !dbg !41
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i33 = icmp eq i32 %241, 0, !dbg !41
  br i1 %.not.i30, label %247, label %242, !dbg !41

242:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %245, label %243, !dbg !41

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #4, !dbg !41
  br label %__nv_sqrtf.exit34, !dbg !41

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #4, !dbg !41
  br label %__nv_sqrtf.exit34, !dbg !41

247:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %250, label %248, !dbg !41

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #4, !dbg !41
  br label %__nv_sqrtf.exit34, !dbg !41

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #4, !dbg !41
  br label %__nv_sqrtf.exit34, !dbg !41

__nv_sqrtf.exit34:                                ; preds = %243, %245, %248, %250
  %.0.i32 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !41
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i35 = icmp eq i32 %252, 0, !dbg !41
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i38 = icmp eq i32 %253, 0, !dbg !41
  br i1 %.not.i35, label %259, label %254, !dbg !41

254:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %257, label %255, !dbg !41

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !41
  br label %__nv_sqrtf.exit39, !dbg !41

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !41
  br label %__nv_sqrtf.exit39, !dbg !41

259:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %262, label %260, !dbg !41

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !41
  br label %__nv_sqrtf.exit39, !dbg !41

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !41
  br label %__nv_sqrtf.exit39, !dbg !41

__nv_sqrtf.exit39:                                ; preds = %255, %257, %260, %262
  %.0.i37 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !41
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i40 = icmp eq i32 %264, 0, !dbg !41
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i43 = icmp eq i32 %265, 0, !dbg !41
  br i1 %.not.i40, label %271, label %266, !dbg !41

266:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %269, label %267, !dbg !41

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit44, !dbg !41

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit44, !dbg !41

271:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %274, label %272, !dbg !41

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit44, !dbg !41

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit44, !dbg !41

__nv_sqrtf.exit44:                                ; preds = %267, %269, %272, %274
  %.0.i42 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !41
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !42
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !42
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !42
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !42
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !42
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !42
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !42
  %284 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !43
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !43
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !44
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %285, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !44
  %288 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !45
  %289 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !45
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %288, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !46
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %289, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #4, !dbg !46
  %292 = icmp sgt i32 %.decomposed, 63, !dbg !47
  %293 = add nsw i32 %.decomposed, -64, !dbg !48
  %294 = add nsw i32 %56, -64, !dbg !48
  %295 = add i32 %135, %293, !dbg !49
  %296 = add i32 %135, %294, !dbg !49
  %297 = sext i32 %295 to i64, !dbg !50
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %297, !dbg !50
  %299 = sext i32 %296 to i64, !dbg !50
  %300 = getelementptr float, ptr addrspace(1) %5, i64 %299, !dbg !50
  %301 = and i1 %292, %53, !dbg !51
  %302 = and i1 %34, %301, !dbg !52
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !53
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !53
  %305 = sext i32 %293 to i64, !dbg !54
  %306 = getelementptr float, ptr addrspace(1) %6, i64 %305, !dbg !54
  %307 = sext i32 %294 to i64, !dbg !54
  %308 = getelementptr float, ptr addrspace(1) %6, i64 %307, !dbg !54
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %306, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !55
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %308, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !55
  %311 = getelementptr float, ptr addrspace(1) %7, i64 %305, !dbg !56
  %312 = getelementptr float, ptr addrspace(1) %7, i64 %307, !dbg !56
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %311, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !57
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !57
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !57
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !57
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !57
  %318 = bitcast i32 %314 to float, !dbg !57
  %319 = bitcast i32 %315 to float, !dbg !57
  %320 = bitcast i32 %316 to float, !dbg !57
  %321 = bitcast i32 %317 to float, !dbg !57
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %312, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !57
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !57
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !57
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !57
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !57
  %327 = bitcast i32 %323 to float, !dbg !57
  %328 = bitcast i32 %324 to float, !dbg !57
  %329 = bitcast i32 %325 to float, !dbg !57
  %330 = bitcast i32 %326 to float, !dbg !57
  %331 = fadd float %318, 0x3EE4F8B580000000, !dbg !58
  %332 = fadd float %319, 0x3EE4F8B580000000, !dbg !58
  %333 = fadd float %320, 0x3EE4F8B580000000, !dbg !58
  %334 = fadd float %321, 0x3EE4F8B580000000, !dbg !58
  %335 = fadd float %327, 0x3EE4F8B580000000, !dbg !58
  %336 = fadd float %328, 0x3EE4F8B580000000, !dbg !58
  %337 = fadd float %329, 0x3EE4F8B580000000, !dbg !58
  %338 = fadd float %330, 0x3EE4F8B580000000, !dbg !58
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i45 = icmp eq i32 %339, 0, !dbg !59
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i48 = icmp eq i32 %340, 0, !dbg !59
  br i1 %.not.i45, label %346, label %341, !dbg !59

341:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %344, label %342, !dbg !59

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit49, !dbg !59

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit49, !dbg !59

346:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %349, label %347, !dbg !59

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit49, !dbg !59

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit49, !dbg !59

__nv_sqrtf.exit49:                                ; preds = %342, %344, %347, %349
  %.0.i47 = phi float [ %343, %342 ], [ %345, %344 ], [ %348, %347 ], [ %350, %349 ], !dbg !59
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i50 = icmp eq i32 %351, 0, !dbg !59
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i53 = icmp eq i32 %352, 0, !dbg !59
  br i1 %.not.i50, label %358, label %353, !dbg !59

353:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %356, label %354, !dbg !59

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit54, !dbg !59

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit54, !dbg !59

358:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %361, label %359, !dbg !59

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit54, !dbg !59

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit54, !dbg !59

__nv_sqrtf.exit54:                                ; preds = %354, %356, %359, %361
  %.0.i52 = phi float [ %355, %354 ], [ %357, %356 ], [ %360, %359 ], [ %362, %361 ], !dbg !59
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i55 = icmp eq i32 %363, 0, !dbg !59
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i58 = icmp eq i32 %364, 0, !dbg !59
  br i1 %.not.i55, label %370, label %365, !dbg !59

365:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %368, label %366, !dbg !59

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit59, !dbg !59

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit59, !dbg !59

370:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %373, label %371, !dbg !59

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit59, !dbg !59

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit59, !dbg !59

__nv_sqrtf.exit59:                                ; preds = %366, %368, %371, %373
  %.0.i57 = phi float [ %367, %366 ], [ %369, %368 ], [ %372, %371 ], [ %374, %373 ], !dbg !59
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i60 = icmp eq i32 %375, 0, !dbg !59
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i63 = icmp eq i32 %376, 0, !dbg !59
  br i1 %.not.i60, label %382, label %377, !dbg !59

377:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %380, label %378, !dbg !59

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit64, !dbg !59

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit64, !dbg !59

382:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %385, label %383, !dbg !59

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit64, !dbg !59

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit64, !dbg !59

__nv_sqrtf.exit64:                                ; preds = %378, %380, %383, %385
  %.0.i62 = phi float [ %379, %378 ], [ %381, %380 ], [ %384, %383 ], [ %386, %385 ], !dbg !59
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i65 = icmp eq i32 %387, 0, !dbg !59
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i68 = icmp eq i32 %388, 0, !dbg !59
  br i1 %.not.i65, label %394, label %389, !dbg !59

389:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %392, label %390, !dbg !59

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit69, !dbg !59

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit69, !dbg !59

394:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %397, label %395, !dbg !59

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit69, !dbg !59

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit69, !dbg !59

__nv_sqrtf.exit69:                                ; preds = %390, %392, %395, %397
  %.0.i67 = phi float [ %391, %390 ], [ %393, %392 ], [ %396, %395 ], [ %398, %397 ], !dbg !59
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i70 = icmp eq i32 %399, 0, !dbg !59
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i73 = icmp eq i32 %400, 0, !dbg !59
  br i1 %.not.i70, label %406, label %401, !dbg !59

401:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %404, label %402, !dbg !59

402:                                              ; preds = %401
  %403 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #4, !dbg !59
  br label %__nv_sqrtf.exit74, !dbg !59

404:                                              ; preds = %401
  %405 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #4, !dbg !59
  br label %__nv_sqrtf.exit74, !dbg !59

406:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %409, label %407, !dbg !59

407:                                              ; preds = %406
  %408 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #4, !dbg !59
  br label %__nv_sqrtf.exit74, !dbg !59

409:                                              ; preds = %406
  %410 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #4, !dbg !59
  br label %__nv_sqrtf.exit74, !dbg !59

__nv_sqrtf.exit74:                                ; preds = %402, %404, %407, %409
  %.0.i72 = phi float [ %403, %402 ], [ %405, %404 ], [ %408, %407 ], [ %410, %409 ], !dbg !59
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i75 = icmp eq i32 %411, 0, !dbg !59
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i78 = icmp eq i32 %412, 0, !dbg !59
  br i1 %.not.i75, label %418, label %413, !dbg !59

413:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %416, label %414, !dbg !59

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %337) #4, !dbg !59
  br label %__nv_sqrtf.exit79, !dbg !59

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %337) #4, !dbg !59
  br label %__nv_sqrtf.exit79, !dbg !59

418:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %421, label %419, !dbg !59

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.f(float %337) #4, !dbg !59
  br label %__nv_sqrtf.exit79, !dbg !59

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.f(float %337) #4, !dbg !59
  br label %__nv_sqrtf.exit79, !dbg !59

__nv_sqrtf.exit79:                                ; preds = %414, %416, %419, %421
  %.0.i77 = phi float [ %415, %414 ], [ %417, %416 ], [ %420, %419 ], [ %422, %421 ], !dbg !59
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i80 = icmp eq i32 %423, 0, !dbg !59
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i83 = icmp eq i32 %424, 0, !dbg !59
  br i1 %.not.i80, label %430, label %425, !dbg !59

425:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %428, label %426, !dbg !59

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %338) #4, !dbg !59
  br label %__nv_sqrtf.exit84, !dbg !59

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %338) #4, !dbg !59
  br label %__nv_sqrtf.exit84, !dbg !59

430:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %433, label %431, !dbg !59

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.f(float %338) #4, !dbg !59
  br label %__nv_sqrtf.exit84, !dbg !59

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.f(float %338) #4, !dbg !59
  br label %__nv_sqrtf.exit84, !dbg !59

__nv_sqrtf.exit84:                                ; preds = %426, %428, %431, %433
  %.0.i82 = phi float [ %427, %426 ], [ %429, %428 ], [ %432, %431 ], [ %434, %433 ], !dbg !59
  %435 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !53
  %436 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !55
  %437 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !53
  %438 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !55
  %439 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !53
  %440 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !55
  %441 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !53
  %442 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !55
  %443 = insertelement <4 x i32> poison, i32 %441, i64 0, !dbg !53
  %444 = insertelement <4 x i32> %443, i32 %439, i64 1, !dbg !53
  %445 = insertelement <4 x i32> %444, i32 %437, i64 2, !dbg !53
  %446 = insertelement <4 x i32> %445, i32 %435, i64 3, !dbg !53
  %447 = bitcast <4 x i32> %446 to <4 x float>, !dbg !53
  %448 = insertelement <4 x i32> poison, i32 %442, i64 0, !dbg !55
  %449 = insertelement <4 x i32> %448, i32 %440, i64 1, !dbg !55
  %450 = insertelement <4 x i32> %449, i32 %438, i64 2, !dbg !55
  %451 = insertelement <4 x i32> %450, i32 %436, i64 3, !dbg !55
  %452 = bitcast <4 x i32> %451 to <4 x float>, !dbg !55
  %453 = fsub <4 x float> %447, %452, !dbg !60
  %454 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !53
  %455 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !55
  %456 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !53
  %457 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !55
  %458 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !53
  %459 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !55
  %460 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !53
  %461 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !55
  %462 = insertelement <4 x i32> poison, i32 %460, i64 0, !dbg !53
  %463 = insertelement <4 x i32> %462, i32 %458, i64 1, !dbg !53
  %464 = insertelement <4 x i32> %463, i32 %456, i64 2, !dbg !53
  %465 = insertelement <4 x i32> %464, i32 %454, i64 3, !dbg !53
  %466 = bitcast <4 x i32> %465 to <4 x float>, !dbg !53
  %467 = insertelement <4 x i32> poison, i32 %461, i64 0, !dbg !55
  %468 = insertelement <4 x i32> %467, i32 %459, i64 1, !dbg !55
  %469 = insertelement <4 x i32> %468, i32 %457, i64 2, !dbg !55
  %470 = insertelement <4 x i32> %469, i32 %455, i64 3, !dbg !55
  %471 = bitcast <4 x i32> %470 to <4 x float>, !dbg !55
  %472 = fsub <4 x float> %466, %471, !dbg !60
  %473 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !35
  %474 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !37
  %475 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !44
  %476 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !46
  %477 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !35
  %478 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !37
  %479 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !44
  %480 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !46
  %481 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !35
  %482 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !37
  %483 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !44
  %484 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !46
  %485 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !35
  %486 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !37
  %487 = insertelement <4 x i32> poison, i32 %485, i64 0, !dbg !35
  %488 = insertelement <4 x i32> %487, i32 %481, i64 1, !dbg !35
  %489 = insertelement <4 x i32> %488, i32 %477, i64 2, !dbg !35
  %490 = insertelement <4 x i32> %489, i32 %473, i64 3, !dbg !35
  %491 = bitcast <4 x i32> %490 to <4 x float>, !dbg !35
  %492 = insertelement <4 x i32> poison, i32 %486, i64 0, !dbg !37
  %493 = insertelement <4 x i32> %492, i32 %482, i64 1, !dbg !37
  %494 = insertelement <4 x i32> %493, i32 %478, i64 2, !dbg !37
  %495 = insertelement <4 x i32> %494, i32 %474, i64 3, !dbg !37
  %496 = bitcast <4 x i32> %495 to <4 x float>, !dbg !37
  %497 = fsub <4 x float> %491, %496, !dbg !61
  %498 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !44
  %499 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !46
  %500 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !35
  %501 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !37
  %502 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !44
  %503 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !46
  %504 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !35
  %505 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !37
  %506 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !44
  %507 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !46
  %508 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !35
  %509 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !37
  %510 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !44
  %511 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !46
  %512 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !35
  %513 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !37
  %514 = insertelement <4 x i32> poison, i32 %512, i64 0, !dbg !35
  %515 = insertelement <4 x i32> %514, i32 %508, i64 1, !dbg !35
  %516 = insertelement <4 x i32> %515, i32 %504, i64 2, !dbg !35
  %517 = insertelement <4 x i32> %516, i32 %500, i64 3, !dbg !35
  %518 = bitcast <4 x i32> %517 to <4 x float>, !dbg !35
  %519 = insertelement <4 x i32> poison, i32 %513, i64 0, !dbg !37
  %520 = insertelement <4 x i32> %519, i32 %509, i64 1, !dbg !37
  %521 = insertelement <4 x i32> %520, i32 %505, i64 2, !dbg !37
  %522 = insertelement <4 x i32> %521, i32 %501, i64 3, !dbg !37
  %523 = bitcast <4 x i32> %522 to <4 x float>, !dbg !37
  %524 = fsub <4 x float> %518, %523, !dbg !61
  %525 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !44
  %526 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !46
  %527 = and i1 %34, %53, !dbg !25
  %528 = sdiv i32 %29, 64, !dbg !62
  %.frozen86 = freeze i32 %28, !dbg !62
  %529 = sdiv i32 %.frozen86, 64, !dbg !62
  %530 = srem i32 %529, 2, !dbg !63
  %531 = mul i32 %529, 64, !dbg !64
  %.decomposed87 = sub i32 %.frozen86, %531, !dbg !64
  %532 = sdiv i32 %29, 128, !dbg !20
  %533 = sdiv i32 %28, 128, !dbg !20
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !65
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !65
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !65
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !65
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i67) #4, !dbg !65
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i72) #4, !dbg !65
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i77) #4, !dbg !65
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i82) #4, !dbg !65
  %542 = getelementptr float, ptr addrspace(1) %8, i64 %305, !dbg !66
  %543 = getelementptr float, ptr addrspace(1) %8, i64 %307, !dbg !66
  %544 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %542, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !67
  %545 = extractvalue { i32, i32, i32, i32 } %544, 0, !dbg !67
  %546 = extractvalue { i32, i32, i32, i32 } %544, 1, !dbg !67
  %547 = extractvalue { i32, i32, i32, i32 } %544, 2, !dbg !67
  %548 = extractvalue { i32, i32, i32, i32 } %544, 3, !dbg !67
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %543, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !67
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !67
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !67
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !67
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !67
  %554 = getelementptr float, ptr addrspace(1) %9, i64 %305, !dbg !68
  %555 = getelementptr float, ptr addrspace(1) %9, i64 %307, !dbg !68
  %556 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %554, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !69
  %557 = extractvalue { i32, i32, i32, i32 } %556, 0, !dbg !69
  %558 = extractvalue { i32, i32, i32, i32 } %556, 1, !dbg !69
  %559 = extractvalue { i32, i32, i32, i32 } %556, 2, !dbg !69
  %560 = extractvalue { i32, i32, i32, i32 } %556, 3, !dbg !69
  %561 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %555, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302, i32 0, i1 %302) #4, !dbg !69
  %562 = extractvalue { i32, i32, i32, i32 } %561, 0, !dbg !69
  %563 = extractvalue { i32, i32, i32, i32 } %561, 1, !dbg !69
  %564 = extractvalue { i32, i32, i32, i32 } %561, 2, !dbg !69
  %565 = extractvalue { i32, i32, i32, i32 } %561, 3, !dbg !69
  %566 = shl nsw i32 %530, 6, !dbg !70
  %567 = shl nsw i32 %.decomposed87, 7, !dbg !71
  %568 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !64
  %569 = insertelement <2 x i32> %568, i32 %528, i64 1, !dbg !64
  %570 = srem <2 x i32> %569, <i32 64, i32 2>, !dbg !64
  %571 = shl nsw <2 x i32> %570, <i32 7, i32 6>, !dbg !71
  %572 = shl i32 %533, 13, !dbg !72
  %573 = shl i32 %532, 13, !dbg !72
  %574 = shl i32 %54, 13, !dbg !72
  %575 = add i32 %567, %50, !dbg !73
  %576 = add i32 %575, %572, !dbg !74
  %577 = add i32 %576, %566, !dbg !75
  %578 = extractelement <2 x i32> %571, i64 0, !dbg !73
  %579 = add i32 %573, %578, !dbg !73
  %580 = extractelement <2 x i32> %571, i64 1, !dbg !74
  %581 = add i32 %579, %580, !dbg !74
  %582 = add i32 %581, %50, !dbg !75
  %583 = sext i32 %577 to i64, !dbg !76
  %584 = getelementptr float, ptr addrspace(1) %11, i64 %583, !dbg !76
  %585 = sext i32 %582 to i64, !dbg !76
  %586 = getelementptr float, ptr addrspace(1) %11, i64 %585, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %587 = shl i32 %18, 8, !dbg !77
  %588 = and i32 %587, 768, !dbg !77
  %589 = or disjoint i32 %588, %.lobit1, !dbg !77
  %590 = or disjoint i32 %589, %41, !dbg !77
  %591 = or disjoint i32 %590, %44, !dbg !77
  %592 = or disjoint i32 %591, %46, !dbg !77
  %593 = or disjoint i32 %592, %48, !dbg !77
  %594 = and i32 %37, 508, !dbg !77
  %595 = lshr exact i32 %588, 3, !dbg !77
  %596 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %595, !dbg !77
  %597 = getelementptr float, ptr addrspace(3) %596, i32 %593, !dbg !77
  %598 = xor i32 %593, 32, !dbg !77
  %599 = lshr i32 %598, 5, !dbg !77
  %600 = getelementptr float, ptr addrspace(3) @global_smem, i32 %599, !dbg !77
  %601 = getelementptr float, ptr addrspace(3) %600, i32 %598, !dbg !77
  %602 = xor i32 %593, 64, !dbg !77
  %603 = lshr i32 %602, 5, !dbg !77
  %604 = getelementptr float, ptr addrspace(3) @global_smem, i32 %603, !dbg !77
  %605 = getelementptr float, ptr addrspace(3) %604, i32 %602, !dbg !77
  %606 = xor i32 %593, 96, !dbg !77
  %607 = lshr i32 %606, 5, !dbg !77
  %608 = getelementptr float, ptr addrspace(3) @global_smem, i32 %607, !dbg !77
  %609 = getelementptr float, ptr addrspace(3) %608, i32 %606, !dbg !77
  %610 = xor i32 %593, 128, !dbg !77
  %611 = lshr i32 %610, 5, !dbg !77
  %612 = getelementptr float, ptr addrspace(3) @global_smem, i32 %611, !dbg !77
  %613 = getelementptr float, ptr addrspace(3) %612, i32 %610, !dbg !77
  %614 = xor i32 %593, 160, !dbg !77
  %615 = lshr i32 %614, 5, !dbg !77
  %616 = getelementptr float, ptr addrspace(3) @global_smem, i32 %615, !dbg !77
  %617 = getelementptr float, ptr addrspace(3) %616, i32 %614, !dbg !77
  %618 = xor i32 %593, 192, !dbg !77
  %619 = lshr i32 %618, 5, !dbg !77
  %620 = getelementptr float, ptr addrspace(3) @global_smem, i32 %619, !dbg !77
  %621 = getelementptr float, ptr addrspace(3) %620, i32 %618, !dbg !77
  %622 = xor i32 %593, 224, !dbg !77
  %623 = lshr i32 %622, 5, !dbg !77
  %624 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !77
  %625 = getelementptr float, ptr addrspace(3) %624, i32 %622, !dbg !77
  %626 = lshr i32 %594, 5, !dbg !77
  %627 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %626, !dbg !77
  %628 = getelementptr inbounds float, ptr addrspace(3) %627, i32 %594, !dbg !77
  %629 = or disjoint i32 %594, 1, !dbg !77
  %630 = getelementptr inbounds float, ptr addrspace(3) %627, i32 %629, !dbg !77
  %631 = or disjoint i32 %594, 2, !dbg !77
  %632 = getelementptr inbounds float, ptr addrspace(3) %627, i32 %631, !dbg !77
  %633 = or disjoint i32 %594, 3, !dbg !77
  %634 = getelementptr inbounds float, ptr addrspace(3) %627, i32 %633, !dbg !77
  %635 = or disjoint i32 %594, 512, !dbg !77
  %636 = lshr i32 %635, 5, !dbg !77
  %637 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %636, !dbg !77
  %638 = getelementptr inbounds float, ptr addrspace(3) %637, i32 %635, !dbg !77
  %639 = or disjoint i32 %594, 513, !dbg !77
  %640 = lshr i32 %639, 5, !dbg !77
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !77
  %642 = getelementptr inbounds float, ptr addrspace(3) %641, i32 %639, !dbg !77
  %643 = or disjoint i32 %594, 514, !dbg !77
  %644 = lshr i32 %643, 5, !dbg !77
  %645 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %644, !dbg !77
  %646 = getelementptr inbounds float, ptr addrspace(3) %645, i32 %643, !dbg !77
  %647 = or disjoint i32 %594, 515, !dbg !77
  %648 = lshr i32 %647, 5, !dbg !77
  %649 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %648, !dbg !77
  %650 = getelementptr inbounds float, ptr addrspace(3) %649, i32 %647, !dbg !77
  %651 = shl i32 %51, 7, !dbg !78
  %652 = add i32 %651, %.decomposed, !dbg !79
  %653 = add i32 %652, %574, !dbg !80
  %654 = sext i32 %653 to i64, !dbg !81
  %655 = getelementptr i1, ptr addrspace(1) %12, i64 %654, !dbg !81
  %656 = insertelement <4 x float> poison, float %276, i64 0, !dbg !82
  %657 = insertelement <4 x float> %656, float %277, i64 1, !dbg !82
  %658 = insertelement <4 x float> %657, float %278, i64 2, !dbg !82
  %659 = insertelement <4 x float> %658, float %279, i64 3, !dbg !82
  %660 = fmul <4 x float> %524, %659, !dbg !82
  %661 = insertelement <4 x i32> poison, i32 %525, i64 0, !dbg !44
  %662 = insertelement <4 x i32> %661, i32 %510, i64 1, !dbg !44
  %663 = insertelement <4 x i32> %662, i32 %506, i64 2, !dbg !44
  %664 = insertelement <4 x i32> %663, i32 %502, i64 3, !dbg !44
  %665 = bitcast <4 x i32> %664 to <4 x float>, !dbg !44
  %666 = fmul <4 x float> %660, %665, !dbg !83
  %667 = insertelement <4 x i32> poison, i32 %526, i64 0, !dbg !46
  %668 = insertelement <4 x i32> %667, i32 %511, i64 1, !dbg !46
  %669 = insertelement <4 x i32> %668, i32 %507, i64 2, !dbg !46
  %670 = insertelement <4 x i32> %669, i32 %503, i64 3, !dbg !46
  %671 = bitcast <4 x i32> %670 to <4 x float>, !dbg !46
  %672 = fadd <4 x float> %666, %671, !dbg !84
  %673 = fcmp olt <4 x float> %672, zeroinitializer, !dbg !85
  %674 = select <4 x i1> %673, <4 x float> zeroinitializer, <4 x float> %672, !dbg !89
  %675 = insertelement <4 x float> poison, float %534, i64 0, !dbg !90
  %676 = insertelement <4 x float> %675, float %535, i64 1, !dbg !90
  %677 = insertelement <4 x float> %676, float %536, i64 2, !dbg !90
  %678 = insertelement <4 x float> %677, float %537, i64 3, !dbg !90
  %679 = fmul <4 x float> %472, %678, !dbg !90
  %680 = insertelement <4 x i32> poison, i32 %545, i64 0, !dbg !67
  %681 = insertelement <4 x i32> %680, i32 %546, i64 1, !dbg !67
  %682 = insertelement <4 x i32> %681, i32 %547, i64 2, !dbg !67
  %683 = insertelement <4 x i32> %682, i32 %548, i64 3, !dbg !67
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !67
  %685 = fmul <4 x float> %679, %684, !dbg !91
  %686 = insertelement <4 x i32> poison, i32 %557, i64 0, !dbg !69
  %687 = insertelement <4 x i32> %686, i32 %558, i64 1, !dbg !69
  %688 = insertelement <4 x i32> %687, i32 %559, i64 2, !dbg !69
  %689 = insertelement <4 x i32> %688, i32 %560, i64 3, !dbg !69
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !69
  %691 = fadd <4 x float> %685, %690, !dbg !92
  %692 = fcmp olt <4 x float> %691, zeroinitializer, !dbg !93
  %693 = select <4 x i1> %692, <4 x float> zeroinitializer, <4 x float> %691, !dbg !95
  %694 = insertelement <4 x i1> poison, i1 %132, i64 0, !dbg !96
  %695 = shufflevector <4 x i1> %694, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !96
  %696 = select <4 x i1> %695, <4 x float> %674, <4 x float> %693, !dbg !96
  %697 = fadd <4 x float> %129, %696, !dbg !97
  %698 = fcmp olt <4 x float> %697, zeroinitializer, !dbg !98
  %699 = select <4 x i1> %698, <4 x float> zeroinitializer, <4 x float> %697, !dbg !100
  %700 = fcmp ole <4 x float> %699, zeroinitializer, !dbg !101
  %701 = extractelement <4 x float> %699, i64 0, !dbg !77
  %702 = bitcast float %701 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %597, <1 x i32> %702, i1 true) #4, !dbg !77
  %703 = extractelement <4 x float> %699, i64 1, !dbg !77
  %704 = bitcast float %703 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %704, i1 true) #4, !dbg !77
  %705 = extractelement <4 x float> %699, i64 2, !dbg !77
  %706 = bitcast float %705 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %605, <1 x i32> %706, i1 true) #4, !dbg !77
  %707 = extractelement <4 x float> %699, i64 3, !dbg !77
  %708 = bitcast float %707 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %609, <1 x i32> %708, i1 true) #4, !dbg !77
  %709 = insertelement <4 x float> poison, float %280, i64 0, !dbg !82
  %710 = insertelement <4 x float> %709, float %281, i64 1, !dbg !82
  %711 = insertelement <4 x float> %710, float %282, i64 2, !dbg !82
  %712 = insertelement <4 x float> %711, float %283, i64 3, !dbg !82
  %713 = fmul <4 x float> %497, %712, !dbg !82
  %714 = insertelement <4 x i32> poison, i32 %498, i64 0, !dbg !44
  %715 = insertelement <4 x i32> %714, i32 %483, i64 1, !dbg !44
  %716 = insertelement <4 x i32> %715, i32 %479, i64 2, !dbg !44
  %717 = insertelement <4 x i32> %716, i32 %475, i64 3, !dbg !44
  %718 = bitcast <4 x i32> %717 to <4 x float>, !dbg !44
  %719 = fmul <4 x float> %713, %718, !dbg !83
  %720 = insertelement <4 x i32> poison, i32 %499, i64 0, !dbg !46
  %721 = insertelement <4 x i32> %720, i32 %484, i64 1, !dbg !46
  %722 = insertelement <4 x i32> %721, i32 %480, i64 2, !dbg !46
  %723 = insertelement <4 x i32> %722, i32 %476, i64 3, !dbg !46
  %724 = bitcast <4 x i32> %723 to <4 x float>, !dbg !46
  %725 = fadd <4 x float> %719, %724, !dbg !84
  %726 = fcmp olt <4 x float> %725, zeroinitializer, !dbg !85
  %727 = select <4 x i1> %726, <4 x float> zeroinitializer, <4 x float> %725, !dbg !89
  %728 = insertelement <4 x float> poison, float %538, i64 0, !dbg !90
  %729 = insertelement <4 x float> %728, float %539, i64 1, !dbg !90
  %730 = insertelement <4 x float> %729, float %540, i64 2, !dbg !90
  %731 = insertelement <4 x float> %730, float %541, i64 3, !dbg !90
  %732 = fmul <4 x float> %453, %731, !dbg !90
  %733 = insertelement <4 x i32> poison, i32 %550, i64 0, !dbg !67
  %734 = insertelement <4 x i32> %733, i32 %551, i64 1, !dbg !67
  %735 = insertelement <4 x i32> %734, i32 %552, i64 2, !dbg !67
  %736 = insertelement <4 x i32> %735, i32 %553, i64 3, !dbg !67
  %737 = bitcast <4 x i32> %736 to <4 x float>, !dbg !67
  %738 = fmul <4 x float> %732, %737, !dbg !91
  %739 = insertelement <4 x i32> poison, i32 %562, i64 0, !dbg !69
  %740 = insertelement <4 x i32> %739, i32 %563, i64 1, !dbg !69
  %741 = insertelement <4 x i32> %740, i32 %564, i64 2, !dbg !69
  %742 = insertelement <4 x i32> %741, i32 %565, i64 3, !dbg !69
  %743 = bitcast <4 x i32> %742 to <4 x float>, !dbg !69
  %744 = fadd <4 x float> %738, %743, !dbg !92
  %745 = fcmp olt <4 x float> %744, zeroinitializer, !dbg !93
  %746 = select <4 x i1> %745, <4 x float> zeroinitializer, <4 x float> %744, !dbg !95
  %747 = select <4 x i1> %695, <4 x float> %727, <4 x float> %746, !dbg !96
  %748 = fadd <4 x float> %131, %747, !dbg !97
  %749 = fcmp olt <4 x float> %748, zeroinitializer, !dbg !98
  %750 = select <4 x i1> %749, <4 x float> zeroinitializer, <4 x float> %748, !dbg !100
  %751 = fcmp ole <4 x float> %750, zeroinitializer, !dbg !101
  %752 = extractelement <4 x float> %750, i64 0, !dbg !77
  %753 = bitcast float %752 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %753, i1 true) #4, !dbg !77
  %754 = extractelement <4 x float> %750, i64 1, !dbg !77
  %755 = bitcast float %754 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %755, i1 true) #4, !dbg !77
  %756 = extractelement <4 x float> %750, i64 2, !dbg !77
  %757 = bitcast float %756 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %621, <1 x i32> %757, i1 true) #4, !dbg !77
  %758 = extractelement <4 x float> %750, i64 3, !dbg !77
  %759 = bitcast float %758 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %759, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %760 = load i32, ptr addrspace(3) %628, align 4, !dbg !77
  %761 = load i32, ptr addrspace(3) %630, align 4, !dbg !77
  %762 = load i32, ptr addrspace(3) %632, align 4, !dbg !77
  %763 = load i32, ptr addrspace(3) %634, align 4, !dbg !77
  %764 = load i32, ptr addrspace(3) %638, align 4, !dbg !77
  %765 = load i32, ptr addrspace(3) %642, align 4, !dbg !77
  %766 = load i32, ptr addrspace(3) %646, align 4, !dbg !77
  %767 = load i32, ptr addrspace(3) %650, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %760, i32 %761, i32 %762, i32 %763, ptr addrspace(1) %584, i1 %65) #4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %764, i32 %765, i32 %766, i32 %767, ptr addrspace(1) %586, i1 %66) #4, !dbg !77
  %768 = zext <4 x i1> %700 to <4 x i8>, !dbg !102
  %769 = bitcast <4 x i8> %768 to i32, !dbg !102
  %770 = zext <4 x i1> %751 to <4 x i8>, !dbg !102
  %771 = bitcast <4 x i8> %770 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %769, i32 %771, ptr addrspace(1) %655, i1 %527) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cclf6fdsfcrwu3ednodpbznmvyyu6wqyv2prfe7bbqfdrpfnb64y.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 49, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 62, scope: !7)
!34 = !DILocation(line: 40, column: 70, scope: !7)
!35 = !DILocation(line: 40, column: 55, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 58, scope: !7)
!49 = !DILocation(line: 63, column: 50, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 72, scope: !7)
!52 = !DILocation(line: 63, column: 80, scope: !7)
!53 = !DILocation(line: 63, column: 64, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 32, column: 19, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 79, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 79, scope: !7)
!70 = !DILocation(line: 89, column: 33, scope: !7)
!71 = !DILocation(line: 89, column: 42, scope: !7)
!72 = !DILocation(line: 89, column: 52, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 38, scope: !7)
!75 = !DILocation(line: 89, column: 47, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 64, scope: !7)
!78 = !DILocation(line: 90, column: 34, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 39, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
