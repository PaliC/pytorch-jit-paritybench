; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 2048, !dbg !14
  %15 = mul i32 %14, 2048, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = shl i32 %14, 13, !dbg !16
  %17 = add i32 %16, %.decomposed, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !19
  %21 = sext i32 %.decomposed to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !27
  %34 = add i32 %17, 2048, !dbg !28
  %35 = sext i32 %34 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !29
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !30
  %38 = add i32 %17, 4096, !dbg !31
  %39 = sext i32 %38 to i64, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !32
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !33
  %42 = add i32 %17, 6144, !dbg !34
  %43 = sext i32 %42 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !35
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !36
  %46 = fadd float %28, 0x3EE4F8B580000000, !dbg !37
  %47 = fadd float %29, 0x3EE4F8B580000000, !dbg !37
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %48, 0, !dbg !38
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %49, 0, !dbg !38
  br i1 %.not.i, label %55, label %50, !dbg !38

50:                                               ; preds = %7
  br i1 %.not1.i, label %53, label %51, !dbg !38

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

55:                                               ; preds = %7
  br i1 %.not1.i, label %58, label %56, !dbg !38

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %60, 0, !dbg !38
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !38
  br i1 %.not.i1, label %67, label %62, !dbg !38

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !38

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !38
  %72 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %73 = extractvalue { i32, i32 } %23, 1, !dbg !21
  %74 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %75 = extractvalue { i32, i32 } %23, 0, !dbg !21
  %76 = extractvalue { i32, i32 } %45, 1, !dbg !36
  %77 = extractvalue { i32, i32 } %45, 0, !dbg !36
  %78 = extractvalue { i32, i32 } %41, 1, !dbg !33
  %79 = extractvalue { i32, i32 } %41, 0, !dbg !33
  %80 = extractvalue { i32, i32 } %37, 1, !dbg !30
  %81 = extractvalue { i32, i32 } %37, 0, !dbg !30
  %82 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %83 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %84 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %85 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %88 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !21
  %89 = insertelement <2 x i32> %88, i32 %75, i64 1, !dbg !21
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !21
  %91 = shufflevector <2 x float> %90, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !21
  %92 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !36
  %93 = insertelement <8 x i32> %92, i32 %77, i64 1, !dbg !36
  %94 = insertelement <8 x i32> %93, i32 %78, i64 2, !dbg !36
  %95 = insertelement <8 x i32> %94, i32 %79, i64 3, !dbg !36
  %96 = insertelement <8 x i32> %95, i32 %80, i64 4, !dbg !36
  %97 = insertelement <8 x i32> %96, i32 %81, i64 5, !dbg !36
  %98 = insertelement <8 x i32> %97, i32 %72, i64 6, !dbg !36
  %99 = insertelement <8 x i32> %98, i32 %74, i64 7, !dbg !36
  %100 = bitcast <8 x i32> %99 to <8 x float>, !dbg !36
  %101 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !27
  %102 = insertelement <2 x i32> %101, i32 %83, i64 1, !dbg !27
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !27
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !27
  %105 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !25
  %106 = insertelement <2 x i32> %105, i32 %85, i64 1, !dbg !25
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !25
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !25
  %109 = fsub <8 x float> %100, %91, !dbg !40
  %110 = insertelement <8 x float> poison, float %87, i64 0, !dbg !41
  %111 = insertelement <8 x float> %110, float %86, i64 1, !dbg !41
  %112 = shufflevector <8 x float> %111, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %113 = fmul <8 x float> %109, %112, !dbg !41
  %114 = fmul <8 x float> %113, %108, !dbg !42
  %115 = fadd <8 x float> %114, %104, !dbg !43
  %116 = fcmp olt <8 x float> %115, zeroinitializer, !dbg !44
  %117 = extractelement <8 x i1> %116, i64 7, !dbg !48
  %118 = extractelement <8 x float> %115, i64 7, !dbg !48
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !48
  %120 = extractelement <8 x i1> %116, i64 6, !dbg !48
  %121 = extractelement <8 x float> %115, i64 6, !dbg !48
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !48
  %123 = extractelement <8 x i1> %116, i64 5, !dbg !50
  %124 = extractelement <8 x float> %115, i64 5, !dbg !50
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !50
  %126 = extractelement <8 x i1> %116, i64 4, !dbg !50
  %127 = extractelement <8 x float> %115, i64 4, !dbg !50
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !50
  %129 = fadd float %119, %125, !dbg !52
  %130 = fadd float %122, %128, !dbg !52
  %131 = extractelement <8 x i1> %116, i64 3, !dbg !53
  %132 = extractelement <8 x float> %115, i64 3, !dbg !53
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !53
  %134 = extractelement <8 x i1> %116, i64 2, !dbg !53
  %135 = extractelement <8 x float> %115, i64 2, !dbg !53
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !53
  %137 = fadd float %133, %129, !dbg !55
  %138 = fadd float %136, %130, !dbg !55
  %139 = extractelement <8 x i1> %116, i64 1, !dbg !56
  %140 = extractelement <8 x float> %115, i64 1, !dbg !56
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !56
  %142 = extractelement <8 x i1> %116, i64 0, !dbg !56
  %143 = extractelement <8 x float> %115, i64 0, !dbg !56
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !56
  %145 = fadd float %141, %137, !dbg !57
  %146 = fadd float %144, %138, !dbg !57
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 4.000000e+00) #3, !dbg !58
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 4.000000e+00) #3, !dbg !58
  %149 = sext i32 %13 to i64, !dbg !59
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !59
  %151 = bitcast float %147 to i32, !dbg !60
  %152 = bitcast float %148 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %152, ptr addrspace(1) %150, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxqnwo4v53lu2tina4s6q3blpejc2wr5n4cqc7fxwm2h46z4xoi3.py", directory: "inductor_cache/xq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 43, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 53, scope: !7)
!31 = !DILocation(line: 33, column: 43, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 53, scope: !7)
!34 = !DILocation(line: 34, column: 43, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 53, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 26, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 64, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 47, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !51)
!51 = !DILocation(line: 52, column: 42, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 58, column: 42, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 68, column: 25, scope: !7)
!60 = !DILocation(line: 68, column: 37, scope: !7)
!61 = !DILocation(line: 68, column: 4, scope: !7)
