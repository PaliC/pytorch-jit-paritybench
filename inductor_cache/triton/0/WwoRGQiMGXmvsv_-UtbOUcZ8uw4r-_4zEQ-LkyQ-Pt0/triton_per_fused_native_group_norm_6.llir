; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = lshr i32 %9, 5, !dbg !14
  %14 = lshr i32 %9, 3, !dbg !14
  %15 = and i32 %14, 31, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %16, 64, !dbg !17
  %19 = sdiv i32 %12, 4096, !dbg !18
  %20 = shl nsw i32 %.decomposed, 1, !dbg !19
  %21 = shl nsw i32 %18, 7, !dbg !20
  %22 = or disjoint i32 %21, %15, !dbg !21
  %23 = or disjoint i32 %22, 32, !dbg !21
  %24 = or disjoint i32 %22, 64, !dbg !21
  %25 = or disjoint i32 %22, 96, !dbg !21
  %26 = sdiv i32 %22, 4096, !dbg !22
  %27 = mul i32 %26, 4096, !dbg !23
  %.decomposed1 = sub i32 %22, %27, !dbg !23
  %28 = sdiv i32 %23, 4096, !dbg !22
  %29 = mul i32 %28, 4096, !dbg !23
  %.decomposed2 = sub i32 %23, %29, !dbg !23
  %30 = sdiv i32 %24, 4096, !dbg !22
  %31 = mul i32 %30, 4096, !dbg !23
  %.decomposed3 = sub i32 %24, %31, !dbg !23
  %32 = sdiv i32 %25, 4096, !dbg !22
  %33 = mul i32 %32, 4096, !dbg !23
  %.decomposed4 = sub i32 %25, %33, !dbg !23
  %34 = shl nsw i32 %.decomposed1, 7, !dbg !24
  %35 = shl nsw i32 %.decomposed2, 7, !dbg !24
  %36 = shl nsw i32 %.decomposed3, 7, !dbg !24
  %37 = shl nsw i32 %.decomposed4, 7, !dbg !24
  %38 = shl i32 %19, 19, !dbg !25
  %39 = add i32 %38, %20, !dbg !26
  %40 = add i32 %39, %26, !dbg !27
  %41 = add i32 %40, %34, !dbg !28
  %42 = add i32 %39, %28, !dbg !27
  %43 = add i32 %42, %35, !dbg !28
  %44 = add i32 %39, %30, !dbg !27
  %45 = add i32 %44, %36, !dbg !28
  %46 = add i32 %39, %32, !dbg !27
  %47 = add i32 %46, %37, !dbg !28
  %48 = sext i32 %41 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !29
  %50 = sext i32 %43 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = sext i32 %45 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !29
  %54 = sext i32 %47 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %57 = bitcast i32 %56 to float, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !30
  %59 = bitcast i32 %58 to float, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = fadd float %57, %59, !dbg !31
  %65 = fadd float %64, %61, !dbg !31
  %66 = fadd float %65, %63, !dbg !31
  %67 = bitcast float %66 to i32, !dbg !36
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !36
  %69 = bitcast i32 %68 to float, !dbg !36
  %70 = fadd float %66, %69, !dbg !31
  %71 = bitcast float %70 to i32, !dbg !36
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !36
  %73 = bitcast i32 %72 to float, !dbg !36
  %74 = fadd float %70, %73, !dbg !31
  %75 = lshr i32 %10, 3, !dbg !36
  %76 = icmp samesign ult i32 %10, 8, !dbg !36
  %77 = and i32 %13, 7, !dbg !36
  %78 = shl nuw nsw i32 %11, 3, !dbg !36
  %79 = or disjoint i32 %78, %77, !dbg !36
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !36
  %81 = bitcast float %74 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %76) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %82 = icmp slt i32 %9, 64, !dbg !36
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !36
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #3, !dbg !36
  %85 = bitcast i32 %84 to float, !dbg !36
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !36
  %87 = bitcast i32 %86 to float, !dbg !36
  %88 = fadd float %85, %87, !dbg !31
  %89 = bitcast float %88 to i32, !dbg !36
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = fadd float %88, %91, !dbg !31
  %93 = bitcast float %92 to i32, !dbg !36
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !36
  %95 = bitcast i32 %94 to float, !dbg !36
  %96 = fadd float %92, %95, !dbg !31
  %97 = icmp eq i32 %11, 0, !dbg !36
  %98 = and i1 %82, %97, !dbg !36
  %99 = bitcast float %96 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %99, i1 %98) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !36
  %101 = load float, ptr addrspace(3) %100, align 16, !dbg !36
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.280000e+02) #3, !dbg !37
  %103 = fsub float %57, %102, !dbg !38
  %104 = fsub float %59, %102, !dbg !38
  %105 = fsub float %61, %102, !dbg !38
  %106 = fsub float %63, %102, !dbg !38
  %107 = fmul float %103, %103, !dbg !39
  %108 = fmul float %104, %104, !dbg !39
  %109 = fmul float %105, %105, !dbg !39
  %110 = fmul float %106, %106, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %111 = fadd float %107, %108, !dbg !42
  %112 = fadd float %109, %111, !dbg !42
  %113 = fadd float %110, %112, !dbg !42
  %114 = bitcast float %113 to i32, !dbg !40
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !40
  %116 = bitcast i32 %115 to float, !dbg !40
  %117 = fadd float %113, %116, !dbg !42
  %118 = bitcast float %117 to i32, !dbg !40
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !40
  %120 = bitcast i32 %119 to float, !dbg !40
  %121 = fadd float %117, %120, !dbg !42
  %122 = bitcast float %121 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %122, i1 %76) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #3, !dbg !40
  %124 = bitcast i32 %123 to float, !dbg !40
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !40
  %126 = bitcast i32 %125 to float, !dbg !40
  %127 = fadd float %124, %126, !dbg !42
  %128 = bitcast float %127 to i32, !dbg !40
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !40
  %130 = bitcast i32 %129 to float, !dbg !40
  %131 = fadd float %127, %130, !dbg !42
  %132 = bitcast float %131 to i32, !dbg !40
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !40
  %134 = bitcast i32 %133 to float, !dbg !40
  %135 = fadd float %131, %134, !dbg !42
  %136 = bitcast float %135 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %136, i1 %98) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %137 = load i32, ptr addrspace(3) %100, align 16, !dbg !40
  %138 = sext i32 %12 to i64, !dbg !43
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !43
  %140 = shl nuw nsw i32 %77, 2, !dbg !44
  %141 = or disjoint i32 %140, %75, !dbg !44
  %142 = icmp eq i32 %141, 0, !dbg !44
  %143 = bitcast float %102 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %139, i1 %142) #3, !dbg !44
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %144, i1 %142) #3, !dbg !46
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %145, i1 %142) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4anm4yu4ylhptgvkj7ehfmdxy4jboqevkfylz2xi2o6tytuecy.py", directory: "inductor_cache/t4")
!4 = !{ptr @triton_per_fused_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_6", linkageName: "triton_per_fused_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 98, scope: !7)
!23 = !DILocation(line: 34, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 75, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 68, scope: !7)
!28 = !DILocation(line: 34, column: 81, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 106, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 37, column: 24, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !41)
!43 = !DILocation(line: 45, column: 25, scope: !7)
!44 = !DILocation(line: 45, column: 36, scope: !7)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 37, scope: !7)
!47 = !DILocation(line: 47, column: 25, scope: !7)
!48 = !DILocation(line: 47, column: 36, scope: !7)
!49 = !DILocation(line: 47, column: 4, scope: !7)
