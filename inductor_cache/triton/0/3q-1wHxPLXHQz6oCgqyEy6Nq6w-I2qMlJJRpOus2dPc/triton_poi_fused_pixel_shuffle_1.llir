; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !14
  %20 = icmp slt i32 %19, 4, !dbg !15
  %21 = srem i32 %16, 4, !dbg !16
  %22 = sdiv i32 %17, 4, !dbg !17
  %23 = sdiv i32 %18, 4, !dbg !17
  %24 = srem i32 %22, 4, !dbg !18
  %25 = srem i32 %23, 4, !dbg !18
  %26 = sdiv i32 %16, 64, !dbg !19
  %27 = sdiv i32 %17, 64, !dbg !19
  %28 = sdiv i32 %18, 64, !dbg !19
  %29 = srem i32 %27, 4, !dbg !20
  %30 = srem i32 %28, 4, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !21
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %33 = sdiv <2 x i32> %32, <i32 16, i32 4>, !dbg !21
  %34 = srem <2 x i32> %33, splat (i32 4), !dbg !22
  %35 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !23
  %36 = insertelement <4 x i32> %35, i32 %26, i64 1, !dbg !23
  %37 = shufflevector <2 x i32> %34, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !23
  %38 = shufflevector <4 x i32> %36, <4 x i32> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !23
  %39 = shl <4 x i32> %38, <i32 4, i32 8, i32 2, i32 6>, !dbg !23
  %40 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %39), !dbg !24
  %op.rdx = add i32 %40, %21, !dbg !25
  %41 = sext i32 %op.rdx to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #5, !dbg !27
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !27
  %.idx = shl nuw nsw i32 %13, 3, !dbg !27
  %46 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %47 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !27
  %48 = shl nuw nsw i32 %13, 1, !dbg !27
  %49 = or disjoint i32 %48, 2, !dbg !27
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !27
  %51 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !27
  %52 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !27
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !27
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !27
  %56 = shl nsw i32 %24, 2, !dbg !28
  %57 = shl nsw i32 %25, 2, !dbg !28
  %58 = add i32 %56, %19, !dbg !29
  %59 = add i32 %57, %19, !dbg !29
  %60 = shl nsw i32 %29, 4, !dbg !30
  %61 = shl nsw i32 %30, 4, !dbg !30
  %62 = add i32 %58, %60, !dbg !31
  %63 = add i32 %59, %61, !dbg !31
  %64 = sext i32 %62 to i64, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = sext i32 %63 to i64, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %20) #5, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %20) #5, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !34
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #5, !dbg !35
  %73 = bitcast i32 %72 to float, !dbg !35
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %20) #5, !dbg !35
  %75 = bitcast i32 %74 to float, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !36
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #5, !dbg !37
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #5, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !38
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %20) #5, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %20) #5, !dbg !39
  %84 = fadd float %73, 0x3EE4F8B580000000, !dbg !40
  %85 = fadd float %75, 0x3EE4F8B580000000, !dbg !40
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %86, 0, !dbg !41
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %87, 0, !dbg !41
  br i1 %.not.i, label %93, label %88, !dbg !41

88:                                               ; preds = %8
  br i1 %.not1.i, label %91, label %89, !dbg !41

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

93:                                               ; preds = %8
  br i1 %.not1.i, label %96, label %94, !dbg !41

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !41
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i3 = icmp eq i32 %98, 0, !dbg !41
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i6 = icmp eq i32 %99, 0, !dbg !41
  br i1 %.not.i3, label %105, label %100, !dbg !41

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %103, label %101, !dbg !41

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #5, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #5, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %108, label %106, !dbg !41

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #5, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #5, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

__nv_sqrtf.exit7:                                 ; preds = %101, %103, %106, %108
  %.0.i5 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !41
  %110 = bitcast i32 %69 to float, !dbg !33
  %111 = fsub float %55, %110, !dbg !42
  %112 = bitcast i32 %68 to float, !dbg !33
  %113 = fsub float %53, %112, !dbg !42
  %114 = bitcast i32 %83 to float, !dbg !39
  %115 = bitcast i32 %82 to float, !dbg !39
  %116 = bitcast i32 %79 to float, !dbg !37
  %117 = bitcast i32 %78 to float, !dbg !37
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !43
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #5, !dbg !43
  %120 = fmul float %113, %118, !dbg !44
  %121 = fmul float %111, %119, !dbg !44
  %122 = fmul float %120, %117, !dbg !45
  %123 = fmul float %121, %116, !dbg !45
  %124 = fadd float %122, %115, !dbg !46
  %125 = fadd float %123, %114, !dbg !46
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !47
  %127 = fcmp olt float %125, 0.000000e+00, !dbg !47
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !51
  %129 = select i1 %127, float 0.000000e+00, float %125, !dbg !51
  %130 = shl i32 %17, 2, !dbg !52
  %131 = shl i32 %18, 2, !dbg !52
  %132 = add i32 %130, %19, !dbg !53
  %133 = add i32 %131, %19, !dbg !53
  %134 = sext i32 %132 to i64, !dbg !54
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %134, !dbg !54
  %136 = sext i32 %133 to i64, !dbg !54
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !54
  %138 = bitcast float %128 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %135, i1 %20) #5, !dbg !55
  %139 = bitcast float %129 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %137, i1 %20) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx4d6ph6lzbqwywgddzob6sa7s4d3y5o5jyjehzyrpohb6m3rtio.py", directory: "inductor_cache/x4")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_1", linkageName: "triton_poi_fused_pixel_shuffle_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 26, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 27, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 31, column: 27, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 58, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 67, scope: !7)
!28 = !DILocation(line: 36, column: 37, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 45, scope: !7)
!31 = !DILocation(line: 36, column: 42, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 50, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 50, scope: !7)
!36 = !DILocation(line: 38, column: 31, scope: !7)
!37 = !DILocation(line: 38, column: 51, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 51, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 26, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 52, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 53, column: 32, scope: !7)
!53 = !DILocation(line: 53, column: 30, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 44, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
