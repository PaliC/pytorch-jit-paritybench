; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 16, !dbg !14
  %14 = srem i32 %13, 16, !dbg !15
  %15 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sdiv i32 %12, 256, !dbg !17
  %17 = srem i32 %16, 4, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !20
  %21 = sext i32 %17 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #2, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !26
  %28 = sitofp i32 %14 to float, !dbg !27
  %29 = fadd float %28, 5.000000e-01, !dbg !28
  %30 = fmul float %29, 5.000000e-01, !dbg !29
  %31 = fadd float %30, -5.000000e-01, !dbg !30
  %32 = fcmp ogt float %31, 0.000000e+00, !dbg !31
  %33 = select i1 %32, float %31, float 0.000000e+00, !dbg !35
  %34 = fptosi float %33 to i32, !dbg !36
  %35 = tail call i32 @llvm.smin.i32(i32 %34, i32 6), !dbg !37
  %narrow = add nsw i32 %35, 1, !dbg !37
  %36 = sext i32 %narrow to i64, !dbg !37
  %37 = sitofp i32 %.decomposed to float, !dbg !39
  %38 = fadd float %37, 5.000000e-01, !dbg !40
  %39 = fmul float %38, 5.000000e-01, !dbg !41
  %40 = fadd float %39, -5.000000e-01, !dbg !42
  %41 = fcmp ogt float %40, 0.000000e+00, !dbg !43
  %42 = select i1 %41, float %40, float 0.000000e+00, !dbg !45
  %43 = fptosi float %42 to i32, !dbg !46
  %44 = sext i32 %43 to i64, !dbg !47
  %45 = tail call i64 @llvm.smin.i64(i64 %44, i64 6), !dbg !48
  %46 = shl nsw i64 %36, 3, !dbg !50
  %47 = shl nsw i32 %16, 6, !dbg !51
  %48 = sext i32 %47 to i64, !dbg !52
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !53
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 4, !dbg !53
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %46, !dbg !53
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %48, !dbg !53
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !54
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !55
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %44, !dbg !55
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %48, !dbg !55
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !56
  %58 = sitofp i32 %43 to float, !dbg !57
  %59 = fsub float %42, %58, !dbg !58
  %60 = fcmp ogt float %59, 0.000000e+00, !dbg !59
  %61 = select i1 %60, float %59, float 0.000000e+00, !dbg !61
  %62 = fcmp olt float %61, 1.000000e+00, !dbg !62
  %63 = select i1 %62, float %61, float 1.000000e+00, !dbg !64
  %64 = shl i32 %34, 3, !dbg !65
  %65 = add i32 %47, %43, !dbg !66
  %66 = add i32 %65, %64, !dbg !67
  %67 = sext i32 %66 to i64, !dbg !68
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !68
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !69
  %70 = sext i32 %64 to i64, !dbg !70
  %71 = getelementptr float, ptr addrspace(1) %50, i64 %70, !dbg !71
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %48, !dbg !71
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !72
  %74 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !56
  %75 = insertelement <2 x i32> %74, i32 %69, i64 1, !dbg !56
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !56
  %77 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !54
  %78 = insertelement <2 x i32> %77, i32 %73, i64 1, !dbg !54
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !54
  %80 = fsub <2 x float> %79, %76, !dbg !73
  %81 = insertelement <2 x float> poison, float %63, i64 0, !dbg !74
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %83 = fmul <2 x float> %80, %82, !dbg !74
  %84 = fadd <2 x float> %83, %76, !dbg !75
  %85 = extractelement <2 x float> %84, i64 0, !dbg !76
  %86 = extractelement <2 x float> %84, i64 1, !dbg !77
  %87 = fsub float %85, %86, !dbg !76
  %88 = sitofp i32 %34 to float, !dbg !78
  %89 = fsub float %33, %88, !dbg !79
  %90 = fcmp ogt float %89, 0.000000e+00, !dbg !80
  %91 = select i1 %90, float %89, float 0.000000e+00, !dbg !82
  %92 = fcmp olt float %91, 1.000000e+00, !dbg !83
  %93 = select i1 %92, float %91, float 1.000000e+00, !dbg !85
  %94 = fmul float %93, %87, !dbg !86
  %95 = fadd float %86, %94, !dbg !77
  %96 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %97 = insertelement <2 x i32> %96, i32 %25, i64 1, !dbg !20
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !20
  %99 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !22
  %100 = insertelement <2 x i32> %99, i32 %27, i64 1, !dbg !22
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !22
  %102 = fadd <2 x float> %98, %101, !dbg !87
  %shift = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !88
  %103 = fadd <2 x float> %102, %shift, !dbg !88
  %104 = extractelement <2 x float> %103, i64 0, !dbg !88
  %105 = fadd float %104, %95, !dbg !89
  %106 = fcmp olt float %105, 0.000000e+00, !dbg !90
  %107 = select i1 %106, float 0.000000e+00, float %105, !dbg !92
  %108 = bitcast float %105 to i32, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %19, i1 true) #2, !dbg !93
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !94
  %110 = bitcast float %107 to i32, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 true) #2, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciitgo45bhus7qecf6ocwpct3bvgpxnak2ycrwllbjceqm74sczg.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_relu_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_relu_sub_2", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 19, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 40, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 41, column: 19, scope: !7)
!37 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 47, column: 21, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 51, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 52, column: 21, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !49)
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 55, column: 41, scope: !7)
!51 = !DILocation(line: 55, column: 52, scope: !7)
!52 = !DILocation(line: 55, column: 49, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 57, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 57, scope: !7)
!57 = !DILocation(line: 58, column: 21, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !60)
!60 = !DILocation(line: 60, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !60)
!62 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !63)
!63 = !DILocation(line: 62, column: 42, scope: !7)
!64 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !63)
!65 = !DILocation(line: 65, column: 41, scope: !7)
!66 = !DILocation(line: 65, column: 39, scope: !7)
!67 = !DILocation(line: 65, column: 48, scope: !7)
!68 = !DILocation(line: 65, column: 31, scope: !7)
!69 = !DILocation(line: 65, column: 56, scope: !7)
!70 = !DILocation(line: 66, column: 39, scope: !7)
!71 = !DILocation(line: 66, column: 31, scope: !7)
!72 = !DILocation(line: 66, column: 56, scope: !7)
!73 = !DILocation(line: 57, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 64, column: 20, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 19, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !81)
!81 = !DILocation(line: 73, column: 42, scope: !7)
!82 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !81)
!83 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !84)
!84 = !DILocation(line: 74, column: 42, scope: !7)
!85 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !84)
!86 = !DILocation(line: 75, column: 20, scope: !7)
!87 = !DILocation(line: 77, column: 20, scope: !7)
!88 = !DILocation(line: 79, column: 20, scope: !7)
!89 = !DILocation(line: 80, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !91)
!91 = !DILocation(line: 82, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !91)
!93 = !DILocation(line: 83, column: 40, scope: !7)
!94 = !DILocation(line: 84, column: 25, scope: !7)
!95 = !DILocation(line: 84, column: 37, scope: !7)
!96 = !DILocation(line: 84, column: 4, scope: !7)
