; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 16384, !dbg !14
  %14 = mul i32 %13, 16384, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = mul i32 %13, 18304, !dbg !16
  %16 = add i32 %15, %.decomposed, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !19
  %24 = bitcast i32 %20 to float, !dbg !19
  %25 = bitcast i32 %21 to float, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = mul i32 %13, 16768, !dbg !20
  %29 = add i32 %28, %.decomposed, !dbg !21
  %30 = sext i32 %29 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = bitcast i32 %56 to float, !dbg !27
  %61 = fadd float %24, %37, !dbg !28
  %62 = fadd float %25, %38, !dbg !28
  %63 = fadd float %26, %39, !dbg !28
  %64 = fadd float %27, %40, !dbg !28
  %65 = fadd float %61, %47, !dbg !29
  %66 = fadd float %62, %48, !dbg !29
  %67 = fadd float %63, %49, !dbg !29
  %68 = fadd float %64, %50, !dbg !29
  %69 = fadd float %65, %57, !dbg !30
  %70 = fadd float %66, %58, !dbg !30
  %71 = fadd float %67, %59, !dbg !30
  %72 = fadd float %68, %60, !dbg !30
  %73 = mul i32 %13, 19456, !dbg !31
  %74 = add i32 %73, %.decomposed, !dbg !32
  %75 = sext i32 %74 to i64, !dbg !33
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !33
  %77 = bitcast float %69 to i32, !dbg !34
  %78 = bitcast float %70 to i32, !dbg !34
  %79 = bitcast float %71 to i32, !dbg !34
  %80 = bitcast float %72 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %77, i32 %78, i32 %79, i32 %80, ptr addrspace(1) %76, i1 true) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjrgbbnhglgk5yjzg5s57vka2zrjdwk4lpfyalmtbxh3xtythvg2.py", directory: "inductor_cache/jr")
!4 = !{ptr @triton_poi_fused_add_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_26", linkageName: "triton_poi_fused_add_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 41, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 46, scope: !7)
!20 = !DILocation(line: 27, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 46, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 46, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 46, scope: !7)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 47, scope: !7)
!35 = !DILocation(line: 33, column: 4, scope: !7)
