; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %13 = sdiv i32 %10, 4, !dbg !15
  %14 = srem i32 %11, 4, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %15 = sdiv i32 %.frozen, 64, !dbg !17
  %16 = mul i32 %15, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = sext i32 %10 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !20
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !20
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !20
  %22 = add i32 %10, -10, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = icmp sgt i32 %14, 0, !dbg !23
  %26 = add i32 %10, -9, !dbg !24
  %27 = add i32 %10, -8, !dbg !24
  %28 = sext i32 %26 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = sext i32 %27 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = add nsw i32 %14, 1, !dbg !26
  %33 = icmp ult i32 %32, 4, !dbg !26
  %34 = add i32 %10, -7, !dbg !27
  %35 = add i32 %10, -6, !dbg !27
  %36 = sext i32 %34 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = sext i32 %35 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = add i32 %10, -5, !dbg !29
  %41 = add i32 %10, -4, !dbg !29
  %42 = sext i32 %40 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = add i32 %10, -3, !dbg !31
  %47 = add i32 %10, -2, !dbg !31
  %48 = sext i32 %46 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = sext i32 %47 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !32
  %52 = add i32 %10, -1, !dbg !33
  %53 = sext i32 %52 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !34
  %55 = sext i32 %11 to i64, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !34
  %57 = getelementptr i8, ptr addrspace(1) %56, i64 -4, !dbg !34
  %58 = add i32 %10, 2, !dbg !35
  %59 = sext i32 %58 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !36
  %61 = add i32 %10, 3, !dbg !37
  %62 = add i32 %10, 4, !dbg !37
  %63 = sext i32 %61 to i64, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !38
  %65 = sext i32 %62 to i64, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !38
  %67 = add i32 %10, 5, !dbg !39
  %68 = add i32 %10, 6, !dbg !39
  %69 = sext i32 %67 to i64, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !40
  %71 = sext i32 %68 to i64, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !40
  %73 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !41
  %74 = insertelement <2 x i32> %73, i32 %10, i64 1, !dbg !41
  %75 = srem <2 x i32> %74, splat (i32 4), !dbg !41
  %76 = extractelement <2 x i32> %75, i64 0, !dbg !42
  %77 = icmp sgt i32 %76, 1, !dbg !43
  %78 = extractelement <2 x i32> %75, i64 1, !dbg !44
  %79 = icmp sgt i32 %78, 1, !dbg !45
  %80 = and i1 %79, %77, !dbg !46
  %81 = and i1 %12, %80, !dbg !47
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #1, !dbg !48
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !48
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !48
  %85 = bitcast i32 %83 to float, !dbg !48
  %86 = bitcast i32 %84 to float, !dbg !48
  %87 = icmp sgt i32 %78, 0, !dbg !23
  %88 = and i1 %87, %77, !dbg !49
  %89 = and i1 %25, %77, !dbg !49
  %90 = and i1 %12, %88, !dbg !50
  %91 = and i1 %12, %89, !dbg !50
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %90, i32 -8388608, i1 %90) #1, !dbg !51
  %93 = bitcast i32 %92 to float, !dbg !51
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %91, i32 -8388608, i1 %91) #1, !dbg !51
  %95 = bitcast i32 %94 to float, !dbg !51
  %96 = fcmp ogt float %93, %85, !dbg !52
  %97 = fcmp ogt float %95, %86, !dbg !52
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !56
  %99 = fcmp uno float %95, 0.000000e+00, !dbg !56
  %100 = or i1 %96, %98, !dbg !57
  %101 = or i1 %97, %99, !dbg !57
  %102 = select i1 %100, float %93, float %85, !dbg !58
  %103 = select i1 %101, float %95, float %86, !dbg !58
  %104 = icmp sgt i32 %78, -1, !dbg !59
  %105 = and i1 %104, %77, !dbg !60
  %106 = and i1 %12, %105, !dbg !61
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #1, !dbg !62
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !62
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !62
  %110 = bitcast i32 %108 to float, !dbg !62
  %111 = bitcast i32 %109 to float, !dbg !62
  %112 = fcmp olt float %102, %110, !dbg !63
  %113 = fcmp olt float %103, %111, !dbg !63
  %114 = fcmp uno float %110, 0.000000e+00, !dbg !65
  %115 = fcmp uno float %111, 0.000000e+00, !dbg !65
  %116 = or i1 %112, %114, !dbg !66
  %117 = or i1 %115, %113, !dbg !66
  %118 = select i1 %116, float %110, float %102, !dbg !67
  %119 = select i1 %117, float %111, float %103, !dbg !67
  %120 = icmp ult i32 %78, 4, !dbg !26
  %121 = and i1 %120, %77, !dbg !68
  %122 = and i1 %33, %77, !dbg !68
  %123 = and i1 %12, %121, !dbg !69
  %124 = and i1 %12, %122, !dbg !69
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %123, i32 -8388608, i1 %123) #1, !dbg !70
  %126 = bitcast i32 %125 to float, !dbg !70
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %124, i32 -8388608, i1 %124) #1, !dbg !70
  %128 = bitcast i32 %127 to float, !dbg !70
  %129 = fcmp olt float %118, %126, !dbg !71
  %130 = fcmp olt float %119, %128, !dbg !71
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !73
  %132 = fcmp uno float %128, 0.000000e+00, !dbg !73
  %133 = or i1 %131, %129, !dbg !74
  %134 = or i1 %132, %130, !dbg !74
  %135 = select i1 %133, float %126, float %118, !dbg !75
  %136 = select i1 %134, float %128, float %119, !dbg !75
  %137 = add nsw <2 x i32> %75, splat (i32 2), !dbg !76
  %138 = extractelement <2 x i32> %137, i64 1, !dbg !77
  %139 = icmp ult i32 %138, 4, !dbg !78
  %140 = and i1 %77, %139, !dbg !79
  %141 = and i1 %12, %140, !dbg !80
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141) #1, !dbg !81
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !81
  %144 = extractvalue { i32, i32 } %142, 1, !dbg !81
  %145 = bitcast i32 %143 to float, !dbg !81
  %146 = bitcast i32 %144 to float, !dbg !81
  %147 = fcmp olt float %135, %145, !dbg !82
  %148 = fcmp olt float %136, %146, !dbg !82
  %149 = fcmp uno float %145, 0.000000e+00, !dbg !84
  %150 = fcmp uno float %146, 0.000000e+00, !dbg !84
  %151 = or i1 %149, %147, !dbg !85
  %152 = or i1 %150, %148, !dbg !85
  %153 = select i1 %151, float %145, float %135, !dbg !86
  %154 = select i1 %152, float %146, float %136, !dbg !86
  %155 = icmp sgt i32 %76, 0, !dbg !87
  %156 = and i1 %79, %155, !dbg !88
  %157 = and i1 %12, %156, !dbg !89
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %157, i32 -8388608, i1 %157, i32 -8388608, i1 %157) #1, !dbg !90
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !90
  %160 = extractvalue { i32, i32 } %158, 1, !dbg !90
  %161 = bitcast i32 %159 to float, !dbg !90
  %162 = bitcast i32 %160 to float, !dbg !90
  %163 = fcmp olt float %153, %161, !dbg !91
  %164 = fcmp olt float %154, %162, !dbg !91
  %165 = fcmp uno float %161, 0.000000e+00, !dbg !93
  %166 = fcmp uno float %162, 0.000000e+00, !dbg !93
  %167 = or i1 %165, %163, !dbg !94
  %168 = or i1 %166, %164, !dbg !94
  %169 = select i1 %167, float %161, float %153, !dbg !95
  %170 = select i1 %168, float %162, float %154, !dbg !95
  %171 = and i1 %87, %155, !dbg !96
  %172 = and i1 %25, %155, !dbg !96
  %173 = and i1 %12, %171, !dbg !97
  %174 = and i1 %12, %172, !dbg !97
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %173, i32 -8388608, i1 %173) #1, !dbg !98
  %176 = bitcast i32 %175 to float, !dbg !98
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %174, i32 -8388608, i1 %174) #1, !dbg !98
  %178 = bitcast i32 %177 to float, !dbg !98
  %179 = fcmp olt float %169, %176, !dbg !99
  %180 = fcmp olt float %170, %178, !dbg !99
  %181 = fcmp uno float %176, 0.000000e+00, !dbg !101
  %182 = fcmp uno float %178, 0.000000e+00, !dbg !101
  %183 = or i1 %181, %179, !dbg !102
  %184 = or i1 %182, %180, !dbg !102
  %185 = select i1 %183, float %176, float %169, !dbg !103
  %186 = select i1 %184, float %178, float %170, !dbg !103
  %187 = and i1 %104, %155, !dbg !104
  %188 = and i1 %12, %187, !dbg !105
  %189 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188) #1, !dbg !106
  %190 = extractvalue { i32, i32 } %189, 0, !dbg !106
  %191 = extractvalue { i32, i32 } %189, 1, !dbg !106
  %192 = bitcast i32 %190 to float, !dbg !106
  %193 = bitcast i32 %191 to float, !dbg !106
  %194 = fcmp olt float %185, %192, !dbg !107
  %195 = fcmp olt float %186, %193, !dbg !107
  %196 = fcmp uno float %192, 0.000000e+00, !dbg !109
  %197 = fcmp uno float %193, 0.000000e+00, !dbg !109
  %198 = or i1 %196, %194, !dbg !110
  %199 = or i1 %197, %195, !dbg !110
  %200 = select i1 %198, float %192, float %185, !dbg !111
  %201 = select i1 %199, float %193, float %186, !dbg !111
  %202 = and i1 %120, %155, !dbg !112
  %203 = and i1 %33, %155, !dbg !112
  %204 = and i1 %12, %202, !dbg !113
  %205 = and i1 %12, %203, !dbg !113
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %204, i32 -8388608, i1 %204) #1, !dbg !114
  %207 = bitcast i32 %206 to float, !dbg !114
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %205, i32 -8388608, i1 %205) #1, !dbg !114
  %209 = bitcast i32 %208 to float, !dbg !114
  %210 = fcmp olt float %200, %207, !dbg !115
  %211 = fcmp olt float %201, %209, !dbg !115
  %212 = fcmp uno float %207, 0.000000e+00, !dbg !117
  %213 = fcmp uno float %209, 0.000000e+00, !dbg !117
  %214 = or i1 %212, %210, !dbg !118
  %215 = or i1 %213, %211, !dbg !118
  %216 = select i1 %214, float %207, float %200, !dbg !119
  %217 = select i1 %215, float %209, float %201, !dbg !119
  %218 = and i1 %155, %139, !dbg !120
  %219 = and i1 %12, %218, !dbg !121
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219) #1, !dbg !122
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !122
  %222 = extractvalue { i32, i32 } %220, 1, !dbg !122
  %223 = bitcast i32 %221 to float, !dbg !122
  %224 = bitcast i32 %222 to float, !dbg !122
  %225 = fcmp olt float %216, %223, !dbg !123
  %226 = fcmp olt float %217, %224, !dbg !123
  %227 = fcmp uno float %223, 0.000000e+00, !dbg !125
  %228 = fcmp uno float %224, 0.000000e+00, !dbg !125
  %229 = or i1 %227, %225, !dbg !126
  %230 = or i1 %228, %226, !dbg !126
  %231 = select i1 %229, float %223, float %216, !dbg !127
  %232 = select i1 %230, float %224, float %217, !dbg !127
  %233 = icmp sgt i32 %76, -1, !dbg !128
  %234 = and i1 %79, %233, !dbg !129
  %235 = and i1 %12, %234, !dbg !130
  %236 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %235, i32 -8388608, i1 %235, i32 -8388608, i1 %235) #1, !dbg !131
  %237 = extractvalue { i32, i32 } %236, 0, !dbg !131
  %238 = extractvalue { i32, i32 } %236, 1, !dbg !131
  %239 = bitcast i32 %237 to float, !dbg !131
  %240 = bitcast i32 %238 to float, !dbg !131
  %241 = fcmp olt float %231, %239, !dbg !132
  %242 = fcmp olt float %232, %240, !dbg !132
  %243 = fcmp uno float %239, 0.000000e+00, !dbg !134
  %244 = fcmp uno float %240, 0.000000e+00, !dbg !134
  %245 = or i1 %243, %241, !dbg !135
  %246 = or i1 %244, %242, !dbg !135
  %247 = select i1 %245, float %239, float %231, !dbg !136
  %248 = select i1 %246, float %240, float %232, !dbg !136
  %249 = and i1 %87, %233, !dbg !137
  %250 = and i1 %25, %233, !dbg !137
  %251 = and i1 %12, %249, !dbg !138
  %252 = and i1 %12, %250, !dbg !138
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %251, i32 -8388608, i1 %251) #1, !dbg !139
  %254 = bitcast i32 %253 to float, !dbg !139
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %252, i32 -8388608, i1 %252) #1, !dbg !139
  %256 = bitcast i32 %255 to float, !dbg !139
  %257 = fcmp olt float %247, %254, !dbg !140
  %258 = fcmp olt float %248, %256, !dbg !140
  %259 = fcmp uno float %254, 0.000000e+00, !dbg !142
  %260 = fcmp uno float %256, 0.000000e+00, !dbg !142
  %261 = or i1 %259, %257, !dbg !143
  %262 = or i1 %260, %258, !dbg !143
  %263 = select i1 %261, float %254, float %247, !dbg !144
  %264 = select i1 %262, float %256, float %248, !dbg !144
  %265 = or i32 %76, %78, !dbg !145
  %266 = icmp sgt i32 %265, -1, !dbg !145
  %267 = and i1 %12, %266, !dbg !146
  %268 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %267, i32 -8388608, i1 %267, i32 -8388608, i1 %267) #1, !dbg !147
  %269 = extractvalue { i32, i32 } %268, 0, !dbg !147
  %270 = extractvalue { i32, i32 } %268, 1, !dbg !147
  %271 = bitcast i32 %269 to float, !dbg !147
  %272 = bitcast i32 %270 to float, !dbg !147
  %273 = fcmp olt float %263, %271, !dbg !148
  %274 = fcmp olt float %264, %272, !dbg !148
  %275 = fcmp uno float %271, 0.000000e+00, !dbg !150
  %276 = fcmp uno float %272, 0.000000e+00, !dbg !150
  %277 = or i1 %275, %273, !dbg !151
  %278 = or i1 %276, %274, !dbg !151
  %279 = select i1 %277, float %271, float %263, !dbg !152
  %280 = select i1 %278, float %272, float %264, !dbg !152
  %281 = and i1 %120, %233, !dbg !153
  %282 = and i1 %33, %233, !dbg !153
  %283 = and i1 %12, %281, !dbg !154
  %284 = and i1 %12, %282, !dbg !154
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %283, i32 -8388608, i1 %283) #1, !dbg !155
  %286 = bitcast i32 %285 to float, !dbg !155
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %284, i32 -8388608, i1 %284) #1, !dbg !155
  %288 = bitcast i32 %287 to float, !dbg !155
  %289 = fcmp olt float %279, %286, !dbg !156
  %290 = fcmp olt float %280, %288, !dbg !156
  %291 = fcmp uno float %286, 0.000000e+00, !dbg !158
  %292 = fcmp uno float %288, 0.000000e+00, !dbg !158
  %293 = or i1 %291, %289, !dbg !159
  %294 = or i1 %292, %290, !dbg !159
  %295 = select i1 %293, float %286, float %279, !dbg !160
  %296 = select i1 %294, float %288, float %280, !dbg !160
  %297 = and i1 %233, %139, !dbg !161
  %298 = and i1 %12, %297, !dbg !162
  %299 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %298, i32 -8388608, i1 %298, i32 -8388608, i1 %298) #1, !dbg !163
  %300 = extractvalue { i32, i32 } %299, 0, !dbg !163
  %301 = extractvalue { i32, i32 } %299, 1, !dbg !163
  %302 = bitcast i32 %300 to float, !dbg !163
  %303 = bitcast i32 %301 to float, !dbg !163
  %304 = fcmp olt float %295, %302, !dbg !164
  %305 = fcmp olt float %296, %303, !dbg !164
  %306 = fcmp uno float %302, 0.000000e+00, !dbg !166
  %307 = fcmp uno float %303, 0.000000e+00, !dbg !166
  %308 = or i1 %306, %304, !dbg !167
  %309 = or i1 %307, %305, !dbg !167
  %310 = select i1 %308, float %302, float %295, !dbg !168
  %311 = select i1 %309, float %303, float %296, !dbg !168
  %312 = add nsw i32 %76, 1, !dbg !42
  %313 = icmp ult i32 %312, 4, !dbg !42
  %314 = and i1 %79, %313, !dbg !169
  %315 = and i1 %12, %314, !dbg !170
  %316 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %315, i32 -8388608, i1 %315, i32 -8388608, i1 %315) #1, !dbg !171
  %317 = extractvalue { i32, i32 } %316, 0, !dbg !171
  %318 = extractvalue { i32, i32 } %316, 1, !dbg !171
  %319 = bitcast i32 %317 to float, !dbg !171
  %320 = bitcast i32 %318 to float, !dbg !171
  %321 = fcmp olt float %310, %319, !dbg !172
  %322 = fcmp olt float %311, %320, !dbg !172
  %323 = fcmp uno float %319, 0.000000e+00, !dbg !174
  %324 = fcmp uno float %320, 0.000000e+00, !dbg !174
  %325 = or i1 %323, %321, !dbg !175
  %326 = or i1 %324, %322, !dbg !175
  %327 = select i1 %325, float %319, float %310, !dbg !176
  %328 = select i1 %326, float %320, float %311, !dbg !176
  %329 = and i1 %87, %313, !dbg !177
  %330 = and i1 %25, %313, !dbg !177
  %331 = and i1 %12, %329, !dbg !178
  %332 = and i1 %12, %330, !dbg !178
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %331, i32 -8388608, i1 %331) #1, !dbg !179
  %334 = bitcast i32 %333 to float, !dbg !179
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %332, i32 -8388608, i1 %332) #1, !dbg !179
  %336 = bitcast i32 %335 to float, !dbg !179
  %337 = fcmp olt float %327, %334, !dbg !180
  %338 = fcmp olt float %328, %336, !dbg !180
  %339 = fcmp uno float %334, 0.000000e+00, !dbg !182
  %340 = fcmp uno float %336, 0.000000e+00, !dbg !182
  %341 = or i1 %339, %337, !dbg !183
  %342 = or i1 %340, %338, !dbg !183
  %343 = select i1 %341, float %334, float %327, !dbg !184
  %344 = select i1 %342, float %336, float %328, !dbg !184
  %345 = and i1 %104, %313, !dbg !185
  %346 = and i1 %12, %345, !dbg !186
  %347 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %346, i32 -8388608, i1 %346, i32 -8388608, i1 %346) #1, !dbg !187
  %348 = extractvalue { i32, i32 } %347, 0, !dbg !187
  %349 = extractvalue { i32, i32 } %347, 1, !dbg !187
  %350 = bitcast i32 %348 to float, !dbg !187
  %351 = bitcast i32 %349 to float, !dbg !187
  %352 = fcmp olt float %343, %350, !dbg !188
  %353 = fcmp olt float %344, %351, !dbg !188
  %354 = fcmp uno float %350, 0.000000e+00, !dbg !190
  %355 = fcmp uno float %351, 0.000000e+00, !dbg !190
  %356 = or i1 %354, %352, !dbg !191
  %357 = or i1 %355, %353, !dbg !191
  %358 = select i1 %356, float %350, float %343, !dbg !192
  %359 = select i1 %357, float %351, float %344, !dbg !192
  %360 = or i32 %312, %78, !dbg !193
  %361 = icmp ult i32 %360, 4, !dbg !193
  %362 = or i32 %312, %32, !dbg !193
  %363 = icmp ult i32 %362, 4, !dbg !193
  %364 = and i1 %12, %361, !dbg !194
  %365 = and i1 %12, %363, !dbg !194
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %364, i32 -8388608, i1 %364) #1, !dbg !195
  %367 = bitcast i32 %366 to float, !dbg !195
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %365, i32 -8388608, i1 %365) #1, !dbg !195
  %369 = bitcast i32 %368 to float, !dbg !195
  %370 = fcmp olt float %358, %367, !dbg !196
  %371 = fcmp olt float %359, %369, !dbg !196
  %372 = fcmp uno float %367, 0.000000e+00, !dbg !198
  %373 = fcmp uno float %369, 0.000000e+00, !dbg !198
  %374 = or i1 %372, %370, !dbg !199
  %375 = or i1 %373, %371, !dbg !199
  %376 = select i1 %374, float %367, float %358, !dbg !200
  %377 = select i1 %375, float %369, float %359, !dbg !200
  %378 = or i32 %312, %138, !dbg !201
  %379 = icmp ult i32 %378, 4, !dbg !201
  %380 = and i1 %12, %379, !dbg !202
  %381 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %380, i32 -8388608, i1 %380, i32 -8388608, i1 %380) #1, !dbg !203
  %382 = extractvalue { i32, i32 } %381, 0, !dbg !203
  %383 = extractvalue { i32, i32 } %381, 1, !dbg !203
  %384 = bitcast i32 %382 to float, !dbg !203
  %385 = bitcast i32 %383 to float, !dbg !203
  %386 = fcmp olt float %376, %384, !dbg !204
  %387 = fcmp olt float %377, %385, !dbg !204
  %388 = fcmp uno float %384, 0.000000e+00, !dbg !206
  %389 = fcmp uno float %385, 0.000000e+00, !dbg !206
  %390 = or i1 %388, %386, !dbg !207
  %391 = or i1 %389, %387, !dbg !207
  %392 = select i1 %390, float %384, float %376, !dbg !208
  %393 = select i1 %391, float %385, float %377, !dbg !208
  %394 = extractelement <2 x i32> %137, i64 0, !dbg !77
  %395 = icmp ult i32 %394, 4, !dbg !76
  %396 = and i1 %79, %395, !dbg !209
  %397 = and i1 %12, %396, !dbg !210
  %398 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %397, i32 -8388608, i1 %397, i32 -8388608, i1 %397) #1, !dbg !211
  %399 = extractvalue { i32, i32 } %398, 0, !dbg !211
  %400 = extractvalue { i32, i32 } %398, 1, !dbg !211
  %401 = bitcast i32 %399 to float, !dbg !211
  %402 = bitcast i32 %400 to float, !dbg !211
  %403 = fcmp olt float %392, %401, !dbg !212
  %404 = fcmp olt float %393, %402, !dbg !212
  %405 = fcmp uno float %401, 0.000000e+00, !dbg !214
  %406 = fcmp uno float %402, 0.000000e+00, !dbg !214
  %407 = or i1 %405, %403, !dbg !215
  %408 = or i1 %406, %404, !dbg !215
  %409 = select i1 %407, float %401, float %392, !dbg !216
  %410 = select i1 %408, float %402, float %393, !dbg !216
  %411 = and i1 %87, %395, !dbg !217
  %412 = and i1 %25, %395, !dbg !217
  %413 = add i32 %10, 7, !dbg !218
  %414 = add i32 %10, 8, !dbg !218
  %415 = sext i32 %413 to i64, !dbg !219
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !219
  %417 = sext i32 %414 to i64, !dbg !219
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !219
  %419 = and i1 %12, %411, !dbg !220
  %420 = and i1 %12, %412, !dbg !220
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %416, i1 %419, i32 -8388608, i1 %419) #1, !dbg !221
  %422 = bitcast i32 %421 to float, !dbg !221
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %418, i1 %420, i32 -8388608, i1 %420) #1, !dbg !221
  %424 = bitcast i32 %423 to float, !dbg !221
  %425 = fcmp olt float %409, %422, !dbg !222
  %426 = fcmp olt float %410, %424, !dbg !222
  %427 = fcmp uno float %422, 0.000000e+00, !dbg !224
  %428 = fcmp uno float %424, 0.000000e+00, !dbg !224
  %429 = or i1 %427, %425, !dbg !225
  %430 = or i1 %428, %426, !dbg !225
  %431 = select i1 %429, float %422, float %409, !dbg !226
  %432 = select i1 %430, float %424, float %410, !dbg !226
  %433 = and i1 %104, %395, !dbg !227
  %434 = and i1 %12, %433, !dbg !228
  %435 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %418, i1 %434, i32 -8388608, i1 %434, i32 -8388608, i1 %434) #1, !dbg !229
  %436 = extractvalue { i32, i32 } %435, 0, !dbg !229
  %437 = extractvalue { i32, i32 } %435, 1, !dbg !229
  %438 = bitcast i32 %436 to float, !dbg !229
  %439 = bitcast i32 %437 to float, !dbg !229
  %440 = fcmp olt float %431, %438, !dbg !230
  %441 = fcmp olt float %432, %439, !dbg !230
  %442 = fcmp uno float %438, 0.000000e+00, !dbg !232
  %443 = fcmp uno float %439, 0.000000e+00, !dbg !232
  %444 = or i1 %442, %440, !dbg !233
  %445 = or i1 %443, %441, !dbg !233
  %446 = select i1 %444, float %438, float %431, !dbg !234
  %447 = select i1 %445, float %439, float %432, !dbg !234
  %448 = or i32 %394, %78, !dbg !44
  %449 = icmp ult i32 %448, 4, !dbg !44
  %450 = or i32 %394, %32, !dbg !44
  %451 = icmp ult i32 %450, 4, !dbg !44
  %452 = add i32 %10, 9, !dbg !235
  %453 = add i32 %10, 10, !dbg !235
  %454 = sext i32 %452 to i64, !dbg !236
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !236
  %456 = sext i32 %453 to i64, !dbg !236
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !236
  %458 = and i1 %12, %449, !dbg !237
  %459 = and i1 %12, %451, !dbg !237
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %455, i1 %458, i32 -8388608, i1 %458) #1, !dbg !238
  %461 = bitcast i32 %460 to float, !dbg !238
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %459, i32 -8388608, i1 %459) #1, !dbg !238
  %463 = bitcast i32 %462 to float, !dbg !238
  %464 = fcmp olt float %446, %461, !dbg !239
  %465 = fcmp olt float %447, %463, !dbg !239
  %466 = fcmp uno float %461, 0.000000e+00, !dbg !241
  %467 = fcmp uno float %463, 0.000000e+00, !dbg !241
  %468 = or i1 %466, %464, !dbg !242
  %469 = or i1 %467, %465, !dbg !242
  %470 = select i1 %468, float %461, float %446, !dbg !243
  %471 = select i1 %469, float %463, float %447, !dbg !243
  %472 = or i32 %394, %138, !dbg !77
  %473 = icmp ult i32 %472, 4, !dbg !77
  %474 = and i1 %12, %473, !dbg !244
  %475 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %457, i1 %474, i32 -8388608, i1 %474, i32 -8388608, i1 %474) #1, !dbg !245
  %476 = extractvalue { i32, i32 } %475, 0, !dbg !245
  %477 = extractvalue { i32, i32 } %475, 1, !dbg !245
  %478 = bitcast i32 %476 to float, !dbg !245
  %479 = bitcast i32 %477 to float, !dbg !245
  %480 = fcmp olt float %470, %478, !dbg !246
  %481 = fcmp olt float %471, %479, !dbg !246
  %482 = fcmp uno float %478, 0.000000e+00, !dbg !248
  %483 = fcmp uno float %479, 0.000000e+00, !dbg !248
  %484 = or i1 %482, %480, !dbg !249
  %485 = or i1 %483, %481, !dbg !249
  %486 = shl i32 %15, 8, !dbg !250
  %487 = add i32 %486, %.decomposed, !dbg !251
  %488 = sext i32 %487 to i64, !dbg !252
  %489 = getelementptr float, ptr addrspace(1) %1, i64 %488, !dbg !252
  %490 = bitcast float %470 to i32, !dbg !253
  %491 = select i1 %484, i32 %476, i32 %490, !dbg !254
  %492 = bitcast float %471 to i32, !dbg !253
  %493 = select i1 %485, i32 %477, i32 %492, !dbg !254
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %491, i32 %493, ptr addrspace(1) %489, i1 %12) #1, !dbg !253
  %494 = getelementptr float, ptr addrspace(1) %2, i64 %488, !dbg !255
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %20, i32 %21, ptr addrspace(1) %494, i1 %12) #1, !dbg !256
  ret void, !dbg !257
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crqaslcpxb4eqwbbvnv3rljk6j73fhug7r433zgeolwymvo3v5wj.py", directory: "inductor_cache/rq")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 32, scope: !7)
!20 = !DILocation(line: 29, column: 37, scope: !7)
!21 = !DILocation(line: 41, column: 39, scope: !7)
!22 = !DILocation(line: 41, column: 31, scope: !7)
!23 = !DILocation(line: 43, column: 21, scope: !7)
!24 = !DILocation(line: 47, column: 38, scope: !7)
!25 = !DILocation(line: 47, column: 31, scope: !7)
!26 = !DILocation(line: 59, column: 20, scope: !7)
!27 = !DILocation(line: 61, column: 38, scope: !7)
!28 = !DILocation(line: 61, column: 31, scope: !7)
!29 = !DILocation(line: 78, column: 38, scope: !7)
!30 = !DILocation(line: 78, column: 31, scope: !7)
!31 = !DILocation(line: 84, column: 38, scope: !7)
!32 = !DILocation(line: 84, column: 31, scope: !7)
!33 = !DILocation(line: 97, column: 38, scope: !7)
!34 = !DILocation(line: 97, column: 31, scope: !7)
!35 = !DILocation(line: 103, column: 35, scope: !7)
!36 = !DILocation(line: 103, column: 31, scope: !7)
!37 = !DILocation(line: 116, column: 35, scope: !7)
!38 = !DILocation(line: 116, column: 31, scope: !7)
!39 = !DILocation(line: 122, column: 35, scope: !7)
!40 = !DILocation(line: 122, column: 31, scope: !7)
!41 = !DILocation(line: 24, column: 26, scope: !7)
!42 = !DILocation(line: 111, column: 20, scope: !7)
!43 = !DILocation(line: 32, column: 19, scope: !7)
!44 = !DILocation(line: 140, column: 22, scope: !7)
!45 = !DILocation(line: 37, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 19, scope: !7)
!47 = !DILocation(line: 41, column: 52, scope: !7)
!48 = !DILocation(line: 41, column: 44, scope: !7)
!49 = !DILocation(line: 46, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 51, scope: !7)
!51 = !DILocation(line: 47, column: 43, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 48, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 50, column: 21, scope: !7)
!60 = !DILocation(line: 53, column: 19, scope: !7)
!61 = !DILocation(line: 54, column: 51, scope: !7)
!62 = !DILocation(line: 54, column: 43, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !64)
!64 = !DILocation(line: 55, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !64)
!68 = !DILocation(line: 60, column: 19, scope: !7)
!69 = !DILocation(line: 61, column: 51, scope: !7)
!70 = !DILocation(line: 61, column: 43, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !72)
!72 = !DILocation(line: 62, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !72)
!76 = !DILocation(line: 130, column: 21, scope: !7)
!77 = !DILocation(line: 143, column: 22, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 67, column: 19, scope: !7)
!80 = !DILocation(line: 68, column: 51, scope: !7)
!81 = !DILocation(line: 68, column: 43, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !83)
!83 = !DILocation(line: 69, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !83)
!87 = !DILocation(line: 71, column: 21, scope: !7)
!88 = !DILocation(line: 74, column: 20, scope: !7)
!89 = !DILocation(line: 75, column: 51, scope: !7)
!90 = !DILocation(line: 75, column: 43, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !92)
!92 = !DILocation(line: 76, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !92)
!96 = !DILocation(line: 77, column: 20, scope: !7)
!97 = !DILocation(line: 78, column: 51, scope: !7)
!98 = !DILocation(line: 78, column: 43, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !100)
!100 = !DILocation(line: 79, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !100)
!104 = !DILocation(line: 80, column: 20, scope: !7)
!105 = !DILocation(line: 81, column: 51, scope: !7)
!106 = !DILocation(line: 81, column: 43, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !108)
!108 = !DILocation(line: 82, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !108)
!112 = !DILocation(line: 83, column: 20, scope: !7)
!113 = !DILocation(line: 84, column: 51, scope: !7)
!114 = !DILocation(line: 84, column: 43, scope: !7)
!115 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !116)
!116 = !DILocation(line: 85, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !116)
!120 = !DILocation(line: 86, column: 20, scope: !7)
!121 = !DILocation(line: 87, column: 51, scope: !7)
!122 = !DILocation(line: 87, column: 43, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !124)
!124 = !DILocation(line: 88, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !124)
!128 = !DILocation(line: 90, column: 21, scope: !7)
!129 = !DILocation(line: 93, column: 20, scope: !7)
!130 = !DILocation(line: 94, column: 51, scope: !7)
!131 = !DILocation(line: 94, column: 43, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !133)
!133 = !DILocation(line: 95, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !133)
!137 = !DILocation(line: 96, column: 20, scope: !7)
!138 = !DILocation(line: 97, column: 51, scope: !7)
!139 = !DILocation(line: 97, column: 43, scope: !7)
!140 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !141)
!141 = !DILocation(line: 98, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !141)
!145 = !DILocation(line: 99, column: 20, scope: !7)
!146 = !DILocation(line: 100, column: 44, scope: !7)
!147 = !DILocation(line: 100, column: 36, scope: !7)
!148 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !149)
!149 = !DILocation(line: 101, column: 42, scope: !7)
!150 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !149)
!151 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !149)
!152 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !149)
!153 = !DILocation(line: 102, column: 20, scope: !7)
!154 = !DILocation(line: 103, column: 48, scope: !7)
!155 = !DILocation(line: 103, column: 40, scope: !7)
!156 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !157)
!157 = !DILocation(line: 104, column: 42, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !157)
!159 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !157)
!160 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !157)
!161 = !DILocation(line: 105, column: 20, scope: !7)
!162 = !DILocation(line: 106, column: 48, scope: !7)
!163 = !DILocation(line: 106, column: 40, scope: !7)
!164 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !165)
!165 = !DILocation(line: 107, column: 42, scope: !7)
!166 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !165)
!167 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !165)
!168 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !165)
!169 = !DILocation(line: 112, column: 20, scope: !7)
!170 = !DILocation(line: 113, column: 48, scope: !7)
!171 = !DILocation(line: 113, column: 40, scope: !7)
!172 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !173)
!173 = !DILocation(line: 114, column: 42, scope: !7)
!174 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !173)
!175 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !173)
!176 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !173)
!177 = !DILocation(line: 115, column: 20, scope: !7)
!178 = !DILocation(line: 116, column: 48, scope: !7)
!179 = !DILocation(line: 116, column: 40, scope: !7)
!180 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !181)
!181 = !DILocation(line: 117, column: 42, scope: !7)
!182 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !181)
!183 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !181)
!184 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !181)
!185 = !DILocation(line: 118, column: 20, scope: !7)
!186 = !DILocation(line: 119, column: 48, scope: !7)
!187 = !DILocation(line: 119, column: 40, scope: !7)
!188 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !189)
!189 = !DILocation(line: 120, column: 42, scope: !7)
!190 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !189)
!191 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !189)
!192 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !189)
!193 = !DILocation(line: 121, column: 20, scope: !7)
!194 = !DILocation(line: 122, column: 48, scope: !7)
!195 = !DILocation(line: 122, column: 40, scope: !7)
!196 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !197)
!197 = !DILocation(line: 123, column: 42, scope: !7)
!198 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !197)
!199 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !197)
!200 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !197)
!201 = !DILocation(line: 124, column: 20, scope: !7)
!202 = !DILocation(line: 125, column: 48, scope: !7)
!203 = !DILocation(line: 125, column: 40, scope: !7)
!204 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !205)
!205 = !DILocation(line: 126, column: 42, scope: !7)
!206 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !205)
!207 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !205)
!208 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !205)
!209 = !DILocation(line: 131, column: 22, scope: !7)
!210 = !DILocation(line: 132, column: 50, scope: !7)
!211 = !DILocation(line: 132, column: 41, scope: !7)
!212 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !213)
!213 = !DILocation(line: 133, column: 44, scope: !7)
!214 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !213)
!215 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !213)
!216 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !213)
!217 = !DILocation(line: 134, column: 22, scope: !7)
!218 = !DILocation(line: 135, column: 36, scope: !7)
!219 = !DILocation(line: 135, column: 32, scope: !7)
!220 = !DILocation(line: 135, column: 50, scope: !7)
!221 = !DILocation(line: 135, column: 41, scope: !7)
!222 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !223)
!223 = !DILocation(line: 136, column: 44, scope: !7)
!224 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !223)
!225 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !223)
!226 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !223)
!227 = !DILocation(line: 137, column: 22, scope: !7)
!228 = !DILocation(line: 138, column: 50, scope: !7)
!229 = !DILocation(line: 138, column: 41, scope: !7)
!230 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !231)
!231 = !DILocation(line: 139, column: 44, scope: !7)
!232 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !231)
!233 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !231)
!234 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !231)
!235 = !DILocation(line: 141, column: 36, scope: !7)
!236 = !DILocation(line: 141, column: 32, scope: !7)
!237 = !DILocation(line: 141, column: 50, scope: !7)
!238 = !DILocation(line: 141, column: 41, scope: !7)
!239 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !240)
!240 = !DILocation(line: 142, column: 44, scope: !7)
!241 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !240)
!242 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !240)
!243 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !240)
!244 = !DILocation(line: 144, column: 51, scope: !7)
!245 = !DILocation(line: 144, column: 42, scope: !7)
!246 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !247)
!247 = !DILocation(line: 145, column: 44, scope: !7)
!248 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !247)
!249 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !247)
!250 = !DILocation(line: 146, column: 34, scope: !7)
!251 = !DILocation(line: 146, column: 30, scope: !7)
!252 = !DILocation(line: 146, column: 25, scope: !7)
!253 = !DILocation(line: 146, column: 47, scope: !7)
!254 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !247)
!255 = !DILocation(line: 147, column: 25, scope: !7)
!256 = !DILocation(line: 147, column: 47, scope: !7)
!257 = !DILocation(line: 147, column: 4, scope: !7)
