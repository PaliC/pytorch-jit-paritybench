; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #3, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #3, !dbg !12
  %9 = mul i32 %8, %7, !dbg !13
  %10 = add i32 %9, %6, !dbg !14
  %11 = shl i32 %10, 10, !dbg !15
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %13 = shl i32 %12, 2, !dbg !16
  %14 = and i32 %13, 508, !dbg !16
  %15 = and i32 %12, 127, !dbg !16
  %16 = or disjoint i32 %15, 128, !dbg !16
  %17 = or disjoint i32 %15, 256, !dbg !16
  %18 = or disjoint i32 %15, 384, !dbg !16
  %19 = or disjoint i32 %11, %14, !dbg !17
  %20 = or disjoint i32 %19, 512, !dbg !17
  %21 = or disjoint i32 %11, %15, !dbg !17
  %22 = or disjoint i32 %11, %16, !dbg !17
  %23 = or disjoint i32 %11, %17, !dbg !17
  %24 = or disjoint i32 %11, %18, !dbg !17
  %25 = or disjoint i32 %21, 512, !dbg !17
  %26 = or disjoint i32 %21, 640, !dbg !17
  %27 = or disjoint i32 %21, 768, !dbg !17
  %28 = or disjoint i32 %21, 896, !dbg !17
  %29 = icmp slt i32 %19, 262144, !dbg !18
  %30 = icmp slt i32 %20, 262144, !dbg !18
  %31 = icmp slt i32 %21, 262144, !dbg !18
  %32 = icmp slt i32 %22, 262144, !dbg !18
  %33 = icmp slt i32 %23, 262144, !dbg !18
  %34 = icmp slt i32 %24, 262144, !dbg !18
  %35 = icmp slt i32 %25, 262144, !dbg !18
  %36 = icmp slt i32 %26, 262144, !dbg !18
  %37 = icmp slt i32 %27, 262144, !dbg !18
  %38 = icmp slt i32 %28, 262144, !dbg !18
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !19
  %40 = icmp slt i32 %39, 4, !dbg !20
  %41 = srem i32 %19, 64, !dbg !21
  %42 = sdiv i32 %19, 16384, !dbg !22
  %43 = sdiv i32 %20, 16384, !dbg !22
  %44 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !23
  %45 = shufflevector <2 x i32> %44, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !23
  %46 = sdiv <2 x i32> %45, <i32 256, i32 64>, !dbg !23
  %47 = srem <2 x i32> %46, <i32 64, i32 4>, !dbg !24
  %48 = shl nsw <2 x i32> %47, <i32 6, i32 14>, !dbg !25
  %49 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !23
  %50 = shufflevector <2 x i32> %49, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !23
  %51 = sdiv <2 x i32> %50, <i32 256, i32 64>, !dbg !23
  %52 = srem <2 x i32> %51, <i32 64, i32 4>, !dbg !24
  %53 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !26
  %54 = insertelement <4 x i32> %53, i32 %42, i64 1, !dbg !26
  %55 = shufflevector <2 x i32> %52, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !26
  %56 = shufflevector <4 x i32> %54, <4 x i32> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !26
  %57 = shl <4 x i32> %56, <i32 12, i32 16, i32 6, i32 14>, !dbg !26
  %58 = shl i32 %43, 16, !dbg !27
  %59 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %57), !dbg !28
  %op.rdx = add i32 %59, %41, !dbg !29
  %60 = add i32 %58, %41, !dbg !29
  %61 = extractelement <2 x i32> %48, i64 0, !dbg !30
  %62 = add i32 %60, %61, !dbg !30
  %63 = extractelement <2 x i32> %48, i64 1, !dbg !31
  %64 = add i32 %62, %63, !dbg !31
  %65 = extractelement <4 x i32> %57, i64 0, !dbg !28
  %66 = add i32 %64, %65, !dbg !28
  %67 = sext i32 %op.rdx to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !32
  %69 = sext i32 %66 to i64, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !32
  %71 = and i1 %40, %29, !dbg !33
  %72 = and i1 %30, %40, !dbg !33
  %73 = and i1 %40, %31, !dbg !33
  %74 = and i1 %40, %32, !dbg !33
  %75 = and i1 %40, %33, !dbg !33
  %76 = and i1 %40, %34, !dbg !33
  %77 = and i1 %35, %40, !dbg !33
  %78 = and i1 %36, %40, !dbg !33
  %79 = and i1 %37, %40, !dbg !33
  %80 = and i1 %38, %40, !dbg !33
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %71) #3, !dbg !34
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !34
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !34
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !34
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %72) #3, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %.idx = shl nuw nsw i32 %14, 3, !dbg !34
  %91 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !34
  %92 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #3, !dbg !34
  %93 = shl nuw nsw i32 %14, 1, !dbg !34
  %94 = or disjoint i32 %93, 2, !dbg !34
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !34
  %96 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #3, !dbg !34
  %97 = or disjoint i32 %93, 4, !dbg !34
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !34
  %99 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #3, !dbg !34
  %100 = or disjoint i32 %93, 6, !dbg !34
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !34
  %102 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !34
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !34
  %104 = load float, ptr addrspace(3) %103, align 8, !dbg !34
  %.idx2 = shl nuw nsw i32 %16, 3, !dbg !34
  %105 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !34
  %106 = load float, ptr addrspace(3) %105, align 8, !dbg !34
  %.idx3 = shl nuw nsw i32 %17, 3, !dbg !34
  %107 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !34
  %108 = load float, ptr addrspace(3) %107, align 8, !dbg !34
  %.idx4 = shl nuw nsw i32 %18, 3, !dbg !34
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !34
  %110 = load float, ptr addrspace(3) %109, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %111 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %111, i1 true) #3, !dbg !34
  %112 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %112, i1 true) #3, !dbg !34
  %113 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %113, i1 true) #3, !dbg !34
  %114 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %114, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %115 = load float, ptr addrspace(3) %103, align 8, !dbg !34
  %116 = load float, ptr addrspace(3) %105, align 8, !dbg !34
  %117 = load float, ptr addrspace(3) %107, align 8, !dbg !34
  %118 = load float, ptr addrspace(3) %109, align 8, !dbg !34
  %119 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !35
  %120 = shufflevector <2 x i32> %119, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %121 = sdiv <2 x i32> %120, <i32 64, i32 16384>, !dbg !35
  %122 = srem <2 x i32> %121, splat (i32 4), !dbg !36
  %123 = shl nsw <2 x i32> %122, <i32 2, i32 4>, !dbg !37
  %124 = extractelement <2 x i32> %123, i64 0, !dbg !38
  %125 = add i32 %124, %39, !dbg !38
  %126 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !35
  %127 = shufflevector <2 x i32> %126, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %128 = sdiv <2 x i32> %127, <i32 64, i32 16384>, !dbg !35
  %129 = srem <2 x i32> %128, splat (i32 4), !dbg !36
  %130 = shl nsw <2 x i32> %129, <i32 2, i32 4>, !dbg !37
  %131 = extractelement <2 x i32> %130, i64 0, !dbg !38
  %132 = add i32 %131, %39, !dbg !38
  %133 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !35
  %134 = shufflevector <2 x i32> %133, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %135 = sdiv <2 x i32> %134, <i32 64, i32 16384>, !dbg !35
  %136 = srem <2 x i32> %135, splat (i32 4), !dbg !36
  %137 = shl nsw <2 x i32> %136, <i32 2, i32 4>, !dbg !37
  %138 = extractelement <2 x i32> %137, i64 0, !dbg !38
  %139 = add i32 %138, %39, !dbg !38
  %140 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !35
  %141 = shufflevector <2 x i32> %140, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !35
  %142 = sdiv <2 x i32> %141, <i32 64, i32 16384>, !dbg !35
  %143 = srem <2 x i32> %142, splat (i32 4), !dbg !36
  %144 = shl nsw <2 x i32> %143, <i32 2, i32 4>, !dbg !37
  %145 = extractelement <2 x i32> %144, i64 0, !dbg !38
  %146 = add i32 %145, %39, !dbg !38
  %147 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %148 = shufflevector <2 x i32> %147, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !22
  %149 = sdiv <2 x i32> %148, <i32 16384, i32 64>, !dbg !22
  %150 = srem <2 x i32> %149, splat (i32 4), !dbg !39
  %151 = shl nsw <2 x i32> %150, <i32 4, i32 2>, !dbg !40
  %152 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !22
  %153 = shufflevector <2 x i32> %152, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !22
  %154 = sdiv <2 x i32> %153, <i32 16384, i32 64>, !dbg !22
  %155 = srem <2 x i32> %154, splat (i32 4), !dbg !39
  %156 = shl nsw <2 x i32> %155, <i32 4, i32 2>, !dbg !40
  %157 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !22
  %158 = shufflevector <2 x i32> %157, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !22
  %159 = sdiv <2 x i32> %158, <i32 16384, i32 64>, !dbg !22
  %160 = srem <2 x i32> %159, splat (i32 4), !dbg !39
  %161 = shl nsw <2 x i32> %160, <i32 4, i32 2>, !dbg !40
  %162 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %163 = shufflevector <2 x i32> %162, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !22
  %164 = sdiv <2 x i32> %163, <i32 16384, i32 64>, !dbg !22
  %165 = srem <2 x i32> %164, splat (i32 4), !dbg !39
  %166 = shl nsw <2 x i32> %165, <i32 4, i32 2>, !dbg !40
  %167 = extractelement <2 x i32> %123, i64 1, !dbg !41
  %168 = add i32 %125, %167, !dbg !41
  %169 = extractelement <2 x i32> %130, i64 1, !dbg !41
  %170 = add i32 %132, %169, !dbg !41
  %171 = extractelement <2 x i32> %137, i64 1, !dbg !41
  %172 = add i32 %139, %171, !dbg !41
  %173 = extractelement <2 x i32> %144, i64 1, !dbg !41
  %174 = add i32 %146, %173, !dbg !41
  %shift = shufflevector <2 x i32> %151, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %175 = add nsw <2 x i32> %151, %shift, !dbg !38
  %176 = extractelement <2 x i32> %175, i64 0, !dbg !38
  %177 = add i32 %176, %39, !dbg !41
  %shift5 = shufflevector <2 x i32> %156, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %178 = add nsw <2 x i32> %156, %shift5, !dbg !38
  %179 = extractelement <2 x i32> %178, i64 0, !dbg !38
  %180 = add i32 %179, %39, !dbg !41
  %shift6 = shufflevector <2 x i32> %161, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %181 = add nsw <2 x i32> %161, %shift6, !dbg !38
  %182 = extractelement <2 x i32> %181, i64 0, !dbg !38
  %183 = add i32 %182, %39, !dbg !41
  %shift7 = shufflevector <2 x i32> %166, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %184 = add nsw <2 x i32> %166, %shift7, !dbg !38
  %185 = extractelement <2 x i32> %184, i64 0, !dbg !38
  %186 = add i32 %185, %39, !dbg !41
  %187 = sext i32 %168 to i64, !dbg !42
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !42
  %189 = sext i32 %170 to i64, !dbg !42
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !42
  %191 = sext i32 %172 to i64, !dbg !42
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !42
  %193 = sext i32 %174 to i64, !dbg !42
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !42
  %195 = sext i32 %177 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !42
  %197 = sext i32 %180 to i64, !dbg !42
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !42
  %199 = sext i32 %183 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !42
  %201 = sext i32 %186 to i64, !dbg !42
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !42
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %73) #3, !dbg !43
  %204 = bitcast i32 %203 to float, !dbg !43
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %74) #3, !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %75) #3, !dbg !43
  %208 = bitcast i32 %207 to float, !dbg !43
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %76) #3, !dbg !43
  %210 = bitcast i32 %209 to float, !dbg !43
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %77) #3, !dbg !43
  %212 = bitcast i32 %211 to float, !dbg !43
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %78) #3, !dbg !43
  %214 = bitcast i32 %213 to float, !dbg !43
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %79) #3, !dbg !43
  %216 = bitcast i32 %215 to float, !dbg !43
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %80) #3, !dbg !43
  %218 = bitcast i32 %217 to float, !dbg !43
  %219 = fadd float %104, %204, !dbg !44
  %220 = fadd float %106, %206, !dbg !44
  %221 = fadd float %108, %208, !dbg !44
  %222 = fadd float %110, %210, !dbg !44
  %223 = fadd float %115, %212, !dbg !44
  %224 = fadd float %116, %214, !dbg !44
  %225 = fadd float %117, %216, !dbg !44
  %226 = fadd float %118, %218, !dbg !44
  %227 = shl i32 %21, 2, !dbg !45
  %228 = shl i32 %22, 2, !dbg !45
  %229 = shl i32 %23, 2, !dbg !45
  %230 = shl i32 %24, 2, !dbg !45
  %231 = shl i32 %25, 2, !dbg !45
  %232 = shl i32 %26, 2, !dbg !45
  %233 = shl i32 %27, 2, !dbg !45
  %234 = shl i32 %28, 2, !dbg !45
  %235 = add i32 %227, %39, !dbg !46
  %236 = add i32 %228, %39, !dbg !46
  %237 = add i32 %229, %39, !dbg !46
  %238 = add i32 %230, %39, !dbg !46
  %239 = add i32 %39, %231, !dbg !46
  %240 = add i32 %39, %232, !dbg !46
  %241 = add i32 %39, %233, !dbg !46
  %242 = add i32 %39, %234, !dbg !46
  %243 = sext i32 %235 to i64, !dbg !47
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !47
  %245 = sext i32 %236 to i64, !dbg !47
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !47
  %247 = sext i32 %237 to i64, !dbg !47
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !47
  %249 = sext i32 %238 to i64, !dbg !47
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !47
  %251 = sext i32 %239 to i64, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !47
  %253 = sext i32 %240 to i64, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %253, !dbg !47
  %255 = sext i32 %241 to i64, !dbg !47
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %255, !dbg !47
  %257 = sext i32 %242 to i64, !dbg !47
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %257, !dbg !47
  %259 = bitcast float %219 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %244, i1 %73) #3, !dbg !48
  %260 = bitcast float %220 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %260, ptr addrspace(1) %246, i1 %74) #3, !dbg !48
  %261 = bitcast float %221 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %248, i1 %75) #3, !dbg !48
  %262 = bitcast float %222 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %262, ptr addrspace(1) %250, i1 %76) #3, !dbg !48
  %263 = bitcast float %223 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %263, ptr addrspace(1) %252, i1 %77) #3, !dbg !48
  %264 = bitcast float %224 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %264, ptr addrspace(1) %254, i1 %78) #3, !dbg !48
  %265 = bitcast float %225 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %256, i1 %79) #3, !dbg !48
  %266 = bitcast float %226 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %266, ptr addrspace(1) %258, i1 %80) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjy7xcqrcmn53gy2p5mfg6tcbmumrlzax3uuik2lt4wfst7yytys.py", directory: "inductor_cache/jy")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_8", linkageName: "triton_poi_fused_pixel_shuffle_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 27, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 28, scope: !7)
!25 = !DILocation(line: 35, column: 38, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 70, scope: !7)
!28 = !DILocation(line: 35, column: 64, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 43, scope: !7)
!31 = !DILocation(line: 35, column: 53, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 83, scope: !7)
!34 = !DILocation(line: 35, column: 75, scope: !7)
!35 = !DILocation(line: 30, column: 21, scope: !7)
!36 = !DILocation(line: 30, column: 27, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 33, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 45, scope: !7)
!41 = !DILocation(line: 36, column: 42, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 50, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 32, scope: !7)
!46 = !DILocation(line: 38, column: 30, scope: !7)
!47 = !DILocation(line: 38, column: 25, scope: !7)
!48 = !DILocation(line: 38, column: 43, scope: !7)
!49 = !DILocation(line: 38, column: 4, scope: !7)
