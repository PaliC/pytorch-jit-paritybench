; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = lshr i32 %9, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = or disjoint i32 %8, %14, !dbg !13
  %17 = or disjoint i32 %16, 32, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %9, 4, !dbg !16
  %21 = and i32 %20, 7, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = or disjoint i32 %19, %11, !dbg !17
  %25 = icmp slt i32 %22, 16, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 512, !dbg !19
  %29 = mul i32 %28, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = sdiv i32 %16, 512, !dbg !19
  %31 = sdiv i32 %17, 512, !dbg !19
  %32 = shl i32 %22, 9, !dbg !21
  %33 = shl i32 %23, 9, !dbg !21
  %34 = shl i32 %28, 13, !dbg !22
  %35 = add i32 %34, %.decomposed, !dbg !23
  %36 = add i32 %35, %32, !dbg !24
  %37 = add i32 %35, %33, !dbg !24
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #4, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #4, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %52 = sext i32 %.decomposed to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %59 = shl nsw i32 %30, 4, !dbg !29
  %60 = shl nsw i32 %31, 4, !dbg !29
  %61 = add i32 %59, %24, !dbg !30
  %62 = add i32 %24, %60, !dbg !30
  %63 = sext i32 %61 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !31
  %65 = sext i32 %62 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !31
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %27) #4, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %27) #4, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !32
  %81 = bitcast i32 %77 to float, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = insertelement <8 x i32> poison, i32 %51, i64 0, !dbg !26
  %86 = insertelement <8 x i32> %85, i32 %50, i64 1, !dbg !26
  %87 = insertelement <8 x i32> %86, i32 %49, i64 2, !dbg !26
  %88 = insertelement <8 x i32> %87, i32 %48, i64 3, !dbg !26
  %89 = insertelement <8 x i32> %88, i32 %46, i64 4, !dbg !26
  %90 = insertelement <8 x i32> %89, i32 %45, i64 5, !dbg !26
  %91 = insertelement <8 x i32> %90, i32 %44, i64 6, !dbg !26
  %92 = insertelement <8 x i32> %91, i32 %43, i64 7, !dbg !26
  %93 = bitcast <8 x i32> %92 to <8 x float>, !dbg !26
  %94 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !28
  %95 = insertelement <4 x i32> %94, i32 %57, i64 1, !dbg !28
  %96 = insertelement <4 x i32> %95, i32 %56, i64 2, !dbg !28
  %97 = insertelement <4 x i32> %96, i32 %55, i64 3, !dbg !28
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !28
  %99 = shufflevector <4 x float> %98, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %100 = fadd <8 x float> %99, %93, !dbg !33
  %101 = fcmp olt <8 x float> %100, zeroinitializer, !dbg !34
  %102 = extractelement <8 x i1> %101, i64 7, !dbg !38
  %103 = extractelement <8 x float> %100, i64 7, !dbg !38
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !38
  %105 = extractelement <8 x i1> %101, i64 6, !dbg !38
  %106 = extractelement <8 x float> %100, i64 6, !dbg !38
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !38
  %108 = extractelement <8 x i1> %101, i64 5, !dbg !38
  %109 = extractelement <8 x float> %100, i64 5, !dbg !38
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !38
  %111 = extractelement <8 x i1> %101, i64 4, !dbg !38
  %112 = extractelement <8 x float> %100, i64 4, !dbg !38
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !38
  %114 = extractelement <8 x i1> %101, i64 3, !dbg !38
  %115 = extractelement <8 x float> %100, i64 3, !dbg !38
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !38
  %117 = extractelement <8 x i1> %101, i64 2, !dbg !38
  %118 = extractelement <8 x float> %100, i64 2, !dbg !38
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !38
  %120 = extractelement <8 x i1> %101, i64 1, !dbg !38
  %121 = extractelement <8 x float> %100, i64 1, !dbg !38
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !38
  %123 = extractelement <8 x i1> %101, i64 0, !dbg !38
  %124 = extractelement <8 x float> %100, i64 0, !dbg !38
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !38
  %126 = shl i32 %9, 6, !dbg !38
  %127 = and i32 %126, 960, !dbg !38
  %128 = or disjoint i32 %127, %21, !dbg !38
  %129 = and i32 %10, 508, !dbg !38
  %130 = lshr exact i32 %127, 2, !dbg !38
  %131 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %130, !dbg !38
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !38
  %133 = bitcast float %104 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !38
  %134 = or disjoint i32 %128, 16, !dbg !38
  %135 = lshr i32 %134, 4, !dbg !38
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !38
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !38
  %138 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #4, !dbg !38
  %139 = or disjoint i32 %128, 32, !dbg !38
  %140 = lshr i32 %139, 4, !dbg !38
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !38
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !38
  %143 = bitcast float %110 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #4, !dbg !38
  %144 = or disjoint i32 %128, 48, !dbg !38
  %145 = lshr i32 %144, 4, !dbg !38
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !38
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !38
  %148 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !38
  %149 = or disjoint i32 %128, 8, !dbg !38
  %150 = getelementptr float, ptr addrspace(3) %131, i32 %149, !dbg !38
  %151 = bitcast float %116 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !38
  %152 = or disjoint i32 %128, 24, !dbg !38
  %153 = lshr i32 %152, 4, !dbg !38
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !38
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !38
  %156 = bitcast float %119 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !38
  %157 = or disjoint i32 %128, 40, !dbg !38
  %158 = lshr i32 %157, 4, !dbg !38
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !38
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !38
  %161 = bitcast float %122 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #4, !dbg !38
  %162 = or disjoint i32 %128, 56, !dbg !38
  %163 = lshr i32 %162, 4, !dbg !38
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !38
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !38
  %166 = bitcast float %125 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %167 = lshr i32 %129, 4, !dbg !38
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !38
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %129, !dbg !38
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !38
  %171 = or disjoint i32 %129, 1, !dbg !38
  %172 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %171, !dbg !38
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !38
  %174 = or disjoint i32 %129, 2, !dbg !38
  %175 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %174, !dbg !38
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !38
  %177 = or disjoint i32 %129, 3, !dbg !38
  %178 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %177, !dbg !38
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !38
  %180 = or disjoint i32 %129, 512, !dbg !38
  %181 = lshr i32 %180, 4, !dbg !38
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !38
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !38
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !38
  %185 = or disjoint i32 %129, 513, !dbg !38
  %186 = lshr i32 %185, 4, !dbg !38
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !38
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !38
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !38
  %190 = or disjoint i32 %129, 514, !dbg !38
  %191 = lshr i32 %190, 4, !dbg !38
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !38
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !38
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !38
  %195 = or disjoint i32 %129, 515, !dbg !38
  %196 = lshr i32 %195, 4, !dbg !38
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !38
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !38
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !38
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %200, 0, !dbg !39
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i = icmp eq i32 %201, 0, !dbg !39
  br i1 %.not.i, label %207, label %202, !dbg !39

202:                                              ; preds = %6
  br i1 %.not1.i, label %205, label %203, !dbg !39

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

207:                                              ; preds = %6
  br i1 %.not1.i, label %210, label %208, !dbg !39

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %203, %205, %208, %210
  %.0.i = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !39
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i3 = icmp eq i32 %212, 0, !dbg !39
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i6 = icmp eq i32 %213, 0, !dbg !39
  br i1 %.not.i3, label %219, label %214, !dbg !39

214:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %217, label %215, !dbg !39

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !39
  br label %__nv_sqrtf.exit7, !dbg !39

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !39
  br label %__nv_sqrtf.exit7, !dbg !39

219:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %222, label %220, !dbg !39

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !39
  br label %__nv_sqrtf.exit7, !dbg !39

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !39
  br label %__nv_sqrtf.exit7, !dbg !39

__nv_sqrtf.exit7:                                 ; preds = %215, %217, %220, %222
  %.0.i5 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !39
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i8 = icmp eq i32 %224, 0, !dbg !39
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i11 = icmp eq i32 %225, 0, !dbg !39
  br i1 %.not.i8, label %231, label %226, !dbg !39

226:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %229, label %227, !dbg !39

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

231:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %234, label %232, !dbg !39

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !39
  br label %__nv_sqrtf.exit12, !dbg !39

__nv_sqrtf.exit12:                                ; preds = %227, %229, %232, %234
  %.0.i10 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !39
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i13 = icmp eq i32 %236, 0, !dbg !39
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i16 = icmp eq i32 %237, 0, !dbg !39
  br i1 %.not.i13, label %243, label %238, !dbg !39

238:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %241, label %239, !dbg !39

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

243:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %246, label %244, !dbg !39

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

__nv_sqrtf.exit17:                                ; preds = %239, %241, %244, %246
  %.0.i15 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !39
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i18 = icmp eq i32 %248, 0, !dbg !39
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i21 = icmp eq i32 %249, 0, !dbg !39
  br i1 %.not.i18, label %255, label %250, !dbg !39

250:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %253, label %251, !dbg !39

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !39
  br label %__nv_sqrtf.exit22, !dbg !39

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !39
  br label %__nv_sqrtf.exit22, !dbg !39

255:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %258, label %256, !dbg !39

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !39
  br label %__nv_sqrtf.exit22, !dbg !39

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !39
  br label %__nv_sqrtf.exit22, !dbg !39

__nv_sqrtf.exit22:                                ; preds = %251, %253, %256, %258
  %.0.i20 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !39
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i23 = icmp eq i32 %260, 0, !dbg !39
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i26 = icmp eq i32 %261, 0, !dbg !39
  br i1 %.not.i23, label %267, label %262, !dbg !39

262:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %265, label %263, !dbg !39

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !39
  br label %__nv_sqrtf.exit27, !dbg !39

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !39
  br label %__nv_sqrtf.exit27, !dbg !39

267:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %270, label %268, !dbg !39

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !39
  br label %__nv_sqrtf.exit27, !dbg !39

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !39
  br label %__nv_sqrtf.exit27, !dbg !39

__nv_sqrtf.exit27:                                ; preds = %263, %265, %268, %270
  %.0.i25 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !39
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i28 = icmp eq i32 %272, 0, !dbg !39
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i31 = icmp eq i32 %273, 0, !dbg !39
  br i1 %.not.i28, label %279, label %274, !dbg !39

274:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %277, label %275, !dbg !39

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !39
  br label %__nv_sqrtf.exit32, !dbg !39

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !39
  br label %__nv_sqrtf.exit32, !dbg !39

279:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %282, label %280, !dbg !39

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !39
  br label %__nv_sqrtf.exit32, !dbg !39

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !39
  br label %__nv_sqrtf.exit32, !dbg !39

__nv_sqrtf.exit32:                                ; preds = %275, %277, %280, %282
  %.0.i30 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !39
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i33 = icmp eq i32 %284, 0, !dbg !39
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i36 = icmp eq i32 %285, 0, !dbg !39
  br i1 %.not.i33, label %291, label %286, !dbg !39

286:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %289, label %287, !dbg !39

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

291:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %294, label %292, !dbg !39

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

__nv_sqrtf.exit37:                                ; preds = %287, %289, %292, %294
  %.0.i35 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !39
  %296 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !40
  %297 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !40
  %298 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !40
  %299 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !40
  %300 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !40
  %301 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !40
  %302 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !40
  %303 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !40
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %296) #4, !dbg !41
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %297) #4, !dbg !41
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %298) #4, !dbg !41
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %299) #4, !dbg !41
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %300) #4, !dbg !41
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %301) #4, !dbg !41
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %302) #4, !dbg !41
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %303) #4, !dbg !41
  %312 = shl i32 %16, 4, !dbg !42
  %313 = shl i32 %17, 4, !dbg !42
  %314 = add i32 %24, %312, !dbg !43
  %315 = add i32 %24, %313, !dbg !43
  %316 = sext i32 %314 to i64, !dbg !44
  %317 = getelementptr float, ptr addrspace(1) %3, i64 %316, !dbg !44
  %318 = sext i32 %315 to i64, !dbg !44
  %319 = getelementptr float, ptr addrspace(1) %3, i64 %318, !dbg !44
  %320 = bitcast float %304 to i32, !dbg !45
  %321 = bitcast float %305 to i32, !dbg !45
  %322 = bitcast float %306 to i32, !dbg !45
  %323 = bitcast float %307 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %317, i1 %27) #4, !dbg !45
  %324 = bitcast float %308 to i32, !dbg !45
  %325 = bitcast float %309 to i32, !dbg !45
  %326 = bitcast float %310 to i32, !dbg !45
  %327 = bitcast float %311 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %325, i32 %326, i32 %327, ptr addrspace(1) %319, i1 %27) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mifbgakz566ok727nnv5bs5mtq7t4wjqyjnrjvbuexlm72gafo.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", linkageName: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 37, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 38, column: 26, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 33, scope: !7)
!43 = !DILocation(line: 42, column: 30, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 44, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
