; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %.lobit12 = lshr i32 %8, 6, !dbg !17
  %26 = and i32 %.lobit12, 3, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = or disjoint i32 %25, %12, !dbg !18
  %31 = or disjoint i32 %30, 1, !dbg !18
  %32 = or disjoint i32 %30, 2, !dbg !18
  %33 = or disjoint i32 %30, 3, !dbg !18
  %34 = or disjoint i32 %25, %26, !dbg !18
  %35 = or disjoint i32 %25, %27, !dbg !18
  %36 = or disjoint i32 %25, %28, !dbg !18
  %37 = or disjoint i32 %25, %29, !dbg !18
  %.frozen = freeze i32 %30, !dbg !19
  %38 = sdiv i32 %.frozen, 64, !dbg !19
  %39 = mul i32 %38, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = srem i32 %31, 64, !dbg !20
  %41 = srem i32 %32, 64, !dbg !20
  %42 = srem i32 %33, 64, !dbg !20
  %.frozen33 = freeze i32 %18, !dbg !21
  %43 = sdiv i32 %.frozen33, 128, !dbg !21
  %44 = mul i32 %43, 128, !dbg !22
  %.decomposed34 = sub i32 %.frozen33, %44, !dbg !22
  %45 = shl i32 %14, 12, !dbg !23
  %46 = shl i32 %15, 12, !dbg !23
  %47 = shl i32 %16, 12, !dbg !23
  %48 = shl i32 %17, 12, !dbg !23
  %49 = add i32 %30, %45, !dbg !24
  %50 = add i32 %30, %46, !dbg !24
  %51 = add i32 %30, %47, !dbg !24
  %52 = add i32 %30, %48, !dbg !24
  %53 = sext i32 %49 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !25
  %55 = sext i32 %50 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !25
  %57 = sext i32 %51 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = sext i32 %52 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %19) #2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %20) #2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %21) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %22) #2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = sitofp i32 %38 to float, !dbg !27
  %98 = fmul float %97, 6.250000e-02, !dbg !28
  %99 = fptosi float %98 to i32, !dbg !29
  %100 = sitofp i32 %.decomposed to float, !dbg !30
  %101 = sitofp i32 %40 to float, !dbg !30
  %102 = sitofp i32 %41 to float, !dbg !30
  %103 = sitofp i32 %42 to float, !dbg !30
  %104 = fmul float %100, 6.250000e-02, !dbg !31
  %105 = fmul float %101, 6.250000e-02, !dbg !31
  %106 = fmul float %102, 6.250000e-02, !dbg !31
  %107 = fmul float %103, 6.250000e-02, !dbg !31
  %108 = fptosi float %104 to i32, !dbg !32
  %109 = fptosi float %105 to i32, !dbg !32
  %110 = fptosi float %106 to i32, !dbg !32
  %111 = fptosi float %107 to i32, !dbg !32
  %112 = shl i32 %99, 2, !dbg !33
  %113 = add i32 %112, %108, !dbg !34
  %114 = add i32 %112, %109, !dbg !34
  %115 = add i32 %112, %110, !dbg !34
  %116 = add i32 %112, %111, !dbg !34
  %117 = shl i32 %14, 4, !dbg !35
  %118 = shl i32 %15, 4, !dbg !35
  %119 = shl i32 %16, 4, !dbg !35
  %120 = shl i32 %17, 4, !dbg !35
  %121 = add i32 %113, %117, !dbg !36
  %122 = add i32 %114, %117, !dbg !36
  %123 = add i32 %115, %117, !dbg !36
  %124 = add i32 %116, %117, !dbg !36
  %125 = add i32 %113, %118, !dbg !36
  %126 = add i32 %114, %118, !dbg !36
  %127 = add i32 %115, %118, !dbg !36
  %128 = add i32 %116, %118, !dbg !36
  %129 = add i32 %113, %119, !dbg !36
  %130 = add i32 %114, %119, !dbg !36
  %131 = add i32 %115, %119, !dbg !36
  %132 = add i32 %116, %119, !dbg !36
  %133 = add i32 %113, %120, !dbg !36
  %134 = add i32 %114, %120, !dbg !36
  %135 = add i32 %115, %120, !dbg !36
  %136 = add i32 %116, %120, !dbg !36
  %137 = sext i32 %121 to i64, !dbg !37
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !37
  %139 = sext i32 %122 to i64, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !37
  %141 = sext i32 %123 to i64, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !37
  %143 = sext i32 %124 to i64, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !37
  %145 = sext i32 %125 to i64, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !37
  %147 = sext i32 %126 to i64, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !37
  %149 = sext i32 %127 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !37
  %151 = sext i32 %128 to i64, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !37
  %153 = sext i32 %129 to i64, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !37
  %155 = sext i32 %130 to i64, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !37
  %157 = sext i32 %131 to i64, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !37
  %159 = sext i32 %132 to i64, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !37
  %161 = sext i32 %133 to i64, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !37
  %163 = sext i32 %134 to i64, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !37
  %165 = sext i32 %135 to i64, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !37
  %167 = sext i32 %136 to i64, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %19) #2, !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %19) #2, !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %19) #2, !dbg !38
  %174 = bitcast i32 %173 to float, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %19) #2, !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %20) #2, !dbg !38
  %178 = bitcast i32 %177 to float, !dbg !38
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %20) #2, !dbg !38
  %180 = bitcast i32 %179 to float, !dbg !38
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %20) #2, !dbg !38
  %182 = bitcast i32 %181 to float, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %20) #2, !dbg !38
  %184 = bitcast i32 %183 to float, !dbg !38
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %21) #2, !dbg !38
  %186 = bitcast i32 %185 to float, !dbg !38
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %21) #2, !dbg !38
  %188 = bitcast i32 %187 to float, !dbg !38
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %21) #2, !dbg !38
  %190 = bitcast i32 %189 to float, !dbg !38
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %21) #2, !dbg !38
  %192 = bitcast i32 %191 to float, !dbg !38
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %22) #2, !dbg !38
  %194 = bitcast i32 %193 to float, !dbg !38
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #2, !dbg !38
  %196 = bitcast i32 %195 to float, !dbg !38
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %22) #2, !dbg !38
  %198 = bitcast i32 %197 to float, !dbg !38
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #2, !dbg !38
  %200 = bitcast i32 %199 to float, !dbg !38
  %201 = fadd float %66, %170, !dbg !39
  %202 = fadd float %67, %172, !dbg !39
  %203 = fadd float %68, %174, !dbg !39
  %204 = fadd float %69, %176, !dbg !39
  %205 = fadd float %75, %178, !dbg !39
  %206 = fadd float %76, %180, !dbg !39
  %207 = fadd float %77, %182, !dbg !39
  %208 = fadd float %78, %184, !dbg !39
  %209 = fadd float %84, %186, !dbg !39
  %210 = fadd float %85, %188, !dbg !39
  %211 = fadd float %86, %190, !dbg !39
  %212 = fadd float %87, %192, !dbg !39
  %213 = fadd float %93, %194, !dbg !39
  %214 = fadd float %94, %196, !dbg !39
  %215 = fadd float %95, %198, !dbg !39
  %216 = fadd float %96, %200, !dbg !39
  %217 = shl i32 %34, 7, !dbg !40
  %218 = shl i32 %35, 7, !dbg !40
  %219 = shl i32 %36, 7, !dbg !40
  %220 = shl i32 %37, 7, !dbg !40
  %221 = shl i32 %43, 19, !dbg !41
  %222 = add i32 %221, %.decomposed34, !dbg !42
  %223 = add i32 %222, %217, !dbg !43
  %224 = add i32 %222, %218, !dbg !43
  %225 = add i32 %222, %219, !dbg !43
  %226 = add i32 %222, %220, !dbg !43
  %227 = sext i32 %223 to i64, !dbg !44
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !44
  %229 = sext i32 %224 to i64, !dbg !44
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !44
  %231 = sext i32 %225 to i64, !dbg !44
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !44
  %233 = sext i32 %226 to i64, !dbg !44
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !44
  %235 = shl i32 %8, 10, !dbg !45
  %236 = and i32 %235, 3072, !dbg !45
  %237 = or disjoint i32 %236, %10, !dbg !45
  %238 = and i32 %11, 1020, !dbg !45
  %239 = lshr exact i32 %236, 4, !dbg !45
  %240 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %239, !dbg !45
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %237, !dbg !45
  %242 = bitcast float %201 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !45
  %243 = or disjoint i32 %237, 256, !dbg !45
  %244 = lshr i32 %243, 6, !dbg !45
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !45
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !45
  %247 = bitcast float %202 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !45
  %248 = or disjoint i32 %237, 512, !dbg !45
  %249 = lshr i32 %248, 6, !dbg !45
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !45
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !45
  %252 = bitcast float %203 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !45
  %253 = or disjoint i32 %237, 768, !dbg !45
  %254 = lshr i32 %253, 6, !dbg !45
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !45
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !45
  %257 = bitcast float %204 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !45
  %258 = or disjoint i32 %237, 64, !dbg !45
  %259 = getelementptr float, ptr addrspace(3) %240, i32 %258, !dbg !45
  %260 = bitcast float %205 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !45
  %261 = or disjoint i32 %237, 320, !dbg !45
  %262 = lshr i32 %261, 6, !dbg !45
  %263 = and i32 %262, 52, !dbg !45
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !45
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %261, !dbg !45
  %266 = bitcast float %206 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !45
  %267 = or disjoint i32 %237, 576, !dbg !45
  %268 = lshr i32 %267, 6, !dbg !45
  %269 = and i32 %268, 56, !dbg !45
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !45
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %267, !dbg !45
  %272 = bitcast float %207 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !45
  %273 = or disjoint i32 %237, 832, !dbg !45
  %274 = lshr i32 %273, 6, !dbg !45
  %275 = and i32 %274, 60, !dbg !45
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !45
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %273, !dbg !45
  %278 = bitcast float %208 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !45
  %279 = or disjoint i32 %237, 128, !dbg !45
  %280 = getelementptr float, ptr addrspace(3) %240, i32 %279, !dbg !45
  %281 = bitcast float %209 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !45
  %282 = or disjoint i32 %237, 384, !dbg !45
  %283 = lshr i32 %282, 6, !dbg !45
  %284 = and i32 %283, 52, !dbg !45
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !45
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !45
  %287 = bitcast float %210 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !45
  %288 = or disjoint i32 %237, 640, !dbg !45
  %289 = lshr i32 %288, 6, !dbg !45
  %290 = and i32 %289, 56, !dbg !45
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !45
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !45
  %293 = bitcast float %211 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !45
  %294 = or disjoint i32 %237, 896, !dbg !45
  %295 = lshr i32 %294, 6, !dbg !45
  %296 = and i32 %295, 60, !dbg !45
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !45
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !45
  %299 = bitcast float %212 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #2, !dbg !45
  %300 = or disjoint i32 %237, 192, !dbg !45
  %301 = getelementptr float, ptr addrspace(3) %240, i32 %300, !dbg !45
  %302 = bitcast float %213 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #2, !dbg !45
  %303 = or disjoint i32 %237, 448, !dbg !45
  %304 = lshr i32 %303, 6, !dbg !45
  %305 = and i32 %304, 52, !dbg !45
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !45
  %307 = getelementptr float, ptr addrspace(3) %306, i32 %303, !dbg !45
  %308 = bitcast float %214 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #2, !dbg !45
  %309 = or disjoint i32 %237, 704, !dbg !45
  %310 = lshr i32 %309, 6, !dbg !45
  %311 = and i32 %310, 56, !dbg !45
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %311, !dbg !45
  %313 = getelementptr float, ptr addrspace(3) %312, i32 %309, !dbg !45
  %314 = bitcast float %215 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #2, !dbg !45
  %315 = or disjoint i32 %237, 960, !dbg !45
  %316 = lshr i32 %315, 6, !dbg !45
  %317 = and i32 %316, 60, !dbg !45
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !45
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %315, !dbg !45
  %320 = bitcast float %216 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %321 = lshr i32 %11, 6, !dbg !45
  %322 = and i32 %321, 12, !dbg !45
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !45
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %238, !dbg !45
  %325 = or disjoint i32 %238, 1024, !dbg !45
  %326 = lshr i32 %325, 6, !dbg !45
  %327 = and i32 %326, 28, !dbg !45
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !45
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %325, !dbg !45
  %330 = load <4 x i32>, ptr addrspace(3) %329, align 16, !dbg !45
  %331 = or disjoint i32 %238, 2048, !dbg !45
  %332 = lshr i32 %331, 6, !dbg !45
  %333 = and i32 %332, 44, !dbg !45
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !45
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %331, !dbg !45
  %336 = load <4 x i32>, ptr addrspace(3) %335, align 16, !dbg !45
  %337 = or disjoint i32 %238, 3072, !dbg !45
  %338 = lshr i32 %337, 6, !dbg !45
  %339 = and i32 %338, 60, !dbg !45
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !45
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %337, !dbg !45
  %342 = load <4 x i32>, ptr addrspace(3) %341, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %324, align 16, !dbg !45
  %343 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 4, !dbg !45
  %.extract18 = load i32, ptr addrspace(3) %343, align 4, !dbg !45
  %344 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 8, !dbg !45
  %.extract19 = load i32, ptr addrspace(3) %344, align 8, !dbg !45
  %345 = getelementptr inbounds i8, ptr addrspace(3) %324, i32 12, !dbg !45
  %.extract20 = load i32, ptr addrspace(3) %345, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %228, i1 %23) #2, !dbg !45
  %.extract21 = extractelement <4 x i32> %330, i64 0, !dbg !45
  %.extract22 = extractelement <4 x i32> %330, i64 1, !dbg !45
  %.extract23 = extractelement <4 x i32> %330, i64 2, !dbg !45
  %.extract24 = extractelement <4 x i32> %330, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %230, i1 %23) #2, !dbg !45
  %.extract25 = extractelement <4 x i32> %336, i64 0, !dbg !45
  %.extract26 = extractelement <4 x i32> %336, i64 1, !dbg !45
  %.extract27 = extractelement <4 x i32> %336, i64 2, !dbg !45
  %.extract28 = extractelement <4 x i32> %336, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %232, i1 %23) #2, !dbg !45
  %.extract29 = extractelement <4 x i32> %342, i64 0, !dbg !45
  %.extract30 = extractelement <4 x i32> %342, i64 1, !dbg !45
  %.extract31 = extractelement <4 x i32> %342, i64 2, !dbg !45
  %.extract32 = extractelement <4 x i32> %342, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %234, i1 %23) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbzixknvbypz6iruufz3qq5iwdohfj4omjds3fudqetucvsnj6ei.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_0", linkageName: "triton_poi_fused__unsafe_index_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 41, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 39, scope: !7)
!34 = !DILocation(line: 44, column: 37, scope: !7)
!35 = !DILocation(line: 44, column: 49, scope: !7)
!36 = !DILocation(line: 44, column: 46, scope: !7)
!37 = !DILocation(line: 44, column: 30, scope: !7)
!38 = !DILocation(line: 44, column: 54, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 34, scope: !7)
!41 = !DILocation(line: 46, column: 46, scope: !7)
!42 = !DILocation(line: 46, column: 30, scope: !7)
!43 = !DILocation(line: 46, column: 39, scope: !7)
!44 = !DILocation(line: 46, column: 25, scope: !7)
!45 = !DILocation(line: 46, column: 58, scope: !7)
!46 = !DILocation(line: 46, column: 4, scope: !7)
