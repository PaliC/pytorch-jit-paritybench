; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = sdiv i32 %8, 32, !dbg !14
  %10 = shl i32 %9, 7, !dbg !15
  %11 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !16
  %12 = insertelement <2 x i32> %11, i32 %9, i64 1, !dbg !16
  %13 = srem <2 x i32> %12, splat (i32 32), !dbg !16
  %14 = shl nsw <2 x i32> %13, splat (i32 1), !dbg !17
  %15 = extractelement <2 x i32> %14, i64 1, !dbg !18
  %16 = add nsw i32 %15, -1, !dbg !18
  %17 = extractelement <2 x i32> %13, i64 1, !dbg !19
  %18 = icmp sgt i32 %17, 0, !dbg !20
  %19 = extractelement <2 x i32> %14, i64 0, !dbg !21
  %20 = add nsw i32 %19, -1, !dbg !22
  %21 = extractelement <2 x i32> %13, i64 0, !dbg !19
  %22 = icmp sgt i32 %21, 0, !dbg !23
  %23 = and i1 %22, %18, !dbg !24
  %24 = add i32 %10, %19, !dbg !21
  %25 = add i32 %24, -65, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %23, i32 0, i1 %23) #1, !dbg !27
  %29 = bitcast i32 %28 to float, !dbg !27
  %30 = icmp sgt i32 %21, -1, !dbg !28
  %31 = and i1 %30, %18, !dbg !29
  %32 = add i32 %24, -64, !dbg !30
  %33 = sext i32 %32 to i64, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !31
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31) #1, !dbg !32
  %36 = bitcast i32 %35 to float, !dbg !32
  %37 = fadd float %29, %36, !dbg !33
  %38 = add i32 %24, -63, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !35
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %31, i32 0, i1 %31) #1, !dbg !36
  %42 = bitcast i32 %41 to float, !dbg !36
  %43 = fadd float %37, %42, !dbg !37
  %44 = icmp sgt i32 %17, -1, !dbg !38
  %45 = and i1 %22, %44, !dbg !39
  %46 = add i32 %20, %10, !dbg !40
  %47 = sext i32 %46 to i64, !dbg !41
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !41
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %45, i32 0, i1 %45) #1, !dbg !42
  %50 = bitcast i32 %49 to float, !dbg !42
  %51 = fadd float %43, %50, !dbg !43
  %52 = or i32 %17, %21, !dbg !19
  %53 = icmp sgt i32 %52, -1, !dbg !19
  %54 = sext i32 %24 to i64, !dbg !44
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !44
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %53, i32 0, i1 %53) #1, !dbg !45
  %57 = bitcast i32 %56 to float, !dbg !45
  %58 = fadd float %51, %57, !dbg !46
  %59 = or disjoint i32 %24, 1, !dbg !47
  %60 = sext i32 %59 to i64, !dbg !48
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !48
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %53, i32 0, i1 %53) #1, !dbg !49
  %63 = bitcast i32 %62 to float, !dbg !49
  %64 = fadd float %58, %63, !dbg !50
  %65 = add i32 %24, 63, !dbg !51
  %66 = sext i32 %65 to i64, !dbg !52
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !52
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %45, i32 0, i1 %45) #1, !dbg !53
  %69 = bitcast i32 %68 to float, !dbg !53
  %70 = fadd float %64, %69, !dbg !54
  %71 = add i32 %24, 64, !dbg !55
  %72 = sext i32 %71 to i64, !dbg !56
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !56
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %53, i32 0, i1 %53) #1, !dbg !57
  %75 = bitcast i32 %74 to float, !dbg !57
  %76 = fadd float %70, %75, !dbg !58
  %77 = add i32 %24, 65, !dbg !59
  %78 = sext i32 %77 to i64, !dbg !60
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !60
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %53, i32 0, i1 %53) #1, !dbg !61
  %81 = bitcast i32 %80 to float, !dbg !61
  %82 = fadd float %76, %81, !dbg !62
  %83 = select i1 %22, i32 %20, i32 0, !dbg !63
  %84 = select i1 %18, i32 %16, i32 0, !dbg !64
  %85 = add nsw <2 x i32> %14, splat (i32 2), !dbg !65
  %86 = icmp sgt <2 x i32> %13, splat (i32 30), !dbg !66
  %87 = select <2 x i1> %86, <2 x i32> splat (i32 64), <2 x i32> zeroinitializer, !dbg !67
  %88 = icmp slt <2 x i32> %13, splat (i32 31), !dbg !68
  %89 = select <2 x i1> %88, <2 x i32> %85, <2 x i32> zeroinitializer, !dbg !69
  %90 = add nsw <2 x i32> %89, %87, !dbg !70
  %91 = extractelement <2 x i32> %90, i64 0
  %reass.add = sub nsw i32 %91, %83
  %92 = extractelement <2 x i32> %90, i64 1
  %reass.mul = mul nsw i32 %reass.add, %92
  %reass.add3 = sub nsw i32 %83, %91
  %reass.mul4 = mul nsw i32 %reass.add3, %84
  %93 = add nsw i32 %reass.mul4, %reass.mul, !dbg !71
  %94 = sitofp i32 %93 to float, !dbg !72
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %94) #1, !dbg !72
  %96 = sext i32 %8 to i64, !dbg !73
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !73
  %98 = bitcast float %95 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %97, i1 true) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clxw7xqxjewigmfk53gx3k7vvtkpjmkqkssswxbxfdhqrhuls52u.py", directory: "inductor_cache/lx")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 39, column: 50, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 20, scope: !7)
!18 = !DILocation(line: 28, column: 18, scope: !7)
!19 = !DILocation(line: 61, column: 20, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 39, column: 46, scope: !7)
!26 = !DILocation(line: 39, column: 31, scope: !7)
!27 = !DILocation(line: 39, column: 55, scope: !7)
!28 = !DILocation(line: 41, column: 21, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 46, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 55, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 46, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 55, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 21, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 45, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 59, column: 54, scope: !7)
!43 = !DILocation(line: 60, column: 20, scope: !7)
!44 = !DILocation(line: 62, column: 31, scope: !7)
!45 = !DILocation(line: 62, column: 47, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 65, column: 42, scope: !7)
!48 = !DILocation(line: 65, column: 31, scope: !7)
!49 = !DILocation(line: 65, column: 51, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 72, column: 43, scope: !7)
!52 = !DILocation(line: 72, column: 31, scope: !7)
!53 = !DILocation(line: 72, column: 52, scope: !7)
!54 = !DILocation(line: 73, column: 20, scope: !7)
!55 = !DILocation(line: 75, column: 43, scope: !7)
!56 = !DILocation(line: 75, column: 31, scope: !7)
!57 = !DILocation(line: 75, column: 52, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 78, column: 43, scope: !7)
!60 = !DILocation(line: 78, column: 31, scope: !7)
!61 = !DILocation(line: 78, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 20, scope: !7)
!63 = !DILocation(line: 80, column: 61, scope: !7)
!64 = !DILocation(line: 80, column: 132, scope: !7)
!65 = !DILocation(line: 80, column: 178, scope: !7)
!66 = !DILocation(line: 80, column: 174, scope: !7)
!67 = !DILocation(line: 80, column: 165, scope: !7)
!68 = !DILocation(line: 80, column: 215, scope: !7)
!69 = !DILocation(line: 80, column: 201, scope: !7)
!70 = !DILocation(line: 80, column: 187, scope: !7)
!71 = !DILocation(line: 80, column: 434, scope: !7)
!72 = !DILocation(line: 81, column: 20, scope: !7)
!73 = !DILocation(line: 82, column: 25, scope: !7)
!74 = !DILocation(line: 82, column: 37, scope: !7)
!75 = !DILocation(line: 82, column: 4, scope: !7)
