; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = icmp slt i32 %15, 64, !dbg !14
  %20 = icmp slt i32 %16, 64, !dbg !14
  %21 = icmp slt i32 %17, 64, !dbg !14
  %22 = icmp slt i32 %18, 64, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %14, 252, !dbg !17
  %26 = and i32 %12, 255, !dbg !17
  %27 = or disjoint i32 %24, %25, !dbg !18
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = icmp slt i32 %27, 256, !dbg !19
  %30 = icmp slt i32 %28, 256, !dbg !19
  %31 = shl i32 %15, 8, !dbg !20
  %32 = shl i32 %16, 8, !dbg !20
  %33 = shl i32 %17, 8, !dbg !20
  %34 = shl i32 %18, 8, !dbg !20
  %35 = add i32 %27, %31, !dbg !21
  %36 = add i32 %27, %32, !dbg !21
  %37 = add i32 %27, %33, !dbg !21
  %38 = add i32 %27, %34, !dbg !21
  %39 = sext i32 %35 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %36 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %37 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %38 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = and i1 %19, %29, !dbg !23
  %48 = and i1 %20, %29, !dbg !23
  %49 = and i1 %21, %29, !dbg !23
  %50 = and i1 %22, %29, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %47) #4, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %48) #4, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %49) #4, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %50) #4, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = and i32 %14, 1020, !dbg !24
  %72 = lshr i32 %71, 8, !dbg !24
  %73 = or disjoint i32 %72, %71, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  %76 = or disjoint i32 %71, 1, !dbg !24
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %76, !dbg !24
  %79 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !24
  %80 = or disjoint i32 %71, 2, !dbg !24
  %81 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %80, !dbg !24
  %82 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !24
  %83 = or disjoint i32 %71, 3, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %83, !dbg !24
  %85 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !24
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %88 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 1028, !dbg !24
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %90 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 2056, !dbg !24
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %92 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 3084, !dbg !24
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %94, i1 true) #4, !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %97, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %98 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %99 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %101 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %102 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %102, i1 true) #4, !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %104, i1 true) #4, !dbg !24
  %105 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %105, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %106 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %107 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %109 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %110 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %110, i1 true) #4, !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %112, i1 true) #4, !dbg !24
  %113 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %113, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %114 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %115 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %117 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  %118 = sext i32 %28 to i64, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %30) #4, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %30) #4, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %118, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %30) #4, !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %118, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %30) #4, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %30) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %130 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %130, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !35
  %132 = load float, ptr addrspace(3) %131, align 16, !dbg !35
  %133 = or disjoint i32 %25, 1, !dbg !35
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !35
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !35
  %136 = or disjoint i32 %25, 2, !dbg !35
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !35
  %138 = load float, ptr addrspace(3) %137, align 8, !dbg !35
  %139 = or disjoint i32 %25, 3, !dbg !35
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !35
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !35
  %142 = fadd float %125, 0x3EE4F8B580000000, !dbg !36
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %143, 0, !dbg !37
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %144, 0, !dbg !37
  br i1 %.not.i, label %150, label %145, !dbg !37

145:                                              ; preds = %9
  br i1 %.not1.i, label %148, label %146, !dbg !37

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

150:                                              ; preds = %9
  br i1 %.not1.i, label %153, label %151, !dbg !37

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %146, %148, %151, %153
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !37
  %155 = bitcast i32 %70 to float, !dbg !24
  %156 = fadd float %141, %155, !dbg !35
  %157 = bitcast i32 %69 to float, !dbg !24
  %158 = fadd float %138, %157, !dbg !35
  %159 = bitcast i32 %68 to float, !dbg !24
  %160 = fadd float %135, %159, !dbg !35
  %161 = bitcast i32 %67 to float, !dbg !24
  %162 = fadd float %132, %161, !dbg !35
  %163 = bitcast i32 %65 to float, !dbg !24
  %164 = fadd float %141, %163, !dbg !35
  %165 = bitcast i32 %64 to float, !dbg !24
  %166 = fadd float %138, %165, !dbg !35
  %167 = bitcast i32 %63 to float, !dbg !24
  %168 = fadd float %135, %167, !dbg !35
  %169 = bitcast i32 %62 to float, !dbg !24
  %170 = fadd float %132, %169, !dbg !35
  %171 = bitcast i32 %60 to float, !dbg !24
  %172 = fadd float %141, %171, !dbg !35
  %173 = bitcast i32 %59 to float, !dbg !24
  %174 = fadd float %138, %173, !dbg !35
  %175 = bitcast i32 %58 to float, !dbg !24
  %176 = fadd float %135, %175, !dbg !35
  %177 = bitcast i32 %57 to float, !dbg !24
  %178 = fadd float %132, %177, !dbg !35
  %179 = bitcast i32 %55 to float, !dbg !24
  %180 = fadd float %141, %179, !dbg !35
  %181 = bitcast i32 %54 to float, !dbg !24
  %182 = fadd float %138, %181, !dbg !35
  %183 = bitcast i32 %53 to float, !dbg !24
  %184 = fadd float %135, %183, !dbg !35
  %185 = bitcast i32 %52 to float, !dbg !24
  %186 = fadd float %132, %185, !dbg !35
  %187 = lshr i32 %12, 2, !dbg !17
  %188 = and i32 %187, 63, !dbg !17
  %189 = or disjoint i32 %188, %24, !dbg !18
  %190 = or disjoint i32 %189, 192, !dbg !18
  %191 = icmp slt i32 %190, 256, !dbg !19
  %192 = and i32 %14, 12, !dbg !12
  %193 = or disjoint i32 %11, %192, !dbg !13
  %194 = icmp slt i32 %193, 64, !dbg !14
  %195 = and i1 %194, %191, !dbg !23
  %196 = or disjoint i32 %189, 128, !dbg !18
  %197 = icmp slt i32 %196, 256, !dbg !19
  %198 = and i1 %194, %197, !dbg !23
  %199 = or disjoint i32 %189, 64, !dbg !18
  %200 = icmp slt i32 %199, 256, !dbg !19
  %201 = and i1 %194, %200, !dbg !23
  %202 = icmp slt i32 %189, 256, !dbg !19
  %203 = and i1 %194, %202, !dbg !23
  %.frozen = freeze i32 %193, !dbg !38
  %204 = sdiv i32 %.frozen, 16, !dbg !38
  %205 = mul i32 %204, 16, !dbg !39
  %.decomposed = sub i32 %.frozen, %205, !dbg !39
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %207 = insertelement <16 x float> poison, float %117, i64 0, !dbg !35
  %208 = insertelement <16 x float> %207, float %116, i64 1, !dbg !35
  %209 = insertelement <16 x float> %208, float %115, i64 2, !dbg !35
  %210 = insertelement <16 x float> %209, float %114, i64 3, !dbg !35
  %211 = insertelement <16 x float> %210, float %109, i64 4, !dbg !35
  %212 = insertelement <16 x float> %211, float %108, i64 5, !dbg !35
  %213 = insertelement <16 x float> %212, float %107, i64 6, !dbg !35
  %214 = insertelement <16 x float> %213, float %106, i64 7, !dbg !35
  %215 = insertelement <16 x float> %214, float %101, i64 8, !dbg !35
  %216 = insertelement <16 x float> %215, float %100, i64 9, !dbg !35
  %217 = insertelement <16 x float> %216, float %99, i64 10, !dbg !35
  %218 = insertelement <16 x float> %217, float %98, i64 11, !dbg !35
  %219 = insertelement <16 x float> %218, float %93, i64 12, !dbg !35
  %220 = insertelement <16 x float> %219, float %91, i64 13, !dbg !35
  %221 = insertelement <16 x float> %220, float %89, i64 14, !dbg !35
  %222 = insertelement <16 x float> %221, float %87, i64 15, !dbg !35
  %223 = insertelement <16 x i32> poison, i32 %120, i64 0, !dbg !35
  %224 = bitcast <16 x i32> %223 to <16 x float>, !dbg !35
  %225 = shufflevector <16 x float> %224, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !35
  %226 = fadd <16 x float> %222, %225, !dbg !35
  %227 = insertelement <16 x i32> poison, i32 %122, i64 0, !dbg !41
  %228 = bitcast <16 x i32> %227 to <16 x float>, !dbg !41
  %229 = shufflevector <16 x float> %228, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %230 = fsub <16 x float> %226, %229, !dbg !41
  %231 = insertelement <16 x float> poison, float %206, i64 0, !dbg !42
  %232 = shufflevector <16 x float> %231, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %233 = fmul <16 x float> %230, %232, !dbg !42
  %234 = insertelement <16 x i32> poison, i32 %127, i64 0, !dbg !43
  %235 = bitcast <16 x i32> %234 to <16 x float>, !dbg !43
  %236 = shufflevector <16 x float> %235, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %237 = fmul <16 x float> %233, %236, !dbg !43
  %238 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !44
  %239 = bitcast <16 x i32> %238 to <16 x float>, !dbg !44
  %240 = shufflevector <16 x float> %239, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !44
  %241 = fadd <16 x float> %237, %240, !dbg !44
  %242 = fcmp ogt <16 x float> %241, zeroinitializer, !dbg !45
  %243 = extractelement <16 x float> %241, i64 15, !dbg !46
  %244 = fmul float %243, 0x3FC99999A0000000, !dbg !47
  %245 = extractelement <16 x float> %241, i64 14, !dbg !46
  %246 = fmul float %245, 0x3FC99999A0000000, !dbg !47
  %247 = extractelement <16 x float> %241, i64 13, !dbg !46
  %248 = fmul float %247, 0x3FC99999A0000000, !dbg !47
  %249 = extractelement <16 x float> %241, i64 12, !dbg !46
  %250 = fmul float %249, 0x3FC99999A0000000, !dbg !47
  %251 = extractelement <16 x float> %241, i64 11, !dbg !46
  %252 = fmul float %251, 0x3FC99999A0000000, !dbg !47
  %253 = extractelement <16 x float> %241, i64 10, !dbg !46
  %254 = fmul float %253, 0x3FC99999A0000000, !dbg !47
  %255 = extractelement <16 x float> %241, i64 9, !dbg !46
  %256 = fmul float %255, 0x3FC99999A0000000, !dbg !47
  %257 = extractelement <16 x float> %241, i64 8, !dbg !46
  %258 = fmul float %257, 0x3FC99999A0000000, !dbg !47
  %259 = extractelement <16 x float> %241, i64 7, !dbg !46
  %260 = fmul float %259, 0x3FC99999A0000000, !dbg !47
  %261 = extractelement <16 x float> %241, i64 6, !dbg !46
  %262 = fmul float %261, 0x3FC99999A0000000, !dbg !47
  %263 = extractelement <16 x float> %241, i64 5, !dbg !46
  %264 = fmul float %263, 0x3FC99999A0000000, !dbg !47
  %265 = extractelement <16 x float> %241, i64 4, !dbg !46
  %266 = fmul float %265, 0x3FC99999A0000000, !dbg !47
  %267 = extractelement <16 x float> %241, i64 3, !dbg !46
  %268 = fmul float %267, 0x3FC99999A0000000, !dbg !47
  %269 = extractelement <16 x float> %241, i64 2, !dbg !46
  %270 = fmul float %269, 0x3FC99999A0000000, !dbg !47
  %271 = extractelement <16 x float> %241, i64 1, !dbg !46
  %272 = fmul float %271, 0x3FC99999A0000000, !dbg !47
  %273 = extractelement <16 x float> %241, i64 0, !dbg !46
  %274 = fmul float %273, 0x3FC99999A0000000, !dbg !47
  %275 = extractelement <16 x i1> %242, i64 15, !dbg !46
  %276 = select i1 %275, float %243, float %244, !dbg !46
  %277 = extractelement <16 x i1> %242, i64 14, !dbg !46
  %278 = select i1 %277, float %245, float %246, !dbg !46
  %279 = extractelement <16 x i1> %242, i64 13, !dbg !46
  %280 = select i1 %279, float %247, float %248, !dbg !46
  %281 = extractelement <16 x i1> %242, i64 12, !dbg !46
  %282 = select i1 %281, float %249, float %250, !dbg !46
  %283 = extractelement <16 x i1> %242, i64 11, !dbg !46
  %284 = select i1 %283, float %251, float %252, !dbg !46
  %285 = extractelement <16 x i1> %242, i64 10, !dbg !46
  %286 = select i1 %285, float %253, float %254, !dbg !46
  %287 = extractelement <16 x i1> %242, i64 9, !dbg !46
  %288 = select i1 %287, float %255, float %256, !dbg !46
  %289 = extractelement <16 x i1> %242, i64 8, !dbg !46
  %290 = select i1 %289, float %257, float %258, !dbg !46
  %291 = extractelement <16 x i1> %242, i64 7, !dbg !46
  %292 = select i1 %291, float %259, float %260, !dbg !46
  %293 = extractelement <16 x i1> %242, i64 6, !dbg !46
  %294 = select i1 %293, float %261, float %262, !dbg !46
  %295 = extractelement <16 x i1> %242, i64 5, !dbg !46
  %296 = select i1 %295, float %263, float %264, !dbg !46
  %297 = extractelement <16 x i1> %242, i64 4, !dbg !46
  %298 = select i1 %297, float %265, float %266, !dbg !46
  %299 = extractelement <16 x i1> %242, i64 3, !dbg !46
  %300 = select i1 %299, float %267, float %268, !dbg !46
  %301 = extractelement <16 x i1> %242, i64 2, !dbg !46
  %302 = select i1 %301, float %269, float %270, !dbg !46
  %303 = extractelement <16 x i1> %242, i64 1, !dbg !46
  %304 = select i1 %303, float %271, float %272, !dbg !46
  %305 = extractelement <16 x i1> %242, i64 0, !dbg !46
  %306 = select i1 %305, float %273, float %274, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %307 = bitcast float %186 to i32, !dbg !49
  %308 = bitcast float %184 to i32, !dbg !49
  %309 = bitcast float %182 to i32, !dbg !49
  %310 = bitcast float %180 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %40, i1 %47) #4, !dbg !49
  %311 = bitcast float %178 to i32, !dbg !49
  %312 = bitcast float %176 to i32, !dbg !49
  %313 = bitcast float %174 to i32, !dbg !49
  %314 = bitcast float %172 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %312, i32 %313, i32 %314, ptr addrspace(1) %42, i1 %48) #4, !dbg !49
  %315 = bitcast float %170 to i32, !dbg !49
  %316 = bitcast float %168 to i32, !dbg !49
  %317 = bitcast float %166 to i32, !dbg !49
  %318 = bitcast float %164 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %44, i1 %49) #4, !dbg !49
  %319 = bitcast float %162 to i32, !dbg !49
  %320 = bitcast float %160 to i32, !dbg !49
  %321 = bitcast float %158 to i32, !dbg !49
  %322 = bitcast float %156 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %46, i1 %50) #4, !dbg !49
  %323 = shl i32 %189, 4, !dbg !50
  %324 = shl i32 %199, 4, !dbg !50
  %325 = shl i32 %196, 4, !dbg !50
  %326 = shl i32 %190, 4, !dbg !50
  %327 = shl i32 %204, 12, !dbg !51
  %328 = add i32 %327, %.decomposed, !dbg !52
  %329 = add i32 %328, %323, !dbg !53
  %330 = add i32 %328, %324, !dbg !53
  %331 = add i32 %328, %325, !dbg !53
  %332 = add i32 %328, %326, !dbg !53
  %333 = sext i32 %329 to i64, !dbg !54
  %334 = getelementptr float, ptr addrspace(1) %6, i64 %333, !dbg !54
  %335 = sext i32 %330 to i64, !dbg !54
  %336 = getelementptr float, ptr addrspace(1) %6, i64 %335, !dbg !54
  %337 = sext i32 %331 to i64, !dbg !54
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %337, !dbg !54
  %339 = sext i32 %332 to i64, !dbg !54
  %340 = getelementptr float, ptr addrspace(1) %6, i64 %339, !dbg !54
  %341 = shl i32 %12, 4, !dbg !55
  %342 = and i32 %341, 4080, !dbg !55
  %343 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %342, !dbg !55
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %342, !dbg !55
  %345 = bitcast float %276 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !55
  %346 = or disjoint i32 %342, 1, !dbg !55
  %347 = getelementptr float, ptr addrspace(3) %343, i32 %346, !dbg !55
  %348 = bitcast float %278 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !55
  %349 = or disjoint i32 %342, 2, !dbg !55
  %350 = getelementptr float, ptr addrspace(3) %343, i32 %349, !dbg !55
  %351 = bitcast float %280 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !55
  %352 = or disjoint i32 %342, 3, !dbg !55
  %353 = getelementptr float, ptr addrspace(3) %343, i32 %352, !dbg !55
  %354 = bitcast float %282 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !55
  %355 = or disjoint i32 %342, 4, !dbg !55
  %356 = getelementptr float, ptr addrspace(3) %343, i32 %355, !dbg !55
  %357 = bitcast float %284 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !55
  %358 = or disjoint i32 %342, 5, !dbg !55
  %359 = getelementptr float, ptr addrspace(3) %343, i32 %358, !dbg !55
  %360 = bitcast float %286 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #4, !dbg !55
  %361 = or disjoint i32 %342, 6, !dbg !55
  %362 = getelementptr float, ptr addrspace(3) %343, i32 %361, !dbg !55
  %363 = bitcast float %288 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !55
  %364 = or disjoint i32 %342, 7, !dbg !55
  %365 = getelementptr float, ptr addrspace(3) %343, i32 %364, !dbg !55
  %366 = bitcast float %290 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !55
  %367 = or disjoint i32 %342, 8, !dbg !55
  %368 = getelementptr float, ptr addrspace(3) %343, i32 %367, !dbg !55
  %369 = bitcast float %292 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !55
  %370 = or disjoint i32 %342, 9, !dbg !55
  %371 = getelementptr float, ptr addrspace(3) %343, i32 %370, !dbg !55
  %372 = bitcast float %294 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !55
  %373 = or disjoint i32 %342, 10, !dbg !55
  %374 = getelementptr float, ptr addrspace(3) %343, i32 %373, !dbg !55
  %375 = bitcast float %296 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !55
  %376 = or disjoint i32 %342, 11, !dbg !55
  %377 = getelementptr float, ptr addrspace(3) %343, i32 %376, !dbg !55
  %378 = bitcast float %298 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !55
  %379 = or disjoint i32 %342, 12, !dbg !55
  %380 = getelementptr float, ptr addrspace(3) %343, i32 %379, !dbg !55
  %381 = bitcast float %300 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !55
  %382 = or disjoint i32 %342, 13, !dbg !55
  %383 = getelementptr float, ptr addrspace(3) %343, i32 %382, !dbg !55
  %384 = bitcast float %302 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !55
  %385 = or disjoint i32 %342, 14, !dbg !55
  %386 = getelementptr float, ptr addrspace(3) %343, i32 %385, !dbg !55
  %387 = bitcast float %304 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !55
  %388 = or disjoint i32 %342, 15, !dbg !55
  %389 = getelementptr float, ptr addrspace(3) %343, i32 %388, !dbg !55
  %390 = bitcast float %306 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %391 = and i32 %12, 252, !dbg !55
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !55
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %71, !dbg !55
  %394 = or disjoint i32 %71, 1024, !dbg !55
  %395 = lshr exact i32 %394, 2, !dbg !55
  %396 = and i32 %395, 508, !dbg !55
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !55
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %394, !dbg !55
  %399 = load <4 x i32>, ptr addrspace(3) %398, align 16, !dbg !55
  %400 = or disjoint i32 %71, 2048, !dbg !55
  %401 = lshr exact i32 %400, 2, !dbg !55
  %402 = and i32 %401, 764, !dbg !55
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !55
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %400, !dbg !55
  %405 = load <4 x i32>, ptr addrspace(3) %404, align 16, !dbg !55
  %406 = or disjoint i32 %71, 3072, !dbg !55
  %407 = lshr exact i32 %406, 2, !dbg !55
  %408 = and i32 %407, 1020, !dbg !55
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %408, !dbg !55
  %410 = getelementptr inbounds float, ptr addrspace(3) %409, i32 %406, !dbg !55
  %411 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %393, align 16, !dbg !55
  %412 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 4, !dbg !55
  %.extract20 = load i32, ptr addrspace(3) %412, align 4, !dbg !55
  %413 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 8, !dbg !55
  %.extract21 = load i32, ptr addrspace(3) %413, align 8, !dbg !55
  %414 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 12, !dbg !55
  %.extract22 = load i32, ptr addrspace(3) %414, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %334, i1 %203) #4, !dbg !55
  %.extract23 = extractelement <4 x i32> %399, i64 0, !dbg !55
  %.extract24 = extractelement <4 x i32> %399, i64 1, !dbg !55
  %.extract25 = extractelement <4 x i32> %399, i64 2, !dbg !55
  %.extract26 = extractelement <4 x i32> %399, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %336, i1 %201) #4, !dbg !55
  %.extract27 = extractelement <4 x i32> %405, i64 0, !dbg !55
  %.extract28 = extractelement <4 x i32> %405, i64 1, !dbg !55
  %.extract29 = extractelement <4 x i32> %405, i64 2, !dbg !55
  %.extract30 = extractelement <4 x i32> %405, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %338, i1 %198) #4, !dbg !55
  %.extract31 = extractelement <4 x i32> %411, i64 0, !dbg !55
  %.extract32 = extractelement <4 x i32> %411, i64 1, !dbg !55
  %.extract33 = extractelement <4 x i32> %411, i64 2, !dbg !55
  %.extract34 = extractelement <4 x i32> %411, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %340, i1 %195) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2innfelhkdx5brpzizufs3l4bdnjdo25vvxgqlmua67aru33vdu.py", directory: "inductor_cache/2i")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 26, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
!49 = !DILocation(line: 56, column: 48, scope: !7)
!50 = !DILocation(line: 57, column: 33, scope: !7)
!51 = !DILocation(line: 57, column: 43, scope: !7)
!52 = !DILocation(line: 57, column: 30, scope: !7)
!53 = !DILocation(line: 57, column: 38, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 55, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
