; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !15
  %23 = icmp slt i32 %22, 2, !dbg !16
  %24 = ashr exact i32 %16, 1, !dbg !17
  %25 = sdiv i32 %16, 4, !dbg !18
  %26 = sdiv i32 %16, 8, !dbg !19
  %27 = sdiv i32 %17, 8, !dbg !19
  %28 = sdiv i32 %18, 8, !dbg !19
  %29 = sdiv i32 %17, 64, !dbg !20
  %30 = sdiv i32 %18, 64, !dbg !20
  %31 = srem i32 %27, 8, !dbg !21
  %32 = srem i32 %28, 8, !dbg !21
  %33 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !22
  %34 = insertelement <2 x i32> %33, i32 %24, i64 1, !dbg !22
  %35 = srem <2 x i32> %34, splat (i32 2), !dbg !22
  %36 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !23
  %37 = insertelement <4 x i32> %36, i32 %22, i64 1, !dbg !23
  %38 = shufflevector <2 x i32> %35, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !23
  %39 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !23
  %40 = shl <4 x i32> %39, <i32 4, i32 2, i32 1, i32 3>, !dbg !23
  %41 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %40), !dbg !24
  %42 = sext i32 %41 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = and i1 %23, %19, !dbg !26
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %44) #5, !dbg !27
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !27
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !27
  %.idx = shl nuw nsw i32 %13, 3, !dbg !27
  %48 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !27
  %49 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #5, !dbg !27
  %50 = shl nuw nsw i32 %13, 1, !dbg !27
  %51 = or disjoint i32 %50, 2, !dbg !27
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !27
  %53 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !27
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !27
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !27
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !27
  %56 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !27
  %57 = load float, ptr addrspace(3) %56, align 8, !dbg !27
  %58 = sext i32 %29 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !28
  %60 = sext i32 %30 to i64, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #5, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %21) #5, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #5, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %21) #5, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = sext i32 %31 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !32
  %72 = sext i32 %32 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %20) #5, !dbg !33
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %21) #5, !dbg !33
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #5, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #5, !dbg !35
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float 1.280000e+02) #5, !dbg !36
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.280000e+02) #5, !dbg !36
  %82 = fadd float %80, 0x3EE4F8B580000000, !dbg !37
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !37
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %84, 0, !dbg !38
  br i1 %.not.i, label %87, label %85, !dbg !38

85:                                               ; preds = %8
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

87:                                               ; preds = %8
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %85, %87
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i3 = icmp eq i32 %89, 0, !dbg !38
  br i1 %.not.i3, label %92, label %90, !dbg !38

90:                                               ; preds = %__nv_rsqrtf.exit
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !38
  br label %__nv_rsqrtf.exit5, !dbg !38

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !38
  br label %__nv_rsqrtf.exit5, !dbg !38

__nv_rsqrtf.exit5:                                ; preds = %90, %92
  %.0.i4 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !38
  %94 = bitcast i32 %63 to float, !dbg !29
  %95 = fsub float %57, %94, !dbg !39
  %96 = bitcast i32 %62 to float, !dbg !29
  %97 = fsub float %55, %96, !dbg !39
  %98 = bitcast i32 %79 to float, !dbg !35
  %99 = bitcast i32 %78 to float, !dbg !35
  %100 = bitcast i32 %75 to float, !dbg !33
  %101 = bitcast i32 %74 to float, !dbg !33
  %102 = and i1 %23, %21, !dbg !26
  %103 = and i1 %23, %20, !dbg !26
  %104 = fmul float %97, %.0.i, !dbg !40
  %105 = fmul float %95, %.0.i4, !dbg !40
  %106 = fmul float %104, %101, !dbg !41
  %107 = fmul float %105, %100, !dbg !41
  %108 = fadd float %106, %99, !dbg !42
  %109 = fadd float %107, %98, !dbg !42
  %110 = shl i32 %17, 1, !dbg !43
  %111 = shl i32 %18, 1, !dbg !43
  %112 = add i32 %110, %22, !dbg !44
  %113 = add i32 %111, %22, !dbg !44
  %114 = sext i32 %112 to i64, !dbg !45
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !45
  %116 = sext i32 %113 to i64, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !45
  %118 = bitcast float %108 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %115, i1 %103) #5, !dbg !46
  %119 = bitcast float %109 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %117, i1 %102) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdkcs4ylsqbgu2tajtb2zn6huzl3w7fxbgnyvvmhueaqalpofrg.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_poi_fused_clone_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_13", linkageName: "triton_poi_fused_clone_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 26, scope: !7)
!23 = !DILocation(line: 36, column: 59, scope: !7)
!24 = !DILocation(line: 36, column: 56, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 72, scope: !7)
!27 = !DILocation(line: 36, column: 64, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 35, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 27, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 18, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 32, scope: !7)
!44 = !DILocation(line: 50, column: 30, scope: !7)
!45 = !DILocation(line: 50, column: 25, scope: !7)
!46 = !DILocation(line: 50, column: 44, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
