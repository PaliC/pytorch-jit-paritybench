; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = icmp slt i32 %18, 256, !dbg !14
  %21 = icmp slt i32 %19, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 5, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = icmp slt i32 %24, 24, !dbg !18
  %26 = mul i32 %18, 24, !dbg !19
  %27 = mul i32 %19, 24, !dbg !19
  %28 = add i32 %24, %26, !dbg !20
  %29 = add i32 %24, %27, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = and i1 %20, %25, !dbg !22
  %35 = and i1 %21, %25, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %34) #4, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %35) #4, !dbg !25
  %42 = sext i32 %24 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #4, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %25) #4, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = bitcast i32 %50 to float, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !30
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %25) #4, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !32
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !33
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !34
  %62 = fadd float %54, 0x3EE4F8B580000000, !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %63, 0, !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %64, 0, !dbg !35
  br i1 %.not.i, label %70, label %65, !dbg !35

65:                                               ; preds = %9
  br i1 %.not1.i, label %68, label %66, !dbg !35

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !35

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %75, 0, !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %76, 0, !dbg !35
  br i1 %.not.i15, label %82, label %77, !dbg !35

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %85, label %83, !dbg !35

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %78, %80, %83, %85
  %.0.i17 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %87, 0, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %88, 0, !dbg !35
  br i1 %.not.i20, label %94, label %89, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

94:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %97, label %95, !dbg !35

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %90, %92, %95, %97
  %.0.i22 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %99, 0, !dbg !35
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %100, 0, !dbg !35
  br i1 %.not.i25, label %106, label %101, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

106:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %102, %104, %107, %109
  %.0.i27 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fsub float %112, %114, !dbg !36
  %116 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fsub float %117, %119, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = fsub float %122, %124, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %127 = bitcast i32 %126 to float, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = fsub float %127, %129, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fsub float %132, %114, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = fsub float %135, %119, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %138 = bitcast i32 %137 to float, !dbg !25
  %139 = fsub float %138, %124, !dbg !36
  %140 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = fsub float %141, %129, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !33
  %144 = bitcast i32 %143 to float, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !33
  %148 = bitcast i32 %147 to float, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !33
  %150 = bitcast i32 %149 to float, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !31
  %152 = bitcast i32 %151 to float, !dbg !31
  %153 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !31
  %154 = bitcast i32 %153 to float, !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !31
  %156 = bitcast i32 %155 to float, !dbg !31
  %157 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %160 = bitcast i32 %159 to float, !dbg !23
  %161 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %162 = bitcast i32 %161 to float, !dbg !23
  %163 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %164 = bitcast i32 %163 to float, !dbg !23
  %165 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %166 = bitcast i32 %165 to float, !dbg !23
  %167 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %168 = bitcast i32 %167 to float, !dbg !23
  %169 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %170 = bitcast i32 %169 to float, !dbg !23
  %171 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %172 = bitcast i32 %171 to float, !dbg !23
  %173 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %174 = bitcast i32 %173 to float, !dbg !23
  %175 = or disjoint i32 %23, %15, !dbg !17
  %176 = icmp slt i32 %175, 24, !dbg !18
  %177 = or disjoint i32 %11, %17, !dbg !13
  %178 = icmp slt i32 %177, 256, !dbg !14
  %179 = and i1 %178, %176, !dbg !22
  %180 = or disjoint i32 %23, %14, !dbg !17
  %181 = icmp slt i32 %180, 24, !dbg !18
  %182 = and i1 %178, %181, !dbg !22
  %.frozen = freeze i32 %177, !dbg !37
  %183 = sdiv i32 %.frozen, 64, !dbg !37
  %184 = mul i32 %183, 64, !dbg !38
  %.decomposed = sub i32 %.frozen, %184, !dbg !38
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !39
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !39
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !39
  %189 = fmul float %142, %185, !dbg !40
  %190 = fmul float %139, %186, !dbg !40
  %191 = fmul float %136, %187, !dbg !40
  %192 = fmul float %133, %188, !dbg !40
  %193 = fmul float %130, %185, !dbg !40
  %194 = fmul float %125, %186, !dbg !40
  %195 = fmul float %120, %187, !dbg !40
  %196 = fmul float %115, %188, !dbg !40
  %197 = fmul float %189, %158, !dbg !41
  %198 = fmul float %190, %156, !dbg !41
  %199 = fmul float %191, %154, !dbg !41
  %200 = fmul float %192, %152, !dbg !41
  %201 = fmul float %193, %158, !dbg !41
  %202 = fmul float %194, %156, !dbg !41
  %203 = fmul float %195, %154, !dbg !41
  %204 = fmul float %196, %152, !dbg !41
  %205 = fadd float %197, %150, !dbg !42
  %206 = fadd float %198, %148, !dbg !42
  %207 = fadd float %199, %146, !dbg !42
  %208 = fadd float %200, %144, !dbg !42
  %209 = fadd float %201, %150, !dbg !42
  %210 = fadd float %202, %148, !dbg !42
  %211 = fadd float %203, %146, !dbg !42
  %212 = fadd float %204, %144, !dbg !42
  %213 = fadd float %205, %174, !dbg !43
  %214 = fadd float %206, %172, !dbg !43
  %215 = fadd float %207, %170, !dbg !43
  %216 = fadd float %208, %168, !dbg !43
  %217 = fadd float %209, %166, !dbg !43
  %218 = fadd float %210, %164, !dbg !43
  %219 = fadd float %211, %162, !dbg !43
  %220 = fadd float %212, %160, !dbg !43
  %221 = shl i32 %180, 6, !dbg !44
  %222 = shl i32 %175, 6, !dbg !44
  %223 = mul i32 %183, 1536, !dbg !45
  %224 = add i32 %223, %.decomposed, !dbg !46
  %225 = add i32 %224, %221, !dbg !47
  %226 = add i32 %224, %222, !dbg !47
  %227 = sext i32 %225 to i64, !dbg !48
  %228 = getelementptr float, ptr addrspace(1) %6, i64 %227, !dbg !48
  %229 = sext i32 %226 to i64, !dbg !48
  %230 = getelementptr float, ptr addrspace(1) %6, i64 %229, !dbg !48
  %231 = shl i32 %12, 7, !dbg !49
  %232 = and i32 %231, 896, !dbg !49
  %233 = or disjoint i32 %232, %14, !dbg !49
  %234 = and i32 %16, 508, !dbg !49
  %235 = lshr exact i32 %232, 3, !dbg !49
  %236 = or disjoint i32 %235, %233, !dbg !49
  %237 = zext nneg i32 %236 to i64, !dbg !49
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %237, !dbg !49
  %239 = bitcast float %213 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !49
  %240 = or disjoint i32 %233, 32, !dbg !49
  %241 = lshr i32 %240, 3, !dbg !49
  %242 = and i32 %241, 116, !dbg !49
  %243 = add nuw nsw i32 %242, %240, !dbg !49
  %244 = zext nneg i32 %243 to i64, !dbg !49
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !49
  %246 = bitcast float %214 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !49
  %247 = or disjoint i32 %233, 64, !dbg !49
  %248 = lshr i32 %247, 3, !dbg !49
  %249 = and i32 %248, 120, !dbg !49
  %250 = add nuw nsw i32 %249, %247, !dbg !49
  %251 = zext nneg i32 %250 to i64, !dbg !49
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !49
  %253 = bitcast float %215 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !49
  %254 = or disjoint i32 %233, 96, !dbg !49
  %255 = lshr i32 %254, 3, !dbg !49
  %256 = and i32 %255, 124, !dbg !49
  %257 = add nuw nsw i32 %256, %254, !dbg !49
  %258 = zext nneg i32 %257 to i64, !dbg !49
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %258, !dbg !49
  %260 = bitcast float %216 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !49
  %261 = or disjoint i32 %233, 16, !dbg !49
  %262 = add nuw nsw i32 %261, %235, !dbg !49
  %263 = zext nneg i32 %262 to i64, !dbg !49
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %263, !dbg !49
  %265 = bitcast float %217 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !49
  %266 = or disjoint i32 %233, 48, !dbg !49
  %267 = lshr i32 %266, 3, !dbg !49
  %268 = and i32 %267, 116, !dbg !49
  %269 = add nuw nsw i32 %268, %266, !dbg !49
  %270 = zext nneg i32 %269 to i64, !dbg !49
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !49
  %272 = bitcast float %218 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !49
  %273 = or disjoint i32 %233, 80, !dbg !49
  %274 = lshr i32 %273, 3, !dbg !49
  %275 = and i32 %274, 120, !dbg !49
  %276 = add nuw nsw i32 %275, %273, !dbg !49
  %277 = zext nneg i32 %276 to i64, !dbg !49
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %277, !dbg !49
  %279 = bitcast float %219 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !49
  %280 = or disjoint i32 %233, 112, !dbg !49
  %281 = lshr i32 %280, 3, !dbg !49
  %282 = and i32 %281, 124, !dbg !49
  %283 = add nuw nsw i32 %282, %280, !dbg !49
  %284 = zext nneg i32 %283 to i64, !dbg !49
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !49
  %286 = bitcast float %220 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %287 = lshr i32 %16, 3, !dbg !49
  %288 = and i32 %287, 60, !dbg !49
  %289 = add nuw nsw i32 %288, %234, !dbg !49
  %290 = zext nneg i32 %289 to i64, !dbg !49
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %290, !dbg !49
  %292 = or disjoint i32 %234, 512, !dbg !49
  %293 = lshr i32 %292, 3, !dbg !49
  %294 = and i32 %293, 124, !dbg !49
  %295 = add nuw nsw i32 %294, %292, !dbg !49
  %296 = zext nneg i32 %295 to i64, !dbg !49
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %296, !dbg !49
  %298 = load <4 x i32>, ptr addrspace(3) %297, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %291, align 16, !dbg !49
  %299 = getelementptr inbounds i8, ptr addrspace(3) %291, i64 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %299, align 4, !dbg !49
  %300 = getelementptr inbounds i8, ptr addrspace(3) %291, i64 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %300, align 8, !dbg !49
  %301 = getelementptr inbounds i8, ptr addrspace(3) %291, i64 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %301, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %228, i1 %182) #4, !dbg !49
  %.extract11 = extractelement <4 x i32> %298, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %298, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %298, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %298, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %230, i1 %179) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c453i37kdt2mdicfkqvw56da53ahpwgvzo7h5hrddaqshnjkactq.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 50, column: 33, scope: !7)
!45 = !DILocation(line: 50, column: 43, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 38, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 55, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
