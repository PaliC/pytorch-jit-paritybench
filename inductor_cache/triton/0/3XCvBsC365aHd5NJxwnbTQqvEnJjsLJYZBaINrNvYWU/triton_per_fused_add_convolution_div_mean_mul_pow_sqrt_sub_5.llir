; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = and i32 %12, 31, !dbg !12
  %19 = or disjoint i32 %11, %14, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = or disjoint i32 %11, %17, !dbg !13
  %23 = icmp slt i32 %19, 1024, !dbg !14
  %24 = icmp slt i32 %20, 1024, !dbg !14
  %25 = icmp slt i32 %21, 1024, !dbg !14
  %26 = icmp slt i32 %22, 1024, !dbg !14
  %27 = shl i32 %12, 2, !dbg !15
  %28 = and i32 %27, 124, !dbg !15
  %29 = icmp samesign ult i32 %28, 96, !dbg !16
  %30 = mul i32 %19, 96, !dbg !17
  %31 = mul i32 %20, 96, !dbg !17
  %32 = mul i32 %21, 96, !dbg !17
  %33 = mul i32 %22, 96, !dbg !17
  %34 = add i32 %30, %28, !dbg !18
  %35 = add i32 %31, %28, !dbg !18
  %36 = add i32 %32, %28, !dbg !18
  %37 = add i32 %33, %28, !dbg !18
  %38 = sext i32 %34 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %35 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = sext i32 %36 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = sext i32 %37 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !19
  %46 = and i1 %29, %23, !dbg !20
  %47 = and i1 %29, %24, !dbg !20
  %48 = and i1 %29, %25, !dbg !20
  %49 = and i1 %29, %26, !dbg !20
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #5, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !21
  %55 = bitcast i32 %51 to float, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !21
  %64 = bitcast i32 %60 to float, !dbg !21
  %65 = bitcast i32 %61 to float, !dbg !21
  %66 = bitcast i32 %62 to float, !dbg !21
  %67 = bitcast i32 %63 to float, !dbg !21
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #5, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !21
  %73 = bitcast i32 %69 to float, !dbg !21
  %74 = bitcast i32 %70 to float, !dbg !21
  %75 = bitcast i32 %71 to float, !dbg !21
  %76 = bitcast i32 %72 to float, !dbg !21
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #5, !dbg !21
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !21
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !21
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !21
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !21
  %82 = bitcast i32 %78 to float, !dbg !21
  %83 = bitcast i32 %79 to float, !dbg !21
  %84 = bitcast i32 %80 to float, !dbg !21
  %85 = bitcast i32 %81 to float, !dbg !21
  %86 = zext nneg i32 %28 to i64, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !22
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !23
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !23
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !23
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !23
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !23
  %93 = bitcast i32 %89 to float, !dbg !23
  %94 = bitcast i32 %90 to float, !dbg !23
  %95 = bitcast i32 %91 to float, !dbg !23
  %96 = bitcast i32 %92 to float, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !24
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %86, !dbg !26
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !27
  %101 = fadd float %55, %93, !dbg !28
  %102 = fadd float %56, %94, !dbg !28
  %103 = fadd float %57, %95, !dbg !28
  %104 = fadd float %58, %96, !dbg !28
  %105 = fadd float %64, %93, !dbg !28
  %106 = fadd float %65, %94, !dbg !28
  %107 = fadd float %66, %95, !dbg !28
  %108 = fadd float %67, %96, !dbg !28
  %109 = fadd float %73, %93, !dbg !28
  %110 = fadd float %74, %94, !dbg !28
  %111 = fadd float %75, %95, !dbg !28
  %112 = fadd float %76, %96, !dbg !28
  %113 = fadd float %82, %93, !dbg !28
  %114 = fadd float %83, %94, !dbg !28
  %115 = fadd float %84, %95, !dbg !28
  %116 = fadd float %85, %96, !dbg !28
  %117 = fadd float %101, %102, !dbg !29
  %118 = fadd float %103, %117, !dbg !29
  %119 = fadd float %104, %118, !dbg !29
  %120 = select i1 %46, float %119, float 0.000000e+00, !dbg !29
  %121 = fadd float %105, %106, !dbg !29
  %122 = fadd float %107, %121, !dbg !29
  %123 = fadd float %108, %122, !dbg !29
  %124 = select i1 %47, float %123, float 0.000000e+00, !dbg !29
  %125 = fadd float %109, %110, !dbg !29
  %126 = fadd float %111, %125, !dbg !29
  %127 = fadd float %112, %126, !dbg !29
  %128 = select i1 %48, float %127, float 0.000000e+00, !dbg !29
  %129 = fadd float %113, %114, !dbg !29
  %130 = fadd float %115, %129, !dbg !29
  %131 = fadd float %116, %130, !dbg !29
  %132 = select i1 %49, float %131, float 0.000000e+00, !dbg !29
  %133 = bitcast float %120 to i32, !dbg !34
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = fadd float %120, %135, !dbg !29
  %137 = bitcast float %136 to i32, !dbg !34
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !34
  %139 = bitcast i32 %138 to float, !dbg !34
  %140 = fadd float %136, %139, !dbg !29
  %141 = bitcast float %140 to i32, !dbg !34
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = fadd float %140, %143, !dbg !29
  %145 = bitcast float %144 to i32, !dbg !34
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !34
  %147 = bitcast i32 %146 to float, !dbg !34
  %148 = fadd float %144, %147, !dbg !29
  %149 = bitcast float %148 to i32, !dbg !34
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = fadd float %148, %151, !dbg !29
  %153 = bitcast float %124 to i32, !dbg !34
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !34
  %155 = bitcast i32 %154 to float, !dbg !34
  %156 = fadd float %124, %155, !dbg !29
  %157 = bitcast float %156 to i32, !dbg !34
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = fadd float %156, %159, !dbg !29
  %161 = bitcast float %160 to i32, !dbg !34
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !34
  %163 = bitcast i32 %162 to float, !dbg !34
  %164 = fadd float %160, %163, !dbg !29
  %165 = bitcast float %164 to i32, !dbg !34
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !34
  %167 = bitcast i32 %166 to float, !dbg !34
  %168 = fadd float %164, %167, !dbg !29
  %169 = bitcast float %168 to i32, !dbg !34
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !34
  %171 = bitcast i32 %170 to float, !dbg !34
  %172 = fadd float %168, %171, !dbg !29
  %173 = bitcast float %128 to i32, !dbg !34
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 16, i32 31), !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = fadd float %128, %175, !dbg !29
  %177 = bitcast float %176 to i32, !dbg !34
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = fadd float %176, %179, !dbg !29
  %181 = bitcast float %180 to i32, !dbg !34
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !34
  %183 = bitcast i32 %182 to float, !dbg !34
  %184 = fadd float %180, %183, !dbg !29
  %185 = bitcast float %184 to i32, !dbg !34
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 2, i32 31), !dbg !34
  %187 = bitcast i32 %186 to float, !dbg !34
  %188 = fadd float %184, %187, !dbg !29
  %189 = bitcast float %188 to i32, !dbg !34
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !34
  %191 = bitcast i32 %190 to float, !dbg !34
  %192 = fadd float %188, %191, !dbg !29
  %193 = bitcast float %132 to i32, !dbg !34
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 16, i32 31), !dbg !34
  %195 = bitcast i32 %194 to float, !dbg !34
  %196 = fadd float %132, %195, !dbg !29
  %197 = bitcast float %196 to i32, !dbg !34
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !34
  %199 = bitcast i32 %198 to float, !dbg !34
  %200 = fadd float %196, %199, !dbg !29
  %201 = bitcast float %200 to i32, !dbg !34
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !34
  %203 = bitcast i32 %202 to float, !dbg !34
  %204 = fadd float %200, %203, !dbg !29
  %205 = bitcast float %204 to i32, !dbg !34
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !34
  %207 = bitcast i32 %206 to float, !dbg !34
  %208 = fadd float %204, %207, !dbg !29
  %209 = bitcast float %208 to i32, !dbg !34
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !34
  %211 = bitcast i32 %210 to float, !dbg !34
  %212 = fadd float %208, %211, !dbg !29
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %214 = bitcast float %152 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #5, !dbg !35
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  %216 = bitcast float %172 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #5, !dbg !35
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %218 = bitcast float %192 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #5, !dbg !35
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !35
  %220 = bitcast float %212 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !35
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !35
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float 9.600000e+01) #5, !dbg !35
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 9.600000e+01) #5, !dbg !35
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 9.600000e+01) #5, !dbg !35
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float 9.600000e+01) #5, !dbg !35
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float 9.600000e+01) #5, !dbg !35
  %228 = fsub float %101, %224, !dbg !36
  %229 = fsub float %102, %224, !dbg !36
  %230 = fsub float %103, %224, !dbg !36
  %231 = fsub float %104, %224, !dbg !36
  %232 = fsub float %105, %225, !dbg !36
  %233 = fsub float %106, %225, !dbg !36
  %234 = fsub float %107, %225, !dbg !36
  %235 = fsub float %108, %225, !dbg !36
  %236 = fsub float %109, %226, !dbg !36
  %237 = fsub float %110, %226, !dbg !36
  %238 = fsub float %111, %226, !dbg !36
  %239 = fsub float %112, %226, !dbg !36
  %240 = fsub float %113, %227, !dbg !36
  %241 = fsub float %114, %227, !dbg !36
  %242 = fsub float %115, %227, !dbg !36
  %243 = fsub float %116, %227, !dbg !36
  %244 = fmul float %228, %228, !dbg !37
  %245 = fmul float %229, %229, !dbg !37
  %246 = fmul float %230, %230, !dbg !37
  %247 = fmul float %231, %231, !dbg !37
  %248 = fmul float %232, %232, !dbg !37
  %249 = fmul float %233, %233, !dbg !37
  %250 = fmul float %234, %234, !dbg !37
  %251 = fmul float %235, %235, !dbg !37
  %252 = fmul float %236, %236, !dbg !37
  %253 = fmul float %237, %237, !dbg !37
  %254 = fmul float %238, %238, !dbg !37
  %255 = fmul float %239, %239, !dbg !37
  %256 = fmul float %240, %240, !dbg !37
  %257 = fmul float %241, %241, !dbg !37
  %258 = fmul float %242, %242, !dbg !37
  %259 = fmul float %243, %243, !dbg !37
  %260 = fadd float %244, %245, !dbg !38
  %261 = fadd float %246, %260, !dbg !38
  %262 = fadd float %247, %261, !dbg !38
  %263 = select i1 %46, float %262, float 0.000000e+00, !dbg !38
  %264 = fadd float %248, %249, !dbg !38
  %265 = fadd float %250, %264, !dbg !38
  %266 = fadd float %251, %265, !dbg !38
  %267 = select i1 %47, float %266, float 0.000000e+00, !dbg !38
  %268 = fadd float %252, %253, !dbg !38
  %269 = fadd float %254, %268, !dbg !38
  %270 = fadd float %255, %269, !dbg !38
  %271 = select i1 %48, float %270, float 0.000000e+00, !dbg !38
  %272 = fadd float %256, %257, !dbg !38
  %273 = fadd float %258, %272, !dbg !38
  %274 = fadd float %259, %273, !dbg !38
  %275 = select i1 %49, float %274, float 0.000000e+00, !dbg !38
  %276 = bitcast float %263 to i32, !dbg !40
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !40
  %278 = bitcast i32 %277 to float, !dbg !40
  %279 = fadd float %263, %278, !dbg !38
  %280 = bitcast float %279 to i32, !dbg !40
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !40
  %282 = bitcast i32 %281 to float, !dbg !40
  %283 = fadd float %279, %282, !dbg !38
  %284 = bitcast float %283 to i32, !dbg !40
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !40
  %286 = bitcast i32 %285 to float, !dbg !40
  %287 = fadd float %283, %286, !dbg !38
  %288 = bitcast float %287 to i32, !dbg !40
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !40
  %290 = bitcast i32 %289 to float, !dbg !40
  %291 = fadd float %287, %290, !dbg !38
  %292 = bitcast float %291 to i32, !dbg !40
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !40
  %294 = bitcast i32 %293 to float, !dbg !40
  %295 = fadd float %291, %294, !dbg !38
  %296 = bitcast float %267 to i32, !dbg !40
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 16, i32 31), !dbg !40
  %298 = bitcast i32 %297 to float, !dbg !40
  %299 = fadd float %267, %298, !dbg !38
  %300 = bitcast float %299 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = fadd float %299, %302, !dbg !38
  %304 = bitcast float %303 to i32, !dbg !40
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !40
  %306 = bitcast i32 %305 to float, !dbg !40
  %307 = fadd float %303, %306, !dbg !38
  %308 = bitcast float %307 to i32, !dbg !40
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !40
  %310 = bitcast i32 %309 to float, !dbg !40
  %311 = fadd float %307, %310, !dbg !38
  %312 = bitcast float %311 to i32, !dbg !40
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !40
  %314 = bitcast i32 %313 to float, !dbg !40
  %315 = fadd float %311, %314, !dbg !38
  %316 = bitcast float %271 to i32, !dbg !40
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 16, i32 31), !dbg !40
  %318 = bitcast i32 %317 to float, !dbg !40
  %319 = fadd float %271, %318, !dbg !38
  %320 = bitcast float %319 to i32, !dbg !40
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !40
  %322 = bitcast i32 %321 to float, !dbg !40
  %323 = fadd float %319, %322, !dbg !38
  %324 = bitcast float %323 to i32, !dbg !40
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !40
  %326 = bitcast i32 %325 to float, !dbg !40
  %327 = fadd float %323, %326, !dbg !38
  %328 = bitcast float %327 to i32, !dbg !40
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !40
  %330 = bitcast i32 %329 to float, !dbg !40
  %331 = fadd float %327, %330, !dbg !38
  %332 = bitcast float %331 to i32, !dbg !40
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !40
  %334 = bitcast i32 %333 to float, !dbg !40
  %335 = fadd float %331, %334, !dbg !38
  %336 = bitcast float %275 to i32, !dbg !40
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 16, i32 31), !dbg !40
  %338 = bitcast i32 %337 to float, !dbg !40
  %339 = fadd float %275, %338, !dbg !38
  %340 = bitcast float %339 to i32, !dbg !40
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !40
  %342 = bitcast i32 %341 to float, !dbg !40
  %343 = fadd float %339, %342, !dbg !38
  %344 = bitcast float %343 to i32, !dbg !40
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !40
  %346 = bitcast i32 %345 to float, !dbg !40
  %347 = fadd float %343, %346, !dbg !38
  %348 = bitcast float %347 to i32, !dbg !40
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !40
  %350 = bitcast i32 %349 to float, !dbg !40
  %351 = fadd float %347, %350, !dbg !38
  %352 = bitcast float %351 to i32, !dbg !40
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 1, i32 31), !dbg !40
  %354 = bitcast i32 %353 to float, !dbg !40
  %355 = fadd float %351, %354, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %356 = bitcast float %295 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %356, i1 true) #5, !dbg !41
  %357 = bitcast float %315 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %357, i1 true) #5, !dbg !41
  %358 = bitcast float %335 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %358, i1 true) #5, !dbg !41
  %359 = bitcast float %355 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %359, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %360 = load float, ptr addrspace(3) %221, align 4, !dbg !41
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float 9.600000e+01) #5, !dbg !42
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float 9.600000e+01) #5, !dbg !42
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float 9.600000e+01) #5, !dbg !42
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float 9.600000e+01) #5, !dbg !42
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float 9.600000e+01) #5, !dbg !42
  %366 = fadd float %361, 0x3EB0C6F7A0000000, !dbg !43
  %367 = fadd float %362, 0x3EB0C6F7A0000000, !dbg !43
  %368 = fadd float %363, 0x3EB0C6F7A0000000, !dbg !43
  %369 = fadd float %364, 0x3EB0C6F7A0000000, !dbg !43
  %370 = fadd float %365, 0x3EB0C6F7A0000000, !dbg !43
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %371, 0, !dbg !41
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %372, 0, !dbg !41
  br i1 %.not.i, label %378, label %373, !dbg !41

373:                                              ; preds = %9
  br i1 %.not1.i, label %376, label %374, !dbg !41

374:                                              ; preds = %373
  %375 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %366) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

376:                                              ; preds = %373
  %377 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %366) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

378:                                              ; preds = %9
  br i1 %.not1.i, label %381, label %379, !dbg !41

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.f(float %366) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.f(float %366) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %374, %376, %379, %381
  %.0.i = phi float [ %375, %374 ], [ %377, %376 ], [ %380, %379 ], [ %382, %381 ], !dbg !41
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i16 = icmp eq i32 %389, 0, !dbg !41
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i19 = icmp eq i32 %390, 0, !dbg !41
  br i1 %.not.i16, label %396, label %391, !dbg !41

391:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %394, label %392, !dbg !41

392:                                              ; preds = %391
  %393 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %367) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

394:                                              ; preds = %391
  %395 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %367) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

396:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %399, label %397, !dbg !41

397:                                              ; preds = %396
  %398 = tail call float @llvm.nvvm.sqrt.rn.f(float %367) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

399:                                              ; preds = %396
  %400 = tail call float @llvm.nvvm.sqrt.approx.f(float %367) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

__nv_sqrtf.exit20:                                ; preds = %392, %394, %397, %399
  %.0.i18 = phi float [ %393, %392 ], [ %395, %394 ], [ %398, %397 ], [ %400, %399 ], !dbg !41
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i36 = icmp eq i32 %407, 0, !dbg !41
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i39 = icmp eq i32 %408, 0, !dbg !41
  br i1 %.not.i36, label %414, label %409, !dbg !41

409:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i39, label %412, label %410, !dbg !41

410:                                              ; preds = %409
  %411 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %368) #5, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

412:                                              ; preds = %409
  %413 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %368) #5, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

414:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i39, label %417, label %415, !dbg !41

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.f(float %368) #5, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.f(float %368) #5, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

__nv_sqrtf.exit40:                                ; preds = %410, %412, %415, %417
  %.0.i38 = phi float [ %411, %410 ], [ %413, %412 ], [ %416, %415 ], [ %418, %417 ], !dbg !41
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i56 = icmp eq i32 %425, 0, !dbg !41
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i59 = icmp eq i32 %426, 0, !dbg !41
  br i1 %.not.i56, label %432, label %427, !dbg !41

427:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i59, label %430, label %428, !dbg !41

428:                                              ; preds = %427
  %429 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %369) #5, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

430:                                              ; preds = %427
  %431 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %369) #5, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

432:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i59, label %435, label %433, !dbg !41

433:                                              ; preds = %432
  %434 = tail call float @llvm.nvvm.sqrt.rn.f(float %369) #5, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

435:                                              ; preds = %432
  %436 = tail call float @llvm.nvvm.sqrt.approx.f(float %369) #5, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

__nv_sqrtf.exit60:                                ; preds = %428, %430, %433, %435
  %.0.i58 = phi float [ %429, %428 ], [ %431, %430 ], [ %434, %433 ], [ %436, %435 ], !dbg !41
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i76 = icmp eq i32 %443, 0, !dbg !41
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i79 = icmp eq i32 %444, 0, !dbg !41
  br i1 %.not.i76, label %450, label %445, !dbg !41

445:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i79, label %448, label %446, !dbg !41

446:                                              ; preds = %445
  %447 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %370) #5, !dbg !41
  br label %__nv_sqrtf.exit80, !dbg !41

448:                                              ; preds = %445
  %449 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %370) #5, !dbg !41
  br label %__nv_sqrtf.exit80, !dbg !41

450:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i79, label %453, label %451, !dbg !41

451:                                              ; preds = %450
  %452 = tail call float @llvm.nvvm.sqrt.rn.f(float %370) #5, !dbg !41
  br label %__nv_sqrtf.exit80, !dbg !41

453:                                              ; preds = %450
  %454 = tail call float @llvm.nvvm.sqrt.approx.f(float %370) #5, !dbg !41
  br label %__nv_sqrtf.exit80, !dbg !41

__nv_sqrtf.exit80:                                ; preds = %446, %448, %451, %453
  %.0.i78 = phi float [ %447, %446 ], [ %449, %448 ], [ %452, %451 ], [ %454, %453 ], !dbg !41
  %455 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !27
  %456 = bitcast i32 %455 to float, !dbg !27
  %457 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !27
  %458 = bitcast i32 %457 to float, !dbg !27
  %459 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !27
  %460 = bitcast i32 %459 to float, !dbg !27
  %461 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !27
  %462 = bitcast i32 %461 to float, !dbg !27
  %463 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !25
  %464 = bitcast i32 %463 to float, !dbg !25
  %465 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !25
  %466 = bitcast i32 %465 to float, !dbg !25
  %467 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !25
  %468 = bitcast i32 %467 to float, !dbg !25
  %469 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !25
  %470 = bitcast i32 %469 to float, !dbg !25
  %471 = or disjoint i32 %11, %18, !dbg !13
  %472 = icmp slt i32 %471, 1024, !dbg !14
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %.0.i18) #5, !dbg !44
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %.0.i18) #5, !dbg !44
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %.0.i18) #5, !dbg !44
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %.0.i18) #5, !dbg !44
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %.0.i38) #5, !dbg !44
  %478 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %.0.i38) #5, !dbg !44
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %.0.i38) #5, !dbg !44
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %.0.i38) #5, !dbg !44
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %.0.i58) #5, !dbg !44
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %.0.i58) #5, !dbg !44
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %.0.i58) #5, !dbg !44
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %.0.i58) #5, !dbg !44
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %.0.i78) #5, !dbg !44
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %.0.i78) #5, !dbg !44
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %.0.i78) #5, !dbg !44
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %.0.i78) #5, !dbg !44
  %489 = fmul float %473, %470, !dbg !45
  %490 = fmul float %474, %468, !dbg !45
  %491 = fmul float %475, %466, !dbg !45
  %492 = fmul float %476, %464, !dbg !45
  %493 = fmul float %477, %470, !dbg !45
  %494 = fmul float %478, %468, !dbg !45
  %495 = fmul float %479, %466, !dbg !45
  %496 = fmul float %480, %464, !dbg !45
  %497 = fmul float %481, %470, !dbg !45
  %498 = fmul float %482, %468, !dbg !45
  %499 = fmul float %483, %466, !dbg !45
  %500 = fmul float %484, %464, !dbg !45
  %501 = fmul float %485, %470, !dbg !45
  %502 = fmul float %486, %468, !dbg !45
  %503 = fmul float %487, %466, !dbg !45
  %504 = fmul float %488, %464, !dbg !45
  %505 = fadd float %489, %462, !dbg !46
  %506 = fadd float %490, %460, !dbg !46
  %507 = fadd float %491, %458, !dbg !46
  %508 = fadd float %492, %456, !dbg !46
  %509 = fadd float %493, %462, !dbg !46
  %510 = fadd float %494, %460, !dbg !46
  %511 = fadd float %495, %458, !dbg !46
  %512 = fadd float %496, %456, !dbg !46
  %513 = fadd float %497, %462, !dbg !46
  %514 = fadd float %498, %460, !dbg !46
  %515 = fadd float %499, %458, !dbg !46
  %516 = fadd float %500, %456, !dbg !46
  %517 = fadd float %501, %462, !dbg !46
  %518 = fadd float %502, %460, !dbg !46
  %519 = fadd float %503, %458, !dbg !46
  %520 = fadd float %504, %456, !dbg !46
  %521 = bitcast float %101 to i32, !dbg !47
  %522 = bitcast float %102 to i32, !dbg !47
  %523 = bitcast float %103 to i32, !dbg !47
  %524 = bitcast float %104 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %522, i32 %523, i32 %524, ptr addrspace(1) %39, i1 %46) #5, !dbg !47
  %525 = bitcast float %105 to i32, !dbg !47
  %526 = bitcast float %106 to i32, !dbg !47
  %527 = bitcast float %107 to i32, !dbg !47
  %528 = bitcast float %108 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %525, i32 %526, i32 %527, i32 %528, ptr addrspace(1) %41, i1 %47) #5, !dbg !47
  %529 = bitcast float %109 to i32, !dbg !47
  %530 = bitcast float %110 to i32, !dbg !47
  %531 = bitcast float %111 to i32, !dbg !47
  %532 = bitcast float %112 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %529, i32 %530, i32 %531, i32 %532, ptr addrspace(1) %43, i1 %48) #5, !dbg !47
  %533 = bitcast float %113 to i32, !dbg !47
  %534 = bitcast float %114 to i32, !dbg !47
  %535 = bitcast float %115 to i32, !dbg !47
  %536 = bitcast float %116 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %534, i32 %535, i32 %536, ptr addrspace(1) %45, i1 %49) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %537 = sext i32 %471 to i64, !dbg !49
  %538 = getelementptr float, ptr addrspace(1) %1, i64 %537, !dbg !49
  %539 = and i32 %12, 224, !dbg !50
  %540 = icmp eq i32 %539, 0, !dbg !50
  %541 = bitcast float %223 to i32, !dbg !50
  %542 = and i1 %540, %472, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %538, i1 %542) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %543 = getelementptr float, ptr addrspace(1) %2, i64 %537, !dbg !52
  %544 = bitcast float %.0.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %544, ptr addrspace(1) %543, i1 %542) #5, !dbg !53
  %545 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !54
  %546 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !54
  %547 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !54
  %548 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !54
  %549 = bitcast float %505 to i32, !dbg !55
  %550 = bitcast float %506 to i32, !dbg !55
  %551 = bitcast float %507 to i32, !dbg !55
  %552 = bitcast float %508 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %549, i32 %550, i32 %551, i32 %552, ptr addrspace(1) %545, i1 %46) #5, !dbg !55
  %553 = bitcast float %509 to i32, !dbg !55
  %554 = bitcast float %510 to i32, !dbg !55
  %555 = bitcast float %511 to i32, !dbg !55
  %556 = bitcast float %512 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %553, i32 %554, i32 %555, i32 %556, ptr addrspace(1) %546, i1 %47) #5, !dbg !55
  %557 = bitcast float %513 to i32, !dbg !55
  %558 = bitcast float %514 to i32, !dbg !55
  %559 = bitcast float %515 to i32, !dbg !55
  %560 = bitcast float %516 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %558, i32 %559, i32 %560, ptr addrspace(1) %547, i1 %48) #5, !dbg !55
  %561 = bitcast float %517 to i32, !dbg !55
  %562 = bitcast float %518 to i32, !dbg !55
  %563 = bitcast float %519 to i32, !dbg !55
  %564 = bitcast float %520 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %561, i32 %562, i32 %563, i32 %564, ptr addrspace(1) %548, i1 %49) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crrzwwb64e3al7r3mg2qszdo6usuq5oppr4blgn5egzl4f2dxmmo.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5", linkageName: "triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 42, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 34, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 31, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 38, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 26, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 49, column: 27, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 47, scope: !7)
!48 = !DILocation(line: 54, column: 4, scope: !7)
!49 = !DILocation(line: 55, column: 28, scope: !7)
!50 = !DILocation(line: 55, column: 39, scope: !7)
!51 = !DILocation(line: 56, column: 4, scope: !7)
!52 = !DILocation(line: 57, column: 28, scope: !7)
!53 = !DILocation(line: 57, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 45, scope: !7)
!56 = !DILocation(line: 58, column: 4, scope: !7)
