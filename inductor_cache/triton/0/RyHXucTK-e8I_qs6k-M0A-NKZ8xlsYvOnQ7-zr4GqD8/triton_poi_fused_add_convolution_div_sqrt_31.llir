; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 4, !dbg !15
  %23 = and i32 %9, 15, !dbg !16
  %24 = or disjoint i32 %22, %23, !dbg !17
  %25 = icmp slt i32 %24, 9, !dbg !18
  %26 = sdiv i32 %13, 512, !dbg !19
  %27 = sdiv i32 %14, 512, !dbg !19
  %28 = sdiv i32 %15, 512, !dbg !19
  %29 = sdiv i32 %16, 512, !dbg !19
  %30 = sdiv i32 %17, 512, !dbg !19
  %31 = sdiv i32 %18, 512, !dbg !19
  %32 = sdiv i32 %19, 512, !dbg !19
  %33 = sdiv i32 %20, 512, !dbg !19
  %34 = mul i32 %13, 9, !dbg !20
  %35 = mul i32 %14, 9, !dbg !20
  %36 = mul i32 %15, 9, !dbg !20
  %37 = mul i32 %16, 9, !dbg !20
  %38 = mul i32 %17, 9, !dbg !20
  %39 = mul i32 %18, 9, !dbg !20
  %40 = mul i32 %19, 9, !dbg !20
  %41 = mul i32 %20, 9, !dbg !20
  %42 = add i32 %24, %34, !dbg !21
  %43 = add i32 %24, %35, !dbg !21
  %44 = add i32 %24, %36, !dbg !21
  %45 = add i32 %24, %37, !dbg !21
  %46 = add i32 %24, %38, !dbg !21
  %47 = add i32 %24, %39, !dbg !21
  %48 = add i32 %24, %40, !dbg !21
  %49 = add i32 %24, %41, !dbg !21
  %50 = sext i32 %42 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %43 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %44 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %45 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %46 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %47 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %48 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %49 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #4, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #4, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #4, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #4, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #4, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #4, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %25) #4, !dbg !23
  %74 = mul nsw i32 %26, 9, !dbg !24
  %75 = mul nsw i32 %27, 9, !dbg !24
  %76 = mul nsw i32 %28, 9, !dbg !24
  %77 = mul nsw i32 %29, 9, !dbg !24
  %78 = mul nsw i32 %30, 9, !dbg !24
  %79 = mul nsw i32 %31, 9, !dbg !24
  %80 = mul nsw i32 %32, 9, !dbg !24
  %81 = mul nsw i32 %33, 9, !dbg !24
  %82 = add i32 %74, %24, !dbg !25
  %83 = add i32 %75, %24, !dbg !25
  %84 = add i32 %24, %76, !dbg !25
  %85 = add i32 %24, %77, !dbg !25
  %86 = add i32 %24, %78, !dbg !25
  %87 = add i32 %24, %79, !dbg !25
  %88 = add i32 %24, %80, !dbg !25
  %89 = add i32 %24, %81, !dbg !25
  %90 = sext i32 %82 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !26
  %92 = sext i32 %83 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !26
  %94 = sext i32 %84 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !26
  %96 = sext i32 %85 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !26
  %98 = sext i32 %86 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !26
  %100 = sext i32 %87 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !26
  %102 = sext i32 %88 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !26
  %104 = sext i32 %89 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %25) #4, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %25) #4, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %25) #4, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %25) #4, !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #4, !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %25) #4, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %25) #4, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %25) #4, !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = fadd float %107, 0x3E112E0BE0000000, !dbg !28
  %123 = fadd float %109, 0x3E112E0BE0000000, !dbg !28
  %124 = fadd float %111, 0x3E112E0BE0000000, !dbg !28
  %125 = fadd float %113, 0x3E112E0BE0000000, !dbg !28
  %126 = fadd float %115, 0x3E112E0BE0000000, !dbg !28
  %127 = fadd float %117, 0x3E112E0BE0000000, !dbg !28
  %128 = fadd float %119, 0x3E112E0BE0000000, !dbg !28
  %129 = fadd float %121, 0x3E112E0BE0000000, !dbg !28
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %130, 0, !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %131, 0, !dbg !29
  br i1 %.not.i, label %137, label %132, !dbg !29

132:                                              ; preds = %6
  br i1 %.not1.i, label %135, label %133, !dbg !29

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

137:                                              ; preds = %6
  br i1 %.not1.i, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %133, %135, %138, %140
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !29
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i16 = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i19 = icmp eq i32 %143, 0, !dbg !29
  br i1 %.not.i16, label %149, label %144, !dbg !29

144:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %145, %147, %150, %152
  %.0.i18 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !29
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i21 = icmp eq i32 %154, 0, !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i24 = icmp eq i32 %155, 0, !dbg !29
  br i1 %.not.i21, label %161, label %156, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %157, %159, %162, %164
  %.0.i23 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i26 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i29 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i26, label %173, label %168, !dbg !29

168:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %171, label %169, !dbg !29

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %169, %171, %174, %176
  %.0.i28 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i31 = icmp eq i32 %178, 0, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i34 = icmp eq i32 %179, 0, !dbg !29
  br i1 %.not.i31, label %185, label %180, !dbg !29

180:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %183, label %181, !dbg !29

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

185:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %188, label %186, !dbg !29

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %181, %183, %186, %188
  %.0.i33 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !29
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i36 = icmp eq i32 %190, 0, !dbg !29
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i39 = icmp eq i32 %191, 0, !dbg !29
  br i1 %.not.i36, label %197, label %192, !dbg !29

192:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %195, label %193, !dbg !29

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

197:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %200, label %198, !dbg !29

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !29
  br label %__nv_sqrtf.exit40, !dbg !29

__nv_sqrtf.exit40:                                ; preds = %193, %195, %198, %200
  %.0.i38 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !29
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i41 = icmp eq i32 %202, 0, !dbg !29
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i44 = icmp eq i32 %203, 0, !dbg !29
  br i1 %.not.i41, label %209, label %204, !dbg !29

204:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %207, label %205, !dbg !29

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

209:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %212, label %210, !dbg !29

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !29
  br label %__nv_sqrtf.exit45, !dbg !29

__nv_sqrtf.exit45:                                ; preds = %205, %207, %210, %212
  %.0.i43 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !29
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i46 = icmp eq i32 %214, 0, !dbg !29
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i49 = icmp eq i32 %215, 0, !dbg !29
  br i1 %.not.i46, label %221, label %216, !dbg !29

216:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %219, label %217, !dbg !29

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

221:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %224, label %222, !dbg !29

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !29
  br label %__nv_sqrtf.exit50, !dbg !29

__nv_sqrtf.exit50:                                ; preds = %217, %219, %222, %224
  %.0.i48 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !29
  %226 = bitcast i32 %73 to float, !dbg !23
  %227 = bitcast i32 %72 to float, !dbg !23
  %228 = bitcast i32 %71 to float, !dbg !23
  %229 = bitcast i32 %70 to float, !dbg !23
  %230 = bitcast i32 %69 to float, !dbg !23
  %231 = bitcast i32 %68 to float, !dbg !23
  %232 = bitcast i32 %67 to float, !dbg !23
  %233 = bitcast i32 %66 to float, !dbg !23
  %234 = shl i32 %9, 2, !dbg !12
  %235 = and i32 %234, 60, !dbg !12
  %236 = or disjoint i32 %8, %235, !dbg !13
  %.frozen = freeze i32 %236, !dbg !19
  %237 = sdiv i32 %.frozen, 512, !dbg !19
  %238 = mul i32 %237, 512, !dbg !30
  %.decomposed = sub i32 %.frozen, %238, !dbg !30
  %239 = or disjoint i32 %22, %12, !dbg !17
  %240 = icmp slt i32 %239, 9, !dbg !18
  %241 = or disjoint i32 %22, %11, !dbg !17
  %242 = icmp slt i32 %241, 9, !dbg !18
  %243 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !31
  %244 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !31
  %245 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !31
  %246 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !31
  %247 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !31
  %248 = fadd float %.0.i38, 0x3DDB7CDFE0000000, !dbg !31
  %249 = fadd float %.0.i43, 0x3DDB7CDFE0000000, !dbg !31
  %250 = fadd float %.0.i48, 0x3DDB7CDFE0000000, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %243) #4, !dbg !32
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %244) #4, !dbg !32
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %245) #4, !dbg !32
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %246) #4, !dbg !32
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %247) #4, !dbg !32
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %248) #4, !dbg !32
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %249) #4, !dbg !32
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %250) #4, !dbg !32
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !33
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !33
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !33
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !33
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !33
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !33
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !33
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !33
  %267 = bitcast float %251 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %259, i1 %25) #4, !dbg !34
  %268 = bitcast float %252 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %260, i1 %25) #4, !dbg !34
  %269 = bitcast float %253 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %261, i1 %25) #4, !dbg !34
  %270 = bitcast float %254 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %262, i1 %25) #4, !dbg !34
  %271 = bitcast float %255 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %271, ptr addrspace(1) %263, i1 %25) #4, !dbg !34
  %272 = bitcast float %256 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %264, i1 %25) #4, !dbg !34
  %273 = bitcast float %257 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %273, ptr addrspace(1) %265, i1 %25) #4, !dbg !34
  %274 = bitcast float %258 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %274, ptr addrspace(1) %266, i1 %25) #4, !dbg !34
  %275 = shl i32 %241, 9, !dbg !35
  %276 = shl i32 %239, 9, !dbg !35
  %277 = mul i32 %237, 4608, !dbg !36
  %278 = add i32 %277, %.decomposed, !dbg !37
  %279 = add i32 %278, %275, !dbg !38
  %280 = add i32 %278, %276, !dbg !38
  %281 = sext i32 %279 to i64, !dbg !39
  %282 = getelementptr float, ptr addrspace(1) %3, i64 %281, !dbg !39
  %283 = sext i32 %280 to i64, !dbg !39
  %284 = getelementptr float, ptr addrspace(1) %3, i64 %283, !dbg !39
  %285 = shl i32 %9, 6, !dbg !40
  %286 = and i32 %285, 960, !dbg !40
  %287 = or disjoint i32 %286, %11, !dbg !40
  %288 = and i32 %234, 508, !dbg !40
  %289 = lshr exact i32 %286, 2, !dbg !40
  %290 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %289, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287, !dbg !40
  %292 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !40
  %293 = or disjoint i32 %287, 8, !dbg !40
  %294 = getelementptr float, ptr addrspace(3) %290, i32 %293, !dbg !40
  %295 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !40
  %296 = or disjoint i32 %287, 16, !dbg !40
  %297 = getelementptr float, ptr addrspace(3) %290, i32 %296, !dbg !40
  %298 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !40
  %299 = or disjoint i32 %287, 24, !dbg !40
  %300 = getelementptr float, ptr addrspace(3) %290, i32 %299, !dbg !40
  %301 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !40
  %302 = or disjoint i32 %287, 32, !dbg !40
  %303 = getelementptr float, ptr addrspace(3) %290, i32 %302, !dbg !40
  %304 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !40
  %305 = or disjoint i32 %287, 40, !dbg !40
  %306 = getelementptr float, ptr addrspace(3) %290, i32 %305, !dbg !40
  %307 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !40
  %308 = or disjoint i32 %287, 48, !dbg !40
  %309 = getelementptr float, ptr addrspace(3) %290, i32 %308, !dbg !40
  %310 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !40
  %311 = or disjoint i32 %287, 56, !dbg !40
  %312 = getelementptr float, ptr addrspace(3) %290, i32 %311, !dbg !40
  %313 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %314 = lshr i32 %234, 4, !dbg !40
  %315 = and i32 %314, 28, !dbg !40
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !40
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %288, !dbg !40
  %318 = or disjoint i32 %288, 512, !dbg !40
  %319 = lshr i32 %318, 4, !dbg !40
  %320 = and i32 %319, 60, !dbg !40
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !40
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %318, !dbg !40
  %323 = load <4 x i32>, ptr addrspace(3) %322, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %317, align 16, !dbg !40
  %324 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 4, !dbg !40
  %.extract9 = load i32, ptr addrspace(3) %324, align 4, !dbg !40
  %325 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 8, !dbg !40
  %.extract10 = load i32, ptr addrspace(3) %325, align 8, !dbg !40
  %326 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 12, !dbg !40
  %.extract11 = load i32, ptr addrspace(3) %326, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %282, i1 %242) #4, !dbg !40
  %.extract12 = extractelement <4 x i32> %323, i64 0, !dbg !40
  %.extract13 = extractelement <4 x i32> %323, i64 1, !dbg !40
  %.extract14 = extractelement <4 x i32> %323, i64 2, !dbg !40
  %.extract15 = extractelement <4 x i32> %323, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %284, i1 %240) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqewzitkzusedknvb6dqzcuohql4wpffmbdfbmyw3n7cozhmgrlp.py", directory: "inductor_cache/qe")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_31", linkageName: "triton_poi_fused_add_convolution_div_sqrt_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 43, scope: !7)
!35 = !DILocation(line: 41, column: 34, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 39, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
