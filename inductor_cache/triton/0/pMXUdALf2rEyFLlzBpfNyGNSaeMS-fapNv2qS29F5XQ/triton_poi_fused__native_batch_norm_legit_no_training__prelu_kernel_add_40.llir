; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !7 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %26 = shl i32 %25, 8, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %28 = shl i32 %27, 1, !dbg !12
  %29 = and i32 %28, 254, !dbg !12
  %30 = or disjoint i32 %26, %29, !dbg !13
  %31 = sdiv i32 %30, 16, !dbg !14
  %32 = srem i32 %31, 64, !dbg !15
  %33 = sext i32 %30 to i64, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !16
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !17
  %36 = sext i32 %32 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !18
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !28
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !32
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !36
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %14, i64 %36, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !41
  %73 = bitcast i32 %72 to float, !dbg !41
  %74 = getelementptr float, ptr addrspace(1) %15, i64 %36, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %16, i64 %36, !dbg !44
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !45
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !45
  %80 = getelementptr float, ptr addrspace(1) %17, i64 %36, !dbg !46
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !47
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %18, i64 %33, !dbg !48
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %19, i64 %36, !dbg !50
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !51
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !51
  %88 = getelementptr float, ptr addrspace(1) %20, i64 %33, !dbg !52
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !53
  %90 = getelementptr float, ptr addrspace(1) %21, i64 %36, !dbg !54
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !55
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !55
  %93 = fadd float %42, 0x3EE4F8B580000000, !dbg !56
  %94 = fadd float %44, 0x3EE4F8B580000000, !dbg !56
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i = icmp eq i32 %95, 0, !dbg !57
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i = icmp eq i32 %96, 0, !dbg !57
  br i1 %.not.i, label %102, label %97, !dbg !57

97:                                               ; preds = %24
  br i1 %.not1.i, label %100, label %98, !dbg !57

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

102:                                              ; preds = %24
  br i1 %.not1.i, label %105, label %103, !dbg !57

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !57
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i1 = icmp eq i32 %107, 0, !dbg !57
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !57
  br i1 %.not.i1, label %114, label %109, !dbg !57

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !57

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !57

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !57
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %121 = fadd float %71, 0x3EE4F8B580000000, !dbg !59
  %122 = fadd float %73, 0x3EE4F8B580000000, !dbg !59
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i6 = icmp eq i32 %123, 0, !dbg !60
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i9 = icmp eq i32 %124, 0, !dbg !60
  br i1 %.not.i6, label %130, label %125, !dbg !60

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !60

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !60

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !60
  br label %__nv_sqrtf.exit10, !dbg !60

__nv_sqrtf.exit10:                                ; preds = %126, %128, %131, %133
  %.0.i8 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !60
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i11 = icmp eq i32 %135, 0, !dbg !60
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i14 = icmp eq i32 %136, 0, !dbg !60
  br i1 %.not.i11, label %142, label %137, !dbg !60

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !60

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !60

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !60
  br label %__nv_sqrtf.exit15, !dbg !60

__nv_sqrtf.exit15:                                ; preds = %138, %140, %143, %145
  %.0.i13 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !60
  %147 = extractvalue { i32, i32 } %65, 1, !dbg !37
  %148 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %149 = insertelement <2 x i32> %148, i32 %68, i64 1, !dbg !19
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !19
  %151 = extractvalue { i32, i32 } %65, 0, !dbg !37
  %152 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !19
  %153 = insertelement <2 x i32> %152, i32 %67, i64 1, !dbg !19
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !19
  %155 = extractvalue { i32, i32 } %35, 1, !dbg !17
  %156 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !23
  %157 = insertelement <2 x i32> %156, i32 %76, i64 1, !dbg !23
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !23
  %159 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !25
  %160 = insertelement <2 x i32> %159, i32 %79, i64 1, !dbg !25
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !25
  %162 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !27
  %163 = insertelement <2 x i32> %162, i32 %82, i64 1, !dbg !27
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !27
  %165 = extractvalue { i32, i32 } %55, 1, !dbg !29
  %166 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !31
  %167 = insertelement <2 x i32> %166, i32 %63, i64 1, !dbg !31
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !31
  %169 = extractvalue { i32, i32 } %60, 1, !dbg !33
  %170 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !29
  %171 = insertelement <2 x i32> %170, i32 %169, i64 1, !dbg !29
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !29
  %173 = fcmp ogt <2 x float> %172, zeroinitializer, !dbg !61
  %174 = fmul <2 x float> %172, %168, !dbg !62
  %175 = select <2 x i1> %173, <2 x float> %172, <2 x float> %174, !dbg !63
  %176 = extractvalue { i32, i32 } %35, 0, !dbg !17
  %177 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !23
  %178 = insertelement <2 x i32> %177, i32 %75, i64 1, !dbg !23
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !23
  %180 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !25
  %181 = insertelement <2 x i32> %180, i32 %78, i64 1, !dbg !25
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !25
  %183 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !27
  %184 = insertelement <2 x i32> %183, i32 %81, i64 1, !dbg !27
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !27
  %186 = extractvalue { i32, i32 } %55, 0, !dbg !29
  %187 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !31
  %188 = insertelement <2 x i32> %187, i32 %62, i64 1, !dbg !31
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !31
  %190 = extractvalue { i32, i32 } %60, 0, !dbg !33
  %191 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !29
  %192 = insertelement <2 x i32> %191, i32 %190, i64 1, !dbg !29
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !29
  %194 = fcmp ogt <2 x float> %193, zeroinitializer, !dbg !61
  %195 = fmul <2 x float> %189, %193, !dbg !62
  %196 = select <2 x i1> %194, <2 x float> %193, <2 x float> %195, !dbg !63
  %197 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !51
  %198 = insertelement <2 x i32> %197, i32 %92, i64 1, !dbg !51
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !51
  %200 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !51
  %201 = insertelement <2 x i32> %200, i32 %91, i64 1, !dbg !51
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !51
  %203 = extractvalue { i32, i32 } %89, 1, !dbg !53
  %204 = extractvalue { i32, i32 } %89, 0, !dbg !53
  %205 = extractvalue { i32, i32 } %84, 1, !dbg !49
  %206 = extractvalue { i32, i32 } %84, 0, !dbg !49
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !64
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !64
  %209 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !49
  %210 = insertelement <2 x i32> %209, i32 %204, i64 1, !dbg !49
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !49
  %212 = fcmp ogt <2 x float> %211, zeroinitializer, !dbg !65
  %213 = fmul <2 x float> %202, %211, !dbg !66
  %214 = select <2 x i1> %212, <2 x float> %211, <2 x float> %213, !dbg !67
  %215 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !49
  %216 = insertelement <2 x i32> %215, i32 %203, i64 1, !dbg !49
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !49
  %218 = fcmp ogt <2 x float> %217, zeroinitializer, !dbg !65
  %219 = fmul <2 x float> %217, %199, !dbg !66
  %220 = select <2 x i1> %218, <2 x float> %217, <2 x float> %219, !dbg !67
  %221 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !17
  %222 = insertelement <2 x i32> %221, i32 %151, i64 1, !dbg !17
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !17
  %224 = fsub <2 x float> %223, %154, !dbg !68
  %225 = insertelement <2 x float> poison, float %119, i64 0, !dbg !69
  %226 = insertelement <2 x float> %225, float %207, i64 1, !dbg !69
  %227 = fmul <2 x float> %224, %226, !dbg !69
  %228 = fmul <2 x float> %227, %179, !dbg !70
  %229 = fadd <2 x float> %228, %182, !dbg !71
  %230 = fcmp ogt <2 x float> %229, zeroinitializer, !dbg !72
  %231 = fmul <2 x float> %229, %185, !dbg !73
  %232 = select <2 x i1> %230, <2 x float> %229, <2 x float> %231, !dbg !74
  %233 = shufflevector <2 x float> %196, <2 x float> %214, <2 x i32> <i32 0, i32 2>, !dbg !75
  %234 = shufflevector <2 x float> %196, <2 x float> %214, <2 x i32> <i32 1, i32 3>, !dbg !75
  %235 = fadd <2 x float> %233, %234, !dbg !75
  %236 = fadd <2 x float> %235, %232, !dbg !76
  %237 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !17
  %238 = insertelement <2 x i32> %237, i32 %147, i64 1, !dbg !17
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !17
  %240 = fsub <2 x float> %239, %150, !dbg !68
  %241 = insertelement <2 x float> poison, float %120, i64 0, !dbg !69
  %242 = insertelement <2 x float> %241, float %208, i64 1, !dbg !69
  %243 = fmul <2 x float> %240, %242, !dbg !69
  %244 = fmul <2 x float> %243, %158, !dbg !70
  %245 = fadd <2 x float> %244, %161, !dbg !71
  %246 = fcmp ogt <2 x float> %245, zeroinitializer, !dbg !72
  %247 = fmul <2 x float> %245, %164, !dbg !73
  %248 = select <2 x i1> %246, <2 x float> %245, <2 x float> %247, !dbg !74
  %249 = shufflevector <2 x float> %175, <2 x float> %220, <2 x i32> <i32 0, i32 2>, !dbg !75
  %250 = shufflevector <2 x float> %175, <2 x float> %220, <2 x i32> <i32 1, i32 3>, !dbg !75
  %251 = fadd <2 x float> %249, %250, !dbg !75
  %252 = fadd <2 x float> %251, %248, !dbg !76
  %253 = extractelement <2 x float> %236, i64 0, !dbg !77
  %254 = extractelement <2 x float> %236, i64 1, !dbg !78
  %255 = fadd float %253, %254, !dbg !79
  %256 = extractelement <2 x float> %252, i64 0, !dbg !77
  %257 = extractelement <2 x float> %252, i64 1, !dbg !78
  %258 = fadd float %256, %257, !dbg !79
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !80
  %260 = bitcast float %253 to i32, !dbg !77
  %261 = bitcast float %256 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %259, i1 true) #3, !dbg !77
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !81
  %263 = bitcast float %254 to i32, !dbg !78
  %264 = bitcast float %257 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %263, i32 %264, ptr addrspace(1) %262, i1 true) #3, !dbg !78
  %265 = getelementptr float, ptr addrspace(1) %22, i64 %33, !dbg !82
  %266 = bitcast float %255 to i32, !dbg !83
  %267 = bitcast float %258 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %266, i32 %267, ptr addrspace(1) %265, i1 true) #3, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjg2ytl2edxdb3ynfniagqj6vnues4hcquws6fkdyuawudotbjba.py", directory: "inductor_cache/jg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 37, scope: !7)
!52 = !DILocation(line: 44, column: 32, scope: !7)
!53 = !DILocation(line: 44, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 32, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 26, scope: !7)
!58 = !DILocation(line: 51, column: 18, scope: !7)
!59 = !DILocation(line: 70, column: 20, scope: !7)
!60 = !DILocation(line: 71, column: 27, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 35, scope: !7)
!64 = !DILocation(line: 72, column: 19, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 81, column: 20, scope: !7)
!67 = !DILocation(line: 82, column: 35, scope: !7)
!68 = !DILocation(line: 46, column: 18, scope: !7)
!69 = !DILocation(line: 54, column: 19, scope: !7)
!70 = !DILocation(line: 55, column: 20, scope: !7)
!71 = !DILocation(line: 56, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 20, scope: !7)
!74 = !DILocation(line: 60, column: 35, scope: !7)
!75 = !DILocation(line: 67, column: 20, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 89, column: 40, scope: !7)
!78 = !DILocation(line: 90, column: 40, scope: !7)
!79 = !DILocation(line: 88, column: 20, scope: !7)
!80 = !DILocation(line: 89, column: 28, scope: !7)
!81 = !DILocation(line: 90, column: 28, scope: !7)
!82 = !DILocation(line: 91, column: 25, scope: !7)
!83 = !DILocation(line: 91, column: 37, scope: !7)
!84 = !DILocation(line: 91, column: 4, scope: !7)
