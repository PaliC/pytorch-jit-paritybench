; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/5z/c5z5tg64s6c4gghsqeneegzzsv7pbfkyvk7bbi4md2t4bkkydptw.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp9 < 524288\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_convolution_max_unpool2d_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %11 = shl i32 %10, 9, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 1, !dbg !14
  %14 = and i32 %13, 510, !dbg !14
  %15 = or disjoint i32 %11, %14, !dbg !15
  %16 = sdiv i32 %15, 256, !dbg !16
  %17 = srem i32 %16, 128, !dbg !17
  %18 = sext i32 %15 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !19
  %21 = sext i32 %17 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !21
  %25 = getelementptr i64, ptr addrspace(1) %2, i64 %18, !dbg !22
  %26 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !23
  %27 = extractvalue { i64, i64 } %26, 0, !dbg !23
  %28 = extractvalue { i64, i64 } %26, 1, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !31
  %41 = shl i32 %16, 10, !dbg !32
  %42 = sext i32 %41 to i64, !dbg !33
  %43 = add i64 %27, %42, !dbg !33
  %44 = add i64 %28, %42, !dbg !33
  %45 = lshr i64 %43, 44, !dbg !34
  %46 = and i64 %45, 524288, !dbg !34
  %47 = add i64 %46, %43, !dbg !34
  %48 = lshr i64 %44, 44, !dbg !34
  %49 = and i64 %48, 524288, !dbg !34
  %50 = add i64 %49, %44, !dbg !34
  %51 = or i64 %47, %50, !dbg !35
  %.not = icmp ult i64 %51, 524288, !dbg !35
  br i1 %.not, label %53, label %52, !dbg !35

52:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

53:                                               ; preds = %9
  %54 = bitcast i32 %34 to float, !dbg !27
  %55 = bitcast i32 %33 to float, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %56 = fadd float %55, 0x3EE4F8B580000000, !dbg !36
  %57 = fadd float %54, 0x3EE4F8B580000000, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i, label %65, label %60, !dbg !37

60:                                               ; preds = %53
  br i1 %.not1.i, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

65:                                               ; preds = %53
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i1 = icmp eq i32 %70, 0, !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i1, label %77, label %72, !dbg !37

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %83 = bitcast i32 %82 to float, !dbg !19
  %84 = bitcast i32 %24 to float, !dbg !21
  %85 = fadd float %83, %84, !dbg !38
  %86 = bitcast i32 %31 to float, !dbg !25
  %87 = fsub float %85, %86, !dbg !39
  %88 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %89 = bitcast i32 %88 to float, !dbg !19
  %90 = bitcast i32 %23 to float, !dbg !21
  %91 = fadd float %89, %90, !dbg !38
  %92 = bitcast i32 %30 to float, !dbg !25
  %93 = fsub float %91, %92, !dbg !39
  %94 = bitcast i32 %36 to float, !dbg !29
  %95 = bitcast i32 %37 to float, !dbg !29
  %96 = bitcast i32 %39 to float, !dbg !31
  %97 = bitcast i32 %40 to float, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !40
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !40
  %100 = fmul float %93, %98, !dbg !41
  %101 = fmul float %87, %99, !dbg !41
  %102 = fmul float %100, %94, !dbg !42
  %103 = fmul float %101, %95, !dbg !42
  %104 = fadd float %102, %96, !dbg !43
  %105 = fadd float %103, %97, !dbg !43
  %106 = fcmp olt float %104, 0.000000e+00, !dbg !44
  %107 = fcmp olt float %105, 0.000000e+00, !dbg !44
  %108 = select i1 %106, float 0.000000e+00, float %104, !dbg !48
  %109 = select i1 %107, float 0.000000e+00, float %105, !dbg !48
  %110 = bitcast float %91 to i32, !dbg !49
  %111 = bitcast float %85 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %19, i1 true) #5, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !50
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !50
  %114 = ptrtoint ptr addrspace(1) %112 to i64, !dbg !51
  %115 = ptrtoint ptr addrspace(1) %113 to i64, !dbg !51
  %116 = and i32 %12, 255, !dbg !51
  %117 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %117, i64 %114, i64 %115, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %118 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %116, !dbg !51
  %119 = load i64, ptr addrspace(3) %118, align 8, !dbg !51
  %120 = or disjoint i32 %116, 256, !dbg !51
  %121 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %120, !dbg !51
  %122 = load i64, ptr addrspace(3) %121, align 8, !dbg !51
  %123 = inttoptr i64 %119 to ptr addrspace(1), !dbg !51
  %124 = inttoptr i64 %122 to ptr addrspace(1), !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  %126 = bitcast float %108 to i32, !dbg !51
  %127 = bitcast float %109 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %125, i32 %126, i32 %127, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !51
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !51
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !51
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %123, i1 true) #5, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %124, i1 true) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5z5tg64s6c4gghsqeneegzzsv7pbfkyvk7bbi4md2t4bkkydptw.py", directory: "inductor_cache/5z")
!4 = !{ptr @triton_poi_fused_convolution_max_unpool2d_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_unpool2d_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_unpool2d_18", linkageName: "triton_poi_fused_convolution_max_unpool2d_18", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 32, scope: !11)
!25 = !DILocation(line: 29, column: 53, scope: !11)
!26 = !DILocation(line: 30, column: 32, scope: !11)
!27 = !DILocation(line: 30, column: 53, scope: !11)
!28 = !DILocation(line: 31, column: 32, scope: !11)
!29 = !DILocation(line: 31, column: 53, scope: !11)
!30 = !DILocation(line: 32, column: 32, scope: !11)
!31 = !DILocation(line: 32, column: 53, scope: !11)
!32 = !DILocation(line: 34, column: 17, scope: !11)
!33 = !DILocation(line: 35, column: 18, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 52, scope: !11)
!36 = !DILocation(line: 43, column: 20, scope: !11)
!37 = !DILocation(line: 44, column: 27, scope: !11)
!38 = !DILocation(line: 33, column: 18, scope: !11)
!39 = !DILocation(line: 41, column: 19, scope: !11)
!40 = !DILocation(line: 46, column: 20, scope: !11)
!41 = !DILocation(line: 49, column: 20, scope: !11)
!42 = !DILocation(line: 50, column: 20, scope: !11)
!43 = !DILocation(line: 51, column: 20, scope: !11)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !11, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 53, column: 42, scope: !11)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 39, scope: !11)
!50 = !DILocation(line: 55, column: 25, scope: !11)
!51 = !DILocation(line: 55, column: 66, scope: !11)
!52 = !DILocation(line: 55, column: 4, scope: !11)
