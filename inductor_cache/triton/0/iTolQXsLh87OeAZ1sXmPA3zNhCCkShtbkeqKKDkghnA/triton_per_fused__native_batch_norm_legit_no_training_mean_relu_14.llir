; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 128, !dbg !15
  %17 = mul i32 %16, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %11, 4, !dbg !17
  %19 = and i32 %18, 1920, !dbg !17
  %20 = add nsw i32 %.decomposed, %19, !dbg !18
  %21 = shl i32 %16, 11, !dbg !19
  %22 = add i32 %20, %21, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %26 = sext i32 %.decomposed to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %15) #5, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !25
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !26
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !26
  %35 = bitcast i32 %31 to float, !dbg !26
  %36 = bitcast i32 %32 to float, !dbg !26
  %37 = bitcast i32 %33 to float, !dbg !26
  %38 = bitcast i32 %34 to float, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %15) #5, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !30
  %43 = fadd float %35, 0x3EE4F8B580000000, !dbg !31
  %44 = fadd float %36, 0x3EE4F8B580000000, !dbg !31
  %45 = fadd float %37, 0x3EE4F8B580000000, !dbg !31
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !31
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %47, 0, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %48, 0, !dbg !32
  br i1 %.not.i, label %54, label %49, !dbg !32

49:                                               ; preds = %8
  br i1 %.not1.i, label %52, label %50, !dbg !32

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

54:                                               ; preds = %8
  br i1 %.not1.i, label %57, label %55, !dbg !32

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %59, 0, !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !32
  br i1 %.not.i1, label %66, label %61, !dbg !32

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !32

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !32

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !32
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i6 = icmp eq i32 %71, 0, !dbg !32
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i9 = icmp eq i32 %72, 0, !dbg !32
  br i1 %.not.i6, label %78, label %73, !dbg !32

73:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %76, label %74, !dbg !32

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

78:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %81, label %79, !dbg !32

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %74, %76, %79, %81
  %.0.i8 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !32
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %83, 0, !dbg !32
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i14 = icmp eq i32 %84, 0, !dbg !32
  br i1 %.not.i11, label %90, label %85, !dbg !32

85:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %88, label %86, !dbg !32

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

90:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %93, label %91, !dbg !32

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %86, %88, %91, %93
  %.0.i13 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %96 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %101 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %103 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %111 = lshr i32 %11, 5, !dbg !33
  %112 = and i32 %11, 31, !dbg !12
  %113 = or disjoint i32 %10, %112, !dbg !13
  %114 = icmp slt i32 %113, 512, !dbg !14
  %115 = and i32 %11, 24, !dbg !12
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !34
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !34
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !34
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !34
  %120 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !22
  %121 = insertelement <4 x i32> %120, i32 %97, i64 1, !dbg !22
  %122 = insertelement <4 x i32> %121, i32 %99, i64 2, !dbg !22
  %123 = insertelement <4 x i32> %122, i32 %101, i64 3, !dbg !22
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !22
  %125 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !24
  %126 = insertelement <4 x i32> %125, i32 %98, i64 1, !dbg !24
  %127 = insertelement <4 x i32> %126, i32 %100, i64 2, !dbg !24
  %128 = insertelement <4 x i32> %127, i32 %102, i64 3, !dbg !24
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !24
  %130 = fsub <4 x float> %124, %129, !dbg !35
  %131 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !30
  %132 = insertelement <4 x i32> %131, i32 %104, i64 1, !dbg !30
  %133 = insertelement <4 x i32> %132, i32 %105, i64 2, !dbg !30
  %134 = insertelement <4 x i32> %133, i32 %106, i64 3, !dbg !30
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !30
  %136 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %137 = insertelement <4 x i32> %136, i32 %108, i64 1, !dbg !28
  %138 = insertelement <4 x i32> %137, i32 %109, i64 2, !dbg !28
  %139 = insertelement <4 x i32> %138, i32 %110, i64 3, !dbg !28
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !28
  %141 = insertelement <4 x float> poison, float %119, i64 0, !dbg !36
  %142 = insertelement <4 x float> %141, float %118, i64 1, !dbg !36
  %143 = insertelement <4 x float> %142, float %117, i64 2, !dbg !36
  %144 = insertelement <4 x float> %143, float %116, i64 3, !dbg !36
  %145 = fmul <4 x float> %130, %144, !dbg !36
  %146 = fmul <4 x float> %145, %140, !dbg !37
  %147 = fadd <4 x float> %146, %135, !dbg !38
  %148 = fcmp olt <4 x float> %147, zeroinitializer, !dbg !39
  %149 = extractelement <4 x i1> %148, i64 3, !dbg !43
  %150 = extractelement <4 x float> %147, i64 3, !dbg !43
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !43
  %152 = extractelement <4 x i1> %148, i64 2, !dbg !43
  %153 = extractelement <4 x float> %147, i64 2, !dbg !43
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !43
  %155 = extractelement <4 x i1> %148, i64 1, !dbg !43
  %156 = extractelement <4 x float> %147, i64 1, !dbg !43
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !43
  %158 = extractelement <4 x i1> %148, i64 0, !dbg !43
  %159 = extractelement <4 x float> %147, i64 0, !dbg !43
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !43
  %161 = select i1 %15, float %151, float 0.000000e+00, !dbg !44
  %162 = select i1 %15, float %154, float 0.000000e+00, !dbg !44
  %163 = select i1 %15, float %157, float 0.000000e+00, !dbg !44
  %164 = select i1 %15, float %160, float 0.000000e+00, !dbg !44
  %165 = bitcast float %161 to i32, !dbg !45
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !45
  %167 = bitcast i32 %166 to float, !dbg !45
  %168 = fadd float %161, %167, !dbg !49
  %169 = bitcast float %168 to i32, !dbg !45
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !45
  %171 = bitcast i32 %170 to float, !dbg !45
  %172 = fadd float %168, %171, !dbg !49
  %173 = bitcast float %162 to i32, !dbg !45
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 16, i32 31), !dbg !45
  %175 = bitcast i32 %174 to float, !dbg !45
  %176 = fadd float %162, %175, !dbg !49
  %177 = bitcast float %176 to i32, !dbg !45
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !45
  %179 = bitcast i32 %178 to float, !dbg !45
  %180 = fadd float %176, %179, !dbg !49
  %181 = bitcast float %163 to i32, !dbg !45
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !45
  %183 = bitcast i32 %182 to float, !dbg !45
  %184 = fadd float %163, %183, !dbg !49
  %185 = bitcast float %184 to i32, !dbg !45
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !45
  %187 = bitcast i32 %186 to float, !dbg !45
  %188 = fadd float %184, %187, !dbg !49
  %189 = bitcast float %164 to i32, !dbg !45
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !45
  %191 = bitcast i32 %190 to float, !dbg !45
  %192 = fadd float %164, %191, !dbg !49
  %193 = bitcast float %192 to i32, !dbg !45
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !45
  %195 = bitcast i32 %194 to float, !dbg !45
  %196 = fadd float %192, %195, !dbg !49
  %197 = icmp eq i32 %115, 0, !dbg !45
  %198 = and i32 %111, 3, !dbg !45
  %199 = shl nuw nsw i32 %13, 2, !dbg !45
  %200 = or disjoint i32 %199, %198, !dbg !45
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !45
  %202 = bitcast float %172 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 %197) #5, !dbg !45
  %203 = or disjoint i32 %199, 4, !dbg !45
  %204 = or disjoint i32 %203, %198, !dbg !45
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !45
  %206 = bitcast float %180 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 %197) #5, !dbg !45
  %207 = or disjoint i32 %199, 8, !dbg !45
  %208 = or disjoint i32 %207, %198, !dbg !45
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !45
  %210 = bitcast float %188 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 %197) #5, !dbg !45
  %211 = or disjoint i32 %199, 12, !dbg !45
  %212 = or disjoint i32 %211, %198, !dbg !45
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !45
  %214 = bitcast float %196 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 %197) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %215 = icmp slt i32 %11, 128, !dbg !45
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !45
  %217 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %216, i1 %215) #5, !dbg !45
  %218 = bitcast i32 %217 to float, !dbg !45
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !45
  %220 = bitcast i32 %219 to float, !dbg !45
  %221 = fadd float %218, %220, !dbg !49
  %222 = bitcast float %221 to i32, !dbg !45
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !45
  %224 = bitcast i32 %223 to float, !dbg !45
  %225 = fadd float %221, %224, !dbg !49
  %226 = and i32 %11, 3, !dbg !45
  %227 = icmp eq i32 %226, 0, !dbg !45
  %228 = and i1 %215, %227, !dbg !45
  %229 = bitcast float %225 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %229, i1 %228) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !45
  %231 = load i32, ptr addrspace(3) %230, align 16, !dbg !45
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !45
  %233 = load i32, ptr addrspace(3) %232, align 16, !dbg !45
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !45
  %235 = load i32, ptr addrspace(3) %234, align 16, !dbg !45
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !45
  %237 = load i32, ptr addrspace(3) %236, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %238, i32 %231, i32 %233, i32 %235, i32 %237, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !51
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !51
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float 1.600000e+01) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %242 = sext i32 %113 to i64, !dbg !53
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !53
  %244 = icmp eq i32 %198, 0, !dbg !54
  %245 = bitcast float %241 to i32, !dbg !54
  %246 = and i1 %244, %114, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %245, ptr addrspace(1) %243, i1 %246) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfsg5tkk2jkbyyzrialu5izt4iwcikw7o7lhn56tdzqdki6p72s3.py", directory: "inductor_cache/fs")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 26, column: 34, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = !DILocation(line: 53, column: 26, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
!53 = !DILocation(line: 57, column: 28, scope: !7)
!54 = !DILocation(line: 57, column: 40, scope: !7)
!55 = !DILocation(line: 57, column: 4, scope: !7)
