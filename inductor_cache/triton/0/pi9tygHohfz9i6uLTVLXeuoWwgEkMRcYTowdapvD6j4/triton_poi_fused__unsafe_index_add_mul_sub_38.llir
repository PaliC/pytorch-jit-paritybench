; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 64, !dbg !14
  %21 = sdiv i32 %19, 64, !dbg !14
  %22 = srem i32 %20, 64, !dbg !15
  %23 = srem i32 %21, 64, !dbg !15
  %24 = mul i32 %20, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 64, !dbg !16
  %26 = sdiv i32 %17, 4096, !dbg !17
  %27 = sdiv i32 %19, 4096, !dbg !17
  %28 = srem i32 %26, 128, !dbg !18
  %29 = srem i32 %27, 128, !dbg !18
  %.frozen1 = freeze i32 %17, !dbg !19
  %30 = sdiv i32 %.frozen1, 524288, !dbg !19
  %.frozen3 = freeze i32 %19, !dbg !19
  %31 = sdiv i32 %.frozen3, 524288, !dbg !19
  %32 = mul i32 %30, 524288, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %32, !dbg !20
  %33 = mul i32 %31, 524288, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %33, !dbg !20
  %34 = sext i32 %22 to i64, !dbg !21
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %23 to i64, !dbg !21
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %46 = sext i32 %.decomposed to i64, !dbg !23
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !23
  %48 = sext i32 %25 to i64, !dbg !23
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !24
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !24
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !24
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !24
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !24
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !24
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !24
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !24
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !24
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !24
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !24
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !24
  %62 = getelementptr i64, ptr addrspace(1) %3, i64 %46, !dbg !25
  %63 = getelementptr i64, ptr addrspace(1) %3, i64 %48, !dbg !25
  %64 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %65 = extractvalue { i64, i64 } %64, 0, !dbg !26
  %66 = extractvalue { i64, i64 } %64, 1, !dbg !26
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !26
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !26
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %71 = extractvalue { i64, i64 } %70, 0, !dbg !26
  %72 = extractvalue { i64, i64 } %70, 1, !dbg !26
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !26
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !27
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !28
  %82 = bitcast i32 %78 to float, !dbg !28
  %83 = bitcast i32 %79 to float, !dbg !28
  %84 = bitcast i32 %80 to float, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !28
  %91 = bitcast i32 %87 to float, !dbg !28
  %92 = bitcast i32 %88 to float, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = getelementptr i64, ptr addrspace(1) %5, i64 %34, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %5, i64 %36, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = lshr i64 %38, 58, !dbg !33
  %124 = and i64 %123, 32, !dbg !33
  %125 = add i64 %124, %38, !dbg !33
  %126 = lshr i64 %42, 58, !dbg !33
  %127 = and i64 %126, 32, !dbg !33
  %128 = add i64 %127, %42, !dbg !33
  %129 = lshr i64 %51, 58, !dbg !34
  %130 = and i64 %129, 32, !dbg !34
  %131 = add i64 %130, %51, !dbg !34
  %132 = lshr i64 %52, 58, !dbg !34
  %133 = and i64 %132, 32, !dbg !34
  %134 = add i64 %133, %52, !dbg !34
  %135 = lshr i64 %54, 58, !dbg !34
  %136 = and i64 %135, 32, !dbg !34
  %137 = add i64 %136, %54, !dbg !34
  %138 = lshr i64 %55, 58, !dbg !34
  %139 = and i64 %138, 32, !dbg !34
  %140 = add i64 %139, %55, !dbg !34
  %141 = lshr i64 %57, 58, !dbg !34
  %142 = and i64 %141, 32, !dbg !34
  %143 = add i64 %142, %57, !dbg !34
  %144 = lshr i64 %58, 58, !dbg !34
  %145 = and i64 %144, 32, !dbg !34
  %146 = add i64 %145, %58, !dbg !34
  %147 = lshr i64 %60, 58, !dbg !34
  %148 = and i64 %147, 32, !dbg !34
  %149 = add i64 %148, %60, !dbg !34
  %150 = lshr i64 %61, 58, !dbg !34
  %151 = and i64 %150, 32, !dbg !34
  %152 = add i64 %151, %61, !dbg !34
  %153 = shl i64 %125, 5, !dbg !35
  %154 = shl i64 %128, 5, !dbg !35
  %155 = add i64 %131, %153, !dbg !36
  %156 = add i64 %134, %153, !dbg !36
  %157 = add i64 %137, %153, !dbg !36
  %158 = add i64 %140, %153, !dbg !36
  %159 = add i64 %143, %154, !dbg !36
  %160 = add i64 %146, %154, !dbg !36
  %161 = add i64 %149, %154, !dbg !36
  %162 = add i64 %152, %154, !dbg !36
  %163 = shl nsw i32 %28, 10, !dbg !37
  %164 = shl nsw i32 %29, 10, !dbg !37
  %165 = sext i32 %163 to i64, !dbg !38
  %166 = sext i32 %164 to i64, !dbg !38
  %167 = mul i32 %30, 655360, !dbg !39
  %168 = mul i32 %31, 655360, !dbg !39
  %169 = sext i32 %167 to i64, !dbg !40
  %170 = sext i32 %168 to i64, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %165, !dbg !41
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %169, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !41
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %165, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %169, !dbg !41
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %165, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %169, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %165, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %169, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %166, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %170, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %166, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %170, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !41
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %166, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %170, !dbg !41
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %166, !dbg !41
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %170, !dbg !41
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !42
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #1, !dbg !42
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #1, !dbg !42
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #1, !dbg !42
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #1, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #1, !dbg !42
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !42
  %203 = lshr i64 %65, 58, !dbg !43
  %204 = and i64 %203, 32, !dbg !43
  %205 = add i64 %204, %65, !dbg !43
  %206 = lshr i64 %66, 58, !dbg !43
  %207 = and i64 %206, 32, !dbg !43
  %208 = add i64 %207, %66, !dbg !43
  %209 = lshr i64 %68, 58, !dbg !43
  %210 = and i64 %209, 32, !dbg !43
  %211 = add i64 %210, %68, !dbg !43
  %212 = lshr i64 %69, 58, !dbg !43
  %213 = and i64 %212, 32, !dbg !43
  %214 = add i64 %213, %69, !dbg !43
  %215 = lshr i64 %71, 58, !dbg !43
  %216 = and i64 %215, 32, !dbg !43
  %217 = add i64 %216, %71, !dbg !43
  %218 = lshr i64 %72, 58, !dbg !43
  %219 = and i64 %218, 32, !dbg !43
  %220 = add i64 %219, %72, !dbg !43
  %221 = lshr i64 %74, 58, !dbg !43
  %222 = and i64 %221, 32, !dbg !43
  %223 = add i64 %222, %74, !dbg !43
  %224 = lshr i64 %75, 58, !dbg !43
  %225 = and i64 %224, 32, !dbg !43
  %226 = add i64 %225, %75, !dbg !43
  %227 = add i64 %205, %153, !dbg !44
  %228 = add i64 %208, %153, !dbg !44
  %229 = add i64 %211, %153, !dbg !44
  %230 = add i64 %214, %153, !dbg !44
  %231 = add i64 %217, %154, !dbg !44
  %232 = add i64 %220, %154, !dbg !44
  %233 = add i64 %223, %154, !dbg !44
  %234 = add i64 %226, %154, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !45
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %165, !dbg !45
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %169, !dbg !45
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %228, !dbg !45
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %165, !dbg !45
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %169, !dbg !45
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !45
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %165, !dbg !45
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %169, !dbg !45
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %230, !dbg !45
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %165, !dbg !45
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %169, !dbg !45
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !45
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %166, !dbg !45
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %170, !dbg !45
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %232, !dbg !45
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %166, !dbg !45
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %170, !dbg !45
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !45
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %166, !dbg !45
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %170, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %234, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %166, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %170, !dbg !45
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #1, !dbg !46
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !46
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 true) #1, !dbg !46
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !46
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 true) #1, !dbg !46
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !46
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !46
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !46
  %267 = lshr i64 %97, 58, !dbg !47
  %268 = and i64 %267, 32, !dbg !47
  %269 = add i64 %268, %97, !dbg !47
  %270 = lshr i64 %101, 58, !dbg !47
  %271 = and i64 %270, 32, !dbg !47
  %272 = add i64 %271, %101, !dbg !47
  %273 = shl i64 %269, 5, !dbg !48
  %274 = shl i64 %272, 5, !dbg !48
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !49
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %273, !dbg !49
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %165, !dbg !49
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %169, !dbg !49
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !49
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %273, !dbg !49
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %165, !dbg !49
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %169, !dbg !49
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !49
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %273, !dbg !49
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %165, !dbg !49
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %169, !dbg !49
  %287 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !49
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %273, !dbg !49
  %289 = getelementptr float, ptr addrspace(1) %288, i64 %165, !dbg !49
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %169, !dbg !49
  %291 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !49
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %274, !dbg !49
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %166, !dbg !49
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %170, !dbg !49
  %295 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !49
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %274, !dbg !49
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %166, !dbg !49
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %170, !dbg !49
  %299 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !49
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %274, !dbg !49
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %166, !dbg !49
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %170, !dbg !49
  %303 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !49
  %304 = getelementptr float, ptr addrspace(1) %303, i64 %274, !dbg !49
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %166, !dbg !49
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %170, !dbg !49
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !50
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !50
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !50
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !50
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !50
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !50
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #1, !dbg !50
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #1, !dbg !50
  %315 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !51
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %273, !dbg !51
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %165, !dbg !51
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %169, !dbg !51
  %319 = getelementptr float, ptr addrspace(1) %2, i64 %208, !dbg !51
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %273, !dbg !51
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %165, !dbg !51
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %169, !dbg !51
  %323 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !51
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %273, !dbg !51
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %165, !dbg !51
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %169, !dbg !51
  %327 = getelementptr float, ptr addrspace(1) %2, i64 %214, !dbg !51
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %273, !dbg !51
  %329 = getelementptr float, ptr addrspace(1) %328, i64 %165, !dbg !51
  %330 = getelementptr float, ptr addrspace(1) %329, i64 %169, !dbg !51
  %331 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !51
  %332 = getelementptr float, ptr addrspace(1) %331, i64 %274, !dbg !51
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %166, !dbg !51
  %334 = getelementptr float, ptr addrspace(1) %333, i64 %170, !dbg !51
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !51
  %336 = getelementptr float, ptr addrspace(1) %335, i64 %274, !dbg !51
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %166, !dbg !51
  %338 = getelementptr float, ptr addrspace(1) %337, i64 %170, !dbg !51
  %339 = getelementptr float, ptr addrspace(1) %2, i64 %223, !dbg !51
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %274, !dbg !51
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %166, !dbg !51
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %170, !dbg !51
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %226, !dbg !51
  %344 = getelementptr float, ptr addrspace(1) %343, i64 %274, !dbg !51
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %166, !dbg !51
  %346 = getelementptr float, ptr addrspace(1) %345, i64 %170, !dbg !51
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #1, !dbg !52
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 true) #1, !dbg !52
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 true) #1, !dbg !52
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 true) #1, !dbg !52
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 true) #1, !dbg !52
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #1, !dbg !52
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #1, !dbg !52
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 true) #1, !dbg !52
  %355 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !50
  %356 = insertelement <2 x i32> %355, i32 %195, i64 1, !dbg !50
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !50
  %358 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !52
  %359 = insertelement <2 x i32> %358, i32 %259, i64 1, !dbg !52
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !52
  %361 = fsub <2 x float> %360, %357, !dbg !53
  %362 = insertelement <2 x float> poison, float %82, i64 0, !dbg !54
  %363 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %364 = fmul <2 x float> %361, %363, !dbg !54
  %365 = fadd <2 x float> %364, %357, !dbg !55
  %366 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !50
  %367 = insertelement <2 x i32> %366, i32 %196, i64 1, !dbg !50
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !50
  %369 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !52
  %370 = insertelement <2 x i32> %369, i32 %260, i64 1, !dbg !52
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !52
  %372 = fsub <2 x float> %371, %368, !dbg !53
  %373 = insertelement <2 x float> poison, float %83, i64 0, !dbg !54
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %375 = fmul <2 x float> %372, %374, !dbg !54
  %376 = fadd <2 x float> %375, %368, !dbg !55
  %377 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !50
  %378 = insertelement <2 x i32> %377, i32 %197, i64 1, !dbg !50
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !50
  %380 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !52
  %381 = insertelement <2 x i32> %380, i32 %261, i64 1, !dbg !52
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !52
  %383 = fsub <2 x float> %382, %379, !dbg !53
  %384 = insertelement <2 x float> poison, float %84, i64 0, !dbg !54
  %385 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %386 = fmul <2 x float> %383, %385, !dbg !54
  %387 = fadd <2 x float> %386, %379, !dbg !55
  %388 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !50
  %389 = insertelement <2 x i32> %388, i32 %198, i64 1, !dbg !50
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !50
  %391 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !52
  %392 = insertelement <2 x i32> %391, i32 %262, i64 1, !dbg !52
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !52
  %394 = fsub <2 x float> %393, %390, !dbg !53
  %395 = insertelement <2 x float> poison, float %85, i64 0, !dbg !54
  %396 = shufflevector <2 x float> %395, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %397 = fmul <2 x float> %394, %396, !dbg !54
  %398 = fadd <2 x float> %397, %390, !dbg !55
  %399 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !50
  %400 = insertelement <2 x i32> %399, i32 %199, i64 1, !dbg !50
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !50
  %402 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !52
  %403 = insertelement <2 x i32> %402, i32 %263, i64 1, !dbg !52
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !52
  %405 = fsub <2 x float> %404, %401, !dbg !53
  %406 = insertelement <2 x float> poison, float %91, i64 0, !dbg !54
  %407 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %408 = fmul <2 x float> %405, %407, !dbg !54
  %409 = fadd <2 x float> %408, %401, !dbg !55
  %410 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !50
  %411 = insertelement <2 x i32> %410, i32 %200, i64 1, !dbg !50
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !50
  %413 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !52
  %414 = insertelement <2 x i32> %413, i32 %264, i64 1, !dbg !52
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !52
  %416 = fsub <2 x float> %415, %412, !dbg !53
  %417 = insertelement <2 x float> poison, float %92, i64 0, !dbg !54
  %418 = shufflevector <2 x float> %417, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %419 = fmul <2 x float> %416, %418, !dbg !54
  %420 = fadd <2 x float> %419, %412, !dbg !55
  %421 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !50
  %422 = insertelement <2 x i32> %421, i32 %201, i64 1, !dbg !50
  %423 = bitcast <2 x i32> %422 to <2 x float>, !dbg !50
  %424 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !52
  %425 = insertelement <2 x i32> %424, i32 %265, i64 1, !dbg !52
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !52
  %427 = fsub <2 x float> %426, %423, !dbg !53
  %428 = insertelement <2 x float> poison, float %93, i64 0, !dbg !54
  %429 = shufflevector <2 x float> %428, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %430 = fmul <2 x float> %427, %429, !dbg !54
  %431 = fadd <2 x float> %430, %423, !dbg !55
  %432 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !50
  %433 = insertelement <2 x i32> %432, i32 %202, i64 1, !dbg !50
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !50
  %435 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !52
  %436 = insertelement <2 x i32> %435, i32 %266, i64 1, !dbg !52
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !52
  %438 = fsub <2 x float> %437, %434, !dbg !53
  %439 = insertelement <2 x float> poison, float %94, i64 0, !dbg !54
  %440 = shufflevector <2 x float> %439, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %441 = fmul <2 x float> %438, %440, !dbg !54
  %442 = fadd <2 x float> %441, %434, !dbg !55
  %443 = extractelement <2 x float> %365, i64 0, !dbg !56
  %444 = extractelement <2 x float> %365, i64 1, !dbg !57
  %445 = fsub float %443, %444, !dbg !56
  %446 = extractelement <2 x float> %376, i64 0, !dbg !56
  %447 = extractelement <2 x float> %376, i64 1, !dbg !57
  %448 = fsub float %446, %447, !dbg !56
  %449 = extractelement <2 x float> %387, i64 0, !dbg !56
  %450 = extractelement <2 x float> %387, i64 1, !dbg !57
  %451 = fsub float %449, %450, !dbg !56
  %452 = extractelement <2 x float> %398, i64 0, !dbg !56
  %453 = extractelement <2 x float> %398, i64 1, !dbg !57
  %454 = fsub float %452, %453, !dbg !56
  %455 = extractelement <2 x float> %409, i64 0, !dbg !56
  %456 = extractelement <2 x float> %409, i64 1, !dbg !57
  %457 = fsub float %455, %456, !dbg !56
  %458 = extractelement <2 x float> %420, i64 0, !dbg !56
  %459 = extractelement <2 x float> %420, i64 1, !dbg !57
  %460 = fsub float %458, %459, !dbg !56
  %461 = extractelement <2 x float> %431, i64 0, !dbg !56
  %462 = extractelement <2 x float> %431, i64 1, !dbg !57
  %463 = fsub float %461, %462, !dbg !56
  %464 = extractelement <2 x float> %442, i64 0, !dbg !56
  %465 = extractelement <2 x float> %442, i64 1, !dbg !57
  %466 = fsub float %464, %465, !dbg !56
  %467 = fmul float %445, %108, !dbg !58
  %468 = fmul float %448, %110, !dbg !58
  %469 = fmul float %451, %112, !dbg !58
  %470 = fmul float %454, %114, !dbg !58
  %471 = fmul float %457, %116, !dbg !58
  %472 = fmul float %460, %118, !dbg !58
  %473 = fmul float %463, %120, !dbg !58
  %474 = fmul float %466, %122, !dbg !58
  %475 = fadd float %444, %467, !dbg !57
  %476 = fadd float %447, %468, !dbg !57
  %477 = fadd float %450, %469, !dbg !57
  %478 = fadd float %453, %470, !dbg !57
  %479 = fadd float %456, %471, !dbg !57
  %480 = fadd float %459, %472, !dbg !57
  %481 = fadd float %462, %473, !dbg !57
  %482 = fadd float %465, %474, !dbg !57
  %483 = shl nsw i32 %26, 10, !dbg !59
  %484 = shl nsw i32 %27, 10, !dbg !59
  %485 = sext i32 %483 to i64, !dbg !60
  %486 = sext i32 %484 to i64, !dbg !60
  %487 = getelementptr float, ptr addrspace(1) %7, i64 %155, !dbg !61
  %488 = getelementptr float, ptr addrspace(1) %487, i64 %485, !dbg !61
  %489 = getelementptr float, ptr addrspace(1) %7, i64 %156, !dbg !61
  %490 = getelementptr float, ptr addrspace(1) %489, i64 %485, !dbg !61
  %491 = getelementptr float, ptr addrspace(1) %7, i64 %157, !dbg !61
  %492 = getelementptr float, ptr addrspace(1) %491, i64 %485, !dbg !61
  %493 = getelementptr float, ptr addrspace(1) %7, i64 %158, !dbg !61
  %494 = getelementptr float, ptr addrspace(1) %493, i64 %485, !dbg !61
  %495 = getelementptr float, ptr addrspace(1) %7, i64 %159, !dbg !61
  %496 = getelementptr float, ptr addrspace(1) %495, i64 %486, !dbg !61
  %497 = getelementptr float, ptr addrspace(1) %7, i64 %160, !dbg !61
  %498 = getelementptr float, ptr addrspace(1) %497, i64 %486, !dbg !61
  %499 = getelementptr float, ptr addrspace(1) %7, i64 %161, !dbg !61
  %500 = getelementptr float, ptr addrspace(1) %499, i64 %486, !dbg !61
  %501 = getelementptr float, ptr addrspace(1) %7, i64 %162, !dbg !61
  %502 = getelementptr float, ptr addrspace(1) %501, i64 %486, !dbg !61
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %488, i1 true) #1, !dbg !62
  %504 = bitcast i32 %503 to float, !dbg !62
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %490, i1 true) #1, !dbg !62
  %506 = bitcast i32 %505 to float, !dbg !62
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %492, i1 true) #1, !dbg !62
  %508 = bitcast i32 %507 to float, !dbg !62
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %494, i1 true) #1, !dbg !62
  %510 = bitcast i32 %509 to float, !dbg !62
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %496, i1 true) #1, !dbg !62
  %512 = bitcast i32 %511 to float, !dbg !62
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %498, i1 true) #1, !dbg !62
  %514 = bitcast i32 %513 to float, !dbg !62
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %500, i1 true) #1, !dbg !62
  %516 = bitcast i32 %515 to float, !dbg !62
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %502, i1 true) #1, !dbg !62
  %518 = bitcast i32 %517 to float, !dbg !62
  %519 = getelementptr float, ptr addrspace(1) %7, i64 %227, !dbg !63
  %520 = getelementptr float, ptr addrspace(1) %519, i64 %485, !dbg !63
  %521 = getelementptr float, ptr addrspace(1) %7, i64 %228, !dbg !63
  %522 = getelementptr float, ptr addrspace(1) %521, i64 %485, !dbg !63
  %523 = getelementptr float, ptr addrspace(1) %7, i64 %229, !dbg !63
  %524 = getelementptr float, ptr addrspace(1) %523, i64 %485, !dbg !63
  %525 = getelementptr float, ptr addrspace(1) %7, i64 %230, !dbg !63
  %526 = getelementptr float, ptr addrspace(1) %525, i64 %485, !dbg !63
  %527 = getelementptr float, ptr addrspace(1) %7, i64 %231, !dbg !63
  %528 = getelementptr float, ptr addrspace(1) %527, i64 %486, !dbg !63
  %529 = getelementptr float, ptr addrspace(1) %7, i64 %232, !dbg !63
  %530 = getelementptr float, ptr addrspace(1) %529, i64 %486, !dbg !63
  %531 = getelementptr float, ptr addrspace(1) %7, i64 %233, !dbg !63
  %532 = getelementptr float, ptr addrspace(1) %531, i64 %486, !dbg !63
  %533 = getelementptr float, ptr addrspace(1) %7, i64 %234, !dbg !63
  %534 = getelementptr float, ptr addrspace(1) %533, i64 %486, !dbg !63
  %535 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %520, i1 true) #1, !dbg !64
  %536 = bitcast i32 %535 to float, !dbg !64
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %522, i1 true) #1, !dbg !64
  %538 = bitcast i32 %537 to float, !dbg !64
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %524, i1 true) #1, !dbg !64
  %540 = bitcast i32 %539 to float, !dbg !64
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %526, i1 true) #1, !dbg !64
  %542 = bitcast i32 %541 to float, !dbg !64
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %528, i1 true) #1, !dbg !64
  %544 = bitcast i32 %543 to float, !dbg !64
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %530, i1 true) #1, !dbg !64
  %546 = bitcast i32 %545 to float, !dbg !64
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #1, !dbg !64
  %548 = bitcast i32 %547 to float, !dbg !64
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %534, i1 true) #1, !dbg !64
  %550 = bitcast i32 %549 to float, !dbg !64
  %551 = fsub float %536, %504, !dbg !65
  %552 = fsub float %538, %506, !dbg !65
  %553 = fsub float %540, %508, !dbg !65
  %554 = fsub float %542, %510, !dbg !65
  %555 = fsub float %544, %512, !dbg !65
  %556 = fsub float %546, %514, !dbg !65
  %557 = fsub float %548, %516, !dbg !65
  %558 = fsub float %550, %518, !dbg !65
  %559 = fmul float %551, %82, !dbg !66
  %560 = fmul float %552, %83, !dbg !66
  %561 = fmul float %553, %84, !dbg !66
  %562 = fmul float %554, %85, !dbg !66
  %563 = fmul float %555, %91, !dbg !66
  %564 = fmul float %556, %92, !dbg !66
  %565 = fmul float %557, %93, !dbg !66
  %566 = fmul float %558, %94, !dbg !66
  %567 = fadd float %559, %504, !dbg !67
  %568 = fadd float %560, %506, !dbg !67
  %569 = fadd float %561, %508, !dbg !67
  %570 = fadd float %562, %510, !dbg !67
  %571 = fadd float %563, %512, !dbg !67
  %572 = fadd float %564, %514, !dbg !67
  %573 = fadd float %565, %516, !dbg !67
  %574 = fadd float %566, %518, !dbg !67
  %575 = mul i32 %30, 1310720, !dbg !68
  %576 = mul i32 %31, 1310720, !dbg !68
  %577 = add i32 %575, %.decomposed2, !dbg !69
  %578 = add i32 %576, %.decomposed4, !dbg !69
  %579 = sext i32 %577 to i64, !dbg !70
  %580 = getelementptr float, ptr addrspace(1) %8, i64 %579, !dbg !70
  %581 = sext i32 %578 to i64, !dbg !70
  %582 = getelementptr float, ptr addrspace(1) %8, i64 %581, !dbg !70
  %583 = bitcast float %475 to i32, !dbg !71
  %584 = bitcast float %476 to i32, !dbg !71
  %585 = bitcast float %477 to i32, !dbg !71
  %586 = bitcast float %478 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %583, i32 %584, i32 %585, i32 %586, ptr addrspace(1) %580, i1 true) #1, !dbg !71
  %587 = bitcast float %479 to i32, !dbg !71
  %588 = bitcast float %480 to i32, !dbg !71
  %589 = bitcast float %481 to i32, !dbg !71
  %590 = bitcast float %482 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %587, i32 %588, i32 %589, i32 %590, ptr addrspace(1) %582, i1 true) #1, !dbg !71
  %591 = sext i32 %17 to i64, !dbg !72
  %592 = getelementptr float, ptr addrspace(1) %9, i64 %591, !dbg !72
  %593 = sext i32 %19 to i64, !dbg !72
  %594 = getelementptr float, ptr addrspace(1) %9, i64 %593, !dbg !72
  %595 = bitcast float %567 to i32, !dbg !73
  %596 = bitcast float %568 to i32, !dbg !73
  %597 = bitcast float %569 to i32, !dbg !73
  %598 = bitcast float %570 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %595, i32 %596, i32 %597, i32 %598, ptr addrspace(1) %592, i1 true) #1, !dbg !73
  %599 = bitcast float %571 to i32, !dbg !73
  %600 = bitcast float %572 to i32, !dbg !73
  %601 = bitcast float %573 to i32, !dbg !73
  %602 = bitcast float %574 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %599, i32 %600, i32 %601, i32 %602, ptr addrspace(1) %594, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52u3kgyunba3g5v4l3qtwq4xjioewxcy6ohtrhezi6xhar6fbef.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 44, column: 37, scope: !7)
!37 = !DILocation(line: 44, column: 52, scope: !7)
!38 = !DILocation(line: 44, column: 47, scope: !7)
!39 = !DILocation(line: 44, column: 64, scope: !7)
!40 = !DILocation(line: 44, column: 57, scope: !7)
!41 = !DILocation(line: 44, column: 30, scope: !7)
!42 = !DILocation(line: 44, column: 69, scope: !7)
!43 = !DILocation(line: 47, column: 35, scope: !7)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 71, scope: !7)
!47 = !DILocation(line: 54, column: 35, scope: !7)
!48 = !DILocation(line: 55, column: 41, scope: !7)
!49 = !DILocation(line: 55, column: 31, scope: !7)
!50 = !DILocation(line: 55, column: 71, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 72, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 53, scope: !7)
!60 = !DILocation(line: 63, column: 48, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 58, scope: !7)
!63 = !DILocation(line: 64, column: 31, scope: !7)
!64 = !DILocation(line: 64, column: 59, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 38, scope: !7)
!69 = !DILocation(line: 68, column: 30, scope: !7)
!70 = !DILocation(line: 68, column: 25, scope: !7)
!71 = !DILocation(line: 68, column: 50, scope: !7)
!72 = !DILocation(line: 69, column: 25, scope: !7)
!73 = !DILocation(line: 69, column: 37, scope: !7)
!74 = !DILocation(line: 69, column: 4, scope: !7)
