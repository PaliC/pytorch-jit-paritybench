; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_div_le_mul_pow_rsub_sqrt_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #4, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #4, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #4, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #4, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #4, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #4, !dbg !21
  %33 = or disjoint i32 %13, 1, !dbg !22
  %34 = or disjoint i32 %13, 5, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #4, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #4, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #4, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #4, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #4, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #4, !dbg !28
  %53 = or disjoint i32 %13, 2, !dbg !29
  %54 = or disjoint i32 %13, 6, !dbg !29
  %55 = sext i32 %53 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #4, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %12) #4, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %12) #4, !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #4, !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %12) #4, !dbg !35
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %12) #4, !dbg !35
  %73 = or disjoint i32 %13, 3, !dbg !36
  %74 = or disjoint i32 %13, 7, !dbg !36
  %75 = sext i32 %73 to i64, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !37
  %77 = sext i32 %74 to i64, !dbg !37
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !37
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %12) #4, !dbg !38
  %80 = bitcast i32 %79 to float, !dbg !38
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %12) #4, !dbg !38
  %82 = bitcast i32 %81 to float, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !39
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %12) #4, !dbg !40
  %86 = bitcast i32 %85 to float, !dbg !40
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %12) #4, !dbg !40
  %88 = bitcast i32 %87 to float, !dbg !40
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !41
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !41
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %12) #4, !dbg !42
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %12) #4, !dbg !42
  %93 = fmul float %20, %20, !dbg !43
  %94 = fmul float %22, %22, !dbg !43
  %95 = fsub float %93, %26, !dbg !44
  %96 = fadd float %95, 1.000000e+00, !dbg !44
  %97 = fsub float %94, %28, !dbg !44
  %98 = fadd float %97, 1.000000e+00, !dbg !44
  %.inv = fcmp ole float %96, 0.000000e+00, !dbg !45
  %99 = select i1 %.inv, float 0.000000e+00, float %96, !dbg !45
  %.inv1 = fcmp ole float %98, 0.000000e+00, !dbg !45
  %100 = select i1 %.inv1, float 0.000000e+00, float %98, !dbg !45
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i = icmp eq i32 %101, 0, !dbg !49
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !49
  %.not1.i = icmp eq i32 %102, 0, !dbg !49
  br i1 %.not.i, label %108, label %103, !dbg !49

103:                                              ; preds = %5
  br i1 %.not1.i, label %106, label %104, !dbg !49

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #4, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #4, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

108:                                              ; preds = %5
  br i1 %.not1.i, label %111, label %109, !dbg !49

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #4, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #4, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !49
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i8 = icmp eq i32 %113, 0, !dbg !49
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !49
  %.not1.i11 = icmp eq i32 %114, 0, !dbg !49
  br i1 %.not.i8, label %120, label %115, !dbg !49

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %118, label %116, !dbg !49

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !49
  br label %__nv_sqrtf.exit12, !dbg !49

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !49
  br label %__nv_sqrtf.exit12, !dbg !49

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %123, label %121, !dbg !49

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !49
  br label %__nv_sqrtf.exit12, !dbg !49

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !49
  br label %__nv_sqrtf.exit12, !dbg !49

__nv_sqrtf.exit12:                                ; preds = %116, %118, %121, %123
  %.0.i10 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !49
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 2.000000e+00) #4, !dbg !50
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 2.000000e+00) #4, !dbg !50
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 2.000000e+00) #4, !dbg !51
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.000000e+00) #4, !dbg !51
  %129 = fmul float %125, %125, !dbg !52
  %130 = fmul float %126, %126, !dbg !52
  %131 = fsub float %127, %129, !dbg !53
  %132 = fsub float %128, %130, !dbg !53
  %133 = fmul float %131, 2.000000e+00, !dbg !54
  %134 = fmul float %132, 2.000000e+00, !dbg !54
  %135 = fsub float 1.000000e+00, %133, !dbg !55
  %136 = fsub float 1.000000e+00, %134, !dbg !55
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 2.000000e+00) #4, !dbg !56
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.000000e+00) #4, !dbg !56
  %.inv2 = fcmp ole float %137, 0.000000e+00, !dbg !57
  %139 = select i1 %.inv2, float 0.000000e+00, float %137, !dbg !57
  %.inv3 = fcmp ole float %138, 0.000000e+00, !dbg !57
  %140 = select i1 %.inv3, float 0.000000e+00, float %138, !dbg !57
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i13 = icmp eq i32 %141, 0, !dbg !59
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i16 = icmp eq i32 %142, 0, !dbg !59
  br i1 %.not.i13, label %148, label %143, !dbg !59

143:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %146, label %144, !dbg !59

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit17, !dbg !59

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit17, !dbg !59

148:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %151, label %149, !dbg !59

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit17, !dbg !59

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit17, !dbg !59

__nv_sqrtf.exit17:                                ; preds = %144, %146, %149, %151
  %.0.i15 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !59
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i18 = icmp eq i32 %153, 0, !dbg !59
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i21 = icmp eq i32 %154, 0, !dbg !59
  br i1 %.not.i18, label %160, label %155, !dbg !59

155:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %158, label %156, !dbg !59

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !59
  br label %__nv_sqrtf.exit22, !dbg !59

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !59
  br label %__nv_sqrtf.exit22, !dbg !59

160:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %163, label %161, !dbg !59

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !59
  br label %__nv_sqrtf.exit22, !dbg !59

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !59
  br label %__nv_sqrtf.exit22, !dbg !59

__nv_sqrtf.exit22:                                ; preds = %156, %158, %161, %163
  %.0.i20 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !59
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 3.000000e+00) #4, !dbg !60
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 3.000000e+00) #4, !dbg !60
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 3.000000e+00) #4, !dbg !61
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 3.000000e+00) #4, !dbg !61
  %169 = fmul float %165, %165, !dbg !62
  %170 = fmul float %166, %166, !dbg !62
  %171 = fsub float %167, %169, !dbg !63
  %172 = fsub float %168, %170, !dbg !63
  %173 = fmul float %171, 3.000000e+00, !dbg !64
  %174 = fmul float %172, 3.000000e+00, !dbg !64
  %175 = fsub float 1.000000e+00, %173, !dbg !65
  %176 = fsub float 1.000000e+00, %174, !dbg !65
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 3.000000e+00) #4, !dbg !66
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 3.000000e+00) #4, !dbg !66
  %.inv4 = fcmp ole float %177, 0.000000e+00, !dbg !67
  %179 = select i1 %.inv4, float 0.000000e+00, float %177, !dbg !67
  %.inv5 = fcmp ole float %178, 0.000000e+00, !dbg !67
  %180 = select i1 %.inv5, float 0.000000e+00, float %178, !dbg !67
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !69
  %.not.i23 = icmp eq i32 %181, 0, !dbg !69
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !69
  %.not1.i26 = icmp eq i32 %182, 0, !dbg !69
  br i1 %.not.i23, label %188, label %183, !dbg !69

183:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %186, label %184, !dbg !69

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !69
  br label %__nv_sqrtf.exit27, !dbg !69

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !69
  br label %__nv_sqrtf.exit27, !dbg !69

188:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %191, label %189, !dbg !69

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !69
  br label %__nv_sqrtf.exit27, !dbg !69

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !69
  br label %__nv_sqrtf.exit27, !dbg !69

__nv_sqrtf.exit27:                                ; preds = %184, %186, %189, %191
  %.0.i25 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !69
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !69
  %.not.i28 = icmp eq i32 %193, 0, !dbg !69
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !69
  %.not1.i31 = icmp eq i32 %194, 0, !dbg !69
  br i1 %.not.i28, label %200, label %195, !dbg !69

195:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %198, label %196, !dbg !69

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #4, !dbg !69
  br label %__nv_sqrtf.exit32, !dbg !69

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #4, !dbg !69
  br label %__nv_sqrtf.exit32, !dbg !69

200:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %203, label %201, !dbg !69

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #4, !dbg !69
  br label %__nv_sqrtf.exit32, !dbg !69

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #4, !dbg !69
  br label %__nv_sqrtf.exit32, !dbg !69

__nv_sqrtf.exit32:                                ; preds = %196, %198, %201, %203
  %.0.i30 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !69
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #4, !dbg !70
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 4.000000e+00) #4, !dbg !70
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 4.000000e+00) #4, !dbg !71
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 4.000000e+00) #4, !dbg !71
  %209 = fmul float %205, %205, !dbg !72
  %210 = fmul float %206, %206, !dbg !72
  %211 = fsub float %207, %209, !dbg !73
  %212 = fsub float %208, %210, !dbg !73
  %213 = fmul float %211, 4.000000e+00, !dbg !74
  %214 = fmul float %212, 4.000000e+00, !dbg !74
  %215 = fsub float 1.000000e+00, %213, !dbg !75
  %216 = fsub float 1.000000e+00, %214, !dbg !75
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float 4.000000e+00) #4, !dbg !76
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float 4.000000e+00) #4, !dbg !76
  %.inv6 = fcmp ole float %217, 0.000000e+00, !dbg !77
  %219 = select i1 %.inv6, float 0.000000e+00, float %217, !dbg !77
  %.inv7 = fcmp ole float %218, 0.000000e+00, !dbg !77
  %220 = select i1 %.inv7, float 0.000000e+00, float %218, !dbg !77
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not.i33 = icmp eq i32 %221, 0, !dbg !79
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !79
  %.not1.i36 = icmp eq i32 %222, 0, !dbg !79
  br i1 %.not.i33, label %228, label %223, !dbg !79

223:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %226, label %224, !dbg !79

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #4, !dbg !79
  br label %__nv_sqrtf.exit37, !dbg !79

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #4, !dbg !79
  br label %__nv_sqrtf.exit37, !dbg !79

228:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %231, label %229, !dbg !79

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #4, !dbg !79
  br label %__nv_sqrtf.exit37, !dbg !79

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #4, !dbg !79
  br label %__nv_sqrtf.exit37, !dbg !79

__nv_sqrtf.exit37:                                ; preds = %224, %226, %229, %231
  %.0.i35 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !79
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not.i38 = icmp eq i32 %233, 0, !dbg !79
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !79
  %.not1.i41 = icmp eq i32 %234, 0, !dbg !79
  br i1 %.not.i38, label %240, label %235, !dbg !79

235:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %238, label %236, !dbg !79

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #4, !dbg !79
  br label %__nv_sqrtf.exit42, !dbg !79

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #4, !dbg !79
  br label %__nv_sqrtf.exit42, !dbg !79

240:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %243, label %241, !dbg !79

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #4, !dbg !79
  br label %__nv_sqrtf.exit42, !dbg !79

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #4, !dbg !79
  br label %__nv_sqrtf.exit42, !dbg !79

__nv_sqrtf.exit42:                                ; preds = %236, %238, %241, %243
  %.0.i40 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !79
  %245 = insertelement <4 x float> poison, float %126, i64 0, !dbg !80
  %246 = insertelement <4 x float> %245, float %22, i64 1, !dbg !80
  %247 = insertelement <4 x float> %246, float %166, i64 2, !dbg !80
  %248 = insertelement <4 x float> %247, float %206, i64 3, !dbg !80
  %249 = insertelement <4 x float> poison, float %.0.i20, i64 0, !dbg !80
  %250 = insertelement <4 x float> %249, float %.0.i10, i64 1, !dbg !80
  %251 = insertelement <4 x float> %250, float %.0.i30, i64 2, !dbg !80
  %252 = insertelement <4 x float> %251, float %.0.i40, i64 3, !dbg !80
  %253 = fsub <4 x float> %248, %252, !dbg !80
  %254 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !28
  %255 = insertelement <4 x i32> %254, i32 %32, i64 1, !dbg !28
  %256 = insertelement <4 x i32> %255, i32 %72, i64 2, !dbg !28
  %257 = insertelement <4 x i32> %256, i32 %92, i64 3, !dbg !28
  %258 = bitcast <4 x i32> %257 to <4 x float>, !dbg !28
  %259 = insertelement <4 x float> poison, float %125, i64 0, !dbg !80
  %260 = insertelement <4 x float> %259, float %20, i64 1, !dbg !80
  %261 = insertelement <4 x float> %260, float %165, i64 2, !dbg !80
  %262 = insertelement <4 x float> %261, float %205, i64 3, !dbg !80
  %263 = insertelement <4 x float> poison, float %.0.i15, i64 0, !dbg !80
  %264 = insertelement <4 x float> %263, float %.0.i, i64 1, !dbg !80
  %265 = insertelement <4 x float> %264, float %.0.i25, i64 2, !dbg !80
  %266 = insertelement <4 x float> %265, float %.0.i35, i64 3, !dbg !80
  %267 = fsub <4 x float> %262, %266, !dbg !80
  %268 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !28
  %269 = insertelement <4 x i32> %268, i32 %31, i64 1, !dbg !28
  %270 = insertelement <4 x i32> %269, i32 %71, i64 2, !dbg !28
  %271 = insertelement <4 x i32> %270, i32 %91, i64 3, !dbg !28
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !28
  %273 = fcmp ole <4 x float> %267, %272, !dbg !81
  %274 = fcmp ole <4 x float> %253, %258, !dbg !81
  %275 = bitcast <4 x i1> %273 to i4, !dbg !82
  %276 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %275), !dbg !82
  %277 = zext nneg i4 %276 to i64, !dbg !82
  %278 = bitcast <4 x i1> %274 to i4, !dbg !82
  %279 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %278), !dbg !82
  %280 = zext nneg i4 %279 to i64, !dbg !82
  %281 = sext i32 %11 to i64, !dbg !83
  %282 = getelementptr i64, ptr addrspace(1) %3, i64 %281, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %277, i64 %280, ptr addrspace(1) %282, i1 %12) #4, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbwj5mhvhafkoikr3jwc4h3q6brt4xfib3q33ti3hmdwhaf7xgd.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_clamp_div_le_mul_pow_rsub_sqrt_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_div_le_mul_pow_rsub_sqrt_sub_sum_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_div_le_mul_pow_rsub_sqrt_sub_sum_1", linkageName: "triton_poi_fused_clamp_div_le_mul_pow_rsub_sqrt_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 31, scope: !7)
!21 = !DILocation(line: 27, column: 38, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 42, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 34, column: 35, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 42, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 42, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 42, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 46, column: 41, scope: !7)
!49 = !DILocation(line: 47, column: 27, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 19, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 59, column: 42, scope: !7)
!59 = !DILocation(line: 60, column: 27, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 19, scope: !7)
!66 = !DILocation(line: 72, column: 20, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !68)
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 74, column: 27, scope: !7)
!70 = !DILocation(line: 80, column: 20, scope: !7)
!71 = !DILocation(line: 81, column: 20, scope: !7)
!72 = !DILocation(line: 82, column: 20, scope: !7)
!73 = !DILocation(line: 83, column: 20, scope: !7)
!74 = !DILocation(line: 84, column: 20, scope: !7)
!75 = !DILocation(line: 85, column: 19, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !78)
!78 = !DILocation(line: 87, column: 42, scope: !7)
!79 = !DILocation(line: 88, column: 27, scope: !7)
!80 = !DILocation(line: 61, column: 20, scope: !7)
!81 = !DILocation(line: 62, column: 21, scope: !7)
!82 = !DILocation(line: 92, column: 20, scope: !7)
!83 = !DILocation(line: 93, column: 25, scope: !7)
!84 = !DILocation(line: 93, column: 37, scope: !7)
!85 = !DILocation(line: 93, column: 4, scope: !7)
