; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/63/c63eapa6oikktyf277gjevw5mdkak6vzzmrzdywrjifnuxcskwrb.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp0 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_mul_scatter_add_zero_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %7 = shl i32 %6, 8, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = shl i32 %8, 1, !dbg !14
  %10 = and i32 %9, 254, !dbg !14
  %11 = or disjoint i32 %7, %10, !dbg !15
  %12 = icmp slt i32 %11, 256, !dbg !16
  %.frozen = freeze i32 %11, !dbg !17
  %13 = sdiv i32 %.frozen, 4, !dbg !17
  %14 = mul i32 %13, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %14, !dbg !18
  %15 = sext i32 %.decomposed to i64, !dbg !19
  %16 = getelementptr i64, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %16, i1 %12) #3, !dbg !20
  %18 = extractvalue { i64, i64 } %17, 0, !dbg !20
  %19 = extractvalue { i64, i64 } %17, 1, !dbg !20
  %20 = sext i32 %11 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %12) #3, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !23
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !24
  %25 = or i64 %18, %19, !dbg !25
  %.not13 = icmp ugt i64 %25, 3, !dbg !25
  %26 = and i1 %12, %.not13, !dbg !25
  br i1 %26, label %27, label %28, !dbg !25

27:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 30, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

28:                                               ; preds = %5
  %29 = extractvalue { i32, i32 } %24, 1, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = extractvalue { i32, i32 } %24, 0, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = and i32 %8, 127, !dbg !14
  %38 = or disjoint i32 %37, 128, !dbg !14
  %39 = or disjoint i32 %7, %38, !dbg !15
  %40 = icmp slt i32 %39, 256, !dbg !16
  %41 = or disjoint i32 %7, %37, !dbg !15
  %42 = icmp slt i32 %41, 256, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %43 = fmul float %36, %32, !dbg !26
  %44 = fmul float %34, %30, !dbg !26
  %45 = shl nsw i32 %13, 2, !dbg !27
  %46 = sext i32 %45 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %46, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %46, !dbg !29
  %51 = ptrtoint ptr addrspace(1) %48 to i64, !dbg !30
  %52 = ptrtoint ptr addrspace(1) %50 to i64, !dbg !30
  %53 = zext nneg i32 %10 to i64, !dbg !30
  %54 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %53, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %54, i64 %51, i64 %52, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %55 = zext nneg i32 %37 to i64, !dbg !30
  %56 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %55, !dbg !30
  %57 = load i64, ptr addrspace(3) %56, align 8, !dbg !30
  %58 = zext nneg i32 %38 to i64, !dbg !30
  %59 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %58, !dbg !30
  %60 = load i64, ptr addrspace(3) %59, align 8, !dbg !30
  %61 = inttoptr i64 %57 to ptr addrspace(1), !dbg !30
  %62 = inttoptr i64 %60 to ptr addrspace(1), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !30
  %64 = bitcast float %43 to i32, !dbg !30
  %65 = bitcast float %44 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %63, i32 %64, i32 %65, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !30
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !30
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !30
  %69 = load float, ptr addrspace(3) %68, align 4, !dbg !30
  %70 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %61, float %67, i1 %42) #3, !dbg !30
  %71 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %62, float %69, i1 %40) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c63eapa6oikktyf277gjevw5mdkak6vzzmrzdywrjifnuxcskwrb.py", directory: "inductor_cache/63")
!4 = !{ptr @triton_poi_fused_mul_scatter_add_zero_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_scatter_add_zero_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_mul_scatter_add_zero_1", linkageName: "triton_poi_fused_mul_scatter_add_zero_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 27, column: 30, scope: !11)
!20 = !DILocation(line: 27, column: 35, scope: !11)
!21 = !DILocation(line: 28, column: 30, scope: !11)
!22 = !DILocation(line: 28, column: 35, scope: !11)
!23 = !DILocation(line: 29, column: 30, scope: !11)
!24 = !DILocation(line: 29, column: 35, scope: !11)
!25 = !DILocation(line: 30, column: 60, scope: !11)
!26 = !DILocation(line: 31, column: 18, scope: !11)
!27 = !DILocation(line: 32, column: 39, scope: !11)
!28 = !DILocation(line: 32, column: 37, scope: !11)
!29 = !DILocation(line: 32, column: 30, scope: !11)
!30 = !DILocation(line: 32, column: 50, scope: !11)
!31 = !DILocation(line: 32, column: 4, scope: !11)
