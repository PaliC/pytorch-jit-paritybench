; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 1024, !dbg !14
  %22 = srem i32 %20, 1024, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %23 = sdiv i32 %.frozen, 172032, !dbg !15
  %.frozen83 = freeze i32 %20, !dbg !15
  %24 = sdiv i32 %.frozen83, 172032, !dbg !15
  %25 = mul i32 %23, 172032, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %25, !dbg !16
  %26 = mul i32 %24, 172032, !dbg !16
  %srem1.decomposed = sub i32 %.frozen83, %26, !dbg !16
  %27 = mul nsw i32 %23, 110592, !dbg !17
  %28 = mul nsw i32 %24, 110592, !dbg !17
  %29 = add nsw i32 %27, %srem.decomposed, !dbg !18
  %30 = add nsw i32 %28, %srem1.decomposed, !dbg !18
  %31 = sext i32 %29 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = mul nsw i32 %23, 12288, !dbg !20
  %36 = mul nsw i32 %24, 12288, !dbg !20
  %37 = add nsw i32 %35, %21, !dbg !21
  %38 = add nsw i32 %37, -110592, !dbg !22
  %39 = add nsw i32 %36, %22, !dbg !21
  %40 = add nsw i32 %39, -110592, !dbg !22
  %41 = add nsw i32 %37, -122880, !dbg !23
  %42 = add nsw i32 %39, -122880, !dbg !23
  %43 = add nsw i32 %37, -135168, !dbg !24
  %44 = add nsw i32 %39, -135168, !dbg !24
  %45 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !25
  %46 = insertelement <2 x i32> %45, i32 %19, i64 1, !dbg !25
  %47 = sdiv <2 x i32> %46, splat (i32 1024), !dbg !25
  %48 = srem <2 x i32> %47, splat (i32 168), !dbg !26
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !27
  %50 = sext i32 %49 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !27
  %52 = extractelement <2 x i32> %48, i64 0, !dbg !27
  %53 = sext i32 %52 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %72 = bitcast i32 %71 to float, !dbg !30
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %76 = bitcast i32 %75 to float, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %78 = bitcast i32 %77 to float, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %80 = bitcast i32 %79 to float, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %8, i64 %50, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %50, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %101 = icmp slt <2 x i32> %48, splat (i32 108), !dbg !35
  %102 = extractelement <2 x i1> %101, i64 1, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !36
  %104 = extractelement <2 x i1> %101, i64 0, !dbg !36
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !36
  %106 = add nsw <2 x i32> %48, splat (i32 -108), !dbg !37
  %107 = icmp ult <2 x i32> %106, splat (i32 12), !dbg !37
  %108 = shl nsw i32 %49, 10, !dbg !21
  %109 = shl nsw i32 %52, 10, !dbg !21
  %110 = add nsw i32 %38, %108, !dbg !38
  %111 = add nsw i32 %40, %109, !dbg !38
  %112 = sext i32 %110 to i64, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !39
  %114 = sext i32 %111 to i64, !dbg !39
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !39
  %116 = extractelement <2 x i1> %107, i64 1, !dbg !40
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !40
  %118 = extractelement <2 x i1> %107, i64 0, !dbg !40
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !40
  %120 = add nsw <2 x i32> %48, splat (i32 -120), !dbg !41
  %121 = icmp ult <2 x i32> %120, splat (i32 12), !dbg !41
  %122 = add nsw i32 %41, %108, !dbg !42
  %123 = add nsw i32 %42, %109, !dbg !42
  %124 = sext i32 %122 to i64, !dbg !43
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !43
  %126 = sext i32 %123 to i64, !dbg !43
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !43
  %128 = extractelement <2 x i1> %121, i64 1, !dbg !44
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !44
  %130 = extractelement <2 x i1> %121, i64 0, !dbg !44
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !44
  %132 = add nsw <2 x i32> %48, splat (i32 -132), !dbg !45
  %133 = icmp ult <2 x i32> %132, splat (i32 12), !dbg !45
  %134 = add nsw i32 %43, %108, !dbg !46
  %135 = add nsw i32 %44, %109, !dbg !46
  %136 = sext i32 %134 to i64, !dbg !47
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !47
  %138 = sext i32 %135 to i64, !dbg !47
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !47
  %140 = extractelement <2 x i1> %133, i64 1, !dbg !48
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #3, !dbg !48
  %142 = extractelement <2 x i1> %133, i64 0, !dbg !48
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !48
  %144 = add nsw <2 x i32> %48, splat (i32 -144), !dbg !49
  %145 = icmp ult <2 x i32> %144, splat (i32 12), !dbg !49
  %146 = add nsw i32 %37, -147456, !dbg !50
  %147 = add nsw i32 %146, %108, !dbg !51
  %148 = add nsw i32 %39, -147456, !dbg !50
  %149 = add nsw i32 %148, %109, !dbg !51
  %150 = sext i32 %147 to i64, !dbg !52
  %151 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !52
  %152 = sext i32 %149 to i64, !dbg !52
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %152, !dbg !52
  %154 = extractelement <2 x i1> %145, i64 1, !dbg !53
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #3, !dbg !53
  %156 = extractelement <2 x i1> %145, i64 0, !dbg !53
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #3, !dbg !53
  %158 = icmp sgt i32 %49, 155, !dbg !54
  %159 = icmp sgt i32 %52, 155, !dbg !54
  %160 = add nsw i32 %37, -159744, !dbg !55
  %161 = add nsw i32 %160, %108, !dbg !56
  %162 = add nsw i32 %39, -159744, !dbg !55
  %163 = add nsw i32 %162, %109, !dbg !56
  %164 = sext i32 %161 to i64, !dbg !57
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !57
  %166 = sext i32 %163 to i64, !dbg !57
  %167 = getelementptr float, ptr addrspace(1) %5, i64 %166, !dbg !57
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %165, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #3, !dbg !58
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159) #3, !dbg !58
  %170 = fadd float %66, 0x3EE4F8B580000000, !dbg !59
  %171 = fadd float %68, 0x3EE4F8B580000000, !dbg !59
  %172 = fadd float %70, 0x3EE4F8B580000000, !dbg !59
  %173 = fadd float %72, 0x3EE4F8B580000000, !dbg !59
  %174 = fadd float %74, 0x3EE4F8B580000000, !dbg !59
  %175 = fadd float %76, 0x3EE4F8B580000000, !dbg !59
  %176 = fadd float %78, 0x3EE4F8B580000000, !dbg !59
  %177 = fadd float %80, 0x3EE4F8B580000000, !dbg !59
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %178, 0, !dbg !60
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %179, 0, !dbg !60
  br i1 %.not.i, label %185, label %180, !dbg !60

180:                                              ; preds = %13
  br i1 %.not1.i, label %183, label %181, !dbg !60

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

185:                                              ; preds = %13
  br i1 %.not1.i, label %188, label %186, !dbg !60

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %181, %183, %186, %188
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !60
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i41 = icmp eq i32 %190, 0, !dbg !60
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i44 = icmp eq i32 %191, 0, !dbg !60
  br i1 %.not.i41, label %197, label %192, !dbg !60

192:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %195, label %193, !dbg !60

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

197:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %200, label %198, !dbg !60

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

__nv_sqrtf.exit45:                                ; preds = %193, %195, %198, %200
  %.0.i43 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !60
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i46 = icmp eq i32 %202, 0, !dbg !60
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i49 = icmp eq i32 %203, 0, !dbg !60
  br i1 %.not.i46, label %209, label %204, !dbg !60

204:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %207, label %205, !dbg !60

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

209:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %212, label %210, !dbg !60

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

__nv_sqrtf.exit50:                                ; preds = %205, %207, %210, %212
  %.0.i48 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !60
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i51 = icmp eq i32 %214, 0, !dbg !60
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i54 = icmp eq i32 %215, 0, !dbg !60
  br i1 %.not.i51, label %221, label %216, !dbg !60

216:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %219, label %217, !dbg !60

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

221:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %224, label %222, !dbg !60

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

__nv_sqrtf.exit55:                                ; preds = %217, %219, %222, %224
  %.0.i53 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !60
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i56 = icmp eq i32 %226, 0, !dbg !60
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i59 = icmp eq i32 %227, 0, !dbg !60
  br i1 %.not.i56, label %233, label %228, !dbg !60

228:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %231, label %229, !dbg !60

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

233:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %236, label %234, !dbg !60

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

__nv_sqrtf.exit60:                                ; preds = %229, %231, %234, %236
  %.0.i58 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !60
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i61 = icmp eq i32 %238, 0, !dbg !60
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i64 = icmp eq i32 %239, 0, !dbg !60
  br i1 %.not.i61, label %245, label %240, !dbg !60

240:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %243, label %241, !dbg !60

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

245:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %248, label %246, !dbg !60

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

__nv_sqrtf.exit65:                                ; preds = %241, %243, %246, %248
  %.0.i63 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !60
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i66 = icmp eq i32 %250, 0, !dbg !60
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i69 = icmp eq i32 %251, 0, !dbg !60
  br i1 %.not.i66, label %257, label %252, !dbg !60

252:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %255, label %253, !dbg !60

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

257:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %260, label %258, !dbg !60

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

__nv_sqrtf.exit70:                                ; preds = %253, %255, %258, %260
  %.0.i68 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !60
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i71 = icmp eq i32 %262, 0, !dbg !60
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i74 = icmp eq i32 %263, 0, !dbg !60
  br i1 %.not.i71, label %269, label %264, !dbg !60

264:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %267, label %265, !dbg !60

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

269:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %272, label %270, !dbg !60

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

__nv_sqrtf.exit75:                                ; preds = %265, %267, %270, %272
  %.0.i73 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !60
  %274 = shufflevector <2 x i1> %145, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %275 = shufflevector <2 x i1> %133, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !45
  %276 = shufflevector <2 x i1> %121, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %277 = shufflevector <2 x i1> %107, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !37
  %278 = shufflevector <2 x i1> %101, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %279 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !36
  %280 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !40
  %281 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !44
  %282 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !48
  %283 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !53
  %284 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !58
  %285 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !28
  %286 = insertelement <8 x i32> %285, i32 %61, i64 1, !dbg !28
  %287 = insertelement <8 x i32> %286, i32 %60, i64 2, !dbg !28
  %288 = insertelement <8 x i32> %287, i32 %59, i64 3, !dbg !28
  %289 = insertelement <8 x i32> %288, i32 %58, i64 4, !dbg !28
  %290 = insertelement <8 x i32> %289, i32 %57, i64 5, !dbg !28
  %291 = insertelement <8 x i32> %290, i32 %56, i64 6, !dbg !28
  %292 = insertelement <8 x i32> %291, i32 %55, i64 7, !dbg !28
  %293 = bitcast <8 x i32> %292 to <8 x float>, !dbg !28
  %294 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !40
  %296 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !44
  %297 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !48
  %298 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !53
  %299 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !58
  %300 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !36
  %301 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !40
  %302 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !44
  %303 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !48
  %304 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !53
  %305 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !58
  %306 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !36
  %307 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !40
  %308 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !44
  %309 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !48
  %310 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !53
  %311 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !58
  %312 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !40
  %314 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !44
  %315 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !53
  %317 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !58
  %318 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !40
  %320 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !44
  %321 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !48
  %322 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !58
  %324 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !40
  %326 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !44
  %327 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !48
  %328 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !58
  %330 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !36
  %331 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !40
  %332 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !44
  %333 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !48
  %334 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !53
  %335 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !58
  %336 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !34
  %337 = insertelement <8 x i32> %336, i32 %99, i64 1, !dbg !34
  %338 = insertelement <8 x i32> %337, i32 %98, i64 2, !dbg !34
  %339 = insertelement <8 x i32> %338, i32 %97, i64 3, !dbg !34
  %340 = insertelement <8 x i32> %339, i32 %96, i64 4, !dbg !34
  %341 = insertelement <8 x i32> %340, i32 %95, i64 5, !dbg !34
  %342 = insertelement <8 x i32> %341, i32 %94, i64 6, !dbg !34
  %343 = insertelement <8 x i32> %342, i32 %93, i64 7, !dbg !34
  %344 = bitcast <8 x i32> %343 to <8 x float>, !dbg !34
  %345 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !32
  %346 = insertelement <8 x i32> %345, i32 %89, i64 1, !dbg !32
  %347 = insertelement <8 x i32> %346, i32 %88, i64 2, !dbg !32
  %348 = insertelement <8 x i32> %347, i32 %87, i64 3, !dbg !32
  %349 = insertelement <8 x i32> %348, i32 %86, i64 4, !dbg !32
  %350 = insertelement <8 x i32> %349, i32 %85, i64 5, !dbg !32
  %351 = insertelement <8 x i32> %350, i32 %84, i64 6, !dbg !32
  %352 = insertelement <8 x i32> %351, i32 %83, i64 7, !dbg !32
  %353 = bitcast <8 x i32> %352 to <8 x float>, !dbg !32
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !61
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !61
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !61
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !61
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !61
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !61
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !61
  %362 = insertelement <8 x i32> poison, i32 %283, i64 0, !dbg !62
  %363 = insertelement <8 x i32> %362, i32 %298, i64 1, !dbg !62
  %364 = insertelement <8 x i32> %363, i32 %304, i64 2, !dbg !62
  %365 = insertelement <8 x i32> %364, i32 %310, i64 3, !dbg !62
  %366 = insertelement <8 x i32> %365, i32 %316, i64 4, !dbg !62
  %367 = insertelement <8 x i32> %366, i32 %322, i64 5, !dbg !62
  %368 = insertelement <8 x i32> %367, i32 %328, i64 6, !dbg !62
  %369 = insertelement <8 x i32> %368, i32 %334, i64 7, !dbg !62
  %370 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !62
  %371 = insertelement <8 x i32> %370, i32 %299, i64 1, !dbg !62
  %372 = insertelement <8 x i32> %371, i32 %305, i64 2, !dbg !62
  %373 = insertelement <8 x i32> %372, i32 %311, i64 3, !dbg !62
  %374 = insertelement <8 x i32> %373, i32 %317, i64 4, !dbg !62
  %375 = insertelement <8 x i32> %374, i32 %323, i64 5, !dbg !62
  %376 = insertelement <8 x i32> %375, i32 %329, i64 6, !dbg !62
  %377 = insertelement <8 x i32> %376, i32 %335, i64 7, !dbg !62
  %378 = select <8 x i1> %274, <8 x i32> %369, <8 x i32> %377, !dbg !62
  %379 = insertelement <8 x i32> poison, i32 %282, i64 0, !dbg !63
  %380 = insertelement <8 x i32> %379, i32 %297, i64 1, !dbg !63
  %381 = insertelement <8 x i32> %380, i32 %303, i64 2, !dbg !63
  %382 = insertelement <8 x i32> %381, i32 %309, i64 3, !dbg !63
  %383 = insertelement <8 x i32> %382, i32 %315, i64 4, !dbg !63
  %384 = insertelement <8 x i32> %383, i32 %321, i64 5, !dbg !63
  %385 = insertelement <8 x i32> %384, i32 %327, i64 6, !dbg !63
  %386 = insertelement <8 x i32> %385, i32 %333, i64 7, !dbg !63
  %387 = select <8 x i1> %275, <8 x i32> %386, <8 x i32> %378, !dbg !63
  %388 = insertelement <8 x i32> poison, i32 %281, i64 0, !dbg !64
  %389 = insertelement <8 x i32> %388, i32 %296, i64 1, !dbg !64
  %390 = insertelement <8 x i32> %389, i32 %302, i64 2, !dbg !64
  %391 = insertelement <8 x i32> %390, i32 %308, i64 3, !dbg !64
  %392 = insertelement <8 x i32> %391, i32 %314, i64 4, !dbg !64
  %393 = insertelement <8 x i32> %392, i32 %320, i64 5, !dbg !64
  %394 = insertelement <8 x i32> %393, i32 %326, i64 6, !dbg !64
  %395 = insertelement <8 x i32> %394, i32 %332, i64 7, !dbg !64
  %396 = select <8 x i1> %276, <8 x i32> %395, <8 x i32> %387, !dbg !64
  %397 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !65
  %398 = insertelement <8 x i32> %397, i32 %295, i64 1, !dbg !65
  %399 = insertelement <8 x i32> %398, i32 %301, i64 2, !dbg !65
  %400 = insertelement <8 x i32> %399, i32 %307, i64 3, !dbg !65
  %401 = insertelement <8 x i32> %400, i32 %313, i64 4, !dbg !65
  %402 = insertelement <8 x i32> %401, i32 %319, i64 5, !dbg !65
  %403 = insertelement <8 x i32> %402, i32 %325, i64 6, !dbg !65
  %404 = insertelement <8 x i32> %403, i32 %331, i64 7, !dbg !65
  %405 = select <8 x i1> %277, <8 x i32> %404, <8 x i32> %396, !dbg !65
  %406 = insertelement <8 x i32> poison, i32 %279, i64 0, !dbg !66
  %407 = insertelement <8 x i32> %406, i32 %294, i64 1, !dbg !66
  %408 = insertelement <8 x i32> %407, i32 %300, i64 2, !dbg !66
  %409 = insertelement <8 x i32> %408, i32 %306, i64 3, !dbg !66
  %410 = insertelement <8 x i32> %409, i32 %312, i64 4, !dbg !66
  %411 = insertelement <8 x i32> %410, i32 %318, i64 5, !dbg !66
  %412 = insertelement <8 x i32> %411, i32 %324, i64 6, !dbg !66
  %413 = insertelement <8 x i32> %412, i32 %330, i64 7, !dbg !66
  %414 = select <8 x i1> %278, <8 x i32> %413, <8 x i32> %405, !dbg !66
  %415 = bitcast <8 x i32> %414 to <8 x float>, !dbg !66
  %416 = fsub <8 x float> %415, %293, !dbg !67
  %417 = insertelement <8 x float> poison, float %361, i64 0, !dbg !68
  %418 = insertelement <8 x float> %417, float %360, i64 1, !dbg !68
  %419 = insertelement <8 x float> %418, float %359, i64 2, !dbg !68
  %420 = insertelement <8 x float> %419, float %358, i64 3, !dbg !68
  %421 = insertelement <8 x float> %420, float %357, i64 4, !dbg !68
  %422 = insertelement <8 x float> %421, float %356, i64 5, !dbg !68
  %423 = insertelement <8 x float> %422, float %355, i64 6, !dbg !68
  %424 = insertelement <8 x float> %423, float %354, i64 7, !dbg !68
  %425 = fmul <8 x float> %416, %424, !dbg !68
  %426 = fmul <8 x float> %425, %353, !dbg !69
  %427 = fadd <8 x float> %426, %344, !dbg !70
  %428 = fcmp olt <8 x float> %427, zeroinitializer, !dbg !71
  %429 = extractelement <8 x i1> %428, i64 7, !dbg !75
  %430 = extractelement <8 x i1> %428, i64 6, !dbg !75
  %431 = extractelement <8 x i1> %428, i64 5, !dbg !75
  %432 = extractelement <8 x i1> %428, i64 4, !dbg !75
  %433 = extractelement <8 x i1> %428, i64 3, !dbg !75
  %434 = extractelement <8 x i1> %428, i64 2, !dbg !75
  %435 = extractelement <8 x i1> %428, i64 1, !dbg !75
  %436 = extractelement <8 x i1> %428, i64 0, !dbg !75
  %437 = sext i32 %19 to i64, !dbg !76
  %438 = getelementptr float, ptr addrspace(1) %10, i64 %437, !dbg !76
  %439 = sext i32 %20 to i64, !dbg !76
  %440 = getelementptr float, ptr addrspace(1) %10, i64 %439, !dbg !76
  %441 = extractelement <8 x i32> %414, i64 4, !dbg !77
  %442 = extractelement <8 x i32> %414, i64 5, !dbg !77
  %443 = extractelement <8 x i32> %414, i64 6, !dbg !77
  %444 = extractelement <8 x i32> %414, i64 7, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %443, i32 %442, i32 %441, ptr addrspace(1) %438, i1 true) #3, !dbg !77
  %445 = extractelement <8 x i32> %414, i64 0, !dbg !77
  %446 = extractelement <8 x i32> %414, i64 1, !dbg !77
  %447 = extractelement <8 x i32> %414, i64 2, !dbg !77
  %448 = extractelement <8 x i32> %414, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %447, i32 %446, i32 %445, ptr addrspace(1) %440, i1 true) #3, !dbg !77
  %449 = getelementptr float, ptr addrspace(1) %11, i64 %437, !dbg !78
  %450 = getelementptr float, ptr addrspace(1) %11, i64 %439, !dbg !78
  %bc = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %451 = extractelement <8 x i32> %bc, i64 7, !dbg !79
  %452 = select i1 %429, i32 0, i32 %451, !dbg !75
  %bc76 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %453 = extractelement <8 x i32> %bc76, i64 6, !dbg !79
  %454 = select i1 %430, i32 0, i32 %453, !dbg !75
  %bc77 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %455 = extractelement <8 x i32> %bc77, i64 5, !dbg !79
  %456 = select i1 %431, i32 0, i32 %455, !dbg !75
  %bc78 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %457 = extractelement <8 x i32> %bc78, i64 4, !dbg !79
  %458 = select i1 %432, i32 0, i32 %457, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %454, i32 %456, i32 %458, ptr addrspace(1) %449, i1 true) #3, !dbg !79
  %bc79 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %459 = extractelement <8 x i32> %bc79, i64 3, !dbg !79
  %460 = select i1 %433, i32 0, i32 %459, !dbg !75
  %bc80 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %461 = extractelement <8 x i32> %bc80, i64 2, !dbg !79
  %462 = select i1 %434, i32 0, i32 %461, !dbg !75
  %bc81 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %463 = extractelement <8 x i32> %bc81, i64 1, !dbg !79
  %464 = select i1 %435, i32 0, i32 %463, !dbg !75
  %bc82 = bitcast <8 x float> %427 to <8 x i32>, !dbg !79
  %465 = extractelement <8 x i32> %bc82, i64 0, !dbg !79
  %466 = select i1 %436, i32 0, i32 %465, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %460, i32 %462, i32 %464, i32 %466, ptr addrspace(1) %450, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c62v3r2553fuexjo6fwqwmsg7hsa5qt5syo62msr3snlqk2xnhxx.py", directory: "inductor_cache/62")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 54, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 63, scope: !7)
!21 = !DILocation(line: 42, column: 42, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 29, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 59, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 68, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 68, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 68, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 57, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 68, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 36, scope: !7)
!56 = !DILocation(line: 61, column: 57, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 68, scope: !7)
!59 = !DILocation(line: 69, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 27, scope: !7)
!61 = !DILocation(line: 72, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 35, scope: !7)
!63 = !DILocation(line: 63, column: 35, scope: !7)
!64 = !DILocation(line: 64, column: 35, scope: !7)
!65 = !DILocation(line: 65, column: 34, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 79, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 80, column: 25, scope: !7)
!77 = !DILocation(line: 80, column: 37, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
