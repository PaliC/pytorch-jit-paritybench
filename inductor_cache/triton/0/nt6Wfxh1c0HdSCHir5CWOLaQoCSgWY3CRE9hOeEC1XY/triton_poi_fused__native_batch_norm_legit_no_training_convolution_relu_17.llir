; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = icmp slt i32 %17, 64, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 512, !dbg !16
  %20 = mul i32 %19, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %16, 512, !dbg !16
  %22 = shl i32 %17, 9, !dbg !18
  %23 = add i32 %.decomposed, %22, !dbg !19
  %24 = shl i32 %19, 15, !dbg !20
  %25 = shl i32 %21, 15, !dbg !20
  %26 = add i32 %23, %24, !dbg !21
  %27 = add i32 %25, %.decomposed, !dbg !19
  %28 = add i32 %27, %22, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #4, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #4, !dbg !23
  %35 = sext i32 %.decomposed to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %45 = bitcast i32 %41 to float, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = bitcast i32 %50 to float, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !30
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !31
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !31
  %64 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %65 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %66 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %67 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %68 = fadd float %54, 0x3EE4F8B580000000, !dbg !32
  %69 = fadd float %55, 0x3EE4F8B580000000, !dbg !32
  %70 = fadd float %56, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %72, 0, !dbg !33
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %73, 0, !dbg !33
  br i1 %.not.i, label %79, label %74, !dbg !33

74:                                               ; preds = %9
  br i1 %.not1.i, label %77, label %75, !dbg !33

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %85, 0, !dbg !33
  br i1 %.not.i5, label %91, label %86, !dbg !33

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %89, label %87, !dbg !33

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %87, %89, %92, %94
  %.0.i7 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %96, 0, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %97, 0, !dbg !33
  br i1 %.not.i10, label %103, label %98, !dbg !33

98:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %101, label %99, !dbg !33

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

103:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %99, %101, %104, %106
  %.0.i12 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !33
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %108, 0, !dbg !33
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %109, 0, !dbg !33
  br i1 %.not.i15, label %115, label %110, !dbg !33

110:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %113, label %111, !dbg !33

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

115:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %118, label %116, !dbg !33

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %111, %113, %116, %118
  %.0.i17 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !33
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %120, 0, !dbg !33
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %121, 0, !dbg !33
  br i1 %.not.i20, label %127, label %122, !dbg !33

122:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %125, label %123, !dbg !33

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

127:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %130, label %128, !dbg !33

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %123, %125, %128, %130
  %.0.i22 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !33
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %132, 0, !dbg !33
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %133, 0, !dbg !33
  br i1 %.not.i25, label %139, label %134, !dbg !33

134:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %137, label %135, !dbg !33

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

139:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %142, label %140, !dbg !33

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %135, %137, %140, %142
  %.0.i27 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !33
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %144, 0, !dbg !33
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %145, 0, !dbg !33
  br i1 %.not.i30, label %151, label %146, !dbg !33

146:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %149, label %147, !dbg !33

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

151:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %154, label %152, !dbg !33

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %147, %149, %152, %154
  %.0.i32 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !33
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %156, 0, !dbg !33
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %157, 0, !dbg !33
  br i1 %.not.i35, label %163, label %158, !dbg !33

158:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %161, label %159, !dbg !33

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

163:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %166, label %164, !dbg !33

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %159, %161, %164, %166
  %.0.i37 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !33
  %168 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %169 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %171 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %172 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %173 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %175 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %177 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %179 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %181 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %182 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %183 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %184 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !29
  %193 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %200 = and i32 %12, 127, !dbg !12
  %201 = or disjoint i32 %200, 896, !dbg !12
  %202 = or disjoint i32 %11, %201, !dbg !13
  %203 = or disjoint i32 %200, 768, !dbg !12
  %204 = or disjoint i32 %11, %203, !dbg !13
  %205 = or disjoint i32 %200, 640, !dbg !12
  %206 = or disjoint i32 %11, %205, !dbg !13
  %207 = or disjoint i32 %200, 512, !dbg !12
  %208 = or disjoint i32 %11, %207, !dbg !13
  %209 = or disjoint i32 %200, 384, !dbg !12
  %210 = or disjoint i32 %11, %209, !dbg !13
  %211 = or disjoint i32 %200, 256, !dbg !12
  %212 = or disjoint i32 %11, %211, !dbg !13
  %213 = or disjoint i32 %200, 128, !dbg !12
  %214 = or disjoint i32 %11, %213, !dbg !13
  %215 = or disjoint i32 %11, %200, !dbg !13
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !34
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %224 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !23
  %225 = insertelement <8 x i32> %224, i32 %170, i64 1, !dbg !23
  %226 = insertelement <8 x i32> %225, i32 %172, i64 2, !dbg !23
  %227 = insertelement <8 x i32> %226, i32 %174, i64 3, !dbg !23
  %228 = insertelement <8 x i32> %227, i32 %176, i64 4, !dbg !23
  %229 = insertelement <8 x i32> %228, i32 %178, i64 5, !dbg !23
  %230 = insertelement <8 x i32> %229, i32 %180, i64 6, !dbg !23
  %231 = insertelement <8 x i32> %230, i32 %182, i64 7, !dbg !23
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !23
  %233 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !25
  %234 = insertelement <8 x i32> %233, i32 %171, i64 1, !dbg !25
  %235 = insertelement <8 x i32> %234, i32 %173, i64 2, !dbg !25
  %236 = insertelement <8 x i32> %235, i32 %175, i64 3, !dbg !25
  %237 = insertelement <8 x i32> %236, i32 %177, i64 4, !dbg !25
  %238 = insertelement <8 x i32> %237, i32 %179, i64 5, !dbg !25
  %239 = insertelement <8 x i32> %238, i32 %181, i64 6, !dbg !25
  %240 = insertelement <8 x i32> %239, i32 %183, i64 7, !dbg !25
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !25
  %242 = fsub <8 x float> %232, %241, !dbg !35
  %243 = insertelement <8 x i32> poison, i32 %184, i64 0, !dbg !31
  %244 = insertelement <8 x i32> %243, i32 %185, i64 1, !dbg !31
  %245 = insertelement <8 x i32> %244, i32 %186, i64 2, !dbg !31
  %246 = insertelement <8 x i32> %245, i32 %187, i64 3, !dbg !31
  %247 = insertelement <8 x i32> %246, i32 %188, i64 4, !dbg !31
  %248 = insertelement <8 x i32> %247, i32 %189, i64 5, !dbg !31
  %249 = insertelement <8 x i32> %248, i32 %190, i64 6, !dbg !31
  %250 = insertelement <8 x i32> %249, i32 %191, i64 7, !dbg !31
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !31
  %252 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !29
  %253 = insertelement <8 x i32> %252, i32 %193, i64 1, !dbg !29
  %254 = insertelement <8 x i32> %253, i32 %194, i64 2, !dbg !29
  %255 = insertelement <8 x i32> %254, i32 %195, i64 3, !dbg !29
  %256 = insertelement <8 x i32> %255, i32 %196, i64 4, !dbg !29
  %257 = insertelement <8 x i32> %256, i32 %197, i64 5, !dbg !29
  %258 = insertelement <8 x i32> %257, i32 %198, i64 6, !dbg !29
  %259 = insertelement <8 x i32> %258, i32 %199, i64 7, !dbg !29
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !29
  %261 = insertelement <8 x float> poison, float %223, i64 0, !dbg !36
  %262 = insertelement <8 x float> %261, float %222, i64 1, !dbg !36
  %263 = insertelement <8 x float> %262, float %221, i64 2, !dbg !36
  %264 = insertelement <8 x float> %263, float %220, i64 3, !dbg !36
  %265 = insertelement <8 x float> %264, float %219, i64 4, !dbg !36
  %266 = insertelement <8 x float> %265, float %218, i64 5, !dbg !36
  %267 = insertelement <8 x float> %266, float %217, i64 6, !dbg !36
  %268 = insertelement <8 x float> %267, float %216, i64 7, !dbg !36
  %269 = fmul <8 x float> %242, %268, !dbg !36
  %270 = fmul <8 x float> %269, %260, !dbg !37
  %271 = fadd <8 x float> %270, %251, !dbg !38
  %272 = fcmp olt <8 x float> %271, zeroinitializer, !dbg !39
  %273 = extractelement <8 x i1> %272, i64 7, !dbg !43
  %274 = extractelement <8 x float> %271, i64 7, !dbg !43
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !43
  %276 = extractelement <8 x i1> %272, i64 6, !dbg !43
  %277 = extractelement <8 x float> %271, i64 6, !dbg !43
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !43
  %279 = extractelement <8 x i1> %272, i64 5, !dbg !43
  %280 = extractelement <8 x float> %271, i64 5, !dbg !43
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !43
  %282 = extractelement <8 x i1> %272, i64 4, !dbg !43
  %283 = extractelement <8 x float> %271, i64 4, !dbg !43
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !43
  %285 = extractelement <8 x i1> %272, i64 3, !dbg !43
  %286 = extractelement <8 x float> %271, i64 3, !dbg !43
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !43
  %288 = extractelement <8 x i1> %272, i64 2, !dbg !43
  %289 = extractelement <8 x float> %271, i64 2, !dbg !43
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !43
  %291 = extractelement <8 x i1> %272, i64 1, !dbg !43
  %292 = extractelement <8 x float> %271, i64 1, !dbg !43
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !43
  %294 = extractelement <8 x i1> %272, i64 0, !dbg !43
  %295 = extractelement <8 x float> %271, i64 0, !dbg !43
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !43
  %297 = shl i32 %215, 6, !dbg !44
  %298 = shl i32 %214, 6, !dbg !44
  %299 = shl i32 %212, 6, !dbg !44
  %300 = shl i32 %210, 6, !dbg !44
  %301 = shl i32 %208, 6, !dbg !44
  %302 = shl i32 %206, 6, !dbg !44
  %303 = shl i32 %204, 6, !dbg !44
  %304 = shl i32 %202, 6, !dbg !44
  %305 = add i32 %297, %17, !dbg !45
  %306 = add i32 %298, %17, !dbg !45
  %307 = add i32 %299, %17, !dbg !45
  %308 = add i32 %300, %17, !dbg !45
  %309 = add i32 %301, %17, !dbg !45
  %310 = add i32 %302, %17, !dbg !45
  %311 = add i32 %303, %17, !dbg !45
  %312 = add i32 %304, %17, !dbg !45
  %313 = sext i32 %305 to i64, !dbg !46
  %314 = getelementptr float, ptr addrspace(1) %5, i64 %313, !dbg !46
  %315 = sext i32 %306 to i64, !dbg !46
  %316 = getelementptr float, ptr addrspace(1) %5, i64 %315, !dbg !46
  %317 = sext i32 %307 to i64, !dbg !46
  %318 = getelementptr float, ptr addrspace(1) %5, i64 %317, !dbg !46
  %319 = sext i32 %308 to i64, !dbg !46
  %320 = getelementptr float, ptr addrspace(1) %5, i64 %319, !dbg !46
  %321 = sext i32 %309 to i64, !dbg !46
  %322 = getelementptr float, ptr addrspace(1) %5, i64 %321, !dbg !46
  %323 = sext i32 %310 to i64, !dbg !46
  %324 = getelementptr float, ptr addrspace(1) %5, i64 %323, !dbg !46
  %325 = sext i32 %311 to i64, !dbg !46
  %326 = getelementptr float, ptr addrspace(1) %5, i64 %325, !dbg !46
  %327 = sext i32 %312 to i64, !dbg !46
  %328 = getelementptr float, ptr addrspace(1) %5, i64 %327, !dbg !46
  %.idx = shl nuw nsw i32 %14, 3, !dbg !47
  %329 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !47
  %330 = bitcast float %275 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !47
  %331 = shl nuw nsw i32 %14, 1, !dbg !47
  %332 = or disjoint i32 %331, 2, !dbg !47
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %332, !dbg !47
  %334 = bitcast float %278 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !47
  %335 = or disjoint i32 %331, 4, !dbg !47
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %335, !dbg !47
  %337 = bitcast float %281 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !47
  %338 = or disjoint i32 %331, 6, !dbg !47
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !47
  %340 = bitcast float %284 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.idx1 = shl nuw nsw i32 %200, 3, !dbg !47
  %341 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !47
  %342 = load i32, ptr addrspace(3) %341, align 8, !dbg !47
  %.idx2 = shl nuw nsw i32 %213, 3, !dbg !47
  %343 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !47
  %344 = load i32, ptr addrspace(3) %343, align 8, !dbg !47
  %.idx3 = shl nuw nsw i32 %211, 3, !dbg !47
  %345 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !47
  %346 = load i32, ptr addrspace(3) %345, align 8, !dbg !47
  %.idx4 = shl nuw nsw i32 %209, 3, !dbg !47
  %347 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !47
  %348 = load i32, ptr addrspace(3) %347, align 8, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %349 = bitcast float %287 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %349, i1 true) #4, !dbg !47
  %350 = bitcast float %290 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %350, i1 true) #4, !dbg !47
  %351 = bitcast float %293 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %351, i1 true) #4, !dbg !47
  %352 = bitcast float %296 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %352, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %353 = load i32, ptr addrspace(3) %341, align 8, !dbg !47
  %354 = load i32, ptr addrspace(3) %343, align 8, !dbg !47
  %355 = load i32, ptr addrspace(3) %345, align 8, !dbg !47
  %356 = load i32, ptr addrspace(3) %347, align 8, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %314, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %316, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %318, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %320, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %322, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %324, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %326, i1 %18) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %328, i1 %18) #4, !dbg !47
  %357 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !48
  %358 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !48
  %359 = bitcast float %275 to i32, !dbg !49
  %360 = bitcast float %278 to i32, !dbg !49
  %361 = bitcast float %281 to i32, !dbg !49
  %362 = bitcast float %284 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %359, i32 %360, i32 %361, i32 %362, ptr addrspace(1) %357, i1 %18) #4, !dbg !49
  %363 = bitcast float %287 to i32, !dbg !49
  %364 = bitcast float %290 to i32, !dbg !49
  %365 = bitcast float %293 to i32, !dbg !49
  %366 = bitcast float %296 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %364, i32 %365, i32 %366, ptr addrspace(1) %358, i1 %18) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crwha7ldb3upy7nlwjoy5gtvfjz52l7goydzm2mr2mmwxlqy2qgm.py", directory: "inductor_cache/rw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 49, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 50, column: 33, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 45, scope: !7)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 57, scope: !7)
!50 = !DILocation(line: 51, column: 4, scope: !7)
