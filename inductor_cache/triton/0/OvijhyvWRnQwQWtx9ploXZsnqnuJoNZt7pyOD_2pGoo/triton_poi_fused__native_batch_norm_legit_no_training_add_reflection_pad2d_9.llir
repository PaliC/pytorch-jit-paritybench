; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_reflection_pad2d_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 400, !dbg !14
  %13 = sdiv i32 %10, 25, !dbg !15
  %14 = sdiv i32 %11, 25, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %15 = sdiv i32 %.frozen, 5, !dbg !16
  %16 = mul i32 %15, 5, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %.frozen3 = freeze i32 %11, !dbg !16
  %17 = sdiv i32 %.frozen3, 5, !dbg !16
  %18 = mul i32 %17, 5, !dbg !17
  %.decomposed4 = sub i32 %.frozen3, %18, !dbg !17
  %19 = srem i32 %15, 5, !dbg !18
  %20 = srem i32 %17, 5, !dbg !18
  %21 = sext i32 %13 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = sext i32 %14 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = add nsw i32 %.decomposed, -1, !dbg !21
  %30 = add nsw i32 %.decomposed4, -1, !dbg !21
  %31 = tail call i32 @llvm.abs.i32(i32 %29, i1 true), !dbg !22
  %32 = tail call i32 @llvm.abs.i32(i32 %30, i1 true), !dbg !22
  %33 = add nsw i32 %31, -2, !dbg !23
  %34 = add nsw i32 %32, -2, !dbg !23
  %35 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !24
  %36 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !24
  %37 = add nsw i32 %19, -1, !dbg !25
  %38 = add nsw i32 %20, -1, !dbg !25
  %39 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !26
  %40 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !26
  %41 = add nsw i32 %39, -2, !dbg !27
  %42 = add nsw i32 %40, -2, !dbg !27
  %43 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !28
  %44 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !28
  %45 = mul nsw i32 %43, -3, !dbg !29
  %46 = mul nsw i32 %44, -3, !dbg !29
  %47 = mul nsw i32 %13, 9, !dbg !30
  %48 = mul nsw i32 %14, 9, !dbg !30
  %reass.sub = add nsw i32 %47, 8, !dbg !31
  %49 = sub nsw i32 %reass.sub, %35, !dbg !31
  %50 = add nsw i32 %49, %45, !dbg !32
  %reass.sub1 = add nsw i32 %48, 8, !dbg !31
  %51 = sub nsw i32 %reass.sub1, %36, !dbg !31
  %52 = add nsw i32 %51, %46, !dbg !32
  %53 = sext i32 %50 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %55 = sext i32 %52 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %12) #1, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = fadd float %26, %58, !dbg !35
  %62 = fadd float %28, %60, !dbg !35
  %63 = sext i32 %10 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !36
  %65 = bitcast float %61 to i32, !dbg !37
  %66 = bitcast float %62 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %64, i1 %12) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpcpfmu2mybi3jbmd4unmz5wnrppsjft36sreyhynrvgojenrmph.py", directory: "inductor_cache/pc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_reflection_pad2d_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_reflection_pad2d_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_reflection_pad2d_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_reflection_pad2d_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 78, scope: !7)
!22 = !DILocation(line: 29, column: 71, scope: !7)
!23 = !DILocation(line: 29, column: 59, scope: !7)
!24 = !DILocation(line: 29, column: 52, scope: !7)
!25 = !DILocation(line: 29, column: 130, scope: !7)
!26 = !DILocation(line: 29, column: 123, scope: !7)
!27 = !DILocation(line: 29, column: 111, scope: !7)
!28 = !DILocation(line: 29, column: 104, scope: !7)
!29 = !DILocation(line: 29, column: 92, scope: !7)
!30 = !DILocation(line: 29, column: 140, scope: !7)
!31 = !DILocation(line: 29, column: 87, scope: !7)
!32 = !DILocation(line: 29, column: 138, scope: !7)
!33 = !DILocation(line: 29, column: 30, scope: !7)
!34 = !DILocation(line: 29, column: 145, scope: !7)
!35 = !DILocation(line: 30, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 25, scope: !7)
!37 = !DILocation(line: 31, column: 36, scope: !7)
!38 = !DILocation(line: 31, column: 4, scope: !7)
