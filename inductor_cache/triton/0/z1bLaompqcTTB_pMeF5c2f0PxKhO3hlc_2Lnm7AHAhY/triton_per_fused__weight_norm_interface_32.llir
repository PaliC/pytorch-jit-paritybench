; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = icmp samesign ult i32 %7, 28, !dbg !11
  %9 = zext nneg i32 %7 to i64, !dbg !12
  %10 = getelementptr float, ptr addrspace(1) %1, i64 %9, !dbg !12
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %10, i1 %8, i32 0, i1 %8) #5, !dbg !13
  %12 = bitcast i32 %11 to float, !dbg !13
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %10, i1 %8, i32 0, i1 %8) #5, !dbg !13
  %14 = bitcast i32 %13 to float, !dbg !13
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #5, !dbg !14
  %16 = fmul float %12, %12, !dbg !15
  %17 = fmul float %14, %14, !dbg !15
  %18 = select i1 %8, float %16, float 0.000000e+00, !dbg !16
  %19 = select i1 %8, float %17, float 0.000000e+00, !dbg !16
  %20 = bitcast float %18 to i32, !dbg !17
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = fadd float %18, %22, !dbg !21
  %24 = bitcast float %23 to i32, !dbg !17
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 8, i32 31), !dbg !17
  %26 = bitcast i32 %25 to float, !dbg !17
  %27 = fadd float %23, %26, !dbg !21
  %28 = bitcast float %27 to i32, !dbg !17
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !17
  %30 = bitcast i32 %29 to float, !dbg !17
  %31 = fadd float %27, %30, !dbg !21
  %32 = bitcast float %31 to i32, !dbg !17
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !17
  %34 = bitcast i32 %33 to float, !dbg !17
  %35 = fadd float %31, %34, !dbg !21
  %36 = bitcast float %35 to i32, !dbg !17
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !17
  %38 = bitcast i32 %37 to float, !dbg !17
  %39 = fadd float %35, %38, !dbg !21
  %40 = bitcast float %19 to i32, !dbg !17
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !17
  %42 = bitcast i32 %41 to float, !dbg !17
  %43 = fadd float %19, %42, !dbg !21
  %44 = bitcast float %43 to i32, !dbg !17
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !17
  %46 = bitcast i32 %45 to float, !dbg !17
  %47 = fadd float %43, %46, !dbg !21
  %48 = bitcast float %47 to i32, !dbg !17
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !17
  %50 = bitcast i32 %49 to float, !dbg !17
  %51 = fadd float %47, %50, !dbg !21
  %52 = bitcast float %51 to i32, !dbg !17
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !17
  %54 = bitcast i32 %53 to float, !dbg !17
  %55 = fadd float %51, %54, !dbg !21
  %56 = bitcast float %55 to i32, !dbg !17
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !17
  %58 = bitcast i32 %57 to float, !dbg !17
  %59 = fadd float %55, %58, !dbg !21
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not.i = icmp eq i32 %60, 0, !dbg !23
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %.not1.i = icmp eq i32 %61, 0, !dbg !23
  br i1 %.not.i, label %67, label %62, !dbg !23

62:                                               ; preds = %5
  br i1 %.not1.i, label %65, label %63, !dbg !23

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

67:                                               ; preds = %5
  br i1 %.not1.i, label %70, label %68, !dbg !23

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !23
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not.i1 = icmp eq i32 %72, 0, !dbg !23
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !23
  br i1 %.not.i1, label %79, label %74, !dbg !23

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !23

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !23

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !23
  %84 = bitcast i32 %15 to float, !dbg !14
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %.0.i) #5, !dbg !24
  %86 = fmul float %85, %12, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %urem = and i32 %6, 63, !dbg !27
  %87 = icmp eq i32 %urem, 0, !dbg !27
  %88 = bitcast float %.0.i3 to i32, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %0, i1 %87) #5, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %9, !dbg !28
  %90 = and i32 %6, 32, !dbg !29
  %91 = icmp eq i32 %90, 0, !dbg !29
  %92 = bitcast float %86 to i32, !dbg !29
  %93 = and i1 %91, %8, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %89, i1 %93) #5, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py", directory: "inductor_cache/he")
!4 = !{ptr @triton_per_fused__weight_norm_interface_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_32, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_32", linkageName: "triton_per_fused__weight_norm_interface_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 35, column: 33, scope: !7)
!17 = !DILocation(line: 267, column: 36, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = !DILocation(line: 36, column: 24, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !20)
!22 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!23 = !DILocation(line: 37, column: 26, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 4, scope: !7)
!27 = !DILocation(line: 41, column: 70, scope: !7)
!28 = !DILocation(line: 42, column: 25, scope: !7)
!29 = !DILocation(line: 42, column: 72, scope: !7)
!30 = !DILocation(line: 42, column: 4, scope: !7)
