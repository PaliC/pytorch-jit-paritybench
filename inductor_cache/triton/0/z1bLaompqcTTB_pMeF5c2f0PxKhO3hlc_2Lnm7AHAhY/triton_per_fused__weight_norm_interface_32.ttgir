#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0)
#loc1 = loc(unknown)
#loc11 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":36:24)
#loc24 = loc(callsite(#loc1 at #loc11))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__weight_norm_interface_32(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0), %arg4: i32 loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<28> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<28> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc2)
    %4 = arith.cmpi slt, %2, %cst : tensor<1x32xi32, #blocked> loc(#loc3)
    %5 = arith.cmpi slt, %3, %cst_2 : tensor<1x32xi32, #blocked1> loc(#loc3)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc4)
    %7 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc4)
    %8 = tt.addptr %6, %2 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc4)
    %9 = tt.addptr %7, %3 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc4)
    %10 = tt.load %8, %4, %cst_0 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc5)
    %11 = tt.load %9, %5, %cst_1 : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %12 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc6)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc7)
    %14 = arith.mulf %10, %10 : tensor<1x32xf32, #blocked> loc(#loc8)
    %15 = arith.mulf %11, %11 : tensor<1x32xf32, #blocked1> loc(#loc8)
    %16 = arith.select %4, %14, %cst_0 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc9)
    %17 = arith.select %5, %15, %cst_1 : tensor<1x32xi1, #blocked1>, tensor<1x32xf32, #blocked1> loc(#loc9)
    %18 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc11)), %arg6: f32 loc(callsite(#loc1 at #loc11))):
      %32 = arith.addf %arg5, %arg6 : f32 loc(#loc26)
      tt.reduce.return %32 : f32 loc(#loc23)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %19 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc11)), %arg6: f32 loc(callsite(#loc1 at #loc11))):
      %32 = arith.addf %arg5, %arg6 : f32 loc(#loc26)
      tt.reduce.return %32 : f32 loc(#loc23)
    }) : (tensor<1x32xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %20 = tt.expand_dims %18 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc13)
    %21 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc13)
    %22 = tt.extern_elementwise %20 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc14)
    %23 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc14)
    %24 = tt.splat %13 : f32 -> tensor<1x1xf32, #blocked> loc(#loc15)
    %25 = arith.divf %24, %22 : tensor<1x1xf32, #blocked> loc(#loc15)
    %26 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc15)
    %27 = arith.mulf %10, %26 : tensor<1x32xf32, #blocked> loc(#loc16)
    gpu.barrier loc(#loc17)
    %28 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc18)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    tt.store %29, %23 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc20)
    %31 = tt.addptr %30, %2 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc20)
    tt.store %31, %27, %4 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":26:34)
#loc3 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":28:21)
#loc4 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":30:30)
#loc5 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":30:35)
#loc6 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":31:30)
#loc7 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":31:19)
#loc8 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":33:18)
#loc9 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":35:33)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc13 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":36:27)
#loc14 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":37:26)
#loc15 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":38:18)
#loc16 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":39:19)
#loc17 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":40:4)
#loc18 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":41:28)
#loc19 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":41:70)
#loc20 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":42:25)
#loc21 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":42:72)
#loc22 = loc("inductor_cache/he/checan5alcagirucqbsrmez467m5q7z5ykobunnqr6v3ylqph4wd.py":42:4)
#loc23 = loc(callsite(#loc10 at #loc11))
#loc25 = loc(callsite(#loc12 at #loc10))
#loc26 = loc(callsite(#loc25 at #loc11))
