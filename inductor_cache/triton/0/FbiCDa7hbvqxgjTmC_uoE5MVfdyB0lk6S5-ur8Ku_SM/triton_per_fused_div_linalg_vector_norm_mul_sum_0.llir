; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %6, 4, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = fmul float %15, %15, !dbg !17
  %19 = fmul float %17, %17, !dbg !17
  %20 = select i1 %7, float %18, float 0.000000e+00, !dbg !18
  %21 = select i1 %7, float %19, float 0.000000e+00, !dbg !18
  %22 = bitcast float %20 to i32, !dbg !19
  %23 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 8, i32 31), !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = fadd float %20, %24, !dbg !23
  %26 = bitcast float %25 to i32, !dbg !19
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 4, i32 31), !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = fadd float %25, %28, !dbg !23
  %30 = bitcast float %29 to i32, !dbg !19
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 2, i32 31), !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = fadd float %29, %32, !dbg !23
  %34 = bitcast float %33 to i32, !dbg !19
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 1, i32 31), !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = fadd float %33, %36, !dbg !23
  %38 = bitcast float %21 to i32, !dbg !19
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !19
  %40 = bitcast i32 %39 to float, !dbg !19
  %41 = fadd float %21, %40, !dbg !23
  %42 = bitcast float %41 to i32, !dbg !19
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = fadd float %41, %44, !dbg !23
  %46 = bitcast float %45 to i32, !dbg !19
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = fadd float %45, %48, !dbg !23
  %50 = bitcast float %49 to i32, !dbg !19
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !19
  %52 = bitcast i32 %51 to float, !dbg !19
  %53 = fadd float %49, %52, !dbg !23
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i = icmp eq i32 %54, 0, !dbg !25
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !25
  %.not1.i = icmp eq i32 %55, 0, !dbg !25
  br i1 %.not.i, label %61, label %56, !dbg !25

56:                                               ; preds = %5
  br i1 %.not1.i, label %59, label %57, !dbg !25

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #4, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #4, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

61:                                               ; preds = %5
  br i1 %.not1.i, label %64, label %62, !dbg !25

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #4, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #4, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !25
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !25
  %.not.i1 = icmp eq i32 %66, 0, !dbg !25
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !25
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !25
  br i1 %.not.i1, label %73, label %68, !dbg !25

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !25

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !25

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !25
  br label %__nv_sqrtf.exit5, !dbg !25

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !25
  %78 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !26
  %79 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !26
  %80 = fcmp uno float %.0.i, 0.000000e+00, !dbg !30
  %81 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !30
  %82 = or i1 %78, %80, !dbg !31
  %83 = or i1 %79, %81, !dbg !31
  %84 = select i1 %82, float %.0.i, float 0x3D71979980000000, !dbg !32
  %85 = select i1 %83, float %.0.i3, float 0x3D71979980000000, !dbg !32
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %84) #4, !dbg !33
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %17, float %85) #4, !dbg !33
  %88 = fmul float %86, %86, !dbg !34
  %89 = select i1 %7, float %88, float 0.000000e+00, !dbg !35
  %90 = bitcast float %89 to i32, !dbg !36
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = fadd float %89, %92, !dbg !38
  %94 = bitcast float %93 to i32, !dbg !36
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !36
  %96 = bitcast i32 %95 to float, !dbg !36
  %97 = fadd float %93, %96, !dbg !38
  %98 = bitcast float %97 to i32, !dbg !36
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !36
  %100 = bitcast i32 %99 to float, !dbg !36
  %101 = fadd float %97, %100, !dbg !38
  %102 = bitcast float %101 to i32, !dbg !36
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !36
  %104 = bitcast i32 %103 to float, !dbg !36
  %105 = fadd float %101, %104, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !39
  %107 = and i32 %8, 48, !dbg !40
  %108 = icmp eq i32 %107, 0, !dbg !40
  %109 = bitcast float %87 to i32, !dbg !40
  %110 = and i1 %108, %7, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %106, i1 %110) #4, !dbg !40
  %111 = sext i32 %6 to i64, !dbg !41
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !41
  %urem = and i32 %8, 63, !dbg !42
  %113 = icmp eq i32 %urem, 0, !dbg !42
  %114 = bitcast float %105 to i32, !dbg !42
  %115 = and i1 %113, %7, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %112, i1 %115) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7ufs2qzgzfquhnmvr5l5dfeframw7s4lrg22miwuvlyyayhqnq.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_mul_sum_0", linkageName: "triton_per_fused_div_linalg_vector_norm_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 34, column: 33, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 35, column: 24, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 36, column: 26, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !37)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !37)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 44, column: 44, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 37, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
