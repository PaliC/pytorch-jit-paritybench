; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %14, 16, !dbg !13
  %17 = or disjoint i32 %14, 24, !dbg !13
  %18 = or disjoint i32 %14, 32, !dbg !13
  %19 = or disjoint i32 %14, 40, !dbg !13
  %20 = or disjoint i32 %14, 48, !dbg !13
  %21 = or disjoint i32 %14, 56, !dbg !13
  %22 = or disjoint i32 %14, 64, !dbg !13
  %23 = or disjoint i32 %14, 72, !dbg !13
  %24 = or disjoint i32 %14, 80, !dbg !13
  %25 = or disjoint i32 %14, 88, !dbg !13
  %26 = or disjoint i32 %14, 96, !dbg !13
  %27 = or disjoint i32 %14, 104, !dbg !13
  %28 = or disjoint i32 %14, 112, !dbg !13
  %29 = or disjoint i32 %14, 120, !dbg !13
  %30 = icmp slt i32 %13, 100, !dbg !14
  %31 = icmp slt i32 %14, 100, !dbg !14
  %32 = icmp slt i32 %15, 100, !dbg !14
  %33 = icmp slt i32 %16, 100, !dbg !14
  %34 = icmp slt i32 %17, 100, !dbg !14
  %35 = icmp slt i32 %18, 100, !dbg !14
  %36 = icmp slt i32 %19, 100, !dbg !14
  %37 = icmp slt i32 %20, 100, !dbg !14
  %38 = icmp slt i32 %21, 100, !dbg !14
  %39 = icmp slt i32 %22, 100, !dbg !14
  %40 = icmp slt i32 %23, 100, !dbg !14
  %41 = icmp slt i32 %24, 100, !dbg !14
  %42 = icmp slt i32 %25, 100, !dbg !14
  %43 = icmp slt i32 %26, 100, !dbg !14
  %44 = icmp slt i32 %7, 0, !dbg !14
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %46 = shl i32 %45, 5, !dbg !16
  %47 = shl i32 %8, 4, !dbg !17
  %48 = and i32 %47, 16, !dbg !17
  %49 = and i32 %8, 31, !dbg !17
  %50 = or disjoint i32 %46, %48, !dbg !18
  %51 = or disjoint i32 %50, 4, !dbg !18
  %52 = or disjoint i32 %50, 8, !dbg !18
  %53 = or disjoint i32 %50, 12, !dbg !18
  %54 = or disjoint i32 %46, %49, !dbg !18
  %55 = icmp slt i32 %50, 128, !dbg !19
  %56 = icmp slt i32 %54, 128, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %57 = sdiv i32 %.frozen, 5, !dbg !20
  %58 = mul i32 %57, 5, !dbg !21
  %.decomposed = sub i32 %.frozen, %58, !dbg !21
  %.frozen11 = freeze i32 %14, !dbg !22
  %59 = sdiv i32 %.frozen11, 25, !dbg !22
  %.frozen13 = freeze i32 %15, !dbg !22
  %60 = sdiv i32 %.frozen13, 25, !dbg !22
  %.frozen15 = freeze i32 %16, !dbg !22
  %61 = sdiv i32 %.frozen15, 25, !dbg !22
  %.frozen17 = freeze i32 %17, !dbg !22
  %62 = sdiv i32 %.frozen17, 25, !dbg !22
  %.frozen19 = freeze i32 %18, !dbg !22
  %63 = sdiv i32 %.frozen19, 25, !dbg !22
  %.frozen21 = freeze i32 %19, !dbg !22
  %64 = sdiv i32 %.frozen21, 25, !dbg !22
  %.frozen23 = freeze i32 %20, !dbg !22
  %65 = sdiv i32 %.frozen23, 25, !dbg !22
  %.frozen25 = freeze i32 %21, !dbg !22
  %66 = sdiv i32 %.frozen25, 25, !dbg !22
  %.frozen27 = freeze i32 %22, !dbg !22
  %67 = sdiv i32 %.frozen27, 25, !dbg !22
  %.frozen29 = freeze i32 %23, !dbg !22
  %68 = sdiv i32 %.frozen29, 25, !dbg !22
  %.frozen31 = freeze i32 %24, !dbg !22
  %69 = sdiv i32 %.frozen31, 25, !dbg !22
  %.frozen33 = freeze i32 %25, !dbg !22
  %70 = sdiv i32 %.frozen33, 25, !dbg !22
  %.frozen35 = freeze i32 %26, !dbg !22
  %71 = sdiv i32 %.frozen35, 25, !dbg !22
  %.frozen37 = freeze i32 %27, !dbg !22
  %72 = sdiv i32 %.frozen37, 25, !dbg !22
  %.frozen39 = freeze i32 %28, !dbg !22
  %73 = sdiv i32 %.frozen39, 25, !dbg !22
  %.frozen41 = freeze i32 %29, !dbg !22
  %74 = sdiv i32 %.frozen41, 25, !dbg !22
  %75 = mul i32 %59, 25, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %75, !dbg !23
  %76 = mul i32 %60, 25, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %76, !dbg !23
  %77 = mul i32 %61, 25, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %77, !dbg !23
  %78 = mul i32 %62, 25, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %78, !dbg !23
  %79 = mul i32 %63, 25, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %79, !dbg !23
  %80 = mul i32 %64, 25, !dbg !23
  %.decomposed22 = sub i32 %.frozen21, %80, !dbg !23
  %81 = mul i32 %65, 25, !dbg !23
  %.decomposed24 = sub i32 %.frozen23, %81, !dbg !23
  %82 = mul i32 %66, 25, !dbg !23
  %.decomposed26 = sub i32 %.frozen25, %82, !dbg !23
  %83 = mul i32 %67, 25, !dbg !23
  %.decomposed28 = sub i32 %.frozen27, %83, !dbg !23
  %84 = mul i32 %68, 25, !dbg !23
  %.decomposed30 = sub i32 %.frozen29, %84, !dbg !23
  %85 = mul i32 %69, 25, !dbg !23
  %.decomposed32 = sub i32 %.frozen31, %85, !dbg !23
  %86 = mul i32 %70, 25, !dbg !23
  %.decomposed34 = sub i32 %.frozen33, %86, !dbg !23
  %87 = mul i32 %71, 25, !dbg !23
  %.decomposed36 = sub i32 %.frozen35, %87, !dbg !23
  %88 = mul i32 %72, 25, !dbg !23
  %.decomposed38 = sub i32 %.frozen37, %88, !dbg !23
  %89 = mul i32 %73, 25, !dbg !23
  %.decomposed40 = sub i32 %.frozen39, %89, !dbg !23
  %90 = mul i32 %74, 25, !dbg !23
  %.decomposed42 = sub i32 %.frozen41, %90, !dbg !23
  %91 = shl nsw i32 %.decomposed, 8, !dbg !24
  %92 = mul i32 %57, 2560, !dbg !25
  %93 = add i32 %92, %91, !dbg !26
  %94 = add i32 %93, %50, !dbg !27
  %95 = add i32 %93, %51, !dbg !27
  %96 = add i32 %93, %52, !dbg !27
  %97 = add i32 %93, %53, !dbg !27
  %98 = sext i32 %94 to i64, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !28
  %100 = sext i32 %95 to i64, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !28
  %102 = sext i32 %96 to i64, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !28
  %104 = sext i32 %97 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !28
  %106 = and i1 %30, %55, !dbg !29
  %107 = and i1 %31, %56, !dbg !29
  %108 = and i1 %32, %56, !dbg !29
  %109 = and i1 %33, %56, !dbg !29
  %110 = and i1 %34, %56, !dbg !29
  %111 = and i1 %35, %56, !dbg !29
  %112 = and i1 %36, %56, !dbg !29
  %113 = and i1 %37, %56, !dbg !29
  %114 = and i1 %38, %56, !dbg !29
  %115 = and i1 %39, %56, !dbg !29
  %116 = and i1 %40, %56, !dbg !29
  %117 = and i1 %41, %56, !dbg !29
  %118 = and i1 %42, %56, !dbg !29
  %119 = and i1 %43, %56, !dbg !29
  %120 = and i1 %44, %56, !dbg !29
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %106) #2, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %106) #2, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !30
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %106) #2, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !30
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %106) #2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !30
  %141 = or disjoint i32 %93, 128, !dbg !31
  %142 = add i32 %141, %50, !dbg !32
  %143 = add i32 %141, %51, !dbg !32
  %144 = add i32 %141, %52, !dbg !32
  %145 = add i32 %141, %53, !dbg !32
  %146 = sext i32 %142 to i64, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !33
  %148 = sext i32 %143 to i64, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !33
  %150 = sext i32 %144 to i64, !dbg !33
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !33
  %152 = sext i32 %145 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !33
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %106) #2, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !34
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %106) #2, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !34
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %106) #2, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !34
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !34
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %106) #2, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !34
  %174 = add i32 %93, 1280, !dbg !35
  %175 = add i32 %174, %50, !dbg !36
  %176 = add i32 %174, %51, !dbg !36
  %177 = add i32 %174, %52, !dbg !36
  %178 = add i32 %174, %53, !dbg !36
  %179 = sext i32 %175 to i64, !dbg !37
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !37
  %181 = sext i32 %176 to i64, !dbg !37
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !37
  %183 = sext i32 %177 to i64, !dbg !37
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !37
  %185 = sext i32 %178 to i64, !dbg !37
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !37
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %106) #2, !dbg !38
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !38
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %106) #2, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !38
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !38
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %106) #2, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !38
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !38
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %106) #2, !dbg !38
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !38
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !38
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !38
  %207 = add i32 %93, 1408, !dbg !39
  %208 = add i32 %207, %50, !dbg !40
  %209 = add i32 %207, %51, !dbg !40
  %210 = add i32 %207, %52, !dbg !40
  %211 = add i32 %207, %53, !dbg !40
  %212 = sext i32 %208 to i64, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !41
  %214 = sext i32 %209 to i64, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !41
  %216 = sext i32 %210 to i64, !dbg !41
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !41
  %218 = sext i32 %211 to i64, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !41
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %106) #2, !dbg !42
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !42
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !42
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !42
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !42
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %106) #2, !dbg !42
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !42
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !42
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !42
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !42
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %106) #2, !dbg !42
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !42
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !42
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !42
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !42
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %106) #2, !dbg !42
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !42
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !42
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !42
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !42
  %240 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !30
  %241 = insertelement <4 x i32> %240, i32 %123, i64 1, !dbg !30
  %242 = insertelement <4 x i32> %241, i32 %124, i64 2, !dbg !30
  %243 = insertelement <4 x i32> %242, i32 %125, i64 3, !dbg !30
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !30
  %245 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !34
  %246 = insertelement <4 x i32> %245, i32 %156, i64 1, !dbg !34
  %247 = insertelement <4 x i32> %246, i32 %157, i64 2, !dbg !34
  %248 = insertelement <4 x i32> %247, i32 %158, i64 3, !dbg !34
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !34
  %250 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !38
  %251 = insertelement <4 x i32> %250, i32 %189, i64 1, !dbg !38
  %252 = insertelement <4 x i32> %251, i32 %190, i64 2, !dbg !38
  %253 = insertelement <4 x i32> %252, i32 %191, i64 3, !dbg !38
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !38
  %255 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !42
  %256 = insertelement <4 x i32> %255, i32 %222, i64 1, !dbg !42
  %257 = insertelement <4 x i32> %256, i32 %223, i64 2, !dbg !42
  %258 = insertelement <4 x i32> %257, i32 %224, i64 3, !dbg !42
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !42
  %260 = fcmp ogt <4 x float> %249, %244, !dbg !43
  %261 = zext <4 x i1> %260 to <4 x i8>, !dbg !44
  %262 = fcmp uno <4 x float> %249, zeroinitializer, !dbg !45
  %263 = or <4 x i1> %260, %262, !dbg !49
  %.v = select <4 x i1> %263, <4 x i32> %248, <4 x i32> %243, !dbg !50
  %264 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %265 = fcmp olt <4 x float> %264, %254, !dbg !51
  %266 = select <4 x i1> %265, <4 x i8> splat (i8 2), <4 x i8> %261, !dbg !52
  %267 = fcmp uno <4 x float> %254, zeroinitializer, !dbg !53
  %268 = or <4 x i1> %265, %267, !dbg !55
  %.v4 = select <4 x i1> %268, <4 x i32> %253, <4 x i32> %.v, !dbg !56
  %269 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !56
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %271 = fcmp olt <4 x float> %269, %259, !dbg !57
  %272 = shufflevector <4 x i1> %271, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %273 = select <4 x i1> %271, <4 x i8> splat (i8 3), <4 x i8> %266, !dbg !58
  %274 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !30
  %275 = insertelement <4 x i32> %274, i32 %128, i64 1, !dbg !30
  %276 = insertelement <4 x i32> %275, i32 %129, i64 2, !dbg !30
  %277 = insertelement <4 x i32> %276, i32 %130, i64 3, !dbg !30
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !30
  %279 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !34
  %280 = insertelement <4 x i32> %279, i32 %161, i64 1, !dbg !34
  %281 = insertelement <4 x i32> %280, i32 %162, i64 2, !dbg !34
  %282 = insertelement <4 x i32> %281, i32 %163, i64 3, !dbg !34
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !34
  %284 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !38
  %285 = insertelement <4 x i32> %284, i32 %194, i64 1, !dbg !38
  %286 = insertelement <4 x i32> %285, i32 %195, i64 2, !dbg !38
  %287 = insertelement <4 x i32> %286, i32 %196, i64 3, !dbg !38
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !38
  %289 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !42
  %290 = insertelement <4 x i32> %289, i32 %227, i64 1, !dbg !42
  %291 = insertelement <4 x i32> %290, i32 %228, i64 2, !dbg !42
  %292 = insertelement <4 x i32> %291, i32 %229, i64 3, !dbg !42
  %293 = bitcast <4 x i32> %292 to <4 x float>, !dbg !42
  %294 = fcmp ogt <4 x float> %283, %278, !dbg !43
  %295 = zext <4 x i1> %294 to <4 x i8>, !dbg !44
  %296 = fcmp uno <4 x float> %283, zeroinitializer, !dbg !45
  %297 = or <4 x i1> %294, %296, !dbg !49
  %.v5 = select <4 x i1> %297, <4 x i32> %282, <4 x i32> %277, !dbg !50
  %298 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !50
  %299 = fcmp olt <4 x float> %298, %288, !dbg !51
  %300 = select <4 x i1> %299, <4 x i8> splat (i8 2), <4 x i8> %295, !dbg !52
  %301 = fcmp uno <4 x float> %288, zeroinitializer, !dbg !53
  %302 = or <4 x i1> %299, %301, !dbg !55
  %.v6 = select <4 x i1> %302, <4 x i32> %287, <4 x i32> %.v5, !dbg !56
  %303 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !56
  %304 = shufflevector <4 x float> %303, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %305 = fcmp olt <4 x float> %303, %293, !dbg !57
  %306 = shufflevector <4 x i1> %305, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %307 = select <4 x i1> %305, <4 x i8> splat (i8 3), <4 x i8> %300, !dbg !58
  %308 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !30
  %309 = insertelement <4 x i32> %308, i32 %133, i64 1, !dbg !30
  %310 = insertelement <4 x i32> %309, i32 %134, i64 2, !dbg !30
  %311 = insertelement <4 x i32> %310, i32 %135, i64 3, !dbg !30
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !30
  %313 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !34
  %314 = insertelement <4 x i32> %313, i32 %166, i64 1, !dbg !34
  %315 = insertelement <4 x i32> %314, i32 %167, i64 2, !dbg !34
  %316 = insertelement <4 x i32> %315, i32 %168, i64 3, !dbg !34
  %317 = bitcast <4 x i32> %316 to <4 x float>, !dbg !34
  %318 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !38
  %319 = insertelement <4 x i32> %318, i32 %199, i64 1, !dbg !38
  %320 = insertelement <4 x i32> %319, i32 %200, i64 2, !dbg !38
  %321 = insertelement <4 x i32> %320, i32 %201, i64 3, !dbg !38
  %322 = bitcast <4 x i32> %321 to <4 x float>, !dbg !38
  %323 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !42
  %324 = insertelement <4 x i32> %323, i32 %232, i64 1, !dbg !42
  %325 = insertelement <4 x i32> %324, i32 %233, i64 2, !dbg !42
  %326 = insertelement <4 x i32> %325, i32 %234, i64 3, !dbg !42
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !42
  %328 = fcmp ogt <4 x float> %317, %312, !dbg !43
  %329 = zext <4 x i1> %328 to <4 x i8>, !dbg !44
  %330 = fcmp uno <4 x float> %317, zeroinitializer, !dbg !45
  %331 = or <4 x i1> %328, %330, !dbg !49
  %.v7 = select <4 x i1> %331, <4 x i32> %316, <4 x i32> %311, !dbg !50
  %332 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !50
  %333 = fcmp olt <4 x float> %332, %322, !dbg !51
  %334 = select <4 x i1> %333, <4 x i8> splat (i8 2), <4 x i8> %329, !dbg !52
  %335 = fcmp uno <4 x float> %322, zeroinitializer, !dbg !53
  %336 = or <4 x i1> %333, %335, !dbg !55
  %.v8 = select <4 x i1> %336, <4 x i32> %321, <4 x i32> %.v7, !dbg !56
  %337 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !56
  %338 = fcmp olt <4 x float> %337, %327, !dbg !57
  %339 = select <4 x i1> %338, <4 x i8> splat (i8 3), <4 x i8> %334, !dbg !58
  %340 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !30
  %341 = insertelement <4 x i32> %340, i32 %138, i64 1, !dbg !30
  %342 = insertelement <4 x i32> %341, i32 %139, i64 2, !dbg !30
  %343 = insertelement <4 x i32> %342, i32 %140, i64 3, !dbg !30
  %344 = bitcast <4 x i32> %343 to <4 x float>, !dbg !30
  %345 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !34
  %346 = insertelement <4 x i32> %345, i32 %171, i64 1, !dbg !34
  %347 = insertelement <4 x i32> %346, i32 %172, i64 2, !dbg !34
  %348 = insertelement <4 x i32> %347, i32 %173, i64 3, !dbg !34
  %349 = bitcast <4 x i32> %348 to <4 x float>, !dbg !34
  %350 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !38
  %351 = insertelement <4 x i32> %350, i32 %204, i64 1, !dbg !38
  %352 = insertelement <4 x i32> %351, i32 %205, i64 2, !dbg !38
  %353 = insertelement <4 x i32> %352, i32 %206, i64 3, !dbg !38
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !38
  %355 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !42
  %356 = insertelement <4 x i32> %355, i32 %237, i64 1, !dbg !42
  %357 = insertelement <4 x i32> %356, i32 %238, i64 2, !dbg !42
  %358 = insertelement <4 x i32> %357, i32 %239, i64 3, !dbg !42
  %359 = bitcast <4 x i32> %358 to <4 x float>, !dbg !42
  %360 = fcmp ogt <4 x float> %349, %344, !dbg !43
  %361 = zext <4 x i1> %360 to <4 x i8>, !dbg !44
  %362 = fcmp uno <4 x float> %349, zeroinitializer, !dbg !45
  %363 = or <4 x i1> %360, %362, !dbg !49
  %.v9 = select <4 x i1> %363, <4 x i32> %348, <4 x i32> %343, !dbg !50
  %364 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !50
  %365 = fcmp olt <4 x float> %364, %354, !dbg !51
  %366 = select <4 x i1> %365, <4 x i8> splat (i8 2), <4 x i8> %361, !dbg !52
  %367 = fcmp uno <4 x float> %354, zeroinitializer, !dbg !53
  %368 = or <4 x i1> %365, %367, !dbg !55
  %.v10 = select <4 x i1> %368, <4 x i32> %353, <4 x i32> %.v9, !dbg !56
  %369 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !56
  %370 = fcmp olt <4 x float> %369, %359, !dbg !57
  %371 = select <4 x i1> %370, <4 x i8> splat (i8 3), <4 x i8> %366, !dbg !58
  %372 = bitcast i32 %221 to float, !dbg !59
  %373 = bitcast i32 %222 to float, !dbg !59
  %374 = bitcast i32 %223 to float, !dbg !59
  %375 = bitcast i32 %224 to float, !dbg !59
  %376 = bitcast i32 %226 to float, !dbg !59
  %377 = bitcast i32 %227 to float, !dbg !59
  %378 = bitcast i32 %228 to float, !dbg !59
  %379 = bitcast i32 %229 to float, !dbg !59
  %380 = shufflevector <4 x float> %359, <4 x float> %327, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %381 = insertelement <16 x float> %380, float %379, i64 8, !dbg !59
  %382 = insertelement <16 x float> %381, float %378, i64 9, !dbg !59
  %383 = insertelement <16 x float> %382, float %377, i64 10, !dbg !59
  %384 = insertelement <16 x float> %383, float %376, i64 11, !dbg !59
  %385 = insertelement <16 x float> %384, float %375, i64 12, !dbg !59
  %386 = insertelement <16 x float> %385, float %374, i64 13, !dbg !59
  %387 = insertelement <16 x float> %386, float %373, i64 14, !dbg !59
  %388 = insertelement <16 x float> %387, float %372, i64 15, !dbg !59
  %389 = fcmp uno <16 x float> %388, zeroinitializer, !dbg !59
  %390 = shufflevector <4 x i1> %370, <4 x i1> %338, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %391 = shufflevector <16 x i1> %390, <16 x i1> %306, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %392 = shufflevector <16 x i1> %391, <16 x i1> %272, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !61
  %393 = or <16 x i1> %392, %389, !dbg !61
  %394 = shufflevector <4 x float> %369, <4 x float> %337, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %395 = shufflevector <16 x float> %394, <16 x float> %304, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %396 = shufflevector <16 x float> %395, <16 x float> %270, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !62
  %397 = select <16 x i1> %393, <16 x float> %388, <16 x float> %396, !dbg !62
  %398 = fcmp olt <16 x float> %397, zeroinitializer, !dbg !63
  %399 = extractelement <16 x i1> %398, i64 15, !dbg !65
  %400 = extractelement <16 x float> %397, i64 15, !dbg !65
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !65
  %402 = extractelement <16 x i1> %398, i64 14, !dbg !65
  %403 = extractelement <16 x float> %397, i64 14, !dbg !65
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !65
  %405 = extractelement <16 x i1> %398, i64 13, !dbg !65
  %406 = extractelement <16 x float> %397, i64 13, !dbg !65
  %407 = select i1 %405, float 0.000000e+00, float %406, !dbg !65
  %408 = extractelement <16 x i1> %398, i64 12, !dbg !65
  %409 = extractelement <16 x float> %397, i64 12, !dbg !65
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !65
  %411 = extractelement <16 x i1> %398, i64 11, !dbg !65
  %412 = extractelement <16 x float> %397, i64 11, !dbg !65
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !65
  %414 = extractelement <16 x i1> %398, i64 10, !dbg !65
  %415 = extractelement <16 x float> %397, i64 10, !dbg !65
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !65
  %417 = extractelement <16 x i1> %398, i64 9, !dbg !65
  %418 = extractelement <16 x float> %397, i64 9, !dbg !65
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !65
  %420 = extractelement <16 x i1> %398, i64 8, !dbg !65
  %421 = extractelement <16 x float> %397, i64 8, !dbg !65
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !65
  %423 = extractelement <16 x i1> %398, i64 7, !dbg !65
  %424 = extractelement <16 x float> %397, i64 7, !dbg !65
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !65
  %426 = extractelement <16 x i1> %398, i64 6, !dbg !65
  %427 = extractelement <16 x float> %397, i64 6, !dbg !65
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !65
  %429 = extractelement <16 x i1> %398, i64 5, !dbg !65
  %430 = extractelement <16 x float> %397, i64 5, !dbg !65
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !65
  %432 = extractelement <16 x i1> %398, i64 4, !dbg !65
  %433 = extractelement <16 x float> %397, i64 4, !dbg !65
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !65
  %435 = extractelement <16 x i1> %398, i64 3, !dbg !65
  %436 = extractelement <16 x float> %397, i64 3, !dbg !65
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !65
  %438 = extractelement <16 x i1> %398, i64 2, !dbg !65
  %439 = extractelement <16 x float> %397, i64 2, !dbg !65
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !65
  %441 = extractelement <16 x i1> %398, i64 1, !dbg !65
  %442 = extractelement <16 x float> %397, i64 1, !dbg !65
  %443 = select i1 %441, float 0.000000e+00, float %442, !dbg !65
  %444 = extractelement <16 x i1> %398, i64 0, !dbg !65
  %445 = extractelement <16 x float> %397, i64 0, !dbg !65
  %446 = select i1 %444, float 0.000000e+00, float %445, !dbg !65
  %447 = shl i32 %13, 7, !dbg !66
  %448 = add i32 %50, %447, !dbg !67
  %449 = sext i32 %448 to i64, !dbg !68
  %450 = getelementptr i8, ptr addrspace(1) %1, i64 %449, !dbg !68
  %451 = bitcast <4 x i8> %273 to i32, !dbg !69
  %452 = bitcast <4 x i8> %307 to i32, !dbg !69
  %453 = bitcast <4 x i8> %339 to i32, !dbg !69
  %454 = bitcast <4 x i8> %371 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %452, i32 %453, i32 %454, ptr addrspace(1) %450, i1 %106) #2, !dbg !69
  %455 = mul i32 %54, 25, !dbg !70
  %456 = add i32 %455, %.decomposed12, !dbg !71
  %457 = mul i32 %59, 3200, !dbg !72
  %458 = mul i32 %60, 3200, !dbg !72
  %459 = mul i32 %61, 3200, !dbg !72
  %460 = mul i32 %62, 3200, !dbg !72
  %461 = mul i32 %63, 3200, !dbg !72
  %462 = mul i32 %64, 3200, !dbg !72
  %463 = mul i32 %65, 3200, !dbg !72
  %464 = mul i32 %66, 3200, !dbg !72
  %465 = mul i32 %67, 3200, !dbg !72
  %466 = mul i32 %68, 3200, !dbg !72
  %467 = mul i32 %69, 3200, !dbg !72
  %468 = mul i32 %70, 3200, !dbg !72
  %469 = mul i32 %71, 3200, !dbg !72
  %470 = mul i32 %72, 3200, !dbg !72
  %471 = mul i32 %73, 3200, !dbg !72
  %472 = mul i32 %74, 3200, !dbg !72
  %473 = add i32 %456, %457, !dbg !73
  %474 = add i32 %458, %.decomposed14, !dbg !71
  %475 = add i32 %474, %455, !dbg !73
  %476 = add i32 %459, %.decomposed16, !dbg !71
  %477 = add i32 %476, %455, !dbg !73
  %478 = add i32 %460, %.decomposed18, !dbg !71
  %479 = add i32 %478, %455, !dbg !73
  %480 = add i32 %461, %.decomposed20, !dbg !71
  %481 = add i32 %480, %455, !dbg !73
  %482 = add i32 %462, %.decomposed22, !dbg !71
  %483 = add i32 %482, %455, !dbg !73
  %484 = add i32 %463, %.decomposed24, !dbg !71
  %485 = add i32 %484, %455, !dbg !73
  %486 = add i32 %464, %.decomposed26, !dbg !71
  %487 = add i32 %486, %455, !dbg !73
  %488 = add i32 %465, %.decomposed28, !dbg !71
  %489 = add i32 %488, %455, !dbg !73
  %490 = add i32 %466, %.decomposed30, !dbg !71
  %491 = add i32 %490, %455, !dbg !73
  %492 = add i32 %467, %.decomposed32, !dbg !71
  %493 = add i32 %492, %455, !dbg !73
  %494 = add i32 %468, %.decomposed34, !dbg !71
  %495 = add i32 %494, %455, !dbg !73
  %496 = add i32 %469, %.decomposed36, !dbg !71
  %497 = add i32 %496, %455, !dbg !73
  %498 = add i32 %470, %.decomposed38, !dbg !71
  %499 = add i32 %498, %455, !dbg !73
  %500 = add i32 %471, %.decomposed40, !dbg !71
  %501 = add i32 %500, %455, !dbg !73
  %502 = add i32 %472, %.decomposed42, !dbg !71
  %503 = add i32 %502, %455, !dbg !73
  %504 = sext i32 %473 to i64, !dbg !74
  %505 = getelementptr float, ptr addrspace(1) %2, i64 %504, !dbg !74
  %506 = sext i32 %475 to i64, !dbg !74
  %507 = getelementptr float, ptr addrspace(1) %2, i64 %506, !dbg !74
  %508 = sext i32 %477 to i64, !dbg !74
  %509 = getelementptr float, ptr addrspace(1) %2, i64 %508, !dbg !74
  %510 = sext i32 %479 to i64, !dbg !74
  %511 = getelementptr float, ptr addrspace(1) %2, i64 %510, !dbg !74
  %512 = sext i32 %481 to i64, !dbg !74
  %513 = getelementptr float, ptr addrspace(1) %2, i64 %512, !dbg !74
  %514 = sext i32 %483 to i64, !dbg !74
  %515 = getelementptr float, ptr addrspace(1) %2, i64 %514, !dbg !74
  %516 = sext i32 %485 to i64, !dbg !74
  %517 = getelementptr float, ptr addrspace(1) %2, i64 %516, !dbg !74
  %518 = sext i32 %487 to i64, !dbg !74
  %519 = getelementptr float, ptr addrspace(1) %2, i64 %518, !dbg !74
  %520 = sext i32 %489 to i64, !dbg !74
  %521 = getelementptr float, ptr addrspace(1) %2, i64 %520, !dbg !74
  %522 = sext i32 %491 to i64, !dbg !74
  %523 = getelementptr float, ptr addrspace(1) %2, i64 %522, !dbg !74
  %524 = sext i32 %493 to i64, !dbg !74
  %525 = getelementptr float, ptr addrspace(1) %2, i64 %524, !dbg !74
  %526 = sext i32 %495 to i64, !dbg !74
  %527 = getelementptr float, ptr addrspace(1) %2, i64 %526, !dbg !74
  %528 = sext i32 %497 to i64, !dbg !74
  %529 = getelementptr float, ptr addrspace(1) %2, i64 %528, !dbg !74
  %530 = sext i32 %499 to i64, !dbg !74
  %531 = getelementptr float, ptr addrspace(1) %2, i64 %530, !dbg !74
  %532 = sext i32 %501 to i64, !dbg !74
  %533 = getelementptr float, ptr addrspace(1) %2, i64 %532, !dbg !74
  %534 = sext i32 %503 to i64, !dbg !74
  %535 = getelementptr float, ptr addrspace(1) %2, i64 %534, !dbg !74
  %536 = and i32 %47, 4080, !dbg !75
  %537 = and i32 %8, 255, !dbg !75
  %538 = lshr i32 %536, 5, !dbg !75
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i32 %538, !dbg !75
  %540 = getelementptr float, ptr addrspace(3) %539, i32 %536, !dbg !75
  %541 = bitcast float %401 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %541, i1 true) #2, !dbg !75
  %542 = or disjoint i32 %536, 1, !dbg !75
  %543 = getelementptr float, ptr addrspace(3) %539, i32 %542, !dbg !75
  %544 = bitcast float %404 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #2, !dbg !75
  %545 = or disjoint i32 %536, 2, !dbg !75
  %546 = getelementptr float, ptr addrspace(3) %539, i32 %545, !dbg !75
  %547 = bitcast float %407 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %547, i1 true) #2, !dbg !75
  %548 = or disjoint i32 %536, 3, !dbg !75
  %549 = getelementptr float, ptr addrspace(3) %539, i32 %548, !dbg !75
  %550 = bitcast float %410 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #2, !dbg !75
  %551 = or disjoint i32 %536, 4, !dbg !75
  %552 = getelementptr float, ptr addrspace(3) %539, i32 %551, !dbg !75
  %553 = bitcast float %413 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %552, <1 x i32> %553, i1 true) #2, !dbg !75
  %554 = or disjoint i32 %536, 5, !dbg !75
  %555 = getelementptr float, ptr addrspace(3) %539, i32 %554, !dbg !75
  %556 = bitcast float %416 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %556, i1 true) #2, !dbg !75
  %557 = or disjoint i32 %536, 6, !dbg !75
  %558 = getelementptr float, ptr addrspace(3) %539, i32 %557, !dbg !75
  %559 = bitcast float %419 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %558, <1 x i32> %559, i1 true) #2, !dbg !75
  %560 = or disjoint i32 %536, 7, !dbg !75
  %561 = getelementptr float, ptr addrspace(3) %539, i32 %560, !dbg !75
  %562 = bitcast float %422 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 true) #2, !dbg !75
  %563 = or disjoint i32 %536, 8, !dbg !75
  %564 = getelementptr float, ptr addrspace(3) %539, i32 %563, !dbg !75
  %565 = bitcast float %425 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %565, i1 true) #2, !dbg !75
  %566 = or disjoint i32 %536, 9, !dbg !75
  %567 = getelementptr float, ptr addrspace(3) %539, i32 %566, !dbg !75
  %568 = bitcast float %428 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #2, !dbg !75
  %569 = or disjoint i32 %536, 10, !dbg !75
  %570 = getelementptr float, ptr addrspace(3) %539, i32 %569, !dbg !75
  %571 = bitcast float %431 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 true) #2, !dbg !75
  %572 = or disjoint i32 %536, 11, !dbg !75
  %573 = getelementptr float, ptr addrspace(3) %539, i32 %572, !dbg !75
  %574 = bitcast float %434 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #2, !dbg !75
  %575 = or disjoint i32 %536, 12, !dbg !75
  %576 = getelementptr float, ptr addrspace(3) %539, i32 %575, !dbg !75
  %577 = bitcast float %437 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #2, !dbg !75
  %578 = or disjoint i32 %536, 13, !dbg !75
  %579 = getelementptr float, ptr addrspace(3) %539, i32 %578, !dbg !75
  %580 = bitcast float %440 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #2, !dbg !75
  %581 = or disjoint i32 %536, 14, !dbg !75
  %582 = getelementptr float, ptr addrspace(3) %539, i32 %581, !dbg !75
  %583 = bitcast float %443 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %583, i1 true) #2, !dbg !75
  %584 = or disjoint i32 %536, 15, !dbg !75
  %585 = getelementptr float, ptr addrspace(3) %539, i32 %584, !dbg !75
  %586 = bitcast float %446 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %586, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %587 = lshr i32 %537, 5, !dbg !75
  %588 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %587, !dbg !75
  %589 = getelementptr inbounds float, ptr addrspace(3) %588, i32 %537, !dbg !75
  %590 = load i32, ptr addrspace(3) %589, align 4, !dbg !75
  %591 = or disjoint i32 %537, 256, !dbg !75
  %592 = lshr i32 %591, 5, !dbg !75
  %593 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %592, !dbg !75
  %594 = getelementptr inbounds float, ptr addrspace(3) %593, i32 %591, !dbg !75
  %595 = load i32, ptr addrspace(3) %594, align 4, !dbg !75
  %596 = or disjoint i32 %537, 512, !dbg !75
  %597 = lshr i32 %596, 5, !dbg !75
  %598 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %597, !dbg !75
  %599 = getelementptr inbounds float, ptr addrspace(3) %598, i32 %596, !dbg !75
  %600 = load i32, ptr addrspace(3) %599, align 4, !dbg !75
  %601 = or disjoint i32 %537, 768, !dbg !75
  %602 = lshr i32 %601, 5, !dbg !75
  %603 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %602, !dbg !75
  %604 = getelementptr inbounds float, ptr addrspace(3) %603, i32 %601, !dbg !75
  %605 = load i32, ptr addrspace(3) %604, align 4, !dbg !75
  %606 = or disjoint i32 %537, 1024, !dbg !75
  %607 = lshr i32 %606, 5, !dbg !75
  %608 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %607, !dbg !75
  %609 = getelementptr inbounds float, ptr addrspace(3) %608, i32 %606, !dbg !75
  %610 = load i32, ptr addrspace(3) %609, align 4, !dbg !75
  %611 = or disjoint i32 %537, 1280, !dbg !75
  %612 = lshr i32 %611, 5, !dbg !75
  %613 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %612, !dbg !75
  %614 = getelementptr inbounds float, ptr addrspace(3) %613, i32 %611, !dbg !75
  %615 = load i32, ptr addrspace(3) %614, align 4, !dbg !75
  %616 = or disjoint i32 %537, 1536, !dbg !75
  %617 = lshr i32 %616, 5, !dbg !75
  %618 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %617, !dbg !75
  %619 = getelementptr inbounds float, ptr addrspace(3) %618, i32 %616, !dbg !75
  %620 = load i32, ptr addrspace(3) %619, align 4, !dbg !75
  %621 = or disjoint i32 %537, 1792, !dbg !75
  %622 = lshr i32 %621, 5, !dbg !75
  %623 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %622, !dbg !75
  %624 = getelementptr inbounds float, ptr addrspace(3) %623, i32 %621, !dbg !75
  %625 = load i32, ptr addrspace(3) %624, align 4, !dbg !75
  %626 = or disjoint i32 %537, 2048, !dbg !75
  %627 = lshr i32 %626, 5, !dbg !75
  %628 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %627, !dbg !75
  %629 = getelementptr inbounds float, ptr addrspace(3) %628, i32 %626, !dbg !75
  %630 = load i32, ptr addrspace(3) %629, align 4, !dbg !75
  %631 = or disjoint i32 %537, 2304, !dbg !75
  %632 = lshr i32 %631, 5, !dbg !75
  %633 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %632, !dbg !75
  %634 = getelementptr inbounds float, ptr addrspace(3) %633, i32 %631, !dbg !75
  %635 = load i32, ptr addrspace(3) %634, align 4, !dbg !75
  %636 = or disjoint i32 %537, 2560, !dbg !75
  %637 = lshr i32 %636, 5, !dbg !75
  %638 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %637, !dbg !75
  %639 = getelementptr inbounds float, ptr addrspace(3) %638, i32 %636, !dbg !75
  %640 = load i32, ptr addrspace(3) %639, align 4, !dbg !75
  %641 = or disjoint i32 %537, 2816, !dbg !75
  %642 = lshr i32 %641, 5, !dbg !75
  %643 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %642, !dbg !75
  %644 = getelementptr inbounds float, ptr addrspace(3) %643, i32 %641, !dbg !75
  %645 = load i32, ptr addrspace(3) %644, align 4, !dbg !75
  %646 = or disjoint i32 %537, 3072, !dbg !75
  %647 = lshr i32 %646, 5, !dbg !75
  %648 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %647, !dbg !75
  %649 = getelementptr inbounds float, ptr addrspace(3) %648, i32 %646, !dbg !75
  %650 = load i32, ptr addrspace(3) %649, align 4, !dbg !75
  %651 = or disjoint i32 %537, 3328, !dbg !75
  %652 = lshr i32 %651, 5, !dbg !75
  %653 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %652, !dbg !75
  %654 = getelementptr inbounds float, ptr addrspace(3) %653, i32 %651, !dbg !75
  %655 = load i32, ptr addrspace(3) %654, align 4, !dbg !75
  %656 = or disjoint i32 %537, 3584, !dbg !75
  %657 = lshr i32 %656, 5, !dbg !75
  %658 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %657, !dbg !75
  %659 = getelementptr inbounds float, ptr addrspace(3) %658, i32 %656, !dbg !75
  %660 = load i32, ptr addrspace(3) %659, align 4, !dbg !75
  %661 = or disjoint i32 %537, 3840, !dbg !75
  %662 = lshr i32 %661, 5, !dbg !75
  %663 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %662, !dbg !75
  %664 = getelementptr inbounds float, ptr addrspace(3) %663, i32 %661, !dbg !75
  %665 = load i32, ptr addrspace(3) %664, align 4, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %590, ptr addrspace(1) %505, i1 %107) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %595, ptr addrspace(1) %507, i1 %108) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %600, ptr addrspace(1) %509, i1 %109) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %605, ptr addrspace(1) %511, i1 %110) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %610, ptr addrspace(1) %513, i1 %111) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %615, ptr addrspace(1) %515, i1 %112) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %620, ptr addrspace(1) %517, i1 %113) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %625, ptr addrspace(1) %519, i1 %114) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %630, ptr addrspace(1) %521, i1 %115) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %635, ptr addrspace(1) %523, i1 %116) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %640, ptr addrspace(1) %525, i1 %117) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %645, ptr addrspace(1) %527, i1 %118) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %650, ptr addrspace(1) %529, i1 %119) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %655, ptr addrspace(1) %531, i1 %120) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %660, ptr addrspace(1) %533, i1 %120) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %665, ptr addrspace(1) %535, i1 %120) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrb2epqdgq3emzqbxibuvgtlyureccubdfj5b4j4dkzfgctbisv.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!63 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !64)
!66 = !DILocation(line: 53, column: 34, scope: !7)
!67 = !DILocation(line: 53, column: 30, scope: !7)
!68 = !DILocation(line: 53, column: 25, scope: !7)
!69 = !DILocation(line: 53, column: 46, scope: !7)
!70 = !DILocation(line: 54, column: 33, scope: !7)
!71 = !DILocation(line: 54, column: 30, scope: !7)
!72 = !DILocation(line: 54, column: 43, scope: !7)
!73 = !DILocation(line: 54, column: 38, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 55, scope: !7)
!76 = !DILocation(line: 54, column: 4, scope: !7)
