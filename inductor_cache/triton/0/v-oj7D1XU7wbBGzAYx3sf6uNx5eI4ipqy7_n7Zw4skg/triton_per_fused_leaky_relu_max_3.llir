; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_max_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 4, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = lshr i32 %8, 5, !dbg !14
  %16 = lshr i32 %8, 1, !dbg !14
  %17 = and i32 %16, 63, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen, 128, !dbg !15
  %19 = mul i32 %18, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %14, 128, !dbg !15
  %21 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %22 = insertelement <2 x i32> %21, i32 %14, i64 1, !dbg !17
  %23 = srem <2 x i32> %22, <i32 64, i32 128>, !dbg !17
  %24 = sdiv i32 %14, 8192, !dbg !18
  %25 = shl nuw nsw i32 %17, 7, !dbg !19
  %26 = add nsw i32 %.decomposed, %25, !dbg !20
  %27 = shl i32 %18, 13, !dbg !21
  %28 = add i32 %26, %27, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = bitcast i32 %33 to float, !dbg !24
  %38 = bitcast i32 %34 to float, !dbg !24
  %39 = bitcast i32 %35 to float, !dbg !24
  %40 = fcmp ogt float %36, 0.000000e+00, !dbg !25
  %41 = fcmp ogt float %37, 0.000000e+00, !dbg !25
  %42 = fcmp ogt float %38, 0.000000e+00, !dbg !25
  %43 = fcmp ogt float %39, 0.000000e+00, !dbg !25
  %44 = fmul float %36, 0x3FC99999A0000000, !dbg !26
  %45 = fmul float %37, 0x3FC99999A0000000, !dbg !26
  %46 = fmul float %38, 0x3FC99999A0000000, !dbg !26
  %47 = fmul float %39, 0x3FC99999A0000000, !dbg !26
  %48 = select i1 %40, float %36, float %44, !dbg !27
  %49 = select i1 %41, float %37, float %45, !dbg !27
  %50 = select i1 %42, float %38, float %46, !dbg !27
  %51 = select i1 %43, float %39, float %47, !dbg !27
  %52 = or disjoint i32 %11, 1, !dbg !28
  %53 = or disjoint i32 %11, 2, !dbg !28
  %54 = or disjoint i32 %11, 3, !dbg !28
  %55 = bitcast float %48 to i32, !dbg !28
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = fcmp ogt float %48, %57, !dbg !32
  %59 = fcmp uno float %48, 0.000000e+00, !dbg !34
  %60 = or i1 %58, %59, !dbg !35
  %61 = select i1 %60, float %48, float %57, !dbg !36
  %62 = bitcast float %61 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fcmp ogt float %61, %64, !dbg !32
  %66 = fcmp uno float %61, 0.000000e+00, !dbg !34
  %67 = or i1 %65, %66, !dbg !35
  %68 = select i1 %67, float %61, float %64, !dbg !36
  %69 = bitcast float %68 to i32, !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fcmp ogt float %68, %71, !dbg !32
  %73 = fcmp uno float %68, 0.000000e+00, !dbg !34
  %74 = or i1 %72, %73, !dbg !35
  %75 = select i1 %74, float %68, float %71, !dbg !36
  %76 = bitcast float %75 to i32, !dbg !28
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = fcmp ogt float %75, %78, !dbg !32
  %80 = fcmp uno float %75, 0.000000e+00, !dbg !34
  %81 = or i1 %79, %80, !dbg !35
  %82 = bitcast float %49 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fcmp ogt float %49, %84, !dbg !32
  %86 = fcmp uno float %49, 0.000000e+00, !dbg !34
  %87 = or i1 %86, %85, !dbg !35
  %88 = select i1 %87, float %49, float %84, !dbg !36
  %89 = bitcast float %88 to i32, !dbg !28
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = fcmp ogt float %88, %91, !dbg !32
  %93 = fcmp uno float %88, 0.000000e+00, !dbg !34
  %94 = or i1 %92, %93, !dbg !35
  %95 = select i1 %94, float %88, float %91, !dbg !36
  %96 = bitcast float %95 to i32, !dbg !28
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = fcmp ogt float %95, %98, !dbg !32
  %100 = fcmp uno float %95, 0.000000e+00, !dbg !34
  %101 = or i1 %99, %100, !dbg !35
  %102 = select i1 %101, float %95, float %98, !dbg !36
  %103 = bitcast float %102 to i32, !dbg !28
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = fcmp ogt float %102, %105, !dbg !32
  %107 = fcmp uno float %102, 0.000000e+00, !dbg !34
  %108 = or i1 %106, %107, !dbg !35
  %109 = bitcast float %50 to i32, !dbg !28
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = fcmp ogt float %50, %111, !dbg !32
  %113 = fcmp uno float %50, 0.000000e+00, !dbg !34
  %114 = or i1 %113, %112, !dbg !35
  %115 = select i1 %114, float %50, float %111, !dbg !36
  %116 = bitcast float %115 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fcmp ogt float %115, %118, !dbg !32
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !34
  %121 = or i1 %119, %120, !dbg !35
  %122 = select i1 %121, float %115, float %118, !dbg !36
  %123 = bitcast float %122 to i32, !dbg !28
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = fcmp ogt float %122, %125, !dbg !32
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !34
  %128 = or i1 %126, %127, !dbg !35
  %129 = select i1 %128, float %122, float %125, !dbg !36
  %130 = bitcast float %129 to i32, !dbg !28
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !28
  %132 = bitcast i32 %131 to float, !dbg !28
  %133 = fcmp ogt float %129, %132, !dbg !32
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !34
  %135 = or i1 %133, %134, !dbg !35
  %136 = bitcast float %51 to i32, !dbg !28
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fcmp ogt float %51, %138, !dbg !32
  %140 = fcmp uno float %51, 0.000000e+00, !dbg !34
  %141 = or i1 %140, %139, !dbg !35
  %142 = select i1 %141, float %51, float %138, !dbg !36
  %143 = bitcast float %142 to i32, !dbg !28
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = fcmp ogt float %142, %145, !dbg !32
  %147 = fcmp uno float %142, 0.000000e+00, !dbg !34
  %148 = or i1 %146, %147, !dbg !35
  %149 = select i1 %148, float %142, float %145, !dbg !36
  %150 = bitcast float %149 to i32, !dbg !28
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fcmp ogt float %149, %152, !dbg !32
  %154 = fcmp uno float %149, 0.000000e+00, !dbg !34
  %155 = or i1 %153, %154, !dbg !35
  %156 = select i1 %155, float %149, float %152, !dbg !36
  %157 = bitcast float %156 to i32, !dbg !28
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !28
  %159 = bitcast i32 %158 to float, !dbg !28
  %160 = fcmp ogt float %156, %159, !dbg !32
  %161 = fcmp uno float %156, 0.000000e+00, !dbg !34
  %162 = or i1 %160, %161, !dbg !35
  %163 = icmp samesign ult i32 %9, 2, !dbg !28
  %164 = and i32 %15, 3, !dbg !28
  %165 = shl nuw nsw i32 %11, 2, !dbg !28
  %166 = or disjoint i32 %165, %164, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %168 = select i1 %81, i32 %76, i32 %77, !dbg !36
  %169 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %169, i1 %163) #3, !dbg !28
  %170 = shl nuw nsw i32 %52, 2, !dbg !28
  %171 = or disjoint i32 %170, %164, !dbg !28
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !28
  %173 = select i1 %108, i32 %103, i32 %104, !dbg !36
  %174 = insertelement <1 x i32> poison, i32 %173, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %174, i1 %163) #3, !dbg !28
  %175 = shl nuw nsw i32 %53, 2, !dbg !28
  %176 = or disjoint i32 %175, %164, !dbg !28
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !28
  %178 = select i1 %135, i32 %130, i32 %131, !dbg !36
  %179 = insertelement <1 x i32> poison, i32 %178, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %179, i1 %163) #3, !dbg !28
  %180 = shl nuw nsw i32 %54, 2, !dbg !28
  %181 = or disjoint i32 %180, %164, !dbg !28
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !28
  %183 = select i1 %162, i32 %157, i32 %158, !dbg !36
  %184 = insertelement <1 x i32> poison, i32 %183, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %184, i1 %163) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %185 = icmp slt i32 %8, 32, !dbg !28
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !28
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %185) #3, !dbg !28
  %188 = bitcast i32 %187 to float, !dbg !28
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !28
  %190 = bitcast i32 %189 to float, !dbg !28
  %191 = fcmp ogt float %188, %190, !dbg !32
  %192 = fcmp uno float %188, 0.000000e+00, !dbg !34
  %193 = or i1 %192, %191, !dbg !35
  %194 = select i1 %193, float %188, float %190, !dbg !36
  %195 = bitcast float %194 to i32, !dbg !28
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !28
  %197 = bitcast i32 %196 to float, !dbg !28
  %198 = fcmp ogt float %194, %197, !dbg !32
  %199 = fcmp uno float %194, 0.000000e+00, !dbg !34
  %200 = or i1 %198, %199, !dbg !35
  %201 = and i32 %8, 3, !dbg !28
  %202 = icmp eq i32 %201, 0, !dbg !28
  %203 = and i1 %185, %202, !dbg !28
  %204 = select i1 %200, i32 %195, i32 %196, !dbg !36
  %205 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %205, i1 %203) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !28
  %207 = load i32, ptr addrspace(3) %206, align 16, !dbg !28
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170, !dbg !28
  %209 = load i32, ptr addrspace(3) %208, align 16, !dbg !28
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !28
  %211 = load i32, ptr addrspace(3) %210, align 16, !dbg !28
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !28
  %213 = load i32, ptr addrspace(3) %212, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %214, i32 %207, i32 %209, i32 %211, i32 %213, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !38
  %218 = bitcast i32 %217 to float, !dbg !38
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 16, i32 31), !dbg !38
  %220 = fcmp ogt float %48, %218, !dbg !40
  %221 = fcmp oeq float %48, %218, !dbg !41
  %222 = fcmp uno float %218, 0.000000e+00, !dbg !42
  %223 = xor i1 %222, true, !dbg !43
  %224 = and i1 %59, %223, !dbg !44
  %225 = or i1 %220, %224, !dbg !45
  %226 = and i1 %59, %222, !dbg !46
  %227 = or i1 %221, %226, !dbg !47
  %228 = icmp slt i32 %17, %219, !dbg !48
  %229 = and i1 %228, %227, !dbg !49
  %230 = or i1 %225, %229, !dbg !50
  %231 = select i1 %230, float %48, float %218, !dbg !51
  %232 = select i1 %230, i32 %17, i32 %219, !dbg !52
  %233 = bitcast float %231 to i32, !dbg !38
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !38
  %235 = bitcast i32 %234 to float, !dbg !38
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !38
  %237 = fcmp ogt float %231, %235, !dbg !40
  %238 = fcmp oeq float %231, %235, !dbg !41
  %239 = fcmp uno float %231, 0.000000e+00, !dbg !53
  %240 = fcmp uno float %235, 0.000000e+00, !dbg !42
  %241 = xor i1 %240, true, !dbg !43
  %242 = and i1 %239, %241, !dbg !44
  %243 = or i1 %237, %242, !dbg !45
  %244 = and i1 %240, %239, !dbg !46
  %245 = or i1 %238, %244, !dbg !47
  %246 = icmp slt i32 %232, %236, !dbg !48
  %247 = and i1 %246, %245, !dbg !49
  %248 = or i1 %243, %247, !dbg !50
  %249 = select i1 %248, float %231, float %235, !dbg !51
  %250 = select i1 %248, i32 %232, i32 %236, !dbg !52
  %251 = bitcast float %249 to i32, !dbg !38
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !38
  %253 = bitcast i32 %252 to float, !dbg !38
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !38
  %255 = fcmp ogt float %249, %253, !dbg !40
  %256 = fcmp oeq float %249, %253, !dbg !41
  %257 = fcmp uno float %249, 0.000000e+00, !dbg !53
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !42
  %259 = xor i1 %258, true, !dbg !43
  %260 = and i1 %257, %259, !dbg !44
  %261 = or i1 %255, %260, !dbg !45
  %262 = and i1 %258, %257, !dbg !46
  %263 = or i1 %256, %262, !dbg !47
  %264 = icmp slt i32 %250, %254, !dbg !48
  %265 = and i1 %264, %263, !dbg !49
  %266 = or i1 %261, %265, !dbg !50
  %267 = select i1 %266, float %249, float %253, !dbg !51
  %268 = select i1 %266, i32 %250, i32 %254, !dbg !52
  %269 = bitcast float %267 to i32, !dbg !38
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !38
  %271 = bitcast i32 %270 to float, !dbg !38
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !38
  %273 = fcmp ogt float %267, %271, !dbg !40
  %274 = fcmp oeq float %267, %271, !dbg !41
  %275 = fcmp uno float %267, 0.000000e+00, !dbg !53
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !42
  %277 = xor i1 %276, true, !dbg !43
  %278 = and i1 %275, %277, !dbg !44
  %279 = or i1 %273, %278, !dbg !45
  %280 = and i1 %276, %275, !dbg !46
  %281 = or i1 %274, %280, !dbg !47
  %282 = icmp slt i32 %268, %272, !dbg !48
  %283 = and i1 %282, %281, !dbg !49
  %284 = or i1 %279, %283, !dbg !50
  %285 = select i1 %284, i32 %268, i32 %272, !dbg !52
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !38
  %287 = bitcast i32 %286 to float, !dbg !38
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 16, i32 31), !dbg !38
  %289 = fcmp ogt float %49, %287, !dbg !40
  %290 = fcmp oeq float %49, %287, !dbg !41
  %291 = fcmp uno float %287, 0.000000e+00, !dbg !42
  %292 = xor i1 %291, true, !dbg !43
  %293 = and i1 %86, %292, !dbg !44
  %294 = or i1 %289, %293, !dbg !45
  %295 = and i1 %86, %291, !dbg !46
  %296 = or i1 %290, %295, !dbg !47
  %297 = icmp slt i32 %17, %288, !dbg !48
  %298 = and i1 %297, %296, !dbg !49
  %299 = or i1 %294, %298, !dbg !50
  %300 = select i1 %299, float %49, float %287, !dbg !51
  %301 = select i1 %299, i32 %17, i32 %288, !dbg !52
  %302 = bitcast float %300 to i32, !dbg !38
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !38
  %304 = bitcast i32 %303 to float, !dbg !38
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 8, i32 31), !dbg !38
  %306 = fcmp ogt float %300, %304, !dbg !40
  %307 = fcmp oeq float %300, %304, !dbg !41
  %308 = fcmp uno float %300, 0.000000e+00, !dbg !53
  %309 = fcmp uno float %304, 0.000000e+00, !dbg !42
  %310 = xor i1 %309, true, !dbg !43
  %311 = and i1 %308, %310, !dbg !44
  %312 = or i1 %306, %311, !dbg !45
  %313 = and i1 %309, %308, !dbg !46
  %314 = or i1 %307, %313, !dbg !47
  %315 = icmp slt i32 %301, %305, !dbg !48
  %316 = and i1 %315, %314, !dbg !49
  %317 = or i1 %312, %316, !dbg !50
  %318 = select i1 %317, float %300, float %304, !dbg !51
  %319 = select i1 %317, i32 %301, i32 %305, !dbg !52
  %320 = bitcast float %318 to i32, !dbg !38
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 4, i32 31), !dbg !38
  %322 = bitcast i32 %321 to float, !dbg !38
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 4, i32 31), !dbg !38
  %324 = fcmp ogt float %318, %322, !dbg !40
  %325 = fcmp oeq float %318, %322, !dbg !41
  %326 = fcmp uno float %318, 0.000000e+00, !dbg !53
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !42
  %328 = xor i1 %327, true, !dbg !43
  %329 = and i1 %326, %328, !dbg !44
  %330 = or i1 %324, %329, !dbg !45
  %331 = and i1 %327, %326, !dbg !46
  %332 = or i1 %325, %331, !dbg !47
  %333 = icmp slt i32 %319, %323, !dbg !48
  %334 = and i1 %333, %332, !dbg !49
  %335 = or i1 %330, %334, !dbg !50
  %336 = select i1 %335, float %318, float %322, !dbg !51
  %337 = select i1 %335, i32 %319, i32 %323, !dbg !52
  %338 = bitcast float %336 to i32, !dbg !38
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !38
  %340 = bitcast i32 %339 to float, !dbg !38
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 2, i32 31), !dbg !38
  %342 = fcmp ogt float %336, %340, !dbg !40
  %343 = fcmp oeq float %336, %340, !dbg !41
  %344 = fcmp uno float %336, 0.000000e+00, !dbg !53
  %345 = fcmp uno float %340, 0.000000e+00, !dbg !42
  %346 = xor i1 %345, true, !dbg !43
  %347 = and i1 %344, %346, !dbg !44
  %348 = or i1 %342, %347, !dbg !45
  %349 = and i1 %345, %344, !dbg !46
  %350 = or i1 %343, %349, !dbg !47
  %351 = icmp slt i32 %337, %341, !dbg !48
  %352 = and i1 %351, %350, !dbg !49
  %353 = or i1 %348, %352, !dbg !50
  %354 = select i1 %353, i32 %337, i32 %341, !dbg !52
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !38
  %356 = bitcast i32 %355 to float, !dbg !38
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 16, i32 31), !dbg !38
  %358 = fcmp ogt float %50, %356, !dbg !40
  %359 = fcmp oeq float %50, %356, !dbg !41
  %360 = fcmp uno float %356, 0.000000e+00, !dbg !42
  %361 = xor i1 %360, true, !dbg !43
  %362 = and i1 %113, %361, !dbg !44
  %363 = or i1 %358, %362, !dbg !45
  %364 = and i1 %113, %360, !dbg !46
  %365 = or i1 %359, %364, !dbg !47
  %366 = icmp slt i32 %17, %357, !dbg !48
  %367 = and i1 %366, %365, !dbg !49
  %368 = or i1 %363, %367, !dbg !50
  %369 = select i1 %368, float %50, float %356, !dbg !51
  %370 = select i1 %368, i32 %17, i32 %357, !dbg !52
  %371 = bitcast float %369 to i32, !dbg !38
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 8, i32 31), !dbg !38
  %373 = bitcast i32 %372 to float, !dbg !38
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 8, i32 31), !dbg !38
  %375 = fcmp ogt float %369, %373, !dbg !40
  %376 = fcmp oeq float %369, %373, !dbg !41
  %377 = fcmp uno float %369, 0.000000e+00, !dbg !53
  %378 = fcmp uno float %373, 0.000000e+00, !dbg !42
  %379 = xor i1 %378, true, !dbg !43
  %380 = and i1 %377, %379, !dbg !44
  %381 = or i1 %375, %380, !dbg !45
  %382 = and i1 %378, %377, !dbg !46
  %383 = or i1 %376, %382, !dbg !47
  %384 = icmp slt i32 %370, %374, !dbg !48
  %385 = and i1 %384, %383, !dbg !49
  %386 = or i1 %381, %385, !dbg !50
  %387 = select i1 %386, float %369, float %373, !dbg !51
  %388 = select i1 %386, i32 %370, i32 %374, !dbg !52
  %389 = bitcast float %387 to i32, !dbg !38
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 4, i32 31), !dbg !38
  %391 = bitcast i32 %390 to float, !dbg !38
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 4, i32 31), !dbg !38
  %393 = fcmp ogt float %387, %391, !dbg !40
  %394 = fcmp oeq float %387, %391, !dbg !41
  %395 = fcmp uno float %387, 0.000000e+00, !dbg !53
  %396 = fcmp uno float %391, 0.000000e+00, !dbg !42
  %397 = xor i1 %396, true, !dbg !43
  %398 = and i1 %395, %397, !dbg !44
  %399 = or i1 %393, %398, !dbg !45
  %400 = and i1 %396, %395, !dbg !46
  %401 = or i1 %394, %400, !dbg !47
  %402 = icmp slt i32 %388, %392, !dbg !48
  %403 = and i1 %402, %401, !dbg !49
  %404 = or i1 %399, %403, !dbg !50
  %405 = select i1 %404, float %387, float %391, !dbg !51
  %406 = select i1 %404, i32 %388, i32 %392, !dbg !52
  %407 = bitcast float %405 to i32, !dbg !38
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !38
  %409 = bitcast i32 %408 to float, !dbg !38
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !38
  %411 = fcmp ogt float %405, %409, !dbg !40
  %412 = fcmp oeq float %405, %409, !dbg !41
  %413 = fcmp uno float %405, 0.000000e+00, !dbg !53
  %414 = fcmp uno float %409, 0.000000e+00, !dbg !42
  %415 = xor i1 %414, true, !dbg !43
  %416 = and i1 %413, %415, !dbg !44
  %417 = or i1 %411, %416, !dbg !45
  %418 = and i1 %414, %413, !dbg !46
  %419 = or i1 %412, %418, !dbg !47
  %420 = icmp slt i32 %406, %410, !dbg !48
  %421 = and i1 %420, %419, !dbg !49
  %422 = or i1 %417, %421, !dbg !50
  %423 = select i1 %422, i32 %406, i32 %410, !dbg !52
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !38
  %425 = bitcast i32 %424 to float, !dbg !38
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 16, i32 31), !dbg !38
  %427 = fcmp ogt float %51, %425, !dbg !40
  %428 = fcmp oeq float %51, %425, !dbg !41
  %429 = fcmp uno float %425, 0.000000e+00, !dbg !42
  %430 = xor i1 %429, true, !dbg !43
  %431 = and i1 %140, %430, !dbg !44
  %432 = or i1 %427, %431, !dbg !45
  %433 = and i1 %140, %429, !dbg !46
  %434 = or i1 %428, %433, !dbg !47
  %435 = icmp slt i32 %17, %426, !dbg !48
  %436 = and i1 %435, %434, !dbg !49
  %437 = or i1 %432, %436, !dbg !50
  %438 = select i1 %437, float %51, float %425, !dbg !51
  %439 = select i1 %437, i32 %17, i32 %426, !dbg !52
  %440 = bitcast float %438 to i32, !dbg !38
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 8, i32 31), !dbg !38
  %442 = bitcast i32 %441 to float, !dbg !38
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 8, i32 31), !dbg !38
  %444 = fcmp ogt float %438, %442, !dbg !40
  %445 = fcmp oeq float %438, %442, !dbg !41
  %446 = fcmp uno float %438, 0.000000e+00, !dbg !53
  %447 = fcmp uno float %442, 0.000000e+00, !dbg !42
  %448 = xor i1 %447, true, !dbg !43
  %449 = and i1 %446, %448, !dbg !44
  %450 = or i1 %444, %449, !dbg !45
  %451 = and i1 %447, %446, !dbg !46
  %452 = or i1 %445, %451, !dbg !47
  %453 = icmp slt i32 %439, %443, !dbg !48
  %454 = and i1 %453, %452, !dbg !49
  %455 = or i1 %450, %454, !dbg !50
  %456 = select i1 %455, float %438, float %442, !dbg !51
  %457 = select i1 %455, i32 %439, i32 %443, !dbg !52
  %458 = bitcast float %456 to i32, !dbg !38
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !38
  %460 = bitcast i32 %459 to float, !dbg !38
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 4, i32 31), !dbg !38
  %462 = fcmp ogt float %456, %460, !dbg !40
  %463 = fcmp oeq float %456, %460, !dbg !41
  %464 = fcmp uno float %456, 0.000000e+00, !dbg !53
  %465 = fcmp uno float %460, 0.000000e+00, !dbg !42
  %466 = xor i1 %465, true, !dbg !43
  %467 = and i1 %464, %466, !dbg !44
  %468 = or i1 %462, %467, !dbg !45
  %469 = and i1 %465, %464, !dbg !46
  %470 = or i1 %463, %469, !dbg !47
  %471 = icmp slt i32 %457, %461, !dbg !48
  %472 = and i1 %471, %470, !dbg !49
  %473 = or i1 %468, %472, !dbg !50
  %474 = select i1 %473, float %456, float %460, !dbg !51
  %475 = select i1 %473, i32 %457, i32 %461, !dbg !52
  %476 = bitcast float %474 to i32, !dbg !38
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !38
  %478 = bitcast i32 %477 to float, !dbg !38
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 2, i32 31), !dbg !38
  %480 = fcmp ogt float %474, %478, !dbg !40
  %481 = fcmp oeq float %474, %478, !dbg !41
  %482 = fcmp uno float %474, 0.000000e+00, !dbg !53
  %483 = fcmp uno float %478, 0.000000e+00, !dbg !42
  %484 = xor i1 %483, true, !dbg !43
  %485 = and i1 %482, %484, !dbg !44
  %486 = or i1 %480, %485, !dbg !45
  %487 = and i1 %483, %482, !dbg !46
  %488 = or i1 %481, %487, !dbg !47
  %489 = icmp slt i32 %475, %479, !dbg !48
  %490 = and i1 %489, %488, !dbg !49
  %491 = or i1 %486, %490, !dbg !50
  %492 = select i1 %491, i32 %475, i32 %479, !dbg !52
  %493 = select i1 %284, i32 %269, i32 %270, !dbg !51
  %494 = insertelement <1 x i32> poison, i32 %493, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %494, i1 %163) #3, !dbg !38
  %495 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %166, !dbg !38
  %496 = insertelement <1 x i32> poison, i32 %285, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 %163) #3, !dbg !38
  %497 = select i1 %353, i32 %338, i32 %339, !dbg !51
  %498 = insertelement <1 x i32> poison, i32 %497, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %498, i1 %163) #3, !dbg !38
  %499 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %171, !dbg !38
  %500 = insertelement <1 x i32> poison, i32 %354, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %500, i1 %163) #3, !dbg !38
  %501 = select i1 %422, i32 %407, i32 %408, !dbg !51
  %502 = insertelement <1 x i32> poison, i32 %501, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %502, i1 %163) #3, !dbg !38
  %503 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %176, !dbg !38
  %504 = insertelement <1 x i32> poison, i32 %423, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %504, i1 %163) #3, !dbg !38
  %505 = select i1 %491, i32 %476, i32 %477, !dbg !51
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %506, i1 %163) #3, !dbg !38
  %507 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %181, !dbg !38
  %508 = insertelement <1 x i32> poison, i32 %492, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %508, i1 %163) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %509 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %185) #3, !dbg !38
  %510 = bitcast i32 %509 to float, !dbg !38
  %511 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %8, !dbg !38
  %512 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %511, i1 %185) #3, !dbg !38
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 2, i32 31), !dbg !38
  %514 = bitcast i32 %513 to float, !dbg !38
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 2, i32 31), !dbg !38
  %516 = fcmp ogt float %510, %514, !dbg !40
  %517 = fcmp oeq float %510, %514, !dbg !41
  %518 = fcmp uno float %510, 0.000000e+00, !dbg !53
  %519 = fcmp uno float %514, 0.000000e+00, !dbg !42
  %520 = xor i1 %519, true, !dbg !43
  %521 = and i1 %518, %520, !dbg !44
  %522 = or i1 %516, %521, !dbg !45
  %523 = and i1 %518, %519, !dbg !46
  %524 = or i1 %517, %523, !dbg !47
  %525 = icmp slt i32 %512, %515, !dbg !48
  %526 = and i1 %525, %524, !dbg !49
  %527 = or i1 %522, %526, !dbg !50
  %528 = select i1 %527, float %510, float %514, !dbg !51
  %529 = select i1 %527, i32 %512, i32 %515, !dbg !52
  %530 = bitcast float %528 to i32, !dbg !38
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 1, i32 31), !dbg !38
  %532 = bitcast i32 %531 to float, !dbg !38
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 1, i32 31), !dbg !38
  %534 = fcmp ogt float %528, %532, !dbg !40
  %535 = fcmp oeq float %528, %532, !dbg !41
  %536 = fcmp uno float %528, 0.000000e+00, !dbg !53
  %537 = fcmp uno float %532, 0.000000e+00, !dbg !42
  %538 = xor i1 %537, true, !dbg !43
  %539 = and i1 %536, %538, !dbg !44
  %540 = or i1 %534, %539, !dbg !45
  %541 = and i1 %537, %536, !dbg !46
  %542 = or i1 %535, %541, !dbg !47
  %543 = icmp slt i32 %529, %533, !dbg !48
  %544 = and i1 %543, %542, !dbg !49
  %545 = or i1 %540, %544, !dbg !50
  %546 = select i1 %545, i32 %529, i32 %533, !dbg !52
  %547 = select i1 %545, i32 %530, i32 %531, !dbg !51
  %548 = insertelement <1 x i32> poison, i32 %547, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %548, i1 %203) #3, !dbg !38
  %549 = insertelement <1 x i32> poison, i32 %546, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %549, i1 %203) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %550 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %165, !dbg !38
  %551 = load i32, ptr addrspace(3) %550, align 16, !dbg !38
  %552 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %170, !dbg !38
  %553 = load i32, ptr addrspace(3) %552, align 16, !dbg !38
  %554 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %175, !dbg !38
  %555 = load i32, ptr addrspace(3) %554, align 16, !dbg !38
  %556 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %180, !dbg !38
  %557 = load i32, ptr addrspace(3) %556, align 16, !dbg !38
  %558 = extractelement <2 x i32> %23, i64 1, !dbg !54
  %559 = shl nsw i32 %558, 6, !dbg !54
  %560 = extractelement <2 x i32> %23, i64 0, !dbg !55
  %561 = add nsw i32 %560, %559, !dbg !55
  %562 = shl nsw i32 %24, 13, !dbg !56
  %563 = add i32 %561, %562, !dbg !57
  %564 = sext i32 %563 to i64, !dbg !58
  %565 = getelementptr float, ptr addrspace(1) %1, i64 %564, !dbg !58
  %566 = lshr i32 %9, 3, !dbg !59
  %567 = shl nuw nsw i32 %164, 2, !dbg !59
  %568 = or disjoint i32 %567, %566, !dbg !59
  %569 = icmp eq i32 %568, 0, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %565, i1 %569) #3, !dbg !59
  %570 = getelementptr i64, ptr addrspace(1) %2, i64 %564, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %571 = insertelement <1 x i32> poison, i32 %551, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %571, i1 true) #3, !dbg !61
  %572 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %52, !dbg !61
  %573 = insertelement <1 x i32> poison, i32 %553, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %573, i1 true) #3, !dbg !61
  %574 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %53, !dbg !61
  %575 = insertelement <1 x i32> poison, i32 %555, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %574, <1 x i32> %575, i1 true) #3, !dbg !61
  %576 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %54, !dbg !61
  %577 = insertelement <1 x i32> poison, i32 %557, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %578 = load i32, ptr addrspace(3) %215, align 4, !dbg !61
  %579 = sext i32 %578 to i64, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %579, ptr addrspace(1) %570, i1 %569) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py", directory: "inductor_cache/wz")
!4 = !{ptr @triton_per_fused_leaky_relu_max_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_max_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_max_3", linkageName: "triton_per_fused_leaky_relu_max_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 28, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 44, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 54, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 32, scope: !7)
!28 = !DILocation(line: 131, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 41, column: 37, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !31)
!35 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !31)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !31)
!37 = !DILocation(line: 41, column: 40, scope: !7)
!38 = !DILocation(line: 173, column: 42, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 43, column: 68, scope: !7)
!40 = !DILocation(line: 152, column: 21, scope: !33, inlinedAt: !39)
!41 = !DILocation(line: 153, column: 23, scope: !33, inlinedAt: !39)
!42 = !DILocation(line: 156, column: 29, scope: !33, inlinedAt: !39)
!43 = !DILocation(line: 157, column: 32, scope: !33, inlinedAt: !39)
!44 = !DILocation(line: 157, column: 28, scope: !33, inlinedAt: !39)
!45 = !DILocation(line: 157, column: 16, scope: !33, inlinedAt: !39)
!46 = !DILocation(line: 159, column: 29, scope: !33, inlinedAt: !39)
!47 = !DILocation(line: 159, column: 17, scope: !33, inlinedAt: !39)
!48 = !DILocation(line: 162, column: 31, scope: !33, inlinedAt: !39)
!49 = !DILocation(line: 162, column: 21, scope: !33, inlinedAt: !39)
!50 = !DILocation(line: 162, column: 12, scope: !33, inlinedAt: !39)
!51 = !DILocation(line: 163, column: 35, scope: !33, inlinedAt: !39)
!52 = !DILocation(line: 163, column: 69, scope: !33, inlinedAt: !39)
!53 = !DILocation(line: 155, column: 29, scope: !33, inlinedAt: !39)
!54 = !DILocation(line: 45, column: 33, scope: !7)
!55 = !DILocation(line: 45, column: 30, scope: !7)
!56 = !DILocation(line: 45, column: 43, scope: !7)
!57 = !DILocation(line: 45, column: 38, scope: !7)
!58 = !DILocation(line: 45, column: 25, scope: !7)
!59 = !DILocation(line: 45, column: 54, scope: !7)
!60 = !DILocation(line: 46, column: 25, scope: !7)
!61 = !DILocation(line: 46, column: 54, scope: !7)
!62 = !DILocation(line: 46, column: 4, scope: !7)
