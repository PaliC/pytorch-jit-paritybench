#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":41:37)
#loc29 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":43:68)
#loc55 = loc(callsite(#loc1 at #loc21))
#loc61 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_leaky_relu_max_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.000000e-01> : tensor<8x64xf32, #blocked> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<8192> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<8192> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = arith.remsi %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc7)
    %13 = arith.remsi %9, %cst_2 : tensor<8x1xi32, #blocked1> loc(#loc7)
    %14 = arith.divsi %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %9, %cst_2 : tensor<8x1xi32, #blocked1> loc(#loc8)
    %16 = arith.remsi %15, %cst_3 : tensor<8x1xi32, #blocked1> loc(#loc9)
    %17 = arith.divsi %9, %cst_5 : tensor<8x1xi32, #blocked1> loc(#loc10)
    %18 = arith.muli %11, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc11)
    %19 = tt.broadcast %12 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc12)
    %20 = tt.broadcast %18 : tensor<1x64xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc12)
    %21 = arith.addi %19, %20 : tensor<8x64xi32, #blocked> loc(#loc12)
    %22 = arith.muli %14, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %22 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc14)
    %24 = arith.addi %21, %23 : tensor<8x64xi32, #blocked> loc(#loc14)
    %25 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %26 = tt.addptr %25, %24 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc15)
    %27 = tt.load %26 : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %28 = arith.cmpf ogt, %27, %cst : tensor<8x64xf32, #blocked> loc(#loc17)
    %29 = arith.mulf %27, %cst_0 : tensor<8x64xf32, #blocked> loc(#loc18)
    %30 = arith.select %28, %27, %29 : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc19)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc21)), %arg6: f32 loc(callsite(#loc1 at #loc21))):
      %47 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc76)
      %48 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc77)
      %49 = arith.ori %47, %48 : i1 loc(#loc78)
      %50 = arith.select %49, %arg5, %arg6 : f32 loc(#loc79)
      tt.reduce.return %50 : f32 loc(#loc54)
    }) : (tensor<8x64xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc54)
    %32 = triton_gpu.convert_layout %31 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc26)
    %34 = tt.broadcast %11 : tensor<1x64xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc27)
    %35:2 = "tt.reduce"(%30, %34) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc29)), %arg6: i32 loc(callsite(#loc1 at #loc29)), %arg7: f32 loc(callsite(#loc1 at #loc29)), %arg8: i32 loc(callsite(#loc1 at #loc29))):
      %47 = arith.cmpf ogt, %arg5, %arg7 : f32 loc(#loc80)
      %48 = arith.cmpf oeq, %arg5, %arg7 : f32 loc(#loc81)
      %49 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc82)
      %50 = arith.cmpf une, %arg7, %arg7 : f32 loc(#loc83)
      %51 = arith.xori %50, %true : i1 loc(#loc84)
      %52 = arith.andi %49, %51 : i1 loc(#loc85)
      %53 = arith.ori %47, %52 : i1 loc(#loc86)
      %54 = arith.andi %49, %50 : i1 loc(#loc87)
      %55 = arith.ori %48, %54 : i1 loc(#loc88)
      %56 = arith.cmpi slt, %arg6, %arg8 : i32 loc(#loc89)
      %57 = arith.andi %55, %56 : i1 loc(#loc90)
      %58 = arith.ori %53, %57 : i1 loc(#loc91)
      %59 = arith.select %58, %arg5, %arg7 : f32 loc(#loc92)
      %60 = arith.select %58, %arg6, %arg8 : i32 loc(#loc93)
      tt.reduce.return %59, %60 : f32, i32 loc(#loc60)
    }) : (tensor<8x64xf32, #blocked>, tensor<8x64xi32, #blocked>) -> (tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc60)
    %36 = tt.expand_dims %35#1 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc44)
    %37 = arith.muli %13, %cst_3 : tensor<8x1xi32, #blocked1> loc(#loc45)
    %38 = arith.addi %16, %37 : tensor<8x1xi32, #blocked1> loc(#loc46)
    %39 = arith.muli %17, %cst_5 : tensor<8x1xi32, #blocked1> loc(#loc47)
    %40 = arith.addi %38, %39 : tensor<8x1xi32, #blocked1> loc(#loc48)
    %41 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    %42 = tt.addptr %41, %40 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc49)
    tt.store %42, %33 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc50)
    %43 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<8x1x!tt.ptr<i64>, #blocked1> loc(#loc51)
    %44 = tt.addptr %43, %40 : tensor<8x1x!tt.ptr<i64>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc51)
    %45 = triton_gpu.convert_layout %36 : tensor<8x1xi32, #blocked> -> tensor<8x1xi32, #blocked1> loc(#loc52)
    %46 = arith.extsi %45 : tensor<8x1xi32, #blocked1> to tensor<8x1xi64, #blocked1> loc(#loc52)
    tt.store %44, %46 : tensor<8x1x!tt.ptr<i64>, #blocked1> loc(#loc52)
    tt.return loc(#loc53)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":23:28)
#loc3 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":23:33)
#loc4 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":24:44)
#loc5 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":24:23)
#loc6 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":26:34)
#loc7 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":30:19)
#loc8 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":31:19)
#loc9 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":32:28)
#loc10 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":33:19)
#loc11 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:39)
#loc12 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:35)
#loc13 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:49)
#loc14 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:44)
#loc15 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:30)
#loc16 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":34:54)
#loc17 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":36:18)
#loc18 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":38:18)
#loc19 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":39:32)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":41:40)
#loc27 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":42:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":173:42)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":152:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":153:23)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":155:29)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":156:29)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:32)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:28)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":157:16)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":159:29)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":159:17)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:31)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:21)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":162:12)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":163:35)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":163:69)
#loc44 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":44:20)
#loc45 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:33)
#loc46 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:30)
#loc47 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:43)
#loc48 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:38)
#loc49 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:25)
#loc50 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":45:54)
#loc51 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":46:25)
#loc52 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":46:54)
#loc53 = loc("inductor_cache/wz/cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py":46:4)
#loc54 = loc(callsite(#loc20 at #loc21))
#loc56 = loc(callsite(#loc22 at #loc20))
#loc57 = loc(callsite(#loc23 at #loc20))
#loc58 = loc(callsite(#loc24 at #loc20))
#loc59 = loc(callsite(#loc25 at #loc20))
#loc60 = loc(callsite(#loc28 at #loc29))
#loc62 = loc(callsite(#loc30 at #loc28))
#loc63 = loc(callsite(#loc31 at #loc28))
#loc64 = loc(callsite(#loc32 at #loc28))
#loc65 = loc(callsite(#loc33 at #loc28))
#loc66 = loc(callsite(#loc34 at #loc28))
#loc67 = loc(callsite(#loc35 at #loc28))
#loc68 = loc(callsite(#loc36 at #loc28))
#loc69 = loc(callsite(#loc37 at #loc28))
#loc70 = loc(callsite(#loc38 at #loc28))
#loc71 = loc(callsite(#loc39 at #loc28))
#loc72 = loc(callsite(#loc40 at #loc28))
#loc73 = loc(callsite(#loc41 at #loc28))
#loc74 = loc(callsite(#loc42 at #loc28))
#loc75 = loc(callsite(#loc43 at #loc28))
#loc76 = loc(callsite(#loc56 at #loc21))
#loc77 = loc(callsite(#loc57 at #loc21))
#loc78 = loc(callsite(#loc58 at #loc21))
#loc79 = loc(callsite(#loc59 at #loc21))
#loc80 = loc(callsite(#loc62 at #loc29))
#loc81 = loc(callsite(#loc63 at #loc29))
#loc82 = loc(callsite(#loc64 at #loc29))
#loc83 = loc(callsite(#loc65 at #loc29))
#loc84 = loc(callsite(#loc66 at #loc29))
#loc85 = loc(callsite(#loc67 at #loc29))
#loc86 = loc(callsite(#loc68 at #loc29))
#loc87 = loc(callsite(#loc69 at #loc29))
#loc88 = loc(callsite(#loc70 at #loc29))
#loc89 = loc(callsite(#loc71 at #loc29))
#loc90 = loc(callsite(#loc72 at #loc29))
#loc91 = loc(callsite(#loc73 at #loc29))
#loc92 = loc(callsite(#loc74 at #loc29))
#loc93 = loc(callsite(#loc75 at #loc29))
