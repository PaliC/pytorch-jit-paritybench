; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_eq_masked_fill_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = srem i32 %11, 16, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %12) #1, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = shl i32 %11, 2, !dbg !18
  %22 = or disjoint i32 %21, 4, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #1, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = or disjoint i32 %21, 1, !dbg !21
  %32 = or disjoint i32 %21, 5, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = or disjoint i32 %21, 2, !dbg !24
  %42 = or disjoint i32 %21, 6, !dbg !24
  %43 = sext i32 %41 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = or disjoint i32 %21, 3, !dbg !27
  %52 = or disjoint i32 %21, 7, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %12) #1, !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = fmul float %19, %19, !dbg !30
  %62 = fmul float %20, %20, !dbg !30
  %63 = fcmp oeq float %61, 0.000000e+00, !dbg !31
  %64 = fcmp oeq float %62, 0.000000e+00, !dbg !31
  %65 = select i1 %63, float -1.000000e+04, float %28, !dbg !32
  %66 = select i1 %64, float -1.000000e+04, float %30, !dbg !32
  %67 = select i1 %63, float -1.000000e+04, float %38, !dbg !33
  %68 = select i1 %64, float -1.000000e+04, float %40, !dbg !33
  %69 = fcmp ogt float %65, %67, !dbg !34
  %70 = fcmp ogt float %66, %68, !dbg !34
  %71 = fcmp uno float %65, 0.000000e+00, !dbg !38
  %72 = fcmp uno float %66, 0.000000e+00, !dbg !38
  %73 = or i1 %69, %71, !dbg !39
  %74 = or i1 %72, %70, !dbg !39
  %75 = select i1 %73, float %65, float %67, !dbg !40
  %76 = select i1 %74, float %66, float %68, !dbg !40
  %77 = select i1 %63, float -1.000000e+04, float %48, !dbg !41
  %78 = select i1 %64, float -1.000000e+04, float %50, !dbg !41
  %79 = fcmp ogt float %75, %77, !dbg !42
  %80 = fcmp ogt float %76, %78, !dbg !42
  %81 = fcmp uno float %75, 0.000000e+00, !dbg !44
  %82 = fcmp uno float %76, 0.000000e+00, !dbg !44
  %83 = or i1 %79, %81, !dbg !45
  %84 = or i1 %80, %82, !dbg !45
  %85 = select i1 %83, float %75, float %77, !dbg !46
  %86 = select i1 %84, float %76, float %78, !dbg !46
  %87 = select i1 %63, float -1.000000e+04, float %58, !dbg !47
  %88 = select i1 %64, float -1.000000e+04, float %60, !dbg !47
  %89 = fcmp ogt float %85, %87, !dbg !48
  %90 = fcmp ogt float %86, %88, !dbg !48
  %91 = fcmp uno float %85, 0.000000e+00, !dbg !50
  %92 = fcmp uno float %86, 0.000000e+00, !dbg !50
  %93 = or i1 %89, %91, !dbg !51
  %94 = or i1 %90, %92, !dbg !51
  %95 = select i1 %93, float %85, float %87, !dbg !52
  %96 = select i1 %94, float %86, float %88, !dbg !52
  %97 = fsub float %65, %95, !dbg !53
  %98 = fsub float %66, %96, !dbg !53
  %99 = fmul float %97, 0x3FF7154760000000, !dbg !54
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !54
  %101 = fmul float %98, 0x3FF7154760000000, !dbg !54
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #1, !dbg !54
  %103 = fsub float %67, %95, !dbg !55
  %104 = fsub float %68, %96, !dbg !55
  %105 = fmul float %103, 0x3FF7154760000000, !dbg !56
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #1, !dbg !56
  %107 = fmul float %104, 0x3FF7154760000000, !dbg !56
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #1, !dbg !56
  %109 = fadd float %100, %106, !dbg !57
  %110 = fadd float %102, %108, !dbg !57
  %111 = fsub float %77, %95, !dbg !58
  %112 = fsub float %78, %96, !dbg !58
  %113 = fmul float %111, 0x3FF7154760000000, !dbg !59
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #1, !dbg !59
  %115 = fmul float %112, 0x3FF7154760000000, !dbg !59
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #1, !dbg !59
  %117 = fadd float %109, %114, !dbg !60
  %118 = fadd float %110, %116, !dbg !60
  %119 = fsub float %87, %95, !dbg !61
  %120 = fsub float %88, %96, !dbg !61
  %121 = fmul float %119, 0x3FF7154760000000, !dbg !62
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #1, !dbg !62
  %123 = fmul float %120, 0x3FF7154760000000, !dbg !62
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !62
  %125 = fadd float %117, %122, !dbg !63
  %126 = fadd float %118, %124, !dbg !63
  %127 = sext i32 %11 to i64, !dbg !64
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !64
  %129 = bitcast float %95 to i32, !dbg !65
  %130 = bitcast float %96 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %128, i1 %12) #1, !dbg !65
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !66
  %132 = bitcast float %125 to i32, !dbg !67
  %133 = bitcast float %126 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %133, ptr addrspace(1) %131, i1 %12) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvwmvtechvli5j2eeulvby5riu3z6o7bdciuwtccfpvucqbg4ivg.py", directory: "inductor_cache/vw")
!4 = !{ptr @triton_poi_fused__softmax_div_eq_masked_fill_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_eq_masked_fill_mul_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_eq_masked_fill_mul_2", linkageName: "triton_poi_fused__softmax_div_eq_masked_fill_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 32, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 35, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 19, scope: !7)
!32 = !DILocation(line: 37, column: 32, scope: !7)
!33 = !DILocation(line: 39, column: 33, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 40, column: 41, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 42, column: 33, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !43)
!43 = !DILocation(line: 43, column: 42, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !43)
!47 = !DILocation(line: 45, column: 33, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !49)
!49 = !DILocation(line: 46, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !49)
!53 = !DILocation(line: 47, column: 19, scope: !7)
!54 = !DILocation(line: 48, column: 24, scope: !7)
!55 = !DILocation(line: 49, column: 20, scope: !7)
!56 = !DILocation(line: 50, column: 24, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 52, column: 20, scope: !7)
!59 = !DILocation(line: 53, column: 24, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 24, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 37, scope: !7)
!66 = !DILocation(line: 59, column: 25, scope: !7)
!67 = !DILocation(line: 59, column: 37, scope: !7)
!68 = !DILocation(line: 59, column: 4, scope: !7)
