; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 1, !dbg !16
  %22 = lshr i32 %9, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = icmp slt i32 %21, 192, !dbg !19
  %25 = icmp slt i32 %23, 192, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %26 = sdiv i32 %.frozen, 64, !dbg !20
  %27 = mul i32 %26, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = mul i32 %14, 192, !dbg !22
  %29 = mul i32 %15, 192, !dbg !22
  %30 = add i32 %28, %21, !dbg !23
  %31 = add i32 %29, %21, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = and i1 %24, %17, !dbg !25
  %37 = and i1 %24, %18, !dbg !25
  %38 = and i1 %19, %25, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #2, !dbg !26
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = bitcast i32 %41 to float, !dbg !26
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #2, !dbg !26
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !26
  %47 = bitcast i32 %45 to float, !dbg !26
  %48 = bitcast i32 %46 to float, !dbg !26
  %49 = sext i32 %21 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %24) #2, !dbg !28
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !28
  %54 = bitcast i32 %52 to float, !dbg !28
  %55 = bitcast i32 %53 to float, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !29
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %36) #2, !dbg !30
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !30
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !30
  %61 = bitcast i32 %59 to float, !dbg !30
  %62 = bitcast i32 %60 to float, !dbg !30
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %37) #2, !dbg !30
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !30
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !30
  %66 = bitcast i32 %64 to float, !dbg !30
  %67 = bitcast i32 %65 to float, !dbg !30
  %68 = fmul float %54, %61, !dbg !31
  %69 = fmul float %55, %62, !dbg !31
  %70 = fmul float %54, %66, !dbg !31
  %71 = fmul float %55, %67, !dbg !31
  %72 = fadd float %68, %42, !dbg !32
  %73 = fadd float %69, %43, !dbg !32
  %74 = fadd float %70, %47, !dbg !32
  %75 = fadd float %71, %48, !dbg !32
  %76 = shl i32 %23, 6, !dbg !33
  %77 = add i32 %76, %.decomposed, !dbg !34
  %78 = mul i32 %26, 12288, !dbg !35
  %79 = add i32 %77, %78, !dbg !36
  %80 = sext i32 %79 to i64, !dbg !37
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !37
  %82 = and i32 %12, 508, !dbg !38
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !38
  %84 = bitcast float %72 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !38
  %85 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 1040, !dbg !38
  %86 = bitcast float %73 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !38
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !38
  %88 = bitcast float %74 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !38
  %89 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 1552, !dbg !38
  %90 = bitcast float %75 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %91 = lshr i32 %12, 6, !dbg !38
  %92 = and i32 %91, 4, !dbg !38
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !38
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %82, !dbg !38
  %.extract = load i32, ptr addrspace(3) %94, align 16, !dbg !38
  %95 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 4, !dbg !38
  %.extract4 = load i32, ptr addrspace(3) %95, align 4, !dbg !38
  %96 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 8, !dbg !38
  %.extract5 = load i32, ptr addrspace(3) %96, align 8, !dbg !38
  %97 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 12, !dbg !38
  %.extract6 = load i32, ptr addrspace(3) %97, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %81, i1 %38) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 44, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
