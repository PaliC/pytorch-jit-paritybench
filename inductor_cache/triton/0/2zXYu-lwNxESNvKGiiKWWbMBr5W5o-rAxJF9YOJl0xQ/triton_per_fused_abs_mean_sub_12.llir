; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 63, !dbg !11
  %.frozen = freeze i32 %6, !dbg !12
  %11 = sdiv i32 %.frozen, 64, !dbg !12
  %12 = mul i32 %11, 64, !dbg !13
  %.decomposed = sub i32 %.frozen, %12, !dbg !13
  %13 = shl i32 %7, 7, !dbg !14
  %14 = and i32 %13, 3968, !dbg !14
  %15 = shl i32 %11, 7, !dbg !15
  %16 = or disjoint i32 %15, %10, !dbg !16
  %17 = or disjoint i32 %16, 64, !dbg !16
  %18 = sdiv i32 %16, 32, !dbg !17
  %19 = sdiv i32 %17, 32, !dbg !17
  %20 = srem i32 %18, 32, !dbg !18
  %21 = srem i32 %19, 32, !dbg !18
  %22 = shl nsw i32 %20, 12, !dbg !19
  %23 = shl nsw i32 %21, 12, !dbg !19
  %24 = or disjoint i32 %22, %14, !dbg !20
  %25 = or disjoint i32 %23, %14, !dbg !20
  %26 = shl nsw i32 %.decomposed, 13, !dbg !21
  %27 = add i32 %16, %26, !dbg !22
  %28 = add i32 %17, %26, !dbg !22
  %29 = sdiv i32 %27, 131072, !dbg !23
  %30 = sdiv i32 %28, 131072, !dbg !23
  %31 = shl nsw i32 %29, 17, !dbg !24
  %32 = shl nsw i32 %30, 17, !dbg !24
  %33 = add i32 %24, %31, !dbg !25
  %34 = add i32 %25, %32, !dbg !25
  %35 = sdiv i32 %27, 1024, !dbg !26
  %36 = sdiv i32 %28, 1024, !dbg !26
  %37 = srem i32 %35, 128, !dbg !27
  %38 = srem i32 %36, 128, !dbg !27
  %39 = add i32 %33, %37, !dbg !28
  %40 = add i32 %34, %38, !dbg !28
  %41 = sext i32 %39 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = sext i32 %40 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !32
  %51 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !30
  %52 = insertelement <2 x i32> %51, i32 %46, i64 1, !dbg !30
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !30
  %54 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %55 = insertelement <2 x i32> %54, i32 %50, i64 1, !dbg !32
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !32
  %57 = fsub <2 x float> %53, %56, !dbg !33
  %58 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %57), !dbg !34
  %shift = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %59 = fadd <2 x float> %58, %shift, !dbg !35
  %60 = extractelement <2 x float> %59, i64 0, !dbg !35
  %61 = bitcast float %60 to i32, !dbg !40
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !40
  %63 = bitcast i32 %62 to float, !dbg !40
  %64 = fadd float %60, %63, !dbg !35
  %65 = bitcast float %64 to i32, !dbg !40
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = fadd float %64, %67, !dbg !35
  %69 = bitcast float %68 to i32, !dbg !40
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !40
  %71 = bitcast i32 %70 to float, !dbg !40
  %72 = fadd float %68, %71, !dbg !35
  %73 = bitcast float %72 to i32, !dbg !40
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !40
  %75 = bitcast i32 %74 to float, !dbg !40
  %76 = fadd float %72, %75, !dbg !35
  %77 = bitcast float %76 to i32, !dbg !40
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = fadd float %76, %79, !dbg !35
  %81 = icmp eq i32 %8, 0, !dbg !40
  %82 = and i32 %9, 1, !dbg !40
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !40
  %84 = bitcast float %80 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %81) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %85 = icmp slt i32 %7, 2, !dbg !40
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !40
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #4, !dbg !40
  %88 = bitcast i32 %87 to float, !dbg !40
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = fadd float %88, %90, !dbg !35
  %92 = and i32 %7, 1, !dbg !40
  %93 = icmp eq i32 %92, 0, !dbg !40
  %94 = and i1 %85, %93, !dbg !40
  %95 = bitcast float %91 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %95, i1 %94) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %96 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %97 = sext i32 %6 to i64, !dbg !41
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !41
  %99 = icmp eq i32 %10, 0, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %98, i1 %99) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coqxbsrz5tllbzytwujhahu4whua7lawqsfide2p7tx76scadpvc.py", directory: "inductor_cache/oq")
!4 = !{ptr @triton_per_fused_abs_mean_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_12", linkageName: "triton_per_fused_abs_mean_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 36, scope: !7)
!15 = !DILocation(line: 33, column: 66, scope: !7)
!16 = !DILocation(line: 33, column: 62, scope: !7)
!17 = !DILocation(line: 33, column: 73, scope: !7)
!18 = !DILocation(line: 33, column: 79, scope: !7)
!19 = !DILocation(line: 33, column: 55, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 114, scope: !7)
!22 = !DILocation(line: 33, column: 109, scope: !7)
!23 = !DILocation(line: 33, column: 121, scope: !7)
!24 = !DILocation(line: 33, column: 94, scope: !7)
!25 = !DILocation(line: 33, column: 86, scope: !7)
!26 = !DILocation(line: 33, column: 161, scope: !7)
!27 = !DILocation(line: 33, column: 169, scope: !7)
!28 = !DILocation(line: 33, column: 133, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 177, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 177, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 23, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 38, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 39, column: 25, scope: !7)
!42 = !DILocation(line: 39, column: 36, scope: !7)
!43 = !DILocation(line: 39, column: 4, scope: !7)
