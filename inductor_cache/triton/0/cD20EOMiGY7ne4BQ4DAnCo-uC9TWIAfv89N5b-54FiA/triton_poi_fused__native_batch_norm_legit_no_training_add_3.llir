; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 4, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = or disjoint i32 %22, %14, !dbg !17
  %25 = icmp slt i32 %23, 64, !dbg !18
  %26 = icmp slt i32 %24, 64, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %27 = sdiv i32 %.frozen, 4, !dbg !19
  %28 = mul i32 %27, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %17, 6, !dbg !21
  %30 = add i32 %23, %29, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %19, %25, !dbg !24
  %34 = and i1 %20, %26, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #4, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = shl i32 %12, 5, !dbg !25
  %39 = and i32 %38, 224, !dbg !25
  %40 = or disjoint i32 %39, %14, !dbg !25
  %41 = and i32 %15, 254, !dbg !25
  %42 = lshr exact i32 %39, 1, !dbg !25
  %43 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %42, !dbg !25
  %44 = getelementptr float, ptr addrspace(3) %43, i32 %40, !dbg !25
  %45 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 true) #4, !dbg !25
  %46 = or disjoint i32 %40, 16, !dbg !25
  %47 = lshr i32 %46, 4, !dbg !25
  %.idx = shl nuw nsw i32 %47, 3, !dbg !25
  %48 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !25
  %49 = getelementptr float, ptr addrspace(3) %48, i32 %46, !dbg !25
  %50 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %51 = lshr i32 %41, 4, !dbg !25
  %52 = and i32 %12, 127, !dbg !25
  %53 = add nuw nsw i32 %51, %52, !dbg !25
  %.idx1 = shl nuw nsw i32 %53, 3, !dbg !25
  %54 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !25
  %55 = load <2 x float>, ptr addrspace(3) %54, align 8, !dbg !25
  %56 = shl i32 %24, 2, !dbg !26
  %57 = add i32 %56, %.decomposed, !dbg !27
  %58 = shl i32 %27, 8, !dbg !28
  %59 = add i32 %57, %58, !dbg !29
  %60 = sext i32 %59 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %34) #4, !dbg !31
  %63 = sext i32 %.decomposed to i64, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !32
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %20) #4, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !34
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %20) #4, !dbg !35
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !35
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !35
  %70 = bitcast i32 %68 to float, !dbg !35
  %71 = bitcast i32 %69 to float, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !36
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %20) #4, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !38
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %20) #4, !dbg !39
  %76 = fadd float %70, 0x3EE4F8B580000000, !dbg !40
  %77 = fadd float %71, 0x3EE4F8B580000000, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %78, 0, !dbg !41
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %79, 0, !dbg !41
  br i1 %.not.i, label %85, label %80, !dbg !41

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !41

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

85:                                               ; preds = %9
  br i1 %.not1.i, label %88, label %86, !dbg !41

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !41
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i3 = icmp eq i32 %90, 0, !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i6 = icmp eq i32 %91, 0, !dbg !41
  br i1 %.not.i3, label %97, label %92, !dbg !41

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %95, label %93, !dbg !41

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !41
  br label %__nv_sqrtf.exit7, !dbg !41

__nv_sqrtf.exit7:                                 ; preds = %93, %95, %98, %100
  %.0.i5 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !41
  %102 = extractvalue { i32, i32 } %62, 1, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = extractvalue { i32, i32 } %65, 1, !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = fsub float %103, %105, !dbg !42
  %107 = extractvalue { i32, i32 } %62, 0, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = extractvalue { i32, i32 } %65, 0, !dbg !33
  %110 = bitcast i32 %109 to float, !dbg !33
  %111 = fsub float %108, %110, !dbg !42
  %112 = extractvalue { i32, i32 } %75, 1, !dbg !39
  %113 = bitcast i32 %112 to float, !dbg !39
  %114 = extractvalue { i32, i32 } %75, 0, !dbg !39
  %115 = bitcast i32 %114 to float, !dbg !39
  %116 = extractvalue { i32, i32 } %73, 1, !dbg !37
  %117 = bitcast i32 %116 to float, !dbg !37
  %118 = extractvalue { i32, i32 } %73, 0, !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = extractelement <2 x float> %55, i64 1, !dbg !25
  %121 = extractelement <2 x float> %55, i64 0, !dbg !25
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !43
  %124 = fmul float %111, %122, !dbg !44
  %125 = fmul float %106, %123, !dbg !44
  %126 = fmul float %124, %119, !dbg !45
  %127 = fmul float %125, %117, !dbg !45
  %128 = fadd float %126, %115, !dbg !46
  %129 = fadd float %127, %113, !dbg !46
  %130 = fadd float %121, %128, !dbg !47
  %131 = fadd float %120, %129, !dbg !47
  %132 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %133 = lshr exact i32 %39, 2, !dbg !49
  %134 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %133, !dbg !49
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %40, !dbg !49
  %136 = bitcast float %130 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #4, !dbg !49
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %47, !dbg !49
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %46, !dbg !49
  %139 = bitcast float %131 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !49
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %41, !dbg !49
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !49
  %143 = or disjoint i32 %41, 1, !dbg !49
  %144 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %143, !dbg !49
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %145, ptr addrspace(1) %132, i1 %33) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7jb6kkqxvw2hc3s4dxh7w47xqiqt6ebr62pwsfuw7usjasouk4.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 46, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 51, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
