; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_layer_norm_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = icmp slt i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %8, 3, !dbg !13
  %13 = or disjoint i32 %12, %11, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9) #4, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = zext nneg i32 %11 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !22
  %26 = fadd float %17, %21, !dbg !23
  %27 = select i1 %9, float %26, float 0.000000e+00, !dbg !24
  %28 = bitcast float %27 to i32, !dbg !25
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = fadd float %27, %30, !dbg !29
  %32 = bitcast float %31 to i32, !dbg !25
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = fadd float %31, %34, !dbg !29
  %36 = bitcast float %35 to i32, !dbg !25
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = fadd float %35, %38, !dbg !29
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 8.000000e+00) #4, !dbg !31
  %41 = fsub float %26, %40, !dbg !32
  %42 = fmul float %41, %41, !dbg !33
  %43 = select i1 %9, float %42, float 0.000000e+00, !dbg !34
  %44 = bitcast float %43 to i32, !dbg !35
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !35
  %46 = bitcast i32 %45 to float, !dbg !35
  %47 = fadd float %43, %46, !dbg !37
  %48 = bitcast float %47 to i32, !dbg !35
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !35
  %50 = bitcast i32 %49 to float, !dbg !35
  %51 = fadd float %47, %50, !dbg !37
  %52 = bitcast float %51 to i32, !dbg !35
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !35
  %54 = bitcast i32 %53 to float, !dbg !35
  %55 = fadd float %51, %54, !dbg !37
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 8.000000e+00) #4, !dbg !38
  %57 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %58, 0, !dbg !40
  br i1 %.not.i, label %61, label %59, !dbg !40

59:                                               ; preds = %7
  %60 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

61:                                               ; preds = %7
  %62 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %59, %61
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], !dbg !40
  %63 = bitcast i32 %25 to float, !dbg !22
  %64 = bitcast i32 %23 to float, !dbg !20
  %65 = fmul float %41, %.0.i, !dbg !41
  %66 = fmul float %65, %64, !dbg !42
  %67 = fadd float %66, %63, !dbg !43
  %68 = fcmp olt float %67, 0.000000e+00, !dbg !44
  %69 = select i1 %68, float 0.000000e+00, float %67, !dbg !48
  %70 = and i32 %10, 56, !dbg !49
  %71 = icmp eq i32 %70, 0, !dbg !49
  %72 = bitcast float %26 to i32, !dbg !49
  %73 = and i1 %71, %9, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %15, i1 %73) #4, !dbg !49
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !50
  %75 = bitcast float %69 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %75, ptr addrspace(1) %74, i1 %73) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py", directory: "inductor_cache/7j")
!4 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_layer_norm_relu_3", linkageName: "triton_per_fused_convolution_native_layer_norm_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 41, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 46, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 40, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 28, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 59, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 60, column: 46, scope: !7)
!50 = !DILocation(line: 61, column: 25, scope: !7)
!51 = !DILocation(line: 61, column: 44, scope: !7)
!52 = !DILocation(line: 61, column: 4, scope: !7)
