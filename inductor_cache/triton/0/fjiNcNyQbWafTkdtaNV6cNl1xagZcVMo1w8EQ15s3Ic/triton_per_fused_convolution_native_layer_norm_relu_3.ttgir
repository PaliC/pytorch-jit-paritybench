#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":40:24)
#loc25 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":48:26)
#loc41 = loc(callsite(#loc1 at #loc18))
#loc44 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_convolution_native_layer_norm_relu_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg5: i32 loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0), %arg6: i32 loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<8.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c8_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x8xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x8xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x8xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %3 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc9)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %14, %3 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc11)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc12)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = tt.addptr %17, %3 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc13)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc14)
    %20 = arith.addf %10, %13 : tensor<1x8xf32, #blocked> loc(#loc15)
    %21 = arith.select %9, %20, %cst : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc16)
    %22 = "tt.reduce"(%21) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc18)), %arg8: f32 loc(callsite(#loc1 at #loc18))):
      %42 = arith.addf %arg7, %arg8 : f32 loc(#loc47)
      tt.reduce.return %42 : f32 loc(#loc40)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %24 = arith.divf %23, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc21)
    %25 = tt.broadcast %24 : tensor<1x1xf32, #blocked> -> tensor<1x8xf32, #blocked> loc(#loc22)
    %26 = arith.subf %20, %25 : tensor<1x8xf32, #blocked> loc(#loc22)
    %27 = arith.mulf %26, %26 : tensor<1x8xf32, #blocked> loc(#loc23)
    %28 = arith.select %9, %27, %cst : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc24)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc25)), %arg8: f32 loc(callsite(#loc1 at #loc25))):
      %42 = arith.addf %arg7, %arg8 : f32 loc(#loc48)
      tt.reduce.return %42 : f32 loc(#loc43)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %31 = arith.divf %30, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc27)
    %32 = arith.addf %31, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc28)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc29)
    %34 = tt.broadcast %33 : tensor<1x1xf32, #blocked> -> tensor<1x8xf32, #blocked> loc(#loc30)
    %35 = arith.mulf %26, %34 : tensor<1x8xf32, #blocked> loc(#loc30)
    %36 = arith.mulf %35, %16 : tensor<1x8xf32, #blocked> loc(#loc31)
    %37 = arith.addf %36, %19 : tensor<1x8xf32, #blocked> loc(#loc32)
    %38 = arith.cmpf ogt, %cst, %37 : tensor<1x8xf32, #blocked> loc(#loc45)
    %39 = arith.select %38, %cst, %37 : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc46)
    tt.store %8, %20, %9 : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc36)
    %40 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc37)
    %41 = tt.addptr %40, %6 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc37)
    tt.store %41, %39, %9 : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":23:28)
#loc3 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":25:21)
#loc4 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":26:34)
#loc5 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":31:41)
#loc6 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":31:39)
#loc7 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":31:34)
#loc8 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":31:46)
#loc9 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":32:30)
#loc10 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":32:35)
#loc11 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":33:31)
#loc12 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":33:36)
#loc13 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":34:31)
#loc14 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":34:36)
#loc15 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":35:18)
#loc16 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":39:33)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":40:27)
#loc21 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":43:19)
#loc22 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":44:19)
#loc23 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":45:20)
#loc24 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":47:35)
#loc26 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":48:29)
#loc27 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":51:20)
#loc28 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":53:20)
#loc29 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":54:28)
#loc30 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":55:20)
#loc31 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":56:20)
#loc32 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":57:20)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc34 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":59:42)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc36 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":60:46)
#loc37 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":61:25)
#loc38 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":61:44)
#loc39 = loc("inductor_cache/7j/c7jtrliqvgjmgrgau73mfwahigr6cz23wnyvmlbe4ke5nri634rz.py":61:4)
#loc40 = loc(callsite(#loc17 at #loc18))
#loc42 = loc(callsite(#loc19 at #loc17))
#loc43 = loc(callsite(#loc17 at #loc25))
#loc45 = loc(callsite(#loc33 at #loc34))
#loc46 = loc(callsite(#loc35 at #loc34))
#loc47 = loc(callsite(#loc42 at #loc18))
#loc48 = loc(callsite(#loc42 at #loc25))
