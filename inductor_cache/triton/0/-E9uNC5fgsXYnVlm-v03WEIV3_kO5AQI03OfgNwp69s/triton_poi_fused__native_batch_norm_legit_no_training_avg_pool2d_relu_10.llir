; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = mul i32 %20, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = srem i32 %20, 32, !dbg !16
  %23 = sdiv i32 %19, 512, !dbg !17
  %24 = shl nsw i32 %22, 5, !dbg !18
  %25 = shl i32 %23, 11, !dbg !19
  %26 = add i32 %25, %.decomposed, !dbg !20
  %27 = add i32 %26, %24, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = add i32 %26, 16, !dbg !24
  %32 = add i32 %31, %24, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %36 = add i32 %26, 1024, !dbg !28
  %37 = add i32 %36, %24, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !31
  %41 = add i32 %26, 1040, !dbg !32
  %42 = add i32 %41, %24, !dbg !33
  %43 = sext i32 %42 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !34
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !35
  %46 = sext i32 %.decomposed to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !36
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !38
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !39
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !39
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !39
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !39
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !39
  %55 = bitcast i32 %51 to float, !dbg !39
  %56 = bitcast i32 %52 to float, !dbg !39
  %57 = bitcast i32 %53 to float, !dbg !39
  %58 = bitcast i32 %54 to float, !dbg !39
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !40
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !41
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !42
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !43
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !44
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !46
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !47
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !47
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !47
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !47
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !47
  %71 = bitcast i32 %67 to float, !dbg !47
  %72 = bitcast i32 %68 to float, !dbg !47
  %73 = bitcast i32 %69 to float, !dbg !47
  %74 = bitcast i32 %70 to float, !dbg !47
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !48
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !49
  %77 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !50
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !51
  %79 = fadd float %55, 0x3EE4F8B580000000, !dbg !52
  %80 = fadd float %56, 0x3EE4F8B580000000, !dbg !52
  %81 = fadd float %57, 0x3EE4F8B580000000, !dbg !52
  %82 = fadd float %58, 0x3EE4F8B580000000, !dbg !52
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %83, 0, !dbg !53
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %84, 0, !dbg !53
  br i1 %.not.i, label %90, label %85, !dbg !53

85:                                               ; preds = %13
  br i1 %.not1.i, label %88, label %86, !dbg !53

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

90:                                               ; preds = %13
  br i1 %.not1.i, label %93, label %91, !dbg !53

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !53
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %95, 0, !dbg !53
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !53
  br i1 %.not.i1, label %102, label %97, !dbg !53

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !53

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !53

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !53
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %107, 0, !dbg !53
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %108, 0, !dbg !53
  br i1 %.not.i6, label %114, label %109, !dbg !53

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !53

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !53

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %110, %112, %115, %117
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !53
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %119, 0, !dbg !53
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %120, 0, !dbg !53
  br i1 %.not.i11, label %126, label %121, !dbg !53

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !53

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !53

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %122, %124, %127, %129
  %.0.i13 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !53
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !54
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !54
  %135 = fadd float %71, 0x3EE4F8B580000000, !dbg !55
  %136 = fadd float %72, 0x3EE4F8B580000000, !dbg !55
  %137 = fadd float %73, 0x3EE4F8B580000000, !dbg !55
  %138 = fadd float %74, 0x3EE4F8B580000000, !dbg !55
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i16 = icmp eq i32 %139, 0, !dbg !56
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i19 = icmp eq i32 %140, 0, !dbg !56
  br i1 %.not.i16, label %146, label %141, !dbg !56

141:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %144, label %142, !dbg !56

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !56

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

__nv_sqrtf.exit20:                                ; preds = %142, %144, %147, %149
  %.0.i18 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !56
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i21 = icmp eq i32 %151, 0, !dbg !56
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i24 = icmp eq i32 %152, 0, !dbg !56
  br i1 %.not.i21, label %158, label %153, !dbg !56

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !56

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !56

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

__nv_sqrtf.exit25:                                ; preds = %154, %156, %159, %161
  %.0.i23 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !56
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i26 = icmp eq i32 %163, 0, !dbg !56
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i29 = icmp eq i32 %164, 0, !dbg !56
  br i1 %.not.i26, label %170, label %165, !dbg !56

165:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %168, label %166, !dbg !56

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit30, !dbg !56

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit30, !dbg !56

170:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %173, label %171, !dbg !56

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit30, !dbg !56

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit30, !dbg !56

__nv_sqrtf.exit30:                                ; preds = %166, %168, %171, %173
  %.0.i28 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !56
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i31 = icmp eq i32 %175, 0, !dbg !56
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i34 = icmp eq i32 %176, 0, !dbg !56
  br i1 %.not.i31, label %182, label %177, !dbg !56

177:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %180, label %178, !dbg !56

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit35, !dbg !56

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit35, !dbg !56

182:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %185, label %183, !dbg !56

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit35, !dbg !56

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit35, !dbg !56

__nv_sqrtf.exit35:                                ; preds = %178, %180, %183, %185
  %.0.i33 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !56
  %187 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %189 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !35
  %191 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !45
  %192 = bitcast i32 %191 to float, !dbg !45
  %193 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !27
  %194 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %195 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !31
  %196 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !35
  %197 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !45
  %198 = bitcast i32 %197 to float, !dbg !45
  %199 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !27
  %200 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %201 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !35
  %203 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !45
  %204 = bitcast i32 %203 to float, !dbg !45
  %205 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !27
  %206 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %207 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !31
  %208 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !35
  %209 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !45
  %210 = bitcast i32 %209 to float, !dbg !45
  %211 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !41
  %213 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !37
  %215 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !41
  %216 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !43
  %217 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !37
  %218 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !41
  %219 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !43
  %220 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !41
  %222 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !43
  %223 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !27
  %224 = insertelement <4 x i32> %223, i32 %199, i64 1, !dbg !27
  %225 = insertelement <4 x i32> %224, i32 %193, i64 2, !dbg !27
  %226 = insertelement <4 x i32> %225, i32 %187, i64 3, !dbg !27
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !27
  %228 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !23
  %229 = insertelement <4 x i32> %228, i32 %200, i64 1, !dbg !23
  %230 = insertelement <4 x i32> %229, i32 %194, i64 2, !dbg !23
  %231 = insertelement <4 x i32> %230, i32 %188, i64 3, !dbg !23
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !23
  %233 = fadd <4 x float> %232, %227, !dbg !57
  %234 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !31
  %235 = insertelement <4 x i32> %234, i32 %201, i64 1, !dbg !31
  %236 = insertelement <4 x i32> %235, i32 %195, i64 2, !dbg !31
  %237 = insertelement <4 x i32> %236, i32 %189, i64 3, !dbg !31
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !31
  %239 = fadd <4 x float> %233, %238, !dbg !58
  %240 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !35
  %241 = insertelement <4 x i32> %240, i32 %202, i64 1, !dbg !35
  %242 = insertelement <4 x i32> %241, i32 %196, i64 2, !dbg !35
  %243 = insertelement <4 x i32> %242, i32 %190, i64 3, !dbg !35
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !35
  %245 = fadd <4 x float> %239, %244, !dbg !59
  %246 = fmul <4 x float> %245, splat (float 2.500000e-01), !dbg !60
  %247 = extractelement <4 x float> %246, i64 3, !dbg !61
  %248 = fsub float %247, %192, !dbg !62
  %249 = extractelement <4 x float> %246, i64 2, !dbg !61
  %250 = fsub float %249, %198, !dbg !62
  %251 = extractelement <4 x float> %246, i64 1, !dbg !61
  %252 = fsub float %251, %204, !dbg !62
  %253 = extractelement <4 x float> %246, i64 0, !dbg !61
  %254 = fsub float %253, %210, !dbg !62
  %255 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !37
  %256 = insertelement <4 x i32> %255, i32 %217, i64 1, !dbg !37
  %257 = insertelement <4 x i32> %256, i32 %214, i64 2, !dbg !37
  %258 = insertelement <4 x i32> %257, i32 %211, i64 3, !dbg !37
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !37
  %260 = fsub <4 x float> %246, %259, !dbg !63
  %261 = insertelement <4 x float> poison, float %131, i64 0, !dbg !64
  %262 = insertelement <4 x float> %261, float %132, i64 1, !dbg !64
  %263 = insertelement <4 x float> %262, float %133, i64 2, !dbg !64
  %264 = insertelement <4 x float> %263, float %134, i64 3, !dbg !64
  %265 = fmul <4 x float> %260, %264, !dbg !64
  %266 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !41
  %267 = insertelement <4 x i32> %266, i32 %218, i64 1, !dbg !41
  %268 = insertelement <4 x i32> %267, i32 %215, i64 2, !dbg !41
  %269 = insertelement <4 x i32> %268, i32 %212, i64 3, !dbg !41
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !41
  %271 = fmul <4 x float> %265, %270, !dbg !65
  %272 = insertelement <4 x i32> poison, i32 %222, i64 0, !dbg !43
  %273 = insertelement <4 x i32> %272, i32 %219, i64 1, !dbg !43
  %274 = insertelement <4 x i32> %273, i32 %216, i64 2, !dbg !43
  %275 = insertelement <4 x i32> %274, i32 %213, i64 3, !dbg !43
  %276 = bitcast <4 x i32> %275 to <4 x float>, !dbg !43
  %277 = fadd <4 x float> %271, %276, !dbg !66
  %278 = fcmp olt <4 x float> %277, zeroinitializer, !dbg !67
  %279 = extractelement <4 x i1> %278, i64 3, !dbg !71
  %280 = extractelement <4 x i1> %278, i64 2, !dbg !71
  %281 = extractelement <4 x i1> %278, i64 1, !dbg !71
  %282 = extractelement <4 x i1> %278, i64 0, !dbg !71
  %283 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !51
  %284 = bitcast i32 %283 to float, !dbg !51
  %285 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !51
  %286 = bitcast i32 %285 to float, !dbg !51
  %287 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !51
  %288 = bitcast i32 %287 to float, !dbg !51
  %289 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !51
  %290 = bitcast i32 %289 to float, !dbg !51
  %291 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !49
  %292 = bitcast i32 %291 to float, !dbg !49
  %293 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !49
  %294 = bitcast i32 %293 to float, !dbg !49
  %295 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !49
  %296 = bitcast i32 %295 to float, !dbg !49
  %297 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !49
  %298 = bitcast i32 %297 to float, !dbg !49
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !72
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !72
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !72
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !72
  %303 = fmul float %254, %299, !dbg !73
  %304 = fmul float %252, %300, !dbg !73
  %305 = fmul float %250, %301, !dbg !73
  %306 = fmul float %248, %302, !dbg !73
  %307 = fmul float %303, %298, !dbg !74
  %308 = fmul float %304, %296, !dbg !74
  %309 = fmul float %305, %294, !dbg !74
  %310 = fmul float %306, %292, !dbg !74
  %311 = fadd float %307, %290, !dbg !75
  %312 = fadd float %308, %288, !dbg !75
  %313 = fadd float %309, %286, !dbg !75
  %314 = fadd float %310, %284, !dbg !75
  %315 = sext i32 %19 to i64, !dbg !76
  %316 = getelementptr float, ptr addrspace(1) %9, i64 %315, !dbg !76
  %317 = bitcast float %253 to i32, !dbg !61
  %318 = bitcast float %251 to i32, !dbg !61
  %319 = bitcast float %249 to i32, !dbg !61
  %320 = bitcast float %247 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %316, i1 true) #3, !dbg !61
  %321 = getelementptr float, ptr addrspace(1) %10, i64 %315, !dbg !77
  %bc = bitcast <4 x float> %277 to <4 x i32>, !dbg !78
  %322 = extractelement <4 x i32> %bc, i64 0, !dbg !78
  %323 = select i1 %282, i32 0, i32 %322, !dbg !71
  %bc36 = bitcast <4 x float> %277 to <4 x i32>, !dbg !78
  %324 = extractelement <4 x i32> %bc36, i64 1, !dbg !78
  %325 = select i1 %281, i32 0, i32 %324, !dbg !71
  %bc37 = bitcast <4 x float> %277 to <4 x i32>, !dbg !78
  %326 = extractelement <4 x i32> %bc37, i64 2, !dbg !78
  %327 = select i1 %280, i32 0, i32 %326, !dbg !71
  %bc38 = bitcast <4 x float> %277 to <4 x i32>, !dbg !78
  %328 = extractelement <4 x i32> %bc38, i64 3, !dbg !78
  %329 = select i1 %279, i32 0, i32 %328, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %323, i32 %325, i32 %327, i32 %329, ptr addrspace(1) %321, i1 true) #3, !dbg !78
  %330 = getelementptr float, ptr addrspace(1) %11, i64 %315, !dbg !79
  %331 = bitcast float %311 to i32, !dbg !80
  %332 = bitcast float %312 to i32, !dbg !80
  %333 = bitcast float %313 to i32, !dbg !80
  %334 = bitcast float %314 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %330, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdycgqde2izz2nyw6poyzgeuqpdhb3bqe7rf6gfcq5pkm3qlwwc3.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 38, scope: !7)
!19 = !DILocation(line: 28, column: 48, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 43, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 53, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 58, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 60, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 50, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 60, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 36, scope: !7)
!52 = !DILocation(line: 47, column: 20, scope: !7)
!53 = !DILocation(line: 48, column: 27, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 27, scope: !7)
!57 = !DILocation(line: 40, column: 18, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 42, column: 18, scope: !7)
!60 = !DILocation(line: 44, column: 18, scope: !7)
!61 = !DILocation(line: 66, column: 36, scope: !7)
!62 = !DILocation(line: 58, column: 19, scope: !7)
!63 = !DILocation(line: 45, column: 19, scope: !7)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 55, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 57, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 63, column: 20, scope: !7)
!74 = !DILocation(line: 64, column: 20, scope: !7)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 25, scope: !7)
!77 = !DILocation(line: 67, column: 25, scope: !7)
!78 = !DILocation(line: 67, column: 37, scope: !7)
!79 = !DILocation(line: 68, column: 25, scope: !7)
!80 = !DILocation(line: 68, column: 37, scope: !7)
!81 = !DILocation(line: 68, column: 4, scope: !7)
