; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/2j/c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/2j/c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_div_gather_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %11 = shl i32 %10, 8, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 1, !dbg !14
  %14 = and i32 %13, 254, !dbg !14
  %15 = or disjoint i32 %11, %14, !dbg !15
  %16 = icmp slt i32 %15, 256, !dbg !16
  %17 = sdiv i32 %15, 16, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %18 = sdiv i32 %.frozen, 4, !dbg !18
  %19 = sext i32 %17 to i64, !dbg !19
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #5, !dbg !20
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #5, !dbg !20
  %23 = sext i32 %18 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %16) #5, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %16) #5, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !24
  %30 = lshr i64 %21, 61, !dbg !25
  %31 = and i64 %30, 4, !dbg !25
  %32 = add i64 %31, %21, !dbg !25
  %33 = icmp ugt i64 %32, 3, !dbg !26
  %.not1 = and i1 %16, %33, !dbg !27
  br i1 %.not1, label %34, label %35, !dbg !27

34:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

35:                                               ; preds = %9
  %36 = sdiv i32 %15, 64, !dbg !28
  %37 = srem i32 %18, 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %38 = shl i64 %32, 2, !dbg !30
  %39 = sext i32 %37 to i64, !dbg !31
  %40 = shl nsw i32 %36, 4, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !34
  %43 = getelementptr i64, ptr addrspace(1) %42, i64 %39, !dbg !34
  %44 = getelementptr i64, ptr addrspace(1) %43, i64 %41, !dbg !34
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %16) #5, !dbg !35
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %16) #5, !dbg !35
  %47 = lshr i64 %45, 61, !dbg !36
  %48 = and i64 %47, 4, !dbg !36
  %49 = add i64 %48, %45, !dbg !36
  %50 = icmp ugt i64 %49, 3, !dbg !37
  %.not2 = and i1 %16, %50, !dbg !38
  br i1 %.not2, label %51, label %52, !dbg !38

51:                                               ; preds = %35
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 42, ptr nonnull @assertFunc_1, i64 1), !dbg !38
  unreachable, !dbg !38

52:                                               ; preds = %35
  %53 = bitcast i32 %29 to float, !dbg !24
  %54 = bitcast i32 %28 to float, !dbg !24
  %55 = bitcast i32 %26 to float, !dbg !22
  %56 = bitcast i32 %25 to float, !dbg !22
  %57 = mul i32 %18, 4, !dbg !39
  %.decomposed = sub i32 %.frozen, %57, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %narrow = add nsw i32 %40, %.decomposed, !dbg !40
  %58 = sext i32 %narrow to i64, !dbg !40
  %59 = add i64 %38, %58, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !42
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !43
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !43
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !43
  %64 = bitcast i32 %62 to float, !dbg !43
  %65 = bitcast i32 %63 to float, !dbg !43
  %66 = shl i64 %49, 2, !dbg !44
  %67 = add i64 %66, %58, !dbg !45
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !46
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %16) #5, !dbg !47
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !47
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !47
  %72 = bitcast i32 %70 to float, !dbg !47
  %73 = bitcast i32 %71 to float, !dbg !47
  %74 = fsub float %64, %72, !dbg !48
  %75 = fsub float %65, %73, !dbg !48
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %76, 0, !dbg !49
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !49
  %.not1.i = icmp eq i32 %77, 0, !dbg !49
  br i1 %.not.i, label %83, label %78, !dbg !49

78:                                               ; preds = %52
  br i1 %.not1.i, label %81, label %79, !dbg !49

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

83:                                               ; preds = %52
  br i1 %.not1.i, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !49
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i3 = icmp eq i32 %88, 0, !dbg !49
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !49
  %.not1.i6 = icmp eq i32 %89, 0, !dbg !49
  br i1 %.not.i3, label %95, label %90, !dbg !49

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %93, label %91, !dbg !49

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #5, !dbg !49
  br label %__nv_sqrtf.exit7, !dbg !49

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #5, !dbg !49
  br label %__nv_sqrtf.exit7, !dbg !49

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #5, !dbg !49
  br label %__nv_sqrtf.exit7, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #5, !dbg !49
  br label %__nv_sqrtf.exit7, !dbg !49

__nv_sqrtf.exit7:                                 ; preds = %91, %93, %96, %98
  %.0.i5 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !49
  %100 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !50
  %101 = fcmp ogt float %.0.i5, 0x3D71979980000000, !dbg !50
  %102 = fcmp uno float %.0.i, 0.000000e+00, !dbg !54
  %103 = fcmp uno float %.0.i5, 0.000000e+00, !dbg !54
  %104 = or i1 %100, %102, !dbg !55
  %105 = or i1 %101, %103, !dbg !55
  %106 = select i1 %104, float %.0.i, float 0x3D71979980000000, !dbg !56
  %107 = select i1 %105, float %.0.i5, float 0x3D71979980000000, !dbg !56
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %106) #5, !dbg !57
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %107) #5, !dbg !57
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !58
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %16) #5, !dbg !59
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !60
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %112, i1 %16) #5, !dbg !61
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i8 = icmp eq i32 %114, 0, !dbg !62
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %.not1.i11 = icmp eq i32 %115, 0, !dbg !62
  br i1 %.not.i8, label %121, label %116, !dbg !62

116:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %119, label %117, !dbg !62

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #5, !dbg !62
  br label %__nv_sqrtf.exit12, !dbg !62

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #5, !dbg !62
  br label %__nv_sqrtf.exit12, !dbg !62

121:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %124, label %122, !dbg !62

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #5, !dbg !62
  br label %__nv_sqrtf.exit12, !dbg !62

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #5, !dbg !62
  br label %__nv_sqrtf.exit12, !dbg !62

__nv_sqrtf.exit12:                                ; preds = %117, %119, %122, %124
  %.0.i10 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !62
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i13 = icmp eq i32 %126, 0, !dbg !62
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %.not1.i16 = icmp eq i32 %127, 0, !dbg !62
  br i1 %.not.i13, label %133, label %128, !dbg !62

128:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %131, label %129, !dbg !62

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #5, !dbg !62
  br label %__nv_sqrtf.exit17, !dbg !62

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #5, !dbg !62
  br label %__nv_sqrtf.exit17, !dbg !62

133:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %136, label %134, !dbg !62

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #5, !dbg !62
  br label %__nv_sqrtf.exit17, !dbg !62

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #5, !dbg !62
  br label %__nv_sqrtf.exit17, !dbg !62

__nv_sqrtf.exit17:                                ; preds = %129, %131, %134, %136
  %.0.i15 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !62
  %138 = extractvalue { i32, i32 } %111, 1, !dbg !59
  %139 = bitcast i32 %138 to float, !dbg !59
  %140 = extractvalue { i32, i32 } %113, 1, !dbg !61
  %141 = bitcast i32 %140 to float, !dbg !61
  %142 = fsub float %139, %141, !dbg !63
  %143 = extractvalue { i32, i32 } %111, 0, !dbg !59
  %144 = bitcast i32 %143 to float, !dbg !59
  %145 = extractvalue { i32, i32 } %113, 0, !dbg !61
  %146 = bitcast i32 %145 to float, !dbg !61
  %147 = fsub float %144, %146, !dbg !63
  %148 = fcmp ogt float %.0.i10, 0x3D71979980000000, !dbg !64
  %149 = fcmp ogt float %.0.i15, 0x3D71979980000000, !dbg !64
  %150 = fcmp uno float %.0.i10, 0.000000e+00, !dbg !66
  %151 = fcmp uno float %.0.i15, 0.000000e+00, !dbg !66
  %152 = or i1 %148, %150, !dbg !67
  %153 = or i1 %149, %151, !dbg !67
  %154 = select i1 %152, float %.0.i10, float 0x3D71979980000000, !dbg !68
  %155 = select i1 %153, float %.0.i15, float 0x3D71979980000000, !dbg !68
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %154) #5, !dbg !69
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %155) #5, !dbg !69
  %158 = sext i32 %15 to i64, !dbg !70
  %159 = getelementptr float, ptr addrspace(1) %6, i64 %158, !dbg !70
  %160 = bitcast float %108 to i32, !dbg !71
  %161 = bitcast float %109 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %159, i1 %16) #5, !dbg !71
  %162 = getelementptr float, ptr addrspace(1) %7, i64 %158, !dbg !72
  %163 = bitcast float %156 to i32, !dbg !73
  %164 = bitcast float %157 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %164, ptr addrspace(1) %162, i1 %16) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py", directory: "inductor_cache/2j")
!4 = !{ptr @triton_poi_fused_div_gather_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_gather_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_div_gather_sub_8", linkageName: "triton_poi_fused_div_gather_sub_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 21, scope: !11)
!19 = !DILocation(line: 30, column: 30, scope: !11)
!20 = !DILocation(line: 30, column: 35, scope: !11)
!21 = !DILocation(line: 31, column: 31, scope: !11)
!22 = !DILocation(line: 31, column: 36, scope: !11)
!23 = !DILocation(line: 32, column: 31, scope: !11)
!24 = !DILocation(line: 32, column: 36, scope: !11)
!25 = !DILocation(line: 36, column: 32, scope: !11)
!26 = !DILocation(line: 37, column: 37, scope: !11)
!27 = !DILocation(line: 37, column: 60, scope: !11)
!28 = !DILocation(line: 26, column: 19, scope: !11)
!29 = !DILocation(line: 25, column: 26, scope: !11)
!30 = !DILocation(line: 38, column: 37, scope: !11)
!31 = !DILocation(line: 38, column: 35, scope: !11)
!32 = !DILocation(line: 38, column: 47, scope: !11)
!33 = !DILocation(line: 38, column: 44, scope: !11)
!34 = !DILocation(line: 38, column: 30, scope: !11)
!35 = !DILocation(line: 38, column: 52, scope: !11)
!36 = !DILocation(line: 41, column: 32, scope: !11)
!37 = !DILocation(line: 42, column: 37, scope: !11)
!38 = !DILocation(line: 42, column: 60, scope: !11)
!39 = !DILocation(line: 27, column: 19, scope: !11)
!40 = !DILocation(line: 43, column: 36, scope: !11)
!41 = !DILocation(line: 43, column: 45, scope: !11)
!42 = !DILocation(line: 43, column: 31, scope: !11)
!43 = !DILocation(line: 43, column: 53, scope: !11)
!44 = !DILocation(line: 44, column: 38, scope: !11)
!45 = !DILocation(line: 44, column: 45, scope: !11)
!46 = !DILocation(line: 44, column: 31, scope: !11)
!47 = !DILocation(line: 44, column: 53, scope: !11)
!48 = !DILocation(line: 45, column: 20, scope: !11)
!49 = !DILocation(line: 46, column: 27, scope: !11)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 48, column: 42, scope: !11)
!54 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 49, column: 20, scope: !11)
!58 = !DILocation(line: 50, column: 31, scope: !11)
!59 = !DILocation(line: 50, column: 53, scope: !11)
!60 = !DILocation(line: 51, column: 31, scope: !11)
!61 = !DILocation(line: 51, column: 53, scope: !11)
!62 = !DILocation(line: 53, column: 27, scope: !11)
!63 = !DILocation(line: 52, column: 20, scope: !11)
!64 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !65)
!65 = !DILocation(line: 54, column: 42, scope: !11)
!66 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !65)
!69 = !DILocation(line: 55, column: 20, scope: !11)
!70 = !DILocation(line: 56, column: 25, scope: !11)
!71 = !DILocation(line: 56, column: 37, scope: !11)
!72 = !DILocation(line: 57, column: 25, scope: !11)
!73 = !DILocation(line: 57, column: 37, scope: !11)
!74 = !DILocation(line: 57, column: 4, scope: !11)
