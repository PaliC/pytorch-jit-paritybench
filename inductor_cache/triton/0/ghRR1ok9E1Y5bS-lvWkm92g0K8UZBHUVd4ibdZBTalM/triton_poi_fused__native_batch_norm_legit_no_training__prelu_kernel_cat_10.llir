; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = mul i32 %19, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %18, 16, !dbg !15
  %22 = sdiv i32 %17, 16384, !dbg !16
  %23 = srem i32 %19, 1024, !dbg !17
  %24 = sext i32 %.decomposed to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !26
  %38 = icmp slt i32 %.decomposed, 13, !dbg !27
  %39 = icmp slt i32 %21, 13, !dbg !27
  %40 = mul nsw i32 %19, 13, !dbg !28
  %41 = add nsw i32 %40, %.decomposed, !dbg !29
  %42 = add nsw i32 %40, %21, !dbg !29
  %43 = sext i32 %41 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !30
  %45 = sext i32 %42 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %38, i32 0, i1 %38) #3, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %39, i32 0, i1 %39) #3, !dbg !31
  %49 = icmp sgt i32 %.decomposed, 12, !dbg !32
  %50 = icmp sgt i32 %21, 12, !dbg !32
  %51 = shl nsw i32 %.decomposed, 10, !dbg !33
  %52 = shl nsw i32 %21, 10, !dbg !33
  %53 = mul nsw i32 %22, 3072, !dbg !34
  %54 = add nsw i32 %23, -13312, !dbg !33
  %55 = add nsw i32 %54, %51, !dbg !35
  %56 = add nsw i32 %55, %53, !dbg !36
  %57 = add nsw i32 %54, %52, !dbg !35
  %58 = add nsw i32 %57, %53, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !37
  %61 = sext i32 %58 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %49, i32 0, i1 %49) #3, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %50, i32 0, i1 %50) #3, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %49, i32 0, i1 %49) #3, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %50, i32 0, i1 %50) #3, !dbg !40
  %69 = fadd float %31, 0x3EE4F8B580000000, !dbg !41
  %70 = fadd float %32, 0x3EE4F8B580000000, !dbg !41
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %71, 0, !dbg !42
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %72, 0, !dbg !42
  br i1 %.not.i, label %78, label %73, !dbg !42

73:                                               ; preds = %11
  br i1 %.not1.i, label %76, label %74, !dbg !42

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

78:                                               ; preds = %11
  br i1 %.not1.i, label %81, label %79, !dbg !42

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !42
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %83, 0, !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !42
  br i1 %.not.i1, label %90, label %85, !dbg !42

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !42

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !42

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !42
  %95 = bitcast i32 %48 to float, !dbg !31
  %96 = bitcast i32 %68 to float, !dbg !40
  %97 = bitcast i32 %64 to float, !dbg !38
  %98 = fsub float %96, %97, !dbg !43
  %99 = sdiv i32 %17, 512, !dbg !44
  %100 = srem i32 %99, 32, !dbg !45
  %101 = sitofp i32 %100 to float, !dbg !46
  %102 = fadd float %101, 5.000000e-01, !dbg !47
  %103 = fadd float %102, -5.000000e-01, !dbg !48
  %104 = fcmp ogt float %103, 0.000000e+00, !dbg !49
  %105 = select i1 %104, float %103, float 0.000000e+00, !dbg !53
  %106 = fptosi float %105 to i32, !dbg !54
  %107 = sitofp i32 %106 to float, !dbg !55
  %108 = fsub float %105, %107, !dbg !56
  %109 = fcmp ogt float %108, 0.000000e+00, !dbg !57
  %110 = select i1 %109, float %108, float 0.000000e+00, !dbg !59
  %111 = fcmp olt float %110, 1.000000e+00, !dbg !60
  %112 = select i1 %111, float %110, float 1.000000e+00, !dbg !62
  %113 = fmul float %98, %112, !dbg !63
  %114 = fadd float %113, %97, !dbg !64
  %115 = select i1 %39, float %95, float %114, !dbg !65
  %116 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %117 = bitcast i32 %116 to float, !dbg !19
  %118 = fsub float %115, %117, !dbg !66
  %119 = bitcast i32 %47 to float, !dbg !31
  %120 = bitcast i32 %67 to float, !dbg !40
  %121 = bitcast i32 %63 to float, !dbg !38
  %122 = fsub float %120, %121, !dbg !43
  %123 = fmul float %122, %112, !dbg !63
  %124 = fadd float %123, %121, !dbg !64
  %125 = select i1 %38, float %119, float %124, !dbg !65
  %126 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %127 = bitcast i32 %126 to float, !dbg !19
  %128 = fsub float %125, %127, !dbg !66
  %129 = bitcast i32 %37 to float, !dbg !26
  %130 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %140 = fmul float %128, %138, !dbg !68
  %141 = fmul float %118, %139, !dbg !68
  %142 = fmul float %140, %137, !dbg !69
  %143 = fmul float %141, %135, !dbg !69
  %144 = fadd float %142, %133, !dbg !70
  %145 = fadd float %143, %131, !dbg !70
  %146 = fcmp ogt float %144, 0.000000e+00, !dbg !71
  %147 = fcmp ogt float %145, 0.000000e+00, !dbg !71
  %148 = fmul float %144, %129, !dbg !72
  %149 = fmul float %145, %129, !dbg !72
  %150 = select i1 %146, float %144, float %148, !dbg !73
  %151 = select i1 %147, float %145, float %149, !dbg !73
  %152 = sext i32 %17 to i64, !dbg !74
  %153 = getelementptr float, ptr addrspace(1) %9, i64 %152, !dbg !74
  %154 = bitcast float %125 to i32, !dbg !75
  %155 = bitcast float %115 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 true) #3, !dbg !75
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !76
  %157 = bitcast float %150 to i32, !dbg !77
  %158 = bitcast float %151 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 true) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpbubi2oejliuymqamkkz7enj75w25fcm3h7vkk6iwk65jcbvazb.py", directory: "inductor_cache/pb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 31, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 31, column: 31, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 32, column: 31, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 20, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 33, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 30, scope: !7)
!31 = !DILocation(line: 41, column: 45, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 60, scope: !7)
!35 = !DILocation(line: 45, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 55, scope: !7)
!37 = !DILocation(line: 45, column: 30, scope: !7)
!38 = !DILocation(line: 45, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 66, scope: !7)
!41 = !DILocation(line: 69, column: 20, scope: !7)
!42 = !DILocation(line: 70, column: 27, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 28, column: 21, scope: !7)
!45 = !DILocation(line: 28, column: 28, scope: !7)
!46 = !DILocation(line: 49, column: 21, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 56, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 57, column: 21, scope: !7)
!55 = !DILocation(line: 58, column: 21, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !58)
!58 = !DILocation(line: 60, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !58)
!60 = !DILocation(line: 110, column: 15, scope: !50, inlinedAt: !61)
!61 = !DILocation(line: 61, column: 42, scope: !7)
!62 = !DILocation(line: 113, column: 29, scope: !50, inlinedAt: !61)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 19, scope: !7)
!65 = !DILocation(line: 66, column: 33, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 81, column: 35, scope: !7)
!74 = !DILocation(line: 82, column: 25, scope: !7)
!75 = !DILocation(line: 82, column: 37, scope: !7)
!76 = !DILocation(line: 83, column: 28, scope: !7)
!77 = !DILocation(line: 83, column: 40, scope: !7)
!78 = !DILocation(line: 83, column: 4, scope: !7)
