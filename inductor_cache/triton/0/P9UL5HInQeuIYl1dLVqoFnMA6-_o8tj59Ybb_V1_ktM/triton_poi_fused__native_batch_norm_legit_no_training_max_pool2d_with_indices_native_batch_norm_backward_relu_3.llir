; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %19 = sdiv i32 %.frozen, 32, !dbg !14
  %20 = mul i32 %19, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %15, 32, !dbg !15
  %22 = srem i32 %16, 32, !dbg !15
  %23 = srem i32 %17, 32, !dbg !15
  %24 = sdiv i32 %18, 32, !dbg !14
  %25 = sdiv i32 %14, 1024, !dbg !16
  %26 = sdiv i32 %18, 1024, !dbg !16
  %27 = srem i32 %25, 52, !dbg !17
  %28 = srem i32 %26, 52, !dbg !17
  %29 = shl nsw i32 %.decomposed, 1, !dbg !18
  %30 = shl nsw i32 %21, 1, !dbg !18
  %31 = shl nsw i32 %22, 1, !dbg !18
  %32 = shl nsw i32 %23, 1, !dbg !18
  %33 = shl i32 %19, 7, !dbg !19
  %34 = shl i32 %24, 7, !dbg !19
  %35 = add i32 %29, %33, !dbg !20
  %36 = add i32 %33, %30, !dbg !20
  %37 = add i32 %33, %31, !dbg !20
  %38 = add i32 %33, %32, !dbg !20
  %39 = add i32 %29, %34, !dbg !20
  %40 = add i32 %30, %34, !dbg !20
  %41 = add i32 %31, %34, !dbg !20
  %42 = add i32 %32, %34, !dbg !20
  %43 = sext i32 %35 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = sext i32 %36 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = sext i32 %37 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !21
  %49 = sext i32 %38 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !21
  %51 = sext i32 %39 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %40 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %41 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %42 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !22
  %67 = or disjoint i32 %35, 1, !dbg !23
  %68 = or disjoint i32 %36, 1, !dbg !23
  %69 = or disjoint i32 %37, 1, !dbg !23
  %70 = or disjoint i32 %38, 1, !dbg !23
  %71 = or disjoint i32 %39, 1, !dbg !23
  %72 = or disjoint i32 %40, 1, !dbg !23
  %73 = or disjoint i32 %41, 1, !dbg !23
  %74 = or disjoint i32 %42, 1, !dbg !23
  %75 = sext i32 %67 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %68 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %69 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = sext i32 %70 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !24
  %83 = sext i32 %71 to i64, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !24
  %85 = sext i32 %72 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = sext i32 %73 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = sext i32 %74 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !25
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !25
  %99 = or disjoint i32 %33, 64, !dbg !26
  %100 = add i32 %99, %29, !dbg !27
  %101 = add i32 %99, %30, !dbg !27
  %102 = add i32 %99, %31, !dbg !27
  %103 = add i32 %99, %32, !dbg !27
  %104 = or disjoint i32 %34, 64, !dbg !26
  %105 = add i32 %104, %29, !dbg !27
  %106 = add i32 %104, %30, !dbg !27
  %107 = add i32 %104, %31, !dbg !27
  %108 = add i32 %104, %32, !dbg !27
  %109 = sext i32 %100 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !28
  %111 = sext i32 %101 to i64, !dbg !28
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !28
  %113 = sext i32 %102 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !28
  %115 = sext i32 %103 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !28
  %117 = sext i32 %105 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !28
  %119 = sext i32 %106 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !28
  %121 = sext i32 %107 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !28
  %123 = sext i32 %108 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !29
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !29
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !29
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !29
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !29
  %133 = or disjoint i32 %33, 65, !dbg !30
  %134 = add i32 %133, %29, !dbg !31
  %135 = add i32 %133, %30, !dbg !31
  %136 = add i32 %133, %31, !dbg !31
  %137 = add i32 %133, %32, !dbg !31
  %138 = or disjoint i32 %34, 65, !dbg !30
  %139 = add i32 %138, %29, !dbg !31
  %140 = add i32 %138, %30, !dbg !31
  %141 = add i32 %138, %31, !dbg !31
  %142 = add i32 %138, %32, !dbg !31
  %143 = sext i32 %134 to i64, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !32
  %145 = sext i32 %135 to i64, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !32
  %147 = sext i32 %136 to i64, !dbg !32
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !32
  %149 = sext i32 %137 to i64, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !32
  %151 = sext i32 %139 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !32
  %153 = sext i32 %140 to i64, !dbg !32
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !32
  %155 = sext i32 %141 to i64, !dbg !32
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !32
  %157 = sext i32 %142 to i64, !dbg !32
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !33
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !33
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !33
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #3, !dbg !33
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !33
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #3, !dbg !33
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !33
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #3, !dbg !33
  %167 = sext i32 %27 to i64, !dbg !34
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !34
  %169 = sext i32 %28 to i64, !dbg !34
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #3, !dbg !35
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #3, !dbg !35
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #3, !dbg !35
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #3, !dbg !35
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !35
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !35
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !35
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !35
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !36
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !36
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !37
  %182 = bitcast i32 %181 to float, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !37
  %184 = bitcast i32 %183 to float, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !37
  %186 = bitcast i32 %185 to float, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !37
  %190 = bitcast i32 %189 to float, !dbg !37
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !37
  %192 = bitcast i32 %191 to float, !dbg !37
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !37
  %194 = bitcast i32 %193 to float, !dbg !37
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !37
  %196 = bitcast i32 %195 to float, !dbg !37
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %167, !dbg !38
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !38
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #3, !dbg !39
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #3, !dbg !39
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #3, !dbg !39
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #3, !dbg !39
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #3, !dbg !39
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #3, !dbg !39
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #3, !dbg !39
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #3, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %167, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %4, i64 %169, !dbg !40
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !41
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !41
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !41
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !41
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #3, !dbg !41
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #3, !dbg !41
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #3, !dbg !41
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #3, !dbg !41
  %217 = fadd float %182, 0x3EE4F8B580000000, !dbg !42
  %218 = fadd float %184, 0x3EE4F8B580000000, !dbg !42
  %219 = fadd float %186, 0x3EE4F8B580000000, !dbg !42
  %220 = fadd float %188, 0x3EE4F8B580000000, !dbg !42
  %221 = fadd float %190, 0x3EE4F8B580000000, !dbg !42
  %222 = fadd float %192, 0x3EE4F8B580000000, !dbg !42
  %223 = fadd float %194, 0x3EE4F8B580000000, !dbg !42
  %224 = fadd float %196, 0x3EE4F8B580000000, !dbg !42
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %225, 0, !dbg !43
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %226, 0, !dbg !43
  br i1 %.not.i, label %232, label %227, !dbg !43

227:                                              ; preds = %8
  br i1 %.not1.i, label %230, label %228, !dbg !43

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

232:                                              ; preds = %8
  br i1 %.not1.i, label %235, label %233, !dbg !43

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %228, %230, %233, %235
  %.0.i = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !43
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %237, 0, !dbg !43
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %238, 0, !dbg !43
  br i1 %.not.i1, label %244, label %239, !dbg !43

239:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %242, label %240, !dbg !43

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

244:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %247, label %245, !dbg !43

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %240, %242, %245, %247
  %.0.i3 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !43
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %249, 0, !dbg !43
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %250, 0, !dbg !43
  br i1 %.not.i6, label %256, label %251, !dbg !43

251:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %254, label %252, !dbg !43

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

256:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %259, label %257, !dbg !43

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %252, %254, %257, %259
  %.0.i8 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !43
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %261, 0, !dbg !43
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %262, 0, !dbg !43
  br i1 %.not.i11, label %268, label %263, !dbg !43

263:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %266, label %264, !dbg !43

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

268:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %271, label %269, !dbg !43

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %264, %266, %269, %271
  %.0.i13 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !43
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i16 = icmp eq i32 %273, 0, !dbg !43
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i19 = icmp eq i32 %274, 0, !dbg !43
  br i1 %.not.i16, label %280, label %275, !dbg !43

275:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %278, label %276, !dbg !43

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

280:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %283, label %281, !dbg !43

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

__nv_sqrtf.exit20:                                ; preds = %276, %278, %281, %283
  %.0.i18 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !43
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i21 = icmp eq i32 %285, 0, !dbg !43
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i24 = icmp eq i32 %286, 0, !dbg !43
  br i1 %.not.i21, label %292, label %287, !dbg !43

287:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %290, label %288, !dbg !43

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

292:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %295, label %293, !dbg !43

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

__nv_sqrtf.exit25:                                ; preds = %288, %290, %293, %295
  %.0.i23 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !43
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i26 = icmp eq i32 %297, 0, !dbg !43
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i29 = icmp eq i32 %298, 0, !dbg !43
  br i1 %.not.i26, label %304, label %299, !dbg !43

299:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %302, label %300, !dbg !43

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

304:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %307, label %305, !dbg !43

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

__nv_sqrtf.exit30:                                ; preds = %300, %302, %305, %307
  %.0.i28 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !43
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i31 = icmp eq i32 %309, 0, !dbg !43
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i34 = icmp eq i32 %310, 0, !dbg !43
  br i1 %.not.i31, label %316, label %311, !dbg !43

311:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %314, label %312, !dbg !43

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

316:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %319, label %317, !dbg !43

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

__nv_sqrtf.exit35:                                ; preds = %312, %314, %317, %319
  %.0.i33 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !43
  %321 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !25
  %322 = insertelement <8 x i32> %321, i32 %92, i64 1, !dbg !25
  %323 = insertelement <8 x i32> %322, i32 %93, i64 2, !dbg !25
  %324 = insertelement <8 x i32> %323, i32 %94, i64 3, !dbg !25
  %325 = insertelement <8 x i32> %324, i32 %95, i64 4, !dbg !25
  %326 = insertelement <8 x i32> %325, i32 %96, i64 5, !dbg !25
  %327 = insertelement <8 x i32> %326, i32 %97, i64 6, !dbg !25
  %328 = insertelement <8 x i32> %327, i32 %98, i64 7, !dbg !25
  %329 = bitcast <8 x i32> %328 to <8 x float>, !dbg !25
  %330 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !22
  %331 = insertelement <8 x i32> %330, i32 %60, i64 1, !dbg !22
  %332 = insertelement <8 x i32> %331, i32 %61, i64 2, !dbg !22
  %333 = insertelement <8 x i32> %332, i32 %62, i64 3, !dbg !22
  %334 = insertelement <8 x i32> %333, i32 %63, i64 4, !dbg !22
  %335 = insertelement <8 x i32> %334, i32 %64, i64 5, !dbg !22
  %336 = insertelement <8 x i32> %335, i32 %65, i64 6, !dbg !22
  %337 = insertelement <8 x i32> %336, i32 %66, i64 7, !dbg !22
  %338 = bitcast <8 x i32> %337 to <8 x float>, !dbg !22
  %339 = insertelement <8 x i32> poison, i32 %132, i64 0, !dbg !29
  %340 = insertelement <8 x i32> %339, i32 %131, i64 1, !dbg !29
  %341 = insertelement <8 x i32> %340, i32 %130, i64 2, !dbg !29
  %342 = insertelement <8 x i32> %341, i32 %129, i64 3, !dbg !29
  %343 = insertelement <8 x i32> %342, i32 %128, i64 4, !dbg !29
  %344 = insertelement <8 x i32> %343, i32 %127, i64 5, !dbg !29
  %345 = insertelement <8 x i32> %344, i32 %126, i64 6, !dbg !29
  %346 = insertelement <8 x i32> %345, i32 %125, i64 7, !dbg !29
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !29
  %348 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !33
  %349 = insertelement <8 x i32> %348, i32 %165, i64 1, !dbg !33
  %350 = insertelement <8 x i32> %349, i32 %164, i64 2, !dbg !33
  %351 = insertelement <8 x i32> %350, i32 %163, i64 3, !dbg !33
  %352 = insertelement <8 x i32> %351, i32 %162, i64 4, !dbg !33
  %353 = insertelement <8 x i32> %352, i32 %161, i64 5, !dbg !33
  %354 = insertelement <8 x i32> %353, i32 %160, i64 6, !dbg !33
  %355 = insertelement <8 x i32> %354, i32 %159, i64 7, !dbg !33
  %356 = bitcast <8 x i32> %355 to <8 x float>, !dbg !33
  %357 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !35
  %358 = insertelement <8 x i32> %357, i32 %177, i64 1, !dbg !35
  %359 = insertelement <8 x i32> %358, i32 %176, i64 2, !dbg !35
  %360 = insertelement <8 x i32> %359, i32 %175, i64 3, !dbg !35
  %361 = insertelement <8 x i32> %360, i32 %174, i64 4, !dbg !35
  %362 = insertelement <8 x i32> %361, i32 %173, i64 5, !dbg !35
  %363 = insertelement <8 x i32> %362, i32 %172, i64 6, !dbg !35
  %364 = insertelement <8 x i32> %363, i32 %171, i64 7, !dbg !35
  %365 = bitcast <8 x i32> %364 to <8 x float>, !dbg !35
  %366 = fcmp ogt <8 x float> %329, %338, !dbg !44
  %367 = fcmp uno <8 x float> %329, zeroinitializer, !dbg !48
  %368 = or <8 x i1> %366, %367, !dbg !49
  %369 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !41
  %370 = insertelement <8 x i32> %369, i32 %215, i64 1, !dbg !41
  %371 = insertelement <8 x i32> %370, i32 %214, i64 2, !dbg !41
  %372 = insertelement <8 x i32> %371, i32 %213, i64 3, !dbg !41
  %373 = insertelement <8 x i32> %372, i32 %212, i64 4, !dbg !41
  %374 = insertelement <8 x i32> %373, i32 %211, i64 5, !dbg !41
  %375 = insertelement <8 x i32> %374, i32 %210, i64 6, !dbg !41
  %376 = insertelement <8 x i32> %375, i32 %209, i64 7, !dbg !41
  %377 = bitcast <8 x i32> %376 to <8 x float>, !dbg !41
  %378 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !39
  %379 = insertelement <8 x i32> %378, i32 %205, i64 1, !dbg !39
  %380 = insertelement <8 x i32> %379, i32 %204, i64 2, !dbg !39
  %381 = insertelement <8 x i32> %380, i32 %203, i64 3, !dbg !39
  %382 = insertelement <8 x i32> %381, i32 %202, i64 4, !dbg !39
  %383 = insertelement <8 x i32> %382, i32 %201, i64 5, !dbg !39
  %384 = insertelement <8 x i32> %383, i32 %200, i64 6, !dbg !39
  %385 = insertelement <8 x i32> %384, i32 %199, i64 7, !dbg !39
  %386 = bitcast <8 x i32> %385 to <8 x float>, !dbg !39
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !50
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !50
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !50
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !50
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !50
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !50
  %395 = shufflevector <8 x i1> %368, <8 x i1> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !51
  %396 = shufflevector <8 x float> %329, <8 x float> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !51
  %397 = shufflevector <8 x float> %338, <8 x float> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !51
  %398 = select <8 x i1> %395, <8 x float> %396, <8 x float> %397, !dbg !51
  %399 = fcmp olt <8 x float> %398, %347, !dbg !52
  %400 = fcmp uno <8 x float> %347, zeroinitializer, !dbg !54
  %401 = or <8 x i1> %399, %400, !dbg !55
  %402 = select <8 x i1> %401, <8 x float> %347, <8 x float> %398, !dbg !56
  %403 = fcmp olt <8 x float> %402, %356, !dbg !57
  %404 = fcmp uno <8 x float> %356, zeroinitializer, !dbg !59
  %405 = or <8 x i1> %403, %404, !dbg !60
  %406 = select <8 x i1> %405, <8 x float> %356, <8 x float> %402, !dbg !61
  %407 = fsub <8 x float> %406, %365, !dbg !62
  %408 = insertelement <8 x float> poison, float %394, i64 0, !dbg !63
  %409 = insertelement <8 x float> %408, float %393, i64 1, !dbg !63
  %410 = insertelement <8 x float> %409, float %392, i64 2, !dbg !63
  %411 = insertelement <8 x float> %410, float %391, i64 3, !dbg !63
  %412 = insertelement <8 x float> %411, float %390, i64 4, !dbg !63
  %413 = insertelement <8 x float> %412, float %389, i64 5, !dbg !63
  %414 = insertelement <8 x float> %413, float %388, i64 6, !dbg !63
  %415 = insertelement <8 x float> %414, float %387, i64 7, !dbg !63
  %416 = fmul <8 x float> %407, %415, !dbg !63
  %417 = fmul <8 x float> %416, %386, !dbg !64
  %418 = fadd <8 x float> %417, %377, !dbg !65
  %419 = fcmp olt <8 x float> %418, zeroinitializer, !dbg !66
  %420 = extractelement <8 x i1> %419, i64 7, !dbg !68
  %421 = extractelement <8 x i1> %419, i64 6, !dbg !68
  %422 = extractelement <8 x i1> %419, i64 5, !dbg !68
  %423 = extractelement <8 x i1> %419, i64 4, !dbg !68
  %424 = extractelement <8 x i1> %419, i64 3, !dbg !68
  %425 = extractelement <8 x i1> %419, i64 2, !dbg !68
  %426 = extractelement <8 x i1> %419, i64 1, !dbg !68
  %427 = extractelement <8 x i1> %419, i64 0, !dbg !68
  %428 = sext i32 %14 to i64, !dbg !69
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %428, !dbg !69
  %430 = sext i32 %18 to i64, !dbg !69
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %430, !dbg !69
  %bc = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %432 = extractelement <8 x i32> %bc, i64 7, !dbg !70
  %433 = select i1 %420, i32 0, i32 %432, !dbg !68
  %bc36 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %434 = extractelement <8 x i32> %bc36, i64 6, !dbg !70
  %435 = select i1 %421, i32 0, i32 %434, !dbg !68
  %bc37 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %436 = extractelement <8 x i32> %bc37, i64 5, !dbg !70
  %437 = select i1 %422, i32 0, i32 %436, !dbg !68
  %bc38 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %438 = extractelement <8 x i32> %bc38, i64 4, !dbg !70
  %439 = select i1 %423, i32 0, i32 %438, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %435, i32 %437, i32 %439, ptr addrspace(1) %429, i1 true) #3, !dbg !70
  %bc39 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %440 = extractelement <8 x i32> %bc39, i64 3, !dbg !70
  %441 = select i1 %424, i32 0, i32 %440, !dbg !68
  %bc40 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %442 = extractelement <8 x i32> %bc40, i64 2, !dbg !70
  %443 = select i1 %425, i32 0, i32 %442, !dbg !68
  %bc41 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %444 = extractelement <8 x i32> %bc41, i64 1, !dbg !70
  %445 = select i1 %426, i32 0, i32 %444, !dbg !68
  %bc42 = bitcast <8 x float> %418 to <8 x i32>, !dbg !70
  %446 = extractelement <8 x i32> %bc42, i64 0, !dbg !70
  %447 = select i1 %427, i32 0, i32 %446, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %441, i32 %443, i32 %445, i32 %447, ptr addrspace(1) %431, i1 true) #3, !dbg !70
  %448 = getelementptr float, ptr addrspace(1) %6, i64 %428, !dbg !71
  %449 = getelementptr float, ptr addrspace(1) %6, i64 %430, !dbg !71
  %bc43 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %450 = extractelement <8 x i32> %bc43, i64 7, !dbg !72
  %bc44 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %451 = extractelement <8 x i32> %bc44, i64 6, !dbg !72
  %bc45 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %452 = extractelement <8 x i32> %bc45, i64 5, !dbg !72
  %bc46 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %453 = extractelement <8 x i32> %bc46, i64 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %448, i1 true) #3, !dbg !72
  %bc47 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %454 = extractelement <8 x i32> %bc47, i64 3, !dbg !72
  %bc48 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %455 = extractelement <8 x i32> %bc48, i64 2, !dbg !72
  %bc49 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %456 = extractelement <8 x i32> %bc49, i64 1, !dbg !72
  %bc50 = bitcast <8 x float> %407 to <8 x i32>, !dbg !72
  %457 = extractelement <8 x i32> %bc50, i64 0, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %449, i1 true) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c35rthkkma5nbsn2rrbu2lcb6wi5iriuop6me4iqgjszgxu6xgyq.py", directory: "inductor_cache/35")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 41, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 46, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 42, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 30, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 42, column: 27, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 36, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 44, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 37, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !58)
!58 = !DILocation(line: 38, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !58)
!62 = !DILocation(line: 39, column: 18, scope: !7)
!63 = !DILocation(line: 47, column: 19, scope: !7)
!64 = !DILocation(line: 48, column: 20, scope: !7)
!65 = !DILocation(line: 49, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !67)
!67 = !DILocation(line: 51, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !67)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 37, scope: !7)
!71 = !DILocation(line: 53, column: 25, scope: !7)
!72 = !DILocation(line: 53, column: 36, scope: !7)
!73 = !DILocation(line: 53, column: 4, scope: !7)
