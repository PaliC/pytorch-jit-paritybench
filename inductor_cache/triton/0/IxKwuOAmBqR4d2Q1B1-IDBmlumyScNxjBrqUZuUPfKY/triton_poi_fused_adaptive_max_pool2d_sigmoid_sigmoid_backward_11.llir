; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_adaptive_max_pool2d_sigmoid_sigmoid_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 16, !dbg !12
  %10 = and i32 %8, 15, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 12, !dbg !14
  %13 = shl i32 %11, 4, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %12) #1, !dbg !17
  %17 = bitcast i32 %16 to float, !dbg !17
  %18 = or disjoint i32 %13, 1, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #1, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = or disjoint i32 %13, 2, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #1, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = or disjoint i32 %13, 3, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = or disjoint i32 %13, 4, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = or disjoint i32 %13, 5, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = or disjoint i32 %13, 6, !dbg !33
  %44 = sext i32 %43 to i64, !dbg !34
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = or disjoint i32 %13, 7, !dbg !36
  %49 = sext i32 %48 to i64, !dbg !37
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = or disjoint i32 %13, 8, !dbg !39
  %54 = sext i32 %53 to i64, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !40
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !41
  %57 = bitcast i32 %56 to float, !dbg !41
  %58 = or disjoint i32 %13, 9, !dbg !42
  %59 = sext i32 %58 to i64, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !43
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !44
  %62 = bitcast i32 %61 to float, !dbg !44
  %63 = or disjoint i32 %13, 10, !dbg !45
  %64 = sext i32 %63 to i64, !dbg !46
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !46
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !47
  %67 = bitcast i32 %66 to float, !dbg !47
  %68 = or disjoint i32 %13, 11, !dbg !48
  %69 = sext i32 %68 to i64, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !49
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %12) #1, !dbg !50
  %72 = bitcast i32 %71 to float, !dbg !50
  %73 = or disjoint i32 %13, 12, !dbg !51
  %74 = sext i32 %73 to i64, !dbg !52
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !52
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %12) #1, !dbg !53
  %77 = bitcast i32 %76 to float, !dbg !53
  %78 = or disjoint i32 %13, 13, !dbg !54
  %79 = sext i32 %78 to i64, !dbg !55
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !55
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %12) #1, !dbg !56
  %82 = bitcast i32 %81 to float, !dbg !56
  %83 = or disjoint i32 %13, 14, !dbg !57
  %84 = sext i32 %83 to i64, !dbg !58
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !58
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %12) #1, !dbg !59
  %87 = bitcast i32 %86 to float, !dbg !59
  %88 = or disjoint i32 %13, 15, !dbg !60
  %89 = sext i32 %88 to i64, !dbg !61
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !61
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %12) #1, !dbg !62
  %92 = bitcast i32 %91 to float, !dbg !62
  %93 = fcmp ogt float %22, %17, !dbg !63
  %94 = fcmp uno float %22, 0.000000e+00, !dbg !67
  %95 = or i1 %93, %94, !dbg !68
  %96 = select i1 %95, float %22, float %17, !dbg !69
  %97 = fcmp olt float %96, %27, !dbg !70
  %98 = fcmp uno float %27, 0.000000e+00, !dbg !72
  %99 = or i1 %98, %97, !dbg !73
  %100 = select i1 %99, float %27, float %96, !dbg !74
  %101 = fcmp olt float %100, %32, !dbg !75
  %102 = fcmp uno float %32, 0.000000e+00, !dbg !77
  %103 = or i1 %102, %101, !dbg !78
  %104 = select i1 %103, float %32, float %100, !dbg !79
  %105 = fcmp olt float %104, %37, !dbg !80
  %106 = fcmp uno float %37, 0.000000e+00, !dbg !82
  %107 = or i1 %106, %105, !dbg !83
  %108 = select i1 %107, float %37, float %104, !dbg !84
  %109 = fcmp olt float %108, %42, !dbg !85
  %110 = fcmp uno float %42, 0.000000e+00, !dbg !87
  %111 = or i1 %110, %109, !dbg !88
  %112 = select i1 %111, float %42, float %108, !dbg !89
  %113 = fcmp olt float %112, %47, !dbg !90
  %114 = fcmp uno float %47, 0.000000e+00, !dbg !92
  %115 = or i1 %114, %113, !dbg !93
  %116 = select i1 %115, float %47, float %112, !dbg !94
  %117 = fcmp olt float %116, %52, !dbg !95
  %118 = fcmp uno float %52, 0.000000e+00, !dbg !97
  %119 = or i1 %118, %117, !dbg !98
  %120 = select i1 %119, float %52, float %116, !dbg !99
  %121 = fcmp olt float %120, %57, !dbg !100
  %122 = fcmp uno float %57, 0.000000e+00, !dbg !102
  %123 = or i1 %122, %121, !dbg !103
  %124 = select i1 %123, float %57, float %120, !dbg !104
  %125 = fcmp olt float %124, %62, !dbg !105
  %126 = fcmp uno float %62, 0.000000e+00, !dbg !107
  %127 = or i1 %126, %125, !dbg !108
  %128 = select i1 %127, float %62, float %124, !dbg !109
  %129 = fcmp olt float %128, %67, !dbg !110
  %130 = fcmp uno float %67, 0.000000e+00, !dbg !112
  %131 = or i1 %130, %129, !dbg !113
  %132 = select i1 %131, float %67, float %128, !dbg !114
  %133 = fcmp olt float %132, %72, !dbg !115
  %134 = fcmp uno float %72, 0.000000e+00, !dbg !117
  %135 = or i1 %134, %133, !dbg !118
  %136 = select i1 %135, float %72, float %132, !dbg !119
  %137 = fcmp olt float %136, %77, !dbg !120
  %138 = fcmp uno float %77, 0.000000e+00, !dbg !122
  %139 = or i1 %138, %137, !dbg !123
  %140 = select i1 %139, float %77, float %136, !dbg !124
  %141 = fcmp olt float %140, %82, !dbg !125
  %142 = fcmp uno float %82, 0.000000e+00, !dbg !127
  %143 = or i1 %142, %141, !dbg !128
  %144 = select i1 %143, float %82, float %140, !dbg !129
  %145 = fcmp olt float %144, %87, !dbg !130
  %146 = fcmp uno float %87, 0.000000e+00, !dbg !132
  %147 = or i1 %146, %145, !dbg !133
  %148 = select i1 %147, float %87, float %144, !dbg !134
  %149 = fcmp olt float %148, %92, !dbg !135
  %150 = fcmp uno float %92, 0.000000e+00, !dbg !137
  %151 = or i1 %150, %149, !dbg !138
  %152 = select i1 %151, float %92, float %148, !dbg !139
  %153 = zext i1 %93 to i8, !dbg !140
  %154 = select i1 %97, i8 2, i8 %153, !dbg !141
  %155 = select i1 %101, i8 3, i8 %154, !dbg !142
  %156 = select i1 %105, i8 4, i8 %155, !dbg !143
  %157 = select i1 %109, i8 5, i8 %156, !dbg !144
  %158 = select i1 %113, i8 6, i8 %157, !dbg !145
  %159 = select i1 %117, i8 7, i8 %158, !dbg !146
  %160 = select i1 %121, i8 8, i8 %159, !dbg !147
  %161 = select i1 %125, i8 9, i8 %160, !dbg !148
  %162 = select i1 %129, i8 10, i8 %161, !dbg !149
  %163 = select i1 %133, i8 11, i8 %162, !dbg !150
  %164 = select i1 %137, i8 12, i8 %163, !dbg !151
  %165 = select i1 %141, i8 13, i8 %164, !dbg !152
  %166 = select i1 %145, i8 14, i8 %165, !dbg !153
  %167 = select i1 %149, i8 15, i8 %166, !dbg !154
  %168 = fsub float 0.000000e+00, %152, !dbg !155
  %169 = fmul float %168, 0x3FF7154760000000, !dbg !159
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %169) #1, !dbg !159
  %171 = fadd float %170, 1.000000e+00, !dbg !160
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %171) #1, !dbg !161
  %173 = fsub float 1.000000e+00, %172, !dbg !162
  %174 = fmul float %172, %173, !dbg !163
  %175 = sext i32 %11 to i64, !dbg !164
  %176 = getelementptr i8, ptr addrspace(1) %2, i64 %175, !dbg !164
  %177 = icmp eq i32 %9, 0, !dbg !165
  %178 = and i1 %177, %12, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %167, ptr addrspace(1) %176, i1 %178) #1, !dbg !165
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !166
  %180 = bitcast float %172 to i32, !dbg !167
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %179, i1 %178) #1, !dbg !167
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %175, !dbg !168
  %182 = bitcast float %174 to i32, !dbg !169
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %181, i1 %178) #1, !dbg !169
  ret void, !dbg !170
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chwpcswpw2xc7mjrunh4tzajbqahlnj6tozdftbgrlbwarmq5chs.py", directory: "inductor_cache/hw")
!4 = !{ptr @triton_poi_fused_adaptive_max_pool2d_sigmoid_sigmoid_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_adaptive_max_pool2d_sigmoid_sigmoid_backward_11, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_adaptive_max_pool2d_sigmoid_sigmoid_backward_11", linkageName: "triton_poi_fused_adaptive_max_pool2d_sigmoid_sigmoid_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 42, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 42, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 42, scope: !7)
!27 = !DILocation(line: 29, column: 34, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 35, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 43, scope: !7)
!36 = !DILocation(line: 32, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 43, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 31, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 35, column: 36, scope: !7)
!46 = !DILocation(line: 35, column: 31, scope: !7)
!47 = !DILocation(line: 35, column: 44, scope: !7)
!48 = !DILocation(line: 36, column: 36, scope: !7)
!49 = !DILocation(line: 36, column: 31, scope: !7)
!50 = !DILocation(line: 36, column: 44, scope: !7)
!51 = !DILocation(line: 37, column: 36, scope: !7)
!52 = !DILocation(line: 37, column: 31, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 38, column: 36, scope: !7)
!55 = !DILocation(line: 38, column: 31, scope: !7)
!56 = !DILocation(line: 38, column: 44, scope: !7)
!57 = !DILocation(line: 39, column: 36, scope: !7)
!58 = !DILocation(line: 39, column: 31, scope: !7)
!59 = !DILocation(line: 39, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 36, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 44, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 41, column: 40, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !71)
!71 = !DILocation(line: 42, column: 40, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !76)
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 41, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !111)
!115 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !116)
!116 = !DILocation(line: 51, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !121)
!121 = !DILocation(line: 52, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !121)
!125 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !126)
!126 = !DILocation(line: 53, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !131)
!131 = !DILocation(line: 54, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !136)
!136 = !DILocation(line: 55, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !136)
!140 = !DILocation(line: 59, column: 35, scope: !7)
!141 = !DILocation(line: 62, column: 35, scope: !7)
!142 = !DILocation(line: 65, column: 35, scope: !7)
!143 = !DILocation(line: 68, column: 35, scope: !7)
!144 = !DILocation(line: 71, column: 35, scope: !7)
!145 = !DILocation(line: 74, column: 35, scope: !7)
!146 = !DILocation(line: 77, column: 35, scope: !7)
!147 = !DILocation(line: 80, column: 35, scope: !7)
!148 = !DILocation(line: 83, column: 35, scope: !7)
!149 = !DILocation(line: 86, column: 35, scope: !7)
!150 = !DILocation(line: 89, column: 35, scope: !7)
!151 = !DILocation(line: 92, column: 35, scope: !7)
!152 = !DILocation(line: 95, column: 35, scope: !7)
!153 = !DILocation(line: 98, column: 35, scope: !7)
!154 = !DILocation(line: 101, column: 35, scope: !7)
!155 = !DILocation(line: 47, column: 30, scope: !156, inlinedAt: !158)
!156 = distinct !DILexicalBlockFile(scope: !7, file: !157, discriminator: 0)
!157 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!158 = !DILocation(line: 102, column: 23, scope: !7)
!159 = !DILocation(line: 47, column: 29, scope: !156, inlinedAt: !158)
!160 = !DILocation(line: 47, column: 20, scope: !156, inlinedAt: !158)
!161 = !DILocation(line: 47, column: 16, scope: !156, inlinedAt: !158)
!162 = !DILocation(line: 104, column: 20, scope: !7)
!163 = !DILocation(line: 105, column: 20, scope: !7)
!164 = !DILocation(line: 106, column: 25, scope: !7)
!165 = !DILocation(line: 106, column: 37, scope: !7)
!166 = !DILocation(line: 107, column: 28, scope: !7)
!167 = !DILocation(line: 107, column: 40, scope: !7)
!168 = !DILocation(line: 108, column: 25, scope: !7)
!169 = !DILocation(line: 108, column: 37, scope: !7)
!170 = !DILocation(line: 108, column: 4, scope: !7)
