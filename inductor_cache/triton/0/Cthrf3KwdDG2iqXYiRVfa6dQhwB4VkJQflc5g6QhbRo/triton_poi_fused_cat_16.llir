; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = icmp slt i32 %11, 47360, !dbg !14
  %16 = insertelement <4 x i32> poison, i32 %14, i64 0, !dbg !15
  %17 = insertelement <4 x i32> %16, i32 %13, i64 1, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %12, i64 2, !dbg !15
  %19 = insertelement <4 x i32> %18, i32 %11, i64 3, !dbg !15
  %20 = srem <4 x i32> %19, splat (i32 185), !dbg !15
  %21 = sdiv i32 %11, 185, !dbg !16
  %22 = sdiv i32 %12, 185, !dbg !16
  %23 = sdiv i32 %13, 185, !dbg !16
  %24 = sdiv i32 %14, 185, !dbg !16
  %25 = srem i32 %21, 64, !dbg !17
  %26 = srem i32 %22, 64, !dbg !17
  %27 = srem i32 %23, 64, !dbg !17
  %28 = srem i32 %24, 64, !dbg !17
  %29 = sdiv i32 %11, 11840, !dbg !18
  %30 = extractelement <4 x i32> %20, i64 3, !dbg !19
  %31 = icmp slt i32 %30, 128, !dbg !20
  %32 = extractelement <4 x i32> %20, i64 2, !dbg !19
  %33 = icmp slt i32 %32, 128, !dbg !20
  %34 = extractelement <4 x i32> %20, i64 1, !dbg !19
  %35 = icmp slt i32 %34, 128, !dbg !20
  %36 = extractelement <4 x i32> %20, i64 0, !dbg !19
  %37 = icmp slt i32 %36, 128, !dbg !20
  %38 = shl nsw i32 %21, 7, !dbg !21
  %39 = shl nsw i32 %22, 7, !dbg !21
  %40 = shl nsw i32 %23, 7, !dbg !21
  %41 = shl nsw i32 %24, 7, !dbg !21
  %42 = add nsw i32 %38, %30, !dbg !22
  %43 = add nsw i32 %39, %32, !dbg !22
  %44 = add nsw i32 %40, %34, !dbg !22
  %45 = add nsw i32 %41, %36, !dbg !22
  %46 = sext i32 %42 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %43 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %44 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = and i1 %15, %31, !dbg !24
  %55 = and i1 %33, %15, !dbg !24
  %56 = and i1 %35, %15, !dbg !24
  %57 = and i1 %37, %15, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %54, i32 0, i1 %54) #1, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %55, i32 0, i1 %55) #1, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %56, i32 0, i1 %56) #1, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %57, i32 0, i1 %57) #1, !dbg !25
  %62 = add nsw <4 x i32> %20, splat (i32 -128), !dbg !26
  %63 = icmp ult <4 x i32> %62, splat (i32 19), !dbg !26
  %64 = shl nsw i32 %30, 6, !dbg !27
  %65 = shl nsw i32 %32, 6, !dbg !27
  %66 = shl nsw i32 %34, 6, !dbg !27
  %67 = shl nsw i32 %36, 6, !dbg !27
  %68 = mul nsw i32 %29, 1216, !dbg !28
  %69 = add nsw i32 %68, -8192, !dbg !27
  %70 = add nsw i32 %69, %64, !dbg !29
  %71 = add nsw i32 %70, %25, !dbg !30
  %72 = add nsw i32 %69, %65, !dbg !29
  %73 = add nsw i32 %72, %26, !dbg !30
  %74 = add nsw i32 %69, %66, !dbg !29
  %75 = add nsw i32 %74, %27, !dbg !30
  %76 = add nsw i32 %69, %67, !dbg !29
  %77 = add nsw i32 %76, %28, !dbg !30
  %78 = sext i32 %71 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !31
  %80 = sext i32 %73 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !31
  %82 = sext i32 %75 to i64, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !31
  %84 = sext i32 %77 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !31
  %86 = extractelement <4 x i1> %63, i64 3, !dbg !32
  %87 = and i1 %15, %86, !dbg !33
  %88 = extractelement <4 x i1> %63, i64 2, !dbg !32
  %89 = and i1 %88, %15, !dbg !33
  %90 = extractelement <4 x i1> %63, i64 1, !dbg !32
  %91 = and i1 %90, %15, !dbg !33
  %92 = extractelement <4 x i1> %63, i64 0, !dbg !32
  %93 = and i1 %92, %15, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %87, i32 0, i1 %87) #1, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %89, i32 0, i1 %89) #1, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %91, i32 0, i1 %91) #1, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %93, i32 0, i1 %93) #1, !dbg !34
  %98 = icmp sgt i32 %30, 146, !dbg !19
  %99 = icmp sgt i32 %32, 146, !dbg !19
  %100 = icmp sgt i32 %34, 146, !dbg !19
  %101 = icmp sgt i32 %36, 146, !dbg !19
  %102 = mul nsw i32 %29, 2432, !dbg !35
  %103 = add nsw i32 %102, -9408, !dbg !36
  %104 = add nsw i32 %103, %64, !dbg !37
  %105 = add nsw i32 %104, %25, !dbg !38
  %106 = add nsw i32 %103, %65, !dbg !37
  %107 = add nsw i32 %106, %26, !dbg !38
  %108 = add nsw i32 %103, %66, !dbg !37
  %109 = add nsw i32 %108, %27, !dbg !38
  %110 = add nsw i32 %103, %67, !dbg !37
  %111 = add nsw i32 %110, %28, !dbg !38
  %112 = sext i32 %105 to i64, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !39
  %114 = sext i32 %107 to i64, !dbg !39
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !39
  %116 = sext i32 %109 to i64, !dbg !39
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !39
  %118 = sext i32 %111 to i64, !dbg !39
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !39
  %120 = and i1 %15, %98, !dbg !40
  %121 = and i1 %99, %15, !dbg !40
  %122 = and i1 %100, %15, !dbg !40
  %123 = and i1 %101, %15, !dbg !40
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %120, i32 0, i1 %120) #1, !dbg !41
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %121, i32 0, i1 %121) #1, !dbg !41
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %122, i32 0, i1 %122) #1, !dbg !41
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %123, i32 0, i1 %123) #1, !dbg !41
  %.v = select i1 %86, i32 %94, i32 %124, !dbg !32
  %.v1 = select i1 %88, i32 %95, i32 %125, !dbg !32
  %.v2 = select i1 %90, i32 %96, i32 %126, !dbg !32
  %.v3 = select i1 %92, i32 %97, i32 %127, !dbg !32
  %.v4 = select i1 %31, i32 %58, i32 %.v, !dbg !42
  %.v5 = select i1 %33, i32 %59, i32 %.v1, !dbg !42
  %.v6 = select i1 %35, i32 %60, i32 %.v2, !dbg !42
  %.v7 = select i1 %37, i32 %61, i32 %.v3, !dbg !42
  %128 = sext i32 %11 to i64, !dbg !43
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v4, i32 %.v5, i32 %.v6, i32 %.v7, ptr addrspace(1) %129, i1 %15) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxzq5wkq3crds7gwg4wdhdjinzrix6gfrbvhjofmnjwz3ii7j3jx.py", directory: "inductor_cache/xz")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 20, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 53, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 40, scope: !7)
!28 = !DILocation(line: 39, column: 60, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 55, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 34, scope: !7)
!33 = !DILocation(line: 39, column: 72, scope: !7)
!34 = !DILocation(line: 39, column: 65, scope: !7)
!35 = !DILocation(line: 43, column: 60, scope: !7)
!36 = !DILocation(line: 43, column: 40, scope: !7)
!37 = !DILocation(line: 43, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 55, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 73, scope: !7)
!41 = !DILocation(line: 43, column: 65, scope: !7)
!42 = !DILocation(line: 45, column: 33, scope: !7)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
