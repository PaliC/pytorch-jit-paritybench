; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 8800, !dbg !14
  %12 = srem i32 %10, 88, !dbg !15
  %13 = sdiv i32 %10, 2200, !dbg !16
  %14 = mul i32 %13, 7128, !dbg !17
  %15 = add i32 %14, %12, !dbg !18
  %16 = add i32 %15, -880, !dbg !19
  %17 = add i32 %15, -792, !dbg !20
  %18 = add i32 %15, -704, !dbg !21
  %19 = add i32 %15, -88, !dbg !22
  %20 = add i32 %15, 88, !dbg !23
  %21 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !24
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %23 = sdiv <2 x i32> %22, <i32 440, i32 88>, !dbg !24
  %24 = srem <2 x i32> %23, splat (i32 5), !dbg !25
  %25 = shl nsw <2 x i32> %24, splat (i32 1), !dbg !26
  %26 = extractelement <2 x i32> %24, i64 1, !dbg !27
  %27 = mul nsw i32 %26, 176, !dbg !27
  %28 = extractelement <2 x i32> %24, i64 0, !dbg !28
  %29 = mul nsw i32 %28, 1584, !dbg !28
  %30 = add i32 %16, %27, !dbg !29
  %31 = add i32 %30, %29, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !31
  %34 = icmp sgt <2 x i32> %24, splat (i32 -1), !dbg !32
  %35 = extractelement <2 x i1> %34, i64 1, !dbg !33
  %36 = add i32 %17, %27, !dbg !34
  %37 = add i32 %36, %29, !dbg !35
  %38 = sext i32 %37 to i64, !dbg !36
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !36
  %40 = or disjoint <2 x i32> %25, splat (i32 1), !dbg !37
  %41 = icmp slt <2 x i32> %40, splat (i32 9), !dbg !38
  %42 = and <2 x i1> %34, %41, !dbg !39
  %43 = extractelement <2 x i1> %42, i64 1, !dbg !40
  %44 = add i32 %18, %27, !dbg !41
  %45 = add i32 %44, %29, !dbg !42
  %46 = sext i32 %45 to i64, !dbg !43
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !43
  %48 = extractelement <2 x i1> %34, i64 0, !dbg !44
  %49 = add i32 %19, %27, !dbg !45
  %50 = add i32 %49, %29, !dbg !46
  %51 = sext i32 %50 to i64, !dbg !47
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !47
  %53 = or i32 %28, %26, !dbg !48
  %54 = icmp sgt i32 %53, -1, !dbg !48
  %55 = add i32 %15, %27, !dbg !49
  %56 = add i32 %55, %29, !dbg !50
  %57 = sext i32 %56 to i64, !dbg !51
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !51
  %59 = and i1 %11, %54, !dbg !52
  %60 = and i1 %48, %43, !dbg !53
  %61 = add i32 %20, %27, !dbg !54
  %62 = add i32 %61, %29, !dbg !55
  %63 = sext i32 %62 to i64, !dbg !56
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !56
  %65 = and i1 %11, %60, !dbg !57
  %66 = extractelement <2 x i1> %42, i64 0, !dbg !40
  %67 = add i32 %15, 704, !dbg !58
  %68 = add i32 %67, %27, !dbg !59
  %69 = add i32 %68, %29, !dbg !60
  %70 = sext i32 %69 to i64, !dbg !61
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !61
  %72 = and i1 %35, %66, !dbg !62
  %73 = add i32 %15, 792, !dbg !63
  %74 = add i32 %73, %27, !dbg !64
  %75 = add i32 %74, %29, !dbg !65
  %76 = sext i32 %75 to i64, !dbg !66
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !66
  %78 = and i1 %11, %72, !dbg !67
  %79 = and i1 %66, %43, !dbg !40
  %80 = add i32 %15, 880, !dbg !68
  %81 = add i32 %80, %27, !dbg !69
  %82 = add i32 %81, %29, !dbg !70
  %83 = sext i32 %82 to i64, !dbg !71
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !71
  %85 = and i1 %11, %79, !dbg !72
  %86 = add nsw <2 x i32> %25, splat (i32 -1), !dbg !73
  %87 = icmp sgt <2 x i32> %24, zeroinitializer, !dbg !74
  %88 = extractelement <2 x i1> %87, i64 0, !dbg !75
  %89 = extractelement <2 x i1> %87, i64 1, !dbg !75
  %90 = and i1 %88, %89, !dbg !75
  %91 = and i1 %11, %90, !dbg !76
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %91, i32 -8388608, i1 %91) #1, !dbg !77
  %93 = bitcast i32 %92 to float, !dbg !77
  %94 = and i1 %88, %35, !dbg !33
  %95 = and i1 %11, %94, !dbg !78
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %95, i32 -8388608, i1 %95) #1, !dbg !79
  %97 = bitcast i32 %96 to float, !dbg !79
  %98 = fcmp ogt float %97, %93, !dbg !80
  %99 = fcmp uno float %97, 0.000000e+00, !dbg !84
  %100 = or i1 %98, %99, !dbg !85
  %101 = select i1 %100, float %97, float %93, !dbg !86
  %102 = and i1 %88, %43, !dbg !87
  %103 = and i1 %11, %102, !dbg !88
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %103, i32 -8388608, i1 %103) #1, !dbg !89
  %105 = bitcast i32 %104 to float, !dbg !89
  %106 = fcmp olt float %101, %105, !dbg !90
  %107 = fcmp uno float %105, 0.000000e+00, !dbg !92
  %108 = or i1 %107, %106, !dbg !93
  %109 = select i1 %108, float %105, float %101, !dbg !94
  %110 = and i1 %48, %89, !dbg !44
  %111 = and i1 %11, %110, !dbg !95
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %111, i32 -8388608, i1 %111) #1, !dbg !96
  %113 = bitcast i32 %112 to float, !dbg !96
  %114 = fcmp olt float %109, %113, !dbg !97
  %115 = fcmp uno float %113, 0.000000e+00, !dbg !99
  %116 = or i1 %115, %114, !dbg !100
  %117 = select i1 %116, float %113, float %109, !dbg !101
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 -8388608, i1 %59) #1, !dbg !102
  %119 = bitcast i32 %118 to float, !dbg !102
  %120 = fcmp olt float %117, %119, !dbg !103
  %121 = fcmp uno float %119, 0.000000e+00, !dbg !105
  %122 = or i1 %121, %120, !dbg !106
  %123 = select i1 %122, float %119, float %117, !dbg !107
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 -8388608, i1 %65) #1, !dbg !108
  %125 = bitcast i32 %124 to float, !dbg !108
  %126 = fcmp olt float %123, %125, !dbg !109
  %127 = fcmp uno float %125, 0.000000e+00, !dbg !111
  %128 = or i1 %127, %126, !dbg !112
  %129 = select i1 %128, float %125, float %123, !dbg !113
  %130 = and i1 %89, %66, !dbg !114
  %131 = and i1 %11, %130, !dbg !115
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %131, i32 -8388608, i1 %131) #1, !dbg !116
  %133 = bitcast i32 %132 to float, !dbg !116
  %134 = fcmp olt float %129, %133, !dbg !117
  %135 = fcmp uno float %133, 0.000000e+00, !dbg !119
  %136 = or i1 %135, %134, !dbg !120
  %137 = select i1 %136, float %133, float %129, !dbg !121
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 -8388608, i1 %78) #1, !dbg !122
  %139 = bitcast i32 %138 to float, !dbg !122
  %140 = fcmp olt float %137, %139, !dbg !123
  %141 = fcmp uno float %139, 0.000000e+00, !dbg !125
  %142 = or i1 %141, %140, !dbg !126
  %143 = select i1 %142, float %139, float %137, !dbg !127
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %85, i32 -8388608, i1 %85) #1, !dbg !128
  %145 = bitcast i32 %144 to float, !dbg !128
  %146 = fcmp olt float %143, %145, !dbg !129
  %147 = fcmp uno float %145, 0.000000e+00, !dbg !131
  %148 = or i1 %147, %146, !dbg !132
  %149 = zext i1 %98 to i8, !dbg !133
  %150 = select i1 %106, i8 2, i8 %149, !dbg !134
  %151 = select i1 %114, i8 3, i8 %150, !dbg !135
  %152 = select i1 %120, i8 4, i8 %151, !dbg !136
  %153 = select i1 %126, i8 5, i8 %152, !dbg !137
  %154 = select i1 %134, i8 6, i8 %153, !dbg !138
  %155 = select i1 %140, i8 7, i8 %154, !dbg !139
  %156 = select i1 %146, i8 8, i8 %155, !dbg !140
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %91, i32 0, i1 %91) #1, !dbg !141
  %158 = bitcast i32 %157 to float, !dbg !141
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %95, i32 0, i1 %95) #1, !dbg !142
  %160 = bitcast i32 %159 to float, !dbg !142
  %161 = fadd float %158, %160, !dbg !143
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %103, i32 0, i1 %103) #1, !dbg !144
  %163 = bitcast i32 %162 to float, !dbg !144
  %164 = fadd float %161, %163, !dbg !145
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %111, i32 0, i1 %111) #1, !dbg !146
  %166 = bitcast i32 %165 to float, !dbg !146
  %167 = fadd float %164, %166, !dbg !147
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59) #1, !dbg !148
  %169 = bitcast i32 %168 to float, !dbg !148
  %170 = fadd float %167, %169, !dbg !149
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 0, i1 %65) #1, !dbg !150
  %172 = bitcast i32 %171 to float, !dbg !150
  %173 = fadd float %170, %172, !dbg !151
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %131, i32 0, i1 %131) #1, !dbg !152
  %175 = bitcast i32 %174 to float, !dbg !152
  %176 = fadd float %173, %175, !dbg !153
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 0, i1 %78) #1, !dbg !154
  %178 = bitcast i32 %177 to float, !dbg !154
  %179 = fadd float %176, %178, !dbg !155
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %85, i32 0, i1 %85) #1, !dbg !156
  %181 = bitcast i32 %180 to float, !dbg !156
  %182 = fadd float %179, %181, !dbg !157
  %183 = select <2 x i1> %87, <2 x i32> %86, <2 x i32> zeroinitializer, !dbg !158
  %184 = shufflevector <2 x i32> %183, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !158
  %185 = mul nsw <2 x i32> %184, %183, !dbg !159
  %186 = add nsw <2 x i32> %25, splat (i32 2), !dbg !160
  %187 = icmp sgt <2 x i32> %24, splat (i32 3), !dbg !161
  %188 = select <2 x i1> %187, <2 x i32> splat (i32 9), <2 x i32> zeroinitializer, !dbg !162
  %189 = icmp slt <2 x i32> %24, splat (i32 4), !dbg !163
  %190 = select <2 x i1> %189, <2 x i32> %186, <2 x i32> zeroinitializer, !dbg !164
  %191 = add nsw <2 x i32> %190, %188, !dbg !165
  %shift3 = shufflevector <2 x i32> %191, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !166
  %192 = mul nsw <2 x i32> %shift3, %191, !dbg !166
  %193 = mul nsw <2 x i32> %191, %184, !dbg !167
  %shift4 = shufflevector <2 x i32> %193, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %194 = add nsw <2 x i32> %193, %shift4
  %195 = add nsw <2 x i32> %192, %185, !dbg !168
  %196 = sub nsw <2 x i32> %195, %194, !dbg !167
  %197 = extractelement <2 x i32> %196, i64 0, !dbg !167
  %198 = sitofp i32 %197 to float, !dbg !169
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %198) #1, !dbg !169
  %200 = sext i32 %10 to i64, !dbg !170
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !170
  %202 = bitcast float %143 to i32, !dbg !171
  %203 = select i1 %148, i32 %144, i32 %202, !dbg !172
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %201, i1 %11) #1, !dbg !171
  %204 = getelementptr i8, ptr addrspace(1) %2, i64 %200, !dbg !173
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %156, ptr addrspace(1) %204, i1 %11) #1, !dbg !174
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !175
  %206 = bitcast float %199 to i32, !dbg !176
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %205, i1 %11) #1, !dbg !176
  ret void, !dbg !177
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cus323fweqcn6otwa7ilgkcafjkg4o6ty7g7ptjjm6qrqh562dyq.py", directory: "inductor_cache/us")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_41", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 69, scope: !7)
!18 = !DILocation(line: 40, column: 40, scope: !7)
!19 = !DILocation(line: 40, column: 45, scope: !7)
!20 = !DILocation(line: 46, column: 45, scope: !7)
!21 = !DILocation(line: 53, column: 45, scope: !7)
!22 = !DILocation(line: 60, column: 44, scope: !7)
!23 = !DILocation(line: 66, column: 41, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 28, scope: !7)
!26 = !DILocation(line: 29, column: 20, scope: !7)
!27 = !DILocation(line: 40, column: 49, scope: !7)
!28 = !DILocation(line: 40, column: 59, scope: !7)
!29 = !DILocation(line: 40, column: 54, scope: !7)
!30 = !DILocation(line: 40, column: 64, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 56, column: 21, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 54, scope: !7)
!35 = !DILocation(line: 46, column: 64, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 68, column: 16, scope: !7)
!38 = !DILocation(line: 70, column: 20, scope: !7)
!39 = !DILocation(line: 71, column: 20, scope: !7)
!40 = !DILocation(line: 78, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 54, scope: !7)
!42 = !DILocation(line: 53, column: 64, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 53, scope: !7)
!46 = !DILocation(line: 60, column: 63, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 45, scope: !7)
!50 = !DILocation(line: 63, column: 55, scope: !7)
!51 = !DILocation(line: 63, column: 31, scope: !7)
!52 = !DILocation(line: 63, column: 73, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 50, scope: !7)
!55 = !DILocation(line: 66, column: 60, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 78, scope: !7)
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 73, column: 51, scope: !7)
!60 = !DILocation(line: 73, column: 61, scope: !7)
!61 = !DILocation(line: 73, column: 31, scope: !7)
!62 = !DILocation(line: 75, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 42, scope: !7)
!64 = !DILocation(line: 76, column: 51, scope: !7)
!65 = !DILocation(line: 76, column: 61, scope: !7)
!66 = !DILocation(line: 76, column: 31, scope: !7)
!67 = !DILocation(line: 76, column: 79, scope: !7)
!68 = !DILocation(line: 79, column: 42, scope: !7)
!69 = !DILocation(line: 79, column: 51, scope: !7)
!70 = !DILocation(line: 79, column: 61, scope: !7)
!71 = !DILocation(line: 79, column: 31, scope: !7)
!72 = !DILocation(line: 79, column: 79, scope: !7)
!73 = !DILocation(line: 35, column: 18, scope: !7)
!74 = !DILocation(line: 36, column: 19, scope: !7)
!75 = !DILocation(line: 39, column: 19, scope: !7)
!76 = !DILocation(line: 40, column: 82, scope: !7)
!77 = !DILocation(line: 40, column: 74, scope: !7)
!78 = !DILocation(line: 46, column: 82, scope: !7)
!79 = !DILocation(line: 46, column: 74, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!83 = !DILocation(line: 47, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !83)
!87 = !DILocation(line: 52, column: 19, scope: !7)
!88 = !DILocation(line: 53, column: 82, scope: !7)
!89 = !DILocation(line: 53, column: 74, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !91)
!91 = !DILocation(line: 54, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !91)
!95 = !DILocation(line: 60, column: 81, scope: !7)
!96 = !DILocation(line: 60, column: 73, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !98)
!98 = !DILocation(line: 61, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !98)
!102 = !DILocation(line: 63, column: 65, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !104)
!104 = !DILocation(line: 64, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !104)
!108 = !DILocation(line: 66, column: 70, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !110)
!110 = !DILocation(line: 67, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !110)
!114 = !DILocation(line: 72, column: 20, scope: !7)
!115 = !DILocation(line: 73, column: 79, scope: !7)
!116 = !DILocation(line: 73, column: 71, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !118)
!118 = !DILocation(line: 74, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !118)
!122 = !DILocation(line: 76, column: 71, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !124)
!124 = !DILocation(line: 77, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !124)
!128 = !DILocation(line: 79, column: 71, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !130)
!130 = !DILocation(line: 80, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !130)
!133 = !DILocation(line: 84, column: 35, scope: !7)
!134 = !DILocation(line: 87, column: 35, scope: !7)
!135 = !DILocation(line: 90, column: 35, scope: !7)
!136 = !DILocation(line: 93, column: 35, scope: !7)
!137 = !DILocation(line: 96, column: 35, scope: !7)
!138 = !DILocation(line: 99, column: 35, scope: !7)
!139 = !DILocation(line: 102, column: 35, scope: !7)
!140 = !DILocation(line: 105, column: 35, scope: !7)
!141 = !DILocation(line: 106, column: 74, scope: !7)
!142 = !DILocation(line: 107, column: 74, scope: !7)
!143 = !DILocation(line: 108, column: 20, scope: !7)
!144 = !DILocation(line: 109, column: 74, scope: !7)
!145 = !DILocation(line: 110, column: 20, scope: !7)
!146 = !DILocation(line: 111, column: 73, scope: !7)
!147 = !DILocation(line: 112, column: 20, scope: !7)
!148 = !DILocation(line: 113, column: 65, scope: !7)
!149 = !DILocation(line: 114, column: 20, scope: !7)
!150 = !DILocation(line: 115, column: 70, scope: !7)
!151 = !DILocation(line: 116, column: 20, scope: !7)
!152 = !DILocation(line: 117, column: 71, scope: !7)
!153 = !DILocation(line: 118, column: 20, scope: !7)
!154 = !DILocation(line: 119, column: 71, scope: !7)
!155 = !DILocation(line: 120, column: 20, scope: !7)
!156 = !DILocation(line: 121, column: 71, scope: !7)
!157 = !DILocation(line: 122, column: 20, scope: !7)
!158 = !DILocation(line: 123, column: 61, scope: !7)
!159 = !DILocation(line: 123, column: 84, scope: !7)
!160 = !DILocation(line: 123, column: 238, scope: !7)
!161 = !DILocation(line: 123, column: 234, scope: !7)
!162 = !DILocation(line: 123, column: 226, scope: !7)
!163 = !DILocation(line: 123, column: 275, scope: !7)
!164 = !DILocation(line: 123, column: 261, scope: !7)
!165 = !DILocation(line: 123, column: 247, scope: !7)
!166 = !DILocation(line: 123, column: 219, scope: !7)
!167 = !DILocation(line: 123, column: 425, scope: !7)
!168 = !DILocation(line: 123, column: 156, scope: !7)
!169 = !DILocation(line: 124, column: 20, scope: !7)
!170 = !DILocation(line: 125, column: 25, scope: !7)
!171 = !DILocation(line: 125, column: 37, scope: !7)
!172 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !130)
!173 = !DILocation(line: 126, column: 25, scope: !7)
!174 = !DILocation(line: 126, column: 37, scope: !7)
!175 = !DILocation(line: 127, column: 25, scope: !7)
!176 = !DILocation(line: 127, column: 37, scope: !7)
!177 = !DILocation(line: 127, column: 4, scope: !7)
