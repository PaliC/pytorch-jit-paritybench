; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 2, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !13
  %13 = shl i32 %12, 8, !dbg !14
  %14 = and i32 %11, 127, !dbg !15
  %15 = or disjoint i32 %14, 128, !dbg !15
  %16 = or disjoint i32 %13, %14, !dbg !16
  %17 = or disjoint i32 %13, %15, !dbg !16
  %18 = icmp slt i32 %16, 256, !dbg !17
  %19 = icmp slt i32 %17, 256, !dbg !17
  %.frozen = freeze i32 %10, !dbg !18
  %20 = sdiv i32 %.frozen, 256, !dbg !18
  %21 = mul i32 %20, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = shl i32 %16, 8, !dbg !20
  %23 = shl i32 %17, 8, !dbg !20
  %24 = shl i32 %20, 16, !dbg !21
  %25 = add i32 %24, %.decomposed, !dbg !22
  %26 = add i32 %25, %22, !dbg !23
  %27 = add i32 %25, %23, !dbg !23
  %28 = sext i32 %26 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = sext i32 %27 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %18) #4, !dbg !25
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %19) #4, !dbg !25
  %34 = sext i32 %.decomposed to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !28
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !29
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !29
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !29
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !29
  %43 = bitcast i32 %39 to float, !dbg !29
  %44 = bitcast i32 %40 to float, !dbg !29
  %45 = bitcast i32 %41 to float, !dbg !29
  %46 = bitcast i32 %42 to float, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !32
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !33
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !34
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !34
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !34
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %55, 0, !dbg !35
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %56, 0, !dbg !35
  br i1 %.not.i, label %62, label %57, !dbg !35

57:                                               ; preds = %8
  br i1 %.not1.i, label %60, label %58, !dbg !35

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

62:                                               ; preds = %8
  br i1 %.not1.i, label %65, label %63, !dbg !35

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !35
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i2 = icmp eq i32 %67, 0, !dbg !35
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i5 = icmp eq i32 %68, 0, !dbg !35
  br i1 %.not.i2, label %74, label %69, !dbg !35

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %72, label %70, !dbg !35

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %77, label %75, !dbg !35

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

__nv_sqrtf.exit6:                                 ; preds = %70, %72, %75, %77
  %.0.i4 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !35
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i7 = icmp eq i32 %79, 0, !dbg !35
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i10 = icmp eq i32 %80, 0, !dbg !35
  br i1 %.not.i7, label %86, label %81, !dbg !35

81:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %84, label %82, !dbg !35

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

86:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %89, label %87, !dbg !35

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !35
  br label %__nv_sqrtf.exit11, !dbg !35

__nv_sqrtf.exit11:                                ; preds = %82, %84, %87, %89
  %.0.i9 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i12 = icmp eq i32 %91, 0, !dbg !35
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i15 = icmp eq i32 %92, 0, !dbg !35
  br i1 %.not.i12, label %98, label %93, !dbg !35

93:                                               ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %96, label %94, !dbg !35

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

98:                                               ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %101, label %99, !dbg !35

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit16, !dbg !35

__nv_sqrtf.exit16:                                ; preds = %94, %96, %99, %101
  %.0.i14 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !35
  %103 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !25
  %112 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !31
  %123 = lshr i32 %11, 6, !dbg !12
  %.lobit = and i32 %123, 1, !dbg !12
  %124 = or disjoint i32 %.lobit, %10, !dbg !36
  %125 = or disjoint i32 %124, 2, !dbg !36
  %.frozen17 = freeze i32 %125, !dbg !18
  %126 = sdiv i32 %.frozen17, 256, !dbg !18
  %.frozen19 = freeze i32 %124, !dbg !18
  %127 = sdiv i32 %.frozen19, 256, !dbg !18
  %128 = mul i32 %126, 256, !dbg !19
  %.decomposed18 = sub i32 %.frozen17, %128, !dbg !19
  %129 = mul i32 %127, 256, !dbg !19
  %.decomposed20 = sub i32 %.frozen19, %129, !dbg !19
  %130 = shl i32 %11, 2, !dbg !15
  %131 = and i32 %130, 252, !dbg !15
  %132 = or disjoint i32 %13, %131, !dbg !16
  %133 = icmp slt i32 %132, 256, !dbg !17
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !37
  %138 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !27
  %139 = insertelement <4 x i32> %138, i32 %106, i64 1, !dbg !27
  %140 = insertelement <4 x i32> %139, i32 %108, i64 2, !dbg !27
  %141 = insertelement <4 x i32> %140, i32 %110, i64 3, !dbg !27
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !27
  %143 = shufflevector <4 x float> %142, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %144 = insertelement <8 x i32> poison, i32 %103, i64 0, !dbg !25
  %145 = insertelement <8 x i32> %144, i32 %105, i64 1, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %107, i64 2, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %109, i64 3, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %111, i64 4, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %112, i64 5, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %113, i64 6, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %114, i64 7, !dbg !25
  %152 = bitcast <8 x i32> %151 to <8 x float>, !dbg !25
  %153 = fsub <8 x float> %152, %143, !dbg !38
  %154 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %116, i64 1, !dbg !33
  %156 = insertelement <4 x i32> %155, i32 %117, i64 2, !dbg !33
  %157 = insertelement <4 x i32> %156, i32 %118, i64 3, !dbg !33
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !33
  %159 = shufflevector <4 x float> %158, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %160 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !31
  %161 = insertelement <4 x i32> %160, i32 %120, i64 1, !dbg !31
  %162 = insertelement <4 x i32> %161, i32 %121, i64 2, !dbg !31
  %163 = insertelement <4 x i32> %162, i32 %122, i64 3, !dbg !31
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !31
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %166 = insertelement <8 x float> poison, float %137, i64 0, !dbg !39
  %167 = insertelement <8 x float> %166, float %136, i64 1, !dbg !39
  %168 = insertelement <8 x float> %167, float %135, i64 2, !dbg !39
  %169 = insertelement <8 x float> %168, float %134, i64 3, !dbg !39
  %170 = shufflevector <8 x float> %169, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %171 = fmul <8 x float> %153, %170, !dbg !39
  %172 = fmul <8 x float> %171, %165, !dbg !40
  %173 = fadd <8 x float> %172, %159, !dbg !41
  %174 = fcmp olt <8 x float> %173, zeroinitializer, !dbg !42
  %175 = extractelement <8 x i1> %174, i64 7, !dbg !46
  %176 = extractelement <8 x float> %173, i64 7, !dbg !46
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !46
  %178 = extractelement <8 x i1> %174, i64 6, !dbg !46
  %179 = extractelement <8 x float> %173, i64 6, !dbg !46
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !46
  %181 = extractelement <8 x i1> %174, i64 5, !dbg !46
  %182 = extractelement <8 x float> %173, i64 5, !dbg !46
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !46
  %184 = extractelement <8 x i1> %174, i64 4, !dbg !46
  %185 = extractelement <8 x float> %173, i64 4, !dbg !46
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !46
  %187 = extractelement <8 x i1> %174, i64 3, !dbg !46
  %188 = extractelement <8 x float> %173, i64 3, !dbg !46
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !46
  %190 = extractelement <8 x i1> %174, i64 2, !dbg !46
  %191 = extractelement <8 x float> %173, i64 2, !dbg !46
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !46
  %193 = extractelement <8 x i1> %174, i64 1, !dbg !46
  %194 = extractelement <8 x float> %173, i64 1, !dbg !46
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !46
  %196 = extractelement <8 x i1> %174, i64 0, !dbg !46
  %197 = extractelement <8 x float> %173, i64 0, !dbg !46
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !46
  %199 = shl nsw i32 %.decomposed20, 8, !dbg !47
  %200 = shl nsw i32 %.decomposed18, 8, !dbg !47
  %201 = add i32 %199, %132, !dbg !48
  %202 = add i32 %200, %132, !dbg !48
  %203 = shl i32 %127, 18, !dbg !49
  %204 = shl i32 %126, 18, !dbg !49
  %205 = add i32 %201, %203, !dbg !50
  %206 = add i32 %202, %204, !dbg !50
  %207 = sext i32 %205 to i64, !dbg !51
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !51
  %209 = sext i32 %206 to i64, !dbg !51
  %210 = getelementptr float, ptr addrspace(1) %5, i64 %209, !dbg !51
  %211 = and i32 %130, 508, !dbg !52
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !52
  %213 = bitcast float %177 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !52
  %214 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 1028, !dbg !52
  %215 = bitcast float %180 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !52
  %216 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 2056, !dbg !52
  %217 = bitcast float %183 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !52
  %218 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 3084, !dbg !52
  %219 = bitcast float %186 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !52
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !52
  %221 = bitcast float %189 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !52
  %222 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 1540, !dbg !52
  %223 = bitcast float %192 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #4, !dbg !52
  %224 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 2568, !dbg !52
  %225 = bitcast float %195 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !52
  %226 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 3596, !dbg !52
  %227 = bitcast float %198 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %228 = lshr i32 %211, 8, !dbg !52
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !52
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %211, !dbg !52
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !52
  %232 = or disjoint i32 %211, 1, !dbg !52
  %233 = getelementptr float, ptr addrspace(3) %229, i32 %232, !dbg !52
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !52
  %235 = or disjoint i32 %211, 2, !dbg !52
  %236 = getelementptr float, ptr addrspace(3) %229, i32 %235, !dbg !52
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !52
  %238 = or disjoint i32 %211, 3, !dbg !52
  %239 = getelementptr float, ptr addrspace(3) %229, i32 %238, !dbg !52
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !52
  %241 = or disjoint i32 %211, 512, !dbg !52
  %242 = lshr i32 %241, 8, !dbg !52
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !52
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !52
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !52
  %246 = or disjoint i32 %211, 513, !dbg !52
  %247 = lshr i32 %246, 8, !dbg !52
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !52
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !52
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !52
  %251 = or disjoint i32 %211, 514, !dbg !52
  %252 = lshr i32 %251, 8, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !52
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !52
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !52
  %256 = or disjoint i32 %211, 515, !dbg !52
  %257 = lshr i32 %256, 8, !dbg !52
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !52
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !52
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %234, i32 %237, i32 %240, ptr addrspace(1) %208, i1 %133) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %250, i32 %255, i32 %260, ptr addrspace(1) %210, i1 %133) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4qunnwrfkiauff2xvvr4px3spqhmbyo6fuama2gzvc34crllpq.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 50, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 44, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 55, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 23, column: 23, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 46, scope: !7)
!50 = !DILocation(line: 49, column: 39, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 58, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
