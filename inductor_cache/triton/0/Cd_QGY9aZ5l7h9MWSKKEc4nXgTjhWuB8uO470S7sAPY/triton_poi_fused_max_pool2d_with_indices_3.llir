; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %12, 16, !dbg !13
  %17 = or disjoint i32 %12, 20, !dbg !13
  %18 = or disjoint i32 %12, 24, !dbg !13
  %19 = or disjoint i32 %12, 28, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = icmp slt i32 %12, 256, !dbg !14
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = and i32 %7, 31, !dbg !17
  %33 = lshr i32 %7, 3, !dbg !17
  %34 = and i32 %33, 15, !dbg !17
  %35 = or disjoint i32 %31, %32, !dbg !18
  %36 = or disjoint i32 %31, %34, !dbg !18
  %37 = or disjoint i32 %36, 16, !dbg !18
  %38 = icmp slt i32 %35, 49, !dbg !19
  %39 = icmp slt i32 %36, 49, !dbg !19
  %40 = icmp slt i32 %37, 49, !dbg !19
  %.frozen = freeze i32 %35, !dbg !20
  %41 = sdiv i32 %.frozen, 7, !dbg !20
  %42 = mul i32 %41, 7, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %.frozen19 = freeze i32 %20, !dbg !22
  %43 = sdiv i32 %.frozen19, 64, !dbg !22
  %44 = mul i32 %43, 64, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %44, !dbg !23
  %45 = shl nsw i32 %.decomposed, 1, !dbg !24
  %46 = mul i32 %41, 30, !dbg !25
  %47 = add i32 %45, %46, !dbg !26
  %48 = mul i32 %12, 225, !dbg !27
  %49 = mul i32 %13, 225, !dbg !27
  %50 = mul i32 %14, 225, !dbg !27
  %51 = mul i32 %15, 225, !dbg !27
  %52 = mul i32 %16, 225, !dbg !27
  %53 = mul i32 %17, 225, !dbg !27
  %54 = mul i32 %18, 225, !dbg !27
  %55 = mul i32 %19, 225, !dbg !27
  %56 = add i32 %47, %48, !dbg !28
  %57 = add i32 %47, %49, !dbg !28
  %58 = add i32 %47, %50, !dbg !28
  %59 = add i32 %47, %51, !dbg !28
  %60 = add i32 %47, %52, !dbg !28
  %61 = add i32 %47, %53, !dbg !28
  %62 = add i32 %47, %54, !dbg !28
  %63 = add i32 %47, %55, !dbg !28
  %64 = sext i32 %56 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = sext i32 %57 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %58 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = sext i32 %59 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !29
  %72 = sext i32 %60 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !29
  %74 = sext i32 %61 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %62 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %63 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = and i1 %21, %38, !dbg !30
  %81 = and i1 %22, %38, !dbg !30
  %82 = and i1 %23, %38, !dbg !30
  %83 = and i1 %24, %38, !dbg !30
  %84 = and i1 %25, %38, !dbg !30
  %85 = and i1 %26, %38, !dbg !30
  %86 = and i1 %27, %38, !dbg !30
  %87 = and i1 %28, %38, !dbg !30
  %88 = and i1 %29, %39, !dbg !30
  %89 = and i1 %40, %29, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %80) #2, !dbg !31
  %91 = bitcast i32 %90 to float, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %81) #2, !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %82) #2, !dbg !31
  %95 = bitcast i32 %94 to float, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %83) #2, !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %84) #2, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %85) #2, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %86) #2, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %87) #2, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = or disjoint i32 %45, 1, !dbg !32
  %107 = add i32 %106, %46, !dbg !33
  %108 = add i32 %107, %48, !dbg !34
  %109 = add i32 %107, %49, !dbg !34
  %110 = add i32 %107, %50, !dbg !34
  %111 = add i32 %107, %51, !dbg !34
  %112 = add i32 %107, %52, !dbg !34
  %113 = add i32 %107, %53, !dbg !34
  %114 = add i32 %107, %54, !dbg !34
  %115 = add i32 %107, %55, !dbg !34
  %116 = sext i32 %108 to i64, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !35
  %118 = sext i32 %109 to i64, !dbg !35
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !35
  %120 = sext i32 %110 to i64, !dbg !35
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !35
  %122 = sext i32 %111 to i64, !dbg !35
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !35
  %124 = sext i32 %112 to i64, !dbg !35
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !35
  %126 = sext i32 %113 to i64, !dbg !35
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !35
  %128 = sext i32 %114 to i64, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !35
  %130 = sext i32 %115 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %80) #2, !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %81) #2, !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %82) #2, !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %83) #2, !dbg !36
  %139 = bitcast i32 %138 to float, !dbg !36
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %84) #2, !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %85) #2, !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %86) #2, !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %87) #2, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = add i32 %47, 2, !dbg !37
  %149 = add i32 %148, %48, !dbg !38
  %150 = add i32 %148, %49, !dbg !38
  %151 = add i32 %148, %50, !dbg !38
  %152 = add i32 %148, %51, !dbg !38
  %153 = add i32 %148, %52, !dbg !38
  %154 = add i32 %148, %53, !dbg !38
  %155 = add i32 %148, %54, !dbg !38
  %156 = add i32 %148, %55, !dbg !38
  %157 = sext i32 %149 to i64, !dbg !39
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !39
  %159 = sext i32 %150 to i64, !dbg !39
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !39
  %161 = sext i32 %151 to i64, !dbg !39
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !39
  %163 = sext i32 %152 to i64, !dbg !39
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !39
  %165 = sext i32 %153 to i64, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !39
  %167 = sext i32 %154 to i64, !dbg !39
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !39
  %169 = sext i32 %155 to i64, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !39
  %171 = sext i32 %156 to i64, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !39
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %80) #2, !dbg !40
  %174 = bitcast i32 %173 to float, !dbg !40
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %81) #2, !dbg !40
  %176 = bitcast i32 %175 to float, !dbg !40
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %82) #2, !dbg !40
  %178 = bitcast i32 %177 to float, !dbg !40
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %83) #2, !dbg !40
  %180 = bitcast i32 %179 to float, !dbg !40
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %84) #2, !dbg !40
  %182 = bitcast i32 %181 to float, !dbg !40
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %85) #2, !dbg !40
  %184 = bitcast i32 %183 to float, !dbg !40
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %86) #2, !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %87) #2, !dbg !40
  %188 = bitcast i32 %187 to float, !dbg !40
  %189 = add i32 %47, 15, !dbg !41
  %190 = add i32 %189, %48, !dbg !42
  %191 = add i32 %189, %49, !dbg !42
  %192 = add i32 %189, %50, !dbg !42
  %193 = add i32 %189, %51, !dbg !42
  %194 = add i32 %189, %52, !dbg !42
  %195 = add i32 %189, %53, !dbg !42
  %196 = add i32 %189, %54, !dbg !42
  %197 = add i32 %189, %55, !dbg !42
  %198 = sext i32 %190 to i64, !dbg !43
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !43
  %200 = sext i32 %191 to i64, !dbg !43
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !43
  %202 = sext i32 %192 to i64, !dbg !43
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !43
  %204 = sext i32 %193 to i64, !dbg !43
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !43
  %206 = sext i32 %194 to i64, !dbg !43
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !43
  %208 = sext i32 %195 to i64, !dbg !43
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !43
  %210 = sext i32 %196 to i64, !dbg !43
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !43
  %212 = sext i32 %197 to i64, !dbg !43
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !43
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %80) #2, !dbg !44
  %215 = bitcast i32 %214 to float, !dbg !44
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %81) #2, !dbg !44
  %217 = bitcast i32 %216 to float, !dbg !44
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %82) #2, !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %83) #2, !dbg !44
  %221 = bitcast i32 %220 to float, !dbg !44
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %84) #2, !dbg !44
  %223 = bitcast i32 %222 to float, !dbg !44
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %85) #2, !dbg !44
  %225 = bitcast i32 %224 to float, !dbg !44
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %86) #2, !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %87) #2, !dbg !44
  %229 = bitcast i32 %228 to float, !dbg !44
  %230 = add i32 %47, 16, !dbg !45
  %231 = add i32 %230, %48, !dbg !46
  %232 = add i32 %230, %49, !dbg !46
  %233 = add i32 %230, %50, !dbg !46
  %234 = add i32 %230, %51, !dbg !46
  %235 = add i32 %230, %52, !dbg !46
  %236 = add i32 %230, %53, !dbg !46
  %237 = add i32 %230, %54, !dbg !46
  %238 = add i32 %230, %55, !dbg !46
  %239 = sext i32 %231 to i64, !dbg !47
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !47
  %241 = sext i32 %232 to i64, !dbg !47
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !47
  %243 = sext i32 %233 to i64, !dbg !47
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !47
  %245 = sext i32 %234 to i64, !dbg !47
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !47
  %247 = sext i32 %235 to i64, !dbg !47
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !47
  %249 = sext i32 %236 to i64, !dbg !47
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !47
  %251 = sext i32 %237 to i64, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !47
  %253 = sext i32 %238 to i64, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !47
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %80) #2, !dbg !48
  %256 = bitcast i32 %255 to float, !dbg !48
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %81) #2, !dbg !48
  %258 = bitcast i32 %257 to float, !dbg !48
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %82) #2, !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %83) #2, !dbg !48
  %262 = bitcast i32 %261 to float, !dbg !48
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %84) #2, !dbg !48
  %264 = bitcast i32 %263 to float, !dbg !48
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 %85) #2, !dbg !48
  %266 = bitcast i32 %265 to float, !dbg !48
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %86) #2, !dbg !48
  %268 = bitcast i32 %267 to float, !dbg !48
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %87) #2, !dbg !48
  %270 = bitcast i32 %269 to float, !dbg !48
  %271 = add i32 %47, 17, !dbg !49
  %272 = add i32 %271, %48, !dbg !50
  %273 = add i32 %271, %49, !dbg !50
  %274 = add i32 %271, %50, !dbg !50
  %275 = add i32 %271, %51, !dbg !50
  %276 = add i32 %271, %52, !dbg !50
  %277 = add i32 %271, %53, !dbg !50
  %278 = add i32 %271, %54, !dbg !50
  %279 = add i32 %271, %55, !dbg !50
  %280 = sext i32 %272 to i64, !dbg !51
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !51
  %282 = sext i32 %273 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !51
  %284 = sext i32 %274 to i64, !dbg !51
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !51
  %286 = sext i32 %275 to i64, !dbg !51
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !51
  %288 = sext i32 %276 to i64, !dbg !51
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !51
  %290 = sext i32 %277 to i64, !dbg !51
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !51
  %292 = sext i32 %278 to i64, !dbg !51
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !51
  %294 = sext i32 %279 to i64, !dbg !51
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !51
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %80) #2, !dbg !52
  %297 = bitcast i32 %296 to float, !dbg !52
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %81) #2, !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %82) #2, !dbg !52
  %301 = bitcast i32 %300 to float, !dbg !52
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %83) #2, !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %84) #2, !dbg !52
  %305 = bitcast i32 %304 to float, !dbg !52
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %85) #2, !dbg !52
  %307 = bitcast i32 %306 to float, !dbg !52
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %86) #2, !dbg !52
  %309 = bitcast i32 %308 to float, !dbg !52
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %87) #2, !dbg !52
  %311 = bitcast i32 %310 to float, !dbg !52
  %312 = add i32 %47, 30, !dbg !53
  %313 = add i32 %312, %48, !dbg !54
  %314 = add i32 %312, %49, !dbg !54
  %315 = add i32 %312, %50, !dbg !54
  %316 = add i32 %312, %51, !dbg !54
  %317 = add i32 %312, %52, !dbg !54
  %318 = add i32 %312, %53, !dbg !54
  %319 = add i32 %312, %54, !dbg !54
  %320 = add i32 %312, %55, !dbg !54
  %321 = sext i32 %313 to i64, !dbg !55
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !55
  %323 = sext i32 %314 to i64, !dbg !55
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !55
  %325 = sext i32 %315 to i64, !dbg !55
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !55
  %327 = sext i32 %316 to i64, !dbg !55
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !55
  %329 = sext i32 %317 to i64, !dbg !55
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !55
  %331 = sext i32 %318 to i64, !dbg !55
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !55
  %333 = sext i32 %319 to i64, !dbg !55
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !55
  %335 = sext i32 %320 to i64, !dbg !55
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !55
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 %80) #2, !dbg !56
  %338 = bitcast i32 %337 to float, !dbg !56
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %81) #2, !dbg !56
  %340 = bitcast i32 %339 to float, !dbg !56
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %82) #2, !dbg !56
  %342 = bitcast i32 %341 to float, !dbg !56
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %83) #2, !dbg !56
  %344 = bitcast i32 %343 to float, !dbg !56
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %84) #2, !dbg !56
  %346 = bitcast i32 %345 to float, !dbg !56
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %85) #2, !dbg !56
  %348 = bitcast i32 %347 to float, !dbg !56
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %86) #2, !dbg !56
  %350 = bitcast i32 %349 to float, !dbg !56
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %87) #2, !dbg !56
  %352 = bitcast i32 %351 to float, !dbg !56
  %353 = add i32 %47, 31, !dbg !57
  %354 = add i32 %353, %48, !dbg !58
  %355 = add i32 %353, %49, !dbg !58
  %356 = add i32 %353, %50, !dbg !58
  %357 = add i32 %353, %51, !dbg !58
  %358 = add i32 %353, %52, !dbg !58
  %359 = add i32 %353, %53, !dbg !58
  %360 = add i32 %353, %54, !dbg !58
  %361 = add i32 %353, %55, !dbg !58
  %362 = sext i32 %354 to i64, !dbg !59
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !59
  %364 = sext i32 %355 to i64, !dbg !59
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !59
  %366 = sext i32 %356 to i64, !dbg !59
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !59
  %368 = sext i32 %357 to i64, !dbg !59
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !59
  %370 = sext i32 %358 to i64, !dbg !59
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !59
  %372 = sext i32 %359 to i64, !dbg !59
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !59
  %374 = sext i32 %360 to i64, !dbg !59
  %375 = getelementptr float, ptr addrspace(1) %0, i64 %374, !dbg !59
  %376 = sext i32 %361 to i64, !dbg !59
  %377 = getelementptr float, ptr addrspace(1) %0, i64 %376, !dbg !59
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %80) #2, !dbg !60
  %379 = bitcast i32 %378 to float, !dbg !60
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %81) #2, !dbg !60
  %381 = bitcast i32 %380 to float, !dbg !60
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %82) #2, !dbg !60
  %383 = bitcast i32 %382 to float, !dbg !60
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %83) #2, !dbg !60
  %385 = bitcast i32 %384 to float, !dbg !60
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %84) #2, !dbg !60
  %387 = bitcast i32 %386 to float, !dbg !60
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %85) #2, !dbg !60
  %389 = bitcast i32 %388 to float, !dbg !60
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %86) #2, !dbg !60
  %391 = bitcast i32 %390 to float, !dbg !60
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %87) #2, !dbg !60
  %393 = bitcast i32 %392 to float, !dbg !60
  %394 = add i32 %47, 32, !dbg !61
  %395 = add i32 %394, %48, !dbg !62
  %396 = add i32 %394, %49, !dbg !62
  %397 = add i32 %394, %50, !dbg !62
  %398 = add i32 %394, %51, !dbg !62
  %399 = add i32 %394, %52, !dbg !62
  %400 = add i32 %394, %53, !dbg !62
  %401 = add i32 %394, %54, !dbg !62
  %402 = add i32 %394, %55, !dbg !62
  %403 = sext i32 %395 to i64, !dbg !63
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !63
  %405 = sext i32 %396 to i64, !dbg !63
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !63
  %407 = sext i32 %397 to i64, !dbg !63
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !63
  %409 = sext i32 %398 to i64, !dbg !63
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !63
  %411 = sext i32 %399 to i64, !dbg !63
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !63
  %413 = sext i32 %400 to i64, !dbg !63
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !63
  %415 = sext i32 %401 to i64, !dbg !63
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !63
  %417 = sext i32 %402 to i64, !dbg !63
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !63
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %404, i1 %80) #2, !dbg !64
  %420 = bitcast i32 %419 to float, !dbg !64
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %406, i1 %81) #2, !dbg !64
  %422 = bitcast i32 %421 to float, !dbg !64
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 %82) #2, !dbg !64
  %424 = bitcast i32 %423 to float, !dbg !64
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 %83) #2, !dbg !64
  %426 = bitcast i32 %425 to float, !dbg !64
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %84) #2, !dbg !64
  %428 = bitcast i32 %427 to float, !dbg !64
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 %85) #2, !dbg !64
  %430 = bitcast i32 %429 to float, !dbg !64
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %86) #2, !dbg !64
  %432 = bitcast i32 %431 to float, !dbg !64
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %418, i1 %87) #2, !dbg !64
  %434 = bitcast i32 %433 to float, !dbg !64
  %435 = fcmp ogt float %133, %91, !dbg !65
  %436 = fcmp ogt float %135, %93, !dbg !65
  %437 = fcmp ogt float %137, %95, !dbg !65
  %438 = fcmp ogt float %139, %97, !dbg !65
  %439 = fcmp ogt float %141, %99, !dbg !65
  %440 = fcmp ogt float %143, %101, !dbg !65
  %441 = fcmp ogt float %145, %103, !dbg !65
  %442 = fcmp ogt float %147, %105, !dbg !65
  %443 = fcmp uno float %133, 0.000000e+00, !dbg !69
  %444 = fcmp uno float %135, 0.000000e+00, !dbg !69
  %445 = fcmp uno float %137, 0.000000e+00, !dbg !69
  %446 = fcmp uno float %139, 0.000000e+00, !dbg !69
  %447 = fcmp uno float %141, 0.000000e+00, !dbg !69
  %448 = fcmp uno float %143, 0.000000e+00, !dbg !69
  %449 = fcmp uno float %145, 0.000000e+00, !dbg !69
  %450 = fcmp uno float %147, 0.000000e+00, !dbg !69
  %451 = or i1 %435, %443, !dbg !70
  %452 = or i1 %436, %444, !dbg !70
  %453 = or i1 %437, %445, !dbg !70
  %454 = or i1 %438, %446, !dbg !70
  %455 = or i1 %439, %447, !dbg !70
  %456 = or i1 %440, %448, !dbg !70
  %457 = or i1 %441, %449, !dbg !70
  %458 = or i1 %442, %450, !dbg !70
  %459 = select i1 %451, float %133, float %91, !dbg !71
  %460 = select i1 %452, float %135, float %93, !dbg !71
  %461 = select i1 %453, float %137, float %95, !dbg !71
  %462 = select i1 %454, float %139, float %97, !dbg !71
  %463 = select i1 %455, float %141, float %99, !dbg !71
  %464 = select i1 %456, float %143, float %101, !dbg !71
  %465 = select i1 %457, float %145, float %103, !dbg !71
  %466 = select i1 %458, float %147, float %105, !dbg !71
  %467 = fcmp olt float %459, %174, !dbg !72
  %468 = fcmp olt float %460, %176, !dbg !72
  %469 = fcmp olt float %461, %178, !dbg !72
  %470 = fcmp olt float %462, %180, !dbg !72
  %471 = fcmp olt float %463, %182, !dbg !72
  %472 = fcmp olt float %464, %184, !dbg !72
  %473 = fcmp olt float %465, %186, !dbg !72
  %474 = fcmp olt float %466, %188, !dbg !72
  %475 = fcmp uno float %174, 0.000000e+00, !dbg !74
  %476 = fcmp uno float %176, 0.000000e+00, !dbg !74
  %477 = fcmp uno float %178, 0.000000e+00, !dbg !74
  %478 = fcmp uno float %180, 0.000000e+00, !dbg !74
  %479 = fcmp uno float %182, 0.000000e+00, !dbg !74
  %480 = fcmp uno float %184, 0.000000e+00, !dbg !74
  %481 = fcmp uno float %186, 0.000000e+00, !dbg !74
  %482 = fcmp uno float %188, 0.000000e+00, !dbg !74
  %483 = or i1 %467, %475, !dbg !75
  %484 = or i1 %468, %476, !dbg !75
  %485 = or i1 %469, %477, !dbg !75
  %486 = or i1 %470, %478, !dbg !75
  %487 = or i1 %471, %479, !dbg !75
  %488 = or i1 %472, %480, !dbg !75
  %489 = or i1 %473, %481, !dbg !75
  %490 = or i1 %474, %482, !dbg !75
  %491 = select i1 %483, float %174, float %459, !dbg !76
  %492 = select i1 %484, float %176, float %460, !dbg !76
  %493 = select i1 %485, float %178, float %461, !dbg !76
  %494 = select i1 %486, float %180, float %462, !dbg !76
  %495 = select i1 %487, float %182, float %463, !dbg !76
  %496 = select i1 %488, float %184, float %464, !dbg !76
  %497 = select i1 %489, float %186, float %465, !dbg !76
  %498 = select i1 %490, float %188, float %466, !dbg !76
  %499 = fcmp olt float %491, %215, !dbg !77
  %500 = fcmp olt float %492, %217, !dbg !77
  %501 = fcmp olt float %493, %219, !dbg !77
  %502 = fcmp olt float %494, %221, !dbg !77
  %503 = fcmp olt float %495, %223, !dbg !77
  %504 = fcmp olt float %496, %225, !dbg !77
  %505 = fcmp olt float %497, %227, !dbg !77
  %506 = fcmp olt float %498, %229, !dbg !77
  %507 = fcmp uno float %215, 0.000000e+00, !dbg !79
  %508 = fcmp uno float %217, 0.000000e+00, !dbg !79
  %509 = fcmp uno float %219, 0.000000e+00, !dbg !79
  %510 = fcmp uno float %221, 0.000000e+00, !dbg !79
  %511 = fcmp uno float %223, 0.000000e+00, !dbg !79
  %512 = fcmp uno float %225, 0.000000e+00, !dbg !79
  %513 = fcmp uno float %227, 0.000000e+00, !dbg !79
  %514 = fcmp uno float %229, 0.000000e+00, !dbg !79
  %515 = or i1 %499, %507, !dbg !80
  %516 = or i1 %500, %508, !dbg !80
  %517 = or i1 %501, %509, !dbg !80
  %518 = or i1 %502, %510, !dbg !80
  %519 = or i1 %503, %511, !dbg !80
  %520 = or i1 %504, %512, !dbg !80
  %521 = or i1 %505, %513, !dbg !80
  %522 = or i1 %506, %514, !dbg !80
  %523 = select i1 %515, float %215, float %491, !dbg !81
  %524 = select i1 %516, float %217, float %492, !dbg !81
  %525 = select i1 %517, float %219, float %493, !dbg !81
  %526 = select i1 %518, float %221, float %494, !dbg !81
  %527 = select i1 %519, float %223, float %495, !dbg !81
  %528 = select i1 %520, float %225, float %496, !dbg !81
  %529 = select i1 %521, float %227, float %497, !dbg !81
  %530 = select i1 %522, float %229, float %498, !dbg !81
  %531 = fcmp olt float %523, %256, !dbg !82
  %532 = fcmp olt float %524, %258, !dbg !82
  %533 = fcmp olt float %525, %260, !dbg !82
  %534 = fcmp olt float %526, %262, !dbg !82
  %535 = fcmp olt float %527, %264, !dbg !82
  %536 = fcmp olt float %528, %266, !dbg !82
  %537 = fcmp olt float %529, %268, !dbg !82
  %538 = fcmp olt float %530, %270, !dbg !82
  %539 = fcmp uno float %256, 0.000000e+00, !dbg !84
  %540 = fcmp uno float %258, 0.000000e+00, !dbg !84
  %541 = fcmp uno float %260, 0.000000e+00, !dbg !84
  %542 = fcmp uno float %262, 0.000000e+00, !dbg !84
  %543 = fcmp uno float %264, 0.000000e+00, !dbg !84
  %544 = fcmp uno float %266, 0.000000e+00, !dbg !84
  %545 = fcmp uno float %268, 0.000000e+00, !dbg !84
  %546 = fcmp uno float %270, 0.000000e+00, !dbg !84
  %547 = or i1 %531, %539, !dbg !85
  %548 = or i1 %532, %540, !dbg !85
  %549 = or i1 %533, %541, !dbg !85
  %550 = or i1 %534, %542, !dbg !85
  %551 = or i1 %535, %543, !dbg !85
  %552 = or i1 %536, %544, !dbg !85
  %553 = or i1 %537, %545, !dbg !85
  %554 = or i1 %538, %546, !dbg !85
  %555 = select i1 %547, float %256, float %523, !dbg !86
  %556 = select i1 %548, float %258, float %524, !dbg !86
  %557 = select i1 %549, float %260, float %525, !dbg !86
  %558 = select i1 %550, float %262, float %526, !dbg !86
  %559 = select i1 %551, float %264, float %527, !dbg !86
  %560 = select i1 %552, float %266, float %528, !dbg !86
  %561 = select i1 %553, float %268, float %529, !dbg !86
  %562 = select i1 %554, float %270, float %530, !dbg !86
  %563 = fcmp olt float %555, %297, !dbg !87
  %564 = fcmp olt float %556, %299, !dbg !87
  %565 = fcmp olt float %557, %301, !dbg !87
  %566 = fcmp olt float %558, %303, !dbg !87
  %567 = fcmp olt float %559, %305, !dbg !87
  %568 = fcmp olt float %560, %307, !dbg !87
  %569 = fcmp olt float %561, %309, !dbg !87
  %570 = fcmp olt float %562, %311, !dbg !87
  %571 = fcmp uno float %297, 0.000000e+00, !dbg !89
  %572 = fcmp uno float %299, 0.000000e+00, !dbg !89
  %573 = fcmp uno float %301, 0.000000e+00, !dbg !89
  %574 = fcmp uno float %303, 0.000000e+00, !dbg !89
  %575 = fcmp uno float %305, 0.000000e+00, !dbg !89
  %576 = fcmp uno float %307, 0.000000e+00, !dbg !89
  %577 = fcmp uno float %309, 0.000000e+00, !dbg !89
  %578 = fcmp uno float %311, 0.000000e+00, !dbg !89
  %579 = or i1 %563, %571, !dbg !90
  %580 = or i1 %564, %572, !dbg !90
  %581 = or i1 %565, %573, !dbg !90
  %582 = or i1 %566, %574, !dbg !90
  %583 = or i1 %567, %575, !dbg !90
  %584 = or i1 %568, %576, !dbg !90
  %585 = or i1 %569, %577, !dbg !90
  %586 = or i1 %570, %578, !dbg !90
  %587 = select i1 %579, float %297, float %555, !dbg !91
  %588 = select i1 %580, float %299, float %556, !dbg !91
  %589 = select i1 %581, float %301, float %557, !dbg !91
  %590 = select i1 %582, float %303, float %558, !dbg !91
  %591 = select i1 %583, float %305, float %559, !dbg !91
  %592 = select i1 %584, float %307, float %560, !dbg !91
  %593 = select i1 %585, float %309, float %561, !dbg !91
  %594 = select i1 %586, float %311, float %562, !dbg !91
  %595 = fcmp olt float %587, %338, !dbg !92
  %596 = fcmp olt float %588, %340, !dbg !92
  %597 = fcmp olt float %589, %342, !dbg !92
  %598 = fcmp olt float %590, %344, !dbg !92
  %599 = fcmp olt float %591, %346, !dbg !92
  %600 = fcmp olt float %592, %348, !dbg !92
  %601 = fcmp olt float %593, %350, !dbg !92
  %602 = fcmp olt float %594, %352, !dbg !92
  %603 = fcmp uno float %338, 0.000000e+00, !dbg !94
  %604 = fcmp uno float %340, 0.000000e+00, !dbg !94
  %605 = fcmp uno float %342, 0.000000e+00, !dbg !94
  %606 = fcmp uno float %344, 0.000000e+00, !dbg !94
  %607 = fcmp uno float %346, 0.000000e+00, !dbg !94
  %608 = fcmp uno float %348, 0.000000e+00, !dbg !94
  %609 = fcmp uno float %350, 0.000000e+00, !dbg !94
  %610 = fcmp uno float %352, 0.000000e+00, !dbg !94
  %611 = or i1 %595, %603, !dbg !95
  %612 = or i1 %596, %604, !dbg !95
  %613 = or i1 %597, %605, !dbg !95
  %614 = or i1 %598, %606, !dbg !95
  %615 = or i1 %599, %607, !dbg !95
  %616 = or i1 %600, %608, !dbg !95
  %617 = or i1 %601, %609, !dbg !95
  %618 = or i1 %602, %610, !dbg !95
  %619 = select i1 %611, float %338, float %587, !dbg !96
  %620 = select i1 %612, float %340, float %588, !dbg !96
  %621 = select i1 %613, float %342, float %589, !dbg !96
  %622 = select i1 %614, float %344, float %590, !dbg !96
  %623 = select i1 %615, float %346, float %591, !dbg !96
  %624 = select i1 %616, float %348, float %592, !dbg !96
  %625 = select i1 %617, float %350, float %593, !dbg !96
  %626 = select i1 %618, float %352, float %594, !dbg !96
  %627 = fcmp olt float %619, %379, !dbg !97
  %628 = fcmp olt float %620, %381, !dbg !97
  %629 = fcmp olt float %621, %383, !dbg !97
  %630 = fcmp olt float %622, %385, !dbg !97
  %631 = fcmp olt float %623, %387, !dbg !97
  %632 = fcmp olt float %624, %389, !dbg !97
  %633 = fcmp olt float %625, %391, !dbg !97
  %634 = fcmp olt float %626, %393, !dbg !97
  %635 = fcmp uno float %379, 0.000000e+00, !dbg !99
  %636 = fcmp uno float %381, 0.000000e+00, !dbg !99
  %637 = fcmp uno float %383, 0.000000e+00, !dbg !99
  %638 = fcmp uno float %385, 0.000000e+00, !dbg !99
  %639 = fcmp uno float %387, 0.000000e+00, !dbg !99
  %640 = fcmp uno float %389, 0.000000e+00, !dbg !99
  %641 = fcmp uno float %391, 0.000000e+00, !dbg !99
  %642 = fcmp uno float %393, 0.000000e+00, !dbg !99
  %643 = or i1 %627, %635, !dbg !100
  %644 = or i1 %628, %636, !dbg !100
  %645 = or i1 %629, %637, !dbg !100
  %646 = or i1 %630, %638, !dbg !100
  %647 = or i1 %631, %639, !dbg !100
  %648 = or i1 %632, %640, !dbg !100
  %649 = or i1 %633, %641, !dbg !100
  %650 = or i1 %634, %642, !dbg !100
  %651 = select i1 %643, float %379, float %619, !dbg !101
  %652 = select i1 %644, float %381, float %620, !dbg !101
  %653 = select i1 %645, float %383, float %621, !dbg !101
  %654 = select i1 %646, float %385, float %622, !dbg !101
  %655 = select i1 %647, float %387, float %623, !dbg !101
  %656 = select i1 %648, float %389, float %624, !dbg !101
  %657 = select i1 %649, float %391, float %625, !dbg !101
  %658 = select i1 %650, float %393, float %626, !dbg !101
  %659 = fcmp olt float %651, %420, !dbg !102
  %660 = fcmp olt float %652, %422, !dbg !102
  %661 = fcmp olt float %653, %424, !dbg !102
  %662 = fcmp olt float %654, %426, !dbg !102
  %663 = fcmp olt float %655, %428, !dbg !102
  %664 = fcmp olt float %656, %430, !dbg !102
  %665 = fcmp olt float %657, %432, !dbg !102
  %666 = fcmp olt float %658, %434, !dbg !102
  %667 = fcmp uno float %420, 0.000000e+00, !dbg !104
  %668 = fcmp uno float %422, 0.000000e+00, !dbg !104
  %669 = fcmp uno float %424, 0.000000e+00, !dbg !104
  %670 = fcmp uno float %426, 0.000000e+00, !dbg !104
  %671 = fcmp uno float %428, 0.000000e+00, !dbg !104
  %672 = fcmp uno float %430, 0.000000e+00, !dbg !104
  %673 = fcmp uno float %432, 0.000000e+00, !dbg !104
  %674 = fcmp uno float %434, 0.000000e+00, !dbg !104
  %675 = or i1 %659, %667, !dbg !105
  %676 = or i1 %660, %668, !dbg !105
  %677 = or i1 %661, %669, !dbg !105
  %678 = or i1 %662, %670, !dbg !105
  %679 = or i1 %663, %671, !dbg !105
  %680 = or i1 %664, %672, !dbg !105
  %681 = or i1 %665, %673, !dbg !105
  %682 = or i1 %666, %674, !dbg !105
  %683 = shl i32 %36, 6, !dbg !106
  %684 = shl i32 %37, 6, !dbg !106
  %685 = mul i32 %43, 3136, !dbg !107
  %686 = add i32 %685, %.decomposed20, !dbg !108
  %687 = add i32 %686, %683, !dbg !109
  %688 = add i32 %686, %684, !dbg !109
  %689 = sext i32 %687 to i64, !dbg !110
  %690 = getelementptr float, ptr addrspace(1) %1, i64 %689, !dbg !110
  %691 = sext i32 %688 to i64, !dbg !110
  %692 = getelementptr float, ptr addrspace(1) %1, i64 %691, !dbg !110
  %693 = shl i32 %7, 5, !dbg !111
  %694 = and i32 %693, 992, !dbg !111
  %695 = or disjoint i32 %694, %9, !dbg !111
  %696 = and i32 %10, 508, !dbg !111
  %697 = lshr exact i32 %694, 3, !dbg !111
  %698 = add nuw nsw i32 %697, %695, !dbg !111
  %699 = zext nneg i32 %698 to i64, !dbg !111
  %700 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %699, !dbg !111
  %701 = bitcast float %651 to i32, !dbg !111
  %702 = select i1 %675, i32 %419, i32 %701, !dbg !112
  %703 = insertelement <1 x i32> poison, i32 %702, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %700, <1 x i32> %703, i1 true) #2, !dbg !111
  %704 = or disjoint i32 %695, 4, !dbg !111
  %705 = add nuw nsw i32 %704, %697, !dbg !111
  %706 = zext nneg i32 %705 to i64, !dbg !111
  %707 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %706, !dbg !111
  %708 = bitcast float %652 to i32, !dbg !111
  %709 = select i1 %676, i32 %421, i32 %708, !dbg !112
  %710 = insertelement <1 x i32> poison, i32 %709, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %707, <1 x i32> %710, i1 true) #2, !dbg !111
  %711 = or disjoint i32 %695, 8, !dbg !111
  %712 = add nuw nsw i32 %711, %697, !dbg !111
  %713 = zext nneg i32 %712 to i64, !dbg !111
  %714 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %713, !dbg !111
  %715 = bitcast float %653 to i32, !dbg !111
  %716 = select i1 %677, i32 %423, i32 %715, !dbg !112
  %717 = insertelement <1 x i32> poison, i32 %716, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %714, <1 x i32> %717, i1 true) #2, !dbg !111
  %718 = or disjoint i32 %695, 12, !dbg !111
  %719 = add nuw nsw i32 %718, %697, !dbg !111
  %720 = zext nneg i32 %719 to i64, !dbg !111
  %721 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %720, !dbg !111
  %722 = bitcast float %654 to i32, !dbg !111
  %723 = select i1 %678, i32 %425, i32 %722, !dbg !112
  %724 = insertelement <1 x i32> poison, i32 %723, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %721, <1 x i32> %724, i1 true) #2, !dbg !111
  %725 = or disjoint i32 %695, 16, !dbg !111
  %726 = add nuw nsw i32 %725, %697, !dbg !111
  %727 = zext nneg i32 %726 to i64, !dbg !111
  %728 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %727, !dbg !111
  %729 = bitcast float %655 to i32, !dbg !111
  %730 = select i1 %679, i32 %427, i32 %729, !dbg !112
  %731 = insertelement <1 x i32> poison, i32 %730, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %728, <1 x i32> %731, i1 true) #2, !dbg !111
  %732 = or disjoint i32 %695, 20, !dbg !111
  %733 = add nuw nsw i32 %732, %697, !dbg !111
  %734 = zext nneg i32 %733 to i64, !dbg !111
  %735 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %734, !dbg !111
  %736 = bitcast float %656 to i32, !dbg !111
  %737 = select i1 %680, i32 %429, i32 %736, !dbg !112
  %738 = insertelement <1 x i32> poison, i32 %737, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %735, <1 x i32> %738, i1 true) #2, !dbg !111
  %739 = or disjoint i32 %695, 24, !dbg !111
  %740 = add nuw nsw i32 %739, %697, !dbg !111
  %741 = zext nneg i32 %740 to i64, !dbg !111
  %742 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %741, !dbg !111
  %743 = bitcast float %657 to i32, !dbg !111
  %744 = select i1 %681, i32 %431, i32 %743, !dbg !112
  %745 = insertelement <1 x i32> poison, i32 %744, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %742, <1 x i32> %745, i1 true) #2, !dbg !111
  %746 = or disjoint i32 %695, 28, !dbg !111
  %747 = add nuw nsw i32 %746, %697, !dbg !111
  %748 = zext nneg i32 %747 to i64, !dbg !111
  %749 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %748, !dbg !111
  %750 = bitcast float %658 to i32, !dbg !111
  %751 = select i1 %682, i32 %433, i32 %750, !dbg !112
  %752 = insertelement <1 x i32> poison, i32 %751, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %749, <1 x i32> %752, i1 true) #2, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %753 = lshr i32 %10, 3, !dbg !111
  %754 = and i32 %753, 60, !dbg !111
  %755 = add nuw nsw i32 %754, %696, !dbg !111
  %756 = zext nneg i32 %755 to i64, !dbg !111
  %757 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %756, !dbg !111
  %758 = or disjoint i32 %696, 512, !dbg !111
  %759 = lshr i32 %758, 3, !dbg !111
  %760 = and i32 %759, 124, !dbg !111
  %761 = add nuw nsw i32 %760, %758, !dbg !111
  %762 = zext nneg i32 %761 to i64, !dbg !111
  %763 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %762, !dbg !111
  %764 = load <4 x i32>, ptr addrspace(3) %763, align 16, !dbg !111
  %.extract = load i32, ptr addrspace(3) %757, align 16, !dbg !111
  %765 = getelementptr inbounds i8, ptr addrspace(3) %757, i64 4, !dbg !111
  %.extract12 = load i32, ptr addrspace(3) %765, align 4, !dbg !111
  %766 = getelementptr inbounds i8, ptr addrspace(3) %757, i64 8, !dbg !111
  %.extract13 = load i32, ptr addrspace(3) %766, align 8, !dbg !111
  %767 = getelementptr inbounds i8, ptr addrspace(3) %757, i64 12, !dbg !111
  %.extract14 = load i32, ptr addrspace(3) %767, align 4, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %690, i1 %88) #2, !dbg !111
  %.extract15 = extractelement <4 x i32> %764, i64 0, !dbg !111
  %.extract16 = extractelement <4 x i32> %764, i64 1, !dbg !111
  %.extract17 = extractelement <4 x i32> %764, i64 2, !dbg !111
  %.extract18 = extractelement <4 x i32> %764, i64 3, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %692, i1 %89) #2, !dbg !111
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clrajhxipneeucss3k7cntaxm33uc7xx6iclqlobaod5waa2aa6l.py", directory: "inductor_cache/lr")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 49, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 62, scope: !7)
!31 = !DILocation(line: 34, column: 54, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 58, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 58, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 50, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 59, scope: !7)
!45 = !DILocation(line: 38, column: 42, scope: !7)
!46 = !DILocation(line: 38, column: 50, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 59, scope: !7)
!49 = !DILocation(line: 39, column: 42, scope: !7)
!50 = !DILocation(line: 39, column: 50, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 59, scope: !7)
!53 = !DILocation(line: 40, column: 43, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 60, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 41, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 60, scope: !7)
!61 = !DILocation(line: 42, column: 43, scope: !7)
!62 = !DILocation(line: 42, column: 51, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 60, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !93)
!93 = !DILocation(line: 48, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !103)
!103 = !DILocation(line: 50, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !103)
!106 = !DILocation(line: 51, column: 33, scope: !7)
!107 = !DILocation(line: 51, column: 43, scope: !7)
!108 = !DILocation(line: 51, column: 30, scope: !7)
!109 = !DILocation(line: 51, column: 38, scope: !7)
!110 = !DILocation(line: 51, column: 25, scope: !7)
!111 = !DILocation(line: 51, column: 55, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !103)
!113 = !DILocation(line: 51, column: 4, scope: !7)
