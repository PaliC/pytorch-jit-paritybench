; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = or disjoint i32 %9, 128, !dbg !13
  %11 = or disjoint i32 %9, 256, !dbg !13
  %12 = or disjoint i32 %9, 384, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 640, !dbg !13
  %15 = or disjoint i32 %9, 768, !dbg !13
  %16 = or disjoint i32 %9, 896, !dbg !13
  %17 = icmp slt i32 %9, 1905152, !dbg !14
  %18 = icmp slt i32 %10, 1905152, !dbg !14
  %19 = icmp slt i32 %11, 1905152, !dbg !14
  %20 = icmp slt i32 %12, 1905152, !dbg !14
  %21 = icmp slt i32 %13, 1905152, !dbg !14
  %22 = icmp slt i32 %14, 1905152, !dbg !14
  %23 = icmp slt i32 %15, 1905152, !dbg !14
  %24 = icmp slt i32 %16, 1905152, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %25 = sdiv i32 %.frozen, 61, !dbg !15
  %26 = mul i32 %25, 61, !dbg !16
  %.decomposed = sub i32 %.frozen, %26, !dbg !16
  %.frozen1 = freeze i32 %10, !dbg !15
  %27 = sdiv i32 %.frozen1, 61, !dbg !15
  %28 = mul i32 %27, 61, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %28, !dbg !16
  %.frozen3 = freeze i32 %11, !dbg !15
  %29 = sdiv i32 %.frozen3, 61, !dbg !15
  %30 = mul i32 %29, 61, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %30, !dbg !16
  %.frozen5 = freeze i32 %12, !dbg !15
  %31 = sdiv i32 %.frozen5, 61, !dbg !15
  %32 = mul i32 %31, 61, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %32, !dbg !16
  %.frozen7 = freeze i32 %13, !dbg !15
  %33 = sdiv i32 %.frozen7, 61, !dbg !15
  %34 = mul i32 %33, 61, !dbg !16
  %.decomposed8 = sub i32 %.frozen7, %34, !dbg !16
  %.frozen9 = freeze i32 %14, !dbg !15
  %35 = sdiv i32 %.frozen9, 61, !dbg !15
  %36 = mul i32 %35, 61, !dbg !16
  %.decomposed10 = sub i32 %.frozen9, %36, !dbg !16
  %.frozen11 = freeze i32 %15, !dbg !15
  %37 = sdiv i32 %.frozen11, 61, !dbg !15
  %38 = mul i32 %37, 61, !dbg !16
  %.decomposed12 = sub i32 %.frozen11, %38, !dbg !16
  %.frozen13 = freeze i32 %16, !dbg !15
  %39 = sdiv i32 %.frozen13, 61, !dbg !15
  %40 = mul i32 %39, 61, !dbg !16
  %.decomposed14 = sub i32 %.frozen13, %40, !dbg !16
  %.frozen15 = freeze i32 %9, !dbg !17
  %41 = sdiv i32 %.frozen15, 3721, !dbg !17
  %.frozen17 = freeze i32 %10, !dbg !17
  %42 = sdiv i32 %.frozen17, 3721, !dbg !17
  %.frozen19 = freeze i32 %11, !dbg !17
  %43 = sdiv i32 %.frozen19, 3721, !dbg !17
  %.frozen21 = freeze i32 %12, !dbg !17
  %44 = sdiv i32 %.frozen21, 3721, !dbg !17
  %.frozen23 = freeze i32 %13, !dbg !17
  %45 = sdiv i32 %.frozen23, 3721, !dbg !17
  %.frozen25 = freeze i32 %14, !dbg !17
  %46 = sdiv i32 %.frozen25, 3721, !dbg !17
  %.frozen27 = freeze i32 %15, !dbg !17
  %47 = sdiv i32 %.frozen27, 3721, !dbg !17
  %.frozen29 = freeze i32 %16, !dbg !17
  %48 = sdiv i32 %.frozen29, 3721, !dbg !17
  %49 = mul i32 %41, 3721, !dbg !18
  %.decomposed16 = sub i32 %.frozen15, %49, !dbg !18
  %50 = mul i32 %42, 3721, !dbg !18
  %.decomposed18 = sub i32 %.frozen17, %50, !dbg !18
  %51 = mul i32 %43, 3721, !dbg !18
  %.decomposed20 = sub i32 %.frozen19, %51, !dbg !18
  %52 = mul i32 %44, 3721, !dbg !18
  %.decomposed22 = sub i32 %.frozen21, %52, !dbg !18
  %53 = mul i32 %45, 3721, !dbg !18
  %.decomposed24 = sub i32 %.frozen23, %53, !dbg !18
  %54 = mul i32 %46, 3721, !dbg !18
  %.decomposed26 = sub i32 %.frozen25, %54, !dbg !18
  %55 = mul i32 %47, 3721, !dbg !18
  %.decomposed28 = sub i32 %.frozen27, %55, !dbg !18
  %56 = mul i32 %48, 3721, !dbg !18
  %.decomposed30 = sub i32 %.frozen29, %56, !dbg !18
  %57 = shl nsw i32 %.decomposed, 1, !dbg !19
  %58 = shl nsw i32 %.decomposed2, 1, !dbg !19
  %59 = shl nsw i32 %.decomposed4, 1, !dbg !19
  %60 = shl nsw i32 %.decomposed6, 1, !dbg !19
  %61 = shl nsw i32 %.decomposed8, 1, !dbg !19
  %62 = shl nsw i32 %.decomposed10, 1, !dbg !19
  %63 = shl nsw i32 %.decomposed12, 1, !dbg !19
  %64 = shl nsw i32 %.decomposed14, 1, !dbg !19
  %65 = mul i32 %25, 244, !dbg !20
  %66 = mul i32 %27, 244, !dbg !20
  %67 = mul i32 %29, 244, !dbg !20
  %68 = mul i32 %31, 244, !dbg !20
  %69 = mul i32 %33, 244, !dbg !20
  %70 = mul i32 %35, 244, !dbg !20
  %71 = mul i32 %37, 244, !dbg !20
  %72 = mul i32 %39, 244, !dbg !20
  %73 = add i32 %57, %65, !dbg !21
  %74 = add i32 %58, %66, !dbg !21
  %75 = add i32 %59, %67, !dbg !21
  %76 = add i32 %60, %68, !dbg !21
  %77 = add i32 %61, %69, !dbg !21
  %78 = add i32 %62, %70, !dbg !21
  %79 = add i32 %63, %71, !dbg !21
  %80 = add i32 %64, %72, !dbg !21
  %81 = sext i32 %73 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %74 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %75 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %76 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %77 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %78 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %79 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %80 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %17) #1, !dbg !23
  %98 = bitcast i32 %97 to float, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %18) #1, !dbg !23
  %100 = bitcast i32 %99 to float, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %19) #1, !dbg !23
  %102 = bitcast i32 %101 to float, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %20) #1, !dbg !23
  %104 = bitcast i32 %103 to float, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %21) #1, !dbg !23
  %106 = bitcast i32 %105 to float, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %22) #1, !dbg !23
  %108 = bitcast i32 %107 to float, !dbg !23
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #1, !dbg !23
  %110 = bitcast i32 %109 to float, !dbg !23
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %24) #1, !dbg !23
  %112 = bitcast i32 %111 to float, !dbg !23
  %113 = or disjoint i32 %73, 1, !dbg !24
  %114 = or disjoint i32 %74, 1, !dbg !24
  %115 = or disjoint i32 %75, 1, !dbg !24
  %116 = or disjoint i32 %76, 1, !dbg !24
  %117 = or disjoint i32 %77, 1, !dbg !24
  %118 = or disjoint i32 %78, 1, !dbg !24
  %119 = or disjoint i32 %79, 1, !dbg !24
  %120 = or disjoint i32 %80, 1, !dbg !24
  %121 = sext i32 %113 to i64, !dbg !25
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !25
  %123 = sext i32 %114 to i64, !dbg !25
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !25
  %125 = sext i32 %115 to i64, !dbg !25
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !25
  %127 = sext i32 %116 to i64, !dbg !25
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !25
  %129 = sext i32 %117 to i64, !dbg !25
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !25
  %131 = sext i32 %118 to i64, !dbg !25
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !25
  %133 = sext i32 %119 to i64, !dbg !25
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !25
  %135 = sext i32 %120 to i64, !dbg !25
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !25
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %17) #1, !dbg !26
  %138 = bitcast i32 %137 to float, !dbg !26
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %18) #1, !dbg !26
  %140 = bitcast i32 %139 to float, !dbg !26
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %19) #1, !dbg !26
  %142 = bitcast i32 %141 to float, !dbg !26
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %20) #1, !dbg !26
  %144 = bitcast i32 %143 to float, !dbg !26
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %21) #1, !dbg !26
  %146 = bitcast i32 %145 to float, !dbg !26
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %22) #1, !dbg !26
  %148 = bitcast i32 %147 to float, !dbg !26
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %23) #1, !dbg !26
  %150 = bitcast i32 %149 to float, !dbg !26
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %24) #1, !dbg !26
  %152 = bitcast i32 %151 to float, !dbg !26
  %153 = add i32 %73, 122, !dbg !27
  %154 = add i32 %74, 122, !dbg !27
  %155 = add i32 %75, 122, !dbg !27
  %156 = add i32 %76, 122, !dbg !27
  %157 = add i32 %77, 122, !dbg !27
  %158 = add i32 %78, 122, !dbg !27
  %159 = add i32 %79, 122, !dbg !27
  %160 = add i32 %80, 122, !dbg !27
  %161 = sext i32 %153 to i64, !dbg !28
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !28
  %163 = sext i32 %154 to i64, !dbg !28
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !28
  %165 = sext i32 %155 to i64, !dbg !28
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !28
  %167 = sext i32 %156 to i64, !dbg !28
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !28
  %169 = sext i32 %157 to i64, !dbg !28
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !28
  %171 = sext i32 %158 to i64, !dbg !28
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !28
  %173 = sext i32 %159 to i64, !dbg !28
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !28
  %175 = sext i32 %160 to i64, !dbg !28
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !28
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %17) #1, !dbg !29
  %178 = bitcast i32 %177 to float, !dbg !29
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %18) #1, !dbg !29
  %180 = bitcast i32 %179 to float, !dbg !29
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %19) #1, !dbg !29
  %182 = bitcast i32 %181 to float, !dbg !29
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %20) #1, !dbg !29
  %184 = bitcast i32 %183 to float, !dbg !29
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %21) #1, !dbg !29
  %186 = bitcast i32 %185 to float, !dbg !29
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %22) #1, !dbg !29
  %188 = bitcast i32 %187 to float, !dbg !29
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %23) #1, !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %24) #1, !dbg !29
  %192 = bitcast i32 %191 to float, !dbg !29
  %193 = add i32 %73, 123, !dbg !30
  %194 = add i32 %74, 123, !dbg !30
  %195 = add i32 %75, 123, !dbg !30
  %196 = add i32 %76, 123, !dbg !30
  %197 = add i32 %77, 123, !dbg !30
  %198 = add i32 %78, 123, !dbg !30
  %199 = add i32 %79, 123, !dbg !30
  %200 = add i32 %80, 123, !dbg !30
  %201 = sext i32 %193 to i64, !dbg !31
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !31
  %203 = sext i32 %194 to i64, !dbg !31
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !31
  %205 = sext i32 %195 to i64, !dbg !31
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !31
  %207 = sext i32 %196 to i64, !dbg !31
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !31
  %209 = sext i32 %197 to i64, !dbg !31
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !31
  %211 = sext i32 %198 to i64, !dbg !31
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !31
  %213 = sext i32 %199 to i64, !dbg !31
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !31
  %215 = sext i32 %200 to i64, !dbg !31
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !31
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %17) #1, !dbg !32
  %218 = bitcast i32 %217 to float, !dbg !32
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %18) #1, !dbg !32
  %220 = bitcast i32 %219 to float, !dbg !32
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %19) #1, !dbg !32
  %222 = bitcast i32 %221 to float, !dbg !32
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %20) #1, !dbg !32
  %224 = bitcast i32 %223 to float, !dbg !32
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %21) #1, !dbg !32
  %226 = bitcast i32 %225 to float, !dbg !32
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %22) #1, !dbg !32
  %228 = bitcast i32 %227 to float, !dbg !32
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %23) #1, !dbg !32
  %230 = bitcast i32 %229 to float, !dbg !32
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %24) #1, !dbg !32
  %232 = bitcast i32 %231 to float, !dbg !32
  %233 = fcmp ogt float %138, %98, !dbg !33
  %234 = fcmp ogt float %140, %100, !dbg !33
  %235 = fcmp ogt float %142, %102, !dbg !33
  %236 = fcmp ogt float %144, %104, !dbg !33
  %237 = fcmp ogt float %146, %106, !dbg !33
  %238 = fcmp ogt float %148, %108, !dbg !33
  %239 = fcmp ogt float %150, %110, !dbg !33
  %240 = fcmp ogt float %152, %112, !dbg !33
  %241 = fcmp uno float %138, 0.000000e+00, !dbg !37
  %242 = fcmp uno float %140, 0.000000e+00, !dbg !37
  %243 = fcmp uno float %142, 0.000000e+00, !dbg !37
  %244 = fcmp uno float %144, 0.000000e+00, !dbg !37
  %245 = fcmp uno float %146, 0.000000e+00, !dbg !37
  %246 = fcmp uno float %148, 0.000000e+00, !dbg !37
  %247 = fcmp uno float %150, 0.000000e+00, !dbg !37
  %248 = fcmp uno float %152, 0.000000e+00, !dbg !37
  %249 = or i1 %233, %241, !dbg !38
  %250 = or i1 %234, %242, !dbg !38
  %251 = or i1 %235, %243, !dbg !38
  %252 = or i1 %236, %244, !dbg !38
  %253 = or i1 %237, %245, !dbg !38
  %254 = or i1 %238, %246, !dbg !38
  %255 = or i1 %239, %247, !dbg !38
  %256 = or i1 %240, %248, !dbg !38
  %257 = select i1 %249, float %138, float %98, !dbg !39
  %258 = select i1 %250, float %140, float %100, !dbg !39
  %259 = select i1 %251, float %142, float %102, !dbg !39
  %260 = select i1 %252, float %144, float %104, !dbg !39
  %261 = select i1 %253, float %146, float %106, !dbg !39
  %262 = select i1 %254, float %148, float %108, !dbg !39
  %263 = select i1 %255, float %150, float %110, !dbg !39
  %264 = select i1 %256, float %152, float %112, !dbg !39
  %265 = fcmp olt float %257, %178, !dbg !40
  %266 = fcmp olt float %258, %180, !dbg !40
  %267 = fcmp olt float %259, %182, !dbg !40
  %268 = fcmp olt float %260, %184, !dbg !40
  %269 = fcmp olt float %261, %186, !dbg !40
  %270 = fcmp olt float %262, %188, !dbg !40
  %271 = fcmp olt float %263, %190, !dbg !40
  %272 = fcmp olt float %264, %192, !dbg !40
  %273 = fcmp uno float %178, 0.000000e+00, !dbg !42
  %274 = fcmp uno float %180, 0.000000e+00, !dbg !42
  %275 = fcmp uno float %182, 0.000000e+00, !dbg !42
  %276 = fcmp uno float %184, 0.000000e+00, !dbg !42
  %277 = fcmp uno float %186, 0.000000e+00, !dbg !42
  %278 = fcmp uno float %188, 0.000000e+00, !dbg !42
  %279 = fcmp uno float %190, 0.000000e+00, !dbg !42
  %280 = fcmp uno float %192, 0.000000e+00, !dbg !42
  %281 = or i1 %265, %273, !dbg !43
  %282 = or i1 %266, %274, !dbg !43
  %283 = or i1 %267, %275, !dbg !43
  %284 = or i1 %268, %276, !dbg !43
  %285 = or i1 %269, %277, !dbg !43
  %286 = or i1 %270, %278, !dbg !43
  %287 = or i1 %271, %279, !dbg !43
  %288 = or i1 %272, %280, !dbg !43
  %289 = select i1 %281, float %178, float %257, !dbg !44
  %290 = select i1 %282, float %180, float %258, !dbg !44
  %291 = select i1 %283, float %182, float %259, !dbg !44
  %292 = select i1 %284, float %184, float %260, !dbg !44
  %293 = select i1 %285, float %186, float %261, !dbg !44
  %294 = select i1 %286, float %188, float %262, !dbg !44
  %295 = select i1 %287, float %190, float %263, !dbg !44
  %296 = select i1 %288, float %192, float %264, !dbg !44
  %297 = fcmp olt float %289, %218, !dbg !45
  %298 = fcmp olt float %290, %220, !dbg !45
  %299 = fcmp olt float %291, %222, !dbg !45
  %300 = fcmp olt float %292, %224, !dbg !45
  %301 = fcmp olt float %293, %226, !dbg !45
  %302 = fcmp olt float %294, %228, !dbg !45
  %303 = fcmp olt float %295, %230, !dbg !45
  %304 = fcmp olt float %296, %232, !dbg !45
  %305 = fcmp uno float %218, 0.000000e+00, !dbg !47
  %306 = fcmp uno float %220, 0.000000e+00, !dbg !47
  %307 = fcmp uno float %222, 0.000000e+00, !dbg !47
  %308 = fcmp uno float %224, 0.000000e+00, !dbg !47
  %309 = fcmp uno float %226, 0.000000e+00, !dbg !47
  %310 = fcmp uno float %228, 0.000000e+00, !dbg !47
  %311 = fcmp uno float %230, 0.000000e+00, !dbg !47
  %312 = fcmp uno float %232, 0.000000e+00, !dbg !47
  %313 = or i1 %297, %305, !dbg !48
  %314 = or i1 %298, %306, !dbg !48
  %315 = or i1 %299, %307, !dbg !48
  %316 = or i1 %300, %308, !dbg !48
  %317 = or i1 %301, %309, !dbg !48
  %318 = or i1 %302, %310, !dbg !48
  %319 = or i1 %303, %311, !dbg !48
  %320 = or i1 %304, %312, !dbg !48
  %321 = zext i1 %233 to i8, !dbg !49
  %322 = zext i1 %234 to i8, !dbg !49
  %323 = zext i1 %235 to i8, !dbg !49
  %324 = zext i1 %236 to i8, !dbg !49
  %325 = zext i1 %237 to i8, !dbg !49
  %326 = zext i1 %238 to i8, !dbg !49
  %327 = zext i1 %239 to i8, !dbg !49
  %328 = zext i1 %240 to i8, !dbg !49
  %329 = select i1 %265, i8 2, i8 %321, !dbg !50
  %330 = select i1 %266, i8 2, i8 %322, !dbg !50
  %331 = select i1 %267, i8 2, i8 %323, !dbg !50
  %332 = select i1 %268, i8 2, i8 %324, !dbg !50
  %333 = select i1 %269, i8 2, i8 %325, !dbg !50
  %334 = select i1 %270, i8 2, i8 %326, !dbg !50
  %335 = select i1 %271, i8 2, i8 %327, !dbg !50
  %336 = select i1 %272, i8 2, i8 %328, !dbg !50
  %337 = select i1 %297, i8 3, i8 %329, !dbg !51
  %338 = select i1 %298, i8 3, i8 %330, !dbg !51
  %339 = select i1 %299, i8 3, i8 %331, !dbg !51
  %340 = select i1 %300, i8 3, i8 %332, !dbg !51
  %341 = select i1 %301, i8 3, i8 %333, !dbg !51
  %342 = select i1 %302, i8 3, i8 %334, !dbg !51
  %343 = select i1 %303, i8 3, i8 %335, !dbg !51
  %344 = select i1 %304, i8 3, i8 %336, !dbg !51
  %345 = mul i32 %41, 3744, !dbg !52
  %346 = mul i32 %42, 3744, !dbg !52
  %347 = mul i32 %43, 3744, !dbg !52
  %348 = mul i32 %44, 3744, !dbg !52
  %349 = mul i32 %45, 3744, !dbg !52
  %350 = mul i32 %46, 3744, !dbg !52
  %351 = mul i32 %47, 3744, !dbg !52
  %352 = mul i32 %48, 3744, !dbg !52
  %353 = add i32 %345, %.decomposed16, !dbg !53
  %354 = add i32 %346, %.decomposed18, !dbg !53
  %355 = add i32 %347, %.decomposed20, !dbg !53
  %356 = add i32 %348, %.decomposed22, !dbg !53
  %357 = add i32 %349, %.decomposed24, !dbg !53
  %358 = add i32 %350, %.decomposed26, !dbg !53
  %359 = add i32 %351, %.decomposed28, !dbg !53
  %360 = add i32 %352, %.decomposed30, !dbg !53
  %361 = sext i32 %353 to i64, !dbg !54
  %362 = getelementptr float, ptr addrspace(1) %1, i64 %361, !dbg !54
  %363 = sext i32 %354 to i64, !dbg !54
  %364 = getelementptr float, ptr addrspace(1) %1, i64 %363, !dbg !54
  %365 = sext i32 %355 to i64, !dbg !54
  %366 = getelementptr float, ptr addrspace(1) %1, i64 %365, !dbg !54
  %367 = sext i32 %356 to i64, !dbg !54
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !54
  %369 = sext i32 %357 to i64, !dbg !54
  %370 = getelementptr float, ptr addrspace(1) %1, i64 %369, !dbg !54
  %371 = sext i32 %358 to i64, !dbg !54
  %372 = getelementptr float, ptr addrspace(1) %1, i64 %371, !dbg !54
  %373 = sext i32 %359 to i64, !dbg !54
  %374 = getelementptr float, ptr addrspace(1) %1, i64 %373, !dbg !54
  %375 = sext i32 %360 to i64, !dbg !54
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !54
  %377 = bitcast float %289 to i32, !dbg !55
  %378 = select i1 %313, i32 %217, i32 %377, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %378, ptr addrspace(1) %362, i1 %17) #1, !dbg !55
  %379 = bitcast float %290 to i32, !dbg !55
  %380 = select i1 %314, i32 %219, i32 %379, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %380, ptr addrspace(1) %364, i1 %18) #1, !dbg !55
  %381 = bitcast float %291 to i32, !dbg !55
  %382 = select i1 %315, i32 %221, i32 %381, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %382, ptr addrspace(1) %366, i1 %19) #1, !dbg !55
  %383 = bitcast float %292 to i32, !dbg !55
  %384 = select i1 %316, i32 %223, i32 %383, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %368, i1 %20) #1, !dbg !55
  %385 = bitcast float %293 to i32, !dbg !55
  %386 = select i1 %317, i32 %225, i32 %385, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %370, i1 %21) #1, !dbg !55
  %387 = bitcast float %294 to i32, !dbg !55
  %388 = select i1 %318, i32 %227, i32 %387, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %388, ptr addrspace(1) %372, i1 %22) #1, !dbg !55
  %389 = bitcast float %295 to i32, !dbg !55
  %390 = select i1 %319, i32 %229, i32 %389, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %390, ptr addrspace(1) %374, i1 %23) #1, !dbg !55
  %391 = bitcast float %296 to i32, !dbg !55
  %392 = select i1 %320, i32 %231, i32 %391, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %376, i1 %24) #1, !dbg !55
  %393 = mul i32 %41, 3840, !dbg !57
  %394 = mul i32 %42, 3840, !dbg !57
  %395 = mul i32 %43, 3840, !dbg !57
  %396 = mul i32 %44, 3840, !dbg !57
  %397 = mul i32 %45, 3840, !dbg !57
  %398 = mul i32 %46, 3840, !dbg !57
  %399 = mul i32 %47, 3840, !dbg !57
  %400 = mul i32 %48, 3840, !dbg !57
  %401 = add i32 %393, %.decomposed16, !dbg !58
  %402 = add i32 %394, %.decomposed18, !dbg !58
  %403 = add i32 %395, %.decomposed20, !dbg !58
  %404 = add i32 %396, %.decomposed22, !dbg !58
  %405 = add i32 %397, %.decomposed24, !dbg !58
  %406 = add i32 %398, %.decomposed26, !dbg !58
  %407 = add i32 %399, %.decomposed28, !dbg !58
  %408 = add i32 %400, %.decomposed30, !dbg !58
  %409 = sext i32 %401 to i64, !dbg !59
  %410 = getelementptr i8, ptr addrspace(1) %2, i64 %409, !dbg !59
  %411 = sext i32 %402 to i64, !dbg !59
  %412 = getelementptr i8, ptr addrspace(1) %2, i64 %411, !dbg !59
  %413 = sext i32 %403 to i64, !dbg !59
  %414 = getelementptr i8, ptr addrspace(1) %2, i64 %413, !dbg !59
  %415 = sext i32 %404 to i64, !dbg !59
  %416 = getelementptr i8, ptr addrspace(1) %2, i64 %415, !dbg !59
  %417 = sext i32 %405 to i64, !dbg !59
  %418 = getelementptr i8, ptr addrspace(1) %2, i64 %417, !dbg !59
  %419 = sext i32 %406 to i64, !dbg !59
  %420 = getelementptr i8, ptr addrspace(1) %2, i64 %419, !dbg !59
  %421 = sext i32 %407 to i64, !dbg !59
  %422 = getelementptr i8, ptr addrspace(1) %2, i64 %421, !dbg !59
  %423 = sext i32 %408 to i64, !dbg !59
  %424 = getelementptr i8, ptr addrspace(1) %2, i64 %423, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %337, ptr addrspace(1) %410, i1 %17) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %338, ptr addrspace(1) %412, i1 %18) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %339, ptr addrspace(1) %414, i1 %19) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %340, ptr addrspace(1) %416, i1 %20) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %341, ptr addrspace(1) %418, i1 %21) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %342, ptr addrspace(1) %420, i1 %22) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %343, ptr addrspace(1) %422, i1 %23) #1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %344, ptr addrspace(1) %424, i1 %24) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjm75w2wbr6iqaurobvyl4mzbg5rydan65ovw5o2zikfs33axq57.py", directory: "inductor_cache/jm")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 46, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 50, scope: !7)
!27 = !DILocation(line: 30, column: 43, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 31, column: 43, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 52, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 32, column: 40, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!49 = !DILocation(line: 38, column: 33, scope: !7)
!50 = !DILocation(line: 41, column: 35, scope: !7)
!51 = !DILocation(line: 44, column: 35, scope: !7)
!52 = !DILocation(line: 45, column: 35, scope: !7)
!53 = !DILocation(line: 45, column: 30, scope: !7)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 46, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!57 = !DILocation(line: 46, column: 35, scope: !7)
!58 = !DILocation(line: 46, column: 30, scope: !7)
!59 = !DILocation(line: 46, column: 25, scope: !7)
!60 = !DILocation(line: 46, column: 47, scope: !7)
!61 = !DILocation(line: 46, column: 4, scope: !7)
