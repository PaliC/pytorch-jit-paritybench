; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_add_embedding_mean_pow_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 63, !dbg !12
  %9 = or disjoint i32 %8, 64, !dbg !12
  %10 = or disjoint i32 %8, 128, !dbg !12
  %11 = or disjoint i32 %8, 192, !dbg !12
  %12 = shl i32 %7, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = lshr i32 %8, 2, !dbg !13
  %15 = lshr i32 %9, 2, !dbg !13
  %16 = lshr i32 %10, 2, !dbg !13
  %17 = lshr i32 %11, 2, !dbg !13
  %18 = zext nneg i32 %13 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = shl nuw nsw i32 %13, 1, !dbg !15
  %26 = zext nneg i32 %25 to i64, !dbg !15
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %26, !dbg !15
  %28 = insertelement <1 x i32> poison, i32 %21, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %28, i1 true) #5, !dbg !15
  %29 = or disjoint i32 %25, 2, !dbg !15
  %30 = zext nneg i32 %29 to i64, !dbg !15
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30, !dbg !15
  %32 = insertelement <1 x i32> poison, i32 %22, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #5, !dbg !15
  %33 = or disjoint i32 %25, 4, !dbg !15
  %34 = zext nneg i32 %33 to i64, !dbg !15
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34, !dbg !15
  %36 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %36, i1 true) #5, !dbg !15
  %37 = or disjoint i32 %25, 6, !dbg !15
  %38 = zext nneg i32 %37 to i64, !dbg !15
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38, !dbg !15
  %40 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #5, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %41 = shl nuw nsw i32 %8, 1, !dbg !15
  %42 = zext nneg i32 %41 to i64, !dbg !15
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42, !dbg !15
  %44 = load float, ptr addrspace(3) %43, align 8, !dbg !15
  %45 = shl nuw nsw i32 %9, 1, !dbg !15
  %46 = zext nneg i32 %45 to i64, !dbg !15
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46, !dbg !15
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !15
  %49 = shl nuw nsw i32 %10, 1, !dbg !15
  %50 = zext nneg i32 %49 to i64, !dbg !15
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50, !dbg !15
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !15
  %53 = shl nuw nsw i32 %11, 1, !dbg !15
  %54 = zext nneg i32 %53 to i64, !dbg !15
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %54, !dbg !15
  %56 = load float, ptr addrspace(3) %55, align 8, !dbg !15
  %57 = zext nneg i32 %14 to i64, !dbg !16
  %58 = getelementptr i64, ptr addrspace(1) %2, i64 %57, !dbg !16
  %59 = zext nneg i32 %15 to i64, !dbg !16
  %60 = getelementptr i64, ptr addrspace(1) %2, i64 %59, !dbg !16
  %61 = zext nneg i32 %16 to i64, !dbg !16
  %62 = getelementptr i64, ptr addrspace(1) %2, i64 %61, !dbg !16
  %63 = zext nneg i32 %17 to i64, !dbg !16
  %64 = getelementptr i64, ptr addrspace(1) %2, i64 %63, !dbg !16
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %58, i1 true, i1 true) #5, !dbg !17
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %60, i1 true, i1 true) #5, !dbg !17
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %62, i1 true, i1 true) #5, !dbg !17
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 true, i1 true) #5, !dbg !17
  %69 = insertelement <4 x i64> poison, i64 %66, i64 0, !dbg !18
  %70 = insertelement <4 x i64> %69, i64 %65, i64 1, !dbg !18
  %71 = insertelement <4 x i64> %70, i64 %67, i64 2, !dbg !18
  %72 = insertelement <4 x i64> %71, i64 %68, i64 3, !dbg !18
  %73 = lshr <4 x i64> %72, splat (i64 61), !dbg !18
  %74 = and <4 x i64> %73, splat (i64 4), !dbg !18
  %75 = add <4 x i64> %74, %72, !dbg !18
  %76 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %75), !dbg !19
  %.not = icmp ult i64 %76, 4, !dbg !19
  br i1 %.not, label %78, label %77, !dbg !19

77:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

78:                                               ; preds = %6
  %79 = lshr i32 %7, 5, !dbg !12
  %80 = and i32 %7, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %81 = and i32 %12, 12, !dbg !20
  %82 = zext nneg i32 %81 to i64, !dbg !21
  %83 = extractelement <4 x i64> %75, i64 3, !dbg !21
  %84 = or disjoint i64 %83, %82, !dbg !21
  %85 = extractelement <4 x i64> %75, i64 1, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %82, !dbg !22
  %88 = extractelement <4 x i64> %75, i64 0, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %82, !dbg !22
  %91 = extractelement <4 x i64> %75, i64 2, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !22
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %82, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 true, i32 0, i1 true) #5, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 true, i32 0, i1 true) #5, !dbg !23
  %98 = bitcast i32 %97 to float, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 true, i32 0, i1 true) #5, !dbg !23
  %100 = bitcast i32 %99 to float, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 true, i32 0, i1 true) #5, !dbg !23
  %102 = bitcast i32 %101 to float, !dbg !23
  %103 = fsub float %96, %44, !dbg !24
  %104 = fsub float %98, %48, !dbg !24
  %105 = fsub float %100, %52, !dbg !24
  %106 = fsub float %102, %56, !dbg !24
  %107 = fadd float %44, %103, !dbg !25
  %108 = fadd float %48, %104, !dbg !25
  %109 = fadd float %52, %105, !dbg !25
  %110 = fadd float %56, %106, !dbg !25
  %111 = fmul float %103, %103, !dbg !26
  %112 = fmul float %104, %104, !dbg !26
  %113 = fmul float %105, %105, !dbg !26
  %114 = fmul float %106, %106, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %116 = zext nneg i32 %8 to i64, !dbg !28
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !28
  %118 = bitcast float %107 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #5, !dbg !28
  %119 = zext nneg i32 %9 to i64, !dbg !28
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !28
  %121 = bitcast float %108 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #5, !dbg !28
  %122 = zext nneg i32 %10 to i64, !dbg !28
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !28
  %124 = bitcast float %109 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #5, !dbg !28
  %125 = zext nneg i32 %11 to i64, !dbg !28
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !28
  %127 = bitcast float %110 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %18, !dbg !28
  %.extract = load i32, ptr addrspace(3) %128, align 16, !dbg !28
  %129 = getelementptr inbounds i8, ptr addrspace(3) %128, i64 4, !dbg !28
  %.extract4 = load i32, ptr addrspace(3) %129, align 4, !dbg !28
  %130 = getelementptr inbounds i8, ptr addrspace(3) %128, i64 8, !dbg !28
  %.extract5 = load i32, ptr addrspace(3) %130, align 8, !dbg !28
  %131 = getelementptr inbounds i8, ptr addrspace(3) %128, i64 12, !dbg !28
  %.extract6 = load i32, ptr addrspace(3) %131, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %115, i1 true) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %132 = fadd float %111, %112, !dbg !33
  %133 = fadd float %132, %113, !dbg !33
  %134 = fadd float %133, %114, !dbg !33
  %135 = bitcast float %134 to i32, !dbg !29
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = fadd float %134, %137, !dbg !33
  %139 = bitcast float %138 to i32, !dbg !29
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = fadd float %138, %141, !dbg !33
  %143 = bitcast float %142 to i32, !dbg !29
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !29
  %145 = bitcast i32 %144 to float, !dbg !29
  %146 = fadd float %142, %145, !dbg !33
  %147 = bitcast float %146 to i32, !dbg !29
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = fadd float %146, %149, !dbg !33
  %151 = bitcast float %150 to i32, !dbg !29
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = fadd float %150, %153, !dbg !33
  %155 = icmp eq i32 %80, 0, !dbg !29
  %156 = and i32 %79, 1, !dbg !29
  %157 = zext nneg i32 %156 to i64, !dbg !29
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !29
  %159 = bitcast float %154 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %155) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %160 = icmp slt i32 %7, 2, !dbg !29
  %161 = sext i32 %7 to i64, !dbg !29
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %161, !dbg !29
  %163 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %160) #5, !dbg !29
  %164 = bitcast i32 %163 to float, !dbg !29
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !29
  %166 = bitcast i32 %165 to float, !dbg !29
  %167 = fadd float %164, %166, !dbg !33
  %168 = and i32 %7, 1, !dbg !29
  %169 = icmp eq i32 %168, 0, !dbg !29
  %170 = and i1 %160, %169, !dbg !29
  %171 = bitcast float %167 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %171, i1 %170) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %172 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 2.560000e+02) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %174 = icmp eq i32 %8, 0, !dbg !37
  %175 = bitcast float %173 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %0, i1 %174) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_pow_sub_3", linkageName: "triton_red_fused_add_embedding_mean_pow_sub_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 23, scope: !11)
!14 = !DILocation(line: 33, column: 34, scope: !11)
!15 = !DILocation(line: 33, column: 39, scope: !11)
!16 = !DILocation(line: 34, column: 34, scope: !11)
!17 = !DILocation(line: 34, column: 39, scope: !11)
!18 = !DILocation(line: 38, column: 36, scope: !11)
!19 = !DILocation(line: 39, column: 64, scope: !11)
!20 = !DILocation(line: 40, column: 43, scope: !11)
!21 = !DILocation(line: 40, column: 41, scope: !11)
!22 = !DILocation(line: 40, column: 34, scope: !11)
!23 = !DILocation(line: 40, column: 48, scope: !11)
!24 = !DILocation(line: 41, column: 22, scope: !11)
!25 = !DILocation(line: 42, column: 22, scope: !11)
!26 = !DILocation(line: 43, column: 23, scope: !11)
!27 = !DILocation(line: 47, column: 29, scope: !11)
!28 = !DILocation(line: 47, column: 75, scope: !11)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !11, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 48, column: 27, scope: !11)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 50, column: 20, scope: !11)
!36 = !DILocation(line: 51, column: 4, scope: !11)
!37 = !DILocation(line: 52, column: 71, scope: !11)
!38 = !DILocation(line: 52, column: 4, scope: !11)
