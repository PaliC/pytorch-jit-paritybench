; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = or disjoint i32 %19, %13, !dbg !17
  %21 = or disjoint i32 %19, %11, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !18
  %24 = srem i32 %14, 4, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %25 = sdiv i32 %.frozen, 4, !dbg !20
  %26 = mul i32 %25, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %14, 4, !dbg !21
  %28 = add i32 %20, %27, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = and i1 %16, %22, !dbg !24
  %32 = and i1 %17, %23, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = sext i32 %24 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #2, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #2, !dbg !27
  %40 = shl i32 %21, 2, !dbg !28
  %41 = add i32 %40, %.decomposed, !dbg !29
  %42 = shl i32 %25, 6, !dbg !30
  %43 = add i32 %41, %42, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !32
  %46 = shl i32 %9, 5, !dbg !33
  %47 = and i32 %46, 224, !dbg !33
  %48 = or disjoint i32 %47, %11, !dbg !33
  %49 = and i32 %12, 254, !dbg !33
  %50 = lshr exact i32 %47, 3, !dbg !33
  %51 = add nuw nsw i32 %50, %48, !dbg !33
  %52 = zext nneg i32 %51 to i64, !dbg !33
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52, !dbg !33
  %54 = or disjoint i32 %48, 16, !dbg !33
  %55 = lshr i32 %54, 3, !dbg !33
  %56 = and i32 %55, 30, !dbg !33
  %57 = add nuw nsw i32 %56, %54, !dbg !33
  %58 = zext nneg i32 %57 to i64, !dbg !33
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !33
  %60 = lshr i32 %12, 3, !dbg !33
  %61 = and i32 %60, 30, !dbg !33
  %62 = add nuw nsw i32 %61, %49, !dbg !33
  %63 = zext nneg i32 %62 to i64, !dbg !33
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63, !dbg !33
  %65 = getelementptr inbounds i8, ptr addrspace(3) %64, i64 4, !dbg !33
  %66 = getelementptr i1, ptr addrspace(1) %3, i64 %29, !dbg !34
  %67 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !25
  %68 = insertelement <2 x i32> %67, i32 %35, i64 1, !dbg !25
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !25
  %70 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !35
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !35
  %72 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !35
  %73 = fadd <2 x float> %72, %69, !dbg !35
  %74 = fcmp ogt <2 x float> %73, zeroinitializer, !dbg !36
  %75 = fmul <2 x float> %73, splat (float 0x3FC99999A0000000), !dbg !37
  %76 = select <2 x i1> %74, <2 x float> %73, <2 x float> %75, !dbg !38
  %77 = fcmp ogt <2 x float> %76, zeroinitializer, !dbg !39
  %78 = extractelement <2 x float> %76, i64 0, !dbg !33
  %79 = bitcast float %78 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %79, i1 true) #2, !dbg !33
  %80 = extractelement <2 x float> %76, i64 1, !dbg !33
  %81 = bitcast float %80 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %81, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.extract = load i32, ptr addrspace(3) %64, align 8, !dbg !33
  %.extract2 = load i32, ptr addrspace(3) %65, align 4, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %45, i1 %32) #2, !dbg !33
  %82 = zext <2 x i1> %77 to <2 x i8>, !dbg !40
  %83 = bitcast <2 x i8> %82 to i16, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %83, ptr addrspace(1) %66, i1 %31) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co5m7onhzoe4gw5xamci5sscghgcspvfclnwfwfnj6ntxnzklsd6.py", directory: "inductor_cache/o5")
!4 = !{ptr @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_2", linkageName: "triton_poi_fused_clone_convolution_leaky_relu_leaky_relu_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 41, column: 32, scope: !7)
!29 = !DILocation(line: 41, column: 30, scope: !7)
!30 = !DILocation(line: 41, column: 40, scope: !7)
!31 = !DILocation(line: 41, column: 37, scope: !7)
!32 = !DILocation(line: 41, column: 25, scope: !7)
!33 = !DILocation(line: 41, column: 51, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 32, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 44, scope: !7)
!41 = !DILocation(line: 42, column: 4, scope: !7)
