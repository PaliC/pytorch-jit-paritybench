; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 55296, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %20 = sdiv i32 %.frozen, 384, !dbg !15
  %21 = mul i32 %20, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = icmp slt i32 %.decomposed, 192, !dbg !17
  %23 = mul nsw i32 %20, 192, !dbg !18
  %24 = add nsw i32 %23, %.decomposed, !dbg !19
  %25 = sext i32 %24 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = and i1 %19, %22, !dbg !21
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !22
  %29 = sext i32 %.decomposed to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !26
  %38 = bitcast i32 %34 to float, !dbg !26
  %39 = bitcast i32 %35 to float, !dbg !26
  %40 = bitcast i32 %36 to float, !dbg !26
  %41 = bitcast i32 %37 to float, !dbg !26
  %42 = fadd float %38, 0x3F50624DE0000000, !dbg !27
  %43 = fadd float %39, 0x3F50624DE0000000, !dbg !27
  %44 = fadd float %40, 0x3F50624DE0000000, !dbg !27
  %45 = fadd float %41, 0x3F50624DE0000000, !dbg !27
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %46, 0, !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %47, 0, !dbg !28
  br i1 %.not.i, label %53, label %48, !dbg !28

48:                                               ; preds = %12
  br i1 %.not1.i, label %51, label %49, !dbg !28

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

53:                                               ; preds = %12
  br i1 %.not1.i, label %56, label %54, !dbg !28

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !28
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %58, 0, !dbg !28
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !28
  br i1 %.not.i1, label %65, label %60, !dbg !28

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !28

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !28

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !28
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %70, 0, !dbg !28
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %71, 0, !dbg !28
  br i1 %.not.i6, label %77, label %72, !dbg !28

72:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %75, label %73, !dbg !28

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

77:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %80, label %78, !dbg !28

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %73, %75, %78, %80
  %.0.i8 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !28
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %82, 0, !dbg !28
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %83, 0, !dbg !28
  br i1 %.not.i11, label %89, label %84, !dbg !28

84:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %87, label %85, !dbg !28

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

89:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %92, label %90, !dbg !28

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %85, %87, %90, %92
  %.0.i13 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !28
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !30
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !32
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !33
  %102 = icmp sgt i32 %.decomposed, 191, !dbg !34
  %103 = add nsw i32 %.decomposed, -192, !dbg !35
  %104 = add nsw i32 %23, %103, !dbg !36
  %105 = sext i32 %104 to i64, !dbg !37
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !37
  %107 = and i1 %19, %102, !dbg !38
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !39
  %109 = sext i32 %103 to i64, !dbg !40
  %110 = getelementptr float, ptr addrspace(1) %6, i64 %109, !dbg !40
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !41
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %109, !dbg !42
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !43
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !43
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !43
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !43
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !43
  %118 = bitcast i32 %114 to float, !dbg !43
  %119 = bitcast i32 %115 to float, !dbg !43
  %120 = bitcast i32 %116 to float, !dbg !43
  %121 = bitcast i32 %117 to float, !dbg !43
  %122 = fadd float %118, 0x3F50624DE0000000, !dbg !44
  %123 = fadd float %119, 0x3F50624DE0000000, !dbg !44
  %124 = fadd float %120, 0x3F50624DE0000000, !dbg !44
  %125 = fadd float %121, 0x3F50624DE0000000, !dbg !44
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i16 = icmp eq i32 %126, 0, !dbg !45
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i19 = icmp eq i32 %127, 0, !dbg !45
  br i1 %.not.i16, label %133, label %128, !dbg !45

128:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %131, label %129, !dbg !45

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

133:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %136, label %134, !dbg !45

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %129, %131, %134, %136
  %.0.i18 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !45
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i21 = icmp eq i32 %138, 0, !dbg !45
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i24 = icmp eq i32 %139, 0, !dbg !45
  br i1 %.not.i21, label %145, label %140, !dbg !45

140:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %143, label %141, !dbg !45

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

145:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %148, label %146, !dbg !45

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

__nv_sqrtf.exit25:                                ; preds = %141, %143, %146, %148
  %.0.i23 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i26 = icmp eq i32 %150, 0, !dbg !45
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i29 = icmp eq i32 %151, 0, !dbg !45
  br i1 %.not.i26, label %157, label %152, !dbg !45

152:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %155, label %153, !dbg !45

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

157:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %160, label %158, !dbg !45

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

__nv_sqrtf.exit30:                                ; preds = %153, %155, %158, %160
  %.0.i28 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !45
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i31 = icmp eq i32 %162, 0, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i34 = icmp eq i32 %163, 0, !dbg !45
  br i1 %.not.i31, label %169, label %164, !dbg !45

164:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %167, label %165, !dbg !45

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

169:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %172, label %170, !dbg !45

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %165, %167, %170, %172
  %.0.i33 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !45
  %174 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !41
  %176 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !41
  %178 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !39
  %179 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !41
  %180 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !39
  %181 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !41
  %182 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !24
  %184 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !33
  %186 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !22
  %187 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !33
  %190 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !22
  %191 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !22
  %195 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !33
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !46
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !46
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !46
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !46
  %202 = getelementptr float, ptr addrspace(1) %8, i64 %109, !dbg !47
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !48
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !48
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !48
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !48
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !48
  %208 = getelementptr float, ptr addrspace(1) %9, i64 %109, !dbg !49
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !50
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !50
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !50
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !50
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !50
  %214 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !39
  %215 = insertelement <8 x i32> %214, i32 %176, i64 1, !dbg !39
  %216 = insertelement <8 x i32> %215, i32 %178, i64 2, !dbg !39
  %217 = insertelement <8 x i32> %216, i32 %180, i64 3, !dbg !39
  %218 = insertelement <8 x i32> %217, i32 %194, i64 4, !dbg !39
  %219 = insertelement <8 x i32> %218, i32 %190, i64 5, !dbg !39
  %220 = insertelement <8 x i32> %219, i32 %186, i64 6, !dbg !39
  %221 = insertelement <8 x i32> %220, i32 %182, i64 7, !dbg !39
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !39
  %223 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !41
  %224 = insertelement <8 x i32> %223, i32 %177, i64 1, !dbg !41
  %225 = insertelement <8 x i32> %224, i32 %179, i64 2, !dbg !41
  %226 = insertelement <8 x i32> %225, i32 %181, i64 3, !dbg !41
  %227 = insertelement <8 x i32> %226, i32 %195, i64 4, !dbg !41
  %228 = insertelement <8 x i32> %227, i32 %191, i64 5, !dbg !41
  %229 = insertelement <8 x i32> %228, i32 %187, i64 6, !dbg !41
  %230 = insertelement <8 x i32> %229, i32 %183, i64 7, !dbg !41
  %231 = bitcast <8 x i32> %230 to <8 x float>, !dbg !41
  %232 = fsub <8 x float> %222, %231, !dbg !51
  %233 = insertelement <8 x float> poison, float %201, i64 0, !dbg !52
  %234 = insertelement <8 x float> %233, float %200, i64 1, !dbg !52
  %235 = insertelement <8 x float> %234, float %199, i64 2, !dbg !52
  %236 = insertelement <8 x float> %235, float %198, i64 3, !dbg !52
  %237 = insertelement <8 x float> %236, float %94, i64 4, !dbg !52
  %238 = insertelement <8 x float> %237, float %95, i64 5, !dbg !52
  %239 = insertelement <8 x float> %238, float %96, i64 6, !dbg !52
  %240 = insertelement <8 x float> %239, float %97, i64 7, !dbg !52
  %241 = fmul <8 x float> %232, %240, !dbg !52
  %242 = insertelement <8 x i32> poison, i32 %207, i64 0, !dbg !48
  %243 = insertelement <8 x i32> %242, i32 %206, i64 1, !dbg !48
  %244 = insertelement <8 x i32> %243, i32 %205, i64 2, !dbg !48
  %245 = insertelement <8 x i32> %244, i32 %204, i64 3, !dbg !48
  %246 = insertelement <8 x i32> %245, i32 %196, i64 4, !dbg !48
  %247 = insertelement <8 x i32> %246, i32 %192, i64 5, !dbg !48
  %248 = insertelement <8 x i32> %247, i32 %188, i64 6, !dbg !48
  %249 = insertelement <8 x i32> %248, i32 %184, i64 7, !dbg !48
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !48
  %251 = fmul <8 x float> %241, %250, !dbg !53
  %252 = insertelement <8 x i32> poison, i32 %213, i64 0, !dbg !50
  %253 = insertelement <8 x i32> %252, i32 %212, i64 1, !dbg !50
  %254 = insertelement <8 x i32> %253, i32 %211, i64 2, !dbg !50
  %255 = insertelement <8 x i32> %254, i32 %210, i64 3, !dbg !50
  %256 = insertelement <8 x i32> %255, i32 %197, i64 4, !dbg !50
  %257 = insertelement <8 x i32> %256, i32 %193, i64 5, !dbg !50
  %258 = insertelement <8 x i32> %257, i32 %189, i64 6, !dbg !50
  %259 = insertelement <8 x i32> %258, i32 %185, i64 7, !dbg !50
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !50
  %261 = fadd <8 x float> %251, %260, !dbg !54
  %262 = fcmp olt <8 x float> %261, zeroinitializer, !dbg !55
  %263 = extractelement <8 x i1> %262, i64 7, !dbg !59
  %264 = extractelement <8 x float> %261, i64 7, !dbg !59
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !59
  %266 = extractelement <8 x i1> %262, i64 6, !dbg !59
  %267 = extractelement <8 x float> %261, i64 6, !dbg !59
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !59
  %269 = extractelement <8 x i1> %262, i64 5, !dbg !59
  %270 = extractelement <8 x float> %261, i64 5, !dbg !59
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !59
  %272 = extractelement <8 x i1> %262, i64 4, !dbg !59
  %273 = extractelement <8 x float> %261, i64 4, !dbg !59
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !59
  %275 = extractelement <8 x i1> %262, i64 3, !dbg !61
  %276 = extractelement <8 x float> %261, i64 3, !dbg !61
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !61
  %278 = extractelement <8 x i1> %262, i64 2, !dbg !61
  %279 = extractelement <8 x float> %261, i64 2, !dbg !61
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !61
  %281 = extractelement <8 x i1> %262, i64 1, !dbg !61
  %282 = extractelement <8 x float> %261, i64 1, !dbg !61
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !61
  %284 = extractelement <8 x i1> %262, i64 0, !dbg !61
  %285 = extractelement <8 x float> %261, i64 0, !dbg !61
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !61
  %287 = select i1 %22, float %274, float %277, !dbg !62
  %288 = select i1 %22, float %271, float %280, !dbg !62
  %289 = select i1 %22, float %268, float %283, !dbg !62
  %290 = select i1 %22, float %265, float %286, !dbg !62
  %291 = sext i32 %18 to i64, !dbg !63
  %292 = getelementptr float, ptr addrspace(1) %10, i64 %291, !dbg !63
  %293 = bitcast float %287 to i32, !dbg !64
  %294 = bitcast float %288 to i32, !dbg !64
  %295 = bitcast float %289 to i32, !dbg !64
  %296 = bitcast float %290 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %294, i32 %295, i32 %296, ptr addrspace(1) %292, i1 %19) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csq6wgevqctblfgh6v5da74vnrevieqojm6lznkitt3d6pwhtv5g.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 36, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 50, scope: !7)
!36 = !DILocation(line: 55, column: 41, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 64, scope: !7)
!39 = !DILocation(line: 55, column: 56, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 45, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 45, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 27, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 67, column: 31, scope: !7)
!48 = !DILocation(line: 67, column: 45, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 72, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 49, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 76, column: 25, scope: !7)
!64 = !DILocation(line: 76, column: 37, scope: !7)
!65 = !DILocation(line: 76, column: 4, scope: !7)
