; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit2 = lshr i32 %12, 4, !dbg !12
  %13 = and i32 %.lobit2, 31, !dbg !12
  %14 = or disjoint i32 %13, 32, !dbg !12
  %15 = and i32 %12, 63, !dbg !12
  %16 = or disjoint i32 %11, %13, !dbg !13
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = icmp slt i32 %16, 1024, !dbg !14
  %20 = icmp slt i32 %17, 1024, !dbg !14
  %21 = shl i32 %12, 2, !dbg !15
  %22 = and i32 %21, 60, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %23 = sdiv i32 %.frozen, 16, !dbg !16
  %24 = srem i32 %23, 16, !dbg !17
  %25 = mul i32 %16, 96, !dbg !18
  %26 = mul i32 %17, 96, !dbg !18
  %27 = zext nneg i32 %22 to i64, !dbg !19
  br label %28, !dbg !19

28:                                               ; preds = %9, %._crit_edge
  %29 = phi i1 [ true, %9 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %9 ], [ 64, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %9 ], [ %194, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %9 ], [ %195, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %9 ], [ %196, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %9 ], [ %197, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %9 ], [ %182, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %9 ], [ %183, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %9 ], [ %184, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %9 ], [ %185, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %9 ], [ %186, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %9 ], [ %187, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %9 ], [ %188, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %9 ], [ %174, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %9 ], [ %175, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %9 ], [ %176, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %9 ], [ %177, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %178, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %179, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %180, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %181, %._crit_edge ]
  %54 = or disjoint i64 %indvars.iv, %27, !dbg !20
  %55 = icmp samesign ult i64 %54, 96, !dbg !21
  %56 = trunc nuw nsw i64 %54 to i32, !dbg !22
  %57 = add i32 %25, %56, !dbg !22
  %58 = add i32 %26, %56, !dbg !22
  %59 = sext i32 %57 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %58 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = and i1 %19, %55, !dbg !24
  %64 = and i1 %20, %55, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #5, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #5, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #5, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = fadd float %70, %89, !dbg !28
  %94 = fadd float %71, %90, !dbg !28
  %95 = fadd float %72, %91, !dbg !28
  %96 = fadd float %73, %92, !dbg !28
  %97 = fadd float %79, %89, !dbg !28
  %98 = fadd float %80, %90, !dbg !28
  %99 = fadd float %81, %91, !dbg !28
  %100 = fadd float %82, %92, !dbg !28
  br i1 %29, label %._crit_edge, label %101, !dbg !29

101:                                              ; preds = %28
  %102 = fsub float %93, %46, !dbg !33
  %103 = fsub float %94, %47, !dbg !33
  %104 = fsub float %95, %48, !dbg !33
  %105 = fsub float %96, %49, !dbg !33
  %106 = fsub float %97, %50, !dbg !33
  %107 = fsub float %98, %51, !dbg !33
  %108 = fsub float %99, %52, !dbg !33
  %109 = fsub float %100, %53, !dbg !33
  %110 = fadd float %30, 1.000000e+00, !dbg !34
  %111 = fadd float %31, 1.000000e+00, !dbg !34
  %112 = fadd float %32, 1.000000e+00, !dbg !34
  %113 = fadd float %33, 1.000000e+00, !dbg !34
  %114 = fadd float %34, 1.000000e+00, !dbg !34
  %115 = fadd float %35, 1.000000e+00, !dbg !34
  %116 = fadd float %36, 1.000000e+00, !dbg !34
  %117 = fadd float %37, 1.000000e+00, !dbg !34
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %110) #5, !dbg !35
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %111) #5, !dbg !35
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %112) #5, !dbg !35
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %113) #5, !dbg !35
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #5, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #5, !dbg !35
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %116) #5, !dbg !35
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #5, !dbg !35
  %126 = fadd float %46, %118, !dbg !36
  %127 = fadd float %47, %119, !dbg !36
  %128 = fadd float %48, %120, !dbg !36
  %129 = fadd float %49, %121, !dbg !36
  %130 = fadd float %50, %122, !dbg !36
  %131 = fadd float %51, %123, !dbg !36
  %132 = fadd float %52, %124, !dbg !36
  %133 = fadd float %53, %125, !dbg !36
  %134 = fsub float %93, %126, !dbg !37
  %135 = fsub float %94, %127, !dbg !37
  %136 = fsub float %95, %128, !dbg !37
  %137 = fsub float %96, %129, !dbg !37
  %138 = fsub float %97, %130, !dbg !37
  %139 = fsub float %98, %131, !dbg !37
  %140 = fsub float %99, %132, !dbg !37
  %141 = fsub float %100, %133, !dbg !37
  %142 = fmul float %102, %134, !dbg !38
  %143 = fmul float %103, %135, !dbg !38
  %144 = fmul float %104, %136, !dbg !38
  %145 = fmul float %105, %137, !dbg !38
  %146 = fmul float %106, %138, !dbg !38
  %147 = fmul float %107, %139, !dbg !38
  %148 = fmul float %108, %140, !dbg !38
  %149 = fmul float %109, %141, !dbg !38
  %150 = fadd float %38, %142, !dbg !39
  %151 = fadd float %39, %143, !dbg !39
  %152 = fadd float %40, %144, !dbg !39
  %153 = fadd float %41, %145, !dbg !39
  %154 = fadd float %42, %146, !dbg !39
  %155 = fadd float %43, %147, !dbg !39
  %156 = fadd float %44, %148, !dbg !39
  %157 = fadd float %45, %149, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %28, %101
  %158 = phi float [ %150, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %159 = phi float [ %151, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %160 = phi float [ %152, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %161 = phi float [ %153, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %162 = phi float [ %154, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %163 = phi float [ %155, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %164 = phi float [ %156, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %165 = phi float [ %157, %101 ], [ 0.000000e+00, %28 ], !dbg !32
  %.pn18 = phi float [ %126, %101 ], [ %93, %28 ]
  %.pn16 = phi float [ %127, %101 ], [ %94, %28 ]
  %.pn14 = phi float [ %128, %101 ], [ %95, %28 ]
  %.pn12 = phi float [ %129, %101 ], [ %96, %28 ]
  %.pn10 = phi float [ %130, %101 ], [ %97, %28 ]
  %.pn8 = phi float [ %131, %101 ], [ %98, %28 ]
  %.pn6 = phi float [ %132, %101 ], [ %99, %28 ]
  %.pn4 = phi float [ %133, %101 ], [ %100, %28 ]
  %166 = phi float [ %110, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %167 = phi float [ %111, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %168 = phi float [ %112, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %169 = phi float [ %113, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %170 = phi float [ %114, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %171 = phi float [ %115, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %172 = phi float [ %116, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %173 = phi float [ %117, %101 ], [ 1.000000e+00, %28 ], !dbg !32
  %174 = select i1 %63, float %.pn18, float %46, !dbg !40
  %175 = select i1 %63, float %.pn16, float %47, !dbg !40
  %176 = select i1 %63, float %.pn14, float %48, !dbg !40
  %177 = select i1 %63, float %.pn12, float %49, !dbg !40
  %178 = select i1 %64, float %.pn10, float %50, !dbg !40
  %179 = select i1 %64, float %.pn8, float %51, !dbg !40
  %180 = select i1 %64, float %.pn6, float %52, !dbg !40
  %181 = select i1 %64, float %.pn4, float %53, !dbg !40
  %182 = select i1 %63, float %158, float %38, !dbg !41
  %183 = select i1 %63, float %159, float %39, !dbg !41
  %184 = select i1 %63, float %160, float %40, !dbg !41
  %185 = select i1 %63, float %161, float %41, !dbg !41
  %186 = select i1 %64, float %162, float %42, !dbg !41
  %187 = select i1 %64, float %163, float %43, !dbg !41
  %188 = select i1 %64, float %164, float %44, !dbg !41
  %189 = select i1 %64, float %165, float %45, !dbg !41
  %190 = select i1 %63, float %166, float %30, !dbg !42
  %191 = select i1 %63, float %167, float %31, !dbg !42
  %192 = select i1 %63, float %168, float %32, !dbg !42
  %193 = select i1 %63, float %169, float %33, !dbg !42
  %194 = select i1 %64, float %170, float %34, !dbg !42
  %195 = select i1 %64, float %171, float %35, !dbg !42
  %196 = select i1 %64, float %172, float %36, !dbg !42
  %197 = select i1 %64, float %173, float %37, !dbg !42
  %198 = bitcast float %93 to i32, !dbg !43
  %199 = bitcast float %94 to i32, !dbg !43
  %200 = bitcast float %95 to i32, !dbg !43
  %201 = bitcast float %96 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %60, i1 %63) #5, !dbg !43
  %202 = bitcast float %97 to i32, !dbg !43
  %203 = bitcast float %98 to i32, !dbg !43
  %204 = bitcast float %99 to i32, !dbg !43
  %205 = bitcast float %100 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %62, i1 %64) #5, !dbg !43
  br i1 %29, label %28, label %206, !dbg !19

206:                                              ; preds = %._crit_edge
  %207 = icmp slt i32 %18, 1024, !dbg !14
  %208 = mul i32 %23, 16, !dbg !44
  %.decomposed = sub i32 %.frozen, %208, !dbg !44
  %209 = sdiv i32 %18, 256, !dbg !45
  %210 = fsub float %175, %174, !dbg !46
  %211 = fadd float %190, %191, !dbg !49
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !50
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %211) #5, !dbg !51
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !52
  %215 = fmul float %210, %214, !dbg !53
  %216 = fadd float %174, %215, !dbg !54
  %217 = fadd float %182, %183, !dbg !55
  %218 = fmul float %210, %210, !dbg !56
  %219 = fmul float %218, %190, !dbg !57
  %220 = fmul float %219, %214, !dbg !58
  %221 = fadd float %217, %220, !dbg !59
  %222 = fsub float %176, %216, !dbg !46
  %223 = fadd float %192, %211, !dbg !49
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !50
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %223) #5, !dbg !51
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !52
  %227 = fmul float %226, %222, !dbg !53
  %228 = fadd float %216, %227, !dbg !54
  %229 = fadd float %184, %221, !dbg !55
  %230 = fmul float %222, %222, !dbg !56
  %231 = fmul float %211, %230, !dbg !57
  %232 = fmul float %226, %231, !dbg !58
  %233 = fadd float %229, %232, !dbg !59
  %234 = fsub float %177, %228, !dbg !46
  %235 = fadd float %193, %223, !dbg !49
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !50
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %235) #5, !dbg !51
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !52
  %239 = fmul float %238, %234, !dbg !53
  %240 = fadd float %228, %239, !dbg !54
  %241 = fadd float %185, %233, !dbg !55
  %242 = fmul float %234, %234, !dbg !56
  %243 = fmul float %223, %242, !dbg !57
  %244 = fmul float %238, %243, !dbg !58
  %245 = fadd float %241, %244, !dbg !59
  %246 = fsub float %179, %178, !dbg !46
  %247 = fadd float %194, %195, !dbg !49
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !50
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %247) #5, !dbg !51
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !52
  %251 = fmul float %246, %250, !dbg !53
  %252 = fadd float %178, %251, !dbg !54
  %253 = fadd float %186, %187, !dbg !55
  %254 = fmul float %246, %246, !dbg !56
  %255 = fmul float %254, %194, !dbg !57
  %256 = fmul float %255, %250, !dbg !58
  %257 = fadd float %253, %256, !dbg !59
  %258 = fsub float %180, %252, !dbg !46
  %259 = fadd float %196, %247, !dbg !49
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !50
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %259) #5, !dbg !51
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !52
  %263 = fmul float %262, %258, !dbg !53
  %264 = fadd float %252, %263, !dbg !54
  %265 = fadd float %188, %257, !dbg !55
  %266 = fmul float %258, %258, !dbg !56
  %267 = fmul float %247, %266, !dbg !57
  %268 = fmul float %262, %267, !dbg !58
  %269 = fadd float %265, %268, !dbg !59
  %270 = fsub float %181, %264, !dbg !46
  %271 = fadd float %197, %259, !dbg !49
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !50
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %271) #5, !dbg !51
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !52
  %275 = fmul float %274, %270, !dbg !53
  %276 = fadd float %264, %275, !dbg !54
  %277 = fadd float %189, %269, !dbg !55
  %278 = fmul float %270, %270, !dbg !56
  %279 = fmul float %259, %278, !dbg !57
  %280 = fmul float %274, %279, !dbg !58
  %281 = fadd float %277, %280, !dbg !59
  %282 = bitcast float %240 to i32, !dbg !60
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 8, i32 31), !dbg !60
  %284 = bitcast i32 %283 to float, !dbg !60
  %285 = bitcast float %245 to i32, !dbg !60
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 8, i32 31), !dbg !60
  %287 = bitcast i32 %286 to float, !dbg !60
  %288 = bitcast float %235 to i32, !dbg !60
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !60
  %290 = bitcast i32 %289 to float, !dbg !60
  %291 = fsub float %284, %240, !dbg !46
  %292 = fadd float %235, %290, !dbg !49
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !50
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #5, !dbg !51
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !52
  %296 = fmul float %291, %295, !dbg !53
  %297 = fadd float %240, %296, !dbg !54
  %298 = fadd float %245, %287, !dbg !55
  %299 = fmul float %291, %291, !dbg !56
  %300 = fmul float %235, %299, !dbg !57
  %301 = fmul float %300, %295, !dbg !58
  %302 = fadd float %298, %301, !dbg !59
  %303 = bitcast float %297 to i32, !dbg !60
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 4, i32 31), !dbg !60
  %305 = bitcast i32 %304 to float, !dbg !60
  %306 = bitcast float %302 to i32, !dbg !60
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !60
  %308 = bitcast i32 %307 to float, !dbg !60
  %309 = bitcast float %292 to i32, !dbg !60
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !60
  %311 = bitcast i32 %310 to float, !dbg !60
  %312 = fsub float %305, %297, !dbg !46
  %313 = fadd float %292, %311, !dbg !49
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !50
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #5, !dbg !51
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !52
  %317 = fmul float %312, %316, !dbg !53
  %318 = fadd float %297, %317, !dbg !54
  %319 = fadd float %302, %308, !dbg !55
  %320 = fmul float %312, %312, !dbg !56
  %321 = fmul float %292, %320, !dbg !57
  %322 = fmul float %316, %321, !dbg !58
  %323 = fadd float %319, %322, !dbg !59
  %324 = bitcast float %318 to i32, !dbg !60
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 2, i32 31), !dbg !60
  %326 = bitcast i32 %325 to float, !dbg !60
  %327 = bitcast float %323 to i32, !dbg !60
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !60
  %329 = bitcast i32 %328 to float, !dbg !60
  %330 = bitcast float %313 to i32, !dbg !60
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !60
  %332 = bitcast i32 %331 to float, !dbg !60
  %333 = fsub float %326, %318, !dbg !46
  %334 = fadd float %313, %332, !dbg !49
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !50
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #5, !dbg !51
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !52
  %338 = fmul float %333, %337, !dbg !53
  %339 = fadd float %318, %338, !dbg !54
  %340 = fadd float %323, %329, !dbg !55
  %341 = fmul float %333, %333, !dbg !56
  %342 = fmul float %313, %341, !dbg !57
  %343 = fmul float %337, %342, !dbg !58
  %344 = fadd float %340, %343, !dbg !59
  %345 = bitcast float %339 to i32, !dbg !60
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !60
  %347 = bitcast i32 %346 to float, !dbg !60
  %348 = bitcast float %344 to i32, !dbg !60
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !60
  %350 = bitcast i32 %349 to float, !dbg !60
  %351 = bitcast float %334 to i32, !dbg !60
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !60
  %353 = bitcast i32 %352 to float, !dbg !60
  %354 = fsub float %347, %339, !dbg !46
  %355 = fadd float %334, %353, !dbg !49
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !50
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %355) #5, !dbg !51
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !52
  %359 = fmul float %354, %358, !dbg !53
  %360 = fadd float %339, %359, !dbg !54
  %361 = fadd float %344, %350, !dbg !55
  %362 = fmul float %354, %354, !dbg !56
  %363 = fmul float %334, %362, !dbg !57
  %364 = fmul float %358, %363, !dbg !58
  %365 = fadd float %361, %364, !dbg !59
  %366 = bitcast float %276 to i32, !dbg !60
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 8, i32 31), !dbg !60
  %368 = bitcast i32 %367 to float, !dbg !60
  %369 = bitcast float %281 to i32, !dbg !60
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 8, i32 31), !dbg !60
  %371 = bitcast i32 %370 to float, !dbg !60
  %372 = bitcast float %271 to i32, !dbg !60
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 8, i32 31), !dbg !60
  %374 = bitcast i32 %373 to float, !dbg !60
  %375 = fsub float %368, %276, !dbg !46
  %376 = fadd float %271, %374, !dbg !49
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !50
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %376) #5, !dbg !51
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !52
  %380 = fmul float %375, %379, !dbg !53
  %381 = fadd float %276, %380, !dbg !54
  %382 = fadd float %281, %371, !dbg !55
  %383 = fmul float %375, %375, !dbg !56
  %384 = fmul float %271, %383, !dbg !57
  %385 = fmul float %384, %379, !dbg !58
  %386 = fadd float %382, %385, !dbg !59
  %387 = bitcast float %381 to i32, !dbg !60
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !60
  %389 = bitcast i32 %388 to float, !dbg !60
  %390 = bitcast float %386 to i32, !dbg !60
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !60
  %392 = bitcast i32 %391 to float, !dbg !60
  %393 = bitcast float %376 to i32, !dbg !60
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !60
  %395 = bitcast i32 %394 to float, !dbg !60
  %396 = fsub float %389, %381, !dbg !46
  %397 = fadd float %376, %395, !dbg !49
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !50
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %397) #5, !dbg !51
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !52
  %401 = fmul float %396, %400, !dbg !53
  %402 = fadd float %381, %401, !dbg !54
  %403 = fadd float %386, %392, !dbg !55
  %404 = fmul float %396, %396, !dbg !56
  %405 = fmul float %376, %404, !dbg !57
  %406 = fmul float %400, %405, !dbg !58
  %407 = fadd float %403, %406, !dbg !59
  %408 = bitcast float %402 to i32, !dbg !60
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 2, i32 31), !dbg !60
  %410 = bitcast i32 %409 to float, !dbg !60
  %411 = bitcast float %407 to i32, !dbg !60
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 2, i32 31), !dbg !60
  %413 = bitcast i32 %412 to float, !dbg !60
  %414 = bitcast float %397 to i32, !dbg !60
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 2, i32 31), !dbg !60
  %416 = bitcast i32 %415 to float, !dbg !60
  %417 = fsub float %410, %402, !dbg !46
  %418 = fadd float %397, %416, !dbg !49
  %419 = fcmp oeq float %418, 0.000000e+00, !dbg !50
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %416, float %418) #5, !dbg !51
  %421 = select i1 %419, float 0.000000e+00, float %420, !dbg !52
  %422 = fmul float %417, %421, !dbg !53
  %423 = fadd float %402, %422, !dbg !54
  %424 = fadd float %407, %413, !dbg !55
  %425 = fmul float %417, %417, !dbg !56
  %426 = fmul float %397, %425, !dbg !57
  %427 = fmul float %421, %426, !dbg !58
  %428 = fadd float %424, %427, !dbg !59
  %429 = bitcast float %423 to i32, !dbg !60
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 1, i32 31), !dbg !60
  %431 = bitcast i32 %430 to float, !dbg !60
  %432 = bitcast float %428 to i32, !dbg !60
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !60
  %434 = bitcast i32 %433 to float, !dbg !60
  %435 = bitcast float %418 to i32, !dbg !60
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !60
  %437 = bitcast i32 %436 to float, !dbg !60
  %438 = fsub float %431, %423, !dbg !46
  %439 = fadd float %418, %437, !dbg !49
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !50
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %439) #5, !dbg !51
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !52
  %443 = fmul float %438, %442, !dbg !53
  %444 = fadd float %423, %443, !dbg !54
  %445 = fadd float %428, %434, !dbg !55
  %446 = fmul float %438, %438, !dbg !56
  %447 = fmul float %418, %446, !dbg !57
  %448 = fmul float %442, %447, !dbg !58
  %449 = fadd float %445, %448, !dbg !59
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !61
  %451 = bitcast float %360 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #5, !dbg !61
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !61
  %453 = bitcast float %444 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %453, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !61
  %455 = load i32, ptr addrspace(3) %454, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %456 = bitcast float %365 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %456, i1 true) #5, !dbg !62
  %457 = bitcast float %449 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %457, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %458 = load float, ptr addrspace(3) %454, align 4, !dbg !62
  %459 = shl nsw i32 %.decomposed, 4, !dbg !63
  %460 = add nsw i32 %24, %459, !dbg !64
  %461 = shl nsw i32 %209, 8, !dbg !65
  %462 = add i32 %460, %461, !dbg !66
  %463 = sext i32 %462 to i64, !dbg !67
  %464 = getelementptr float, ptr addrspace(1) %4, i64 %463, !dbg !67
  %465 = and i32 %12, 448, !dbg !68
  %466 = icmp eq i32 %465, 0, !dbg !68
  %467 = and i1 %466, %207, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %464, i1 %467) #5, !dbg !68
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %458, float 9.600000e+01) #5, !dbg !69
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 9.600000e+01) #5, !dbg !69
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %449, float 9.600000e+01) #5, !dbg !69
  %471 = fadd float %468, 0x3EB0C6F7A0000000, !dbg !70
  %472 = fadd float %469, 0x3EB0C6F7A0000000, !dbg !70
  %473 = fadd float %470, 0x3EB0C6F7A0000000, !dbg !70
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i = icmp eq i32 %474, 0, !dbg !62
  br i1 %.not.i, label %477, label %475, !dbg !62

475:                                              ; preds = %206
  %476 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %471), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

477:                                              ; preds = %206
  %478 = tail call float @llvm.nvvm.rsqrt.approx.f(float %471), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %475, %477
  %.0.i = phi float [ %476, %475 ], [ %478, %477 ], !dbg !62
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i28 = icmp eq i32 %482, 0, !dbg !62
  br i1 %.not.i28, label %485, label %483, !dbg !62

483:                                              ; preds = %__nv_rsqrtf.exit
  %484 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %472), !dbg !62
  br label %__nv_rsqrtf.exit30, !dbg !62

485:                                              ; preds = %__nv_rsqrtf.exit
  %486 = tail call float @llvm.nvvm.rsqrt.approx.f(float %472), !dbg !62
  br label %__nv_rsqrtf.exit30, !dbg !62

__nv_rsqrtf.exit30:                               ; preds = %483, %485
  %.0.i29 = phi float [ %484, %483 ], [ %486, %485 ], !dbg !62
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i40 = icmp eq i32 %490, 0, !dbg !62
  br i1 %.not.i40, label %493, label %491, !dbg !62

491:                                              ; preds = %__nv_rsqrtf.exit30
  %492 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %473), !dbg !62
  br label %__nv_rsqrtf.exit42, !dbg !62

493:                                              ; preds = %__nv_rsqrtf.exit30
  %494 = tail call float @llvm.nvvm.rsqrt.approx.f(float %473), !dbg !62
  br label %__nv_rsqrtf.exit42, !dbg !62

__nv_rsqrtf.exit42:                               ; preds = %491, %493
  %.0.i41 = phi float [ %492, %491 ], [ %494, %493 ], !dbg !62
  %495 = getelementptr float, ptr addrspace(1) %5, i64 %463, !dbg !71
  %496 = bitcast float %.0.i to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %495, i1 %467) #5, !dbg !72
  %497 = add i32 %22, %25, !dbg !73
  %498 = add i32 %22, %26, !dbg !73
  %499 = sext i32 %497 to i64, !dbg !74
  %500 = getelementptr float, ptr addrspace(1) %0, i64 %499, !dbg !74
  %501 = sext i32 %498 to i64, !dbg !74
  %502 = getelementptr float, ptr addrspace(1) %0, i64 %501, !dbg !74
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %500, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !75
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !75
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !75
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !75
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !75
  %508 = bitcast i32 %504 to float, !dbg !75
  %509 = bitcast i32 %505 to float, !dbg !75
  %510 = bitcast i32 %506 to float, !dbg !75
  %511 = bitcast i32 %507 to float, !dbg !75
  %512 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %502, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !75
  %513 = extractvalue { i32, i32, i32, i32 } %512, 0, !dbg !75
  %514 = extractvalue { i32, i32, i32, i32 } %512, 1, !dbg !75
  %515 = extractvalue { i32, i32, i32, i32 } %512, 2, !dbg !75
  %516 = extractvalue { i32, i32, i32, i32 } %512, 3, !dbg !75
  %517 = bitcast i32 %513 to float, !dbg !75
  %518 = bitcast i32 %514 to float, !dbg !75
  %519 = bitcast i32 %515 to float, !dbg !75
  %520 = bitcast i32 %516 to float, !dbg !75
  %521 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !76
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %521, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %523 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !77
  %524 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !77
  %525 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !77
  %526 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !77
  %527 = bitcast i32 %523 to float, !dbg !77
  %528 = bitcast i32 %524 to float, !dbg !77
  %529 = bitcast i32 %525 to float, !dbg !77
  %530 = bitcast i32 %526 to float, !dbg !77
  %531 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !78
  %532 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %531, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !79
  %533 = extractvalue { i32, i32, i32, i32 } %532, 0, !dbg !79
  %534 = extractvalue { i32, i32, i32, i32 } %532, 1, !dbg !79
  %535 = extractvalue { i32, i32, i32, i32 } %532, 2, !dbg !79
  %536 = extractvalue { i32, i32, i32, i32 } %532, 3, !dbg !79
  %537 = bitcast i32 %533 to float, !dbg !79
  %538 = bitcast i32 %534 to float, !dbg !79
  %539 = bitcast i32 %535 to float, !dbg !79
  %540 = bitcast i32 %536 to float, !dbg !79
  %541 = fsub float %508, %360, !dbg !80
  %542 = fsub float %509, %360, !dbg !80
  %543 = fsub float %510, %360, !dbg !80
  %544 = fsub float %511, %360, !dbg !80
  %545 = fsub float %517, %444, !dbg !80
  %546 = fsub float %518, %444, !dbg !80
  %547 = fsub float %519, %444, !dbg !80
  %548 = fsub float %520, %444, !dbg !80
  %549 = fmul float %.0.i29, %541, !dbg !81
  %550 = fmul float %.0.i29, %542, !dbg !81
  %551 = fmul float %.0.i29, %543, !dbg !81
  %552 = fmul float %.0.i29, %544, !dbg !81
  %553 = fmul float %.0.i41, %545, !dbg !81
  %554 = fmul float %.0.i41, %546, !dbg !81
  %555 = fmul float %.0.i41, %547, !dbg !81
  %556 = fmul float %.0.i41, %548, !dbg !81
  %557 = fmul float %549, %527, !dbg !82
  %558 = fmul float %550, %528, !dbg !82
  %559 = fmul float %551, %529, !dbg !82
  %560 = fmul float %552, %530, !dbg !82
  %561 = fmul float %553, %527, !dbg !82
  %562 = fmul float %554, %528, !dbg !82
  %563 = fmul float %555, %529, !dbg !82
  %564 = fmul float %556, %530, !dbg !82
  %565 = fadd float %557, %537, !dbg !83
  %566 = fadd float %558, %538, !dbg !83
  %567 = fadd float %559, %539, !dbg !83
  %568 = fadd float %560, %540, !dbg !83
  %569 = fadd float %561, %537, !dbg !83
  %570 = fadd float %562, %538, !dbg !83
  %571 = fadd float %563, %539, !dbg !83
  %572 = fadd float %564, %540, !dbg !83
  %573 = getelementptr float, ptr addrspace(1) %6, i64 %499, !dbg !84
  %574 = getelementptr float, ptr addrspace(1) %6, i64 %501, !dbg !84
  %575 = bitcast float %565 to i32, !dbg !85
  %576 = bitcast float %566 to i32, !dbg !85
  %577 = bitcast float %567 to i32, !dbg !85
  %578 = bitcast float %568 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %575, i32 %576, i32 %577, i32 %578, ptr addrspace(1) %573, i1 %19) #5, !dbg !85
  %579 = bitcast float %569 to i32, !dbg !85
  %580 = bitcast float %570 to i32, !dbg !85
  %581 = bitcast float %571 to i32, !dbg !85
  %582 = bitcast float %572 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %579, i32 %580, i32 %581, i32 %582, ptr addrspace(1) %574, i1 %20) #5, !dbg !85
  %583 = or disjoint i64 %27, 64, !dbg !86
  %584 = icmp samesign ult i64 %583, 96, !dbg !87
  %585 = trunc nuw nsw i64 %583 to i32, !dbg !73
  %586 = add i32 %25, %585, !dbg !73
  %587 = add i32 %26, %585, !dbg !73
  %588 = sext i32 %586 to i64, !dbg !74
  %589 = getelementptr float, ptr addrspace(1) %0, i64 %588, !dbg !74
  %590 = sext i32 %587 to i64, !dbg !74
  %591 = getelementptr float, ptr addrspace(1) %0, i64 %590, !dbg !74
  %592 = and i1 %19, %584, !dbg !88
  %593 = and i1 %20, %584, !dbg !88
  %594 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %589, i1 %592, i32 0, i1 %592, i32 0, i1 %592, i32 0, i1 %592, i32 0, i1 %592) #5, !dbg !75
  %595 = extractvalue { i32, i32, i32, i32 } %594, 0, !dbg !75
  %596 = extractvalue { i32, i32, i32, i32 } %594, 1, !dbg !75
  %597 = extractvalue { i32, i32, i32, i32 } %594, 2, !dbg !75
  %598 = extractvalue { i32, i32, i32, i32 } %594, 3, !dbg !75
  %599 = bitcast i32 %595 to float, !dbg !75
  %600 = bitcast i32 %596 to float, !dbg !75
  %601 = bitcast i32 %597 to float, !dbg !75
  %602 = bitcast i32 %598 to float, !dbg !75
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %591, i1 %593, i32 0, i1 %593, i32 0, i1 %593, i32 0, i1 %593, i32 0, i1 %593) #5, !dbg !75
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !75
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !75
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !75
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !75
  %608 = bitcast i32 %604 to float, !dbg !75
  %609 = bitcast i32 %605 to float, !dbg !75
  %610 = bitcast i32 %606 to float, !dbg !75
  %611 = bitcast i32 %607 to float, !dbg !75
  %612 = getelementptr float, ptr addrspace(1) %2, i64 %583, !dbg !76
  %613 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %612, i1 %584, i32 0, i1 %584, i32 0, i1 %584, i32 0, i1 %584, i32 0, i1 %584) #5, !dbg !77
  %614 = extractvalue { i32, i32, i32, i32 } %613, 0, !dbg !77
  %615 = extractvalue { i32, i32, i32, i32 } %613, 1, !dbg !77
  %616 = extractvalue { i32, i32, i32, i32 } %613, 2, !dbg !77
  %617 = extractvalue { i32, i32, i32, i32 } %613, 3, !dbg !77
  %618 = bitcast i32 %614 to float, !dbg !77
  %619 = bitcast i32 %615 to float, !dbg !77
  %620 = bitcast i32 %616 to float, !dbg !77
  %621 = bitcast i32 %617 to float, !dbg !77
  %622 = getelementptr float, ptr addrspace(1) %3, i64 %583, !dbg !78
  %623 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %622, i1 %584, i32 0, i1 %584, i32 0, i1 %584, i32 0, i1 %584, i32 0, i1 %584) #5, !dbg !79
  %624 = extractvalue { i32, i32, i32, i32 } %623, 0, !dbg !79
  %625 = extractvalue { i32, i32, i32, i32 } %623, 1, !dbg !79
  %626 = extractvalue { i32, i32, i32, i32 } %623, 2, !dbg !79
  %627 = extractvalue { i32, i32, i32, i32 } %623, 3, !dbg !79
  %628 = bitcast i32 %624 to float, !dbg !79
  %629 = bitcast i32 %625 to float, !dbg !79
  %630 = bitcast i32 %626 to float, !dbg !79
  %631 = bitcast i32 %627 to float, !dbg !79
  %632 = fsub float %599, %360, !dbg !80
  %633 = fsub float %600, %360, !dbg !80
  %634 = fsub float %601, %360, !dbg !80
  %635 = fsub float %602, %360, !dbg !80
  %636 = fsub float %608, %444, !dbg !80
  %637 = fsub float %609, %444, !dbg !80
  %638 = fsub float %610, %444, !dbg !80
  %639 = fsub float %611, %444, !dbg !80
  %640 = fmul float %.0.i29, %632, !dbg !81
  %641 = fmul float %.0.i29, %633, !dbg !81
  %642 = fmul float %.0.i29, %634, !dbg !81
  %643 = fmul float %.0.i29, %635, !dbg !81
  %644 = fmul float %.0.i41, %636, !dbg !81
  %645 = fmul float %.0.i41, %637, !dbg !81
  %646 = fmul float %.0.i41, %638, !dbg !81
  %647 = fmul float %.0.i41, %639, !dbg !81
  %648 = fmul float %640, %618, !dbg !82
  %649 = fmul float %641, %619, !dbg !82
  %650 = fmul float %642, %620, !dbg !82
  %651 = fmul float %643, %621, !dbg !82
  %652 = fmul float %644, %618, !dbg !82
  %653 = fmul float %645, %619, !dbg !82
  %654 = fmul float %646, %620, !dbg !82
  %655 = fmul float %647, %621, !dbg !82
  %656 = fadd float %648, %628, !dbg !83
  %657 = fadd float %649, %629, !dbg !83
  %658 = fadd float %650, %630, !dbg !83
  %659 = fadd float %651, %631, !dbg !83
  %660 = fadd float %652, %628, !dbg !83
  %661 = fadd float %653, %629, !dbg !83
  %662 = fadd float %654, %630, !dbg !83
  %663 = fadd float %655, %631, !dbg !83
  %664 = getelementptr float, ptr addrspace(1) %6, i64 %588, !dbg !84
  %665 = getelementptr float, ptr addrspace(1) %6, i64 %590, !dbg !84
  %666 = bitcast float %656 to i32, !dbg !85
  %667 = bitcast float %657 to i32, !dbg !85
  %668 = bitcast float %658 to i32, !dbg !85
  %669 = bitcast float %659 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %667, i32 %668, i32 %669, ptr addrspace(1) %664, i1 %592) #5, !dbg !85
  %670 = bitcast float %660 to i32, !dbg !85
  %671 = bitcast float %661 to i32, !dbg !85
  %672 = bitcast float %662 to i32, !dbg !85
  %673 = bitcast float %663 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %671, i32 %672, i32 %673, ptr addrspace(1) %665, i1 %593) #5, !dbg !85
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crr3m2ltnnptooz6qtc355d6ttmyjpivruavreahqq3qgx3a73l3.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_6", linkageName: "triton_red_fused_convolution_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 37, column: 46, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 27, scope: !7)
!21 = !DILocation(line: 35, column: 25, scope: !7)
!22 = !DILocation(line: 37, column: 43, scope: !7)
!23 = !DILocation(line: 37, column: 38, scope: !7)
!24 = !DILocation(line: 37, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 38, column: 34, scope: !7)
!27 = !DILocation(line: 38, column: 39, scope: !7)
!28 = !DILocation(line: 39, column: 22, scope: !7)
!29 = !DILocation(line: 178, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 42, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 44, column: 60, scope: !7)
!41 = !DILocation(line: 45, column: 56, scope: !7)
!42 = !DILocation(line: 46, column: 64, scope: !7)
!43 = !DILocation(line: 47, column: 51, scope: !7)
!44 = !DILocation(line: 30, column: 19, scope: !7)
!45 = !DILocation(line: 32, column: 19, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !48)
!47 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!48 = !DILocation(line: 49, column: 41, scope: !7)
!49 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !48)
!51 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !48)
!52 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !48)
!53 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !48)
!54 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !48)
!55 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !48)
!56 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !48)
!57 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !48)
!58 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !48)
!59 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !48)
!60 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !48)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 59, column: 28, scope: !7)
!63 = !DILocation(line: 54, column: 33, scope: !7)
!64 = !DILocation(line: 54, column: 30, scope: !7)
!65 = !DILocation(line: 54, column: 42, scope: !7)
!66 = !DILocation(line: 54, column: 38, scope: !7)
!67 = !DILocation(line: 54, column: 25, scope: !7)
!68 = !DILocation(line: 54, column: 53, scope: !7)
!69 = !DILocation(line: 56, column: 18, scope: !7)
!70 = !DILocation(line: 58, column: 19, scope: !7)
!71 = !DILocation(line: 60, column: 25, scope: !7)
!72 = !DILocation(line: 60, column: 54, scope: !7)
!73 = !DILocation(line: 65, column: 44, scope: !7)
!74 = !DILocation(line: 65, column: 39, scope: !7)
!75 = !DILocation(line: 65, column: 52, scope: !7)
!76 = !DILocation(line: 66, column: 35, scope: !7)
!77 = !DILocation(line: 66, column: 40, scope: !7)
!78 = !DILocation(line: 67, column: 35, scope: !7)
!79 = !DILocation(line: 67, column: 40, scope: !7)
!80 = !DILocation(line: 68, column: 24, scope: !7)
!81 = !DILocation(line: 69, column: 24, scope: !7)
!82 = !DILocation(line: 70, column: 24, scope: !7)
!83 = !DILocation(line: 71, column: 24, scope: !7)
!84 = !DILocation(line: 72, column: 29, scope: !7)
!85 = !DILocation(line: 72, column: 49, scope: !7)
!86 = !DILocation(line: 62, column: 27, scope: !7)
!87 = !DILocation(line: 63, column: 25, scope: !7)
!88 = !DILocation(line: 65, column: 60, scope: !7)
!89 = !DILocation(line: 61, column: 4, scope: !7)
