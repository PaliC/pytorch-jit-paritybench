; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %8, %11, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = icmp slt i32 %30, 1024, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %32 = sdiv i32 %.frozen, 768, !dbg !16
  %33 = mul i32 %32, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %.frozen5 = freeze i32 %21, !dbg !16
  %34 = sdiv i32 %.frozen5, 768, !dbg !16
  %35 = mul i32 %34, 768, !dbg !17
  %.decomposed6 = sub i32 %.frozen5, %35, !dbg !17
  %36 = mul i32 %30, 768, !dbg !18
  %37 = add i32 %.decomposed, %36, !dbg !19
  %38 = mul i32 %32, 786432, !dbg !20
  %39 = mul i32 %34, 786432, !dbg !20
  %40 = add i32 %37, %38, !dbg !21
  %41 = add i32 %39, %.decomposed6, !dbg !19
  %42 = add i32 %41, %36, !dbg !21
  %43 = sext i32 %40 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %42 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %31) #2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %31) #2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = sext i32 %.decomposed to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = sext i32 %.decomposed6 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !25
  %71 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !23
  %72 = insertelement <8 x i32> %71, i32 %55, i64 1, !dbg !23
  %73 = insertelement <8 x i32> %72, i32 %54, i64 2, !dbg !23
  %74 = insertelement <8 x i32> %73, i32 %53, i64 3, !dbg !23
  %75 = insertelement <8 x i32> %74, i32 %51, i64 4, !dbg !23
  %76 = insertelement <8 x i32> %75, i32 %50, i64 5, !dbg !23
  %77 = insertelement <8 x i32> %76, i32 %49, i64 6, !dbg !23
  %78 = insertelement <8 x i32> %77, i32 %48, i64 7, !dbg !23
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !23
  %80 = insertelement <8 x i32> poison, i32 %70, i64 0, !dbg !25
  %81 = insertelement <8 x i32> %80, i32 %69, i64 1, !dbg !25
  %82 = insertelement <8 x i32> %81, i32 %68, i64 2, !dbg !25
  %83 = insertelement <8 x i32> %82, i32 %67, i64 3, !dbg !25
  %84 = insertelement <8 x i32> %83, i32 %65, i64 4, !dbg !25
  %85 = insertelement <8 x i32> %84, i32 %64, i64 5, !dbg !25
  %86 = insertelement <8 x i32> %85, i32 %63, i64 6, !dbg !25
  %87 = insertelement <8 x i32> %86, i32 %62, i64 7, !dbg !25
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !25
  %89 = fadd <8 x float> %79, %88, !dbg !26
  %90 = fcmp olt <8 x float> %89, zeroinitializer, !dbg !27
  %91 = extractelement <8 x i1> %90, i64 7, !dbg !31
  %92 = extractelement <8 x float> %89, i64 7, !dbg !32
  %93 = extractelement <8 x i1> %90, i64 6, !dbg !31
  %94 = extractelement <8 x float> %89, i64 6, !dbg !32
  %95 = extractelement <8 x i1> %90, i64 5, !dbg !31
  %96 = extractelement <8 x float> %89, i64 5, !dbg !32
  %97 = extractelement <8 x i1> %90, i64 4, !dbg !31
  %98 = extractelement <8 x float> %89, i64 4, !dbg !32
  %99 = extractelement <8 x i1> %90, i64 3, !dbg !31
  %100 = extractelement <8 x float> %89, i64 3, !dbg !32
  %101 = extractelement <8 x i1> %90, i64 2, !dbg !31
  %102 = extractelement <8 x float> %89, i64 2, !dbg !32
  %103 = extractelement <8 x i1> %90, i64 1, !dbg !31
  %104 = extractelement <8 x float> %89, i64 1, !dbg !32
  %105 = extractelement <8 x i1> %90, i64 0, !dbg !31
  %106 = extractelement <8 x float> %89, i64 0, !dbg !32
  %107 = shl i32 %22, 10, !dbg !33
  %108 = shl i32 %23, 10, !dbg !33
  %109 = shl i32 %24, 10, !dbg !33
  %110 = shl i32 %25, 10, !dbg !33
  %111 = shl i32 %26, 10, !dbg !33
  %112 = shl i32 %27, 10, !dbg !33
  %113 = shl i32 %28, 10, !dbg !33
  %114 = shl i32 %29, 10, !dbg !33
  %115 = add i32 %107, %30, !dbg !34
  %116 = add i32 %108, %30, !dbg !34
  %117 = add i32 %109, %30, !dbg !34
  %118 = add i32 %110, %30, !dbg !34
  %119 = add i32 %111, %30, !dbg !34
  %120 = add i32 %112, %30, !dbg !34
  %121 = add i32 %113, %30, !dbg !34
  %122 = add i32 %114, %30, !dbg !34
  %123 = sext i32 %115 to i64, !dbg !35
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !35
  %125 = sext i32 %116 to i64, !dbg !35
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !35
  %127 = sext i32 %117 to i64, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !35
  %129 = sext i32 %118 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !35
  %131 = sext i32 %119 to i64, !dbg !35
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !35
  %133 = sext i32 %120 to i64, !dbg !35
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !35
  %135 = sext i32 %121 to i64, !dbg !35
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !35
  %137 = sext i32 %122 to i64, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !35
  %.idx = shl nuw nsw i32 %11, 3, !dbg !32
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %140 = bitcast float %92 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !32
  %141 = shl nuw nsw i32 %11, 1, !dbg !32
  %142 = or disjoint i32 %141, 2, !dbg !32
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !32
  %144 = bitcast float %94 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !32
  %145 = or disjoint i32 %141, 4, !dbg !32
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = bitcast float %96 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !32
  %148 = or disjoint i32 %141, 6, !dbg !32
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !32
  %150 = bitcast float %98 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !32
  %151 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !32
  %152 = load i32, ptr addrspace(3) %151, align 8, !dbg !32
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !32
  %153 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !32
  %154 = load i32, ptr addrspace(3) %153, align 8, !dbg !32
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !32
  %155 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %156 = load i32, ptr addrspace(3) %155, align 8, !dbg !32
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !32
  %157 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %158 = load i32, ptr addrspace(3) %157, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %159 = bitcast float %100 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %159, i1 true) #2, !dbg !32
  %160 = bitcast float %102 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %160, i1 true) #2, !dbg !32
  %161 = bitcast float %104 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %161, i1 true) #2, !dbg !32
  %162 = bitcast float %106 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %162, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %163 = load i32, ptr addrspace(3) %151, align 8, !dbg !32
  %164 = load i32, ptr addrspace(3) %153, align 8, !dbg !32
  %165 = load i32, ptr addrspace(3) %155, align 8, !dbg !32
  %166 = load i32, ptr addrspace(3) %157, align 8, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %124, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %126, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %128, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %130, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %132, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %134, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %136, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %138, i1 %31) #2, !dbg !32
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !36
  %169 = bitcast float %92 to i32, !dbg !37
  %170 = select i1 %91, i32 0, i32 %169, !dbg !31
  %171 = bitcast float %94 to i32, !dbg !37
  %172 = select i1 %93, i32 0, i32 %171, !dbg !31
  %173 = bitcast float %96 to i32, !dbg !37
  %174 = select i1 %95, i32 0, i32 %173, !dbg !31
  %175 = bitcast float %98 to i32, !dbg !37
  %176 = select i1 %97, i32 0, i32 %175, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %172, i32 %174, i32 %176, ptr addrspace(1) %167, i1 %31) #2, !dbg !37
  %177 = bitcast float %100 to i32, !dbg !37
  %178 = select i1 %99, i32 0, i32 %177, !dbg !31
  %179 = bitcast float %102 to i32, !dbg !37
  %180 = select i1 %101, i32 0, i32 %179, !dbg !31
  %181 = bitcast float %104 to i32, !dbg !37
  %182 = select i1 %103, i32 0, i32 %181, !dbg !31
  %183 = bitcast float %106 to i32, !dbg !37
  %184 = select i1 %105, i32 0, i32 %183, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %180, i32 %182, i32 %184, ptr addrspace(1) %168, i1 %31) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7uljf2ouk4vwtthh4ujzeuhtwhg44ge5nxtouovvjv2mud53tvl.py", directory: "inductor_cache/7u")
!4 = !{ptr @triton_poi_fused_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_6", linkageName: "triton_poi_fused_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 46, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 57, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
