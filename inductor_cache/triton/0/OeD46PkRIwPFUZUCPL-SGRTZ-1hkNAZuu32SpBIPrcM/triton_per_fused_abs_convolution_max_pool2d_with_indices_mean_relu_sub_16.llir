; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 1024, !dbg !14
  %13 = lshr i32 %9, 5, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %15 = or disjoint i32 %14, 8, !dbg !15
  %16 = or disjoint i32 %14, 16, !dbg !15
  %17 = or disjoint i32 %14, 24, !dbg !15
  %18 = or disjoint i32 %14, 32, !dbg !15
  %19 = or disjoint i32 %14, 40, !dbg !15
  %20 = or disjoint i32 %14, 48, !dbg !15
  %21 = or disjoint i32 %14, 56, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %22 = sdiv i32 %.frozen, 64, !dbg !16
  %23 = mul i32 %22, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl nuw nsw i32 %14, 9, !dbg !18
  %25 = shl nuw nsw i32 %15, 9, !dbg !18
  %26 = shl nuw nsw i32 %16, 9, !dbg !18
  %27 = shl nuw nsw i32 %17, 9, !dbg !18
  %28 = shl nuw nsw i32 %18, 9, !dbg !18
  %29 = shl nuw nsw i32 %19, 9, !dbg !18
  %30 = shl nuw nsw i32 %20, 9, !dbg !18
  %31 = shl nuw nsw i32 %21, 9, !dbg !18
  %32 = shl nsw i32 %.decomposed, 7, !dbg !19
  %33 = or disjoint i32 %32, %14, !dbg !20
  %34 = or disjoint i32 %32, %15, !dbg !20
  %35 = or disjoint i32 %32, %16, !dbg !20
  %36 = or disjoint i32 %32, %17, !dbg !20
  %37 = or disjoint i32 %32, %18, !dbg !20
  %38 = or disjoint i32 %32, %19, !dbg !20
  %39 = or disjoint i32 %32, %20, !dbg !20
  %40 = or disjoint i32 %32, %21, !dbg !20
  %41 = or disjoint i32 %33, 64, !dbg !20
  %42 = or disjoint i32 %33, 72, !dbg !20
  %43 = or disjoint i32 %33, 80, !dbg !20
  %44 = or disjoint i32 %33, 88, !dbg !20
  %45 = or disjoint i32 %33, 96, !dbg !20
  %46 = or disjoint i32 %33, 104, !dbg !20
  %47 = or disjoint i32 %33, 112, !dbg !20
  %48 = or disjoint i32 %33, 120, !dbg !20
  %49 = shl i32 %22, 13, !dbg !21
  %50 = add i32 %33, %49, !dbg !22
  %51 = add i32 %34, %49, !dbg !22
  %52 = add i32 %35, %49, !dbg !22
  %53 = add i32 %36, %49, !dbg !22
  %54 = add i32 %37, %49, !dbg !22
  %55 = add i32 %38, %49, !dbg !22
  %56 = add i32 %39, %49, !dbg !22
  %57 = add i32 %40, %49, !dbg !22
  %58 = add i32 %41, %49, !dbg !22
  %59 = add i32 %42, %49, !dbg !22
  %60 = add i32 %43, %49, !dbg !22
  %61 = add i32 %44, %49, !dbg !22
  %62 = add i32 %45, %49, !dbg !22
  %63 = add i32 %46, %49, !dbg !22
  %64 = add i32 %47, %49, !dbg !22
  %65 = add i32 %48, %49, !dbg !22
  %66 = sdiv i32 %50, 32768, !dbg !23
  %67 = sdiv i32 %51, 32768, !dbg !23
  %68 = sdiv i32 %52, 32768, !dbg !23
  %69 = sdiv i32 %53, 32768, !dbg !23
  %70 = sdiv i32 %54, 32768, !dbg !23
  %71 = sdiv i32 %55, 32768, !dbg !23
  %72 = sdiv i32 %56, 32768, !dbg !23
  %73 = sdiv i32 %57, 32768, !dbg !23
  %74 = sdiv i32 %58, 32768, !dbg !23
  %75 = sdiv i32 %59, 32768, !dbg !23
  %76 = sdiv i32 %60, 32768, !dbg !23
  %77 = sdiv i32 %61, 32768, !dbg !23
  %78 = sdiv i32 %62, 32768, !dbg !23
  %79 = sdiv i32 %63, 32768, !dbg !23
  %80 = sdiv i32 %64, 32768, !dbg !23
  %81 = sdiv i32 %65, 32768, !dbg !23
  %82 = shl nsw i32 %66, 15, !dbg !24
  %83 = shl nsw i32 %67, 15, !dbg !24
  %84 = shl nsw i32 %68, 15, !dbg !24
  %85 = shl nsw i32 %69, 15, !dbg !24
  %86 = shl nsw i32 %70, 15, !dbg !24
  %87 = shl nsw i32 %71, 15, !dbg !24
  %88 = shl nsw i32 %72, 15, !dbg !24
  %89 = shl nsw i32 %73, 15, !dbg !24
  %90 = shl nsw i32 %74, 15, !dbg !24
  %91 = shl nsw i32 %75, 15, !dbg !24
  %92 = shl nsw i32 %76, 15, !dbg !24
  %93 = shl nsw i32 %77, 15, !dbg !24
  %94 = shl nsw i32 %78, 15, !dbg !24
  %95 = shl nsw i32 %79, 15, !dbg !24
  %96 = shl nsw i32 %80, 15, !dbg !24
  %97 = shl nsw i32 %81, 15, !dbg !24
  %98 = or disjoint i32 %82, %24, !dbg !25
  %99 = or disjoint i32 %83, %25, !dbg !25
  %100 = or disjoint i32 %84, %26, !dbg !25
  %101 = or disjoint i32 %85, %27, !dbg !25
  %102 = or disjoint i32 %86, %28, !dbg !25
  %103 = or disjoint i32 %87, %29, !dbg !25
  %104 = or disjoint i32 %88, %30, !dbg !25
  %105 = or disjoint i32 %89, %31, !dbg !25
  %106 = or disjoint i32 %90, %24, !dbg !25
  %107 = sdiv i32 %50, 64, !dbg !26
  %108 = sdiv i32 %51, 64, !dbg !26
  %109 = sdiv i32 %52, 64, !dbg !26
  %110 = sdiv i32 %53, 64, !dbg !26
  %111 = sdiv i32 %54, 64, !dbg !26
  %112 = sdiv i32 %55, 64, !dbg !26
  %113 = sdiv i32 %56, 64, !dbg !26
  %114 = sdiv i32 %57, 64, !dbg !26
  %115 = sdiv i32 %58, 64, !dbg !26
  %116 = sdiv i32 %59, 64, !dbg !26
  %117 = sdiv i32 %60, 64, !dbg !26
  %118 = sdiv i32 %61, 64, !dbg !26
  %119 = sdiv i32 %62, 64, !dbg !26
  %120 = sdiv i32 %63, 64, !dbg !26
  %121 = sdiv i32 %64, 64, !dbg !26
  %122 = sdiv i32 %65, 64, !dbg !26
  %123 = srem i32 %107, 512, !dbg !27
  %124 = srem i32 %108, 512, !dbg !27
  %125 = srem i32 %109, 512, !dbg !27
  %126 = srem i32 %110, 512, !dbg !27
  %127 = srem i32 %111, 512, !dbg !27
  %128 = srem i32 %112, 512, !dbg !27
  %129 = srem i32 %113, 512, !dbg !27
  %130 = srem i32 %114, 512, !dbg !27
  %131 = srem i32 %115, 512, !dbg !27
  %132 = srem i32 %116, 512, !dbg !27
  %133 = srem i32 %117, 512, !dbg !27
  %134 = srem i32 %118, 512, !dbg !27
  %135 = srem i32 %119, 512, !dbg !27
  %136 = srem i32 %120, 512, !dbg !27
  %137 = srem i32 %121, 512, !dbg !27
  %138 = srem i32 %122, 512, !dbg !27
  %139 = add i32 %98, %123, !dbg !28
  %140 = add nsw i32 %99, %124, !dbg !28
  %141 = add nsw i32 %100, %125, !dbg !28
  %142 = add nsw i32 %101, %126, !dbg !28
  %143 = add nsw i32 %102, %127, !dbg !28
  %144 = add nsw i32 %103, %128, !dbg !28
  %145 = add nsw i32 %104, %129, !dbg !28
  %146 = add nsw i32 %105, %130, !dbg !28
  %147 = add i32 %106, %131, !dbg !28
  %148 = or disjoint i32 %24, %91, !dbg !25
  %149 = or disjoint i32 %148, 4096, !dbg !25
  %150 = add nsw i32 %149, %132, !dbg !28
  %151 = or disjoint i32 %24, %92, !dbg !25
  %152 = or disjoint i32 %151, 8192, !dbg !25
  %153 = add nsw i32 %152, %133, !dbg !28
  %154 = or disjoint i32 %24, %93, !dbg !25
  %155 = or disjoint i32 %154, 12288, !dbg !25
  %156 = add nsw i32 %155, %134, !dbg !28
  %157 = or disjoint i32 %24, %94, !dbg !25
  %158 = or disjoint i32 %157, 16384, !dbg !25
  %159 = add nsw i32 %158, %135, !dbg !28
  %160 = or disjoint i32 %24, %95, !dbg !25
  %161 = or disjoint i32 %160, 20480, !dbg !25
  %162 = add nsw i32 %161, %136, !dbg !28
  %163 = or disjoint i32 %24, %96, !dbg !25
  %164 = or disjoint i32 %163, 24576, !dbg !25
  %165 = add nsw i32 %164, %137, !dbg !28
  %166 = or disjoint i32 %24, %97, !dbg !25
  %167 = or disjoint i32 %166, 28672, !dbg !25
  %168 = add nsw i32 %167, %138, !dbg !28
  %169 = sext i32 %139 to i64, !dbg !29
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !29
  %171 = sext i32 %140 to i64, !dbg !29
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !29
  %173 = sext i32 %141 to i64, !dbg !29
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !29
  %175 = sext i32 %142 to i64, !dbg !29
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !29
  %177 = sext i32 %143 to i64, !dbg !29
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !29
  %179 = sext i32 %144 to i64, !dbg !29
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !29
  %181 = sext i32 %145 to i64, !dbg !29
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !29
  %183 = sext i32 %146 to i64, !dbg !29
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !29
  %185 = sext i32 %147 to i64, !dbg !29
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !29
  %187 = sext i32 %150 to i64, !dbg !29
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !29
  %189 = sext i32 %153 to i64, !dbg !29
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !29
  %191 = sext i32 %156 to i64, !dbg !29
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !29
  %193 = sext i32 %159 to i64, !dbg !29
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !29
  %195 = sext i32 %162 to i64, !dbg !29
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !29
  %197 = sext i32 %165 to i64, !dbg !29
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !29
  %199 = sext i32 %168 to i64, !dbg !29
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !29
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %12, i32 0, i1 %12) #3, !dbg !30
  %217 = sext i32 %123 to i64, !dbg !31
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !31
  %219 = sext i32 %124 to i64, !dbg !31
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !31
  %221 = sext i32 %125 to i64, !dbg !31
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !31
  %223 = sext i32 %126 to i64, !dbg !31
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !31
  %225 = sext i32 %127 to i64, !dbg !31
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !31
  %227 = sext i32 %128 to i64, !dbg !31
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !31
  %229 = sext i32 %129 to i64, !dbg !31
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !31
  %231 = sext i32 %130 to i64, !dbg !31
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !31
  %233 = sext i32 %131 to i64, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !31
  %235 = sext i32 %132 to i64, !dbg !31
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !31
  %237 = sext i32 %133 to i64, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !31
  %239 = sext i32 %134 to i64, !dbg !31
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !31
  %241 = sext i32 %135 to i64, !dbg !31
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !31
  %243 = sext i32 %136 to i64, !dbg !31
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !31
  %245 = sext i32 %137 to i64, !dbg !31
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !31
  %247 = sext i32 %138 to i64, !dbg !31
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !31
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %12, i32 0, i1 %12) #3, !dbg !32
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !33
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !33
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !33
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !33
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !33
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !33
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !33
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !33
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !33
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !33
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !33
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !33
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !33
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !33
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !33
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !33
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %297 = insertelement <16 x i32> poison, i32 %296, i64 0, !dbg !34
  %298 = insertelement <16 x i32> %297, i32 %295, i64 1, !dbg !34
  %299 = insertelement <16 x i32> %298, i32 %294, i64 2, !dbg !34
  %300 = insertelement <16 x i32> %299, i32 %293, i64 3, !dbg !34
  %301 = insertelement <16 x i32> %300, i32 %292, i64 4, !dbg !34
  %302 = insertelement <16 x i32> %301, i32 %291, i64 5, !dbg !34
  %303 = insertelement <16 x i32> %302, i32 %290, i64 6, !dbg !34
  %304 = insertelement <16 x i32> %303, i32 %289, i64 7, !dbg !34
  %305 = insertelement <16 x i32> %304, i32 %288, i64 8, !dbg !34
  %306 = insertelement <16 x i32> %305, i32 %287, i64 9, !dbg !34
  %307 = insertelement <16 x i32> %306, i32 %286, i64 10, !dbg !34
  %308 = insertelement <16 x i32> %307, i32 %285, i64 11, !dbg !34
  %309 = insertelement <16 x i32> %308, i32 %284, i64 12, !dbg !34
  %310 = insertelement <16 x i32> %309, i32 %283, i64 13, !dbg !34
  %311 = insertelement <16 x i32> %310, i32 %282, i64 14, !dbg !34
  %312 = insertelement <16 x i32> %311, i32 %281, i64 15, !dbg !34
  %313 = bitcast <16 x i32> %312 to <16 x float>, !dbg !34
  %314 = insertelement <32 x i32> poison, i32 %264, i64 0, !dbg !32
  %315 = insertelement <32 x i32> %314, i32 %263, i64 1, !dbg !32
  %316 = insertelement <32 x i32> %315, i32 %262, i64 2, !dbg !32
  %317 = insertelement <32 x i32> %316, i32 %261, i64 3, !dbg !32
  %318 = insertelement <32 x i32> %317, i32 %260, i64 4, !dbg !32
  %319 = insertelement <32 x i32> %318, i32 %259, i64 5, !dbg !32
  %320 = insertelement <32 x i32> %319, i32 %258, i64 6, !dbg !32
  %321 = insertelement <32 x i32> %320, i32 %257, i64 7, !dbg !32
  %322 = insertelement <32 x i32> %321, i32 %256, i64 8, !dbg !32
  %323 = insertelement <32 x i32> %322, i32 %255, i64 9, !dbg !32
  %324 = insertelement <32 x i32> %323, i32 %254, i64 10, !dbg !32
  %325 = insertelement <32 x i32> %324, i32 %253, i64 11, !dbg !32
  %326 = insertelement <32 x i32> %325, i32 %252, i64 12, !dbg !32
  %327 = insertelement <32 x i32> %326, i32 %251, i64 13, !dbg !32
  %328 = insertelement <32 x i32> %327, i32 %250, i64 14, !dbg !32
  %329 = insertelement <32 x i32> %328, i32 %249, i64 15, !dbg !32
  %330 = insertelement <32 x i32> %329, i32 %216, i64 16, !dbg !32
  %331 = insertelement <32 x i32> %330, i32 %215, i64 17, !dbg !32
  %332 = insertelement <32 x i32> %331, i32 %214, i64 18, !dbg !32
  %333 = insertelement <32 x i32> %332, i32 %213, i64 19, !dbg !32
  %334 = insertelement <32 x i32> %333, i32 %212, i64 20, !dbg !32
  %335 = insertelement <32 x i32> %334, i32 %211, i64 21, !dbg !32
  %336 = insertelement <32 x i32> %335, i32 %210, i64 22, !dbg !32
  %337 = insertelement <32 x i32> %336, i32 %209, i64 23, !dbg !32
  %338 = insertelement <32 x i32> %337, i32 %208, i64 24, !dbg !32
  %339 = insertelement <32 x i32> %338, i32 %207, i64 25, !dbg !32
  %340 = insertelement <32 x i32> %339, i32 %206, i64 26, !dbg !32
  %341 = insertelement <32 x i32> %340, i32 %205, i64 27, !dbg !32
  %342 = insertelement <32 x i32> %341, i32 %204, i64 28, !dbg !32
  %343 = insertelement <32 x i32> %342, i32 %203, i64 29, !dbg !32
  %344 = insertelement <32 x i32> %343, i32 %202, i64 30, !dbg !32
  %345 = insertelement <32 x i32> %344, i32 %201, i64 31, !dbg !32
  %346 = bitcast <32 x i32> %345 to <32 x float>, !dbg !32
  %347 = shufflevector <32 x float> %346, <32 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !35
  %348 = shufflevector <16 x float> %313, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %349 = shufflevector <32 x float> %348, <32 x float> %347, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !35
  %350 = fadd <32 x float> %349, %346, !dbg !35
  %351 = fcmp olt <32 x float> %350, zeroinitializer, !dbg !36
  %352 = extractelement <32 x i1> %351, i64 31, !dbg !40
  %353 = extractelement <32 x float> %350, i64 31, !dbg !40
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !40
  %355 = extractelement <32 x i1> %351, i64 30, !dbg !40
  %356 = extractelement <32 x float> %350, i64 30, !dbg !40
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !40
  %358 = extractelement <32 x i1> %351, i64 29, !dbg !40
  %359 = extractelement <32 x float> %350, i64 29, !dbg !40
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !40
  %361 = extractelement <32 x i1> %351, i64 28, !dbg !40
  %362 = extractelement <32 x float> %350, i64 28, !dbg !40
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !40
  %364 = extractelement <32 x i1> %351, i64 27, !dbg !40
  %365 = extractelement <32 x float> %350, i64 27, !dbg !40
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !40
  %367 = extractelement <32 x i1> %351, i64 26, !dbg !40
  %368 = extractelement <32 x float> %350, i64 26, !dbg !40
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !40
  %370 = extractelement <32 x i1> %351, i64 25, !dbg !40
  %371 = extractelement <32 x float> %350, i64 25, !dbg !40
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !40
  %373 = extractelement <32 x i1> %351, i64 24, !dbg !40
  %374 = extractelement <32 x float> %350, i64 24, !dbg !40
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !40
  %376 = extractelement <32 x i1> %351, i64 23, !dbg !40
  %377 = extractelement <32 x float> %350, i64 23, !dbg !40
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !40
  %379 = extractelement <32 x i1> %351, i64 22, !dbg !40
  %380 = extractelement <32 x float> %350, i64 22, !dbg !40
  %381 = select i1 %379, float 0.000000e+00, float %380, !dbg !40
  %382 = extractelement <32 x i1> %351, i64 21, !dbg !40
  %383 = extractelement <32 x float> %350, i64 21, !dbg !40
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !40
  %385 = extractelement <32 x i1> %351, i64 20, !dbg !40
  %386 = extractelement <32 x float> %350, i64 20, !dbg !40
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !40
  %388 = extractelement <32 x i1> %351, i64 19, !dbg !40
  %389 = extractelement <32 x float> %350, i64 19, !dbg !40
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !40
  %391 = extractelement <32 x i1> %351, i64 18, !dbg !40
  %392 = extractelement <32 x float> %350, i64 18, !dbg !40
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !40
  %394 = extractelement <32 x i1> %351, i64 17, !dbg !40
  %395 = extractelement <32 x float> %350, i64 17, !dbg !40
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !40
  %397 = extractelement <32 x i1> %351, i64 16, !dbg !40
  %398 = extractelement <32 x float> %350, i64 16, !dbg !40
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !40
  %400 = extractelement <32 x i1> %351, i64 15, !dbg !42
  %401 = extractelement <32 x float> %350, i64 15, !dbg !42
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !42
  %403 = extractelement <32 x i1> %351, i64 14, !dbg !42
  %404 = extractelement <32 x float> %350, i64 14, !dbg !42
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !42
  %406 = extractelement <32 x i1> %351, i64 13, !dbg !42
  %407 = extractelement <32 x float> %350, i64 13, !dbg !42
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !42
  %409 = extractelement <32 x i1> %351, i64 12, !dbg !42
  %410 = extractelement <32 x float> %350, i64 12, !dbg !42
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !42
  %412 = extractelement <32 x i1> %351, i64 11, !dbg !42
  %413 = extractelement <32 x float> %350, i64 11, !dbg !42
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !42
  %415 = extractelement <32 x i1> %351, i64 10, !dbg !42
  %416 = extractelement <32 x float> %350, i64 10, !dbg !42
  %417 = select i1 %415, float 0.000000e+00, float %416, !dbg !42
  %418 = extractelement <32 x i1> %351, i64 9, !dbg !42
  %419 = extractelement <32 x float> %350, i64 9, !dbg !42
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !42
  %421 = extractelement <32 x i1> %351, i64 8, !dbg !42
  %422 = extractelement <32 x float> %350, i64 8, !dbg !42
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !42
  %424 = extractelement <32 x i1> %351, i64 7, !dbg !42
  %425 = extractelement <32 x float> %350, i64 7, !dbg !42
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !42
  %427 = extractelement <32 x i1> %351, i64 6, !dbg !42
  %428 = extractelement <32 x float> %350, i64 6, !dbg !42
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !42
  %430 = extractelement <32 x i1> %351, i64 5, !dbg !42
  %431 = extractelement <32 x float> %350, i64 5, !dbg !42
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !42
  %433 = extractelement <32 x i1> %351, i64 4, !dbg !42
  %434 = extractelement <32 x float> %350, i64 4, !dbg !42
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !42
  %436 = extractelement <32 x i1> %351, i64 3, !dbg !42
  %437 = extractelement <32 x float> %350, i64 3, !dbg !42
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !42
  %439 = extractelement <32 x i1> %351, i64 2, !dbg !42
  %440 = extractelement <32 x float> %350, i64 2, !dbg !42
  %441 = select i1 %439, float 0.000000e+00, float %440, !dbg !42
  %442 = extractelement <32 x i1> %351, i64 1, !dbg !42
  %443 = extractelement <32 x float> %350, i64 1, !dbg !42
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !42
  %445 = extractelement <32 x i1> %351, i64 0, !dbg !42
  %446 = extractelement <32 x float> %350, i64 0, !dbg !42
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !42
  %448 = fsub float %354, %402, !dbg !43
  %449 = fsub float %357, %405, !dbg !43
  %450 = fsub float %360, %408, !dbg !43
  %451 = fsub float %363, %411, !dbg !43
  %452 = fsub float %366, %414, !dbg !43
  %453 = fsub float %369, %417, !dbg !43
  %454 = fsub float %372, %420, !dbg !43
  %455 = fsub float %375, %423, !dbg !43
  %456 = fsub float %378, %426, !dbg !43
  %457 = fsub float %381, %429, !dbg !43
  %458 = fsub float %384, %432, !dbg !43
  %459 = fsub float %387, %435, !dbg !43
  %460 = fsub float %390, %438, !dbg !43
  %461 = fsub float %393, %441, !dbg !43
  %462 = fsub float %396, %444, !dbg !43
  %463 = fsub float %399, %447, !dbg !43
  %464 = tail call float @llvm.fabs.f32(float %448), !dbg !44
  %465 = tail call float @llvm.fabs.f32(float %449), !dbg !44
  %466 = tail call float @llvm.fabs.f32(float %450), !dbg !44
  %467 = tail call float @llvm.fabs.f32(float %451), !dbg !44
  %468 = tail call float @llvm.fabs.f32(float %452), !dbg !44
  %469 = tail call float @llvm.fabs.f32(float %453), !dbg !44
  %470 = tail call float @llvm.fabs.f32(float %454), !dbg !44
  %471 = tail call float @llvm.fabs.f32(float %455), !dbg !44
  %472 = tail call float @llvm.fabs.f32(float %456), !dbg !44
  %473 = tail call float @llvm.fabs.f32(float %457), !dbg !44
  %474 = tail call float @llvm.fabs.f32(float %458), !dbg !44
  %475 = tail call float @llvm.fabs.f32(float %459), !dbg !44
  %476 = tail call float @llvm.fabs.f32(float %460), !dbg !44
  %477 = tail call float @llvm.fabs.f32(float %461), !dbg !44
  %478 = tail call float @llvm.fabs.f32(float %462), !dbg !44
  %479 = tail call float @llvm.fabs.f32(float %463), !dbg !44
  %480 = fadd float %464, %465, !dbg !45
  %481 = fadd float %480, %466, !dbg !45
  %482 = fadd float %481, %467, !dbg !45
  %483 = fadd float %482, %468, !dbg !45
  %484 = fadd float %483, %469, !dbg !45
  %485 = fadd float %484, %470, !dbg !45
  %486 = fadd float %485, %471, !dbg !45
  %487 = fadd float %486, %472, !dbg !45
  %488 = fadd float %487, %473, !dbg !45
  %489 = fadd float %488, %474, !dbg !45
  %490 = fadd float %489, %475, !dbg !45
  %491 = fadd float %490, %476, !dbg !45
  %492 = fadd float %491, %477, !dbg !45
  %493 = fadd float %492, %478, !dbg !45
  %494 = fadd float %493, %479, !dbg !45
  %495 = shl nuw nsw i32 %10, 3, !dbg !50
  %496 = or disjoint i32 %495, %14, !dbg !50
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !50
  %498 = bitcast float %494 to i32, !dbg !50
  %499 = select i1 %12, i32 %498, i32 0, !dbg !45
  %500 = insertelement <1 x i32> poison, i32 %499, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %500, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %501 = icmp slt i32 %9, 256, !dbg !50
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !50
  %503 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %502, i1 %501) #3, !dbg !50
  %504 = bitcast i32 %503 to float, !dbg !50
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 4, i32 31), !dbg !50
  %506 = bitcast i32 %505 to float, !dbg !50
  %507 = fadd float %504, %506, !dbg !45
  %508 = bitcast float %507 to i32, !dbg !50
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !50
  %510 = bitcast i32 %509 to float, !dbg !50
  %511 = fadd float %507, %510, !dbg !45
  %512 = bitcast float %511 to i32, !dbg !50
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !50
  %514 = bitcast i32 %513 to float, !dbg !50
  %515 = fadd float %511, %514, !dbg !45
  %516 = and i32 %9, 7, !dbg !50
  %517 = icmp eq i32 %516, 0, !dbg !50
  %518 = and i1 %501, %517, !dbg !50
  %519 = bitcast float %515 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %519, i1 %518) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %520 = getelementptr float, ptr addrspace(3) @global_smem, i32 %495, !dbg !50
  %521 = load i32, ptr addrspace(3) %520, align 16, !dbg !50
  %522 = sext i32 %11 to i64, !dbg !51
  %523 = getelementptr float, ptr addrspace(1) %3, i64 %522, !dbg !51
  %524 = icmp eq i32 %14, 0, !dbg !52
  %525 = and i1 %524, %12, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %523, i1 %525) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cneu5soynpjk6yfdqityslk3vvqs7wrydajkf7757ee3o3fgh4wj.py", directory: "inductor_cache/ne")
!4 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", linkageName: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 72, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 135, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 40, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 38, column: 40, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 23, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !49)
!46 = distinct !DILexicalBlockFile(scope: !48, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!49 = !DILocation(line: 45, column: 26, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !49)
!51 = !DILocation(line: 46, column: 25, scope: !7)
!52 = !DILocation(line: 46, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 4, scope: !7)
