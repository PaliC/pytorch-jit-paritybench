; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_unsqueeze_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = or disjoint i32 %9, 16, !dbg !12
  %12 = or disjoint i32 %9, 24, !dbg !12
  %13 = shl i32 %7, 1, !dbg !12
  %14 = and i32 %13, 30, !dbg !12
  %15 = or disjoint i32 %6, %9, !dbg !13
  %16 = or disjoint i32 %6, %10, !dbg !13
  %17 = or disjoint i32 %6, %11, !dbg !13
  %18 = or disjoint i32 %6, %12, !dbg !13
  %19 = or disjoint i32 %6, %14, !dbg !13
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = or disjoint i32 %26, %14, !dbg !17
  %28 = or disjoint i32 %26, %9, !dbg !17
  %29 = or disjoint i32 %26, %10, !dbg !17
  %30 = or disjoint i32 %26, %11, !dbg !17
  %31 = or disjoint i32 %26, %12, !dbg !17
  %32 = icmp slt i32 %27, 64, !dbg !18
  %33 = icmp slt i32 %28, 64, !dbg !18
  %34 = icmp slt i32 %29, 64, !dbg !18
  %35 = icmp slt i32 %30, 64, !dbg !18
  %36 = icmp slt i32 %31, 64, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %37 = sdiv i32 %.frozen, 128, !dbg !19
  %38 = mul i32 %37, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %39 = shl i32 %15, 6, !dbg !21
  %40 = shl i32 %16, 6, !dbg !21
  %41 = shl i32 %17, 6, !dbg !21
  %42 = shl i32 %18, 6, !dbg !21
  %43 = add i32 %27, %39, !dbg !22
  %44 = add i32 %27, %40, !dbg !22
  %45 = add i32 %27, %41, !dbg !22
  %46 = add i32 %27, %42, !dbg !22
  %47 = sext i32 %43 to i64, !dbg !23
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %44 to i64, !dbg !23
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %45 to i64, !dbg !23
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %46 to i64, !dbg !23
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = and i1 %20, %32, !dbg !24
  %56 = and i1 %21, %32, !dbg !24
  %57 = and i1 %22, %32, !dbg !24
  %58 = and i1 %23, %32, !dbg !24
  %59 = and i1 %24, %33, !dbg !24
  %60 = and i1 %24, %34, !dbg !24
  %61 = and i1 %24, %35, !dbg !24
  %62 = and i1 %24, %36, !dbg !24
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !25
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !25
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !25
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 %56) #2, !dbg !25
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !25
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !25
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !25
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !25
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !25
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %54, i1 %58) #2, !dbg !25
  %73 = extractvalue { i64, i64 } %72, 0, !dbg !25
  %74 = extractvalue { i64, i64 } %72, 1, !dbg !25
  %75 = shl i32 %28, 7, !dbg !26
  %76 = shl i32 %29, 7, !dbg !26
  %77 = shl i32 %30, 7, !dbg !26
  %78 = shl i32 %31, 7, !dbg !26
  %79 = shl i32 %37, 13, !dbg !27
  %80 = add i32 %79, %.decomposed, !dbg !28
  %81 = add i32 %80, %75, !dbg !29
  %82 = add i32 %80, %76, !dbg !29
  %83 = add i32 %80, %77, !dbg !29
  %84 = add i32 %80, %78, !dbg !29
  %85 = sext i32 %81 to i64, !dbg !30
  %86 = getelementptr i64, ptr addrspace(1) %1, i64 %85, !dbg !30
  %87 = sext i32 %82 to i64, !dbg !30
  %88 = getelementptr i64, ptr addrspace(1) %1, i64 %87, !dbg !30
  %89 = sext i32 %83 to i64, !dbg !30
  %90 = getelementptr i64, ptr addrspace(1) %1, i64 %89, !dbg !30
  %91 = sext i32 %84 to i64, !dbg !30
  %92 = getelementptr i64, ptr addrspace(1) %1, i64 %91, !dbg !30
  %93 = shl i32 %7, 6, !dbg !31
  %94 = and i32 %93, 960, !dbg !31
  %95 = or disjoint i32 %94, %9, !dbg !31
  %96 = and i32 %13, 254, !dbg !31
  %97 = lshr exact i32 %94, 4, !dbg !31
  %98 = add nuw nsw i32 %97, %95, !dbg !31
  %99 = zext nneg i32 %98 to i64, !dbg !31
  %100 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %99, !dbg !31
  %101 = insertelement <1 x i64> poison, i64 %64, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %100, <1 x i64> %101, i1 true) #2, !dbg !31
  %102 = or disjoint i32 %95, 32, !dbg !31
  %103 = lshr i32 %102, 4, !dbg !31
  %104 = add nuw nsw i32 %103, %102, !dbg !31
  %105 = zext nneg i32 %104 to i64, !dbg !31
  %106 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %105, !dbg !31
  %107 = insertelement <1 x i64> poison, i64 %65, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %106, <1 x i64> %107, i1 true) #2, !dbg !31
  %108 = or disjoint i32 %95, 8, !dbg !31
  %109 = add nuw nsw i32 %108, %97, !dbg !31
  %110 = zext nneg i32 %109 to i64, !dbg !31
  %111 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %110, !dbg !31
  %112 = insertelement <1 x i64> poison, i64 %67, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %111, <1 x i64> %112, i1 true) #2, !dbg !31
  %113 = or disjoint i32 %95, 40, !dbg !31
  %114 = lshr i32 %113, 4, !dbg !31
  %115 = add nuw nsw i32 %114, %113, !dbg !31
  %116 = zext nneg i32 %115 to i64, !dbg !31
  %117 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %116, !dbg !31
  %118 = insertelement <1 x i64> poison, i64 %68, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %117, <1 x i64> %118, i1 true) #2, !dbg !31
  %119 = or disjoint i32 %95, 16, !dbg !31
  %120 = add nuw nsw i32 %119, %97, !dbg !31
  %121 = zext nneg i32 %120 to i64, !dbg !31
  %122 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %121, !dbg !31
  %123 = insertelement <1 x i64> poison, i64 %70, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %122, <1 x i64> %123, i1 true) #2, !dbg !31
  %124 = or disjoint i32 %95, 48, !dbg !31
  %125 = lshr i32 %124, 4, !dbg !31
  %126 = and i32 %125, 62, !dbg !31
  %127 = add nuw nsw i32 %126, %124, !dbg !31
  %128 = zext nneg i32 %127 to i64, !dbg !31
  %129 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %128, !dbg !31
  %130 = insertelement <1 x i64> poison, i64 %71, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %129, <1 x i64> %130, i1 true) #2, !dbg !31
  %131 = or disjoint i32 %95, 24, !dbg !31
  %132 = add nuw nsw i32 %131, %97, !dbg !31
  %133 = zext nneg i32 %132 to i64, !dbg !31
  %134 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %133, !dbg !31
  %135 = insertelement <1 x i64> poison, i64 %73, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %134, <1 x i64> %135, i1 true) #2, !dbg !31
  %136 = or disjoint i32 %95, 56, !dbg !31
  %137 = lshr i32 %136, 4, !dbg !31
  %138 = and i32 %137, 62, !dbg !31
  %139 = add nuw nsw i32 %138, %136, !dbg !31
  %140 = zext nneg i32 %139 to i64, !dbg !31
  %141 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %140, !dbg !31
  %142 = insertelement <1 x i64> poison, i64 %74, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %141, <1 x i64> %142, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %143 = lshr i32 %13, 4, !dbg !31
  %144 = and i32 %143, 14, !dbg !31
  %145 = add nuw nsw i32 %144, %96, !dbg !31
  %146 = zext nneg i32 %145 to i64, !dbg !31
  %147 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %146, !dbg !31
  %148 = or disjoint i32 %96, 256, !dbg !31
  %149 = lshr i32 %148, 4, !dbg !31
  %150 = and i32 %149, 30, !dbg !31
  %151 = add nuw nsw i32 %150, %148, !dbg !31
  %152 = zext nneg i32 %151 to i64, !dbg !31
  %153 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %152, !dbg !31
  %154 = load <2 x i64>, ptr addrspace(3) %153, align 16, !dbg !31
  %155 = or disjoint i32 %96, 512, !dbg !31
  %156 = lshr i32 %155, 4, !dbg !31
  %157 = and i32 %156, 46, !dbg !31
  %158 = add nuw nsw i32 %157, %155, !dbg !31
  %159 = zext nneg i32 %158 to i64, !dbg !31
  %160 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %159, !dbg !31
  %161 = load <2 x i64>, ptr addrspace(3) %160, align 16, !dbg !31
  %162 = or disjoint i32 %96, 768, !dbg !31
  %163 = lshr i32 %162, 4, !dbg !31
  %164 = and i32 %163, 62, !dbg !31
  %165 = add nuw nsw i32 %164, %162, !dbg !31
  %166 = zext nneg i32 %165 to i64, !dbg !31
  %167 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %166, !dbg !31
  %168 = load <2 x i64>, ptr addrspace(3) %167, align 16, !dbg !31
  %.extract = load i64, ptr addrspace(3) %147, align 16, !dbg !31
  %169 = getelementptr inbounds i8, ptr addrspace(3) %147, i64 8, !dbg !31
  %.extract1 = load i64, ptr addrspace(3) %169, align 8, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract, i64 %.extract1, ptr addrspace(1) %86, i1 %59) #2, !dbg !31
  %.extract2 = extractelement <2 x i64> %154, i64 0, !dbg !31
  %.extract3 = extractelement <2 x i64> %154, i64 1, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract2, i64 %.extract3, ptr addrspace(1) %88, i1 %60) #2, !dbg !31
  %.extract4 = extractelement <2 x i64> %161, i64 0, !dbg !31
  %.extract5 = extractelement <2 x i64> %161, i64 1, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract4, i64 %.extract5, ptr addrspace(1) %90, i1 %61) #2, !dbg !31
  %.extract6 = extractelement <2 x i64> %168, i64 0, !dbg !31
  %.extract7 = extractelement <2 x i64> %168, i64 1, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %.extract6, i64 %.extract7, ptr addrspace(1) %92, i1 %62) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clqrs7rbhaelxtjfmzebu2pxttaw3ghjvjie7yne7zllr4wmqcb4.py", directory: "inductor_cache/lq")
!4 = !{ptr @triton_poi_fused_unsqueeze_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_unsqueeze_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_unsqueeze_7", linkageName: "triton_poi_fused_unsqueeze_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 34, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 55, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
