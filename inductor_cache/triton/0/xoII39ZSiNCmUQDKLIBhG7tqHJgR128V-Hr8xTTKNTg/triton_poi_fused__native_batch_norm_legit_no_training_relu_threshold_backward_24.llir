; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 2560, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = icmp slt i32 %19, 256, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %21 = sdiv i32 %.frozen, 640, !dbg !17
  %22 = mul i32 %21, 640, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = srem i32 %17, 640, !dbg !18
  %24 = mul i32 %19, 640, !dbg !19
  %25 = mul i32 %21, 163840, !dbg !20
  %26 = add i32 %25, %24, !dbg !21
  %27 = add i32 %26, %.decomposed, !dbg !22
  %28 = add i32 %26, %23, !dbg !22
  %29 = sext i32 %27 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %20, %18, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #4, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = sext i32 %23 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %18) #4, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %18) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #4, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %18) #4, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %18) #4, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %18) #4, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %18) #4, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %18) #4, !dbg !33
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %78, 0, !dbg !35
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %79, 0, !dbg !35
  br i1 %.not.i, label %85, label %80, !dbg !35

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !35

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

85:                                               ; preds = %9
  br i1 %.not1.i, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i10 = icmp eq i32 %90, 0, !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i13 = icmp eq i32 %91, 0, !dbg !35
  br i1 %.not.i10, label %97, label %92, !dbg !35

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit14, !dbg !35

__nv_sqrtf.exit14:                                ; preds = %93, %95, %98, %100
  %.0.i12 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !35
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %102, 0, !dbg !35
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %103, 0, !dbg !35
  br i1 %.not.i15, label %109, label %104, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

109:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %112, label %110, !dbg !35

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %105, %107, %110, %112
  %.0.i17 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !35
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %114, 0, !dbg !35
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %115, 0, !dbg !35
  br i1 %.not.i20, label %121, label %116, !dbg !35

116:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

121:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %124, label %122, !dbg !35

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %117, %119, %122, %124
  %.0.i22 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !35
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %126, 0, !dbg !35
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %127, 0, !dbg !35
  br i1 %.not.i25, label %133, label %128, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

133:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %136, label %134, !dbg !35

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %129, %131, %134, %136
  %.0.i27 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i30 = icmp eq i32 %138, 0, !dbg !35
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i33 = icmp eq i32 %139, 0, !dbg !35
  br i1 %.not.i30, label %145, label %140, !dbg !35

140:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

145:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %148, label %146, !dbg !35

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit34, !dbg !35

__nv_sqrtf.exit34:                                ; preds = %141, %143, %146, %148
  %.0.i32 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !35
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i35 = icmp eq i32 %150, 0, !dbg !35
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i38 = icmp eq i32 %151, 0, !dbg !35
  br i1 %.not.i35, label %157, label %152, !dbg !35

152:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %155, label %153, !dbg !35

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

157:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %160, label %158, !dbg !35

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit39, !dbg !35

__nv_sqrtf.exit39:                                ; preds = %153, %155, %158, %160
  %.0.i37 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i40 = icmp eq i32 %162, 0, !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i43 = icmp eq i32 %163, 0, !dbg !35
  br i1 %.not.i40, label %169, label %164, !dbg !35

164:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit44, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit44, !dbg !35

169:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %172, label %170, !dbg !35

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit44, !dbg !35

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit44, !dbg !35

__nv_sqrtf.exit44:                                ; preds = %165, %167, %170, %172
  %.0.i42 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %176 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %178 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %180 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %185 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %189 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !33
  %193 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %199 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %203 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %206 = and i32 %12, 127, !dbg !12
  %207 = or disjoint i32 %206, 896, !dbg !12
  %208 = or disjoint i32 %11, %207, !dbg !13
  %209 = icmp slt i32 %208, 2560, !dbg !14
  %210 = and i1 %20, %209, !dbg !24
  %211 = or disjoint i32 %206, 768, !dbg !12
  %212 = or disjoint i32 %11, %211, !dbg !13
  %213 = icmp slt i32 %212, 2560, !dbg !14
  %214 = and i1 %20, %213, !dbg !24
  %215 = or disjoint i32 %206, 640, !dbg !12
  %216 = or disjoint i32 %11, %215, !dbg !13
  %217 = icmp slt i32 %216, 2560, !dbg !14
  %218 = and i1 %20, %217, !dbg !24
  %219 = or disjoint i32 %206, 512, !dbg !12
  %220 = or disjoint i32 %11, %219, !dbg !13
  %221 = icmp slt i32 %220, 2560, !dbg !14
  %222 = and i1 %20, %221, !dbg !24
  %223 = or disjoint i32 %206, 384, !dbg !12
  %224 = or disjoint i32 %11, %223, !dbg !13
  %225 = icmp slt i32 %224, 2560, !dbg !14
  %226 = and i1 %20, %225, !dbg !24
  %227 = or disjoint i32 %206, 256, !dbg !12
  %228 = or disjoint i32 %11, %227, !dbg !13
  %229 = icmp slt i32 %228, 2560, !dbg !14
  %230 = and i1 %20, %229, !dbg !24
  %231 = or disjoint i32 %206, 128, !dbg !12
  %232 = or disjoint i32 %11, %231, !dbg !13
  %233 = icmp slt i32 %232, 2560, !dbg !14
  %234 = and i1 %20, %233, !dbg !24
  %235 = or disjoint i32 %11, %206, !dbg !13
  %236 = icmp slt i32 %235, 2560, !dbg !14
  %237 = and i1 %20, %236, !dbg !24
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !36
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !36
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !36
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !36
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !36
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !36
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !36
  %246 = shl i32 %235, 8, !dbg !37
  %247 = shl i32 %232, 8, !dbg !37
  %248 = shl i32 %228, 8, !dbg !37
  %249 = shl i32 %224, 8, !dbg !37
  %250 = shl i32 %220, 8, !dbg !37
  %251 = shl i32 %216, 8, !dbg !37
  %252 = shl i32 %212, 8, !dbg !37
  %253 = shl i32 %208, 8, !dbg !37
  %254 = add i32 %246, %19, !dbg !38
  %255 = add i32 %247, %19, !dbg !38
  %256 = add i32 %248, %19, !dbg !38
  %257 = add i32 %249, %19, !dbg !38
  %258 = add i32 %250, %19, !dbg !38
  %259 = add i32 %251, %19, !dbg !38
  %260 = add i32 %252, %19, !dbg !38
  %261 = add i32 %253, %19, !dbg !38
  %262 = sext i32 %254 to i64, !dbg !39
  %263 = getelementptr float, ptr addrspace(1) %5, i64 %262, !dbg !39
  %264 = sext i32 %255 to i64, !dbg !39
  %265 = getelementptr float, ptr addrspace(1) %5, i64 %264, !dbg !39
  %266 = sext i32 %256 to i64, !dbg !39
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %266, !dbg !39
  %268 = sext i32 %257 to i64, !dbg !39
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %268, !dbg !39
  %270 = sext i32 %258 to i64, !dbg !39
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !39
  %272 = sext i32 %259 to i64, !dbg !39
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !39
  %274 = sext i32 %260 to i64, !dbg !39
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !39
  %276 = sext i32 %261 to i64, !dbg !39
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !39
  %.idx = shl nuw nsw i32 %14, 3, !dbg !40
  %278 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %279 = shl nuw nsw i32 %14, 1, !dbg !40
  %280 = or disjoint i32 %279, 2, !dbg !40
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !40
  %282 = or disjoint i32 %279, 4, !dbg !40
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !40
  %284 = or disjoint i32 %279, 6, !dbg !40
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !40
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !40
  %286 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !40
  %287 = or disjoint i32 %279, 10, !dbg !40
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !40
  %289 = or disjoint i32 %279, 12, !dbg !40
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !40
  %291 = or disjoint i32 %279, 14, !dbg !40
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !40
  %.idx2 = shl nuw nsw i32 %206, 3, !dbg !40
  %293 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !40
  %.idx3 = shl nuw nsw i32 %231, 3, !dbg !40
  %294 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !40
  %.idx4 = shl nuw nsw i32 %227, 3, !dbg !40
  %295 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !40
  %.idx5 = shl nuw nsw i32 %223, 3, !dbg !40
  %296 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !40
  %.idx6 = shl nuw nsw i32 %219, 3, !dbg !40
  %297 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !40
  %.idx7 = shl nuw nsw i32 %215, 3, !dbg !40
  %298 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !40
  %.idx8 = shl nuw nsw i32 %211, 3, !dbg !40
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !40
  %.idx9 = shl nuw nsw i32 %207, 3, !dbg !40
  %300 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !40
  %301 = getelementptr i1, ptr addrspace(1) %6, i64 %29, !dbg !41
  %302 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !25
  %303 = insertelement <4 x i32> %302, i32 %186, i64 1, !dbg !25
  %304 = insertelement <4 x i32> %303, i32 %184, i64 2, !dbg !25
  %305 = insertelement <4 x i32> %304, i32 %182, i64 3, !dbg !25
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !25
  %307 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !27
  %308 = insertelement <4 x i32> %307, i32 %187, i64 1, !dbg !27
  %309 = insertelement <4 x i32> %308, i32 %185, i64 2, !dbg !27
  %310 = insertelement <4 x i32> %309, i32 %183, i64 3, !dbg !27
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !27
  %312 = fsub <4 x float> %306, %311, !dbg !42
  %313 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !33
  %314 = insertelement <4 x i32> %313, i32 %196, i64 1, !dbg !33
  %315 = insertelement <4 x i32> %314, i32 %195, i64 2, !dbg !33
  %316 = insertelement <4 x i32> %315, i32 %194, i64 3, !dbg !33
  %317 = bitcast <4 x i32> %316 to <4 x float>, !dbg !33
  %318 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !31
  %319 = insertelement <4 x i32> %318, i32 %204, i64 1, !dbg !31
  %320 = insertelement <4 x i32> %319, i32 %203, i64 2, !dbg !31
  %321 = insertelement <4 x i32> %320, i32 %202, i64 3, !dbg !31
  %322 = bitcast <4 x i32> %321 to <4 x float>, !dbg !31
  %323 = insertelement <4 x float> poison, float %238, i64 0, !dbg !43
  %324 = insertelement <4 x float> %323, float %239, i64 1, !dbg !43
  %325 = insertelement <4 x float> %324, float %240, i64 2, !dbg !43
  %326 = insertelement <4 x float> %325, float %241, i64 3, !dbg !43
  %327 = fmul <4 x float> %312, %326, !dbg !43
  %328 = fmul <4 x float> %327, %322, !dbg !44
  %329 = fadd <4 x float> %328, %317, !dbg !45
  %330 = fcmp olt <4 x float> %329, zeroinitializer, !dbg !46
  %331 = select <4 x i1> %330, <4 x float> zeroinitializer, <4 x float> %329, !dbg !50
  %332 = fcmp ole <4 x float> %331, zeroinitializer, !dbg !51
  %333 = extractelement <4 x float> %331, i64 0, !dbg !40
  %334 = bitcast float %333 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %334, i1 true) #4, !dbg !40
  %335 = extractelement <4 x float> %331, i64 1, !dbg !40
  %336 = bitcast float %335 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %336, i1 true) #4, !dbg !40
  %337 = extractelement <4 x float> %331, i64 2, !dbg !40
  %338 = bitcast float %337 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %338, i1 true) #4, !dbg !40
  %339 = extractelement <4 x float> %331, i64 3, !dbg !40
  %340 = bitcast float %339 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %340, i1 true) #4, !dbg !40
  %341 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !25
  %342 = insertelement <4 x i32> %341, i32 %178, i64 1, !dbg !25
  %343 = insertelement <4 x i32> %342, i32 %176, i64 2, !dbg !25
  %344 = insertelement <4 x i32> %343, i32 %174, i64 3, !dbg !25
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !25
  %346 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !27
  %347 = insertelement <4 x i32> %346, i32 %179, i64 1, !dbg !27
  %348 = insertelement <4 x i32> %347, i32 %177, i64 2, !dbg !27
  %349 = insertelement <4 x i32> %348, i32 %175, i64 3, !dbg !27
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !27
  %351 = fsub <4 x float> %345, %350, !dbg !42
  %352 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !33
  %353 = insertelement <4 x i32> %352, i32 %192, i64 1, !dbg !33
  %354 = insertelement <4 x i32> %353, i32 %191, i64 2, !dbg !33
  %355 = insertelement <4 x i32> %354, i32 %190, i64 3, !dbg !33
  %356 = bitcast <4 x i32> %355 to <4 x float>, !dbg !33
  %357 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !31
  %358 = insertelement <4 x i32> %357, i32 %200, i64 1, !dbg !31
  %359 = insertelement <4 x i32> %358, i32 %199, i64 2, !dbg !31
  %360 = insertelement <4 x i32> %359, i32 %198, i64 3, !dbg !31
  %361 = bitcast <4 x i32> %360 to <4 x float>, !dbg !31
  %362 = insertelement <4 x float> poison, float %242, i64 0, !dbg !43
  %363 = insertelement <4 x float> %362, float %243, i64 1, !dbg !43
  %364 = insertelement <4 x float> %363, float %244, i64 2, !dbg !43
  %365 = insertelement <4 x float> %364, float %245, i64 3, !dbg !43
  %366 = fmul <4 x float> %351, %365, !dbg !43
  %367 = fmul <4 x float> %366, %361, !dbg !44
  %368 = fadd <4 x float> %367, %356, !dbg !45
  %369 = fcmp olt <4 x float> %368, zeroinitializer, !dbg !46
  %370 = select <4 x i1> %369, <4 x float> zeroinitializer, <4 x float> %368, !dbg !50
  %371 = fcmp ole <4 x float> %370, zeroinitializer, !dbg !51
  %372 = extractelement <4 x float> %370, i64 0, !dbg !40
  %373 = bitcast float %372 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %373, i1 true) #4, !dbg !40
  %374 = extractelement <4 x float> %370, i64 1, !dbg !40
  %375 = bitcast float %374 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %375, i1 true) #4, !dbg !40
  %376 = extractelement <4 x float> %370, i64 2, !dbg !40
  %377 = bitcast float %376 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %377, i1 true) #4, !dbg !40
  %378 = extractelement <4 x float> %370, i64 3, !dbg !40
  %379 = bitcast float %378 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %379, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %380 = load i32, ptr addrspace(3) %293, align 8, !dbg !40
  %381 = load i32, ptr addrspace(3) %294, align 8, !dbg !40
  %382 = load i32, ptr addrspace(3) %295, align 8, !dbg !40
  %383 = load i32, ptr addrspace(3) %296, align 8, !dbg !40
  %384 = load i32, ptr addrspace(3) %297, align 8, !dbg !40
  %385 = load i32, ptr addrspace(3) %298, align 8, !dbg !40
  %386 = load i32, ptr addrspace(3) %299, align 8, !dbg !40
  %387 = load i32, ptr addrspace(3) %300, align 8, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %380, ptr addrspace(1) %263, i1 %237) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %265, i1 %234) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %382, ptr addrspace(1) %267, i1 %230) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %383, ptr addrspace(1) %269, i1 %226) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %271, i1 %222) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %273, i1 %218) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %275, i1 %214) #4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %277, i1 %210) #4, !dbg !40
  %388 = zext <4 x i1> %332 to <4 x i8>, !dbg !52
  %389 = bitcast <4 x i8> %388 to i32, !dbg !52
  %390 = zext <4 x i1> %371 to <4 x i8>, !dbg !52
  %391 = bitcast <4 x i8> %390 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %389, i32 %391, ptr addrspace(1) %301, i1 %33) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckmmk73m3umnwwrsfl4duy7uvpnx2cpzdwclh6z4z73xw4tmfxfi.py", directory: "inductor_cache/km")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 34, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 52, column: 46, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 21, scope: !7)
!52 = !DILocation(line: 53, column: 58, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
