; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_24(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 4, !dbg !14
  %12 = mul i32 %11, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %10, 4, !dbg !15
  %14 = srem i32 %11, 2048, !dbg !16
  %15 = sdiv i32 %9, 8192, !dbg !17
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !18
  %16 = ashr exact i8 %.lhs.trunc, 1, !dbg !18
  %.sext = sext i8 %16 to i32, !dbg !18
  %.lhs.trunc1 = trunc nsw i32 %13 to i8, !dbg !18
  %17 = shl nsw i8 %.lhs.trunc, 1, !dbg !19
  %.lhs.trunc3 = add nsw i8 %17, 5, !dbg !19
  %18 = sdiv i8 %.lhs.trunc3, 4, !dbg !19
  %.sext4 = zext nneg i8 %18 to i32, !dbg !19
  %19 = shl nsw i8 %.lhs.trunc1, 1, !dbg !19
  %.lhs.trunc5 = add nsw i8 %19, 5, !dbg !19
  %20 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !18
  %21 = insertelement <2 x i8> %20, i8 %.lhs.trunc5, i64 1, !dbg !18
  %22 = sdiv <2 x i8> %21, <i8 2, i8 4>, !dbg !18
  %23 = extractelement <2 x i8> %22, i64 0, !dbg !20
  %.sext2 = sext i8 %23 to i32, !dbg !18
  %24 = extractelement <2 x i8> %22, i64 1, !dbg !19
  %.sext6 = zext nneg i8 %24 to i32, !dbg !19
  %25 = icmp slt i8 %16, %18, !dbg !20
  %26 = icmp slt i8 %23, %24, !dbg !20
  %27 = shl nsw i32 %.sext, 12, !dbg !21
  %28 = shl nsw i32 %.sext2, 12, !dbg !21
  %29 = shl nsw i32 %15, 13, !dbg !22
  %30 = add i32 %27, %29, !dbg !23
  %31 = add i32 %30, %14, !dbg !24
  %32 = add i32 %29, %28, !dbg !23
  %33 = add i32 %32, %14, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25) #1, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %26, i32 0, i1 %26) #1, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = add nsw i32 %14, 2048, !dbg !27
  %43 = add i32 %30, %42, !dbg !28
  %44 = add i32 %32, %42, !dbg !28
  %45 = sext i32 %43 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = sext i32 %44 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %25, i32 0, i1 %25) #1, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %26, i32 0, i1 %26) #1, !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = fadd float %39, %50, !dbg !31
  %54 = fadd float %41, %52, !dbg !31
  %55 = add nsw i32 %.sext, 1, !dbg !32
  %56 = add nsw i32 %.sext2, 1, !dbg !32
  %57 = icmp samesign ult i32 %55, %.sext4, !dbg !33
  %58 = icmp samesign ult i32 %56, %.sext6, !dbg !33
  %59 = add nsw i32 %14, 4096, !dbg !34
  %60 = add i32 %30, %59, !dbg !35
  %61 = add i32 %32, %59, !dbg !35
  %62 = sext i32 %60 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = sext i32 %61 to i64, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %57, i32 0, i1 %57) #1, !dbg !37
  %67 = bitcast i32 %66 to float, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %58, i32 0, i1 %58) #1, !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = fadd float %53, %67, !dbg !38
  %71 = fadd float %54, %69, !dbg !38
  %72 = add nsw i32 %14, 6144, !dbg !39
  %73 = add i32 %30, %72, !dbg !40
  %74 = add i32 %32, %72, !dbg !40
  %75 = sext i32 %73 to i64, !dbg !41
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !41
  %77 = sext i32 %74 to i64, !dbg !41
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !41
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %57, i32 0, i1 %57) #1, !dbg !42
  %80 = bitcast i32 %79 to float, !dbg !42
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %58, i32 0, i1 %58) #1, !dbg !42
  %82 = bitcast i32 %81 to float, !dbg !42
  %83 = fadd float %70, %80, !dbg !43
  %84 = fadd float %71, %82, !dbg !43
  %85 = select i1 %25, float 2.000000e+00, float 0.000000e+00, !dbg !44
  %86 = select i1 %26, float 2.000000e+00, float 0.000000e+00, !dbg !44
  %87 = select i1 %57, float 1.000000e+00, float 0.000000e+00, !dbg !45
  %88 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !45
  %89 = fadd float %85, %87, !dbg !46
  %90 = fadd float %86, %88, !dbg !46
  %91 = fadd float %87, %89, !dbg !47
  %92 = fadd float %88, %90, !dbg !47
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %91) #1, !dbg !48
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %92) #1, !dbg !48
  %95 = sext i32 %9 to i64, !dbg !49
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !49
  %97 = bitcast float %93 to i32, !dbg !50
  %98 = bitcast float %94 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 true) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c73pkmradkt3zqat6ivjrdjcremqevznhcazb36kefxcpzrj7q3w.py", directory: "inductor_cache/73")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_24", linkageName: "triton_poi_fused__adaptive_avg_pool2d_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 17, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 35, column: 57, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 52, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 62, scope: !7)
!27 = !DILocation(line: 39, column: 38, scope: !7)
!28 = !DILocation(line: 39, column: 60, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 70, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 17, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 38, scope: !7)
!35 = !DILocation(line: 44, column: 60, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 70, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 38, scope: !7)
!40 = !DILocation(line: 47, column: 60, scope: !7)
!41 = !DILocation(line: 47, column: 31, scope: !7)
!42 = !DILocation(line: 47, column: 70, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 35, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 20, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 65, column: 25, scope: !7)
!50 = !DILocation(line: 65, column: 37, scope: !7)
!51 = !DILocation(line: 65, column: 4, scope: !7)
