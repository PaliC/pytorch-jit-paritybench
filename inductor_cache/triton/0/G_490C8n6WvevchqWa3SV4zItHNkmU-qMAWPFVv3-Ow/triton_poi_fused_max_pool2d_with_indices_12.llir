; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = icmp slt i32 %13, 256, !dbg !14
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %11, 252, !dbg !17
  %26 = lshr i32 %8, 2, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %24, %25, !dbg !18
  %29 = or disjoint i32 %24, %27, !dbg !18
  %30 = or disjoint i32 %29, 64, !dbg !18
  %31 = or disjoint i32 %29, 128, !dbg !18
  %32 = or disjoint i32 %29, 192, !dbg !18
  %33 = icmp slt i32 %28, 196, !dbg !19
  %34 = icmp slt i32 %29, 196, !dbg !19
  %35 = icmp slt i32 %30, 196, !dbg !19
  %36 = icmp slt i32 %31, 196, !dbg !19
  %37 = icmp slt i32 %32, 196, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %38 = sdiv i32 %.frozen, 8, !dbg !20
  %39 = mul i32 %38, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %.frozen41 = freeze i32 %14, !dbg !20
  %40 = sdiv i32 %.frozen41, 8, !dbg !20
  %41 = mul i32 %40, 8, !dbg !21
  %.decomposed42 = sub i32 %.frozen41, %41, !dbg !21
  %.frozen43 = freeze i32 %16, !dbg !20
  %42 = sdiv i32 %.frozen43, 8, !dbg !20
  %43 = mul i32 %42, 8, !dbg !21
  %.decomposed44 = sub i32 %.frozen43, %43, !dbg !21
  %44 = sdiv i32 %15, 8, !dbg !20
  %.frozen45 = freeze i32 %17, !dbg !22
  %45 = sdiv i32 %.frozen45, 64, !dbg !22
  %46 = mul i32 %45, 64, !dbg !23
  %.decomposed46 = sub i32 %.frozen45, %46, !dbg !23
  %47 = mul nsw i32 %.decomposed, 392, !dbg !24
  %48 = mul nsw i32 %.decomposed42, 392, !dbg !24
  %49 = mul nsw i32 %.decomposed44, 392, !dbg !24
  %50 = mul i32 %38, 6272, !dbg !25
  %51 = mul i32 %40, 6272, !dbg !25
  %52 = mul i32 %44, 6272, !dbg !25
  %53 = mul i32 %42, 6272, !dbg !25
  %54 = add i32 %50, %47, !dbg !26
  %55 = add i32 %54, %28, !dbg !27
  %56 = add i32 %51, %48, !dbg !26
  %57 = add i32 %56, %28, !dbg !27
  %58 = add i32 %52, %47, !dbg !26
  %59 = add i32 %58, %28, !dbg !27
  %60 = add i32 %53, %49, !dbg !26
  %61 = add i32 %60, %28, !dbg !27
  %62 = sext i32 %55 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %57 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %59 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %61 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = and i1 %18, %33, !dbg !29
  %71 = and i1 %19, %33, !dbg !29
  %72 = and i1 %20, %33, !dbg !29
  %73 = and i1 %21, %33, !dbg !29
  %74 = and i1 %22, %34, !dbg !29
  %75 = and i1 %35, %22, !dbg !29
  %76 = and i1 %36, %22, !dbg !29
  %77 = and i1 %37, %22, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %70) #2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %71) #2, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %72) #2, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !30
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %73) #2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !30
  %98 = add i32 %28, 196, !dbg !31
  %99 = add i32 %54, %98, !dbg !32
  %100 = add i32 %56, %98, !dbg !32
  %101 = add i32 %58, %98, !dbg !32
  %102 = add i32 %60, %98, !dbg !32
  %103 = sext i32 %99 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !33
  %105 = sext i32 %100 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !33
  %107 = sext i32 %101 to i64, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !33
  %109 = sext i32 %102 to i64, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !33
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %70) #2, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !34
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %71) #2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %72) #2, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !34
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %73) #2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !34
  %131 = add i32 %28, 3136, !dbg !35
  %132 = add i32 %54, %131, !dbg !36
  %133 = add i32 %56, %131, !dbg !36
  %134 = add i32 %58, %131, !dbg !36
  %135 = add i32 %60, %131, !dbg !36
  %136 = sext i32 %132 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !37
  %138 = sext i32 %133 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !37
  %140 = sext i32 %134 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !37
  %142 = sext i32 %135 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !37
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %70) #2, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !38
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %71) #2, !dbg !38
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !38
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !38
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %72) #2, !dbg !38
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !38
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %73) #2, !dbg !38
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !38
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !38
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !38
  %164 = add i32 %28, 3332, !dbg !39
  %165 = add i32 %54, %164, !dbg !40
  %166 = add i32 %56, %164, !dbg !40
  %167 = add i32 %58, %164, !dbg !40
  %168 = add i32 %60, %164, !dbg !40
  %169 = sext i32 %165 to i64, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !41
  %171 = sext i32 %166 to i64, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !41
  %173 = sext i32 %167 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !41
  %175 = sext i32 %168 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !41
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %70) #2, !dbg !42
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !42
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !42
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !42
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !42
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %71) #2, !dbg !42
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !42
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !42
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !42
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !42
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %72) #2, !dbg !42
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !42
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !42
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !42
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !42
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %73) #2, !dbg !42
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !42
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !42
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !42
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !42
  %197 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !30
  %198 = insertelement <4 x i32> %197, i32 %80, i64 1, !dbg !30
  %199 = insertelement <4 x i32> %198, i32 %81, i64 2, !dbg !30
  %200 = insertelement <4 x i32> %199, i32 %82, i64 3, !dbg !30
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !30
  %202 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !34
  %203 = insertelement <4 x i32> %202, i32 %113, i64 1, !dbg !34
  %204 = insertelement <4 x i32> %203, i32 %114, i64 2, !dbg !34
  %205 = insertelement <4 x i32> %204, i32 %115, i64 3, !dbg !34
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !34
  %207 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !38
  %208 = insertelement <4 x i32> %207, i32 %146, i64 1, !dbg !38
  %209 = insertelement <4 x i32> %208, i32 %147, i64 2, !dbg !38
  %210 = insertelement <4 x i32> %209, i32 %148, i64 3, !dbg !38
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !38
  %212 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !42
  %213 = insertelement <4 x i32> %212, i32 %179, i64 1, !dbg !42
  %214 = insertelement <4 x i32> %213, i32 %180, i64 2, !dbg !42
  %215 = insertelement <4 x i32> %214, i32 %181, i64 3, !dbg !42
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !42
  %217 = fcmp ogt <4 x float> %206, %201, !dbg !43
  %218 = zext <4 x i1> %217 to <4 x i8>, !dbg !44
  %219 = fcmp uno <4 x float> %206, zeroinitializer, !dbg !45
  %220 = or <4 x i1> %217, %219, !dbg !49
  %.v = select <4 x i1> %220, <4 x i32> %205, <4 x i32> %200, !dbg !50
  %221 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %222 = fcmp olt <4 x float> %221, %211, !dbg !51
  %223 = select <4 x i1> %222, <4 x i8> splat (i8 2), <4 x i8> %218, !dbg !52
  %224 = fcmp uno <4 x float> %211, zeroinitializer, !dbg !53
  %225 = or <4 x i1> %222, %224, !dbg !55
  %.v34 = select <4 x i1> %225, <4 x i32> %210, <4 x i32> %.v, !dbg !56
  %226 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !56
  %227 = fcmp olt <4 x float> %226, %216, !dbg !57
  %228 = select <4 x i1> %227, <4 x i8> splat (i8 3), <4 x i8> %223, !dbg !58
  %229 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %85, i64 1, !dbg !30
  %231 = insertelement <4 x i32> %230, i32 %86, i64 2, !dbg !30
  %232 = insertelement <4 x i32> %231, i32 %87, i64 3, !dbg !30
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !30
  %234 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !34
  %235 = insertelement <4 x i32> %234, i32 %118, i64 1, !dbg !34
  %236 = insertelement <4 x i32> %235, i32 %119, i64 2, !dbg !34
  %237 = insertelement <4 x i32> %236, i32 %120, i64 3, !dbg !34
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !34
  %239 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !38
  %240 = insertelement <4 x i32> %239, i32 %151, i64 1, !dbg !38
  %241 = insertelement <4 x i32> %240, i32 %152, i64 2, !dbg !38
  %242 = insertelement <4 x i32> %241, i32 %153, i64 3, !dbg !38
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !38
  %244 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !42
  %245 = insertelement <4 x i32> %244, i32 %184, i64 1, !dbg !42
  %246 = insertelement <4 x i32> %245, i32 %185, i64 2, !dbg !42
  %247 = insertelement <4 x i32> %246, i32 %186, i64 3, !dbg !42
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !42
  %249 = fcmp ogt <4 x float> %238, %233, !dbg !43
  %250 = zext <4 x i1> %249 to <4 x i8>, !dbg !44
  %251 = fcmp uno <4 x float> %238, zeroinitializer, !dbg !45
  %252 = or <4 x i1> %249, %251, !dbg !49
  %.v35 = select <4 x i1> %252, <4 x i32> %237, <4 x i32> %232, !dbg !50
  %253 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !50
  %254 = fcmp olt <4 x float> %253, %243, !dbg !51
  %255 = select <4 x i1> %254, <4 x i8> splat (i8 2), <4 x i8> %250, !dbg !52
  %256 = fcmp uno <4 x float> %243, zeroinitializer, !dbg !53
  %257 = or <4 x i1> %254, %256, !dbg !55
  %.v36 = select <4 x i1> %257, <4 x i32> %242, <4 x i32> %.v35, !dbg !56
  %258 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !56
  %259 = fcmp olt <4 x float> %258, %248, !dbg !57
  %260 = select <4 x i1> %259, <4 x i8> splat (i8 3), <4 x i8> %255, !dbg !58
  %261 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !30
  %262 = insertelement <4 x i32> %261, i32 %90, i64 1, !dbg !30
  %263 = insertelement <4 x i32> %262, i32 %91, i64 2, !dbg !30
  %264 = insertelement <4 x i32> %263, i32 %92, i64 3, !dbg !30
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !30
  %266 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !34
  %267 = insertelement <4 x i32> %266, i32 %123, i64 1, !dbg !34
  %268 = insertelement <4 x i32> %267, i32 %124, i64 2, !dbg !34
  %269 = insertelement <4 x i32> %268, i32 %125, i64 3, !dbg !34
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !34
  %271 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !38
  %272 = insertelement <4 x i32> %271, i32 %156, i64 1, !dbg !38
  %273 = insertelement <4 x i32> %272, i32 %157, i64 2, !dbg !38
  %274 = insertelement <4 x i32> %273, i32 %158, i64 3, !dbg !38
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !38
  %276 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !42
  %277 = insertelement <4 x i32> %276, i32 %189, i64 1, !dbg !42
  %278 = insertelement <4 x i32> %277, i32 %190, i64 2, !dbg !42
  %279 = insertelement <4 x i32> %278, i32 %191, i64 3, !dbg !42
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !42
  %281 = fcmp ogt <4 x float> %270, %265, !dbg !43
  %282 = zext <4 x i1> %281 to <4 x i8>, !dbg !44
  %283 = fcmp uno <4 x float> %270, zeroinitializer, !dbg !45
  %284 = or <4 x i1> %281, %283, !dbg !49
  %.v37 = select <4 x i1> %284, <4 x i32> %269, <4 x i32> %264, !dbg !50
  %285 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !50
  %286 = fcmp olt <4 x float> %285, %275, !dbg !51
  %287 = select <4 x i1> %286, <4 x i8> splat (i8 2), <4 x i8> %282, !dbg !52
  %288 = fcmp uno <4 x float> %275, zeroinitializer, !dbg !53
  %289 = or <4 x i1> %286, %288, !dbg !55
  %.v38 = select <4 x i1> %289, <4 x i32> %274, <4 x i32> %.v37, !dbg !56
  %290 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !56
  %291 = fcmp olt <4 x float> %290, %280, !dbg !57
  %292 = select <4 x i1> %291, <4 x i8> splat (i8 3), <4 x i8> %287, !dbg !58
  %293 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !30
  %294 = insertelement <4 x i32> %293, i32 %95, i64 1, !dbg !30
  %295 = insertelement <4 x i32> %294, i32 %96, i64 2, !dbg !30
  %296 = insertelement <4 x i32> %295, i32 %97, i64 3, !dbg !30
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !30
  %298 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !34
  %299 = insertelement <4 x i32> %298, i32 %128, i64 1, !dbg !34
  %300 = insertelement <4 x i32> %299, i32 %129, i64 2, !dbg !34
  %301 = insertelement <4 x i32> %300, i32 %130, i64 3, !dbg !34
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !34
  %303 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !38
  %304 = insertelement <4 x i32> %303, i32 %161, i64 1, !dbg !38
  %305 = insertelement <4 x i32> %304, i32 %162, i64 2, !dbg !38
  %306 = insertelement <4 x i32> %305, i32 %163, i64 3, !dbg !38
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !38
  %308 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !42
  %309 = insertelement <4 x i32> %308, i32 %194, i64 1, !dbg !42
  %310 = insertelement <4 x i32> %309, i32 %195, i64 2, !dbg !42
  %311 = insertelement <4 x i32> %310, i32 %196, i64 3, !dbg !42
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !42
  %313 = fcmp ogt <4 x float> %302, %297, !dbg !43
  %314 = zext <4 x i1> %313 to <4 x i8>, !dbg !44
  %315 = fcmp uno <4 x float> %302, zeroinitializer, !dbg !45
  %316 = or <4 x i1> %313, %315, !dbg !49
  %.v39 = select <4 x i1> %316, <4 x i32> %301, <4 x i32> %296, !dbg !50
  %317 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !50
  %318 = fcmp olt <4 x float> %317, %307, !dbg !51
  %319 = select <4 x i1> %318, <4 x i8> splat (i8 2), <4 x i8> %314, !dbg !52
  %320 = fcmp uno <4 x float> %307, zeroinitializer, !dbg !53
  %321 = or <4 x i1> %318, %320, !dbg !55
  %.v40 = select <4 x i1> %321, <4 x i32> %306, <4 x i32> %.v39, !dbg !56
  %322 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !56
  %323 = fcmp olt <4 x float> %322, %312, !dbg !57
  %324 = select <4 x i1> %323, <4 x i8> splat (i8 3), <4 x i8> %319, !dbg !58
  %325 = bitcast i32 %178 to float, !dbg !59
  %326 = fcmp uno float %325, 0.000000e+00, !dbg !59
  %327 = bitcast i32 %179 to float, !dbg !59
  %328 = fcmp uno float %327, 0.000000e+00, !dbg !59
  %329 = bitcast i32 %180 to float, !dbg !59
  %330 = fcmp uno float %329, 0.000000e+00, !dbg !59
  %331 = bitcast i32 %181 to float, !dbg !59
  %332 = fcmp uno float %331, 0.000000e+00, !dbg !59
  %333 = bitcast i32 %183 to float, !dbg !59
  %334 = fcmp uno float %333, 0.000000e+00, !dbg !59
  %335 = bitcast i32 %184 to float, !dbg !59
  %336 = fcmp uno float %335, 0.000000e+00, !dbg !59
  %337 = bitcast i32 %185 to float, !dbg !59
  %338 = fcmp uno float %337, 0.000000e+00, !dbg !59
  %339 = bitcast i32 %186 to float, !dbg !59
  %340 = fcmp uno float %339, 0.000000e+00, !dbg !59
  %341 = bitcast i32 %188 to float, !dbg !59
  %342 = fcmp uno float %341, 0.000000e+00, !dbg !59
  %343 = bitcast i32 %189 to float, !dbg !59
  %344 = fcmp uno float %343, 0.000000e+00, !dbg !59
  %345 = bitcast i32 %190 to float, !dbg !59
  %346 = fcmp uno float %345, 0.000000e+00, !dbg !59
  %347 = bitcast i32 %191 to float, !dbg !59
  %348 = fcmp uno float %347, 0.000000e+00, !dbg !59
  %349 = bitcast i32 %193 to float, !dbg !59
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !59
  %351 = bitcast i32 %194 to float, !dbg !59
  %352 = fcmp uno float %351, 0.000000e+00, !dbg !59
  %353 = bitcast i32 %195 to float, !dbg !59
  %354 = fcmp uno float %353, 0.000000e+00, !dbg !59
  %355 = bitcast i32 %196 to float, !dbg !59
  %356 = fcmp uno float %355, 0.000000e+00, !dbg !59
  %357 = extractelement <4 x i1> %227, i64 0, !dbg !61
  %358 = or i1 %357, %326, !dbg !61
  %359 = extractelement <4 x i1> %227, i64 1, !dbg !61
  %360 = or i1 %359, %328, !dbg !61
  %361 = extractelement <4 x i1> %227, i64 2, !dbg !61
  %362 = or i1 %361, %330, !dbg !61
  %363 = extractelement <4 x i1> %227, i64 3, !dbg !61
  %364 = or i1 %363, %332, !dbg !61
  %365 = extractelement <4 x i1> %259, i64 0, !dbg !61
  %366 = or i1 %365, %334, !dbg !61
  %367 = extractelement <4 x i1> %259, i64 1, !dbg !61
  %368 = or i1 %367, %336, !dbg !61
  %369 = extractelement <4 x i1> %259, i64 2, !dbg !61
  %370 = or i1 %369, %338, !dbg !61
  %371 = extractelement <4 x i1> %259, i64 3, !dbg !61
  %372 = or i1 %371, %340, !dbg !61
  %373 = extractelement <4 x i1> %291, i64 0, !dbg !61
  %374 = or i1 %373, %342, !dbg !61
  %375 = extractelement <4 x i1> %291, i64 1, !dbg !61
  %376 = or i1 %375, %344, !dbg !61
  %377 = extractelement <4 x i1> %291, i64 2, !dbg !61
  %378 = or i1 %377, %346, !dbg !61
  %379 = extractelement <4 x i1> %291, i64 3, !dbg !61
  %380 = or i1 %379, %348, !dbg !61
  %381 = extractelement <4 x i1> %323, i64 0, !dbg !61
  %382 = or i1 %381, %350, !dbg !61
  %383 = extractelement <4 x i1> %323, i64 1, !dbg !61
  %384 = or i1 %383, %352, !dbg !61
  %385 = extractelement <4 x i1> %323, i64 2, !dbg !61
  %386 = or i1 %385, %354, !dbg !61
  %387 = extractelement <4 x i1> %323, i64 3, !dbg !61
  %388 = or i1 %387, %356, !dbg !61
  %389 = mul i32 %13, 196, !dbg !62
  %390 = mul i32 %14, 196, !dbg !62
  %391 = mul i32 %15, 196, !dbg !62
  %392 = mul i32 %16, 196, !dbg !62
  %393 = add i32 %28, %389, !dbg !63
  %394 = add i32 %28, %390, !dbg !63
  %395 = add i32 %28, %391, !dbg !63
  %396 = add i32 %28, %392, !dbg !63
  %397 = sext i32 %393 to i64, !dbg !64
  %398 = getelementptr i8, ptr addrspace(1) %1, i64 %397, !dbg !64
  %399 = sext i32 %394 to i64, !dbg !64
  %400 = getelementptr i8, ptr addrspace(1) %1, i64 %399, !dbg !64
  %401 = sext i32 %395 to i64, !dbg !64
  %402 = getelementptr i8, ptr addrspace(1) %1, i64 %401, !dbg !64
  %403 = sext i32 %396 to i64, !dbg !64
  %404 = getelementptr i8, ptr addrspace(1) %1, i64 %403, !dbg !64
  %405 = bitcast <4 x i8> %228 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %405, ptr addrspace(1) %398, i1 %70) #2, !dbg !65
  %406 = bitcast <4 x i8> %260 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %406, ptr addrspace(1) %400, i1 %71) #2, !dbg !65
  %407 = bitcast <4 x i8> %292 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %402, i1 %72) #2, !dbg !65
  %408 = bitcast <4 x i8> %324 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %404, i1 %73) #2, !dbg !65
  %409 = shl i32 %29, 6, !dbg !66
  %410 = shl i32 %30, 6, !dbg !66
  %411 = shl i32 %31, 6, !dbg !66
  %412 = shl i32 %32, 6, !dbg !66
  %413 = mul i32 %45, 12544, !dbg !67
  %414 = add i32 %413, %.decomposed46, !dbg !68
  %415 = add i32 %414, %409, !dbg !69
  %416 = add i32 %414, %410, !dbg !69
  %417 = add i32 %414, %411, !dbg !69
  %418 = add i32 %414, %412, !dbg !69
  %419 = sext i32 %415 to i64, !dbg !70
  %420 = getelementptr float, ptr addrspace(1) %2, i64 %419, !dbg !70
  %421 = sext i32 %416 to i64, !dbg !70
  %422 = getelementptr float, ptr addrspace(1) %2, i64 %421, !dbg !70
  %423 = sext i32 %417 to i64, !dbg !70
  %424 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !70
  %425 = sext i32 %418 to i64, !dbg !70
  %426 = getelementptr float, ptr addrspace(1) %2, i64 %425, !dbg !70
  %427 = shl i32 %8, 6, !dbg !71
  %428 = and i32 %427, 4032, !dbg !71
  %429 = or disjoint i32 %428, %10, !dbg !71
  %430 = and i32 %11, 1020, !dbg !71
  %431 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %428, !dbg !71
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %429, !dbg !71
  %433 = extractelement <4 x i32> %.v34, i64 0, !dbg !71
  %434 = select i1 %358, i32 %178, i32 %433, !dbg !72
  %435 = insertelement <1 x i32> poison, i32 %434, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %435, i1 true) #2, !dbg !71
  %436 = or disjoint i32 %429, 16, !dbg !71
  %437 = lshr i32 %436, 2, !dbg !71
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %437, !dbg !71
  %439 = getelementptr float, ptr addrspace(3) %438, i32 %436, !dbg !71
  %440 = extractelement <4 x i32> %.v34, i64 1, !dbg !71
  %441 = select i1 %360, i32 %179, i32 %440, !dbg !72
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !71
  %443 = or disjoint i32 %429, 32, !dbg !71
  %444 = lshr i32 %443, 2, !dbg !71
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !71
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %443, !dbg !71
  %447 = extractelement <4 x i32> %.v34, i64 2, !dbg !71
  %448 = select i1 %362, i32 %180, i32 %447, !dbg !72
  %449 = insertelement <1 x i32> poison, i32 %448, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %449, i1 true) #2, !dbg !71
  %450 = or disjoint i32 %429, 48, !dbg !71
  %451 = lshr i32 %450, 2, !dbg !71
  %452 = getelementptr float, ptr addrspace(3) @global_smem, i32 %451, !dbg !71
  %453 = getelementptr float, ptr addrspace(3) %452, i32 %450, !dbg !71
  %454 = extractelement <4 x i32> %.v34, i64 3, !dbg !71
  %455 = select i1 %364, i32 %181, i32 %454, !dbg !72
  %456 = insertelement <1 x i32> poison, i32 %455, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %456, i1 true) #2, !dbg !71
  %457 = or disjoint i32 %429, 4, !dbg !71
  %458 = getelementptr float, ptr addrspace(3) %431, i32 %457, !dbg !71
  %459 = extractelement <4 x i32> %.v36, i64 0, !dbg !71
  %460 = select i1 %366, i32 %183, i32 %459, !dbg !72
  %461 = insertelement <1 x i32> poison, i32 %460, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %461, i1 true) #2, !dbg !71
  %462 = or disjoint i32 %429, 20, !dbg !71
  %463 = lshr i32 %462, 2, !dbg !71
  %464 = and i32 %463, 1012, !dbg !71
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !71
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %462, !dbg !71
  %467 = extractelement <4 x i32> %.v36, i64 1, !dbg !71
  %468 = select i1 %368, i32 %184, i32 %467, !dbg !72
  %469 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %469, i1 true) #2, !dbg !71
  %470 = or disjoint i32 %429, 36, !dbg !71
  %471 = lshr i32 %470, 2, !dbg !71
  %472 = and i32 %471, 1016, !dbg !71
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !71
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %470, !dbg !71
  %475 = extractelement <4 x i32> %.v36, i64 2, !dbg !71
  %476 = select i1 %370, i32 %185, i32 %475, !dbg !72
  %477 = insertelement <1 x i32> poison, i32 %476, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %477, i1 true) #2, !dbg !71
  %478 = or disjoint i32 %429, 52, !dbg !71
  %479 = lshr i32 %478, 2, !dbg !71
  %480 = and i32 %479, 1020, !dbg !71
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !71
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %478, !dbg !71
  %483 = extractelement <4 x i32> %.v36, i64 3, !dbg !71
  %484 = select i1 %372, i32 %186, i32 %483, !dbg !72
  %485 = insertelement <1 x i32> poison, i32 %484, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %485, i1 true) #2, !dbg !71
  %486 = or disjoint i32 %429, 8, !dbg !71
  %487 = getelementptr float, ptr addrspace(3) %431, i32 %486, !dbg !71
  %488 = extractelement <4 x i32> %.v38, i64 0, !dbg !71
  %489 = select i1 %374, i32 %188, i32 %488, !dbg !72
  %490 = insertelement <1 x i32> poison, i32 %489, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %490, i1 true) #2, !dbg !71
  %491 = or disjoint i32 %429, 24, !dbg !71
  %492 = lshr i32 %491, 2, !dbg !71
  %493 = and i32 %492, 1012, !dbg !71
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !71
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %491, !dbg !71
  %496 = extractelement <4 x i32> %.v38, i64 1, !dbg !71
  %497 = select i1 %376, i32 %189, i32 %496, !dbg !72
  %498 = insertelement <1 x i32> poison, i32 %497, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %498, i1 true) #2, !dbg !71
  %499 = or disjoint i32 %429, 40, !dbg !71
  %500 = lshr i32 %499, 2, !dbg !71
  %501 = and i32 %500, 1016, !dbg !71
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %501, !dbg !71
  %503 = getelementptr float, ptr addrspace(3) %502, i32 %499, !dbg !71
  %504 = extractelement <4 x i32> %.v38, i64 2, !dbg !71
  %505 = select i1 %378, i32 %190, i32 %504, !dbg !72
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %506, i1 true) #2, !dbg !71
  %507 = or disjoint i32 %429, 56, !dbg !71
  %508 = lshr i32 %507, 2, !dbg !71
  %509 = and i32 %508, 1020, !dbg !71
  %510 = getelementptr float, ptr addrspace(3) @global_smem, i32 %509, !dbg !71
  %511 = getelementptr float, ptr addrspace(3) %510, i32 %507, !dbg !71
  %512 = extractelement <4 x i32> %.v38, i64 3, !dbg !71
  %513 = select i1 %380, i32 %191, i32 %512, !dbg !72
  %514 = insertelement <1 x i32> poison, i32 %513, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %514, i1 true) #2, !dbg !71
  %515 = or disjoint i32 %429, 12, !dbg !71
  %516 = getelementptr float, ptr addrspace(3) %431, i32 %515, !dbg !71
  %517 = extractelement <4 x i32> %.v40, i64 0, !dbg !71
  %518 = select i1 %382, i32 %193, i32 %517, !dbg !72
  %519 = insertelement <1 x i32> poison, i32 %518, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %519, i1 true) #2, !dbg !71
  %520 = or disjoint i32 %429, 28, !dbg !71
  %521 = lshr i32 %520, 2, !dbg !71
  %522 = and i32 %521, 1012, !dbg !71
  %523 = getelementptr float, ptr addrspace(3) @global_smem, i32 %522, !dbg !71
  %524 = getelementptr float, ptr addrspace(3) %523, i32 %520, !dbg !71
  %525 = extractelement <4 x i32> %.v40, i64 1, !dbg !71
  %526 = select i1 %384, i32 %194, i32 %525, !dbg !72
  %527 = insertelement <1 x i32> poison, i32 %526, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %527, i1 true) #2, !dbg !71
  %528 = or disjoint i32 %429, 44, !dbg !71
  %529 = lshr i32 %528, 2, !dbg !71
  %530 = and i32 %529, 1016, !dbg !71
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i32 %530, !dbg !71
  %532 = getelementptr float, ptr addrspace(3) %531, i32 %528, !dbg !71
  %533 = extractelement <4 x i32> %.v40, i64 2, !dbg !71
  %534 = select i1 %386, i32 %195, i32 %533, !dbg !72
  %535 = insertelement <1 x i32> poison, i32 %534, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %535, i1 true) #2, !dbg !71
  %536 = or disjoint i32 %429, 60, !dbg !71
  %537 = lshr i32 %536, 2, !dbg !71
  %538 = and i32 %537, 1020, !dbg !71
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i32 %538, !dbg !71
  %540 = getelementptr float, ptr addrspace(3) %539, i32 %536, !dbg !71
  %541 = extractelement <4 x i32> %.v40, i64 3, !dbg !71
  %542 = select i1 %388, i32 %196, i32 %541, !dbg !72
  %543 = insertelement <1 x i32> poison, i32 %542, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %543, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %544 = and i32 %8, 252, !dbg !71
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %544, !dbg !71
  %546 = getelementptr inbounds float, ptr addrspace(3) %545, i32 %430, !dbg !71
  %547 = or disjoint i32 %430, 1024, !dbg !71
  %548 = lshr exact i32 %547, 2, !dbg !71
  %549 = and i32 %548, 508, !dbg !71
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !71
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %547, !dbg !71
  %552 = load <4 x i32>, ptr addrspace(3) %551, align 16, !dbg !71
  %553 = or disjoint i32 %430, 2048, !dbg !71
  %554 = lshr exact i32 %553, 2, !dbg !71
  %555 = and i32 %554, 764, !dbg !71
  %556 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %555, !dbg !71
  %557 = getelementptr inbounds float, ptr addrspace(3) %556, i32 %553, !dbg !71
  %558 = load <4 x i32>, ptr addrspace(3) %557, align 16, !dbg !71
  %559 = or disjoint i32 %430, 3072, !dbg !71
  %560 = lshr exact i32 %559, 2, !dbg !71
  %561 = and i32 %560, 1020, !dbg !71
  %562 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %561, !dbg !71
  %563 = getelementptr inbounds float, ptr addrspace(3) %562, i32 %559, !dbg !71
  %564 = load <4 x i32>, ptr addrspace(3) %563, align 16, !dbg !71
  %.extract = load i32, ptr addrspace(3) %546, align 16, !dbg !71
  %565 = getelementptr inbounds i8, ptr addrspace(3) %546, i32 4, !dbg !71
  %.extract19 = load i32, ptr addrspace(3) %565, align 4, !dbg !71
  %566 = getelementptr inbounds i8, ptr addrspace(3) %546, i32 8, !dbg !71
  %.extract20 = load i32, ptr addrspace(3) %566, align 8, !dbg !71
  %567 = getelementptr inbounds i8, ptr addrspace(3) %546, i32 12, !dbg !71
  %.extract21 = load i32, ptr addrspace(3) %567, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %420, i1 %74) #2, !dbg !71
  %.extract22 = extractelement <4 x i32> %552, i64 0, !dbg !71
  %.extract23 = extractelement <4 x i32> %552, i64 1, !dbg !71
  %.extract24 = extractelement <4 x i32> %552, i64 2, !dbg !71
  %.extract25 = extractelement <4 x i32> %552, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %422, i1 %75) #2, !dbg !71
  %.extract26 = extractelement <4 x i32> %558, i64 0, !dbg !71
  %.extract27 = extractelement <4 x i32> %558, i64 1, !dbg !71
  %.extract28 = extractelement <4 x i32> %558, i64 2, !dbg !71
  %.extract29 = extractelement <4 x i32> %558, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %424, i1 %76) #2, !dbg !71
  %.extract30 = extractelement <4 x i32> %564, i64 0, !dbg !71
  %.extract31 = extractelement <4 x i32> %564, i64 1, !dbg !71
  %.extract32 = extractelement <4 x i32> %564, i64 2, !dbg !71
  %.extract33 = extractelement <4 x i32> %564, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %426, i1 %77) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 38, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 33, scope: !7)
!67 = !DILocation(line: 52, column: 44, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 38, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 56, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
