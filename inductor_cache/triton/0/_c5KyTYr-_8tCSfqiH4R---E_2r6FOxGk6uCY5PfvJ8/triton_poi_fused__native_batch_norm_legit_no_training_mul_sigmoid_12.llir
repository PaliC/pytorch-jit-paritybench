; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = and i32 %11, 128, !dbg !12
  %15 = lshr exact i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = or disjoint i32 %16, 128, !dbg !12
  %18 = or disjoint i32 %16, 256, !dbg !12
  %19 = or disjoint i32 %16, 384, !dbg !12
  %20 = and i32 %11, 1, !dbg !12
  %21 = shl nuw nsw i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %17, !dbg !13
  %24 = or disjoint i32 %10, %18, !dbg !13
  %25 = or disjoint i32 %10, %19, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %27 = shl i32 %26, 3, !dbg !15
  %28 = or disjoint i32 %27, %21, !dbg !16
  %29 = icmp slt i32 %28, 8, !dbg !17
  %30 = shl i32 %22, 3, !dbg !18
  %31 = shl i32 %23, 3, !dbg !18
  %32 = shl i32 %24, 3, !dbg !18
  %33 = shl i32 %25, 3, !dbg !18
  %34 = add i32 %28, %30, !dbg !19
  %35 = add i32 %28, %31, !dbg !19
  %36 = add i32 %28, %32, !dbg !19
  %37 = add i32 %28, %33, !dbg !19
  %38 = sext i32 %34 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %35 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %36 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %37 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %29) #4, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %29) #4, !dbg !21
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %29) #4, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %29) #4, !dbg !21
  %50 = sext i32 %28 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %29) #4, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %29) #4, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %29) #4, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %29) #4, !dbg !29
  %67 = fadd float %59, 0x3F50624DE0000000, !dbg !30
  %68 = fadd float %60, 0x3F50624DE0000000, !dbg !30
  %69 = fadd float %61, 0x3F50624DE0000000, !dbg !30
  %70 = fadd float %62, 0x3F50624DE0000000, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %71, 0, !dbg !31
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %72, 0, !dbg !31
  br i1 %.not.i, label %78, label %73, !dbg !31

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !31

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

78:                                               ; preds = %8
  br i1 %.not1.i, label %81, label %79, !dbg !31

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i35 = icmp eq i32 %83, 0, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i38 = icmp eq i32 %84, 0, !dbg !31
  br i1 %.not.i35, label %90, label %85, !dbg !31

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i38, label %88, label %86, !dbg !31

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i38, label %93, label %91, !dbg !31

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

__nv_sqrtf.exit39:                                ; preds = %86, %88, %91, %93
  %.0.i37 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i40 = icmp eq i32 %95, 0, !dbg !31
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i43 = icmp eq i32 %96, 0, !dbg !31
  br i1 %.not.i40, label %102, label %97, !dbg !31

97:                                               ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %100, label %98, !dbg !31

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

102:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %105, label %103, !dbg !31

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

__nv_sqrtf.exit44:                                ; preds = %98, %100, %103, %105
  %.0.i42 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !31
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i45 = icmp eq i32 %107, 0, !dbg !31
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i48 = icmp eq i32 %108, 0, !dbg !31
  br i1 %.not.i45, label %114, label %109, !dbg !31

109:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %112, label %110, !dbg !31

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

114:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %117, label %115, !dbg !31

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

__nv_sqrtf.exit49:                                ; preds = %110, %112, %115, %117
  %.0.i47 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !21
  %120 = bitcast i32 %119 to float, !dbg !21
  %121 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %122 = bitcast i32 %121 to float, !dbg !23
  %123 = fsub float %120, %122, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !21
  %125 = bitcast i32 %124 to float, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %127 = bitcast i32 %126 to float, !dbg !23
  %128 = fsub float %125, %127, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !21
  %130 = bitcast i32 %129 to float, !dbg !21
  %131 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = fsub float %130, %132, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !21
  %135 = bitcast i32 %134 to float, !dbg !21
  %136 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = fsub float %135, %137, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !21
  %140 = bitcast i32 %139 to float, !dbg !21
  %141 = fsub float %140, %122, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !21
  %143 = bitcast i32 %142 to float, !dbg !21
  %144 = fsub float %143, %127, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !21
  %146 = bitcast i32 %145 to float, !dbg !21
  %147 = fsub float %146, %132, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !21
  %149 = bitcast i32 %148 to float, !dbg !21
  %150 = fsub float %149, %137, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !21
  %152 = bitcast i32 %151 to float, !dbg !21
  %153 = fsub float %152, %122, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !21
  %155 = bitcast i32 %154 to float, !dbg !21
  %156 = fsub float %155, %127, !dbg !32
  %157 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !21
  %158 = bitcast i32 %157 to float, !dbg !21
  %159 = fsub float %158, %132, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !21
  %161 = bitcast i32 %160 to float, !dbg !21
  %162 = fsub float %161, %137, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %164 = bitcast i32 %163 to float, !dbg !21
  %165 = fsub float %164, %122, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %167 = bitcast i32 %166 to float, !dbg !21
  %168 = fsub float %167, %127, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %170 = bitcast i32 %169 to float, !dbg !21
  %171 = fsub float %170, %132, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %173 = bitcast i32 %172 to float, !dbg !21
  %174 = fsub float %173, %137, !dbg !32
  %175 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %176 = bitcast i32 %175 to float, !dbg !29
  %177 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %178 = bitcast i32 %177 to float, !dbg !29
  %179 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %180 = bitcast i32 %179 to float, !dbg !29
  %181 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %182 = bitcast i32 %181 to float, !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !27
  %184 = bitcast i32 %183 to float, !dbg !27
  %185 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !27
  %186 = bitcast i32 %185 to float, !dbg !27
  %187 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !27
  %188 = bitcast i32 %187 to float, !dbg !27
  %189 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !27
  %190 = bitcast i32 %189 to float, !dbg !27
  %191 = shl i32 %11, 2, !dbg !12
  %192 = and i32 %191, 508, !dbg !12
  %193 = or disjoint i32 %10, %192, !dbg !13
  %.frozen = freeze i32 %193, !dbg !33
  %194 = sdiv i32 %.frozen, 256, !dbg !33
  %195 = mul i32 %194, 256, !dbg !34
  %.decomposed = sub i32 %.frozen, %195, !dbg !34
  %.lobit1 = lshr exact i32 %14, 7, !dbg !35
  %196 = or disjoint i32 %.lobit1, %27, !dbg !16
  %197 = or disjoint i32 %196, 6, !dbg !16
  %198 = icmp slt i32 %197, 8, !dbg !17
  %199 = or disjoint i32 %196, 4, !dbg !16
  %200 = icmp slt i32 %199, 8, !dbg !17
  %201 = or disjoint i32 %196, 2, !dbg !16
  %202 = icmp slt i32 %201, 8, !dbg !17
  %203 = icmp slt i32 %196, 8, !dbg !17
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !36
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !36
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !36
  %208 = fmul float %174, %204, !dbg !37
  %209 = fmul float %171, %205, !dbg !37
  %210 = fmul float %168, %206, !dbg !37
  %211 = fmul float %165, %207, !dbg !37
  %212 = fmul float %162, %204, !dbg !37
  %213 = fmul float %159, %205, !dbg !37
  %214 = fmul float %156, %206, !dbg !37
  %215 = fmul float %153, %207, !dbg !37
  %216 = fmul float %150, %204, !dbg !37
  %217 = fmul float %147, %205, !dbg !37
  %218 = fmul float %144, %206, !dbg !37
  %219 = fmul float %141, %207, !dbg !37
  %220 = fmul float %138, %204, !dbg !37
  %221 = fmul float %133, %205, !dbg !37
  %222 = fmul float %128, %206, !dbg !37
  %223 = fmul float %123, %207, !dbg !37
  %224 = fmul float %208, %190, !dbg !38
  %225 = fmul float %209, %188, !dbg !38
  %226 = fmul float %210, %186, !dbg !38
  %227 = fmul float %211, %184, !dbg !38
  %228 = fmul float %212, %190, !dbg !38
  %229 = fmul float %213, %188, !dbg !38
  %230 = fmul float %214, %186, !dbg !38
  %231 = fmul float %215, %184, !dbg !38
  %232 = fmul float %216, %190, !dbg !38
  %233 = fmul float %217, %188, !dbg !38
  %234 = fmul float %218, %186, !dbg !38
  %235 = fmul float %219, %184, !dbg !38
  %236 = fmul float %220, %190, !dbg !38
  %237 = fmul float %221, %188, !dbg !38
  %238 = fmul float %222, %186, !dbg !38
  %239 = fmul float %223, %184, !dbg !38
  %240 = fadd float %224, %182, !dbg !39
  %241 = fadd float %225, %180, !dbg !39
  %242 = fadd float %226, %178, !dbg !39
  %243 = fadd float %227, %176, !dbg !39
  %244 = fadd float %228, %182, !dbg !39
  %245 = fadd float %229, %180, !dbg !39
  %246 = fadd float %230, %178, !dbg !39
  %247 = fadd float %231, %176, !dbg !39
  %248 = fadd float %232, %182, !dbg !39
  %249 = fadd float %233, %180, !dbg !39
  %250 = fadd float %234, %178, !dbg !39
  %251 = fadd float %235, %176, !dbg !39
  %252 = fadd float %236, %182, !dbg !39
  %253 = fadd float %237, %180, !dbg !39
  %254 = fadd float %238, %178, !dbg !39
  %255 = fadd float %239, %176, !dbg !39
  %256 = fsub float 0.000000e+00, %240, !dbg !40
  %257 = fsub float 0.000000e+00, %241, !dbg !40
  %258 = fsub float 0.000000e+00, %242, !dbg !40
  %259 = fsub float 0.000000e+00, %243, !dbg !40
  %260 = fsub float 0.000000e+00, %244, !dbg !40
  %261 = fsub float 0.000000e+00, %245, !dbg !40
  %262 = fsub float 0.000000e+00, %246, !dbg !40
  %263 = fsub float 0.000000e+00, %247, !dbg !40
  %264 = fsub float 0.000000e+00, %248, !dbg !40
  %265 = fsub float 0.000000e+00, %249, !dbg !40
  %266 = fsub float 0.000000e+00, %250, !dbg !40
  %267 = fsub float 0.000000e+00, %251, !dbg !40
  %268 = fsub float 0.000000e+00, %252, !dbg !40
  %269 = fsub float 0.000000e+00, %253, !dbg !40
  %270 = fsub float 0.000000e+00, %254, !dbg !40
  %271 = fsub float 0.000000e+00, %255, !dbg !40
  %272 = fmul float %256, 0x3FF7154760000000, !dbg !44
  %273 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %272) #4, !dbg !44
  %274 = fmul float %257, 0x3FF7154760000000, !dbg !44
  %275 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %274) #4, !dbg !44
  %276 = fmul float %258, 0x3FF7154760000000, !dbg !44
  %277 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %276) #4, !dbg !44
  %278 = fmul float %259, 0x3FF7154760000000, !dbg !44
  %279 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %278) #4, !dbg !44
  %280 = fmul float %260, 0x3FF7154760000000, !dbg !44
  %281 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %280) #4, !dbg !44
  %282 = fmul float %261, 0x3FF7154760000000, !dbg !44
  %283 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %282) #4, !dbg !44
  %284 = fmul float %262, 0x3FF7154760000000, !dbg !44
  %285 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %284) #4, !dbg !44
  %286 = fmul float %263, 0x3FF7154760000000, !dbg !44
  %287 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %286) #4, !dbg !44
  %288 = fmul float %264, 0x3FF7154760000000, !dbg !44
  %289 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %288) #4, !dbg !44
  %290 = fmul float %265, 0x3FF7154760000000, !dbg !44
  %291 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %290) #4, !dbg !44
  %292 = fmul float %266, 0x3FF7154760000000, !dbg !44
  %293 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #4, !dbg !44
  %294 = fmul float %267, 0x3FF7154760000000, !dbg !44
  %295 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %294) #4, !dbg !44
  %296 = fmul float %268, 0x3FF7154760000000, !dbg !44
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %296) #4, !dbg !44
  %298 = fmul float %269, 0x3FF7154760000000, !dbg !44
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %298) #4, !dbg !44
  %300 = fmul float %270, 0x3FF7154760000000, !dbg !44
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #4, !dbg !44
  %302 = fmul float %271, 0x3FF7154760000000, !dbg !44
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %302) #4, !dbg !44
  %304 = fadd float %273, 1.000000e+00, !dbg !45
  %305 = fadd float %275, 1.000000e+00, !dbg !45
  %306 = fadd float %277, 1.000000e+00, !dbg !45
  %307 = fadd float %279, 1.000000e+00, !dbg !45
  %308 = fadd float %281, 1.000000e+00, !dbg !45
  %309 = fadd float %283, 1.000000e+00, !dbg !45
  %310 = fadd float %285, 1.000000e+00, !dbg !45
  %311 = fadd float %287, 1.000000e+00, !dbg !45
  %312 = fadd float %289, 1.000000e+00, !dbg !45
  %313 = fadd float %291, 1.000000e+00, !dbg !45
  %314 = fadd float %293, 1.000000e+00, !dbg !45
  %315 = fadd float %295, 1.000000e+00, !dbg !45
  %316 = fadd float %297, 1.000000e+00, !dbg !45
  %317 = fadd float %299, 1.000000e+00, !dbg !45
  %318 = fadd float %301, 1.000000e+00, !dbg !45
  %319 = fadd float %303, 1.000000e+00, !dbg !45
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #4, !dbg !46
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #4, !dbg !46
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #4, !dbg !46
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #4, !dbg !46
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #4, !dbg !46
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %309) #4, !dbg !46
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %310) #4, !dbg !46
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #4, !dbg !46
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #4, !dbg !46
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #4, !dbg !46
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #4, !dbg !46
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #4, !dbg !46
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #4, !dbg !46
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #4, !dbg !46
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #4, !dbg !46
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #4, !dbg !46
  %336 = fmul float %240, %320, !dbg !47
  %337 = fmul float %241, %321, !dbg !47
  %338 = fmul float %242, %322, !dbg !47
  %339 = fmul float %243, %323, !dbg !47
  %340 = fmul float %244, %324, !dbg !47
  %341 = fmul float %245, %325, !dbg !47
  %342 = fmul float %246, %326, !dbg !47
  %343 = fmul float %247, %327, !dbg !47
  %344 = fmul float %248, %328, !dbg !47
  %345 = fmul float %249, %329, !dbg !47
  %346 = fmul float %250, %330, !dbg !47
  %347 = fmul float %251, %331, !dbg !47
  %348 = fmul float %252, %332, !dbg !47
  %349 = fmul float %253, %333, !dbg !47
  %350 = fmul float %254, %334, !dbg !47
  %351 = fmul float %255, %335, !dbg !47
  %352 = shl i32 %196, 8, !dbg !48
  %353 = shl i32 %201, 8, !dbg !48
  %354 = shl i32 %199, 8, !dbg !48
  %355 = shl i32 %197, 8, !dbg !48
  %356 = shl i32 %194, 11, !dbg !49
  %357 = add i32 %356, %.decomposed, !dbg !50
  %358 = add i32 %357, %352, !dbg !51
  %359 = add i32 %357, %353, !dbg !51
  %360 = add i32 %357, %354, !dbg !51
  %361 = add i32 %357, %355, !dbg !51
  %362 = sext i32 %358 to i64, !dbg !52
  %363 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !52
  %364 = sext i32 %359 to i64, !dbg !52
  %365 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !52
  %366 = sext i32 %360 to i64, !dbg !52
  %367 = getelementptr float, ptr addrspace(1) %5, i64 %366, !dbg !52
  %368 = sext i32 %361 to i64, !dbg !52
  %369 = getelementptr float, ptr addrspace(1) %5, i64 %368, !dbg !52
  %370 = shl nuw nsw i32 %20, 11, !dbg !53
  %371 = or disjoint i32 %370, %13, !dbg !53
  %372 = or disjoint i32 %371, %15, !dbg !53
  %373 = and i32 %191, 1020, !dbg !53
  %.idx = shl nuw nsw i32 %20, 6, !dbg !53
  %374 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !53
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %372, !dbg !53
  %376 = bitcast float %336 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !53
  %377 = or disjoint i32 %372, 512, !dbg !53
  %378 = lshr i32 %377, 7, !dbg !53
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %378, !dbg !53
  %380 = getelementptr float, ptr addrspace(3) %379, i32 %377, !dbg !53
  %381 = bitcast float %337 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !53
  %382 = or disjoint i32 %372, 1024, !dbg !53
  %383 = lshr i32 %382, 7, !dbg !53
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !53
  %385 = getelementptr float, ptr addrspace(3) %384, i32 %382, !dbg !53
  %386 = bitcast float %338 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #4, !dbg !53
  %387 = or disjoint i32 %372, 1536, !dbg !53
  %388 = lshr i32 %387, 7, !dbg !53
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i32 %388, !dbg !53
  %390 = getelementptr float, ptr addrspace(3) %389, i32 %387, !dbg !53
  %391 = bitcast float %339 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #4, !dbg !53
  %392 = or disjoint i32 %372, 128, !dbg !53
  %393 = getelementptr float, ptr addrspace(3) %374, i32 %392, !dbg !53
  %394 = bitcast float %340 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #4, !dbg !53
  %395 = or disjoint i32 %372, 640, !dbg !53
  %396 = lshr i32 %395, 7, !dbg !53
  %397 = and i32 %396, 16777204, !dbg !53
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %397, !dbg !53
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %395, !dbg !53
  %400 = bitcast float %341 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !53
  %401 = or disjoint i32 %372, 1152, !dbg !53
  %402 = lshr i32 %401, 7, !dbg !53
  %403 = and i32 %402, 16777208, !dbg !53
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i32 %403, !dbg !53
  %405 = getelementptr float, ptr addrspace(3) %404, i32 %401, !dbg !53
  %406 = bitcast float %342 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !53
  %407 = or disjoint i32 %372, 1664, !dbg !53
  %408 = lshr i32 %407, 7, !dbg !53
  %409 = and i32 %408, 16777212, !dbg !53
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !53
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %407, !dbg !53
  %412 = bitcast float %343 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !53
  %413 = or disjoint i32 %372, 256, !dbg !53
  %414 = getelementptr float, ptr addrspace(3) %374, i32 %413, !dbg !53
  %415 = bitcast float %344 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #4, !dbg !53
  %416 = or disjoint i32 %372, 768, !dbg !53
  %417 = lshr i32 %416, 7, !dbg !53
  %418 = and i32 %417, 16777204, !dbg !53
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !53
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %416, !dbg !53
  %421 = bitcast float %345 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !53
  %422 = or disjoint i32 %372, 1280, !dbg !53
  %423 = lshr i32 %422, 7, !dbg !53
  %424 = and i32 %423, 16777208, !dbg !53
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i32 %424, !dbg !53
  %426 = getelementptr float, ptr addrspace(3) %425, i32 %422, !dbg !53
  %427 = bitcast float %346 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #4, !dbg !53
  %428 = or disjoint i32 %372, 1792, !dbg !53
  %429 = lshr i32 %428, 7, !dbg !53
  %430 = and i32 %429, 16777212, !dbg !53
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %430, !dbg !53
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %428, !dbg !53
  %433 = bitcast float %347 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #4, !dbg !53
  %434 = or disjoint i32 %372, 384, !dbg !53
  %435 = getelementptr float, ptr addrspace(3) %374, i32 %434, !dbg !53
  %436 = bitcast float %348 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !53
  %437 = or disjoint i32 %372, 896, !dbg !53
  %438 = lshr i32 %437, 7, !dbg !53
  %439 = and i32 %438, 16777204, !dbg !53
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !53
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %437, !dbg !53
  %442 = bitcast float %349 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !53
  %443 = or disjoint i32 %372, 1408, !dbg !53
  %444 = lshr i32 %443, 7, !dbg !53
  %445 = and i32 %444, 16777208, !dbg !53
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !53
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %443, !dbg !53
  %448 = bitcast float %350 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #4, !dbg !53
  %449 = or disjoint i32 %372, 1920, !dbg !53
  %450 = lshr i32 %449, 7, !dbg !53
  %451 = and i32 %450, 16777212, !dbg !53
  %452 = getelementptr float, ptr addrspace(3) @global_smem, i32 %451, !dbg !53
  %453 = getelementptr float, ptr addrspace(3) %452, i32 %449, !dbg !53
  %454 = bitcast float %351 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %455 = lshr i32 %191, 7, !dbg !53
  %456 = and i32 %455, 4, !dbg !53
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !53
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %373, !dbg !53
  %459 = or disjoint i32 %373, 1024, !dbg !53
  %460 = lshr i32 %459, 7, !dbg !53
  %461 = and i32 %460, 12, !dbg !53
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %461, !dbg !53
  %463 = getelementptr inbounds float, ptr addrspace(3) %462, i32 %459, !dbg !53
  %464 = load <4 x i32>, ptr addrspace(3) %463, align 16, !dbg !53
  %465 = or disjoint i32 %373, 2048, !dbg !53
  %466 = lshr i32 %465, 7, !dbg !53
  %467 = and i32 %466, 20, !dbg !53
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !53
  %469 = getelementptr inbounds float, ptr addrspace(3) %468, i32 %465, !dbg !53
  %470 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !53
  %471 = or disjoint i32 %373, 3072, !dbg !53
  %472 = lshr i32 %471, 7, !dbg !53
  %473 = and i32 %472, 28, !dbg !53
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %473, !dbg !53
  %475 = getelementptr inbounds float, ptr addrspace(3) %474, i32 %471, !dbg !53
  %476 = load <4 x i32>, ptr addrspace(3) %475, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %458, align 16, !dbg !53
  %477 = getelementptr inbounds i8, ptr addrspace(3) %458, i32 4, !dbg !53
  %.extract20 = load i32, ptr addrspace(3) %477, align 4, !dbg !53
  %478 = getelementptr inbounds i8, ptr addrspace(3) %458, i32 8, !dbg !53
  %.extract21 = load i32, ptr addrspace(3) %478, align 8, !dbg !53
  %479 = getelementptr inbounds i8, ptr addrspace(3) %458, i32 12, !dbg !53
  %.extract22 = load i32, ptr addrspace(3) %479, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %363, i1 %203) #4, !dbg !53
  %.extract23 = extractelement <4 x i32> %464, i64 0, !dbg !53
  %.extract24 = extractelement <4 x i32> %464, i64 1, !dbg !53
  %.extract25 = extractelement <4 x i32> %464, i64 2, !dbg !53
  %.extract26 = extractelement <4 x i32> %464, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %365, i1 %202) #4, !dbg !53
  %.extract27 = extractelement <4 x i32> %470, i64 0, !dbg !53
  %.extract28 = extractelement <4 x i32> %470, i64 1, !dbg !53
  %.extract29 = extractelement <4 x i32> %470, i64 2, !dbg !53
  %.extract30 = extractelement <4 x i32> %470, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %367, i1 %200) #4, !dbg !53
  %.extract31 = extractelement <4 x i32> %476, i64 0, !dbg !53
  %.extract32 = extractelement <4 x i32> %476, i64 1, !dbg !53
  %.extract33 = extractelement <4 x i32> %476, i64 2, !dbg !53
  %.extract34 = extractelement <4 x i32> %476, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %369, i1 %198) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw2wzaosirh4o3ypmoe43gs5bqei4xcue6vmdhk7u5op5ezy7nfa.py", directory: "inductor_cache/w2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 48, column: 23, scope: !7)
!44 = !DILocation(line: 47, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 20, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 47, column: 16, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 34, scope: !7)
!49 = !DILocation(line: 50, column: 44, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 39, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 56, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
