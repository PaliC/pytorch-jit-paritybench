; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = icmp slt i32 %17, 512, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 16, !dbg !15
  %20 = srem i32 %19, 8, !dbg !16
  %21 = mul i32 %19, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen6 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen6, 128, !dbg !18
  %23 = icmp slt i32 %20, 4, !dbg !19
  %24 = mul i32 %22, 128, !dbg !20
  %srem.decomposed = sub i32 %.frozen6, %24, !dbg !20
  %25 = shl nsw i32 %22, 6, !dbg !21
  %26 = add nsw i32 %25, %srem.decomposed, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = and i1 %18, %23, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %31 = sext i32 %20 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %29, i32 0, i1 %29) #3, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %29, i32 0, i1 %29) #3, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = fadd float %36, 0x3EE4F8B580000000, !dbg !30
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %38, 0, !dbg !31
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %39, 0, !dbg !31
  br i1 %.not.i, label %45, label %40, !dbg !31

40:                                               ; preds = %12
  br i1 %.not1.i, label %43, label %41, !dbg !31

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

45:                                               ; preds = %12
  br i1 %.not1.i, label %48, label %46, !dbg !31

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %41, %43, %46, %48
  %.0.i = phi float [ %42, %41 ], [ %44, %43 ], [ %47, %46 ], [ %49, %48 ], !dbg !31
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %29, i32 0, i1 %29) #3, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %29, i32 0, i1 %29) #3, !dbg !36
  %55 = icmp sgt i32 %20, 3, !dbg !37
  %56 = add nsw i32 %20, -4, !dbg !38
  %57 = shl nsw i32 %56, 4, !dbg !39
  %58 = add nsw i32 %25, %.decomposed, !dbg !40
  %59 = add nsw i32 %58, %57, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !42
  %62 = and i1 %18, %55, !dbg !43
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62) #3, !dbg !44
  %64 = sext i32 %56 to i64, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %64, !dbg !45
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %62, i32 0, i1 %62) #3, !dbg !46
  %67 = getelementptr float, ptr addrspace(1) %7, i64 %64, !dbg !47
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 0, i1 %62) #3, !dbg !48
  %69 = bitcast i32 %68 to float, !dbg !48
  %70 = fadd float %69, 0x3EE4F8B580000000, !dbg !49
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %71, 0, !dbg !50
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !50
  br i1 %.not.i1, label %78, label %73, !dbg !50

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !50

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !50

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !50
  %83 = bitcast i32 %63 to float, !dbg !44
  %84 = bitcast i32 %66 to float, !dbg !46
  %85 = fsub float %83, %84, !dbg !51
  %86 = bitcast i32 %30 to float, !dbg !25
  %87 = bitcast i32 %33 to float, !dbg !27
  %88 = fsub float %86, %87, !dbg !52
  %89 = fmul float %88, %50, !dbg !53
  %90 = bitcast i32 %52 to float, !dbg !34
  %91 = fmul float %89, %90, !dbg !54
  %92 = bitcast i32 %54 to float, !dbg !36
  %93 = fadd float %91, %92, !dbg !55
  %94 = fcmp olt float %93, 0.000000e+00, !dbg !56
  %95 = select i1 %94, float 0.000000e+00, float %93, !dbg !60
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !61
  %97 = fmul float %85, %96, !dbg !62
  %98 = getelementptr float, ptr addrspace(1) %8, i64 %64, !dbg !63
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %62, i32 0, i1 %62) #3, !dbg !64
  %100 = bitcast i32 %99 to float, !dbg !64
  %101 = fmul float %97, %100, !dbg !65
  %102 = getelementptr float, ptr addrspace(1) %9, i64 %64, !dbg !66
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %62, i32 0, i1 %62) #3, !dbg !67
  %104 = bitcast i32 %103 to float, !dbg !67
  %105 = fadd float %101, %104, !dbg !68
  %106 = fcmp olt float %105, 0.000000e+00, !dbg !69
  %107 = select i1 %106, float 0.000000e+00, float %105, !dbg !71
  %108 = select i1 %23, float %95, float %107, !dbg !72
  %109 = sext i32 %17 to i64, !dbg !73
  %110 = getelementptr float, ptr addrspace(1) %10, i64 %109, !dbg !73
  %111 = bitcast float %108 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %110, i1 %18) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck4afo4sczi3uepeogwpcg5ij64q4633iymkvpupwcoxk6pine7m.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 56, column: 47, scope: !7)
!39 = !DILocation(line: 56, column: 40, scope: !7)
!40 = !DILocation(line: 56, column: 36, scope: !7)
!41 = !DILocation(line: 56, column: 53, scope: !7)
!42 = !DILocation(line: 56, column: 31, scope: !7)
!43 = !DILocation(line: 56, column: 69, scope: !7)
!44 = !DILocation(line: 56, column: 61, scope: !7)
!45 = !DILocation(line: 57, column: 31, scope: !7)
!46 = !DILocation(line: 57, column: 43, scope: !7)
!47 = !DILocation(line: 59, column: 31, scope: !7)
!48 = !DILocation(line: 59, column: 43, scope: !7)
!49 = !DILocation(line: 61, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 27, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 35, column: 18, scope: !7)
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 46, column: 20, scope: !7)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 50, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 67, column: 20, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 43, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 70, column: 31, scope: !7)
!67 = !DILocation(line: 70, column: 43, scope: !7)
!68 = !DILocation(line: 71, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !70)
!70 = !DILocation(line: 73, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !70)
!72 = !DILocation(line: 0, scope: !7)
!73 = !DILocation(line: 77, column: 25, scope: !7)
!74 = !DILocation(line: 77, column: 37, scope: !7)
!75 = !DILocation(line: 77, column: 4, scope: !7)
