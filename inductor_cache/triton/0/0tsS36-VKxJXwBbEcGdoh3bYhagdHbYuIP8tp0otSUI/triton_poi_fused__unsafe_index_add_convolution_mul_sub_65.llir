; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = icmp slt i32 %18, 16, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %20 = sdiv i32 %.frozen, 4, !dbg !16
  %21 = mul i32 %20, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen2 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen2, 512, !dbg !18
  %23 = mul i32 %22, 512, !dbg !19
  %.decomposed3 = sub i32 %.frozen2, %23, !dbg !19
  %24 = sext i32 %20 to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %19) #2, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %19) #2, !dbg !21
  %28 = sext i32 %.decomposed to i64, !dbg !22
  %29 = getelementptr i64, ptr addrspace(1) %2, i64 %28, !dbg !22
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %19) #2, !dbg !23
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %19) #2, !dbg !23
  %32 = getelementptr i64, ptr addrspace(1) %4, i64 %28, !dbg !24
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #2, !dbg !25
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %19) #2, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #2, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #2, !dbg !27
  %38 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !28
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %19) #2, !dbg !29
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %19) #2, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #2, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %19) #2, !dbg !31
  %44 = bitcast i32 %43 to float, !dbg !31
  %45 = shl i32 %18, 9, !dbg !32
  %46 = add i32 %.decomposed3, %45, !dbg !33
  %47 = shl i32 %22, 13, !dbg !34
  %48 = add i32 %46, %47, !dbg !35
  %49 = sext i32 %48 to i64, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %19) #2, !dbg !37
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !37
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !37
  %54 = bitcast i32 %52 to float, !dbg !37
  %55 = bitcast i32 %53 to float, !dbg !37
  %56 = sext i32 %.decomposed3 to i64, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %56, !dbg !38
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !39
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !39
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !39
  %61 = bitcast i32 %59 to float, !dbg !39
  %62 = bitcast i32 %60 to float, !dbg !39
  %63 = lshr i64 %27, 62, !dbg !40
  %64 = and i64 %63, 2, !dbg !40
  %65 = add i64 %64, %27, !dbg !40
  %66 = lshr i64 %31, 62, !dbg !41
  %67 = and i64 %66, 2, !dbg !41
  %68 = add i64 %67, %31, !dbg !41
  %69 = shl i64 %65, 10, !dbg !42
  %70 = shl i32 %22, 11, !dbg !43
  %71 = sext i32 %70 to i64, !dbg !44
  %.idx = shl i64 %68, 11, !dbg !45
  %72 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !45
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %56, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %69, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %71, !dbg !45
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %19) #2, !dbg !46
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !46
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !46
  %79 = lshr i64 %34, 62, !dbg !47
  %80 = and i64 %79, 2, !dbg !47
  %81 = add i64 %80, %34, !dbg !47
  %.idx1 = shl i64 %81, 11, !dbg !48
  %82 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !48
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %56, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %69, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %71, !dbg !48
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %19) #2, !dbg !49
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !49
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !49
  %89 = lshr i64 %40, 62, !dbg !50
  %90 = and i64 %89, 2, !dbg !50
  %91 = add i64 %90, %40, !dbg !50
  %92 = shl i64 %91, 10, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %73, i64 %92, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %71, !dbg !52
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %94, i1 %19) #2, !dbg !53
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !53
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %83, i64 %92, !dbg !54
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %71, !dbg !54
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %99, i1 %19) #2, !dbg !55
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !55
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !55
  %103 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !53
  %104 = insertelement <2 x i32> %103, i32 %77, i64 1, !dbg !53
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !53
  %106 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !55
  %107 = insertelement <2 x i32> %106, i32 %87, i64 1, !dbg !55
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !55
  %109 = fsub <2 x float> %108, %105, !dbg !56
  %110 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !57
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !57
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %113 = fmul <2 x float> %109, %112, !dbg !57
  %114 = fadd <2 x float> %113, %105, !dbg !58
  %115 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !53
  %116 = insertelement <2 x i32> %115, i32 %78, i64 1, !dbg !53
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !53
  %118 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !55
  %119 = insertelement <2 x i32> %118, i32 %88, i64 1, !dbg !55
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !55
  %121 = fsub <2 x float> %120, %117, !dbg !56
  %122 = fmul <2 x float> %121, %112, !dbg !57
  %123 = fadd <2 x float> %122, %117, !dbg !58
  %124 = extractelement <2 x float> %114, i64 0, !dbg !59
  %125 = extractelement <2 x float> %114, i64 1, !dbg !60
  %126 = fsub float %124, %125, !dbg !59
  %127 = extractelement <2 x float> %123, i64 0, !dbg !59
  %128 = extractelement <2 x float> %123, i64 1, !dbg !60
  %129 = fsub float %127, %128, !dbg !59
  %130 = fmul float %126, %44, !dbg !61
  %131 = fmul float %129, %44, !dbg !61
  %132 = fadd float %125, %130, !dbg !60
  %133 = fadd float %128, %131, !dbg !60
  %134 = fadd float %54, %61, !dbg !62
  %135 = fadd float %55, %62, !dbg !62
  %136 = fadd float %134, %132, !dbg !63
  %137 = fadd float %135, %133, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %138 = bitcast float %136 to i32, !dbg !65
  %139 = bitcast float %137 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %50, i1 %19) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clrwsndfjghripqojrt3ve3jfai4e24t2awmrqh7qtlmgykifzfy.py", directory: "inductor_cache/lr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_65, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 40, scope: !7)
!34 = !DILocation(line: 40, column: 54, scope: !7)
!35 = !DILocation(line: 40, column: 49, scope: !7)
!36 = !DILocation(line: 40, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 59, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 48, column: 32, scope: !7)
!42 = !DILocation(line: 49, column: 51, scope: !7)
!43 = !DILocation(line: 49, column: 63, scope: !7)
!44 = !DILocation(line: 49, column: 58, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 68, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 70, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 52, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 70, scope: !7)
!54 = !DILocation(line: 61, column: 31, scope: !7)
!55 = !DILocation(line: 61, column: 71, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 4, scope: !7)
!65 = !DILocation(line: 71, column: 59, scope: !7)
!66 = !DILocation(line: 71, column: 4, scope: !7)
