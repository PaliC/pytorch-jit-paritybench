; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %14, 32, !dbg !12
  %17 = or disjoint i32 %14, 48, !dbg !12
  %18 = or disjoint i32 %14, 64, !dbg !12
  %19 = or disjoint i32 %14, 80, !dbg !12
  %20 = or disjoint i32 %14, 96, !dbg !12
  %21 = or disjoint i32 %14, 112, !dbg !12
  %22 = or disjoint i32 %14, 128, !dbg !12
  %23 = or disjoint i32 %14, 144, !dbg !12
  %24 = or disjoint i32 %14, 160, !dbg !12
  %25 = or disjoint i32 %14, 176, !dbg !12
  %26 = or disjoint i32 %14, 192, !dbg !12
  %27 = or disjoint i32 %14, 208, !dbg !12
  %28 = or disjoint i32 %14, 224, !dbg !12
  %29 = or disjoint i32 %14, 240, !dbg !12
  %30 = and i32 %12, 15, !dbg !12
  %31 = and i32 %12, 255, !dbg !12
  %32 = or disjoint i32 %11, %14, !dbg !13
  %33 = or disjoint i32 %11, %15, !dbg !13
  %34 = or disjoint i32 %11, %16, !dbg !13
  %35 = or disjoint i32 %11, %17, !dbg !13
  %36 = or disjoint i32 %11, %18, !dbg !13
  %37 = or disjoint i32 %11, %19, !dbg !13
  %38 = or disjoint i32 %11, %20, !dbg !13
  %39 = or disjoint i32 %11, %21, !dbg !13
  %40 = or disjoint i32 %11, %22, !dbg !13
  %41 = or disjoint i32 %11, %23, !dbg !13
  %42 = or disjoint i32 %11, %24, !dbg !13
  %43 = or disjoint i32 %11, %25, !dbg !13
  %44 = or disjoint i32 %11, %26, !dbg !13
  %45 = or disjoint i32 %11, %27, !dbg !13
  %46 = or disjoint i32 %11, %28, !dbg !13
  %47 = or disjoint i32 %11, %29, !dbg !13
  %48 = or disjoint i32 %11, %31, !dbg !13
  %49 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %50 = shl i32 %49, 4, !dbg !15
  %51 = or disjoint i32 %50, %30, !dbg !16
  %52 = icmp slt i32 %51, 16, !dbg !17
  %53 = srem i32 %48, 512, !dbg !18
  %54 = shl i32 %32, 4, !dbg !19
  %55 = shl i32 %33, 4, !dbg !19
  %56 = shl i32 %34, 4, !dbg !19
  %57 = shl i32 %35, 4, !dbg !19
  %58 = shl i32 %36, 4, !dbg !19
  %59 = shl i32 %37, 4, !dbg !19
  %60 = shl i32 %38, 4, !dbg !19
  %61 = shl i32 %39, 4, !dbg !19
  %62 = shl i32 %40, 4, !dbg !19
  %63 = shl i32 %41, 4, !dbg !19
  %64 = shl i32 %42, 4, !dbg !19
  %65 = shl i32 %43, 4, !dbg !19
  %66 = shl i32 %44, 4, !dbg !19
  %67 = shl i32 %45, 4, !dbg !19
  %68 = shl i32 %46, 4, !dbg !19
  %69 = shl i32 %47, 4, !dbg !19
  %70 = add i32 %51, %54, !dbg !20
  %71 = add i32 %51, %55, !dbg !20
  %72 = add i32 %51, %56, !dbg !20
  %73 = add i32 %51, %57, !dbg !20
  %74 = add i32 %51, %58, !dbg !20
  %75 = add i32 %51, %59, !dbg !20
  %76 = add i32 %51, %60, !dbg !20
  %77 = add i32 %51, %61, !dbg !20
  %78 = add i32 %51, %62, !dbg !20
  %79 = add i32 %51, %63, !dbg !20
  %80 = add i32 %51, %64, !dbg !20
  %81 = add i32 %51, %65, !dbg !20
  %82 = add i32 %51, %66, !dbg !20
  %83 = add i32 %51, %67, !dbg !20
  %84 = add i32 %51, %68, !dbg !20
  %85 = add i32 %51, %69, !dbg !20
  %86 = sext i32 %70 to i64, !dbg !21
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !21
  %88 = sext i32 %71 to i64, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !21
  %90 = sext i32 %72 to i64, !dbg !21
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !21
  %92 = sext i32 %73 to i64, !dbg !21
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !21
  %94 = sext i32 %74 to i64, !dbg !21
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !21
  %96 = sext i32 %75 to i64, !dbg !21
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !21
  %98 = sext i32 %76 to i64, !dbg !21
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !21
  %100 = sext i32 %77 to i64, !dbg !21
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !21
  %102 = sext i32 %78 to i64, !dbg !21
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !21
  %104 = sext i32 %79 to i64, !dbg !21
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !21
  %106 = sext i32 %80 to i64, !dbg !21
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !21
  %108 = sext i32 %81 to i64, !dbg !21
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !21
  %110 = sext i32 %82 to i64, !dbg !21
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !21
  %112 = sext i32 %83 to i64, !dbg !21
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !21
  %114 = sext i32 %84 to i64, !dbg !21
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !21
  %116 = sext i32 %85 to i64, !dbg !21
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !21
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %52) #4, !dbg !22
  %119 = bitcast i32 %118 to float, !dbg !22
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %52) #4, !dbg !22
  %121 = bitcast i32 %120 to float, !dbg !22
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %52) #4, !dbg !22
  %123 = bitcast i32 %122 to float, !dbg !22
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %52) #4, !dbg !22
  %125 = bitcast i32 %124 to float, !dbg !22
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %52) #4, !dbg !22
  %127 = bitcast i32 %126 to float, !dbg !22
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %52) #4, !dbg !22
  %129 = bitcast i32 %128 to float, !dbg !22
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %52) #4, !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %52) #4, !dbg !22
  %133 = bitcast i32 %132 to float, !dbg !22
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %52) #4, !dbg !22
  %135 = bitcast i32 %134 to float, !dbg !22
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %52) #4, !dbg !22
  %137 = bitcast i32 %136 to float, !dbg !22
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %52) #4, !dbg !22
  %139 = bitcast i32 %138 to float, !dbg !22
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %52) #4, !dbg !22
  %141 = bitcast i32 %140 to float, !dbg !22
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %52) #4, !dbg !22
  %143 = bitcast i32 %142 to float, !dbg !22
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %52) #4, !dbg !22
  %145 = bitcast i32 %144 to float, !dbg !22
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %52) #4, !dbg !22
  %147 = bitcast i32 %146 to float, !dbg !22
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %52) #4, !dbg !22
  %149 = bitcast i32 %148 to float, !dbg !22
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !23
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !23
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !23
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !23
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !23
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !23
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !23
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !23
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !23
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !23
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !23
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !23
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !23
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !23
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !23
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !23
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %52) #4, !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %52) #4, !dbg !24
  %169 = bitcast i32 %168 to float, !dbg !24
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %52) #4, !dbg !24
  %171 = bitcast i32 %170 to float, !dbg !24
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %52) #4, !dbg !24
  %173 = bitcast i32 %172 to float, !dbg !24
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %52) #4, !dbg !24
  %175 = bitcast i32 %174 to float, !dbg !24
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %52) #4, !dbg !24
  %177 = bitcast i32 %176 to float, !dbg !24
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %52) #4, !dbg !24
  %179 = bitcast i32 %178 to float, !dbg !24
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %52) #4, !dbg !24
  %181 = bitcast i32 %180 to float, !dbg !24
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %52) #4, !dbg !24
  %183 = bitcast i32 %182 to float, !dbg !24
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %52) #4, !dbg !24
  %185 = bitcast i32 %184 to float, !dbg !24
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %52) #4, !dbg !24
  %187 = bitcast i32 %186 to float, !dbg !24
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %52) #4, !dbg !24
  %189 = bitcast i32 %188 to float, !dbg !24
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %52) #4, !dbg !24
  %191 = bitcast i32 %190 to float, !dbg !24
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %52) #4, !dbg !24
  %193 = bitcast i32 %192 to float, !dbg !24
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %52) #4, !dbg !24
  %195 = bitcast i32 %194 to float, !dbg !24
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %52) #4, !dbg !24
  %197 = bitcast i32 %196 to float, !dbg !24
  %198 = sdiv i32 %48, 16, !dbg !25
  %199 = sext i32 %198 to i64, !dbg !26
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !26
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #4, !dbg !27
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !28
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #4, !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = sext i32 %53 to i64, !dbg !30
  %206 = getelementptr float, ptr addrspace(1) %4, i64 %205, !dbg !30
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #4, !dbg !31
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !32
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #4, !dbg !33
  %210 = fadd float %119, %167, !dbg !34
  %211 = fadd float %121, %169, !dbg !34
  %212 = fadd float %123, %171, !dbg !34
  %213 = fadd float %125, %173, !dbg !34
  %214 = fadd float %127, %175, !dbg !34
  %215 = fadd float %129, %177, !dbg !34
  %216 = fadd float %131, %179, !dbg !34
  %217 = fadd float %133, %181, !dbg !34
  %218 = fadd float %135, %183, !dbg !34
  %219 = fadd float %137, %185, !dbg !34
  %220 = fadd float %139, %187, !dbg !34
  %221 = fadd float %141, %189, !dbg !34
  %222 = fadd float %143, %191, !dbg !34
  %223 = fadd float %145, %193, !dbg !34
  %224 = fadd float %147, %195, !dbg !34
  %225 = fadd float %149, %197, !dbg !34
  %226 = shl i32 %12, 4, !dbg !34
  %227 = and i32 %226, 4080, !dbg !34
  %228 = lshr i32 %31, 4, !dbg !34
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !34
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %31, !dbg !34
  %231 = bitcast float %210 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !34
  %232 = or disjoint i32 %31, 256, !dbg !34
  %233 = lshr i32 %232, 4, !dbg !34
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !34
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !34
  %236 = bitcast float %211 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !34
  %237 = or disjoint i32 %31, 512, !dbg !34
  %238 = lshr i32 %237, 4, !dbg !34
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !34
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !34
  %241 = bitcast float %212 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !34
  %242 = or disjoint i32 %31, 768, !dbg !34
  %243 = lshr i32 %242, 4, !dbg !34
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !34
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !34
  %246 = bitcast float %213 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !34
  %247 = or disjoint i32 %31, 1024, !dbg !34
  %248 = lshr i32 %247, 4, !dbg !34
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !34
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !34
  %251 = bitcast float %214 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !34
  %252 = or disjoint i32 %31, 1280, !dbg !34
  %253 = lshr i32 %252, 4, !dbg !34
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !34
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !34
  %256 = bitcast float %215 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !34
  %257 = or disjoint i32 %31, 1536, !dbg !34
  %258 = lshr i32 %257, 4, !dbg !34
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !34
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !34
  %261 = bitcast float %216 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !34
  %262 = or disjoint i32 %31, 1792, !dbg !34
  %263 = lshr i32 %262, 4, !dbg !34
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !34
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !34
  %266 = bitcast float %217 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !34
  %267 = or disjoint i32 %31, 2048, !dbg !34
  %268 = lshr i32 %267, 4, !dbg !34
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !34
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !34
  %271 = bitcast float %218 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !34
  %272 = or disjoint i32 %31, 2304, !dbg !34
  %273 = lshr i32 %272, 4, !dbg !34
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !34
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !34
  %276 = bitcast float %219 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !34
  %277 = or disjoint i32 %31, 2560, !dbg !34
  %278 = lshr i32 %277, 4, !dbg !34
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !34
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !34
  %281 = bitcast float %220 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !34
  %282 = or disjoint i32 %31, 2816, !dbg !34
  %283 = lshr i32 %282, 4, !dbg !34
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !34
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !34
  %286 = bitcast float %221 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !34
  %287 = or disjoint i32 %31, 3072, !dbg !34
  %288 = lshr i32 %287, 4, !dbg !34
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !34
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !34
  %291 = bitcast float %222 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !34
  %292 = or disjoint i32 %31, 3328, !dbg !34
  %293 = lshr i32 %292, 4, !dbg !34
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !34
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !34
  %296 = bitcast float %223 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !34
  %297 = or disjoint i32 %31, 3584, !dbg !34
  %298 = lshr i32 %297, 4, !dbg !34
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !34
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !34
  %301 = bitcast float %224 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !34
  %302 = or disjoint i32 %31, 3840, !dbg !34
  %303 = lshr i32 %302, 4, !dbg !34
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !34
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !34
  %306 = bitcast float %225 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %307 = lshr exact i32 %227, 2, !dbg !34
  %308 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %307, !dbg !34
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %227, !dbg !34
  %310 = load float, ptr addrspace(3) %309, align 4, !dbg !34
  %311 = or disjoint i32 %227, 1, !dbg !34
  %312 = getelementptr float, ptr addrspace(3) %308, i32 %311, !dbg !34
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !34
  %314 = or disjoint i32 %227, 2, !dbg !34
  %315 = getelementptr float, ptr addrspace(3) %308, i32 %314, !dbg !34
  %316 = load float, ptr addrspace(3) %315, align 4, !dbg !34
  %317 = or disjoint i32 %227, 3, !dbg !34
  %318 = getelementptr float, ptr addrspace(3) %308, i32 %317, !dbg !34
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !34
  %320 = or disjoint i32 %227, 4, !dbg !34
  %321 = getelementptr float, ptr addrspace(3) %308, i32 %320, !dbg !34
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !34
  %323 = or disjoint i32 %227, 5, !dbg !34
  %324 = getelementptr float, ptr addrspace(3) %308, i32 %323, !dbg !34
  %325 = load float, ptr addrspace(3) %324, align 4, !dbg !34
  %326 = or disjoint i32 %227, 6, !dbg !34
  %327 = getelementptr float, ptr addrspace(3) %308, i32 %326, !dbg !34
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !34
  %329 = or disjoint i32 %227, 7, !dbg !34
  %330 = getelementptr float, ptr addrspace(3) %308, i32 %329, !dbg !34
  %331 = load float, ptr addrspace(3) %330, align 4, !dbg !34
  %332 = or disjoint i32 %227, 8, !dbg !34
  %333 = getelementptr float, ptr addrspace(3) %308, i32 %332, !dbg !34
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !34
  %335 = or disjoint i32 %227, 9, !dbg !34
  %336 = getelementptr float, ptr addrspace(3) %308, i32 %335, !dbg !34
  %337 = load float, ptr addrspace(3) %336, align 4, !dbg !34
  %338 = or disjoint i32 %227, 10, !dbg !34
  %339 = getelementptr float, ptr addrspace(3) %308, i32 %338, !dbg !34
  %340 = load float, ptr addrspace(3) %339, align 4, !dbg !34
  %341 = or disjoint i32 %227, 11, !dbg !34
  %342 = getelementptr float, ptr addrspace(3) %308, i32 %341, !dbg !34
  %343 = load float, ptr addrspace(3) %342, align 4, !dbg !34
  %344 = or disjoint i32 %227, 12, !dbg !34
  %345 = getelementptr float, ptr addrspace(3) %308, i32 %344, !dbg !34
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !34
  %347 = or disjoint i32 %227, 13, !dbg !34
  %348 = getelementptr float, ptr addrspace(3) %308, i32 %347, !dbg !34
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !34
  %350 = or disjoint i32 %227, 14, !dbg !34
  %351 = getelementptr float, ptr addrspace(3) %308, i32 %350, !dbg !34
  %352 = load float, ptr addrspace(3) %351, align 4, !dbg !34
  %353 = or disjoint i32 %227, 15, !dbg !34
  %354 = getelementptr float, ptr addrspace(3) %308, i32 %353, !dbg !34
  %355 = load float, ptr addrspace(3) %354, align 4, !dbg !34
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float 2.560000e+02) #4, !dbg !35
  %357 = fadd float %356, 0x3EE4F8B580000000, !dbg !36
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %358, 0, !dbg !37
  br i1 %.not.i, label %361, label %359, !dbg !37

359:                                              ; preds = %9
  %360 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

361:                                              ; preds = %9
  %362 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %359, %361
  %.0.i = phi float [ %360, %359 ], [ %362, %361 ], !dbg !37
  %363 = bitcast i32 %201 to float, !dbg !27
  %364 = fsub float %355, %363, !dbg !38
  %365 = fsub float %352, %363, !dbg !38
  %366 = fsub float %349, %363, !dbg !38
  %367 = fsub float %346, %363, !dbg !38
  %368 = fsub float %343, %363, !dbg !38
  %369 = fsub float %340, %363, !dbg !38
  %370 = fsub float %337, %363, !dbg !38
  %371 = fsub float %334, %363, !dbg !38
  %372 = fsub float %331, %363, !dbg !38
  %373 = fsub float %328, %363, !dbg !38
  %374 = fsub float %325, %363, !dbg !38
  %375 = fsub float %322, %363, !dbg !38
  %376 = fsub float %319, %363, !dbg !38
  %377 = fsub float %316, %363, !dbg !38
  %378 = fsub float %313, %363, !dbg !38
  %379 = fsub float %310, %363, !dbg !38
  %380 = bitcast i32 %209 to float, !dbg !33
  %381 = bitcast i32 %207 to float, !dbg !31
  %.lobit4 = lshr i32 %12, 6, !dbg !39
  %382 = and i32 %.lobit4, 3, !dbg !39
  %383 = or disjoint i32 %382, %50, !dbg !16
  %384 = or disjoint i32 %383, 12, !dbg !16
  %385 = icmp slt i32 %384, 16, !dbg !17
  %386 = or disjoint i32 %383, 8, !dbg !16
  %387 = icmp slt i32 %386, 16, !dbg !17
  %388 = or disjoint i32 %383, 4, !dbg !16
  %389 = icmp slt i32 %388, 16, !dbg !17
  %390 = icmp slt i32 %383, 16, !dbg !17
  %391 = shl i32 %12, 2, !dbg !12
  %392 = and i32 %391, 252, !dbg !12
  %393 = or disjoint i32 %11, %392, !dbg !13
  %394 = fmul float %379, %.0.i, !dbg !40
  %395 = fmul float %378, %.0.i, !dbg !40
  %396 = fmul float %377, %.0.i, !dbg !40
  %397 = fmul float %376, %.0.i, !dbg !40
  %398 = fmul float %375, %.0.i, !dbg !40
  %399 = fmul float %374, %.0.i, !dbg !40
  %400 = fmul float %373, %.0.i, !dbg !40
  %401 = fmul float %372, %.0.i, !dbg !40
  %402 = fmul float %371, %.0.i, !dbg !40
  %403 = fmul float %370, %.0.i, !dbg !40
  %404 = fmul float %369, %.0.i, !dbg !40
  %405 = fmul float %368, %.0.i, !dbg !40
  %406 = fmul float %367, %.0.i, !dbg !40
  %407 = fmul float %366, %.0.i, !dbg !40
  %408 = fmul float %365, %.0.i, !dbg !40
  %409 = fmul float %364, %.0.i, !dbg !40
  %410 = fmul float %394, %381, !dbg !41
  %411 = fmul float %395, %381, !dbg !41
  %412 = fmul float %396, %381, !dbg !41
  %413 = fmul float %397, %381, !dbg !41
  %414 = fmul float %398, %381, !dbg !41
  %415 = fmul float %399, %381, !dbg !41
  %416 = fmul float %400, %381, !dbg !41
  %417 = fmul float %401, %381, !dbg !41
  %418 = fmul float %402, %381, !dbg !41
  %419 = fmul float %403, %381, !dbg !41
  %420 = fmul float %404, %381, !dbg !41
  %421 = fmul float %405, %381, !dbg !41
  %422 = fmul float %406, %381, !dbg !41
  %423 = fmul float %407, %381, !dbg !41
  %424 = fmul float %408, %381, !dbg !41
  %425 = fmul float %409, %381, !dbg !41
  %426 = fadd float %410, %380, !dbg !42
  %427 = fadd float %411, %380, !dbg !42
  %428 = fadd float %412, %380, !dbg !42
  %429 = fadd float %413, %380, !dbg !42
  %430 = fadd float %414, %380, !dbg !42
  %431 = fadd float %415, %380, !dbg !42
  %432 = fadd float %416, %380, !dbg !42
  %433 = fadd float %417, %380, !dbg !42
  %434 = fadd float %418, %380, !dbg !42
  %435 = fadd float %419, %380, !dbg !42
  %436 = fadd float %420, %380, !dbg !42
  %437 = fadd float %421, %380, !dbg !42
  %438 = fadd float %422, %380, !dbg !42
  %439 = fadd float %423, %380, !dbg !42
  %440 = fadd float %424, %380, !dbg !42
  %441 = fadd float %425, %380, !dbg !42
  %442 = shl i32 %383, 11, !dbg !43
  %443 = shl i32 %388, 11, !dbg !43
  %444 = shl i32 %386, 11, !dbg !43
  %445 = shl i32 %384, 11, !dbg !43
  %446 = add i32 %442, %393, !dbg !44
  %447 = add i32 %443, %393, !dbg !44
  %448 = add i32 %444, %393, !dbg !44
  %449 = add i32 %445, %393, !dbg !44
  %450 = sext i32 %446 to i64, !dbg !45
  %451 = getelementptr float, ptr addrspace(1) %6, i64 %450, !dbg !45
  %452 = sext i32 %447 to i64, !dbg !45
  %453 = getelementptr float, ptr addrspace(1) %6, i64 %452, !dbg !45
  %454 = sext i32 %448 to i64, !dbg !45
  %455 = getelementptr float, ptr addrspace(1) %6, i64 %454, !dbg !45
  %456 = sext i32 %449 to i64, !dbg !45
  %457 = getelementptr float, ptr addrspace(1) %6, i64 %456, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %458 = and i32 %391, 1020, !dbg !46
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !46
  %460 = bitcast float %426 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %460, i1 true) #4, !dbg !46
  %461 = getelementptr inbounds i8, ptr addrspace(3) %459, i32 1040, !dbg !46
  %462 = bitcast float %427 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #4, !dbg !46
  %463 = getelementptr inbounds i8, ptr addrspace(3) %459, i32 2080, !dbg !46
  %464 = bitcast float %428 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #4, !dbg !46
  %465 = getelementptr inbounds i8, ptr addrspace(3) %459, i32 3120, !dbg !46
  %466 = bitcast float %429 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %467 = lshr i32 %391, 6, !dbg !46
  %468 = and i32 %467, 12, !dbg !46
  %469 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %468, !dbg !46
  %470 = getelementptr inbounds float, ptr addrspace(3) %469, i32 %458, !dbg !46
  %471 = load <4 x i32>, ptr addrspace(3) %470, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %472 = bitcast float %430 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %472, i1 true) #4, !dbg !46
  %473 = bitcast float %431 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %473, i1 true) #4, !dbg !46
  %474 = bitcast float %432 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %474, i1 true) #4, !dbg !46
  %475 = bitcast float %433 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %475, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %476 = load <4 x i32>, ptr addrspace(3) %470, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %477 = bitcast float %434 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %477, i1 true) #4, !dbg !46
  %478 = bitcast float %435 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %478, i1 true) #4, !dbg !46
  %479 = bitcast float %436 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %479, i1 true) #4, !dbg !46
  %480 = bitcast float %437 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %480, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %481 = load <4 x i32>, ptr addrspace(3) %470, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %482 = bitcast float %438 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %482, i1 true) #4, !dbg !46
  %483 = bitcast float %439 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %483, i1 true) #4, !dbg !46
  %484 = bitcast float %440 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %484, i1 true) #4, !dbg !46
  %485 = bitcast float %441 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %485, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %486 = load <4 x i32>, ptr addrspace(3) %470, align 16, !dbg !46
  %.extract = extractelement <4 x i32> %471, i64 0, !dbg !46
  %.extract20 = extractelement <4 x i32> %471, i64 1, !dbg !46
  %.extract21 = extractelement <4 x i32> %471, i64 2, !dbg !46
  %.extract22 = extractelement <4 x i32> %471, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %451, i1 %390) #4, !dbg !46
  %.extract23 = extractelement <4 x i32> %476, i64 0, !dbg !46
  %.extract24 = extractelement <4 x i32> %476, i64 1, !dbg !46
  %.extract25 = extractelement <4 x i32> %476, i64 2, !dbg !46
  %.extract26 = extractelement <4 x i32> %476, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %453, i1 %389) #4, !dbg !46
  %.extract27 = extractelement <4 x i32> %481, i64 0, !dbg !46
  %.extract28 = extractelement <4 x i32> %481, i64 1, !dbg !46
  %.extract29 = extractelement <4 x i32> %481, i64 2, !dbg !46
  %.extract30 = extractelement <4 x i32> %481, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %455, i1 %387) #4, !dbg !46
  %.extract31 = extractelement <4 x i32> %486, i64 0, !dbg !46
  %.extract32 = extractelement <4 x i32> %486, i64 1, !dbg !46
  %.extract33 = extractelement <4 x i32> %486, i64 2, !dbg !46
  %.extract34 = extractelement <4 x i32> %486, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %457, i1 %385) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmdkxa557rreg7js7t62j4e622sxzgh6exkvh7az5glbbx3sgxa7.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_clone_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_41, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_41", linkageName: "triton_poi_fused_clone_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 60, scope: !7)
!20 = !DILocation(line: 31, column: 57, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 65, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 65, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 41, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 28, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 26, column: 44, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 35, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
