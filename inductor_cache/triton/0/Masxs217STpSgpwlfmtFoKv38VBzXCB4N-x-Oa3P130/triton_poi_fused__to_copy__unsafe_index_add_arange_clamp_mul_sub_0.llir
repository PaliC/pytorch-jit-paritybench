; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = srem i32 %12, 4, !dbg !16
  %14 = mul i32 %12, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = srem i32 %10, 4, !dbg !17
  %16 = sdiv i32 %9, 16, !dbg !18
  %.frozen1 = freeze i32 %9, !dbg !19
  %17 = sdiv i32 %.frozen1, 64, !dbg !19
  %18 = mul i32 %17, 64, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %18, !dbg !20
  %19 = sitofp i32 %13 to float, !dbg !21
  %20 = fadd float %19, 5.000000e-01, !dbg !22
  %21 = fadd float %20, -5.000000e-01, !dbg !23
  %22 = fcmp ogt float %21, 0.000000e+00, !dbg !24
  %23 = select i1 %22, float %21, float 0.000000e+00, !dbg !28
  %24 = fptosi float %23 to i32, !dbg !29
  %25 = tail call i32 @llvm.smin.i32(i32 %24, i32 2), !dbg !30
  %narrow = add nsw i32 %25, 1, !dbg !30
  %26 = sext i32 %narrow to i64, !dbg !30
  %27 = sitofp i32 %.decomposed to float, !dbg !32
  %28 = sitofp i32 %15 to float, !dbg !32
  %29 = fadd float %27, 5.000000e-01, !dbg !33
  %30 = fadd float %28, 5.000000e-01, !dbg !33
  %31 = fadd float %29, -5.000000e-01, !dbg !34
  %32 = fadd float %30, -5.000000e-01, !dbg !34
  %33 = fcmp ogt float %31, 0.000000e+00, !dbg !35
  %34 = fcmp ogt float %32, 0.000000e+00, !dbg !35
  %35 = select i1 %33, float %31, float 0.000000e+00, !dbg !37
  %36 = select i1 %34, float %32, float 0.000000e+00, !dbg !37
  %37 = fptosi float %35 to i32, !dbg !38
  %38 = fptosi float %36 to i32, !dbg !38
  %39 = sext i32 %37 to i64, !dbg !39
  %40 = sext i32 %38 to i64, !dbg !39
  %41 = tail call i64 @llvm.smin.i64(i64 %39, i64 2), !dbg !40
  %42 = tail call i64 @llvm.smin.i64(i64 %40, i64 2), !dbg !40
  %43 = shl nsw i64 %26, 2, !dbg !42
  %44 = shl nsw i32 %16, 4, !dbg !43
  %45 = sext i32 %44 to i64, !dbg !44
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !45
  %47 = getelementptr i8, ptr addrspace(1) %46, i64 4, !dbg !45
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %43, !dbg !45
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %45, !dbg !45
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !45
  %51 = getelementptr i8, ptr addrspace(1) %50, i64 4, !dbg !45
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %43, !dbg !45
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %45, !dbg !45
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #2, !dbg !46
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %11) #2, !dbg !46
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !47
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %39, !dbg !47
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %45, !dbg !47
  %59 = getelementptr float, ptr addrspace(1) %56, i64 %40, !dbg !47
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %45, !dbg !47
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %11) #2, !dbg !48
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #2, !dbg !48
  %63 = sitofp i32 %37 to float, !dbg !49
  %64 = sitofp i32 %38 to float, !dbg !49
  %65 = fsub float %35, %63, !dbg !50
  %66 = fsub float %36, %64, !dbg !50
  %67 = fcmp ogt float %65, 0.000000e+00, !dbg !51
  %68 = fcmp ogt float %66, 0.000000e+00, !dbg !51
  %69 = select i1 %67, float %65, float 0.000000e+00, !dbg !53
  %70 = select i1 %68, float %66, float 0.000000e+00, !dbg !53
  %71 = fcmp olt float %69, 1.000000e+00, !dbg !54
  %72 = fcmp olt float %70, 1.000000e+00, !dbg !54
  %73 = select i1 %71, float %69, float 1.000000e+00, !dbg !56
  %74 = select i1 %72, float %70, float 1.000000e+00, !dbg !56
  %75 = shl i32 %24, 2, !dbg !57
  %76 = add i32 %75, %44, !dbg !58
  %77 = add i32 %76, %37, !dbg !59
  %78 = add i32 %76, %38, !dbg !59
  %79 = sext i32 %77 to i64, !dbg !60
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !60
  %81 = sext i32 %78 to i64, !dbg !60
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !60
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #2, !dbg !61
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %11) #2, !dbg !61
  %85 = sext i32 %75 to i64, !dbg !62
  %86 = getelementptr float, ptr addrspace(1) %47, i64 %85, !dbg !63
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %45, !dbg !63
  %88 = getelementptr float, ptr addrspace(1) %51, i64 %85, !dbg !63
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %45, !dbg !63
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #2, !dbg !64
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %11) #2, !dbg !64
  %92 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !48
  %93 = insertelement <2 x i32> %92, i32 %83, i64 1, !dbg !48
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !48
  %95 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !46
  %96 = insertelement <2 x i32> %95, i32 %90, i64 1, !dbg !46
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !46
  %98 = fsub <2 x float> %97, %94, !dbg !65
  %99 = insertelement <2 x float> poison, float %73, i64 0, !dbg !66
  %100 = shufflevector <2 x float> %99, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %101 = fmul <2 x float> %98, %100, !dbg !66
  %102 = fadd <2 x float> %101, %94, !dbg !67
  %103 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !48
  %104 = insertelement <2 x i32> %103, i32 %84, i64 1, !dbg !48
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !48
  %106 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !46
  %107 = insertelement <2 x i32> %106, i32 %91, i64 1, !dbg !46
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !46
  %109 = fsub <2 x float> %108, %105, !dbg !65
  %110 = insertelement <2 x float> poison, float %74, i64 0, !dbg !66
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %112 = fmul <2 x float> %111, %109, !dbg !66
  %113 = fadd <2 x float> %112, %105, !dbg !67
  %114 = extractelement <2 x float> %102, i64 0, !dbg !68
  %115 = extractelement <2 x float> %102, i64 1, !dbg !69
  %116 = fsub float %114, %115, !dbg !68
  %117 = extractelement <2 x float> %113, i64 0, !dbg !68
  %118 = extractelement <2 x float> %113, i64 1, !dbg !69
  %119 = fsub float %117, %118, !dbg !68
  %120 = sitofp i32 %24 to float, !dbg !70
  %121 = fsub float %23, %120, !dbg !71
  %122 = fcmp ogt float %121, 0.000000e+00, !dbg !72
  %123 = select i1 %122, float %121, float 0.000000e+00, !dbg !74
  %124 = fcmp olt float %123, 1.000000e+00, !dbg !75
  %125 = select i1 %124, float %123, float 1.000000e+00, !dbg !77
  %126 = fmul float %125, %116, !dbg !78
  %127 = fmul float %119, %125, !dbg !78
  %128 = fadd float %115, %126, !dbg !69
  %129 = fadd float %118, %127, !dbg !69
  %130 = shl i32 %17, 7, !dbg !79
  %131 = add i32 %130, %.decomposed2, !dbg !80
  %132 = sext i32 %131 to i64, !dbg !81
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !81
  %134 = bitcast float %128 to i32, !dbg !82
  %135 = bitcast float %129 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 %11) #2, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd3fmq7ewqfpoq7djekczz3xis67t52xt5qilwoadaiyqhqdjq4w.py", directory: "inductor_cache/d3")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !31)
!31 = !DILocation(line: 43, column: 42, scope: !7)
!32 = !DILocation(line: 45, column: 21, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !36)
!36 = !DILocation(line: 49, column: 42, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 21, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !41)
!41 = !DILocation(line: 52, column: 42, scope: !7)
!42 = !DILocation(line: 53, column: 41, scope: !7)
!43 = !DILocation(line: 53, column: 52, scope: !7)
!44 = !DILocation(line: 53, column: 49, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 57, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 57, scope: !7)
!49 = !DILocation(line: 56, column: 21, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !52)
!52 = !DILocation(line: 58, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !52)
!54 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !55)
!55 = !DILocation(line: 59, column: 42, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !55)
!57 = !DILocation(line: 62, column: 41, scope: !7)
!58 = !DILocation(line: 62, column: 39, scope: !7)
!59 = !DILocation(line: 62, column: 48, scope: !7)
!60 = !DILocation(line: 62, column: 31, scope: !7)
!61 = !DILocation(line: 62, column: 56, scope: !7)
!62 = !DILocation(line: 63, column: 39, scope: !7)
!63 = !DILocation(line: 63, column: 31, scope: !7)
!64 = !DILocation(line: 63, column: 56, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 60, column: 20, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 69, column: 19, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !73)
!73 = !DILocation(line: 70, column: 42, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !73)
!75 = !DILocation(line: 110, column: 15, scope: !25, inlinedAt: !76)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 113, column: 29, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 72, column: 20, scope: !7)
!79 = !DILocation(line: 74, column: 34, scope: !7)
!80 = !DILocation(line: 74, column: 30, scope: !7)
!81 = !DILocation(line: 74, column: 25, scope: !7)
!82 = !DILocation(line: 74, column: 46, scope: !7)
!83 = !DILocation(line: 74, column: 4, scope: !7)
