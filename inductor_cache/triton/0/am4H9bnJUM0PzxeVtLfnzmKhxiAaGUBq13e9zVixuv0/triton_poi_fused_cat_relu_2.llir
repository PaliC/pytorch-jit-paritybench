; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 16, !dbg !15
  %20 = srem i32 %19, 4, !dbg !16
  %21 = mul i32 %19, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = sdiv i32 %17, 64, !dbg !18
  %23 = icmp slt i32 %20, 2, !dbg !19
  %.lhs.trunc = trunc nsw i32 %20 to i8, !dbg !20
  %24 = srem i8 %.lhs.trunc, 2, !dbg !20
  %.sext = sext i8 %24 to i32, !dbg !20
  %25 = shl nsw i32 %.sext, 4, !dbg !21
  %26 = add nsw i32 %25, %.decomposed, !dbg !22
  %27 = shl nsw i32 %22, 1, !dbg !23
  %28 = add nsw i32 %27, %20, !dbg !24
  %29 = sdiv i32 %28, 2, !dbg !25
  %30 = srem i32 %29, 4, !dbg !26
  %31 = shl nsw i32 %30, 6, !dbg !27
  %32 = add nsw i32 %26, %31, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = and i1 %18, %23, !dbg !30
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %37 = sext i32 %28 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !34
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %43 = bitcast i32 %42 to float, !dbg !35
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %45 = bitcast i32 %44 to float, !dbg !35
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 1.600000e+01) #3, !dbg !36
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #3, !dbg !36
  %48 = fadd float %46, 0x3EE4F8B580000000, !dbg !37
  %49 = fadd float %47, 0x3EE4F8B580000000, !dbg !37
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %50, 0, !dbg !38
  br i1 %.not.i, label %53, label %51, !dbg !38

51:                                               ; preds = %11
  %52 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %48), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

53:                                               ; preds = %11
  %54 = tail call float @llvm.nvvm.rsqrt.approx.f(float %48), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %51, %53
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], !dbg !38
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %55, 0, !dbg !38
  br i1 %.not.i1, label %58, label %56, !dbg !38

56:                                               ; preds = %__nv_rsqrtf.exit
  %57 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %49), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

58:                                               ; preds = %__nv_rsqrtf.exit
  %59 = tail call float @llvm.nvvm.rsqrt.approx.f(float %49), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %56, %58
  %.0.i2 = phi float [ %57, %56 ], [ %59, %58 ], !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !39
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %63 = sext i8 %24 to i64, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !41
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %35, i32 0, i1 %35) #3, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %35, i32 0, i1 %35) #3, !dbg !42
  %67 = icmp sgt i32 %20, 1, !dbg !43
  %68 = add nsw i32 %.decomposed, 32, !dbg !44
  %69 = add nsw i32 %20, -2, !dbg !45
  %70 = shl nsw i32 %69, 4, !dbg !46
  %71 = shl nsw i32 %22, 6, !dbg !47
  %72 = add nsw i32 %68, %71, !dbg !48
  %73 = add i32 %72, %70, !dbg !49
  %74 = sext i32 %73 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !50
  %76 = and i1 %18, %67, !dbg !51
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !52
  %78 = sext i32 %69 to i64, !dbg !53
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !53
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %76, i32 0, i1 %76) #3, !dbg !54
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %76, i32 0, i1 %76) #3, !dbg !54
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !55
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %76, i32 0, i1 %76) #3, !dbg !56
  %84 = bitcast i32 %83 to float, !dbg !56
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %76, i32 0, i1 %76) #3, !dbg !56
  %86 = bitcast i32 %85 to float, !dbg !56
  %87 = fadd float %84, 0x3EE4F8B580000000, !dbg !57
  %88 = fadd float %86, 0x3EE4F8B580000000, !dbg !57
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i4 = icmp eq i32 %89, 0, !dbg !58
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %90, 0, !dbg !58
  br i1 %.not.i4, label %96, label %91, !dbg !58

91:                                               ; preds = %__nv_rsqrtf.exit3
  br i1 %.not1.i, label %94, label %92, !dbg !58

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

96:                                               ; preds = %__nv_rsqrtf.exit3
  br i1 %.not1.i, label %99, label %97, !dbg !58

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i5 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !58
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i6 = icmp eq i32 %101, 0, !dbg !58
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !58
  br i1 %.not.i6, label %108, label %103, !dbg !58

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %106, label %104, !dbg !58

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %111, label %109, !dbg !58

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !58
  %113 = extractvalue { i32, i32 } %77, 1, !dbg !52
  %114 = bitcast i32 %113 to float, !dbg !52
  %115 = bitcast i32 %81 to float, !dbg !54
  %116 = fsub float %114, %115, !dbg !59
  %117 = extractvalue { i32, i32 } %77, 0, !dbg !52
  %118 = bitcast i32 %117 to float, !dbg !52
  %119 = bitcast i32 %80 to float, !dbg !54
  %120 = fsub float %118, %119, !dbg !59
  %121 = extractvalue { i32, i32 } %36, 1, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = bitcast i32 %40 to float, !dbg !33
  %124 = fsub float %122, %123, !dbg !60
  %125 = fmul float %124, %.0.i2, !dbg !61
  %126 = bitcast i32 %62 to float, !dbg !40
  %127 = fmul float %125, %126, !dbg !62
  %128 = bitcast i32 %66 to float, !dbg !42
  %129 = fadd float %127, %128, !dbg !63
  %130 = extractvalue { i32, i32 } %36, 0, !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = bitcast i32 %39 to float, !dbg !33
  %133 = fsub float %131, %132, !dbg !60
  %134 = fmul float %133, %.0.i, !dbg !61
  %135 = bitcast i32 %61 to float, !dbg !40
  %136 = fmul float %134, %135, !dbg !62
  %137 = bitcast i32 %65 to float, !dbg !42
  %138 = fadd float %136, %137, !dbg !63
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #3, !dbg !64
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !64
  %141 = fmul float %120, %139, !dbg !65
  %142 = fmul float %116, %140, !dbg !65
  %143 = getelementptr float, ptr addrspace(1) %8, i64 %78, !dbg !66
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %76, i32 0, i1 %76) #3, !dbg !67
  %145 = bitcast i32 %144 to float, !dbg !67
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %76, i32 0, i1 %76) #3, !dbg !67
  %147 = bitcast i32 %146 to float, !dbg !67
  %148 = fmul float %141, %145, !dbg !68
  %149 = fmul float %142, %147, !dbg !68
  %150 = getelementptr float, ptr addrspace(1) %9, i64 %78, !dbg !69
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %76, i32 0, i1 %76) #3, !dbg !70
  %152 = bitcast i32 %151 to float, !dbg !70
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %76, i32 0, i1 %76) #3, !dbg !70
  %154 = bitcast i32 %153 to float, !dbg !70
  %155 = fadd float %148, %152, !dbg !71
  %156 = fadd float %149, %154, !dbg !71
  %157 = select i1 %23, float %138, float %155, !dbg !72
  %158 = select i1 %23, float %129, float %156, !dbg !72
  %159 = fcmp olt float %157, 0.000000e+00, !dbg !73
  %160 = fcmp olt float %158, 0.000000e+00, !dbg !73
  %161 = select i1 %159, float 0.000000e+00, float %157, !dbg !77
  %162 = select i1 %160, float 0.000000e+00, float %158, !dbg !77
  %163 = sext i32 %17 to i64, !dbg !78
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !78
  %165 = bitcast float %161 to i32, !dbg !79
  %166 = bitcast float %162 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 %18) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbjs53lq3hnj6l4ywzie36l6fjofb7r4vjnhidgzb7psmwycg4f.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused_cat_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_2", linkageName: "triton_poi_fused_cat_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 40, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 62, scope: !7)
!24 = !DILocation(line: 33, column: 68, scope: !7)
!25 = !DILocation(line: 33, column: 76, scope: !7)
!26 = !DILocation(line: 33, column: 81, scope: !7)
!27 = !DILocation(line: 33, column: 58, scope: !7)
!28 = !DILocation(line: 33, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 94, scope: !7)
!31 = !DILocation(line: 33, column: 87, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 44, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 44, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 41, column: 28, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 32, scope: !7)
!42 = !DILocation(line: 45, column: 44, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 36, scope: !7)
!45 = !DILocation(line: 52, column: 52, scope: !7)
!46 = !DILocation(line: 52, column: 45, scope: !7)
!47 = !DILocation(line: 52, column: 61, scope: !7)
!48 = !DILocation(line: 52, column: 41, scope: !7)
!49 = !DILocation(line: 52, column: 58, scope: !7)
!50 = !DILocation(line: 52, column: 31, scope: !7)
!51 = !DILocation(line: 52, column: 74, scope: !7)
!52 = !DILocation(line: 52, column: 66, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 43, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 43, scope: !7)
!57 = !DILocation(line: 57, column: 20, scope: !7)
!58 = !DILocation(line: 58, column: 27, scope: !7)
!59 = !DILocation(line: 54, column: 20, scope: !7)
!60 = !DILocation(line: 35, column: 18, scope: !7)
!61 = !DILocation(line: 42, column: 19, scope: !7)
!62 = !DILocation(line: 44, column: 20, scope: !7)
!63 = !DILocation(line: 46, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 64, column: 31, scope: !7)
!67 = !DILocation(line: 64, column: 43, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 66, column: 31, scope: !7)
!70 = !DILocation(line: 66, column: 43, scope: !7)
!71 = !DILocation(line: 67, column: 20, scope: !7)
!72 = !DILocation(line: 0, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 72, column: 42, scope: !7)
!77 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 73, column: 28, scope: !7)
!79 = !DILocation(line: 73, column: 40, scope: !7)
!80 = !DILocation(line: 73, column: 4, scope: !7)
