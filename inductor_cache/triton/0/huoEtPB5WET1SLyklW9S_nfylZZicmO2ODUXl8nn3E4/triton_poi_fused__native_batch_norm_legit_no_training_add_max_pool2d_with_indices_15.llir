; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = srem i32 %20, 64, !dbg !14
  %22 = sext i32 %20 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !30
  %52 = bitcast i32 %48 to float, !dbg !30
  %53 = bitcast i32 %49 to float, !dbg !30
  %54 = bitcast i32 %50 to float, !dbg !30
  %55 = bitcast i32 %51 to float, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !31
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !33
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !34
  %60 = fadd float %34, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %35, 0x3EE4F8B580000000, !dbg !35
  %62 = fadd float %36, 0x3EE4F8B580000000, !dbg !35
  %63 = fadd float %37, 0x3EE4F8B580000000, !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %64, 0, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %65, 0, !dbg !36
  br i1 %.not.i, label %71, label %66, !dbg !36

66:                                               ; preds = %14
  br i1 %.not1.i, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

71:                                               ; preds = %14
  br i1 %.not1.i, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i1, label %83, label %78, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %88, 0, !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !36
  br i1 %.not.i6, label %95, label %90, !dbg !36

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %100, 0, !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !36
  br i1 %.not.i11, label %107, label %102, !dbg !36

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !36

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !36
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %116 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %117 = fadd float %53, 0x3EE4F8B580000000, !dbg !38
  %118 = fadd float %54, 0x3EE4F8B580000000, !dbg !38
  %119 = fadd float %55, 0x3EE4F8B580000000, !dbg !38
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %120, 0, !dbg !39
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %121, 0, !dbg !39
  br i1 %.not.i16, label %127, label %122, !dbg !39

122:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %125, label %123, !dbg !39

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

127:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %130, label %128, !dbg !39

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %123, %125, %128, %130
  %.0.i18 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !39
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %132, 0, !dbg !39
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %133, 0, !dbg !39
  br i1 %.not.i21, label %139, label %134, !dbg !39

134:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %137, label %135, !dbg !39

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

139:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %142, label %140, !dbg !39

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %135, %137, %140, %142
  %.0.i23 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !39
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %144, 0, !dbg !39
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %145, 0, !dbg !39
  br i1 %.not.i26, label %151, label %146, !dbg !39

146:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %149, label %147, !dbg !39

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

151:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %154, label %152, !dbg !39

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %147, %149, %152, %154
  %.0.i28 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !39
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %156, 0, !dbg !39
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %157, 0, !dbg !39
  br i1 %.not.i31, label %163, label %158, !dbg !39

158:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %161, label %159, !dbg !39

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

163:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %166, label %164, !dbg !39

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %159, %161, %164, %166
  %.0.i33 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !39
  %168 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %169 = bitcast i32 %168 to float, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %171 = bitcast i32 %170 to float, !dbg !18
  %172 = fsub float %169, %171, !dbg !40
  %173 = fmul float %172, %115, !dbg !41
  %174 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %175 = bitcast i32 %174 to float, !dbg !22
  %176 = fmul float %173, %175, !dbg !42
  %177 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %178 = bitcast i32 %177 to float, !dbg !24
  %179 = fadd float %176, %178, !dbg !43
  %180 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %181 = bitcast i32 %180 to float, !dbg !26
  %182 = fadd float %179, %181, !dbg !44
  %183 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %184 = bitcast i32 %183 to float, !dbg !28
  %185 = fsub float %182, %184, !dbg !45
  %186 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %187 = bitcast i32 %186 to float, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %189 = bitcast i32 %188 to float, !dbg !18
  %190 = fsub float %187, %189, !dbg !40
  %191 = fmul float %190, %114, !dbg !41
  %192 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %193 = bitcast i32 %192 to float, !dbg !22
  %194 = fmul float %191, %193, !dbg !42
  %195 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %196 = bitcast i32 %195 to float, !dbg !24
  %197 = fadd float %194, %196, !dbg !43
  %198 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %199 = bitcast i32 %198 to float, !dbg !26
  %200 = fadd float %197, %199, !dbg !44
  %201 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %202 = bitcast i32 %201 to float, !dbg !28
  %203 = fsub float %200, %202, !dbg !45
  %204 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %205 = bitcast i32 %204 to float, !dbg !16
  %206 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %207 = bitcast i32 %206 to float, !dbg !18
  %208 = fsub float %205, %207, !dbg !40
  %209 = fmul float %208, %113, !dbg !41
  %210 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %211 = bitcast i32 %210 to float, !dbg !22
  %212 = fmul float %209, %211, !dbg !42
  %213 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %214 = bitcast i32 %213 to float, !dbg !24
  %215 = fadd float %212, %214, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %217 = bitcast i32 %216 to float, !dbg !26
  %218 = fadd float %215, %217, !dbg !44
  %219 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %220 = bitcast i32 %219 to float, !dbg !28
  %221 = fsub float %218, %220, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %223 = bitcast i32 %222 to float, !dbg !16
  %224 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %225 = bitcast i32 %224 to float, !dbg !18
  %226 = fsub float %223, %225, !dbg !40
  %227 = fmul float %226, %112, !dbg !41
  %228 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %229 = bitcast i32 %228 to float, !dbg !22
  %230 = fmul float %227, %229, !dbg !42
  %231 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %232 = bitcast i32 %231 to float, !dbg !24
  %233 = fadd float %230, %232, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %235 = bitcast i32 %234 to float, !dbg !26
  %236 = fadd float %233, %235, !dbg !44
  %237 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %238 = bitcast i32 %237 to float, !dbg !28
  %239 = fsub float %236, %238, !dbg !45
  %240 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !34
  %241 = bitcast i32 %240 to float, !dbg !34
  %242 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !34
  %243 = bitcast i32 %242 to float, !dbg !34
  %244 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !34
  %245 = bitcast i32 %244 to float, !dbg !34
  %246 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !34
  %247 = bitcast i32 %246 to float, !dbg !34
  %248 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !32
  %249 = bitcast i32 %248 to float, !dbg !32
  %250 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !32
  %251 = bitcast i32 %250 to float, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !32
  %253 = bitcast i32 %252 to float, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !46
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !46
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !46
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !46
  %260 = fmul float %239, %256, !dbg !47
  %261 = fmul float %221, %257, !dbg !47
  %262 = fmul float %203, %258, !dbg !47
  %263 = fmul float %185, %259, !dbg !47
  %264 = fmul float %260, %255, !dbg !48
  %265 = fmul float %261, %253, !dbg !48
  %266 = fmul float %262, %251, !dbg !48
  %267 = fmul float %263, %249, !dbg !48
  %268 = fadd float %264, %247, !dbg !49
  %269 = fadd float %265, %245, !dbg !49
  %270 = fadd float %266, %243, !dbg !49
  %271 = fadd float %267, %241, !dbg !49
  %272 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !50
  %273 = bitcast float %236 to i32, !dbg !51
  %274 = bitcast float %218 to i32, !dbg !51
  %275 = bitcast float %200 to i32, !dbg !51
  %276 = bitcast float %182 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %273, i32 %274, i32 %275, i32 %276, ptr addrspace(1) %272, i1 true) #3, !dbg !51
  %277 = getelementptr i8, ptr addrspace(1) %11, i64 %22, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 0, ptr addrspace(1) %277, i1 true) #3, !dbg !53
  %278 = getelementptr float, ptr addrspace(1) %12, i64 %22, !dbg !54
  %279 = bitcast float %268 to i32, !dbg !55
  %280 = bitcast float %269 to i32, !dbg !55
  %281 = bitcast float %270 to i32, !dbg !55
  %282 = bitcast float %271 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %278, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caksx2zoati4v5yz7wm466mlwphmk5yomvlcuza34k6motoyzua4.py", directory: "inductor_cache/ak")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 37, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 37, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
