; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = srem i32 %15, 32, !dbg !14
  %18 = sext i32 %15 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %32 = sext i32 %17 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !28
  %61 = fadd float %42, 0x3EE4F8B580000000, !dbg !29
  %62 = fadd float %43, 0x3EE4F8B580000000, !dbg !29
  %63 = fadd float %44, 0x3EE4F8B580000000, !dbg !29
  %64 = fadd float %45, 0x3EE4F8B580000000, !dbg !29
  %65 = fadd float %51, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %52, 0x3EE4F8B580000000, !dbg !29
  %67 = fadd float %53, 0x3EE4F8B580000000, !dbg !29
  %68 = fadd float %54, 0x3EE4F8B580000000, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %69, 0, !dbg !30
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %70, 0, !dbg !30
  br i1 %.not.i, label %76, label %71, !dbg !30

71:                                               ; preds = %9
  br i1 %.not1.i, label %74, label %72, !dbg !30

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

76:                                               ; preds = %9
  br i1 %.not1.i, label %79, label %77, !dbg !30

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %81, 0, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !30
  br i1 %.not.i1, label %88, label %83, !dbg !30

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !30
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %93, 0, !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !30
  br i1 %.not.i6, label %100, label %95, !dbg !30

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !30

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !30

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !30
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %105, 0, !dbg !30
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !30
  br i1 %.not.i11, label %112, label %107, !dbg !30

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !30

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !30

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !30
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %117, 0, !dbg !30
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %118, 0, !dbg !30
  br i1 %.not.i16, label %124, label %119, !dbg !30

119:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %122, label %120, !dbg !30

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

124:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %127, label %125, !dbg !30

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %120, %122, %125, %127
  %.0.i18 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !30
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %129, 0, !dbg !30
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %130, 0, !dbg !30
  br i1 %.not.i21, label %136, label %131, !dbg !30

131:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %134, label %132, !dbg !30

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

136:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %139, label %137, !dbg !30

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %132, %134, %137, %139
  %.0.i23 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !30
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %141, 0, !dbg !30
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %142, 0, !dbg !30
  br i1 %.not.i26, label %148, label %143, !dbg !30

143:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %146, label %144, !dbg !30

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !30

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %144, %146, %149, %151
  %.0.i28 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !30
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %153, 0, !dbg !30
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %154, 0, !dbg !30
  br i1 %.not.i31, label %160, label %155, !dbg !30

155:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %158, label %156, !dbg !30

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

160:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %163, label %161, !dbg !30

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %156, %158, %161, %163
  %.0.i33 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %166 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %167 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %168 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %169 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %171 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %173 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %178 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %179 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %180 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %182 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %186 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %188 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %189 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %190 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %191 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %192 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %193 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %194 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %195 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %196 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %197 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %198 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %204 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %206 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %207 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %208 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %209 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %210 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %211 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %221 = insertelement <8 x i32> poison, i32 %165, i64 0, !dbg !16
  %222 = insertelement <8 x i32> %221, i32 %169, i64 1, !dbg !16
  %223 = insertelement <8 x i32> %222, i32 %173, i64 2, !dbg !16
  %224 = insertelement <8 x i32> %223, i32 %177, i64 3, !dbg !16
  %225 = insertelement <8 x i32> %224, i32 %181, i64 4, !dbg !16
  %226 = insertelement <8 x i32> %225, i32 %185, i64 5, !dbg !16
  %227 = insertelement <8 x i32> %226, i32 %189, i64 6, !dbg !16
  %228 = insertelement <8 x i32> %227, i32 %193, i64 7, !dbg !16
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !16
  %230 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !18
  %231 = insertelement <8 x i32> %230, i32 %170, i64 1, !dbg !18
  %232 = insertelement <8 x i32> %231, i32 %174, i64 2, !dbg !18
  %233 = insertelement <8 x i32> %232, i32 %178, i64 3, !dbg !18
  %234 = insertelement <8 x i32> %233, i32 %182, i64 4, !dbg !18
  %235 = insertelement <8 x i32> %234, i32 %186, i64 5, !dbg !18
  %236 = insertelement <8 x i32> %235, i32 %190, i64 6, !dbg !18
  %237 = insertelement <8 x i32> %236, i32 %194, i64 7, !dbg !18
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !18
  %239 = fadd <8 x float> %229, %238, !dbg !32
  %240 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %171, i64 1, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %175, i64 2, !dbg !20
  %243 = insertelement <8 x i32> %242, i32 %179, i64 3, !dbg !20
  %244 = insertelement <8 x i32> %243, i32 %183, i64 4, !dbg !20
  %245 = insertelement <8 x i32> %244, i32 %187, i64 5, !dbg !20
  %246 = insertelement <8 x i32> %245, i32 %191, i64 6, !dbg !20
  %247 = insertelement <8 x i32> %246, i32 %195, i64 7, !dbg !20
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !20
  %249 = fadd <8 x float> %239, %248, !dbg !33
  %250 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !22
  %251 = insertelement <8 x i32> %250, i32 %172, i64 1, !dbg !22
  %252 = insertelement <8 x i32> %251, i32 %176, i64 2, !dbg !22
  %253 = insertelement <8 x i32> %252, i32 %180, i64 3, !dbg !22
  %254 = insertelement <8 x i32> %253, i32 %184, i64 4, !dbg !22
  %255 = insertelement <8 x i32> %254, i32 %188, i64 5, !dbg !22
  %256 = insertelement <8 x i32> %255, i32 %192, i64 6, !dbg !22
  %257 = insertelement <8 x i32> %256, i32 %196, i64 7, !dbg !22
  %258 = bitcast <8 x i32> %257 to <8 x float>, !dbg !22
  %259 = fsub <8 x float> %249, %258, !dbg !34
  %260 = insertelement <8 x i32> poison, i32 %197, i64 0, !dbg !28
  %261 = insertelement <8 x i32> %260, i32 %198, i64 1, !dbg !28
  %262 = insertelement <8 x i32> %261, i32 %199, i64 2, !dbg !28
  %263 = insertelement <8 x i32> %262, i32 %200, i64 3, !dbg !28
  %264 = insertelement <8 x i32> %263, i32 %201, i64 4, !dbg !28
  %265 = insertelement <8 x i32> %264, i32 %202, i64 5, !dbg !28
  %266 = insertelement <8 x i32> %265, i32 %203, i64 6, !dbg !28
  %267 = insertelement <8 x i32> %266, i32 %204, i64 7, !dbg !28
  %268 = bitcast <8 x i32> %267 to <8 x float>, !dbg !28
  %269 = insertelement <8 x i32> poison, i32 %205, i64 0, !dbg !26
  %270 = insertelement <8 x i32> %269, i32 %206, i64 1, !dbg !26
  %271 = insertelement <8 x i32> %270, i32 %207, i64 2, !dbg !26
  %272 = insertelement <8 x i32> %271, i32 %208, i64 3, !dbg !26
  %273 = insertelement <8 x i32> %272, i32 %209, i64 4, !dbg !26
  %274 = insertelement <8 x i32> %273, i32 %210, i64 5, !dbg !26
  %275 = insertelement <8 x i32> %274, i32 %211, i64 6, !dbg !26
  %276 = insertelement <8 x i32> %275, i32 %212, i64 7, !dbg !26
  %277 = bitcast <8 x i32> %276 to <8 x float>, !dbg !26
  %278 = insertelement <8 x float> poison, float %220, i64 0, !dbg !35
  %279 = insertelement <8 x float> %278, float %219, i64 1, !dbg !35
  %280 = insertelement <8 x float> %279, float %218, i64 2, !dbg !35
  %281 = insertelement <8 x float> %280, float %217, i64 3, !dbg !35
  %282 = insertelement <8 x float> %281, float %216, i64 4, !dbg !35
  %283 = insertelement <8 x float> %282, float %215, i64 5, !dbg !35
  %284 = insertelement <8 x float> %283, float %214, i64 6, !dbg !35
  %285 = insertelement <8 x float> %284, float %213, i64 7, !dbg !35
  %286 = fmul <8 x float> %259, %285, !dbg !35
  %287 = fmul <8 x float> %286, %277, !dbg !36
  %288 = fadd <8 x float> %287, %268, !dbg !37
  %289 = fcmp olt <8 x float> %288, zeroinitializer, !dbg !38
  %290 = extractelement <8 x i1> %289, i64 7, !dbg !42
  %291 = extractelement <8 x i1> %289, i64 6, !dbg !42
  %292 = extractelement <8 x i1> %289, i64 5, !dbg !42
  %293 = extractelement <8 x i1> %289, i64 4, !dbg !42
  %294 = extractelement <8 x i1> %289, i64 3, !dbg !42
  %295 = extractelement <8 x i1> %289, i64 2, !dbg !42
  %296 = extractelement <8 x i1> %289, i64 1, !dbg !42
  %297 = extractelement <8 x i1> %289, i64 0, !dbg !42
  %298 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !43
  %299 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !43
  %bc = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %300 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %301 = select i1 %290, i32 0, i32 %300, !dbg !42
  %bc36 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %302 = extractelement <8 x i32> %bc36, i64 6, !dbg !44
  %303 = select i1 %291, i32 0, i32 %302, !dbg !42
  %bc37 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %304 = extractelement <8 x i32> %bc37, i64 5, !dbg !44
  %305 = select i1 %292, i32 0, i32 %304, !dbg !42
  %bc38 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %306 = extractelement <8 x i32> %bc38, i64 4, !dbg !44
  %307 = select i1 %293, i32 0, i32 %306, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %303, i32 %305, i32 %307, ptr addrspace(1) %298, i1 true) #3, !dbg !44
  %bc39 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %308 = extractelement <8 x i32> %bc39, i64 3, !dbg !44
  %309 = select i1 %294, i32 0, i32 %308, !dbg !42
  %bc40 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %310 = extractelement <8 x i32> %bc40, i64 2, !dbg !44
  %311 = select i1 %295, i32 0, i32 %310, !dbg !42
  %bc41 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %312 = extractelement <8 x i32> %bc41, i64 1, !dbg !44
  %313 = select i1 %296, i32 0, i32 %312, !dbg !42
  %bc42 = bitcast <8 x float> %288 to <8 x i32>, !dbg !44
  %314 = extractelement <8 x i32> %bc42, i64 0, !dbg !44
  %315 = select i1 %297, i32 0, i32 %314, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %309, i32 %311, i32 %313, i32 %315, ptr addrspace(1) %299, i1 true) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckeejuhmbtu2dk6rel3d52qjeoxbblby3bgnoirzs5lit36qpn5f.py", directory: "inductor_cache/ke")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 27, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 37, scope: !7)
!45 = !DILocation(line: 48, column: 4, scope: !7)
