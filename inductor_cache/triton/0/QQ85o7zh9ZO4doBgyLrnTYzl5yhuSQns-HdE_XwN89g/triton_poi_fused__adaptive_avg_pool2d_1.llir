; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %13 = sdiv i32 %.frozen, 24, !dbg !14
  %14 = mul i32 %13, 24, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %10, 24, !dbg !15
  %16 = srem i32 %11, 24, !dbg !15
  %17 = srem i32 %12, 24, !dbg !15
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !16
  %.lhs.trunc1 = trunc nsw i32 %15 to i8, !dbg !16
  %.lhs.trunc3 = trunc nsw i32 %16 to i8, !dbg !16
  %.lhs.trunc5 = trunc nsw i32 %17 to i8, !dbg !16
  %18 = shl nsw i8 %.lhs.trunc, 2, !dbg !17
  %.lhs.trunc7 = add nsw i8 %18, 27, !dbg !17
  %19 = insertelement <2 x i8> poison, i8 %.lhs.trunc, i64 0, !dbg !16
  %20 = insertelement <2 x i8> %19, i8 %.lhs.trunc7, i64 1, !dbg !16
  %21 = sdiv <2 x i8> %20, <i8 6, i8 24>, !dbg !16
  %22 = extractelement <2 x i8> %21, i64 0, !dbg !18
  %.sext = sext i8 %22 to i32, !dbg !16
  %23 = extractelement <2 x i8> %21, i64 1, !dbg !18
  %.sext8 = sext i8 %23 to i32, !dbg !17
  %24 = shl nsw i8 %.lhs.trunc1, 2, !dbg !17
  %.lhs.trunc9 = add nsw i8 %24, 27, !dbg !17
  %25 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !16
  %26 = insertelement <2 x i8> %25, i8 %.lhs.trunc9, i64 1, !dbg !16
  %27 = sdiv <2 x i8> %26, <i8 6, i8 24>, !dbg !16
  %28 = extractelement <2 x i8> %27, i64 0, !dbg !18
  %.sext2 = sext i8 %28 to i32, !dbg !16
  %29 = extractelement <2 x i8> %27, i64 1, !dbg !18
  %.sext10 = sext i8 %29 to i32, !dbg !17
  %30 = shl nsw i8 %.lhs.trunc3, 2, !dbg !17
  %.lhs.trunc11 = add nsw i8 %30, 27, !dbg !17
  %31 = insertelement <2 x i8> poison, i8 %.lhs.trunc3, i64 0, !dbg !16
  %32 = insertelement <2 x i8> %31, i8 %.lhs.trunc11, i64 1, !dbg !16
  %33 = sdiv <2 x i8> %32, <i8 6, i8 24>, !dbg !16
  %34 = extractelement <2 x i8> %33, i64 0, !dbg !18
  %.sext4 = sext i8 %34 to i32, !dbg !16
  %35 = extractelement <2 x i8> %33, i64 1, !dbg !18
  %.sext12 = sext i8 %35 to i32, !dbg !17
  %36 = shl nsw i8 %.lhs.trunc5, 2, !dbg !17
  %.lhs.trunc13 = add nsw i8 %36, 27, !dbg !17
  %37 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !16
  %38 = insertelement <2 x i8> %37, i8 %.lhs.trunc13, i64 1, !dbg !16
  %39 = sdiv <2 x i8> %38, <i8 6, i8 24>, !dbg !16
  %40 = extractelement <2 x i8> %39, i64 0, !dbg !18
  %.sext6 = sext i8 %40 to i32, !dbg !16
  %41 = extractelement <2 x i8> %39, i64 1, !dbg !18
  %.sext14 = sext i8 %41 to i32, !dbg !17
  %42 = icmp slt i8 %22, %23, !dbg !18
  %43 = icmp slt i8 %28, %29, !dbg !18
  %44 = icmp slt i8 %34, %35, !dbg !18
  %45 = icmp slt i8 %40, %41, !dbg !18
  %46 = shl nsw i32 %13, 4, !dbg !19
  %47 = add nsw i32 %46, %.sext, !dbg !20
  %48 = add nsw i32 %46, %.sext2, !dbg !20
  %49 = add nsw i32 %46, %.sext4, !dbg !20
  %50 = add nsw i32 %46, %.sext6, !dbg !20
  %51 = sext i32 %47 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %48 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %49 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %50 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %42, i32 0, i1 %42) #1, !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %43, i32 0, i1 %43) #1, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %44, i32 0, i1 %44) #1, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %45, i32 0, i1 %45) #1, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = add nsw i32 %.sext, 1, !dbg !23
  %68 = add nsw i32 %.sext2, 1, !dbg !23
  %69 = add nsw i32 %.sext4, 1, !dbg !23
  %70 = add nsw i32 %.sext6, 1, !dbg !23
  %71 = icmp slt i32 %67, %.sext8, !dbg !24
  %72 = icmp slt i32 %68, %.sext10, !dbg !24
  %73 = icmp slt i32 %69, %.sext12, !dbg !24
  %74 = icmp slt i32 %70, %.sext14, !dbg !24
  %75 = or disjoint i32 %46, 1, !dbg !25
  %76 = add nsw i32 %75, %.sext, !dbg !26
  %77 = add nsw i32 %75, %.sext2, !dbg !26
  %78 = add nsw i32 %75, %.sext4, !dbg !26
  %79 = add nsw i32 %75, %.sext6, !dbg !26
  %80 = sext i32 %76 to i64, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !27
  %82 = sext i32 %77 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = sext i32 %78 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !27
  %86 = sext i32 %79 to i64, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %71, i32 0, i1 %71) #1, !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %72, i32 0, i1 %72) #1, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %73, i32 0, i1 %73) #1, !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %74, i32 0, i1 %74) #1, !dbg !28
  %95 = bitcast i32 %94 to float, !dbg !28
  %96 = fadd float %60, %89, !dbg !29
  %97 = fadd float %62, %91, !dbg !29
  %98 = fadd float %64, %93, !dbg !29
  %99 = fadd float %66, %95, !dbg !29
  %100 = or disjoint i32 %46, 4, !dbg !30
  %101 = add nsw i32 %100, %.sext, !dbg !31
  %102 = add nsw i32 %100, %.sext2, !dbg !31
  %103 = add nsw i32 %100, %.sext4, !dbg !31
  %104 = add nsw i32 %100, %.sext6, !dbg !31
  %105 = sext i32 %101 to i64, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !32
  %107 = sext i32 %102 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !32
  %109 = sext i32 %103 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = sext i32 %104 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %43, i32 0, i1 %43) #1, !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %44, i32 0, i1 %44) #1, !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %45, i32 0, i1 %45) #1, !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %96, %114, !dbg !34
  %122 = fadd float %97, %116, !dbg !34
  %123 = fadd float %98, %118, !dbg !34
  %124 = fadd float %99, %120, !dbg !34
  %125 = or disjoint i32 %46, 5, !dbg !35
  %126 = add nsw i32 %125, %.sext, !dbg !36
  %127 = add nsw i32 %125, %.sext2, !dbg !36
  %128 = add nsw i32 %125, %.sext4, !dbg !36
  %129 = add nsw i32 %125, %.sext6, !dbg !36
  %130 = sext i32 %126 to i64, !dbg !37
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !37
  %132 = sext i32 %127 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !37
  %134 = sext i32 %128 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !37
  %136 = sext i32 %129 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !37
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %71, i32 0, i1 %71) #1, !dbg !38
  %139 = bitcast i32 %138 to float, !dbg !38
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %72, i32 0, i1 %72) #1, !dbg !38
  %141 = bitcast i32 %140 to float, !dbg !38
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %73, i32 0, i1 %73) #1, !dbg !38
  %143 = bitcast i32 %142 to float, !dbg !38
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %74, i32 0, i1 %74) #1, !dbg !38
  %145 = bitcast i32 %144 to float, !dbg !38
  %146 = fadd float %121, %139, !dbg !39
  %147 = fadd float %122, %141, !dbg !39
  %148 = fadd float %123, %143, !dbg !39
  %149 = fadd float %124, %145, !dbg !39
  %150 = or disjoint i32 %46, 8, !dbg !40
  %151 = add nsw i32 %150, %.sext, !dbg !41
  %152 = add nsw i32 %150, %.sext2, !dbg !41
  %153 = add nsw i32 %150, %.sext4, !dbg !41
  %154 = add nsw i32 %150, %.sext6, !dbg !41
  %155 = sext i32 %151 to i64, !dbg !42
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !42
  %157 = sext i32 %152 to i64, !dbg !42
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !42
  %159 = sext i32 %153 to i64, !dbg !42
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !42
  %161 = sext i32 %154 to i64, !dbg !42
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !42
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %42, i32 0, i1 %42) #1, !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %43, i32 0, i1 %43) #1, !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %44, i32 0, i1 %44) #1, !dbg !43
  %168 = bitcast i32 %167 to float, !dbg !43
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %45, i32 0, i1 %45) #1, !dbg !43
  %170 = bitcast i32 %169 to float, !dbg !43
  %171 = fadd float %146, %164, !dbg !44
  %172 = fadd float %147, %166, !dbg !44
  %173 = fadd float %148, %168, !dbg !44
  %174 = fadd float %149, %170, !dbg !44
  %175 = or disjoint i32 %46, 9, !dbg !45
  %176 = add nsw i32 %175, %.sext, !dbg !46
  %177 = add nsw i32 %175, %.sext2, !dbg !46
  %178 = add nsw i32 %175, %.sext4, !dbg !46
  %179 = add nsw i32 %175, %.sext6, !dbg !46
  %180 = sext i32 %176 to i64, !dbg !47
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !47
  %182 = sext i32 %177 to i64, !dbg !47
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !47
  %184 = sext i32 %178 to i64, !dbg !47
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !47
  %186 = sext i32 %179 to i64, !dbg !47
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !47
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %71, i32 0, i1 %71) #1, !dbg !48
  %189 = bitcast i32 %188 to float, !dbg !48
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %72, i32 0, i1 %72) #1, !dbg !48
  %191 = bitcast i32 %190 to float, !dbg !48
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %73, i32 0, i1 %73) #1, !dbg !48
  %193 = bitcast i32 %192 to float, !dbg !48
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %195 = bitcast i32 %194 to float, !dbg !48
  %196 = fadd float %171, %189, !dbg !49
  %197 = fadd float %172, %191, !dbg !49
  %198 = fadd float %173, %193, !dbg !49
  %199 = fadd float %174, %195, !dbg !49
  %200 = or disjoint i32 %46, 12, !dbg !50
  %201 = add nsw i32 %200, %.sext, !dbg !51
  %202 = add nsw i32 %200, %.sext2, !dbg !51
  %203 = add nsw i32 %200, %.sext4, !dbg !51
  %204 = add nsw i32 %200, %.sext6, !dbg !51
  %205 = sext i32 %201 to i64, !dbg !52
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !52
  %207 = sext i32 %202 to i64, !dbg !52
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !52
  %209 = sext i32 %203 to i64, !dbg !52
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !52
  %211 = sext i32 %204 to i64, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !52
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %42, i32 0, i1 %42) #1, !dbg !53
  %214 = bitcast i32 %213 to float, !dbg !53
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %43, i32 0, i1 %43) #1, !dbg !53
  %216 = bitcast i32 %215 to float, !dbg !53
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %44, i32 0, i1 %44) #1, !dbg !53
  %218 = bitcast i32 %217 to float, !dbg !53
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %45, i32 0, i1 %45) #1, !dbg !53
  %220 = bitcast i32 %219 to float, !dbg !53
  %221 = fadd float %196, %214, !dbg !54
  %222 = fadd float %197, %216, !dbg !54
  %223 = fadd float %198, %218, !dbg !54
  %224 = fadd float %199, %220, !dbg !54
  %225 = or disjoint i32 %46, 13, !dbg !55
  %226 = add nsw i32 %225, %.sext, !dbg !56
  %227 = add nsw i32 %225, %.sext2, !dbg !56
  %228 = add nsw i32 %225, %.sext4, !dbg !56
  %229 = add nsw i32 %225, %.sext6, !dbg !56
  %230 = sext i32 %226 to i64, !dbg !57
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !57
  %232 = sext i32 %227 to i64, !dbg !57
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !57
  %234 = sext i32 %228 to i64, !dbg !57
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !57
  %236 = sext i32 %229 to i64, !dbg !57
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !57
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %71, i32 0, i1 %71) #1, !dbg !58
  %239 = bitcast i32 %238 to float, !dbg !58
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %72, i32 0, i1 %72) #1, !dbg !58
  %241 = bitcast i32 %240 to float, !dbg !58
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %73, i32 0, i1 %73) #1, !dbg !58
  %243 = bitcast i32 %242 to float, !dbg !58
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %74, i32 0, i1 %74) #1, !dbg !58
  %245 = bitcast i32 %244 to float, !dbg !58
  %246 = fadd float %221, %239, !dbg !59
  %247 = fadd float %222, %241, !dbg !59
  %248 = fadd float %223, %243, !dbg !59
  %249 = fadd float %224, %245, !dbg !59
  %250 = select i1 %42, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %251 = select i1 %43, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %252 = select i1 %44, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %253 = select i1 %45, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %254 = select i1 %71, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %255 = select i1 %72, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %256 = select i1 %73, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %257 = select i1 %74, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %258 = fadd float %250, %254, !dbg !62
  %259 = fadd float %251, %255, !dbg !62
  %260 = fadd float %252, %256, !dbg !62
  %261 = fadd float %253, %257, !dbg !62
  %262 = fadd float %250, %258, !dbg !63
  %263 = fadd float %251, %259, !dbg !63
  %264 = fadd float %252, %260, !dbg !63
  %265 = fadd float %253, %261, !dbg !63
  %266 = fadd float %254, %262, !dbg !64
  %267 = fadd float %255, %263, !dbg !64
  %268 = fadd float %256, %264, !dbg !64
  %269 = fadd float %257, %265, !dbg !64
  %270 = fadd float %250, %266, !dbg !65
  %271 = fadd float %251, %267, !dbg !65
  %272 = fadd float %252, %268, !dbg !65
  %273 = fadd float %253, %269, !dbg !65
  %274 = fadd float %254, %270, !dbg !66
  %275 = fadd float %255, %271, !dbg !66
  %276 = fadd float %256, %272, !dbg !66
  %277 = fadd float %257, %273, !dbg !66
  %278 = fadd float %250, %274, !dbg !67
  %279 = fadd float %251, %275, !dbg !67
  %280 = fadd float %252, %276, !dbg !67
  %281 = fadd float %253, %277, !dbg !67
  %282 = fadd float %254, %278, !dbg !68
  %283 = fadd float %255, %279, !dbg !68
  %284 = fadd float %256, %280, !dbg !68
  %285 = fadd float %257, %281, !dbg !68
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %282) #1, !dbg !69
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %283) #1, !dbg !69
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %284) #1, !dbg !69
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %285) #1, !dbg !69
  %290 = sext i32 %9 to i64, !dbg !70
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %290, !dbg !70
  %292 = bitcast float %286 to i32, !dbg !71
  %293 = bitcast float %287 to i32, !dbg !71
  %294 = bitcast float %288 to i32, !dbg !71
  %295 = bitcast float %289 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %291, i1 true) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3we22s5htv3svkwiigl2z7t7czlyoo5cz65wcqj276jffvcqrhp.py", directory: "inductor_cache/3w")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_1", linkageName: "triton_poi_fused__adaptive_avg_pool2d_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 17, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 34, column: 33, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 16, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 44, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 55, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 43, column: 35, scope: !7)
!31 = !DILocation(line: 43, column: 44, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 55, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 35, scope: !7)
!36 = !DILocation(line: 46, column: 44, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 55, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 44, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 54, column: 44, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 55, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 36, scope: !7)
!51 = !DILocation(line: 59, column: 45, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 56, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 45, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 56, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 34, scope: !7)
!61 = !DILocation(line: 69, column: 35, scope: !7)
!62 = !DILocation(line: 70, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 20, scope: !7)
!64 = !DILocation(line: 78, column: 20, scope: !7)
!65 = !DILocation(line: 82, column: 20, scope: !7)
!66 = !DILocation(line: 86, column: 20, scope: !7)
!67 = !DILocation(line: 90, column: 20, scope: !7)
!68 = !DILocation(line: 94, column: 20, scope: !7)
!69 = !DILocation(line: 95, column: 20, scope: !7)
!70 = !DILocation(line: 96, column: 25, scope: !7)
!71 = !DILocation(line: 96, column: 37, scope: !7)
!72 = !DILocation(line: 96, column: 4, scope: !7)
