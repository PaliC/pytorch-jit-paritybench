; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !14
  %13 = insertelement <2 x i32> %12, i32 %10, i64 1, !dbg !14
  %14 = sdiv <2 x i32> %13, splat (i32 4096), !dbg !14
  %15 = srem <2 x i32> %14, splat (i32 128), !dbg !15
  %16 = srem i32 %10, 4096, !dbg !16
  %17 = srem i32 %11, 4096, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %18 = sdiv i32 %.frozen, 524288, !dbg !17
  %.frozen9 = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen9, 524288, !dbg !17
  %20 = icmp slt <2 x i32> %15, splat (i32 64), !dbg !18
  %21 = shufflevector <2 x i1> %20, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !18
  %22 = mul i32 %18, 524288, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !19
  %23 = mul i32 %19, 524288, !dbg !19
  %srem1.decomposed = sub i32 %.frozen9, %23, !dbg !19
  %24 = shl nsw i32 %18, 18, !dbg !20
  %25 = shl nsw i32 %19, 18, !dbg !20
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = extractelement <2 x i1> %20, i64 1, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = extractelement <2 x i1> %20, i64 0, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = extractelement <2 x i32> %15, i64 1, !dbg !24
  %45 = icmp sgt i32 %44, 63, !dbg !25
  %46 = extractelement <2 x i32> %15, i64 0, !dbg !24
  %47 = icmp sgt i32 %46, 63, !dbg !25
  %48 = shl nsw i32 %44, 12, !dbg !24
  %49 = shl nsw i32 %46, 12, !dbg !24
  %50 = add nsw i32 %16, -262144, !dbg !24
  %51 = add nsw i32 %50, %24, !dbg !26
  %52 = add nsw i32 %51, %48, !dbg !27
  %53 = add nsw i32 %17, -262144, !dbg !24
  %54 = add nsw i32 %53, %25, !dbg !26
  %55 = add nsw i32 %54, %49, !dbg !27
  %56 = sext i32 %52 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = sext i32 %55 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !29
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %70 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !30
  %71 = insertelement <8 x i32> %70, i32 %42, i64 1, !dbg !30
  %72 = insertelement <8 x i32> %71, i32 %41, i64 2, !dbg !30
  %73 = insertelement <8 x i32> %72, i32 %40, i64 3, !dbg !30
  %74 = insertelement <8 x i32> %73, i32 %37, i64 4, !dbg !30
  %75 = insertelement <8 x i32> %74, i32 %36, i64 5, !dbg !30
  %76 = insertelement <8 x i32> %75, i32 %35, i64 6, !dbg !30
  %77 = insertelement <8 x i32> %76, i32 %34, i64 7, !dbg !30
  %78 = insertelement <8 x i32> poison, i32 %69, i64 0, !dbg !30
  %79 = insertelement <8 x i32> %78, i32 %68, i64 1, !dbg !30
  %80 = insertelement <8 x i32> %79, i32 %67, i64 2, !dbg !30
  %81 = insertelement <8 x i32> %80, i32 %66, i64 3, !dbg !30
  %82 = insertelement <8 x i32> %81, i32 %64, i64 4, !dbg !30
  %83 = insertelement <8 x i32> %82, i32 %63, i64 5, !dbg !30
  %84 = insertelement <8 x i32> %83, i32 %62, i64 6, !dbg !30
  %85 = insertelement <8 x i32> %84, i32 %61, i64 7, !dbg !30
  %86 = select <8 x i1> %21, <8 x i32> %77, <8 x i32> %85, !dbg !30
  %87 = bitcast <8 x i32> %86 to <8 x float>, !dbg !30
  %88 = fcmp olt <8 x float> %87, zeroinitializer, !dbg !31
  %89 = extractelement <8 x i1> %88, i64 7, !dbg !35
  %90 = extractelement <8 x i1> %88, i64 6, !dbg !35
  %91 = extractelement <8 x i1> %88, i64 5, !dbg !35
  %92 = extractelement <8 x i1> %88, i64 4, !dbg !35
  %93 = extractelement <8 x i1> %88, i64 3, !dbg !35
  %94 = extractelement <8 x i1> %88, i64 2, !dbg !35
  %95 = extractelement <8 x i1> %88, i64 1, !dbg !35
  %96 = extractelement <8 x i1> %88, i64 0, !dbg !35
  %97 = sext i32 %10 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !36
  %99 = sext i32 %11 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !36
  %101 = extractelement <8 x i32> %86, i64 7, !dbg !37
  %102 = select i1 %89, i32 0, i32 %101, !dbg !35
  %103 = extractelement <8 x i32> %86, i64 6, !dbg !37
  %104 = select i1 %90, i32 0, i32 %103, !dbg !35
  %105 = extractelement <8 x i32> %86, i64 5, !dbg !37
  %106 = select i1 %91, i32 0, i32 %105, !dbg !35
  %107 = extractelement <8 x i32> %86, i64 4, !dbg !37
  %108 = select i1 %92, i32 0, i32 %107, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %104, i32 %106, i32 %108, ptr addrspace(1) %98, i1 true) #1, !dbg !37
  %109 = extractelement <8 x i32> %86, i64 3, !dbg !37
  %110 = select i1 %93, i32 0, i32 %109, !dbg !35
  %111 = extractelement <8 x i32> %86, i64 2, !dbg !37
  %112 = select i1 %94, i32 0, i32 %111, !dbg !35
  %113 = extractelement <8 x i32> %86, i64 1, !dbg !37
  %114 = select i1 %95, i32 0, i32 %113, !dbg !35
  %115 = extractelement <8 x i32> %86, i64 0, !dbg !37
  %116 = select i1 %96, i32 0, i32 %115, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %110, i32 %112, i32 %114, i32 %116, ptr addrspace(1) %100, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjzbusrssjuxfra62ndlgqb3eclzzxieyrpfw2oe365bpz3fecn6.py", directory: "inductor_cache/jz")
!4 = !{ptr @triton_poi_fused_cat_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_2", linkageName: "triton_poi_fused_cat_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 59, scope: !7)
!24 = !DILocation(line: 37, column: 41, scope: !7)
!25 = !DILocation(line: 34, column: 19, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 55, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 67, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 40, column: 42, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 37, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
