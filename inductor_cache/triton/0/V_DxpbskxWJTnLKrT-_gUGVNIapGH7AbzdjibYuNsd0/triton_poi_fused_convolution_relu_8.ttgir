#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_convolution_relu_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0), %arg4: i32 loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024x1xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c68644_i32 = arith.constant 68644 : i32 loc(#loc1)
    %c4393216_i32 = arith.constant 4393216 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<68644> : tensor<1024x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<68644> : tensor<1024x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1024x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c1024_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1024x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1024x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<1024x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<1024x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<1024x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<1024x1xi32, #blocked1> loc(#loc7)
    %12 = arith.cmpi slt, %10, %cst_0 : tensor<1024x1xi32, #blocked> loc(#loc8)
    %13 = arith.cmpi slt, %11, %cst_1 : tensor<1024x1xi32, #blocked1> loc(#loc8)
    %14 = arith.remsi %0, %c64_i32 : i32 loc(#loc9)
    %15 = arith.divsi %0, %c64_i32 : i32 loc(#loc10)
    %16 = arith.muli %0, %c68644_i32 : i32 loc(#loc11)
    %17 = tt.splat %16 : i32 -> tensor<1024x1xi32, #blocked> loc(#loc12)
    %18 = arith.addi %10, %17 : tensor<1024x1xi32, #blocked> loc(#loc12)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.addptr %19, %18 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc13)
    %21 = tt.splat %1 : i1 -> tensor<1024x1xi1, #blocked> loc(#loc14)
    %22 = tt.splat %1 : i1 -> tensor<1024x1xi1, #blocked1> loc(#loc14)
    %23 = arith.andi %12, %21 : tensor<1024x1xi1, #blocked> loc(#loc14)
    %24 = arith.andi %13, %22 : tensor<1024x1xi1, #blocked1> loc(#loc14)
    %25 = tt.load %20, %23 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %26 = tt.addptr %arg1, %14 : !tt.ptr<f32>, i32 loc(#loc16)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %28 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc17)
    %29 = tt.load %27, %28 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %30 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1024x1xf32, #blocked> loc(#loc18)
    %31 = arith.addf %25, %30 : tensor<1024x1xf32, #blocked> loc(#loc18)
    %32 = arith.cmpf ogt, %cst, %31 : tensor<1024x1xf32, #blocked> loc(#loc29)
    %33 = arith.select %32, %cst, %31 : tensor<1024x1xi1, #blocked>, tensor<1024x1xf32, #blocked> loc(#loc30)
    %34 = arith.muli %11, %cst_2 : tensor<1024x1xi32, #blocked1> loc(#loc22)
    %35 = tt.splat %14 : i32 -> tensor<1024x1xi32, #blocked1> loc(#loc23)
    %36 = arith.addi %35, %34 : tensor<1024x1xi32, #blocked1> loc(#loc23)
    %37 = arith.muli %15, %c4393216_i32 : i32 loc(#loc24)
    %38 = tt.splat %37 : i32 -> tensor<1024x1xi32, #blocked1> loc(#loc25)
    %39 = arith.addi %36, %38 : tensor<1024x1xi32, #blocked1> loc(#loc25)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %41 = tt.addptr %40, %39 : tensor<1024x1x!tt.ptr<f32>, #blocked1>, tensor<1024x1xi32, #blocked1> loc(#loc26)
    %42 = triton_gpu.convert_layout %33 : tensor<1024x1xf32, #blocked> -> tensor<1024x1xf32, #blocked1> loc(#loc27)
    tt.store %41, %42, %24 : tensor<1024x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":22:28)
#loc3 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":24:21)
#loc4 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":25:28)
#loc5 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":25:33)
#loc6 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":26:44)
#loc7 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":26:23)
#loc8 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":27:21)
#loc9 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":30:19)
#loc10 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":31:19)
#loc11 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":32:41)
#loc12 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":32:35)
#loc13 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":32:30)
#loc14 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":32:54)
#loc15 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":32:46)
#loc16 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":33:30)
#loc17 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":33:35)
#loc18 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":34:18)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc20 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":36:40)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc22 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:33)
#loc23 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:30)
#loc24 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:46)
#loc25 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:38)
#loc26 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:25)
#loc27 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:57)
#loc28 = loc("inductor_cache/qt/cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py":37:4)
#loc29 = loc(callsite(#loc19 at #loc20))
#loc30 = loc(callsite(#loc21 at #loc20))
