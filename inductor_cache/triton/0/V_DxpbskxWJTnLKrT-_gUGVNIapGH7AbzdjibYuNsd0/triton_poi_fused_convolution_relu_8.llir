; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = and i32 %10, 127, !dbg !14
  %14 = or disjoint i32 %13, 128, !dbg !14
  %15 = or disjoint i32 %13, 256, !dbg !14
  %16 = or disjoint i32 %13, 384, !dbg !14
  %17 = or disjoint i32 %9, %12, !dbg !15
  %18 = or disjoint i32 %17, 512, !dbg !15
  %19 = or disjoint i32 %9, %13, !dbg !15
  %20 = or disjoint i32 %9, %14, !dbg !15
  %21 = or disjoint i32 %9, %15, !dbg !15
  %22 = or disjoint i32 %9, %16, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %19, 640, !dbg !15
  %25 = or disjoint i32 %19, 768, !dbg !15
  %26 = or disjoint i32 %19, 896, !dbg !15
  %27 = icmp slt i32 %17, 68644, !dbg !16
  %28 = icmp slt i32 %18, 68644, !dbg !16
  %29 = icmp slt i32 %19, 68644, !dbg !16
  %30 = icmp slt i32 %20, 68644, !dbg !16
  %31 = icmp slt i32 %21, 68644, !dbg !16
  %32 = icmp slt i32 %22, 68644, !dbg !16
  %33 = icmp slt i32 %23, 68644, !dbg !16
  %34 = icmp slt i32 %24, 68644, !dbg !16
  %35 = icmp slt i32 %25, 68644, !dbg !16
  %36 = icmp slt i32 %26, 68644, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %37 = sdiv i32 %.frozen, 64, !dbg !17
  %38 = mul i32 %37, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %38, !dbg !18
  %39 = mul i32 %6, 68644, !dbg !19
  %40 = add i32 %17, %39, !dbg !20
  %41 = add i32 %39, %18, !dbg !20
  %42 = sext i32 %40 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %41 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = and i1 %7, %27, !dbg !22
  %47 = and i1 %28, %7, !dbg !22
  %48 = and i1 %7, %29, !dbg !22
  %49 = and i1 %7, %30, !dbg !22
  %50 = and i1 %7, %31, !dbg !22
  %51 = and i1 %7, %32, !dbg !22
  %52 = and i1 %33, %7, !dbg !22
  %53 = and i1 %34, %7, !dbg !22
  %54 = and i1 %35, %7, !dbg !22
  %55 = and i1 %36, %7, !dbg !22
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %47) #2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = sext i32 %.decomposed to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %7) #2, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %7) #2, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %7) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %7) #2, !dbg !25
  %72 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !23
  %73 = insertelement <8 x i32> %72, i32 %64, i64 1, !dbg !23
  %74 = insertelement <8 x i32> %73, i32 %63, i64 2, !dbg !23
  %75 = insertelement <8 x i32> %74, i32 %62, i64 3, !dbg !23
  %76 = insertelement <8 x i32> %75, i32 %60, i64 4, !dbg !23
  %77 = insertelement <8 x i32> %76, i32 %59, i64 5, !dbg !23
  %78 = insertelement <8 x i32> %77, i32 %58, i64 6, !dbg !23
  %79 = insertelement <8 x i32> %78, i32 %57, i64 7, !dbg !23
  %80 = bitcast <8 x i32> %79 to <8 x float>, !dbg !23
  %81 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !26
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !26
  %83 = shufflevector <8 x float> %82, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !26
  %84 = fadd <8 x float> %83, %80, !dbg !26
  %85 = fcmp olt <8 x float> %84, zeroinitializer, !dbg !27
  %86 = extractelement <8 x i1> %85, i64 7, !dbg !31
  %87 = extractelement <8 x float> %84, i64 7, !dbg !31
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !31
  %89 = extractelement <8 x i1> %85, i64 6, !dbg !31
  %90 = extractelement <8 x float> %84, i64 6, !dbg !31
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !31
  %92 = extractelement <8 x i1> %85, i64 5, !dbg !31
  %93 = extractelement <8 x float> %84, i64 5, !dbg !31
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !31
  %95 = extractelement <8 x i1> %85, i64 4, !dbg !31
  %96 = extractelement <8 x float> %84, i64 4, !dbg !31
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !31
  %98 = extractelement <8 x i1> %85, i64 3, !dbg !31
  %99 = extractelement <8 x float> %84, i64 3, !dbg !31
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !31
  %101 = extractelement <8 x i1> %85, i64 2, !dbg !31
  %102 = extractelement <8 x float> %84, i64 2, !dbg !31
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !31
  %104 = extractelement <8 x i1> %85, i64 1, !dbg !31
  %105 = extractelement <8 x float> %84, i64 1, !dbg !31
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !31
  %107 = extractelement <8 x i1> %85, i64 0, !dbg !31
  %108 = extractelement <8 x float> %84, i64 0, !dbg !31
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !31
  %110 = shl i32 %19, 6, !dbg !32
  %111 = shl i32 %20, 6, !dbg !32
  %112 = shl i32 %21, 6, !dbg !32
  %113 = shl i32 %22, 6, !dbg !32
  %114 = shl i32 %23, 6, !dbg !32
  %115 = shl i32 %24, 6, !dbg !32
  %116 = shl i32 %25, 6, !dbg !32
  %117 = shl i32 %26, 6, !dbg !32
  %118 = mul i32 %37, 4393216, !dbg !33
  %119 = add i32 %118, %.decomposed, !dbg !34
  %120 = add i32 %119, %110, !dbg !35
  %121 = add i32 %119, %111, !dbg !35
  %122 = add i32 %119, %112, !dbg !35
  %123 = add i32 %119, %113, !dbg !35
  %124 = add i32 %119, %114, !dbg !35
  %125 = add i32 %119, %115, !dbg !35
  %126 = add i32 %119, %116, !dbg !35
  %127 = add i32 %119, %117, !dbg !35
  %128 = sext i32 %120 to i64, !dbg !36
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !36
  %130 = sext i32 %121 to i64, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !36
  %132 = sext i32 %122 to i64, !dbg !36
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !36
  %134 = sext i32 %123 to i64, !dbg !36
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !36
  %136 = sext i32 %124 to i64, !dbg !36
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !36
  %138 = sext i32 %125 to i64, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !36
  %140 = sext i32 %126 to i64, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !36
  %142 = sext i32 %127 to i64, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !36
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %145 = bitcast float %88 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !37
  %146 = or disjoint i32 %12, 1, !dbg !37
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !37
  %148 = bitcast float %91 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !37
  %149 = or disjoint i32 %12, 2, !dbg !37
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !37
  %151 = bitcast float %94 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !37
  %152 = or disjoint i32 %12, 3, !dbg !37
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !37
  %154 = bitcast float %97 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !37
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !37
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !37
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %163 = bitcast float %100 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %163, i1 true) #2, !dbg !37
  %164 = bitcast float %103 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %164, i1 true) #2, !dbg !37
  %165 = bitcast float %106 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %165, i1 true) #2, !dbg !37
  %166 = bitcast float %109 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %166, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %167 = load i32, ptr addrspace(3) %155, align 4, !dbg !37
  %168 = load i32, ptr addrspace(3) %157, align 4, !dbg !37
  %169 = load i32, ptr addrspace(3) %159, align 4, !dbg !37
  %170 = load i32, ptr addrspace(3) %161, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %129, i1 %48) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %131, i1 %49) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %133, i1 %50) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %135, i1 %51) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %137, i1 %52) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %139, i1 %53) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %141, i1 %54) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %143, i1 %55) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 41, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 46, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 57, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
