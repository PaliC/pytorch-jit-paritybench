; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 6, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 6, !dbg !15
  %18 = shl i32 %9, 2, !dbg !16
  %19 = and i32 %18, 60, !dbg !16
  %20 = lshr i32 %9, 2, !dbg !16
  %21 = and i32 %20, 31, !dbg !16
  %22 = or disjoint i32 %17, %19, !dbg !17
  %23 = icmp slt i32 %22, 64, !dbg !18
  %24 = srem i32 %14, 256, !dbg !19
  %25 = sdiv i32 %15, 4, !dbg !20
  %26 = shl i32 %14, 6, !dbg !21
  %27 = add i32 %22, %26, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %23) #2, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !24
  %35 = sext i32 %24 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !26
  %41 = getelementptr i1, ptr addrspace(1) %2, i64 %28, !dbg !27
  %42 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !24
  %43 = insertelement <4 x i32> %42, i32 %32, i64 1, !dbg !24
  %44 = insertelement <4 x i32> %43, i32 %33, i64 2, !dbg !24
  %45 = insertelement <4 x i32> %44, i32 %34, i64 3, !dbg !24
  %46 = bitcast <4 x i32> %45 to <4 x float>, !dbg !24
  %47 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !28
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !28
  %49 = shufflevector <4 x float> %48, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !28
  %50 = fadd <4 x float> %49, %46, !dbg !28
  %51 = fcmp ogt <4 x float> %50, zeroinitializer, !dbg !29
  %52 = extractelement <4 x float> %50, i64 0, !dbg !30
  %53 = fmul float %52, 0x3F847AE140000000, !dbg !31
  %54 = extractelement <4 x float> %50, i64 1, !dbg !30
  %55 = fmul float %54, 0x3F847AE140000000, !dbg !31
  %56 = extractelement <4 x float> %50, i64 2, !dbg !30
  %57 = fmul float %56, 0x3F847AE140000000, !dbg !31
  %58 = extractelement <4 x float> %50, i64 3, !dbg !30
  %59 = fmul float %58, 0x3F847AE140000000, !dbg !31
  %60 = extractelement <4 x i1> %51, i64 0, !dbg !30
  %61 = select i1 %60, float %52, float %53, !dbg !30
  %62 = extractelement <4 x i1> %51, i64 1, !dbg !30
  %63 = select i1 %62, float %54, float %55, !dbg !30
  %64 = extractelement <4 x i1> %51, i64 2, !dbg !30
  %65 = select i1 %64, float %56, float %57, !dbg !30
  %66 = extractelement <4 x i1> %51, i64 3, !dbg !30
  %67 = select i1 %66, float %58, float %59, !dbg !30
  %68 = zext <4 x i1> %51 to <4 x i8>, !dbg !32
  %69 = bitcast <4 x i8> %68 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %41, i1 %23) #2, !dbg !32
  %70 = or disjoint i32 %17, %21, !dbg !17
  %71 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !33
  %72 = insertelement <2 x i32> %71, i32 %21, i64 1, !dbg !33
  %73 = insertelement <2 x i32> <i32 1, i32 poison>, i32 %17, i64 1, !dbg !33
  %74 = ashr exact <2 x i32> %72, %73, !dbg !33
  %75 = or disjoint <2 x i32> %72, %73, !dbg !33
  %76 = shufflevector <2 x i32> %74, <2 x i32> %75, <2 x i32> <i32 0, i32 3>, !dbg !33
  %77 = or disjoint i32 %70, 32, !dbg !17
  %78 = icmp slt i32 %70, 64, !dbg !18
  %79 = icmp slt i32 %77, 64, !dbg !18
  %80 = sdiv i32 %70, 8, !dbg !34
  %81 = sdiv i32 %77, 8, !dbg !34
  %82 = srem <2 x i32> %76, <i32 2, i32 8>, !dbg !35
  %83 = shl nsw <2 x i32> %82, <i32 4, i32 1>, !dbg !36
  %84 = shl i32 %80, 5, !dbg !37
  %85 = shl i32 %81, 5, !dbg !37
  %86 = shl i32 %25, 8, !dbg !38
  %87 = extractelement <2 x i32> %83, i64 0, !dbg !39
  %88 = add i32 %87, %86, !dbg !39
  %89 = extractelement <2 x i32> %83, i64 1, !dbg !40
  %90 = add i32 %88, %89, !dbg !40
  %91 = add i32 %90, %84, !dbg !41
  %92 = add i32 %90, %85, !dbg !41
  %93 = sext i32 %91 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !42
  %95 = sext i32 %92 to i64, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !42
  %97 = shl i32 %9, 5, !dbg !43
  %98 = and i32 %97, 480, !dbg !43
  %99 = or disjoint i32 %98, %11, !dbg !43
  %100 = and i32 %12, 254, !dbg !43
  %101 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !43
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !43
  %103 = bitcast float %61 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !43
  %104 = or disjoint i32 %99, 8, !dbg !43
  %105 = lshr i32 %104, 2, !dbg !43
  %106 = and i32 %105, 122, !dbg !43
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !43
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %104, !dbg !43
  %109 = bitcast float %63 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !43
  %110 = or disjoint i32 %99, 16, !dbg !43
  %111 = lshr i32 %110, 2, !dbg !43
  %112 = and i32 %111, 124, !dbg !43
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !43
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %110, !dbg !43
  %115 = bitcast float %65 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !43
  %116 = or disjoint i32 %99, 24, !dbg !43
  %117 = lshr i32 %116, 2, !dbg !43
  %118 = and i32 %117, 126, !dbg !43
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !43
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %116, !dbg !43
  %121 = bitcast float %67 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %122 = lshr i32 %12, 2, !dbg !43
  %123 = and i32 %122, 62, !dbg !43
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !43
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %100, !dbg !43
  %126 = or disjoint i32 %100, 256, !dbg !43
  %127 = lshr i32 %126, 2, !dbg !43
  %128 = and i32 %127, 126, !dbg !43
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !43
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %126, !dbg !43
  %131 = load <2 x i32>, ptr addrspace(3) %130, align 8, !dbg !43
  %.extract = load i32, ptr addrspace(3) %125, align 8, !dbg !43
  %132 = getelementptr inbounds i8, ptr addrspace(3) %125, i32 4, !dbg !43
  %.extract7 = load i32, ptr addrspace(3) %132, align 4, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract7, ptr addrspace(1) %94, i1 %78) #2, !dbg !43
  %.extract8 = extractelement <2 x i32> %131, i64 0, !dbg !43
  %.extract9 = extractelement <2 x i32> %131, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract8, i32 %.extract9, ptr addrspace(1) %96, i1 %79) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjq7fqozuqqoevvjxwtrriuldvdd2aplp322qhxzxhlleuxrvre3.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", linkageName: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 38, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 44, column: 25, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 32, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 21, scope: !7)
!34 = !DILocation(line: 32, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 26, scope: !7)
!36 = !DILocation(line: 45, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 48, scope: !7)
!38 = !DILocation(line: 45, column: 57, scope: !7)
!39 = !DILocation(line: 45, column: 37, scope: !7)
!40 = !DILocation(line: 45, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 53, scope: !7)
!42 = !DILocation(line: 45, column: 25, scope: !7)
!43 = !DILocation(line: 45, column: 68, scope: !7)
!44 = !DILocation(line: 45, column: 4, scope: !7)
