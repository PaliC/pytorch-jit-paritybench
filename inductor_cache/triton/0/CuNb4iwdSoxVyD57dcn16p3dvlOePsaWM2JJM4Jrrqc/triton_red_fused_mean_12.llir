; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr4, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 512, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = sdiv i32 %10, 64, !dbg !16
  %15 = mul i32 %14, 8128
  %16 = add i32 %15, %10
  br i1 %11, label %.split.us, label %.split

.split.us:                                        ; preds = %4, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %4 ]
  %17 = phi <4 x float> [ %33, %.split.us ], [ zeroinitializer, %4 ]
  %18 = trunc i64 %indvars.iv7 to i32, !dbg !17
  %.tr9 = or disjoint i32 %13, %18, !dbg !17
  %19 = shl i32 %.tr9, 6, !dbg !17
  %20 = add i32 %16, %19, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !19
  %29 = insertelement <4 x i32> %28, i32 %25, i64 1, !dbg !19
  %30 = insertelement <4 x i32> %29, i32 %26, i64 2, !dbg !19
  %31 = insertelement <4 x i32> %30, i32 %27, i64 3, !dbg !19
  %32 = bitcast <4 x i32> %31 to <4 x float>, !dbg !19
  %33 = fadd <4 x float> %17, %32, !dbg !20
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !21
  %34 = icmp samesign ult i64 %indvars.iv7, 120, !dbg !21
  br i1 %34, label %.split.us, label %.split2.us, !dbg !21

.split:                                           ; preds = %4
  %35 = shl nuw nsw i32 %13, 6, !dbg !17
  %36 = add i32 %16, %35, !dbg !17
  %37 = sext i32 %36 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !18
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.1 = shl nuw nsw i32 %13, 6, !dbg !17
  %40 = or disjoint i32 %.tr.1, 512, !dbg !17
  %41 = add i32 %16, %40, !dbg !17
  %42 = sext i32 %41 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !18
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.2 = shl nuw nsw i32 %13, 6, !dbg !17
  %45 = or disjoint i32 %.tr.2, 1024, !dbg !17
  %46 = add i32 %16, %45, !dbg !17
  %47 = sext i32 %46 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.3 = shl nuw nsw i32 %13, 6, !dbg !17
  %50 = or disjoint i32 %.tr.3, 1536, !dbg !17
  %51 = add i32 %16, %50, !dbg !17
  %52 = sext i32 %51 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.4 = shl nuw nsw i32 %13, 6, !dbg !17
  %55 = or disjoint i32 %.tr.4, 2048, !dbg !17
  %56 = add i32 %16, %55, !dbg !17
  %57 = sext i32 %56 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.5 = shl nuw nsw i32 %13, 6, !dbg !17
  %60 = or disjoint i32 %.tr.5, 2560, !dbg !17
  %61 = add i32 %16, %60, !dbg !17
  %62 = sext i32 %61 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.6 = shl nuw nsw i32 %13, 6, !dbg !17
  %65 = or disjoint i32 %.tr.6, 3072, !dbg !17
  %66 = add i32 %16, %65, !dbg !17
  %67 = sext i32 %66 to i64, !dbg !18
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !18
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.7 = shl nuw nsw i32 %13, 6, !dbg !17
  %70 = or disjoint i32 %.tr.7, 3584, !dbg !17
  %71 = add i32 %16, %70, !dbg !17
  %72 = sext i32 %71 to i64, !dbg !18
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !18
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.8 = shl nuw nsw i32 %13, 6, !dbg !17
  %75 = or disjoint i32 %.tr.8, 4096, !dbg !17
  %76 = add i32 %16, %75, !dbg !17
  %77 = sext i32 %76 to i64, !dbg !18
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !18
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.9 = shl nuw nsw i32 %13, 6, !dbg !17
  %80 = or disjoint i32 %.tr.9, 4608, !dbg !17
  %81 = add i32 %16, %80, !dbg !17
  %82 = sext i32 %81 to i64, !dbg !18
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !18
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.10 = shl nuw nsw i32 %13, 6, !dbg !17
  %85 = or disjoint i32 %.tr.10, 5120, !dbg !17
  %86 = add i32 %16, %85, !dbg !17
  %87 = sext i32 %86 to i64, !dbg !18
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !18
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.11 = shl nuw nsw i32 %13, 6, !dbg !17
  %90 = or disjoint i32 %.tr.11, 5632, !dbg !17
  %91 = add i32 %16, %90, !dbg !17
  %92 = sext i32 %91 to i64, !dbg !18
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !18
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.12 = shl nuw nsw i32 %13, 6, !dbg !17
  %95 = or disjoint i32 %.tr.12, 6144, !dbg !17
  %96 = add i32 %16, %95, !dbg !17
  %97 = sext i32 %96 to i64, !dbg !18
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !18
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.13 = shl nuw nsw i32 %13, 6, !dbg !17
  %100 = or disjoint i32 %.tr.13, 6656, !dbg !17
  %101 = add i32 %16, %100, !dbg !17
  %102 = sext i32 %101 to i64, !dbg !18
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !18
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.14 = shl nuw nsw i32 %13, 6, !dbg !17
  %105 = or disjoint i32 %.tr.14, 7168, !dbg !17
  %106 = add i32 %16, %105, !dbg !17
  %107 = sext i32 %106 to i64, !dbg !18
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !18
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %.tr.15 = shl nuw nsw i32 %13, 6, !dbg !17
  %110 = or disjoint i32 %.tr.15, 7680, !dbg !17
  %111 = add i32 %16, %110, !dbg !17
  %112 = sext i32 %111 to i64, !dbg !18
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !18
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split
  %115 = phi <4 x float> [ zeroinitializer, %.split ], [ %33, %.split.us ], !dbg !12
  %116 = lshr i32 %7, 5, !dbg !12
  %117 = and i32 %7, 63, !dbg !12
  %118 = or disjoint i32 %6, %117, !dbg !13
  %119 = icmp slt i32 %118, 512, !dbg !14
  %120 = and i32 %7, 16, !dbg !12
  %121 = extractelement <4 x float> %115, i64 0, !dbg !22
  %122 = bitcast float %121 to i32, !dbg !22
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !22
  %124 = bitcast i32 %123 to float, !dbg !22
  %125 = fadd float %121, %124, !dbg !26
  %126 = extractelement <4 x float> %115, i64 1, !dbg !22
  %127 = bitcast float %126 to i32, !dbg !22
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !22
  %129 = bitcast i32 %128 to float, !dbg !22
  %130 = fadd float %126, %129, !dbg !26
  %131 = extractelement <4 x float> %115, i64 2, !dbg !22
  %132 = bitcast float %131 to i32, !dbg !22
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !22
  %134 = bitcast i32 %133 to float, !dbg !22
  %135 = fadd float %131, %134, !dbg !26
  %136 = extractelement <4 x float> %115, i64 3, !dbg !22
  %137 = bitcast float %136 to i32, !dbg !22
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !22
  %139 = bitcast i32 %138 to float, !dbg !22
  %140 = fadd float %136, %139, !dbg !26
  %141 = icmp eq i32 %120, 0, !dbg !22
  %142 = and i32 %116, 3, !dbg !22
  %143 = shl nuw nsw i32 %9, 2, !dbg !22
  %144 = or disjoint i32 %143, %142, !dbg !22
  %145 = zext nneg i32 %144 to i64, !dbg !22
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i64 %145, !dbg !22
  %147 = bitcast float %125 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 %141) #3, !dbg !22
  %148 = or disjoint i32 %143, 4, !dbg !22
  %149 = or disjoint i32 %148, %142, !dbg !22
  %150 = zext nneg i32 %149 to i64, !dbg !22
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i64 %150, !dbg !22
  %152 = bitcast float %130 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 %141) #3, !dbg !22
  %153 = or disjoint i32 %143, 8, !dbg !22
  %154 = or disjoint i32 %153, %142, !dbg !22
  %155 = zext nneg i32 %154 to i64, !dbg !22
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155, !dbg !22
  %157 = bitcast float %135 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 %141) #3, !dbg !22
  %158 = or disjoint i32 %143, 12, !dbg !22
  %159 = or disjoint i32 %158, %142, !dbg !22
  %160 = zext nneg i32 %159 to i64, !dbg !22
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i64 %160, !dbg !22
  %162 = bitcast float %140 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 %141) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %163 = icmp slt i32 %7, 256, !dbg !22
  %164 = sext i32 %7 to i64, !dbg !22
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !22
  %166 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %163) #3, !dbg !22
  %167 = bitcast i32 %166 to float, !dbg !22
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !22
  %169 = bitcast i32 %168 to float, !dbg !22
  %170 = fadd float %167, %169, !dbg !26
  %171 = bitcast float %170 to i32, !dbg !22
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !22
  %173 = bitcast i32 %172 to float, !dbg !22
  %174 = fadd float %170, %173, !dbg !26
  %175 = and i32 %7, 3, !dbg !22
  %176 = icmp eq i32 %175, 0, !dbg !22
  %177 = and i1 %163, %176, !dbg !22
  %178 = bitcast float %174 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %178, i1 %177) #3, !dbg !22
  %179 = add i32 %7, 128, !dbg !22
  %180 = sext i32 %179 to i64, !dbg !22
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !22
  %182 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %181, i1 %163) #3, !dbg !22
  %183 = bitcast i32 %182 to float, !dbg !22
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !22
  %185 = bitcast i32 %184 to float, !dbg !22
  %186 = fadd float %183, %185, !dbg !26
  %187 = bitcast float %186 to i32, !dbg !22
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !22
  %189 = bitcast i32 %188 to float, !dbg !22
  %190 = fadd float %186, %189, !dbg !26
  %191 = bitcast float %190 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %191, i1 %177) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %192 = zext nneg i32 %143 to i64, !dbg !22
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !22
  %194 = load i32, ptr addrspace(3) %193, align 16, !dbg !22
  %195 = zext nneg i32 %148 to i64, !dbg !22
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !22
  %197 = load i32, ptr addrspace(3) %196, align 16, !dbg !22
  %198 = zext nneg i32 %153 to i64, !dbg !22
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i64 %198, !dbg !22
  %200 = load i32, ptr addrspace(3) %199, align 16, !dbg !22
  %201 = zext nneg i32 %158 to i64, !dbg !22
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201, !dbg !22
  %203 = load i32, ptr addrspace(3) %202, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %204 = zext nneg i32 %9 to i64, !dbg !28
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %205, i32 %194, i32 %197, i32 %200, i32 %203, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %206 = zext nneg i32 %117 to i64, !dbg !28
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %206, !dbg !28
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !28
  %209 = sext i32 %118 to i64, !dbg !29
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !29
  %211 = and i32 %7, 64, !dbg !30
  %212 = icmp eq i32 %211, 0, !dbg !30
  %213 = and i1 %212, %119, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %210, i1 %213) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csz6kbmdw4kxxsnxk7fxud3xfqli5hzff6v7nras7qyddxgbkq7i.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_red_fused_mean_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_12", linkageName: "triton_red_fused_mean_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 47, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 57, scope: !7)
!20 = !DILocation(line: 36, column: 23, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 38, column: 25, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 38, column: 28, scope: !7)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
