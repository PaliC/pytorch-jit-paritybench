; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 7, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = and i32 %20, 127, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !13
  %23 = icmp slt i32 %22, 128, !dbg !14
  %24 = sdiv i32 %22, 16, !dbg !15
  %25 = srem i32 %24, 2, !dbg !16
  %26 = sext i32 %22 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %23) #3, !dbg !18
  %29 = sext i32 %25 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %23) #3, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #3, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %23) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %23) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %23) #3, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #3, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %23) #3, !dbg !32
  %45 = bitcast i32 %44 to float, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #3, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %23) #3, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %23) #3, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !39
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #3, !dbg !40
  %54 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !41
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !42
  %56 = bitcast i32 %55 to float, !dbg !42
  %57 = getelementptr float, ptr addrspace(1) %14, i64 %29, !dbg !43
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %23) #3, !dbg !44
  %59 = getelementptr float, ptr addrspace(1) %15, i64 %29, !dbg !45
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %23) #3, !dbg !46
  %61 = fadd float %34, 0x3EE4F8B580000000, !dbg !47
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %62, 0, !dbg !48
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %63, 0, !dbg !48
  br i1 %.not.i, label %69, label %64, !dbg !48

64:                                               ; preds = %17
  br i1 %.not1.i, label %67, label %65, !dbg !48

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

69:                                               ; preds = %17
  br i1 %.not1.i, label %72, label %70, !dbg !48

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !48
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %75 = fadd float %45, 0x3EE4F8B580000000, !dbg !50
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %76, 0, !dbg !51
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !51
  br i1 %.not.i1, label %83, label %78, !dbg !51

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !51

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !51

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !51
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !52
  %89 = fadd float %56, 0x3EE4F8B580000000, !dbg !53
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i6 = icmp eq i32 %90, 0, !dbg !54
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i9 = icmp eq i32 %91, 0, !dbg !54
  br i1 %.not.i6, label %97, label %92, !dbg !54

92:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %95, label %93, !dbg !54

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !54

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

__nv_sqrtf.exit10:                                ; preds = %93, %95, %98, %100
  %.0.i8 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !54
  %102 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %103 = insertelement <2 x i32> %102, i32 %51, i64 1, !dbg !18
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !18
  %105 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %106 = insertelement <2 x i32> %105, i32 %53, i64 1, !dbg !20
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !20
  %108 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %109 = insertelement <2 x i32> %108, i32 %58, i64 1, !dbg !24
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !24
  %111 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %112 = insertelement <2 x i32> %111, i32 %60, i64 1, !dbg !26
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !26
  %114 = bitcast i32 %40 to float, !dbg !28
  %115 = bitcast i32 %42 to float, !dbg !30
  %116 = fsub float %114, %115, !dbg !55
  %117 = fmul float %116, %88, !dbg !56
  %118 = bitcast i32 %47 to float, !dbg !34
  %119 = fmul float %117, %118, !dbg !57
  %120 = bitcast i32 %49 to float, !dbg !36
  %121 = fadd float %119, %120, !dbg !58
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !59
  %123 = fsub <2 x float> %104, %107, !dbg !60
  %124 = insertelement <2 x float> poison, float %74, i64 0, !dbg !61
  %125 = insertelement <2 x float> %124, float %122, i64 1, !dbg !61
  %126 = fmul <2 x float> %123, %125, !dbg !61
  %127 = fmul <2 x float> %126, %110, !dbg !62
  %128 = fadd <2 x float> %127, %113, !dbg !63
  %129 = extractelement <2 x float> %128, i64 0, !dbg !64
  %130 = fadd float %129, %121, !dbg !64
  %131 = extractelement <2 x float> %128, i64 1, !dbg !65
  %132 = fadd float %130, %131, !dbg !65
  %133 = fsub float 0.000000e+00, %132, !dbg !66
  %134 = fmul float %133, 0x3FF7154760000000, !dbg !70
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #3, !dbg !70
  %136 = fadd float %135, 1.000000e+00, !dbg !71
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %136) #3, !dbg !72
  %138 = fmul float %137, %132, !dbg !73
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !74
  %140 = bitcast float %138 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %139, i1 %23) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnjbzxbpsdot3ux2zwg4ewa6kihzb32se62wpsex3kg2dam7cnif.py", directory: "inductor_cache/nj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 26, scope: !7)
!49 = !DILocation(line: 46, column: 18, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 27, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 19, scope: !7)
!60 = !DILocation(line: 41, column: 18, scope: !7)
!61 = !DILocation(line: 49, column: 19, scope: !7)
!62 = !DILocation(line: 50, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 47, column: 30, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!69 = !DILocation(line: 70, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 28, scope: !7)
!75 = !DILocation(line: 72, column: 40, scope: !7)
!76 = !DILocation(line: 72, column: 4, scope: !7)
