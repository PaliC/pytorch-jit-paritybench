; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 33554432, !dbg !14
  %15 = mul i32 %14, 33554432, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = sdiv i32 %13, 262144, !dbg !16
  %.lhs.trunc = trunc nsw i32 %16 to i16, !dbg !17
  %17 = srem i16 %.lhs.trunc, 128, !dbg !17
  %18 = add nsw i32 %.decomposed, 33554432, !dbg !18
  %19 = shl i32 %14, 26, !dbg !19
  %20 = add nuw i32 %18, %19, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !22
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %26 = bitcast i32 %24 to float, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = sext i16 %17 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fsub float %26, %31, !dbg !31
  %50 = fsub float %27, %33, !dbg !31
  %51 = fadd float %36, 0x3F1A36E2E0000000, !dbg !32
  %52 = fadd float %38, 0x3F1A36E2E0000000, !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %53, 0, !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %54, 0, !dbg !33
  br i1 %.not.i, label %60, label %55, !dbg !33

55:                                               ; preds = %7
  br i1 %.not1.i, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

60:                                               ; preds = %7
  br i1 %.not1.i, label %63, label %61, !dbg !33

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !33
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %65, 0, !dbg !33
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !33
  br i1 %.not.i1, label %72, label %67, !dbg !33

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !33

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !33
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %79 = fmul float %49, %77, !dbg !35
  %80 = fmul float %50, %78, !dbg !35
  %81 = fmul float %79, %41, !dbg !36
  %82 = fmul float %80, %43, !dbg !36
  %83 = fadd float %81, %46, !dbg !37
  %84 = fadd float %82, %48, !dbg !37
  %85 = fmul float %83, 0x3FF7154760000000, !dbg !38
  %86 = tail call float @llvm.nvvm.round.f(float %85) #3, !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %87, 0, !dbg !38
  %88 = tail call float @llvm.nvvm.fabs.ftz.f(float %83) #3, !dbg !38
  %89 = tail call float @llvm.nvvm.fabs.f(float %83) #3, !dbg !38
  %.03.i = select i1 %.not.i6, float %89, float %88, !dbg !38
  %90 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !38
  %t.0.i = select i1 %90, float 0.000000e+00, float %86, !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %93 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !38
  %j.0.i = select i1 %93, float 1.270000e+02, float %t.0.i, !dbg !38
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not8.i = icmp eq i32 %99, 0, !dbg !38
  br i1 %.not8.i, label %102, label %100, !dbg !38

100:                                              ; preds = %__nv_sqrtf.exit5
  %101 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !38
  br label %__nv_expm1f.exit, !dbg !38

102:                                              ; preds = %__nv_sqrtf.exit5
  %103 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !38
  br label %__nv_expm1f.exit, !dbg !38

__nv_expm1f.exit:                                 ; preds = %100, %102
  %.0.i7 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !38
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %105 = fmul float %84, 0x3FF7154760000000, !dbg !38
  %106 = tail call float @llvm.nvvm.round.f(float %105) #3, !dbg !38
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i10 = icmp eq i32 %107, 0, !dbg !38
  %108 = tail call float @llvm.nvvm.fabs.ftz.f(float %84) #3, !dbg !38
  %109 = tail call float @llvm.nvvm.fabs.f(float %84) #3, !dbg !38
  %.03.i11 = select i1 %.not.i10, float %109, float %108, !dbg !38
  %110 = fcmp olt float %.03.i11, 0x3FDA3D70A0000000, !dbg !38
  %t.0.i12 = select i1 %110, float 0.000000e+00, float %106, !dbg !38
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %113 = fcmp oeq float %t.0.i12, 1.280000e+02, !dbg !38
  %j.0.i13 = select i1 %113, float 1.270000e+02, float %t.0.i12, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not8.i14 = icmp eq i32 %119, 0, !dbg !38
  br i1 %.not8.i14, label %122, label %120, !dbg !38

120:                                              ; preds = %__nv_expm1f.exit
  %121 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i13) #3, !dbg !38
  br label %__nv_expm1f.exit36, !dbg !38

122:                                              ; preds = %__nv_expm1f.exit
  %123 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i13) #3, !dbg !38
  br label %__nv_expm1f.exit36, !dbg !38

__nv_expm1f.exit36:                               ; preds = %120, %122
  %.0.i15 = phi float [ %121, %120 ], [ %123, %122 ], !dbg !38
  %124 = fcmp oeq float %83, 0.000000e+00, !dbg !38
  %125 = fadd float %83, %83, !dbg !38
  %126 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !38
  %127 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !38
  %.not9.i = icmp eq i32 %104, 0, !dbg !38
  %.not7.i = icmp eq i32 %98, 0, !dbg !38
  %.not6.i = icmp eq i32 %97, 0, !dbg !38
  %.not5.i = icmp eq i32 %96, 0, !dbg !38
  %.not4.i = icmp eq i32 %95, 0, !dbg !38
  %.not3.i = icmp eq i32 %94, 0, !dbg !38
  %.not2.i8 = icmp eq i32 %92, 0, !dbg !38
  %128 = fneg float %t.0.i, !dbg !38
  %.not1.i9 = icmp eq i32 %91, 0, !dbg !38
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %128, float 0x3FE62E4000000000, float %83) #3, !dbg !38
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %128, float 0x3FE62E4000000000, float %83) #3, !dbg !38
  %.04.i = select i1 %.not1.i9, float %129, float %130, !dbg !38
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %128, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !38
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %128, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !38
  %.05.i = select i1 %.not2.i8, float %131, float %132, !dbg !38
  %133 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !38
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !38
  %.07.i = select i1 %.not3.i, float %133, float %134, !dbg !38
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !38
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !38
  %.08.i = select i1 %.not4.i, float %135, float %136, !dbg !38
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !38
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !38
  %.09.i = select i1 %.not5.i, float %137, float %138, !dbg !38
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !38
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !38
  %.06.i = select i1 %.not6.i, float %139, float %140, !dbg !38
  %141 = fmul float %.05.i, %.06.i, !dbg !38
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %141, float %.05.i, float %.05.i) #3, !dbg !38
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %141, float %.05.i, float %.05.i) #3, !dbg !38
  %.01.i = select i1 %.not7.i, float %142, float %143, !dbg !38
  %144 = fadd float %.0.i7, -1.000000e+00, !dbg !38
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i7, float %144) #3, !dbg !38
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i7, float %144) #3, !dbg !38
  %.02.i = select i1 %.not9.i, float %145, float %146, !dbg !38
  %147 = fadd float %.02.i, %.02.i, !dbg !38
  %u.0.i = select i1 %93, float %147, float %.02.i, !dbg !38
  %u.1.i = select i1 %127, float 0x7FF0000000000000, float %u.0.i, !dbg !38
  %u.2.i = select i1 %126, float -1.000000e+00, float %u.1.i, !dbg !38
  %u.3.i = select i1 %124, float %125, float %u.2.i, !dbg !38
  %148 = fcmp ogt float %84, 0.000000e+00, !dbg !39
  %149 = fcmp ogt float %83, 0.000000e+00, !dbg !39
  %.not7.i16 = icmp eq i32 %118, 0, !dbg !38
  %.not6.i17 = icmp eq i32 %117, 0, !dbg !38
  %.not5.i18 = icmp eq i32 %116, 0, !dbg !38
  %.not4.i19 = icmp eq i32 %115, 0, !dbg !38
  %.not3.i20 = icmp eq i32 %114, 0, !dbg !38
  %.not2.i21 = icmp eq i32 %112, 0, !dbg !38
  %150 = fneg float %t.0.i12, !dbg !38
  %.not1.i22 = icmp eq i32 %111, 0, !dbg !38
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %150, float 0x3FE62E4000000000, float %84) #3, !dbg !38
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %150, float 0x3FE62E4000000000, float %84) #3, !dbg !38
  %.04.i23 = select i1 %.not1.i22, float %151, float %152, !dbg !38
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %150, float 0x3EB7F7D1C0000000, float %.04.i23) #3, !dbg !38
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %150, float 0x3EB7F7D1C0000000, float %.04.i23) #3, !dbg !38
  %.05.i24 = select i1 %.not2.i21, float %153, float %154, !dbg !38
  %155 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i24, float 0x3F812ACC60000000) #3, !dbg !38
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i24, float 0x3F812ACC60000000) #3, !dbg !38
  %.07.i25 = select i1 %.not3.i20, float %155, float %156, !dbg !38
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i25, float %.05.i24, float 0x3FA5557C60000000) #3, !dbg !38
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i25, float %.05.i24, float 0x3FA5557C60000000) #3, !dbg !38
  %.08.i26 = select i1 %.not4.i19, float %157, float %158, !dbg !38
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i26, float %.05.i24, float 0x3FC5553EC0000000) #3, !dbg !38
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i26, float %.05.i24, float 0x3FC5553EC0000000) #3, !dbg !38
  %.09.i27 = select i1 %.not5.i18, float %159, float %160, !dbg !38
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i27, float %.05.i24, float 0x3FDFFFFFC0000000) #3, !dbg !38
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i27, float %.05.i24, float 0x3FDFFFFFC0000000) #3, !dbg !38
  %.06.i28 = select i1 %.not6.i17, float %161, float %162, !dbg !38
  %163 = fmul float %.05.i24, %.06.i28, !dbg !38
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %163, float %.05.i24, float %.05.i24) #3, !dbg !38
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %163, float %.05.i24, float %.05.i24) #3, !dbg !38
  %.01.i29 = select i1 %.not7.i16, float %164, float %165, !dbg !38
  %166 = fadd float %.0.i15, -1.000000e+00, !dbg !38
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not9.i30 = icmp eq i32 %167, 0, !dbg !38
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i29, float %.0.i15, float %166) #3, !dbg !38
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i29, float %.0.i15, float %166) #3, !dbg !38
  %.02.i31 = select i1 %.not9.i30, float %169, float %168, !dbg !38
  %170 = fadd float %.02.i31, %.02.i31, !dbg !38
  %u.0.i32 = select i1 %113, float %170, float %.02.i31, !dbg !38
  %171 = fcmp ogt float %j.0.i13, 1.280000e+02, !dbg !38
  %u.1.i33 = select i1 %171, float 0x7FF0000000000000, float %u.0.i32, !dbg !38
  %172 = fcmp olt float %j.0.i13, -2.500000e+01, !dbg !38
  %u.2.i34 = select i1 %172, float -1.000000e+00, float %u.1.i33, !dbg !38
  %173 = fcmp oeq float %84, 0.000000e+00, !dbg !38
  %174 = fadd float %84, %84, !dbg !38
  %u.3.i35 = select i1 %173, float %174, float %u.2.i34, !dbg !38
  %175 = select i1 %149, float %83, float %u.3.i, !dbg !40
  %176 = select i1 %148, float %84, float %u.3.i35, !dbg !40
  %177 = sext i32 %13 to i64, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !41
  %179 = bitcast float %175 to i32, !dbg !42
  %180 = bitcast float %176 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmqvuvbhp422oefoceoyhf5weiyb6nbou6n6xnqoa44o22kvrrpv.py", directory: "inductor_cache/mq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 31, scope: !7)
!18 = !DILocation(line: 28, column: 41, scope: !7)
!19 = !DILocation(line: 28, column: 55, scope: !7)
!20 = !DILocation(line: 28, column: 46, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 60, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 28, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 28, scope: !7)
!42 = !DILocation(line: 50, column: 40, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
