; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %13, !dbg !15
  %21 = or disjoint i32 %9, %14, !dbg !15
  %22 = or disjoint i32 %9, %15, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %27 = sdiv i32 %.frozen, 64, !dbg !16
  %28 = mul i32 %27, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = shl i32 %19, 6, !dbg !18
  %30 = shl i32 %20, 6, !dbg !18
  %31 = shl i32 %21, 6, !dbg !18
  %32 = shl i32 %22, 6, !dbg !18
  %33 = shl i32 %23, 6, !dbg !18
  %34 = shl i32 %24, 6, !dbg !18
  %35 = shl i32 %25, 6, !dbg !18
  %36 = shl i32 %26, 6, !dbg !18
  %37 = shl i32 %27, 18, !dbg !19
  %38 = add i32 %37, %.decomposed, !dbg !20
  %39 = add i32 %38, %29, !dbg !21
  %40 = add i32 %38, %30, !dbg !21
  %41 = add i32 %38, %31, !dbg !21
  %42 = add i32 %38, %32, !dbg !21
  %43 = add i32 %38, %33, !dbg !21
  %44 = add i32 %38, %34, !dbg !21
  %45 = add i32 %38, %35, !dbg !21
  %46 = add i32 %38, %36, !dbg !21
  %47 = sext i32 %39 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %40 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %41 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %42 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %43 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %44 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %45 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %46 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %7) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %7) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %7) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %7) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %7) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %7) #3, !dbg !23
  %71 = shl i32 %27, 12, !dbg !24
  %72 = add i32 %19, %71, !dbg !25
  %73 = add i32 %71, %23, !dbg !25
  %74 = sext i32 %72 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = sext i32 %73 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %7) #3, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = bitcast i32 %80 to float, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = bitcast i32 %82 to float, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %7) #3, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = bitcast i32 %89 to float, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = bitcast i32 %91 to float, !dbg !27
  %96 = fadd float %83, 0x3E112E0BE0000000, !dbg !28
  %97 = fadd float %84, 0x3E112E0BE0000000, !dbg !28
  %98 = fadd float %85, 0x3E112E0BE0000000, !dbg !28
  %99 = fadd float %86, 0x3E112E0BE0000000, !dbg !28
  %100 = fadd float %92, 0x3E112E0BE0000000, !dbg !28
  %101 = fadd float %93, 0x3E112E0BE0000000, !dbg !28
  %102 = fadd float %94, 0x3E112E0BE0000000, !dbg !28
  %103 = fadd float %95, 0x3E112E0BE0000000, !dbg !28
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %104, 0, !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %105, 0, !dbg !29
  br i1 %.not.i, label %111, label %106, !dbg !29

106:                                              ; preds = %5
  br i1 %.not1.i, label %109, label %107, !dbg !29

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

111:                                              ; preds = %5
  br i1 %.not1.i, label %114, label %112, !dbg !29

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !29
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %116, 0, !dbg !29
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %117, 0, !dbg !29
  br i1 %.not.i1, label %123, label %118, !dbg !29

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !29

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !29

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %119, %121, %124, %126
  %.0.i3 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !29
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %128, 0, !dbg !29
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %129, 0, !dbg !29
  br i1 %.not.i6, label %135, label %130, !dbg !29

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !29

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

135:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %138, label %136, !dbg !29

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %131, %133, %136, %138
  %.0.i8 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !29
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %140, 0, !dbg !29
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %141, 0, !dbg !29
  br i1 %.not.i11, label %147, label %142, !dbg !29

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !29

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

147:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %150, label %148, !dbg !29

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %143, %145, %148, %150
  %.0.i13 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !29
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %152, 0, !dbg !29
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %153, 0, !dbg !29
  br i1 %.not.i16, label %159, label %154, !dbg !29

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !29

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

159:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %162, label %160, !dbg !29

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %155, %157, %160, %162
  %.0.i18 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !29
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %164, 0, !dbg !29
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %165, 0, !dbg !29
  br i1 %.not.i21, label %171, label %166, !dbg !29

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !29

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

171:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %174, label %172, !dbg !29

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %167, %169, %172, %174
  %.0.i23 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !29
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %176, 0, !dbg !29
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %177, 0, !dbg !29
  br i1 %.not.i26, label %183, label %178, !dbg !29

178:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %181, label %179, !dbg !29

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

183:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %186, label %184, !dbg !29

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %179, %181, %184, %186
  %.0.i28 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !29
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %188, 0, !dbg !29
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %189, 0, !dbg !29
  br i1 %.not.i31, label %195, label %190, !dbg !29

190:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %193, label %191, !dbg !29

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

195:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %198, label %196, !dbg !29

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %191, %193, %196, %198
  %.0.i33 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !29
  %200 = bitcast i32 %70 to float, !dbg !23
  %201 = bitcast i32 %69 to float, !dbg !23
  %202 = bitcast i32 %68 to float, !dbg !23
  %203 = bitcast i32 %67 to float, !dbg !23
  %204 = bitcast i32 %66 to float, !dbg !23
  %205 = bitcast i32 %65 to float, !dbg !23
  %206 = bitcast i32 %64 to float, !dbg !23
  %207 = bitcast i32 %63 to float, !dbg !23
  %208 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %209 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !30
  %210 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !30
  %211 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !30
  %212 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !30
  %213 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !30
  %214 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !30
  %215 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !30
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %208) #3, !dbg !31
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %209) #3, !dbg !31
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %210) #3, !dbg !31
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %211) #3, !dbg !31
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %212) #3, !dbg !31
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %213) #3, !dbg !31
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %214) #3, !dbg !31
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %215) #3, !dbg !31
  %224 = shl i32 %6, 12, !dbg !32
  %225 = add i32 %19, %224, !dbg !33
  %226 = add i32 %224, %23, !dbg !33
  %227 = sext i32 %225 to i64, !dbg !34
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !34
  %229 = sext i32 %226 to i64, !dbg !34
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !34
  %231 = bitcast float %216 to i32, !dbg !35
  %232 = bitcast float %217 to i32, !dbg !35
  %233 = bitcast float %218 to i32, !dbg !35
  %234 = bitcast float %219 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %232, i32 %233, i32 %234, ptr addrspace(1) %228, i1 %7) #3, !dbg !35
  %235 = bitcast float %220 to i32, !dbg !35
  %236 = bitcast float %221 to i32, !dbg !35
  %237 = bitcast float %222 to i32, !dbg !35
  %238 = bitcast float %223 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %230, i1 %7) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2ykvsflsja2vnvxeiuxyfb3bkpmhzjf6cmykvmi6getvkxmkwc.py", directory: "inductor_cache/b2")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_15", linkageName: "triton_poi_fused_add_div_sqrt_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 50, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 40, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 35, scope: !7)
!33 = !DILocation(line: 40, column: 30, scope: !7)
!34 = !DILocation(line: 40, column: 25, scope: !7)
!35 = !DILocation(line: 40, column: 46, scope: !7)
!36 = !DILocation(line: 40, column: 4, scope: !7)
