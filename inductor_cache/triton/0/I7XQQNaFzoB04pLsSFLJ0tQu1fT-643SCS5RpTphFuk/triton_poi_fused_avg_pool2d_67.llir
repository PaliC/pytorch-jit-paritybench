; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_67(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %11 = lshr exact i32 %10, 2, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = shl i32 %7, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = or disjoint i32 %15, 64, !dbg !13
  %18 = or disjoint i32 %15, 96, !dbg !13
  %19 = or disjoint i32 %15, 128, !dbg !13
  %20 = or disjoint i32 %15, 160, !dbg !13
  %21 = or disjoint i32 %15, 192, !dbg !13
  %22 = or disjoint i32 %15, 224, !dbg !13
  %23 = or disjoint i32 %6, %14, !dbg !13
  %24 = icmp slt i32 %15, 2112, !dbg !14
  %25 = icmp slt i32 %16, 2112, !dbg !14
  %26 = icmp slt i32 %17, 2112, !dbg !14
  %27 = icmp slt i32 %18, 2112, !dbg !14
  %28 = icmp slt i32 %19, 2112, !dbg !14
  %29 = icmp slt i32 %20, 2112, !dbg !14
  %30 = icmp slt i32 %21, 2112, !dbg !14
  %31 = icmp slt i32 %22, 2112, !dbg !14
  %32 = icmp slt i32 %23, 2112, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %34 = shl i32 %33, 2, !dbg !16
  %35 = and i32 %7, 3, !dbg !17
  %.lobit1 = lshr exact i32 %10, 6, !dbg !17
  %36 = or disjoint i32 %34, %35, !dbg !18
  %37 = or disjoint i32 %34, %.lobit1, !dbg !18
  %38 = or disjoint i32 %37, 2, !dbg !18
  %39 = icmp slt i32 %36, 4, !dbg !19
  %40 = icmp slt i32 %37, 4, !dbg !19
  %41 = icmp slt i32 %38, 4, !dbg !19
  %.frozen = freeze i32 %36, !dbg !20
  %42 = sdiv i32 %.frozen, 2, !dbg !20
  %43 = mul i32 %42, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %.frozen17 = freeze i32 %23, !dbg !22
  %44 = sdiv i32 %.frozen17, 528, !dbg !22
  %45 = mul i32 %44, 528, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %45, !dbg !23
  %46 = shl nsw i32 %.decomposed, 1, !dbg !24
  %47 = add nsw i32 %46, 6, !dbg !25
  %48 = mul i32 %42, 10, !dbg !26
  %49 = add i32 %47, %48, !dbg !27
  %50 = mul i32 %15, 25, !dbg !28
  %51 = mul i32 %16, 25, !dbg !28
  %52 = mul i32 %17, 25, !dbg !28
  %53 = mul i32 %18, 25, !dbg !28
  %54 = mul i32 %19, 25, !dbg !28
  %55 = mul i32 %20, 25, !dbg !28
  %56 = mul i32 %21, 25, !dbg !28
  %57 = mul i32 %22, 25, !dbg !28
  %58 = add i32 %49, %50, !dbg !29
  %59 = add i32 %49, %51, !dbg !29
  %60 = add i32 %49, %52, !dbg !29
  %61 = add i32 %49, %53, !dbg !29
  %62 = add i32 %49, %54, !dbg !29
  %63 = add i32 %49, %55, !dbg !29
  %64 = add i32 %49, %56, !dbg !29
  %65 = add i32 %49, %57, !dbg !29
  %66 = sext i32 %58 to i64, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !30
  %68 = sext i32 %59 to i64, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !30
  %70 = sext i32 %60 to i64, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !30
  %72 = sext i32 %61 to i64, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !30
  %74 = sext i32 %62 to i64, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !30
  %76 = sext i32 %63 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !30
  %78 = sext i32 %64 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %65 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = and i1 %24, %39, !dbg !31
  %83 = and i1 %25, %39, !dbg !31
  %84 = and i1 %26, %39, !dbg !31
  %85 = and i1 %27, %39, !dbg !31
  %86 = and i1 %28, %39, !dbg !31
  %87 = and i1 %29, %39, !dbg !31
  %88 = and i1 %30, %39, !dbg !31
  %89 = and i1 %31, %39, !dbg !31
  %90 = and i1 %32, %40, !dbg !31
  %91 = and i1 %41, %32, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %82) #2, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %83) #2, !dbg !32
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %84) #2, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %85) #2, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %86) #2, !dbg !32
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %87) #2, !dbg !32
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %88) #2, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %89) #2, !dbg !32
  %100 = mul i32 %37, 528, !dbg !33
  %101 = mul i32 %38, 528, !dbg !33
  %102 = mul i32 %44, 2112, !dbg !34
  %103 = add i32 %102, %.decomposed18, !dbg !35
  %104 = add i32 %103, %100, !dbg !36
  %105 = add i32 %103, %101, !dbg !36
  %106 = sext i32 %104 to i64, !dbg !37
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !37
  %108 = sext i32 %105 to i64, !dbg !37
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !37
  %110 = shl i32 %7, 8, !dbg !38
  %111 = and i32 %110, 768, !dbg !38
  %112 = or disjoint i32 %111, %9, !dbg !38
  %113 = or disjoint i32 %112, %11, !dbg !38
  %114 = and i32 %13, 508, !dbg !38
  %115 = lshr exact i32 %111, 4, !dbg !38
  %116 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !38
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %113, !dbg !38
  %118 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !38
  %119 = or disjoint i32 %113, 32, !dbg !38
  %120 = getelementptr float, ptr addrspace(3) %116, i32 %119, !dbg !38
  %121 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !38
  %122 = or disjoint i32 %113, 64, !dbg !38
  %123 = getelementptr float, ptr addrspace(3) %116, i32 %122, !dbg !38
  %124 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !38
  %125 = or disjoint i32 %113, 96, !dbg !38
  %126 = getelementptr float, ptr addrspace(3) %116, i32 %125, !dbg !38
  %127 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !38
  %128 = or disjoint i32 %113, 128, !dbg !38
  %129 = getelementptr float, ptr addrspace(3) %116, i32 %128, !dbg !38
  %130 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !38
  %131 = or disjoint i32 %113, 160, !dbg !38
  %132 = getelementptr float, ptr addrspace(3) %116, i32 %131, !dbg !38
  %133 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !38
  %134 = or disjoint i32 %113, 192, !dbg !38
  %135 = getelementptr float, ptr addrspace(3) %116, i32 %134, !dbg !38
  %136 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !38
  %137 = or disjoint i32 %113, 224, !dbg !38
  %138 = getelementptr float, ptr addrspace(3) %116, i32 %137, !dbg !38
  %139 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %140 = lshr i32 %13, 6, !dbg !38
  %141 = and i32 %140, 4, !dbg !38
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !38
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %114, !dbg !38
  %144 = or disjoint i32 %114, 512, !dbg !38
  %145 = lshr i32 %144, 6, !dbg !38
  %146 = and i32 %145, 12, !dbg !38
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !38
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %144, !dbg !38
  %149 = load <4 x i32>, ptr addrspace(3) %148, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %143, align 16, !dbg !38
  %150 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 4, !dbg !38
  %.extract10 = load i32, ptr addrspace(3) %150, align 4, !dbg !38
  %151 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 8, !dbg !38
  %.extract11 = load i32, ptr addrspace(3) %151, align 8, !dbg !38
  %152 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 12, !dbg !38
  %.extract12 = load i32, ptr addrspace(3) %152, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %107, i1 %90) #2, !dbg !38
  %.extract13 = extractelement <4 x i32> %149, i64 0, !dbg !38
  %.extract14 = extractelement <4 x i32> %149, i64 1, !dbg !38
  %.extract15 = extractelement <4 x i32> %149, i64 2, !dbg !38
  %.extract16 = extractelement <4 x i32> %149, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %109, i1 %91) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmquepebd2wo2wfaua6lz3jybgsmwxi6rzzv5cfzd73tojemfqxw.py", directory: "inductor_cache/mq")
!4 = !{ptr @triton_poi_fused_avg_pool2d_67, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_67, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_67", linkageName: "triton_poi_fused_avg_pool2d_67", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 41, scope: !7)
!28 = !DILocation(line: 34, column: 52, scope: !7)
!29 = !DILocation(line: 34, column: 49, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 65, scope: !7)
!32 = !DILocation(line: 34, column: 57, scope: !7)
!33 = !DILocation(line: 37, column: 34, scope: !7)
!34 = !DILocation(line: 37, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 39, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
