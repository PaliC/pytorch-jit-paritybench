; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = icmp slt i32 %7, 256, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %14 = shl i32 %13, 8, !dbg !16
  %15 = shl i32 %8, 2, !dbg !17
  %16 = and i32 %15, 252, !dbg !17
  %17 = and i32 %8, 127, !dbg !17
  %18 = or disjoint i32 %14, %16, !dbg !18
  %19 = or disjoint i32 %14, %17, !dbg !18
  %20 = or disjoint i32 %19, 128, !dbg !18
  %21 = icmp slt i32 %18, 256, !dbg !19
  %22 = icmp slt i32 %19, 256, !dbg !19
  %23 = icmp slt i32 %20, 256, !dbg !19
  %.frozen = freeze i32 %7, !dbg !20
  %24 = sdiv i32 %.frozen, 64, !dbg !20
  %25 = mul i32 %24, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = shl i32 %10, 8, !dbg !22
  %27 = add i32 %18, %26, !dbg !23
  %28 = sext i32 %27 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = and i1 %11, %21, !dbg !25
  %31 = and i1 %12, %22, !dbg !25
  %32 = and i1 %23, %12, !dbg !25
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #2, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !26
  %38 = shl i32 %19, 6, !dbg !27
  %39 = shl i32 %20, 6, !dbg !27
  %40 = shl i32 %24, 14, !dbg !28
  %41 = add i32 %40, %.decomposed, !dbg !29
  %42 = add i32 %41, %38, !dbg !30
  %43 = add i32 %41, %39, !dbg !30
  %44 = sext i32 %42 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = sext i32 %43 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = shl i32 %8, 3, !dbg !32
  %49 = and i32 %48, 504, !dbg !32
  %50 = or disjoint i32 %49, %.lobit, !dbg !32
  %51 = shl i32 %8, 1, !dbg !32
  %52 = and i32 %51, 254, !dbg !32
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !32
  %54 = getelementptr inbounds float, ptr addrspace(3) %53, i32 %50, !dbg !32
  %55 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #2, !dbg !32
  %56 = or disjoint i32 %50, 2, !dbg !32
  %57 = or disjoint i32 %49, 2, !dbg !32
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !32
  %59 = getelementptr inbounds float, ptr addrspace(3) %58, i32 %56, !dbg !32
  %60 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !32
  %61 = or disjoint i32 %50, 4, !dbg !32
  %62 = or disjoint i32 %49, 4, !dbg !32
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !32
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %61, !dbg !32
  %65 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !32
  %66 = or disjoint i32 %50, 6, !dbg !32
  %67 = or disjoint i32 %49, 6, !dbg !32
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !32
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %66, !dbg !32
  %70 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !32
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %52, !dbg !32
  %73 = or disjoint i32 %52, 256, !dbg !32
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !32
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %73, !dbg !32
  %76 = load <2 x i32>, ptr addrspace(3) %75, align 8, !dbg !32
  %.extract = load i32, ptr addrspace(3) %72, align 8, !dbg !32
  %77 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 4, !dbg !32
  %.extract5 = load i32, ptr addrspace(3) %77, align 4, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %45, i1 %31) #2, !dbg !32
  %.extract6 = extractelement <2 x i32> %76, i64 0, !dbg !32
  %.extract7 = extractelement <2 x i32> %76, i64 1, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %47, i1 %32) #2, !dbg !32
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %78, i1 %31) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %79, i1 %32) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnmpkhb2we2udapmdtlmnwwsrm4pb4gdrad7yc5fumhsh5pq5ws.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 38, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 55, scope: !7)
!35 = !DILocation(line: 34, column: 4, scope: !7)
