; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_52(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %19 = or disjoint i32 %16, 514, !dbg !13
  %20 = icmp slt i32 %16, 277248, !dbg !14
  %21 = icmp slt i32 %18, 277248, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %22 = sdiv i32 %.frozen, 304, !dbg !15
  %.frozen1 = freeze i32 %18, !dbg !15
  %23 = sdiv i32 %.frozen1, 304, !dbg !15
  %24 = srem i32 %22, 228, !dbg !16
  %25 = srem i32 %23, 228, !dbg !16
  %26 = mul i32 %22, 304, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = srem i32 %17, 304, !dbg !17
  %28 = mul i32 %23, 304, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %28, !dbg !17
  %29 = srem i32 %19, 304, !dbg !17
  %30 = sdiv i32 %16, 69312, !dbg !18
  %31 = sdiv i32 %18, 69312, !dbg !18
  %32 = sext i32 %24 to i64, !dbg !19
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = sext i32 %25 to i64, !dbg !19
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %21) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %21) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %21) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %21) #1, !dbg !20
  %44 = sext i32 %.decomposed to i64, !dbg !21
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !21
  %46 = sext i32 %27 to i64, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !21
  %48 = sext i32 %.decomposed2 to i64, !dbg !21
  %49 = getelementptr i64, ptr addrspace(1) %2, i64 %48, !dbg !21
  %50 = sext i32 %29 to i64, !dbg !21
  %51 = getelementptr i64, ptr addrspace(1) %2, i64 %50, !dbg !21
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 %20) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 %20) #1, !dbg !22
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !22
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !22
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 %21) #1, !dbg !22
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !22
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !22
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %51, i1 %21) #1, !dbg !22
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !22
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !23
  %65 = getelementptr i64, ptr addrspace(1) %5, i64 %44, !dbg !24
  %66 = getelementptr i64, ptr addrspace(1) %5, i64 %46, !dbg !24
  %67 = getelementptr i64, ptr addrspace(1) %5, i64 %48, !dbg !24
  %68 = getelementptr i64, ptr addrspace(1) %5, i64 %50, !dbg !24
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %65, i1 %20) #1, !dbg !25
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !25
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !25
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %66, i1 %20) #1, !dbg !25
  %73 = extractvalue { i64, i64 } %72, 0, !dbg !25
  %74 = extractvalue { i64, i64 } %72, 1, !dbg !25
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %67, i1 %21) #1, !dbg !25
  %76 = extractvalue { i64, i64 } %75, 0, !dbg !25
  %77 = extractvalue { i64, i64 } %75, 1, !dbg !25
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %68, i1 %21) #1, !dbg !25
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !25
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %20) #1, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %21) #1, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !27
  %93 = getelementptr i64, ptr addrspace(1) %7, i64 %32, !dbg !28
  %94 = getelementptr i64, ptr addrspace(1) %7, i64 %34, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %20) #1, !dbg !29
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %20) #1, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %20) #1, !dbg !29
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %20) #1, !dbg !29
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !29
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !29
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !29
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %21) #1, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %20) #1, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %20) #1, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %20) #1, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %20) #1, !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %21) #1, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %21) #1, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %21) #1, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %21) #1, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = lshr i64 %36, 58, !dbg !32
  %122 = and i64 %121, 32, !dbg !32
  %123 = add i64 %122, %36, !dbg !32
  %124 = lshr i64 %40, 58, !dbg !32
  %125 = and i64 %124, 32, !dbg !32
  %126 = add i64 %125, %40, !dbg !32
  %127 = lshr i64 %53, 58, !dbg !33
  %128 = and i64 %127, 32, !dbg !33
  %129 = lshr i64 %54, 58, !dbg !33
  %130 = and i64 %129, 32, !dbg !33
  %131 = lshr i64 %56, 58, !dbg !33
  %132 = and i64 %131, 32, !dbg !33
  %133 = lshr i64 %57, 58, !dbg !33
  %134 = and i64 %133, 32, !dbg !33
  %135 = lshr i64 %59, 58, !dbg !33
  %136 = and i64 %135, 32, !dbg !33
  %137 = lshr i64 %60, 58, !dbg !33
  %138 = and i64 %137, 32, !dbg !33
  %139 = lshr i64 %62, 58, !dbg !33
  %140 = and i64 %139, 32, !dbg !33
  %141 = lshr i64 %63, 58, !dbg !33
  %142 = and i64 %141, 32, !dbg !33
  %143 = shl i64 %123, 5, !dbg !34
  %144 = shl i64 %126, 5, !dbg !34
  %145 = shl nsw i32 %30, 10, !dbg !35
  %146 = shl nsw i32 %31, 10, !dbg !35
  %147 = sext i32 %145 to i64, !dbg !36
  %148 = sext i32 %146 to i64, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %128, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %143, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %147, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %130, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %143, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %147, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %132, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %143, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %147, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %134, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %143, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %147, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %136, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %144, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %148, !dbg !37
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !37
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %138, !dbg !37
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %144, !dbg !37
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %148, !dbg !37
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %140, !dbg !37
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %144, !dbg !37
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %148, !dbg !37
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !37
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %142, !dbg !37
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %144, !dbg !37
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %148, !dbg !37
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %20) #1, !dbg !38
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %20) #1, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %20) #1, !dbg !38
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #1, !dbg !38
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %21) #1, !dbg !38
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %21) #1, !dbg !38
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %21) #1, !dbg !38
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %21) #1, !dbg !38
  %189 = lshr i64 %70, 58, !dbg !39
  %190 = and i64 %189, 32, !dbg !39
  %191 = lshr i64 %71, 58, !dbg !39
  %192 = and i64 %191, 32, !dbg !39
  %193 = lshr i64 %73, 58, !dbg !39
  %194 = and i64 %193, 32, !dbg !39
  %195 = lshr i64 %74, 58, !dbg !39
  %196 = and i64 %195, 32, !dbg !39
  %197 = lshr i64 %76, 58, !dbg !39
  %198 = and i64 %197, 32, !dbg !39
  %199 = lshr i64 %77, 58, !dbg !39
  %200 = and i64 %199, 32, !dbg !39
  %201 = lshr i64 %79, 58, !dbg !39
  %202 = and i64 %201, 32, !dbg !39
  %203 = lshr i64 %80, 58, !dbg !39
  %204 = and i64 %203, 32, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %190, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %143, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %147, !dbg !40
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %192, !dbg !40
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %143, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %147, !dbg !40
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %194, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %143, !dbg !40
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %147, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %196, !dbg !40
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %143, !dbg !40
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %147, !dbg !40
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !40
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %198, !dbg !40
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %144, !dbg !40
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %148, !dbg !40
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !40
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %200, !dbg !40
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %144, !dbg !40
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %148, !dbg !40
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !40
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %202, !dbg !40
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %144, !dbg !40
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %148, !dbg !40
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !40
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %204, !dbg !40
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %144, !dbg !40
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %148, !dbg !40
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %20) #1, !dbg !41
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %20) #1, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %20) #1, !dbg !41
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %20) #1, !dbg !41
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %21) #1, !dbg !41
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %21) #1, !dbg !41
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %21) #1, !dbg !41
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %21) #1, !dbg !41
  %245 = lshr i64 %95, 58, !dbg !42
  %246 = and i64 %245, 32, !dbg !42
  %247 = add i64 %246, %95, !dbg !42
  %248 = lshr i64 %99, 58, !dbg !42
  %249 = and i64 %248, 32, !dbg !42
  %250 = add i64 %249, %99, !dbg !42
  %251 = shl i64 %247, 5, !dbg !43
  %252 = shl i64 %250, 5, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %150, i64 %251, !dbg !44
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %147, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %154, i64 %251, !dbg !44
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %147, !dbg !44
  %257 = getelementptr float, ptr addrspace(1) %158, i64 %251, !dbg !44
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %147, !dbg !44
  %259 = getelementptr float, ptr addrspace(1) %162, i64 %251, !dbg !44
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %147, !dbg !44
  %261 = getelementptr float, ptr addrspace(1) %166, i64 %252, !dbg !44
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %148, !dbg !44
  %263 = getelementptr float, ptr addrspace(1) %170, i64 %252, !dbg !44
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %148, !dbg !44
  %265 = getelementptr float, ptr addrspace(1) %174, i64 %252, !dbg !44
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %148, !dbg !44
  %267 = getelementptr float, ptr addrspace(1) %178, i64 %252, !dbg !44
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %148, !dbg !44
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %20) #1, !dbg !45
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %20) #1, !dbg !45
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 %20) #1, !dbg !45
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %20) #1, !dbg !45
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %21) #1, !dbg !45
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 %21) #1, !dbg !45
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 %21) #1, !dbg !45
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 %21) #1, !dbg !45
  %277 = getelementptr float, ptr addrspace(1) %206, i64 %251, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %147, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %210, i64 %251, !dbg !46
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %147, !dbg !46
  %281 = getelementptr float, ptr addrspace(1) %214, i64 %251, !dbg !46
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %147, !dbg !46
  %283 = getelementptr float, ptr addrspace(1) %218, i64 %251, !dbg !46
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %147, !dbg !46
  %285 = getelementptr float, ptr addrspace(1) %222, i64 %252, !dbg !46
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %148, !dbg !46
  %287 = getelementptr float, ptr addrspace(1) %226, i64 %252, !dbg !46
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %148, !dbg !46
  %289 = getelementptr float, ptr addrspace(1) %230, i64 %252, !dbg !46
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %148, !dbg !46
  %291 = getelementptr float, ptr addrspace(1) %234, i64 %252, !dbg !46
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %148, !dbg !46
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %20) #1, !dbg !47
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %20) #1, !dbg !47
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %20) #1, !dbg !47
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %20) #1, !dbg !47
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 %21) #1, !dbg !47
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %21) #1, !dbg !47
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 %21) #1, !dbg !47
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %21) #1, !dbg !47
  %301 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !45
  %302 = insertelement <2 x i32> %301, i32 %181, i64 1, !dbg !45
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !45
  %304 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !48
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !48
  %306 = shufflevector <2 x float> %305, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %307 = fadd <2 x float> %306, %303, !dbg !48
  %308 = fcmp olt <2 x float> %307, zeroinitializer, !dbg !49
  %309 = select <2 x i1> %308, <2 x float> zeroinitializer, <2 x float> %307, !dbg !53
  %310 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !47
  %311 = insertelement <2 x i32> %310, i32 %237, i64 1, !dbg !47
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !47
  %313 = fadd <2 x float> %306, %312, !dbg !54
  %314 = fcmp olt <2 x float> %313, zeroinitializer, !dbg !55
  %315 = select <2 x i1> %314, <2 x float> zeroinitializer, <2 x float> %313, !dbg !57
  %316 = fsub <2 x float> %315, %309, !dbg !58
  %317 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !59
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !59
  %319 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %320 = fmul <2 x float> %316, %319, !dbg !59
  %321 = fadd <2 x float> %309, %320, !dbg !60
  %322 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !45
  %323 = insertelement <2 x i32> %322, i32 %182, i64 1, !dbg !45
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !45
  %325 = fadd <2 x float> %306, %324, !dbg !48
  %326 = fcmp olt <2 x float> %325, zeroinitializer, !dbg !49
  %327 = select <2 x i1> %326, <2 x float> zeroinitializer, <2 x float> %325, !dbg !53
  %328 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !47
  %329 = insertelement <2 x i32> %328, i32 %238, i64 1, !dbg !47
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !47
  %331 = fadd <2 x float> %306, %330, !dbg !54
  %332 = fcmp olt <2 x float> %331, zeroinitializer, !dbg !55
  %333 = select <2 x i1> %332, <2 x float> zeroinitializer, <2 x float> %331, !dbg !57
  %334 = fsub <2 x float> %333, %327, !dbg !58
  %335 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !59
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !59
  %337 = shufflevector <2 x float> %336, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %338 = fmul <2 x float> %334, %337, !dbg !59
  %339 = fadd <2 x float> %327, %338, !dbg !60
  %340 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !45
  %341 = insertelement <2 x i32> %340, i32 %183, i64 1, !dbg !45
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !45
  %343 = fadd <2 x float> %306, %342, !dbg !48
  %344 = fcmp olt <2 x float> %343, zeroinitializer, !dbg !49
  %345 = select <2 x i1> %344, <2 x float> zeroinitializer, <2 x float> %343, !dbg !53
  %346 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !47
  %347 = insertelement <2 x i32> %346, i32 %239, i64 1, !dbg !47
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !47
  %349 = fadd <2 x float> %306, %348, !dbg !54
  %350 = fcmp olt <2 x float> %349, zeroinitializer, !dbg !55
  %351 = select <2 x i1> %350, <2 x float> zeroinitializer, <2 x float> %349, !dbg !57
  %352 = fsub <2 x float> %351, %345, !dbg !58
  %353 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !59
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !59
  %355 = shufflevector <2 x float> %354, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %356 = fmul <2 x float> %352, %355, !dbg !59
  %357 = fadd <2 x float> %345, %356, !dbg !60
  %358 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !45
  %359 = insertelement <2 x i32> %358, i32 %184, i64 1, !dbg !45
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !45
  %361 = fadd <2 x float> %306, %360, !dbg !48
  %362 = fcmp olt <2 x float> %361, zeroinitializer, !dbg !49
  %363 = select <2 x i1> %362, <2 x float> zeroinitializer, <2 x float> %361, !dbg !53
  %364 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !47
  %365 = insertelement <2 x i32> %364, i32 %240, i64 1, !dbg !47
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !47
  %367 = fadd <2 x float> %306, %366, !dbg !54
  %368 = fcmp olt <2 x float> %367, zeroinitializer, !dbg !55
  %369 = select <2 x i1> %368, <2 x float> zeroinitializer, <2 x float> %367, !dbg !57
  %370 = fsub <2 x float> %369, %363, !dbg !58
  %371 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !59
  %372 = bitcast <2 x i32> %371 to <2 x float>, !dbg !59
  %373 = shufflevector <2 x float> %372, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %374 = fmul <2 x float> %370, %373, !dbg !59
  %375 = fadd <2 x float> %363, %374, !dbg !60
  %376 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !45
  %377 = insertelement <2 x i32> %376, i32 %185, i64 1, !dbg !45
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !45
  %379 = fadd <2 x float> %306, %378, !dbg !48
  %380 = fcmp olt <2 x float> %379, zeroinitializer, !dbg !49
  %381 = select <2 x i1> %380, <2 x float> zeroinitializer, <2 x float> %379, !dbg !53
  %382 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !47
  %383 = insertelement <2 x i32> %382, i32 %241, i64 1, !dbg !47
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !47
  %385 = fadd <2 x float> %306, %384, !dbg !54
  %386 = fcmp olt <2 x float> %385, zeroinitializer, !dbg !55
  %387 = select <2 x i1> %386, <2 x float> zeroinitializer, <2 x float> %385, !dbg !57
  %388 = fsub <2 x float> %387, %381, !dbg !58
  %389 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !59
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !59
  %391 = shufflevector <2 x float> %390, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %392 = fmul <2 x float> %388, %391, !dbg !59
  %393 = fadd <2 x float> %381, %392, !dbg !60
  %394 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !45
  %395 = insertelement <2 x i32> %394, i32 %186, i64 1, !dbg !45
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !45
  %397 = fadd <2 x float> %306, %396, !dbg !48
  %398 = fcmp olt <2 x float> %397, zeroinitializer, !dbg !49
  %399 = select <2 x i1> %398, <2 x float> zeroinitializer, <2 x float> %397, !dbg !53
  %400 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !47
  %401 = insertelement <2 x i32> %400, i32 %242, i64 1, !dbg !47
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !47
  %403 = fadd <2 x float> %306, %402, !dbg !54
  %404 = fcmp olt <2 x float> %403, zeroinitializer, !dbg !55
  %405 = select <2 x i1> %404, <2 x float> zeroinitializer, <2 x float> %403, !dbg !57
  %406 = fsub <2 x float> %405, %399, !dbg !58
  %407 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !59
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !59
  %409 = shufflevector <2 x float> %408, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %410 = fmul <2 x float> %406, %409, !dbg !59
  %411 = fadd <2 x float> %399, %410, !dbg !60
  %412 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !45
  %413 = insertelement <2 x i32> %412, i32 %187, i64 1, !dbg !45
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !45
  %415 = fadd <2 x float> %306, %414, !dbg !48
  %416 = fcmp olt <2 x float> %415, zeroinitializer, !dbg !49
  %417 = select <2 x i1> %416, <2 x float> zeroinitializer, <2 x float> %415, !dbg !53
  %418 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !47
  %419 = insertelement <2 x i32> %418, i32 %243, i64 1, !dbg !47
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !47
  %421 = fadd <2 x float> %306, %420, !dbg !54
  %422 = fcmp olt <2 x float> %421, zeroinitializer, !dbg !55
  %423 = select <2 x i1> %422, <2 x float> zeroinitializer, <2 x float> %421, !dbg !57
  %424 = fsub <2 x float> %423, %417, !dbg !58
  %425 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !59
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !59
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %428 = fmul <2 x float> %424, %427, !dbg !59
  %429 = fadd <2 x float> %417, %428, !dbg !60
  %430 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !45
  %431 = insertelement <2 x i32> %430, i32 %188, i64 1, !dbg !45
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !45
  %433 = fadd <2 x float> %306, %432, !dbg !48
  %434 = fcmp olt <2 x float> %433, zeroinitializer, !dbg !49
  %435 = select <2 x i1> %434, <2 x float> zeroinitializer, <2 x float> %433, !dbg !53
  %436 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !47
  %437 = insertelement <2 x i32> %436, i32 %244, i64 1, !dbg !47
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !47
  %439 = fadd <2 x float> %306, %438, !dbg !54
  %440 = fcmp olt <2 x float> %439, zeroinitializer, !dbg !55
  %441 = select <2 x i1> %440, <2 x float> zeroinitializer, <2 x float> %439, !dbg !57
  %442 = fsub <2 x float> %441, %435, !dbg !58
  %443 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !59
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !59
  %445 = shufflevector <2 x float> %444, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %446 = fmul <2 x float> %442, %445, !dbg !59
  %447 = fadd <2 x float> %435, %446, !dbg !60
  %448 = extractelement <2 x float> %321, i64 0, !dbg !61
  %449 = extractelement <2 x float> %321, i64 1, !dbg !62
  %450 = fsub float %448, %449, !dbg !61
  %451 = extractelement <2 x float> %339, i64 0, !dbg !61
  %452 = extractelement <2 x float> %339, i64 1, !dbg !62
  %453 = fsub float %451, %452, !dbg !61
  %454 = extractelement <2 x float> %357, i64 0, !dbg !61
  %455 = extractelement <2 x float> %357, i64 1, !dbg !62
  %456 = fsub float %454, %455, !dbg !61
  %457 = extractelement <2 x float> %375, i64 0, !dbg !61
  %458 = extractelement <2 x float> %375, i64 1, !dbg !62
  %459 = fsub float %457, %458, !dbg !61
  %460 = extractelement <2 x float> %393, i64 0, !dbg !61
  %461 = extractelement <2 x float> %393, i64 1, !dbg !62
  %462 = fsub float %460, %461, !dbg !61
  %463 = extractelement <2 x float> %411, i64 0, !dbg !61
  %464 = extractelement <2 x float> %411, i64 1, !dbg !62
  %465 = fsub float %463, %464, !dbg !61
  %466 = extractelement <2 x float> %429, i64 0, !dbg !61
  %467 = extractelement <2 x float> %429, i64 1, !dbg !62
  %468 = fsub float %466, %467, !dbg !61
  %469 = extractelement <2 x float> %447, i64 0, !dbg !61
  %470 = extractelement <2 x float> %447, i64 1, !dbg !62
  %471 = fsub float %469, %470, !dbg !61
  %472 = fmul float %450, %106, !dbg !63
  %473 = fmul float %453, %108, !dbg !63
  %474 = fmul float %456, %110, !dbg !63
  %475 = fmul float %459, %112, !dbg !63
  %476 = fmul float %462, %114, !dbg !63
  %477 = fmul float %465, %116, !dbg !63
  %478 = fmul float %468, %118, !dbg !63
  %479 = fmul float %471, %120, !dbg !63
  %480 = fadd float %449, %472, !dbg !62
  %481 = fadd float %452, %473, !dbg !62
  %482 = fadd float %455, %474, !dbg !62
  %483 = fadd float %458, %475, !dbg !62
  %484 = fadd float %461, %476, !dbg !62
  %485 = fadd float %464, %477, !dbg !62
  %486 = fadd float %467, %478, !dbg !62
  %487 = fadd float %470, %479, !dbg !62
  %488 = sext i32 %16 to i64, !dbg !64
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !64
  %490 = sext i32 %18 to i64, !dbg !64
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !64
  %492 = bitcast float %480 to i32, !dbg !65
  %493 = bitcast float %481 to i32, !dbg !65
  %494 = bitcast float %482 to i32, !dbg !65
  %495 = bitcast float %483 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %492, i32 %493, i32 %494, i32 %495, ptr addrspace(1) %489, i1 %20) #1, !dbg !65
  %496 = bitcast float %484 to i32, !dbg !65
  %497 = bitcast float %485 to i32, !dbg !65
  %498 = bitcast float %486 to i32, !dbg !65
  %499 = bitcast float %487 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %496, i32 %497, i32 %498, i32 %499, ptr addrspace(1) %491, i1 %21) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyhl4wldfibsyk5ychdlbmhngxn7jvc5vpq5gm435xlxetcdtp4d.py", directory: "inductor_cache/yh")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_52, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_52", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 40, scope: !7)
!35 = !DILocation(line: 43, column: 52, scope: !7)
!36 = !DILocation(line: 43, column: 47, scope: !7)
!37 = !DILocation(line: 43, column: 30, scope: !7)
!38 = !DILocation(line: 43, column: 57, scope: !7)
!39 = !DILocation(line: 49, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 31, scope: !7)
!41 = !DILocation(line: 50, column: 59, scope: !7)
!42 = !DILocation(line: 58, column: 35, scope: !7)
!43 = !DILocation(line: 59, column: 41, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 59, scope: !7)
!46 = !DILocation(line: 62, column: 31, scope: !7)
!47 = !DILocation(line: 62, column: 60, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 61, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !56)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 68, column: 20, scope: !7)
!62 = !DILocation(line: 70, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 28, scope: !7)
!65 = !DILocation(line: 71, column: 40, scope: !7)
!66 = !DILocation(line: 71, column: 4, scope: !7)
