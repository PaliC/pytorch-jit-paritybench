; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 10, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 508, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = or disjoint i32 %22, 2, !dbg !13
  %24 = or disjoint i32 %22, 512, !dbg !13
  %.frozen = freeze i32 %22, !dbg !14
  %25 = sdiv i32 %.frozen, 16, !dbg !14
  %26 = sdiv i32 %24, 16, !dbg !14
  %27 = srem i32 %25, 16, !dbg !15
  %28 = srem i32 %26, 16, !dbg !15
  %29 = mul i32 %25, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %29, !dbg !16
  %30 = srem i32 %23, 16, !dbg !16
  %31 = sdiv i32 %22, 256, !dbg !17
  %32 = sdiv i32 %24, 256, !dbg !17
  %33 = srem i32 %31, 128, !dbg !18
  %34 = srem i32 %32, 128, !dbg !18
  %35 = sext i32 %27 to i64, !dbg !19
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = sext i32 %28 to i64, !dbg !19
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !19
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !20
  %47 = sext i32 %.decomposed to i64, !dbg !21
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !21
  %49 = sext i32 %30 to i64, !dbg !21
  %50 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !21
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !22
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !22
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !22
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !22
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !22
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !22
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !22
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !22
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !22
  %63 = getelementptr i64, ptr addrspace(1) %4, i64 %47, !dbg !23
  %64 = getelementptr i64, ptr addrspace(1) %4, i64 %49, !dbg !23
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !24
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !24
  %68 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %69 = extractvalue { i64, i64 } %68, 0, !dbg !24
  %70 = extractvalue { i64, i64 } %68, 1, !dbg !24
  %71 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %72 = extractvalue { i64, i64 } %71, 0, !dbg !24
  %73 = extractvalue { i64, i64 } %71, 1, !dbg !24
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %75 = extractvalue { i64, i64 } %74, 0, !dbg !24
  %76 = extractvalue { i64, i64 } %74, 1, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = getelementptr i64, ptr addrspace(1) %7, i64 %35, !dbg !27
  %89 = getelementptr i64, ptr addrspace(1) %7, i64 %37, !dbg !27
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !30
  %103 = bitcast i32 %102 to float, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !30
  %107 = bitcast i32 %106 to float, !dbg !30
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !30
  %113 = bitcast i32 %112 to float, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = sext i32 %22 to i64, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %10, i64 %116, !dbg !31
  %118 = sext i32 %24 to i64, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %10, i64 %118, !dbg !31
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !32
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !32
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !32
  %130 = sdiv i32 %22, 1024, !dbg !33
  %131 = sdiv i32 %24, 1024, !dbg !33
  %132 = sext i32 %130 to i64, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %11, i64 %132, !dbg !34
  %134 = sext i32 %131 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %11, i64 %134, !dbg !34
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !35
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !35
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !35
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !35
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !35
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !35
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !35
  %144 = getelementptr float, ptr addrspace(1) %12, i64 %132, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %12, i64 %134, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !37
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !37
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !37
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !37
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !37
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !37
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !37
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !37
  %154 = sext i32 %33 to i64, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %13, i64 %154, !dbg !38
  %156 = sext i32 %34 to i64, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %13, i64 %156, !dbg !38
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !39
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !39
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !39
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !39
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !39
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !39
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !39
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %14, i64 %154, !dbg !40
  %167 = getelementptr float, ptr addrspace(1) %14, i64 %156, !dbg !40
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !41
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !41
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !41
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !41
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !41
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !41
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !41
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !41
  %176 = lshr i64 %39, 60, !dbg !42
  %177 = and i64 %176, 8, !dbg !42
  %178 = add i64 %177, %39, !dbg !42
  %179 = lshr i64 %43, 60, !dbg !42
  %180 = and i64 %179, 8, !dbg !42
  %181 = add i64 %180, %43, !dbg !42
  %182 = lshr i64 %52, 60, !dbg !43
  %183 = and i64 %182, 8, !dbg !43
  %184 = add i64 %183, %52, !dbg !43
  %185 = lshr i64 %53, 60, !dbg !43
  %186 = and i64 %185, 8, !dbg !43
  %187 = add i64 %186, %53, !dbg !43
  %188 = lshr i64 %55, 60, !dbg !43
  %189 = and i64 %188, 8, !dbg !43
  %190 = add i64 %189, %55, !dbg !43
  %191 = lshr i64 %56, 60, !dbg !43
  %192 = and i64 %191, 8, !dbg !43
  %193 = add i64 %192, %56, !dbg !43
  %194 = lshr i64 %58, 60, !dbg !43
  %195 = and i64 %194, 8, !dbg !43
  %196 = add i64 %195, %58, !dbg !43
  %197 = lshr i64 %59, 60, !dbg !43
  %198 = and i64 %197, 8, !dbg !43
  %199 = add i64 %198, %59, !dbg !43
  %200 = lshr i64 %61, 60, !dbg !43
  %201 = and i64 %200, 8, !dbg !43
  %202 = add i64 %201, %61, !dbg !43
  %203 = lshr i64 %62, 60, !dbg !43
  %204 = and i64 %203, 8, !dbg !43
  %205 = add i64 %204, %62, !dbg !43
  %206 = shl i64 %178, 3, !dbg !44
  %207 = shl i64 %181, 3, !dbg !44
  %208 = shl nsw i32 %31, 6, !dbg !45
  %209 = shl nsw i32 %32, 6, !dbg !45
  %210 = sext i32 %208 to i64, !dbg !46
  %211 = sext i32 %209 to i64, !dbg !46
  %212 = add i64 %206, %210, !dbg !47
  %213 = add i64 %212, %184, !dbg !46
  %214 = add i64 %212, %187, !dbg !46
  %215 = add i64 %212, %190, !dbg !46
  %216 = add i64 %212, %193, !dbg !46
  %217 = add i64 %207, %211, !dbg !47
  %218 = add i64 %217, %196, !dbg !46
  %219 = add i64 %217, %199, !dbg !46
  %220 = add i64 %217, %202, !dbg !46
  %221 = add i64 %217, %205, !dbg !46
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !48
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !48
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !48
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !48
  %226 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !48
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !48
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !48
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %221, !dbg !48
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !49
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !49
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !49
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #1, !dbg !49
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !49
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !49
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !49
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !49
  %238 = lshr i64 %66, 60, !dbg !50
  %239 = and i64 %238, 8, !dbg !50
  %240 = add i64 %239, %66, !dbg !50
  %241 = lshr i64 %67, 60, !dbg !50
  %242 = and i64 %241, 8, !dbg !50
  %243 = add i64 %242, %67, !dbg !50
  %244 = lshr i64 %69, 60, !dbg !50
  %245 = and i64 %244, 8, !dbg !50
  %246 = add i64 %245, %69, !dbg !50
  %247 = lshr i64 %70, 60, !dbg !50
  %248 = and i64 %247, 8, !dbg !50
  %249 = add i64 %248, %70, !dbg !50
  %250 = lshr i64 %72, 60, !dbg !50
  %251 = and i64 %250, 8, !dbg !50
  %252 = add i64 %251, %72, !dbg !50
  %253 = lshr i64 %73, 60, !dbg !50
  %254 = and i64 %253, 8, !dbg !50
  %255 = add i64 %254, %73, !dbg !50
  %256 = lshr i64 %75, 60, !dbg !50
  %257 = and i64 %256, 8, !dbg !50
  %258 = add i64 %257, %75, !dbg !50
  %259 = lshr i64 %76, 60, !dbg !50
  %260 = and i64 %259, 8, !dbg !50
  %261 = add i64 %260, %76, !dbg !50
  %262 = add i64 %212, %240, !dbg !51
  %263 = add i64 %212, %243, !dbg !51
  %264 = add i64 %212, %246, !dbg !51
  %265 = add i64 %212, %249, !dbg !51
  %266 = add i64 %217, %252, !dbg !51
  %267 = add i64 %217, %255, !dbg !51
  %268 = add i64 %217, %258, !dbg !51
  %269 = add i64 %217, %261, !dbg !51
  %270 = getelementptr float, ptr addrspace(1) %3, i64 %262, !dbg !52
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %263, !dbg !52
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !52
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !52
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !52
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !52
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !52
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %269, !dbg !52
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !53
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 true) #1, !dbg !53
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !53
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !53
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !53
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !53
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !53
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #1, !dbg !53
  %286 = getelementptr float, ptr addrspace(1) %6, i64 %213, !dbg !54
  %287 = getelementptr float, ptr addrspace(1) %6, i64 %214, !dbg !54
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %215, !dbg !54
  %289 = getelementptr float, ptr addrspace(1) %6, i64 %216, !dbg !54
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %218, !dbg !54
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %219, !dbg !54
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !54
  %293 = getelementptr float, ptr addrspace(1) %6, i64 %221, !dbg !54
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !55
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !55
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !55
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #1, !dbg !55
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !55
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #1, !dbg !55
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !55
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #1, !dbg !55
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %262, !dbg !56
  %303 = getelementptr float, ptr addrspace(1) %6, i64 %263, !dbg !56
  %304 = getelementptr float, ptr addrspace(1) %6, i64 %264, !dbg !56
  %305 = getelementptr float, ptr addrspace(1) %6, i64 %265, !dbg !56
  %306 = getelementptr float, ptr addrspace(1) %6, i64 %266, !dbg !56
  %307 = getelementptr float, ptr addrspace(1) %6, i64 %267, !dbg !56
  %308 = getelementptr float, ptr addrspace(1) %6, i64 %268, !dbg !56
  %309 = getelementptr float, ptr addrspace(1) %6, i64 %269, !dbg !56
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #1, !dbg !57
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !57
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #1, !dbg !57
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #1, !dbg !57
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #1, !dbg !57
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #1, !dbg !57
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #1, !dbg !57
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !57
  %318 = lshr i64 %90, 60, !dbg !58
  %319 = and i64 %318, 8, !dbg !58
  %320 = add i64 %319, %90, !dbg !58
  %321 = lshr i64 %94, 60, !dbg !58
  %322 = and i64 %321, 8, !dbg !58
  %323 = add i64 %322, %94, !dbg !58
  %324 = shl i64 %320, 3, !dbg !59
  %325 = shl i64 %323, 3, !dbg !59
  %326 = add i64 %324, %210, !dbg !60
  %327 = add i64 %326, %184, !dbg !61
  %328 = add i64 %326, %187, !dbg !61
  %329 = add i64 %326, %190, !dbg !61
  %330 = add i64 %326, %193, !dbg !61
  %331 = add i64 %325, %211, !dbg !60
  %332 = add i64 %331, %196, !dbg !61
  %333 = add i64 %331, %199, !dbg !61
  %334 = add i64 %331, %202, !dbg !61
  %335 = add i64 %331, %205, !dbg !61
  %336 = getelementptr float, ptr addrspace(1) %6, i64 %327, !dbg !62
  %337 = getelementptr float, ptr addrspace(1) %6, i64 %328, !dbg !62
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %329, !dbg !62
  %339 = getelementptr float, ptr addrspace(1) %6, i64 %330, !dbg !62
  %340 = getelementptr float, ptr addrspace(1) %6, i64 %332, !dbg !62
  %341 = getelementptr float, ptr addrspace(1) %6, i64 %333, !dbg !62
  %342 = getelementptr float, ptr addrspace(1) %6, i64 %334, !dbg !62
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %335, !dbg !62
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 true) #1, !dbg !63
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 true) #1, !dbg !63
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #1, !dbg !63
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 true) #1, !dbg !63
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 true) #1, !dbg !63
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 true) #1, !dbg !63
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #1, !dbg !63
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 true) #1, !dbg !63
  %352 = add i64 %326, %240, !dbg !64
  %353 = add i64 %326, %243, !dbg !64
  %354 = add i64 %326, %246, !dbg !64
  %355 = add i64 %326, %249, !dbg !64
  %356 = add i64 %331, %252, !dbg !64
  %357 = add i64 %331, %255, !dbg !64
  %358 = add i64 %331, %258, !dbg !64
  %359 = add i64 %331, %261, !dbg !64
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %352, !dbg !65
  %361 = getelementptr float, ptr addrspace(1) %6, i64 %353, !dbg !65
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %354, !dbg !65
  %363 = getelementptr float, ptr addrspace(1) %6, i64 %355, !dbg !65
  %364 = getelementptr float, ptr addrspace(1) %6, i64 %356, !dbg !65
  %365 = getelementptr float, ptr addrspace(1) %6, i64 %357, !dbg !65
  %366 = getelementptr float, ptr addrspace(1) %6, i64 %358, !dbg !65
  %367 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !65
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #1, !dbg !66
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 true) #1, !dbg !66
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 true) #1, !dbg !66
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 true) #1, !dbg !66
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 true) #1, !dbg !66
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 true) #1, !dbg !66
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #1, !dbg !66
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 true) #1, !dbg !66
  %376 = getelementptr float, ptr addrspace(1) %3, i64 %327, !dbg !67
  %377 = getelementptr float, ptr addrspace(1) %3, i64 %328, !dbg !67
  %378 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !67
  %379 = getelementptr float, ptr addrspace(1) %3, i64 %330, !dbg !67
  %380 = getelementptr float, ptr addrspace(1) %3, i64 %332, !dbg !67
  %381 = getelementptr float, ptr addrspace(1) %3, i64 %333, !dbg !67
  %382 = getelementptr float, ptr addrspace(1) %3, i64 %334, !dbg !67
  %383 = getelementptr float, ptr addrspace(1) %3, i64 %335, !dbg !67
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 true) #1, !dbg !68
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 true) #1, !dbg !68
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 true) #1, !dbg !68
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 true) #1, !dbg !68
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %380, i1 true) #1, !dbg !68
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %381, i1 true) #1, !dbg !68
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %382, i1 true) #1, !dbg !68
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %383, i1 true) #1, !dbg !68
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %352, !dbg !69
  %393 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !69
  %394 = getelementptr float, ptr addrspace(1) %3, i64 %354, !dbg !69
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %355, !dbg !69
  %396 = getelementptr float, ptr addrspace(1) %3, i64 %356, !dbg !69
  %397 = getelementptr float, ptr addrspace(1) %3, i64 %357, !dbg !69
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %358, !dbg !69
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %359, !dbg !69
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %392, i1 true) #1, !dbg !70
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %393, i1 true) #1, !dbg !70
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %394, i1 true) #1, !dbg !70
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 true) #1, !dbg !70
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %396, i1 true) #1, !dbg !70
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 true) #1, !dbg !70
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %398, i1 true) #1, !dbg !70
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 true) #1, !dbg !70
  %408 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !68
  %409 = insertelement <2 x i32> %408, i32 %230, i64 1, !dbg !68
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !68
  %411 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !70
  %412 = insertelement <2 x i32> %411, i32 %278, i64 1, !dbg !70
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !70
  %414 = fsub <2 x float> %413, %410, !dbg !71
  %415 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !72
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !72
  %417 = shufflevector <2 x float> %416, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %418 = fmul <2 x float> %414, %417, !dbg !72
  %419 = fadd <2 x float> %418, %410, !dbg !73
  %420 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !68
  %421 = insertelement <2 x i32> %420, i32 %231, i64 1, !dbg !68
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !68
  %423 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !70
  %424 = insertelement <2 x i32> %423, i32 %279, i64 1, !dbg !70
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !70
  %426 = fsub <2 x float> %425, %422, !dbg !71
  %427 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !72
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !72
  %429 = shufflevector <2 x float> %428, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %430 = fmul <2 x float> %426, %429, !dbg !72
  %431 = fadd <2 x float> %430, %422, !dbg !73
  %432 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !68
  %433 = insertelement <2 x i32> %432, i32 %232, i64 1, !dbg !68
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !68
  %435 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !70
  %436 = insertelement <2 x i32> %435, i32 %280, i64 1, !dbg !70
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !70
  %438 = fsub <2 x float> %437, %434, !dbg !71
  %439 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !72
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !72
  %441 = shufflevector <2 x float> %440, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %442 = fmul <2 x float> %438, %441, !dbg !72
  %443 = fadd <2 x float> %442, %434, !dbg !73
  %444 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !68
  %445 = insertelement <2 x i32> %444, i32 %233, i64 1, !dbg !68
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !68
  %447 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !70
  %448 = insertelement <2 x i32> %447, i32 %281, i64 1, !dbg !70
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !70
  %450 = fsub <2 x float> %449, %446, !dbg !71
  %451 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !72
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !72
  %453 = shufflevector <2 x float> %452, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %454 = fmul <2 x float> %450, %453, !dbg !72
  %455 = fadd <2 x float> %454, %446, !dbg !73
  %456 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !68
  %457 = insertelement <2 x i32> %456, i32 %234, i64 1, !dbg !68
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !68
  %459 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !70
  %460 = insertelement <2 x i32> %459, i32 %282, i64 1, !dbg !70
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !70
  %462 = fsub <2 x float> %461, %458, !dbg !71
  %463 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !72
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !72
  %465 = shufflevector <2 x float> %464, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %466 = fmul <2 x float> %462, %465, !dbg !72
  %467 = fadd <2 x float> %466, %458, !dbg !73
  %468 = insertelement <2 x i32> poison, i32 %389, i64 0, !dbg !68
  %469 = insertelement <2 x i32> %468, i32 %235, i64 1, !dbg !68
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !68
  %471 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !70
  %472 = insertelement <2 x i32> %471, i32 %283, i64 1, !dbg !70
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !70
  %474 = fsub <2 x float> %473, %470, !dbg !71
  %475 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !72
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !72
  %477 = shufflevector <2 x float> %476, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %478 = fmul <2 x float> %474, %477, !dbg !72
  %479 = fadd <2 x float> %478, %470, !dbg !73
  %480 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !68
  %481 = insertelement <2 x i32> %480, i32 %236, i64 1, !dbg !68
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !68
  %483 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !70
  %484 = insertelement <2 x i32> %483, i32 %284, i64 1, !dbg !70
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !70
  %486 = fsub <2 x float> %485, %482, !dbg !71
  %487 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !72
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !72
  %489 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %490 = fmul <2 x float> %486, %489, !dbg !72
  %491 = fadd <2 x float> %490, %482, !dbg !73
  %492 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !68
  %493 = insertelement <2 x i32> %492, i32 %237, i64 1, !dbg !68
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !68
  %495 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !70
  %496 = insertelement <2 x i32> %495, i32 %285, i64 1, !dbg !70
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !70
  %498 = fsub <2 x float> %497, %494, !dbg !71
  %499 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !72
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !72
  %501 = shufflevector <2 x float> %500, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %502 = fmul <2 x float> %498, %501, !dbg !72
  %503 = fadd <2 x float> %502, %494, !dbg !73
  %504 = extractelement <2 x float> %419, i64 0, !dbg !74
  %505 = extractelement <2 x float> %419, i64 1, !dbg !75
  %506 = fsub float %504, %505, !dbg !74
  %507 = extractelement <2 x float> %431, i64 0, !dbg !74
  %508 = extractelement <2 x float> %431, i64 1, !dbg !75
  %509 = fsub float %507, %508, !dbg !74
  %510 = extractelement <2 x float> %443, i64 0, !dbg !74
  %511 = extractelement <2 x float> %443, i64 1, !dbg !75
  %512 = fsub float %510, %511, !dbg !74
  %513 = extractelement <2 x float> %455, i64 0, !dbg !74
  %514 = extractelement <2 x float> %455, i64 1, !dbg !75
  %515 = fsub float %513, %514, !dbg !74
  %516 = extractelement <2 x float> %467, i64 0, !dbg !74
  %517 = extractelement <2 x float> %467, i64 1, !dbg !75
  %518 = fsub float %516, %517, !dbg !74
  %519 = extractelement <2 x float> %479, i64 0, !dbg !74
  %520 = extractelement <2 x float> %479, i64 1, !dbg !75
  %521 = fsub float %519, %520, !dbg !74
  %522 = extractelement <2 x float> %491, i64 0, !dbg !74
  %523 = extractelement <2 x float> %491, i64 1, !dbg !75
  %524 = fsub float %522, %523, !dbg !74
  %525 = extractelement <2 x float> %503, i64 0, !dbg !74
  %526 = extractelement <2 x float> %503, i64 1, !dbg !75
  %527 = fsub float %525, %526, !dbg !74
  %528 = fmul float %506, %101, !dbg !76
  %529 = fmul float %509, %103, !dbg !76
  %530 = fmul float %512, %105, !dbg !76
  %531 = fmul float %515, %107, !dbg !76
  %532 = fmul float %518, %109, !dbg !76
  %533 = fmul float %521, %111, !dbg !76
  %534 = fmul float %524, %113, !dbg !76
  %535 = fmul float %527, %115, !dbg !76
  %536 = fadd float %505, %528, !dbg !75
  %537 = fadd float %508, %529, !dbg !75
  %538 = fadd float %511, %530, !dbg !75
  %539 = fadd float %514, %531, !dbg !75
  %540 = fadd float %517, %532, !dbg !75
  %541 = fadd float %520, %533, !dbg !75
  %542 = fadd float %523, %534, !dbg !75
  %543 = fadd float %526, %535, !dbg !75
  %544 = getelementptr float, ptr addrspace(1) %9, i64 %213, !dbg !77
  %545 = getelementptr float, ptr addrspace(1) %9, i64 %214, !dbg !77
  %546 = getelementptr float, ptr addrspace(1) %9, i64 %215, !dbg !77
  %547 = getelementptr float, ptr addrspace(1) %9, i64 %216, !dbg !77
  %548 = getelementptr float, ptr addrspace(1) %9, i64 %218, !dbg !77
  %549 = getelementptr float, ptr addrspace(1) %9, i64 %219, !dbg !77
  %550 = getelementptr float, ptr addrspace(1) %9, i64 %220, !dbg !77
  %551 = getelementptr float, ptr addrspace(1) %9, i64 %221, !dbg !77
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %544, i1 true) #1, !dbg !78
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %545, i1 true) #1, !dbg !78
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %546, i1 true) #1, !dbg !78
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %547, i1 true) #1, !dbg !78
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %548, i1 true) #1, !dbg !78
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %549, i1 true) #1, !dbg !78
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %550, i1 true) #1, !dbg !78
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %551, i1 true) #1, !dbg !78
  %560 = getelementptr float, ptr addrspace(1) %9, i64 %262, !dbg !79
  %561 = getelementptr float, ptr addrspace(1) %9, i64 %263, !dbg !79
  %562 = getelementptr float, ptr addrspace(1) %9, i64 %264, !dbg !79
  %563 = getelementptr float, ptr addrspace(1) %9, i64 %265, !dbg !79
  %564 = getelementptr float, ptr addrspace(1) %9, i64 %266, !dbg !79
  %565 = getelementptr float, ptr addrspace(1) %9, i64 %267, !dbg !79
  %566 = getelementptr float, ptr addrspace(1) %9, i64 %268, !dbg !79
  %567 = getelementptr float, ptr addrspace(1) %9, i64 %269, !dbg !79
  %568 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %560, i1 true) #1, !dbg !80
  %569 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %561, i1 true) #1, !dbg !80
  %570 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %562, i1 true) #1, !dbg !80
  %571 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %563, i1 true) #1, !dbg !80
  %572 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #1, !dbg !80
  %573 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %565, i1 true) #1, !dbg !80
  %574 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #1, !dbg !80
  %575 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %567, i1 true) #1, !dbg !80
  %576 = getelementptr float, ptr addrspace(1) %9, i64 %327, !dbg !81
  %577 = getelementptr float, ptr addrspace(1) %9, i64 %328, !dbg !81
  %578 = getelementptr float, ptr addrspace(1) %9, i64 %329, !dbg !81
  %579 = getelementptr float, ptr addrspace(1) %9, i64 %330, !dbg !81
  %580 = getelementptr float, ptr addrspace(1) %9, i64 %332, !dbg !81
  %581 = getelementptr float, ptr addrspace(1) %9, i64 %333, !dbg !81
  %582 = getelementptr float, ptr addrspace(1) %9, i64 %334, !dbg !81
  %583 = getelementptr float, ptr addrspace(1) %9, i64 %335, !dbg !81
  %584 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %576, i1 true) #1, !dbg !82
  %585 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %577, i1 true) #1, !dbg !82
  %586 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %578, i1 true) #1, !dbg !82
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %579, i1 true) #1, !dbg !82
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %580, i1 true) #1, !dbg !82
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %581, i1 true) #1, !dbg !82
  %590 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %582, i1 true) #1, !dbg !82
  %591 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %583, i1 true) #1, !dbg !82
  %592 = getelementptr float, ptr addrspace(1) %9, i64 %352, !dbg !83
  %593 = getelementptr float, ptr addrspace(1) %9, i64 %353, !dbg !83
  %594 = getelementptr float, ptr addrspace(1) %9, i64 %354, !dbg !83
  %595 = getelementptr float, ptr addrspace(1) %9, i64 %355, !dbg !83
  %596 = getelementptr float, ptr addrspace(1) %9, i64 %356, !dbg !83
  %597 = getelementptr float, ptr addrspace(1) %9, i64 %357, !dbg !83
  %598 = getelementptr float, ptr addrspace(1) %9, i64 %358, !dbg !83
  %599 = getelementptr float, ptr addrspace(1) %9, i64 %359, !dbg !83
  %600 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %592, i1 true) #1, !dbg !84
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %593, i1 true) #1, !dbg !84
  %602 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %594, i1 true) #1, !dbg !84
  %603 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %595, i1 true) #1, !dbg !84
  %604 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %596, i1 true) #1, !dbg !84
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %597, i1 true) #1, !dbg !84
  %606 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %598, i1 true) #1, !dbg !84
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %599, i1 true) #1, !dbg !84
  %608 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !55
  %609 = insertelement <2 x i32> %608, i32 %552, i64 1, !dbg !55
  %610 = bitcast <2 x i32> %609 to <2 x float>, !dbg !55
  %611 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !57
  %612 = insertelement <2 x i32> %611, i32 %568, i64 1, !dbg !57
  %613 = bitcast <2 x i32> %612 to <2 x float>, !dbg !57
  %614 = fsub <2 x float> %613, %610, !dbg !85
  %615 = fmul <2 x float> %614, %417, !dbg !86
  %616 = fadd <2 x float> %615, %610, !dbg !87
  %617 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !63
  %618 = insertelement <2 x i32> %617, i32 %584, i64 1, !dbg !63
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !63
  %620 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !66
  %621 = insertelement <2 x i32> %620, i32 %600, i64 1, !dbg !66
  %622 = bitcast <2 x i32> %621 to <2 x float>, !dbg !66
  %623 = fsub <2 x float> %622, %619, !dbg !88
  %624 = fmul <2 x float> %623, %417, !dbg !89
  %625 = fadd <2 x float> %624, %619, !dbg !90
  %626 = fsub <2 x float> %625, %616, !dbg !91
  %627 = insertelement <2 x float> poison, float %101, i64 0, !dbg !92
  %628 = shufflevector <2 x float> %627, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %629 = fmul <2 x float> %626, %628, !dbg !92
  %630 = fadd <2 x float> %616, %629, !dbg !93
  %631 = extractelement <2 x float> %630, i64 0, !dbg !94
  %632 = fadd float %631, %536, !dbg !94
  %633 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !55
  %634 = insertelement <2 x i32> %633, i32 %553, i64 1, !dbg !55
  %635 = bitcast <2 x i32> %634 to <2 x float>, !dbg !55
  %636 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !57
  %637 = insertelement <2 x i32> %636, i32 %569, i64 1, !dbg !57
  %638 = bitcast <2 x i32> %637 to <2 x float>, !dbg !57
  %639 = fsub <2 x float> %638, %635, !dbg !85
  %640 = fmul <2 x float> %639, %429, !dbg !86
  %641 = fadd <2 x float> %640, %635, !dbg !87
  %642 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !63
  %643 = insertelement <2 x i32> %642, i32 %585, i64 1, !dbg !63
  %644 = bitcast <2 x i32> %643 to <2 x float>, !dbg !63
  %645 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !66
  %646 = insertelement <2 x i32> %645, i32 %601, i64 1, !dbg !66
  %647 = bitcast <2 x i32> %646 to <2 x float>, !dbg !66
  %648 = fsub <2 x float> %647, %644, !dbg !88
  %649 = fmul <2 x float> %648, %429, !dbg !89
  %650 = fadd <2 x float> %649, %644, !dbg !90
  %651 = fsub <2 x float> %650, %641, !dbg !91
  %652 = insertelement <2 x float> poison, float %103, i64 0, !dbg !92
  %653 = shufflevector <2 x float> %652, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %654 = fmul <2 x float> %651, %653, !dbg !92
  %655 = fadd <2 x float> %641, %654, !dbg !93
  %656 = extractelement <2 x float> %655, i64 0, !dbg !94
  %657 = fadd float %656, %537, !dbg !94
  %658 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !55
  %659 = insertelement <2 x i32> %658, i32 %554, i64 1, !dbg !55
  %660 = bitcast <2 x i32> %659 to <2 x float>, !dbg !55
  %661 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !57
  %662 = insertelement <2 x i32> %661, i32 %570, i64 1, !dbg !57
  %663 = bitcast <2 x i32> %662 to <2 x float>, !dbg !57
  %664 = fsub <2 x float> %663, %660, !dbg !85
  %665 = fmul <2 x float> %664, %441, !dbg !86
  %666 = fadd <2 x float> %665, %660, !dbg !87
  %667 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !63
  %668 = insertelement <2 x i32> %667, i32 %586, i64 1, !dbg !63
  %669 = bitcast <2 x i32> %668 to <2 x float>, !dbg !63
  %670 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !66
  %671 = insertelement <2 x i32> %670, i32 %602, i64 1, !dbg !66
  %672 = bitcast <2 x i32> %671 to <2 x float>, !dbg !66
  %673 = fsub <2 x float> %672, %669, !dbg !88
  %674 = fmul <2 x float> %673, %441, !dbg !89
  %675 = fadd <2 x float> %674, %669, !dbg !90
  %676 = fsub <2 x float> %675, %666, !dbg !91
  %677 = insertelement <2 x float> poison, float %105, i64 0, !dbg !92
  %678 = shufflevector <2 x float> %677, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %679 = fmul <2 x float> %676, %678, !dbg !92
  %680 = fadd <2 x float> %666, %679, !dbg !93
  %681 = extractelement <2 x float> %680, i64 0, !dbg !94
  %682 = fadd float %681, %538, !dbg !94
  %683 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !55
  %684 = insertelement <2 x i32> %683, i32 %555, i64 1, !dbg !55
  %685 = bitcast <2 x i32> %684 to <2 x float>, !dbg !55
  %686 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !57
  %687 = insertelement <2 x i32> %686, i32 %571, i64 1, !dbg !57
  %688 = bitcast <2 x i32> %687 to <2 x float>, !dbg !57
  %689 = fsub <2 x float> %688, %685, !dbg !85
  %690 = fmul <2 x float> %689, %453, !dbg !86
  %691 = fadd <2 x float> %690, %685, !dbg !87
  %692 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !63
  %693 = insertelement <2 x i32> %692, i32 %587, i64 1, !dbg !63
  %694 = bitcast <2 x i32> %693 to <2 x float>, !dbg !63
  %695 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !66
  %696 = insertelement <2 x i32> %695, i32 %603, i64 1, !dbg !66
  %697 = bitcast <2 x i32> %696 to <2 x float>, !dbg !66
  %698 = fsub <2 x float> %697, %694, !dbg !88
  %699 = fmul <2 x float> %698, %453, !dbg !89
  %700 = fadd <2 x float> %699, %694, !dbg !90
  %701 = fsub <2 x float> %700, %691, !dbg !91
  %702 = insertelement <2 x float> poison, float %107, i64 0, !dbg !92
  %703 = shufflevector <2 x float> %702, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %704 = fmul <2 x float> %701, %703, !dbg !92
  %705 = fadd <2 x float> %691, %704, !dbg !93
  %706 = extractelement <2 x float> %705, i64 0, !dbg !94
  %707 = fadd float %706, %539, !dbg !94
  %708 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !55
  %709 = insertelement <2 x i32> %708, i32 %556, i64 1, !dbg !55
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !55
  %711 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !57
  %712 = insertelement <2 x i32> %711, i32 %572, i64 1, !dbg !57
  %713 = bitcast <2 x i32> %712 to <2 x float>, !dbg !57
  %714 = fsub <2 x float> %713, %710, !dbg !85
  %715 = fmul <2 x float> %714, %465, !dbg !86
  %716 = fadd <2 x float> %715, %710, !dbg !87
  %717 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !63
  %718 = insertelement <2 x i32> %717, i32 %588, i64 1, !dbg !63
  %719 = bitcast <2 x i32> %718 to <2 x float>, !dbg !63
  %720 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !66
  %721 = insertelement <2 x i32> %720, i32 %604, i64 1, !dbg !66
  %722 = bitcast <2 x i32> %721 to <2 x float>, !dbg !66
  %723 = fsub <2 x float> %722, %719, !dbg !88
  %724 = fmul <2 x float> %723, %465, !dbg !89
  %725 = fadd <2 x float> %724, %719, !dbg !90
  %726 = fsub <2 x float> %725, %716, !dbg !91
  %727 = insertelement <2 x float> poison, float %109, i64 0, !dbg !92
  %728 = shufflevector <2 x float> %727, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %729 = fmul <2 x float> %726, %728, !dbg !92
  %730 = fadd <2 x float> %716, %729, !dbg !93
  %731 = extractelement <2 x float> %730, i64 0, !dbg !94
  %732 = fadd float %731, %540, !dbg !94
  %733 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !55
  %734 = insertelement <2 x i32> %733, i32 %557, i64 1, !dbg !55
  %735 = bitcast <2 x i32> %734 to <2 x float>, !dbg !55
  %736 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !57
  %737 = insertelement <2 x i32> %736, i32 %573, i64 1, !dbg !57
  %738 = bitcast <2 x i32> %737 to <2 x float>, !dbg !57
  %739 = fsub <2 x float> %738, %735, !dbg !85
  %740 = fmul <2 x float> %739, %477, !dbg !86
  %741 = fadd <2 x float> %740, %735, !dbg !87
  %742 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !63
  %743 = insertelement <2 x i32> %742, i32 %589, i64 1, !dbg !63
  %744 = bitcast <2 x i32> %743 to <2 x float>, !dbg !63
  %745 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !66
  %746 = insertelement <2 x i32> %745, i32 %605, i64 1, !dbg !66
  %747 = bitcast <2 x i32> %746 to <2 x float>, !dbg !66
  %748 = fsub <2 x float> %747, %744, !dbg !88
  %749 = fmul <2 x float> %748, %477, !dbg !89
  %750 = fadd <2 x float> %749, %744, !dbg !90
  %751 = fsub <2 x float> %750, %741, !dbg !91
  %752 = insertelement <2 x float> poison, float %111, i64 0, !dbg !92
  %753 = shufflevector <2 x float> %752, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %754 = fmul <2 x float> %751, %753, !dbg !92
  %755 = fadd <2 x float> %741, %754, !dbg !93
  %756 = extractelement <2 x float> %755, i64 0, !dbg !94
  %757 = fadd float %756, %541, !dbg !94
  %758 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !55
  %759 = insertelement <2 x i32> %758, i32 %558, i64 1, !dbg !55
  %760 = bitcast <2 x i32> %759 to <2 x float>, !dbg !55
  %761 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !57
  %762 = insertelement <2 x i32> %761, i32 %574, i64 1, !dbg !57
  %763 = bitcast <2 x i32> %762 to <2 x float>, !dbg !57
  %764 = fsub <2 x float> %763, %760, !dbg !85
  %765 = fmul <2 x float> %764, %489, !dbg !86
  %766 = fadd <2 x float> %765, %760, !dbg !87
  %767 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !63
  %768 = insertelement <2 x i32> %767, i32 %590, i64 1, !dbg !63
  %769 = bitcast <2 x i32> %768 to <2 x float>, !dbg !63
  %770 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !66
  %771 = insertelement <2 x i32> %770, i32 %606, i64 1, !dbg !66
  %772 = bitcast <2 x i32> %771 to <2 x float>, !dbg !66
  %773 = fsub <2 x float> %772, %769, !dbg !88
  %774 = fmul <2 x float> %773, %489, !dbg !89
  %775 = fadd <2 x float> %774, %769, !dbg !90
  %776 = fsub <2 x float> %775, %766, !dbg !91
  %777 = insertelement <2 x float> poison, float %113, i64 0, !dbg !92
  %778 = shufflevector <2 x float> %777, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %779 = fmul <2 x float> %776, %778, !dbg !92
  %780 = fadd <2 x float> %766, %779, !dbg !93
  %781 = extractelement <2 x float> %780, i64 0, !dbg !94
  %782 = fadd float %781, %542, !dbg !94
  %783 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !55
  %784 = insertelement <2 x i32> %783, i32 %559, i64 1, !dbg !55
  %785 = bitcast <2 x i32> %784 to <2 x float>, !dbg !55
  %786 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !57
  %787 = insertelement <2 x i32> %786, i32 %575, i64 1, !dbg !57
  %788 = bitcast <2 x i32> %787 to <2 x float>, !dbg !57
  %789 = fsub <2 x float> %788, %785, !dbg !85
  %790 = fmul <2 x float> %789, %501, !dbg !86
  %791 = fadd <2 x float> %790, %785, !dbg !87
  %792 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !63
  %793 = insertelement <2 x i32> %792, i32 %591, i64 1, !dbg !63
  %794 = bitcast <2 x i32> %793 to <2 x float>, !dbg !63
  %795 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !66
  %796 = insertelement <2 x i32> %795, i32 %607, i64 1, !dbg !66
  %797 = bitcast <2 x i32> %796 to <2 x float>, !dbg !66
  %798 = fsub <2 x float> %797, %794, !dbg !88
  %799 = fmul <2 x float> %798, %501, !dbg !89
  %800 = fadd <2 x float> %799, %794, !dbg !90
  %801 = fsub <2 x float> %800, %791, !dbg !91
  %802 = insertelement <2 x float> poison, float %115, i64 0, !dbg !92
  %803 = shufflevector <2 x float> %802, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %804 = fmul <2 x float> %801, %803, !dbg !92
  %805 = fadd <2 x float> %791, %804, !dbg !93
  %806 = extractelement <2 x float> %805, i64 0, !dbg !94
  %807 = fadd float %806, %543, !dbg !94
  %808 = extractelement <2 x float> %630, i64 1, !dbg !95
  %809 = fadd float %632, %808, !dbg !95
  %810 = extractelement <2 x float> %655, i64 1, !dbg !95
  %811 = fadd float %657, %810, !dbg !95
  %812 = extractelement <2 x float> %680, i64 1, !dbg !95
  %813 = fadd float %682, %812, !dbg !95
  %814 = extractelement <2 x float> %705, i64 1, !dbg !95
  %815 = fadd float %707, %814, !dbg !95
  %816 = extractelement <2 x float> %730, i64 1, !dbg !95
  %817 = fadd float %732, %816, !dbg !95
  %818 = extractelement <2 x float> %755, i64 1, !dbg !95
  %819 = fadd float %757, %818, !dbg !95
  %820 = extractelement <2 x float> %780, i64 1, !dbg !95
  %821 = fadd float %782, %820, !dbg !95
  %822 = extractelement <2 x float> %805, i64 1, !dbg !95
  %823 = fadd float %807, %822, !dbg !95
  %824 = insertelement <8 x i32> poison, i32 %129, i64 0, !dbg !32
  %825 = insertelement <8 x i32> %824, i32 %128, i64 1, !dbg !32
  %826 = insertelement <8 x i32> %825, i32 %127, i64 2, !dbg !32
  %827 = insertelement <8 x i32> %826, i32 %126, i64 3, !dbg !32
  %828 = insertelement <8 x i32> %827, i32 %124, i64 4, !dbg !32
  %829 = insertelement <8 x i32> %828, i32 %123, i64 5, !dbg !32
  %830 = insertelement <8 x i32> %829, i32 %122, i64 6, !dbg !32
  %831 = insertelement <8 x i32> %830, i32 %121, i64 7, !dbg !32
  %832 = bitcast <8 x i32> %831 to <8 x float>, !dbg !32
  %833 = insertelement <8 x i32> poison, i32 %143, i64 0, !dbg !35
  %834 = insertelement <8 x i32> %833, i32 %142, i64 1, !dbg !35
  %835 = insertelement <8 x i32> %834, i32 %141, i64 2, !dbg !35
  %836 = insertelement <8 x i32> %835, i32 %140, i64 3, !dbg !35
  %837 = insertelement <8 x i32> %836, i32 %139, i64 4, !dbg !35
  %838 = insertelement <8 x i32> %837, i32 %138, i64 5, !dbg !35
  %839 = insertelement <8 x i32> %838, i32 %137, i64 6, !dbg !35
  %840 = insertelement <8 x i32> %839, i32 %136, i64 7, !dbg !35
  %841 = bitcast <8 x i32> %840 to <8 x float>, !dbg !35
  %842 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !37
  %843 = insertelement <8 x i32> %842, i32 %152, i64 1, !dbg !37
  %844 = insertelement <8 x i32> %843, i32 %151, i64 2, !dbg !37
  %845 = insertelement <8 x i32> %844, i32 %150, i64 3, !dbg !37
  %846 = insertelement <8 x i32> %845, i32 %149, i64 4, !dbg !37
  %847 = insertelement <8 x i32> %846, i32 %148, i64 5, !dbg !37
  %848 = insertelement <8 x i32> %847, i32 %147, i64 6, !dbg !37
  %849 = insertelement <8 x i32> %848, i32 %146, i64 7, !dbg !37
  %850 = bitcast <8 x i32> %849 to <8 x float>, !dbg !37
  %851 = insertelement <8 x i32> poison, i32 %165, i64 0, !dbg !39
  %852 = insertelement <8 x i32> %851, i32 %164, i64 1, !dbg !39
  %853 = insertelement <8 x i32> %852, i32 %163, i64 2, !dbg !39
  %854 = insertelement <8 x i32> %853, i32 %162, i64 3, !dbg !39
  %855 = insertelement <8 x i32> %854, i32 %161, i64 4, !dbg !39
  %856 = insertelement <8 x i32> %855, i32 %160, i64 5, !dbg !39
  %857 = insertelement <8 x i32> %856, i32 %159, i64 6, !dbg !39
  %858 = insertelement <8 x i32> %857, i32 %158, i64 7, !dbg !39
  %859 = bitcast <8 x i32> %858 to <8 x float>, !dbg !39
  %860 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !41
  %861 = insertelement <8 x i32> %860, i32 %174, i64 1, !dbg !41
  %862 = insertelement <8 x i32> %861, i32 %173, i64 2, !dbg !41
  %863 = insertelement <8 x i32> %862, i32 %172, i64 3, !dbg !41
  %864 = insertelement <8 x i32> %863, i32 %171, i64 4, !dbg !41
  %865 = insertelement <8 x i32> %864, i32 %170, i64 5, !dbg !41
  %866 = insertelement <8 x i32> %865, i32 %169, i64 6, !dbg !41
  %867 = insertelement <8 x i32> %866, i32 %168, i64 7, !dbg !41
  %868 = bitcast <8 x i32> %867 to <8 x float>, !dbg !41
  %869 = fsub <8 x float> %832, %841, !dbg !96
  %870 = fmul <8 x float> %869, %850, !dbg !97
  %871 = fmul <8 x float> %870, %859, !dbg !98
  %872 = fadd <8 x float> %871, %868, !dbg !99
  %873 = fcmp olt <8 x float> %872, zeroinitializer, !dbg !100
  %874 = extractelement <8 x i1> %873, i64 7, !dbg !104
  %875 = extractelement <8 x float> %872, i64 7, !dbg !104
  %876 = select i1 %874, float 0.000000e+00, float %875, !dbg !104
  %877 = extractelement <8 x i1> %873, i64 6, !dbg !104
  %878 = extractelement <8 x float> %872, i64 6, !dbg !104
  %879 = select i1 %877, float 0.000000e+00, float %878, !dbg !104
  %880 = extractelement <8 x i1> %873, i64 5, !dbg !104
  %881 = extractelement <8 x float> %872, i64 5, !dbg !104
  %882 = select i1 %880, float 0.000000e+00, float %881, !dbg !104
  %883 = extractelement <8 x i1> %873, i64 4, !dbg !104
  %884 = extractelement <8 x float> %872, i64 4, !dbg !104
  %885 = select i1 %883, float 0.000000e+00, float %884, !dbg !104
  %886 = extractelement <8 x i1> %873, i64 3, !dbg !104
  %887 = extractelement <8 x float> %872, i64 3, !dbg !104
  %888 = select i1 %886, float 0.000000e+00, float %887, !dbg !104
  %889 = extractelement <8 x i1> %873, i64 2, !dbg !104
  %890 = extractelement <8 x float> %872, i64 2, !dbg !104
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !104
  %892 = extractelement <8 x i1> %873, i64 1, !dbg !104
  %893 = extractelement <8 x float> %872, i64 1, !dbg !104
  %894 = select i1 %892, float 0.000000e+00, float %893, !dbg !104
  %895 = extractelement <8 x i1> %873, i64 0, !dbg !104
  %896 = extractelement <8 x float> %872, i64 0, !dbg !104
  %897 = select i1 %895, float 0.000000e+00, float %896, !dbg !104
  %898 = fadd float %876, %809, !dbg !105
  %899 = fadd float %879, %811, !dbg !105
  %900 = fadd float %882, %813, !dbg !105
  %901 = fadd float %885, %815, !dbg !105
  %902 = fadd float %888, %817, !dbg !105
  %903 = fadd float %891, %819, !dbg !105
  %904 = fadd float %894, %821, !dbg !105
  %905 = fadd float %897, %823, !dbg !105
  %906 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !106
  %907 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !106
  %908 = bitcast float %898 to i32, !dbg !107
  %909 = bitcast float %899 to i32, !dbg !107
  %910 = bitcast float %900 to i32, !dbg !107
  %911 = bitcast float %901 to i32, !dbg !107
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %908, i32 %909, i32 %910, i32 %911, ptr addrspace(1) %906, i1 true) #1, !dbg !107
  %912 = bitcast float %902 to i32, !dbg !107
  %913 = bitcast float %903 to i32, !dbg !107
  %914 = bitcast float %904 to i32, !dbg !107
  %915 = bitcast float %905 to i32, !dbg !107
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %912, i32 %913, i32 %914, i32 %915, ptr addrspace(1) %907, i1 true) #1, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj6o5ho33tozruqvkzfyodmocmwmynfysqaqjolqtqsrknqneoyj.py", directory: "inductor_cache/j6")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 38, scope: !7)
!34 = !DILocation(line: 36, column: 32, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 37, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 43, column: 32, scope: !7)
!43 = !DILocation(line: 46, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 39, scope: !7)
!45 = !DILocation(line: 47, column: 49, scope: !7)
!46 = !DILocation(line: 47, column: 46, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !7)
!49 = !DILocation(line: 47, column: 54, scope: !7)
!50 = !DILocation(line: 50, column: 35, scope: !7)
!51 = !DILocation(line: 51, column: 48, scope: !7)
!52 = !DILocation(line: 51, column: 31, scope: !7)
!53 = !DILocation(line: 51, column: 56, scope: !7)
!54 = !DILocation(line: 55, column: 31, scope: !7)
!55 = !DILocation(line: 55, column: 55, scope: !7)
!56 = !DILocation(line: 56, column: 31, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 62, column: 35, scope: !7)
!59 = !DILocation(line: 63, column: 40, scope: !7)
!60 = !DILocation(line: 63, column: 38, scope: !7)
!61 = !DILocation(line: 63, column: 48, scope: !7)
!62 = !DILocation(line: 63, column: 31, scope: !7)
!63 = !DILocation(line: 63, column: 56, scope: !7)
!64 = !DILocation(line: 64, column: 49, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 57, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 56, scope: !7)
!69 = !DILocation(line: 72, column: 31, scope: !7)
!70 = !DILocation(line: 72, column: 57, scope: !7)
!71 = !DILocation(line: 73, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 31, scope: !7)
!78 = !DILocation(line: 80, column: 55, scope: !7)
!79 = !DILocation(line: 81, column: 31, scope: !7)
!80 = !DILocation(line: 81, column: 56, scope: !7)
!81 = !DILocation(line: 85, column: 31, scope: !7)
!82 = !DILocation(line: 85, column: 56, scope: !7)
!83 = !DILocation(line: 86, column: 31, scope: !7)
!84 = !DILocation(line: 86, column: 57, scope: !7)
!85 = !DILocation(line: 57, column: 20, scope: !7)
!86 = !DILocation(line: 58, column: 20, scope: !7)
!87 = !DILocation(line: 59, column: 20, scope: !7)
!88 = !DILocation(line: 65, column: 20, scope: !7)
!89 = !DILocation(line: 66, column: 20, scope: !7)
!90 = !DILocation(line: 67, column: 20, scope: !7)
!91 = !DILocation(line: 68, column: 20, scope: !7)
!92 = !DILocation(line: 69, column: 20, scope: !7)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 79, column: 20, scope: !7)
!95 = !DILocation(line: 93, column: 20, scope: !7)
!96 = !DILocation(line: 94, column: 20, scope: !7)
!97 = !DILocation(line: 95, column: 20, scope: !7)
!98 = !DILocation(line: 96, column: 20, scope: !7)
!99 = !DILocation(line: 97, column: 20, scope: !7)
!100 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !103)
!101 = distinct !DILexicalBlockFile(scope: !7, file: !102, discriminator: 0)
!102 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!103 = !DILocation(line: 99, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !103)
!105 = !DILocation(line: 100, column: 20, scope: !7)
!106 = !DILocation(line: 101, column: 28, scope: !7)
!107 = !DILocation(line: 101, column: 40, scope: !7)
!108 = !DILocation(line: 101, column: 4, scope: !7)
