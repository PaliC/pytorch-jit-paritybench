; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_sigmoid_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %13, !dbg !16
  %20 = or disjoint i32 %18, %10, !dbg !16
  %21 = or disjoint i32 %18, %11, !dbg !16
  %22 = sdiv i32 %14, 512, !dbg !17
  %23 = sdiv i32 %15, 512, !dbg !17
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 512, !dbg !17
  %25 = mul i32 %24, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = shl i32 %22, 12, !dbg !19
  %27 = shl i32 %23, 12, !dbg !19
  %28 = add i32 %26, %19, !dbg !20
  %29 = add i32 %27, %19, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = shl i32 %20, 9, !dbg !23
  %53 = shl i32 %21, 9, !dbg !23
  %54 = shl i32 %24, 21, !dbg !24
  %55 = add i32 %54, %.decomposed, !dbg !25
  %56 = add i32 %55, %52, !dbg !26
  %57 = add i32 %55, %53, !dbg !26
  %58 = sext i32 %56 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !27
  %60 = sext i32 %57 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = bitcast i32 %63 to float, !dbg !28
  %68 = bitcast i32 %64 to float, !dbg !28
  %69 = bitcast i32 %65 to float, !dbg !28
  %70 = bitcast i32 %66 to float, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = bitcast i32 %72 to float, !dbg !28
  %77 = bitcast i32 %73 to float, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = fsub float 0.000000e+00, %39, !dbg !29
  %81 = fsub float 0.000000e+00, %40, !dbg !29
  %82 = fsub float 0.000000e+00, %41, !dbg !29
  %83 = fsub float 0.000000e+00, %42, !dbg !29
  %84 = fsub float 0.000000e+00, %48, !dbg !29
  %85 = fsub float 0.000000e+00, %49, !dbg !29
  %86 = fsub float 0.000000e+00, %50, !dbg !29
  %87 = fsub float 0.000000e+00, %51, !dbg !29
  %88 = fmul float %80, 0x3FF7154760000000, !dbg !33
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #2, !dbg !33
  %90 = fmul float %81, 0x3FF7154760000000, !dbg !33
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #2, !dbg !33
  %92 = fmul float %82, 0x3FF7154760000000, !dbg !33
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #2, !dbg !33
  %94 = fmul float %83, 0x3FF7154760000000, !dbg !33
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #2, !dbg !33
  %96 = fmul float %84, 0x3FF7154760000000, !dbg !33
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #2, !dbg !33
  %98 = fmul float %85, 0x3FF7154760000000, !dbg !33
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !33
  %100 = fmul float %86, 0x3FF7154760000000, !dbg !33
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #2, !dbg !33
  %102 = fmul float %87, 0x3FF7154760000000, !dbg !33
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #2, !dbg !33
  %104 = fadd float %89, 1.000000e+00, !dbg !34
  %105 = fadd float %91, 1.000000e+00, !dbg !34
  %106 = fadd float %93, 1.000000e+00, !dbg !34
  %107 = fadd float %95, 1.000000e+00, !dbg !34
  %108 = fadd float %97, 1.000000e+00, !dbg !34
  %109 = fadd float %99, 1.000000e+00, !dbg !34
  %110 = fadd float %101, 1.000000e+00, !dbg !34
  %111 = fadd float %103, 1.000000e+00, !dbg !34
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #2, !dbg !35
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %105) #2, !dbg !35
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #2, !dbg !35
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #2, !dbg !35
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #2, !dbg !35
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #2, !dbg !35
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #2, !dbg !35
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #2, !dbg !35
  %120 = shl i32 %8, 7, !dbg !35
  %121 = and i32 %120, 896, !dbg !35
  %122 = or disjoint i32 %121, %10, !dbg !35
  %123 = and i32 %12, 508, !dbg !35
  %124 = lshr exact i32 %121, 1, !dbg !35
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !35
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %122, !dbg !35
  %127 = bitcast float %112 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !35
  %128 = or disjoint i32 %122, 32, !dbg !35
  %129 = lshr i32 %128, 5, !dbg !35
  %.idx = shl nuw nsw i32 %129, 4, !dbg !35
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !35
  %132 = bitcast float %113 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !35
  %133 = or disjoint i32 %122, 64, !dbg !35
  %134 = lshr i32 %133, 5, !dbg !35
  %.idx1 = shl nuw nsw i32 %134, 4, !dbg !35
  %135 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !35
  %137 = bitcast float %114 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !35
  %138 = or disjoint i32 %122, 96, !dbg !35
  %139 = lshr i32 %138, 5, !dbg !35
  %.idx2 = shl nuw nsw i32 %139, 4, !dbg !35
  %140 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !35
  %142 = bitcast float %115 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !35
  %143 = or disjoint i32 %122, 16, !dbg !35
  %144 = getelementptr float, ptr addrspace(3) %125, i32 %143, !dbg !35
  %145 = bitcast float %116 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !35
  %146 = or disjoint i32 %122, 48, !dbg !35
  %147 = lshr i32 %146, 5, !dbg !35
  %.idx3 = shl nuw nsw i32 %147, 4, !dbg !35
  %148 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !35
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !35
  %150 = bitcast float %117 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !35
  %151 = or disjoint i32 %122, 80, !dbg !35
  %152 = lshr i32 %151, 5, !dbg !35
  %.idx4 = shl nuw nsw i32 %152, 4, !dbg !35
  %153 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !35
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !35
  %155 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !35
  %156 = or disjoint i32 %122, 112, !dbg !35
  %157 = lshr i32 %156, 5, !dbg !35
  %.idx5 = shl nuw nsw i32 %157, 4, !dbg !35
  %158 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !35
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !35
  %160 = bitcast float %119 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %161 = lshr i32 %123, 5, !dbg !35
  %162 = and i32 %8, 127, !dbg !35
  %163 = add nuw nsw i32 %161, %162, !dbg !35
  %.idx6 = shl nuw nsw i32 %163, 4, !dbg !35
  %164 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !35
  %165 = load float, ptr addrspace(3) %164, align 16, !dbg !35
  %166 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 4, !dbg !35
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !35
  %168 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 8, !dbg !35
  %169 = load float, ptr addrspace(3) %168, align 8, !dbg !35
  %170 = getelementptr inbounds i8, ptr addrspace(3) %164, i32 12, !dbg !35
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !35
  %172 = or disjoint i32 %123, 512, !dbg !35
  %173 = lshr i32 %172, 5, !dbg !35
  %.idx10 = shl nuw nsw i32 %173, 4, !dbg !35
  %174 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !35
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !35
  %176 = load float, ptr addrspace(3) %175, align 16, !dbg !35
  %177 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 4, !dbg !35
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !35
  %179 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 8, !dbg !35
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !35
  %181 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 12, !dbg !35
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !35
  %183 = fmul float %165, %67, !dbg !36
  %184 = fmul float %167, %68, !dbg !36
  %185 = fmul float %169, %69, !dbg !36
  %186 = fmul float %171, %70, !dbg !36
  %187 = fmul float %176, %76, !dbg !36
  %188 = fmul float %178, %77, !dbg !36
  %189 = fmul float %180, %78, !dbg !36
  %190 = fmul float %182, %79, !dbg !36
  %191 = shl i32 %14, 12, !dbg !37
  %192 = shl i32 %15, 12, !dbg !37
  %193 = add i32 %19, %191, !dbg !38
  %194 = add i32 %19, %192, !dbg !38
  %195 = sext i32 %193 to i64, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !39
  %197 = sext i32 %194 to i64, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %199 = lshr exact i32 %121, 3, !dbg !40
  %200 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %199, !dbg !40
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %122, !dbg !40
  %202 = bitcast float %183 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !40
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !40
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %128, !dbg !40
  %205 = bitcast float %184 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !40
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !40
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %133, !dbg !40
  %208 = bitcast float %185 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !40
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !40
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %138, !dbg !40
  %211 = bitcast float %186 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !40
  %212 = getelementptr float, ptr addrspace(3) %200, i32 %143, !dbg !40
  %213 = bitcast float %187 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !40
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !40
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %146, !dbg !40
  %216 = bitcast float %188 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !40
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !40
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %151, !dbg !40
  %219 = bitcast float %189 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !40
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !40
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %156, !dbg !40
  %222 = bitcast float %190 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !40
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %123, !dbg !40
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !40
  %226 = or disjoint i32 %123, 1, !dbg !40
  %227 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %226, !dbg !40
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !40
  %229 = or disjoint i32 %123, 2, !dbg !40
  %230 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %229, !dbg !40
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !40
  %232 = or disjoint i32 %123, 3, !dbg !40
  %233 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %232, !dbg !40
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !40
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !40
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %172, !dbg !40
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !40
  %238 = or disjoint i32 %123, 513, !dbg !40
  %239 = lshr i32 %238, 5, !dbg !40
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !40
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !40
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !40
  %243 = or disjoint i32 %123, 514, !dbg !40
  %244 = lshr i32 %243, 5, !dbg !40
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !40
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %243, !dbg !40
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !40
  %248 = or disjoint i32 %123, 515, !dbg !40
  %249 = lshr i32 %248, 5, !dbg !40
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !40
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !40
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %228, i32 %231, i32 %234, ptr addrspace(1) %196, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %242, i32 %247, i32 %252, ptr addrspace(1) %198, i1 true) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_8", linkageName: "triton_poi_fused_mul_sigmoid_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 52, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 57, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 34, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 35, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 25, scope: !7)
!40 = !DILocation(line: 36, column: 46, scope: !7)
!41 = !DILocation(line: 36, column: 4, scope: !7)
