; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = srem i32 %13, 2176, !dbg !14
  %18 = srem i32 %14, 2176, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %21 = sdiv <2 x i32> %20, <i32 2176, i32 128>, !dbg !15
  %22 = srem <2 x i32> %21, <i32 8, i32 17>, !dbg !16
  %23 = extractelement <2 x i32> %22, i64 1, !dbg !17
  %24 = icmp sgt i32 %23, 0, !dbg !17
  %25 = extractelement <2 x i32> %22, i64 0, !dbg !18
  %26 = icmp sgt i32 %25, -1, !dbg !18
  %27 = and i1 %26, %24, !dbg !18
  %28 = extractelement <2 x i32> %21, i64 0, !dbg !19
  %29 = shl i32 %28, 12, !dbg !19
  %30 = add i32 %29, %17, !dbg !20
  %31 = add i32 %30, -128, !dbg !21
  %32 = add i32 %29, %18, !dbg !20
  %33 = add i32 %32, -128, !dbg !21
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = extractelement <2 x i32> %22, i64 1, !dbg !24
  %49 = icmp ult i32 %48, 16, !dbg !24
  %50 = and i1 %26, %49, !dbg !24
  %51 = sext i32 %30 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %32 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = add i32 %30, 1920, !dbg !27
  %66 = add i32 %32, 1920, !dbg !27
  %67 = sext i32 %65 to i64, !dbg !28
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !28
  %69 = sext i32 %66 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27, i32 -8388608, i1 %27) #2, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !29
  %81 = add i32 %30, 2048, !dbg !30
  %82 = add i32 %32, 2048, !dbg !30
  %83 = sext i32 %81 to i64, !dbg !31
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !31
  %85 = sext i32 %82 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %97 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %98 = insertelement <4 x i32> %97, i32 %40, i64 1, !dbg !23
  %99 = insertelement <4 x i32> %98, i32 %41, i64 2, !dbg !23
  %100 = insertelement <4 x i32> %99, i32 %42, i64 3, !dbg !23
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !23
  %102 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !26
  %103 = insertelement <4 x i32> %102, i32 %57, i64 1, !dbg !26
  %104 = insertelement <4 x i32> %103, i32 %58, i64 2, !dbg !26
  %105 = insertelement <4 x i32> %104, i32 %59, i64 3, !dbg !26
  %106 = bitcast <4 x i32> %105 to <4 x float>, !dbg !26
  %107 = fcmp ogt <4 x float> %106, %101, !dbg !33
  %108 = fcmp uno <4 x float> %106, zeroinitializer, !dbg !37
  %109 = or <4 x i1> %107, %108, !dbg !38
  %.v = select <4 x i1> %109, <4 x i32> %105, <4 x i32> %100, !dbg !39
  %110 = bitcast <4 x i32> %.v to <4 x float>, !dbg !39
  %111 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !29
  %112 = insertelement <4 x i32> %111, i32 %73, i64 1, !dbg !29
  %113 = insertelement <4 x i32> %112, i32 %74, i64 2, !dbg !29
  %114 = insertelement <4 x i32> %113, i32 %75, i64 3, !dbg !29
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !29
  %116 = fcmp olt <4 x float> %110, %115, !dbg !40
  %117 = fcmp uno <4 x float> %115, zeroinitializer, !dbg !42
  %118 = or <4 x i1> %117, %116, !dbg !43
  %.v15 = select <4 x i1> %118, <4 x i32> %114, <4 x i32> %.v, !dbg !44
  %119 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !44
  %120 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !32
  %121 = insertelement <4 x i32> %120, i32 %89, i64 1, !dbg !32
  %122 = insertelement <4 x i32> %121, i32 %90, i64 2, !dbg !32
  %123 = insertelement <4 x i32> %122, i32 %91, i64 3, !dbg !32
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !32
  %125 = fcmp olt <4 x float> %119, %124, !dbg !45
  %126 = extractelement <4 x i1> %125, i64 0, !dbg !47
  %127 = extractelement <4 x i1> %125, i64 1, !dbg !47
  %128 = extractelement <4 x i1> %125, i64 2, !dbg !47
  %129 = extractelement <4 x i1> %125, i64 3, !dbg !47
  %130 = zext <4 x i1> %107 to <4 x i8>, !dbg !48
  %131 = select <4 x i1> %116, <4 x i8> splat (i8 2), <4 x i8> %130, !dbg !49
  %132 = select <4 x i1> %125, <4 x i8> splat (i8 3), <4 x i8> %131, !dbg !50
  %133 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !23
  %134 = insertelement <4 x i32> %133, i32 %45, i64 1, !dbg !23
  %135 = insertelement <4 x i32> %134, i32 %46, i64 2, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %47, i64 3, !dbg !23
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !23
  %138 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !26
  %139 = insertelement <4 x i32> %138, i32 %62, i64 1, !dbg !26
  %140 = insertelement <4 x i32> %139, i32 %63, i64 2, !dbg !26
  %141 = insertelement <4 x i32> %140, i32 %64, i64 3, !dbg !26
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !26
  %143 = fcmp ogt <4 x float> %142, %137, !dbg !33
  %144 = fcmp uno <4 x float> %142, zeroinitializer, !dbg !37
  %145 = or <4 x i1> %143, %144, !dbg !38
  %.v16 = select <4 x i1> %145, <4 x i32> %141, <4 x i32> %136, !dbg !39
  %146 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !39
  %147 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !29
  %148 = insertelement <4 x i32> %147, i32 %78, i64 1, !dbg !29
  %149 = insertelement <4 x i32> %148, i32 %79, i64 2, !dbg !29
  %150 = insertelement <4 x i32> %149, i32 %80, i64 3, !dbg !29
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !29
  %152 = fcmp olt <4 x float> %146, %151, !dbg !40
  %153 = fcmp uno <4 x float> %151, zeroinitializer, !dbg !42
  %154 = or <4 x i1> %153, %152, !dbg !43
  %.v17 = select <4 x i1> %154, <4 x i32> %150, <4 x i32> %.v16, !dbg !44
  %155 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !44
  %156 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !32
  %157 = insertelement <4 x i32> %156, i32 %94, i64 1, !dbg !32
  %158 = insertelement <4 x i32> %157, i32 %95, i64 2, !dbg !32
  %159 = insertelement <4 x i32> %158, i32 %96, i64 3, !dbg !32
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !32
  %161 = fcmp olt <4 x float> %155, %160, !dbg !45
  %162 = shufflevector <4 x float> %160, <4 x float> %124, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !51
  %163 = fcmp uno <8 x float> %162, zeroinitializer, !dbg !51
  %164 = extractelement <8 x i1> %163, i64 7, !dbg !47
  %165 = or i1 %164, %126, !dbg !47
  %166 = extractelement <8 x i1> %163, i64 6, !dbg !47
  %167 = or i1 %166, %127, !dbg !47
  %168 = extractelement <8 x i1> %163, i64 5, !dbg !47
  %169 = or i1 %168, %128, !dbg !47
  %170 = extractelement <8 x i1> %163, i64 4, !dbg !47
  %171 = or i1 %170, %129, !dbg !47
  %172 = extractelement <4 x i1> %161, i64 0, !dbg !47
  %173 = extractelement <8 x i1> %163, i64 3, !dbg !47
  %174 = or i1 %173, %172, !dbg !47
  %175 = extractelement <4 x i1> %161, i64 1, !dbg !47
  %176 = extractelement <8 x i1> %163, i64 2, !dbg !47
  %177 = or i1 %176, %175, !dbg !47
  %178 = extractelement <4 x i1> %161, i64 2, !dbg !47
  %179 = extractelement <8 x i1> %163, i64 1, !dbg !47
  %180 = or i1 %179, %178, !dbg !47
  %181 = extractelement <4 x i1> %161, i64 3, !dbg !47
  %182 = extractelement <8 x i1> %163, i64 0, !dbg !47
  %183 = or i1 %182, %181, !dbg !47
  %184 = zext <4 x i1> %143 to <4 x i8>, !dbg !48
  %185 = select <4 x i1> %152, <4 x i8> splat (i8 2), <4 x i8> %184, !dbg !49
  %186 = select <4 x i1> %161, <4 x i8> splat (i8 3), <4 x i8> %185, !dbg !50
  %187 = sext i32 %15 to i64, !dbg !52
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !52
  %189 = sext i32 %16 to i64, !dbg !52
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !52
  %191 = zext nneg i32 %9 to i64, !dbg !53
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %191, !dbg !53
  %193 = extractelement <4 x i32> %.v15, i64 0, !dbg !53
  %194 = select i1 %165, i32 %88, i32 %193, !dbg !54
  %195 = extractelement <4 x i32> %.v15, i64 1, !dbg !53
  %196 = select i1 %167, i32 %89, i32 %195, !dbg !54
  %197 = extractelement <4 x i32> %.v15, i64 2, !dbg !53
  %198 = select i1 %169, i32 %90, i32 %197, !dbg !54
  %199 = extractelement <4 x i32> %.v15, i64 3, !dbg !53
  %200 = select i1 %171, i32 %91, i32 %199, !dbg !54
  %201 = extractelement <4 x i32> %.v17, i64 0, !dbg !53
  %202 = select i1 %174, i32 %93, i32 %201, !dbg !54
  %203 = extractelement <4 x i32> %.v17, i64 1, !dbg !53
  %204 = select i1 %177, i32 %94, i32 %203, !dbg !54
  %205 = extractelement <4 x i32> %.v17, i64 2, !dbg !53
  %206 = select i1 %180, i32 %95, i32 %205, !dbg !54
  %207 = extractelement <4 x i32> %.v17, i64 3, !dbg !53
  %208 = select i1 %183, i32 %96, i32 %207, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %192, i32 %194, i32 %196, i32 %198, i32 %200, i1 true) #2, !dbg !53
  %209 = getelementptr inbounds i8, ptr addrspace(3) %192, i64 16, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %209, i32 %202, i32 %204, i32 %206, i32 %208, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %210 = zext nneg i32 %11 to i64, !dbg !53
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !53
  %212 = zext nneg i32 %12 to i64, !dbg !53
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %212, !dbg !53
  %214 = load <4 x i32>, ptr addrspace(3) %213, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %211, align 16, !dbg !53
  %215 = getelementptr inbounds i8, ptr addrspace(3) %211, i64 4, !dbg !53
  %.extract8 = load i32, ptr addrspace(3) %215, align 4, !dbg !53
  %216 = getelementptr inbounds i8, ptr addrspace(3) %211, i64 8, !dbg !53
  %.extract9 = load i32, ptr addrspace(3) %216, align 8, !dbg !53
  %217 = getelementptr inbounds i8, ptr addrspace(3) %211, i64 12, !dbg !53
  %.extract10 = load i32, ptr addrspace(3) %217, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %188, i1 true) #2, !dbg !53
  %.extract11 = extractelement <4 x i32> %214, i64 0, !dbg !53
  %.extract12 = extractelement <4 x i32> %214, i64 1, !dbg !53
  %.extract13 = extractelement <4 x i32> %214, i64 2, !dbg !53
  %.extract14 = extractelement <4 x i32> %214, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %190, i1 true) #2, !dbg !53
  %218 = sext i32 %13 to i64, !dbg !55
  %219 = getelementptr i8, ptr addrspace(1) %2, i64 %218, !dbg !55
  %220 = bitcast <4 x i8> %132 to i32, !dbg !56
  %221 = bitcast <4 x i8> %186 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %220, i32 %221, ptr addrspace(1) %219, i1 true) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu5iuv7p5tfz5uxkdijv7wfbxcqmfvqoi5qf6bt6unrdc6kwz23t.py", directory: "inductor_cache/u5")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 36, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 50, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 40, column: 45, scope: !7)
!22 = !DILocation(line: 40, column: 31, scope: !7)
!23 = !DILocation(line: 40, column: 55, scope: !7)
!24 = !DILocation(line: 45, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 31, scope: !7)
!26 = !DILocation(line: 46, column: 46, scope: !7)
!27 = !DILocation(line: 53, column: 43, scope: !7)
!28 = !DILocation(line: 53, column: 31, scope: !7)
!29 = !DILocation(line: 53, column: 53, scope: !7)
!30 = !DILocation(line: 56, column: 43, scope: !7)
!31 = !DILocation(line: 56, column: 31, scope: !7)
!32 = !DILocation(line: 56, column: 53, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 47, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 54, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 57, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 61, column: 35, scope: !7)
!49 = !DILocation(line: 64, column: 35, scope: !7)
!50 = !DILocation(line: 67, column: 35, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!52 = !DILocation(line: 68, column: 25, scope: !7)
!53 = !DILocation(line: 68, column: 37, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!55 = !DILocation(line: 69, column: 25, scope: !7)
!56 = !DILocation(line: 69, column: 37, scope: !7)
!57 = !DILocation(line: 69, column: 4, scope: !7)
