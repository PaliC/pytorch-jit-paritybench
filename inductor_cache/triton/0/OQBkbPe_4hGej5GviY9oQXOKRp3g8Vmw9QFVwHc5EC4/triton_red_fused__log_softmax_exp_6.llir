; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__log_softmax_exp_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %.fr126 = freeze i32 %7, !dbg !11
  %8 = icmp slt i32 %.fr126, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = mul i32 %.fr126, 4672, !dbg !13
  %15 = add i32 %13, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  br i1 %8, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %6
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #4, !dbg !16
  %19 = or disjoint i32 %13, 2048, !dbg !17
  %20 = add i32 %19, %14, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #4, !dbg !16
  %24 = or disjoint i32 %13, 4096, !dbg !17
  %25 = add i32 %24, %14, !dbg !14
  %26 = sext i32 %25 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #4, !dbg !16
  br label %.split125.us, !dbg !18

.split.preheader:                                 ; preds = %6
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %34 = or disjoint i32 %13, 2048, !dbg !17
  %35 = add i32 %34, %14, !dbg !14
  %36 = sext i32 %35 to i64, !dbg !15
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !15
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = or disjoint i32 %13, 4096, !dbg !17
  %44 = icmp samesign ult i32 %43, 4672, !dbg !22
  %45 = add i32 %43, %14, !dbg !14
  %46 = sext i32 %45 to i64, !dbg !15
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !15
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #4, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !16
  %54 = insertelement <4 x i32> %53, i32 %32, i64 1, !dbg !16
  %55 = insertelement <4 x i32> %54, i32 %33, i64 2, !dbg !16
  %56 = insertelement <4 x i32> %55, i32 %30, i64 3, !dbg !16
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !16
  %58 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !16
  %59 = insertelement <4 x i32> %58, i32 %41, i64 1, !dbg !16
  %60 = insertelement <4 x i32> %59, i32 %42, i64 2, !dbg !16
  %61 = insertelement <4 x i32> %60, i32 %39, i64 3, !dbg !16
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !16
  %63 = fcmp ogt <4 x float> %57, %62, !dbg !23
  %64 = fcmp uno <4 x float> %57, zeroinitializer, !dbg !25
  %65 = or <4 x i1> %64, %63, !dbg !26
  %.v = select <4 x i1> %65, <4 x i32> %56, <4 x i32> %61, !dbg !27
  %66 = bitcast <4 x i32> %.v to <4 x float>, !dbg !27
  %67 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !16
  %68 = insertelement <4 x i32> %67, i32 %51, i64 1, !dbg !16
  %69 = insertelement <4 x i32> %68, i32 %52, i64 2, !dbg !16
  %70 = insertelement <4 x i32> %69, i32 %49, i64 3, !dbg !16
  %71 = bitcast <4 x i32> %70 to <4 x float>, !dbg !16
  %72 = fcmp ogt <4 x float> %66, %71, !dbg !23
  %73 = fcmp uno <4 x float> %66, zeroinitializer, !dbg !25
  %74 = or <4 x i1> %73, %72, !dbg !26
  %.v143 = select <4 x i1> %74, <4 x i32> %.v, <4 x i32> %70, !dbg !27
  %75 = insertelement <4 x i1> poison, i1 %44, i64 0, !dbg !28
  %76 = shufflevector <4 x i1> %75, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %.v144 = select <4 x i1> %76, <4 x i32> %.v143, <4 x i32> %.v, !dbg !28
  %77 = bitcast <4 x i32> %.v144 to <4 x float>, !dbg !28
  br label %.split125.us, !dbg !18

.split125.us:                                     ; preds = %.split.us.preheader, %.split.preheader
  %.pre-phi142 = phi i64 [ %26, %.split.us.preheader ], [ %46, %.split.preheader ], !dbg !29
  %.pre-phi139.in = phi i32 [ %24, %.split.us.preheader ], [ %43, %.split.preheader ]
  %.pre-phi138 = phi i64 [ %21, %.split.us.preheader ], [ %36, %.split.preheader ], !dbg !29
  %78 = phi <4 x float> [ splat (float 0xFFF0000000000000), %.split.us.preheader ], [ %77, %.split.preheader ], !dbg !18
  %79 = extractelement <4 x float> %78, i64 0, !dbg !30
  %80 = extractelement <4 x float> %78, i64 3, !dbg !30
  %81 = fcmp ogt float %80, %79, !dbg !30
  %82 = fcmp uno float %80, 0.000000e+00, !dbg !32
  %83 = or i1 %81, %82, !dbg !33
  %84 = select i1 %83, float %80, float %79, !dbg !34
  %85 = extractelement <4 x float> %78, i64 1, !dbg !30
  %86 = fcmp ogt float %84, %85, !dbg !30
  %87 = fcmp uno float %84, 0.000000e+00, !dbg !32
  %88 = or i1 %86, %87, !dbg !33
  %89 = select i1 %88, float %84, float %85, !dbg !34
  %90 = extractelement <4 x float> %78, i64 2, !dbg !30
  %91 = fcmp ogt float %89, %90, !dbg !30
  %92 = fcmp uno float %89, 0.000000e+00, !dbg !32
  %93 = or i1 %91, %92, !dbg !33
  %94 = select i1 %93, float %89, float %90, !dbg !34
  %95 = bitcast float %94 to i32, !dbg !18
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !18
  %97 = bitcast i32 %96 to float, !dbg !18
  %98 = fcmp ogt float %94, %97, !dbg !30
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !32
  %100 = or i1 %99, %98, !dbg !33
  %101 = select i1 %100, float %94, float %97, !dbg !34
  %102 = bitcast float %101 to i32, !dbg !18
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !18
  %104 = bitcast i32 %103 to float, !dbg !18
  %105 = fcmp ogt float %101, %104, !dbg !30
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !32
  %107 = or i1 %105, %106, !dbg !33
  %108 = select i1 %107, float %101, float %104, !dbg !34
  %109 = bitcast float %108 to i32, !dbg !18
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !18
  %111 = bitcast i32 %110 to float, !dbg !18
  %112 = fcmp ogt float %108, %111, !dbg !30
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !32
  %114 = or i1 %112, %113, !dbg !33
  %115 = select i1 %114, float %108, float %111, !dbg !34
  %116 = bitcast float %115 to i32, !dbg !18
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !18
  %118 = bitcast i32 %117 to float, !dbg !18
  %119 = fcmp ogt float %115, %118, !dbg !30
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !32
  %121 = or i1 %119, %120, !dbg !33
  %122 = select i1 %121, float %115, float %118, !dbg !34
  %123 = bitcast float %122 to i32, !dbg !18
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !18
  %125 = bitcast i32 %124 to float, !dbg !18
  %126 = fcmp ogt float %122, %125, !dbg !30
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !32
  %128 = or i1 %126, %127, !dbg !33
  %129 = icmp eq i32 %10, 0, !dbg !18
  %130 = and i32 %11, 15, !dbg !18
  %131 = zext nneg i32 %130 to i64, !dbg !18
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !18
  %133 = select i1 %128, i32 %123, i32 %124, !dbg !34
  %134 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %134, i1 %129) #4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %135 = icmp slt i32 %9, 16, !dbg !18
  %136 = sext i32 %9 to i64, !dbg !18
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %136, !dbg !18
  %138 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %137, i1 %135) #4, !dbg !18
  %139 = bitcast i32 %138 to float, !dbg !18
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !18
  %141 = bitcast i32 %140 to float, !dbg !18
  %142 = fcmp ogt float %139, %141, !dbg !30
  %143 = fcmp uno float %139, 0.000000e+00, !dbg !32
  %144 = or i1 %143, %142, !dbg !33
  %145 = select i1 %144, float %139, float %141, !dbg !34
  %146 = bitcast float %145 to i32, !dbg !18
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !18
  %148 = bitcast i32 %147 to float, !dbg !18
  %149 = fcmp ogt float %145, %148, !dbg !30
  %150 = fcmp uno float %145, 0.000000e+00, !dbg !32
  %151 = or i1 %149, %150, !dbg !33
  %152 = select i1 %151, float %145, float %148, !dbg !34
  %153 = bitcast float %152 to i32, !dbg !18
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !18
  %155 = bitcast i32 %154 to float, !dbg !18
  %156 = fcmp ogt float %152, %155, !dbg !30
  %157 = fcmp uno float %152, 0.000000e+00, !dbg !32
  %158 = or i1 %156, %157, !dbg !33
  %159 = select i1 %158, float %152, float %155, !dbg !34
  %160 = bitcast float %159 to i32, !dbg !18
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !18
  %162 = bitcast i32 %161 to float, !dbg !18
  %163 = fcmp ogt float %159, %162, !dbg !30
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !32
  %165 = or i1 %163, %164, !dbg !33
  %166 = and i32 %9, 15, !dbg !18
  %167 = icmp eq i32 %166, 0, !dbg !18
  %168 = and i1 %135, %167, !dbg !18
  %169 = select i1 %165, i32 %160, i32 %161, !dbg !34
  %170 = insertelement <1 x i32> poison, i32 %169, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %170, i1 %168) #4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %171 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %172 = sext i32 %.fr126 to i64, !dbg !35
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !35
  %urem = and i32 %9, 511, !dbg !36
  %174 = icmp eq i32 %urem, 0, !dbg !36
  %175 = bitcast float %171 to i32, !dbg !36
  %176 = and i1 %174, %8, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %173, i1 %176) #4, !dbg !36
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !29
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !37
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !37
  %183 = bitcast i32 %179 to float, !dbg !37
  %184 = bitcast i32 %180 to float, !dbg !37
  %185 = bitcast i32 %181 to float, !dbg !37
  %186 = bitcast i32 %182 to float, !dbg !37
  %187 = fsub float %183, %171, !dbg !38
  %188 = fsub float %184, %171, !dbg !38
  %189 = fsub float %185, %171, !dbg !38
  %190 = fsub float %186, %171, !dbg !38
  %191 = fmul float %187, 0x3FF7154760000000, !dbg !39
  %192 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %191) #4, !dbg !39
  %193 = fmul float %188, 0x3FF7154760000000, !dbg !39
  %194 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %193) #4, !dbg !39
  %195 = fmul float %189, 0x3FF7154760000000, !dbg !39
  %196 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %195) #4, !dbg !39
  %197 = fmul float %190, 0x3FF7154760000000, !dbg !39
  %198 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %197) #4, !dbg !39
  %199 = fadd float %192, 0.000000e+00, !dbg !40
  %200 = fadd float %194, 0.000000e+00, !dbg !40
  %201 = fadd float %196, 0.000000e+00, !dbg !40
  %202 = fadd float %198, 0.000000e+00, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %.pre-phi138, !dbg !29
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !37
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !37
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !37
  %209 = bitcast i32 %205 to float, !dbg !37
  %210 = bitcast i32 %206 to float, !dbg !37
  %211 = bitcast i32 %207 to float, !dbg !37
  %212 = bitcast i32 %208 to float, !dbg !37
  %213 = fsub float %209, %171, !dbg !38
  %214 = fsub float %210, %171, !dbg !38
  %215 = fsub float %211, %171, !dbg !38
  %216 = fsub float %212, %171, !dbg !38
  %217 = fmul float %213, 0x3FF7154760000000, !dbg !39
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #4, !dbg !39
  %219 = fmul float %214, 0x3FF7154760000000, !dbg !39
  %220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %219) #4, !dbg !39
  %221 = fmul float %215, 0x3FF7154760000000, !dbg !39
  %222 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %221) #4, !dbg !39
  %223 = fmul float %216, 0x3FF7154760000000, !dbg !39
  %224 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %223) #4, !dbg !39
  %225 = fadd float %199, %218, !dbg !40
  %226 = fadd float %200, %220, !dbg !40
  %227 = fadd float %201, %222, !dbg !40
  %228 = fadd float %202, %224, !dbg !40
  %229 = select i1 %8, float %225, float 0.000000e+00, !dbg !41
  %230 = select i1 %8, float %226, float 0.000000e+00, !dbg !41
  %231 = select i1 %8, float %227, float 0.000000e+00, !dbg !41
  %232 = select i1 %8, float %228, float 0.000000e+00, !dbg !41
  %233 = icmp samesign ult i32 %.pre-phi139.in, 4672, !dbg !42
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %.pre-phi142, !dbg !29
  %235 = and i1 %8, %233, !dbg !43
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235) #4, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !37
  %241 = bitcast i32 %237 to float, !dbg !37
  %242 = bitcast i32 %238 to float, !dbg !37
  %243 = bitcast i32 %239 to float, !dbg !37
  %244 = bitcast i32 %240 to float, !dbg !37
  %245 = fsub float %241, %171, !dbg !38
  %246 = fsub float %242, %171, !dbg !38
  %247 = fsub float %243, %171, !dbg !38
  %248 = fsub float %244, %171, !dbg !38
  %249 = fmul float %245, 0x3FF7154760000000, !dbg !39
  %250 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %249) #4, !dbg !39
  %251 = fmul float %246, 0x3FF7154760000000, !dbg !39
  %252 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %251) #4, !dbg !39
  %253 = fmul float %247, 0x3FF7154760000000, !dbg !39
  %254 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %253) #4, !dbg !39
  %255 = fmul float %248, 0x3FF7154760000000, !dbg !39
  %256 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %255) #4, !dbg !39
  %257 = fadd float %229, %250, !dbg !40
  %258 = fadd float %230, %252, !dbg !40
  %259 = fadd float %231, %254, !dbg !40
  %260 = fadd float %232, %256, !dbg !40
  %261 = select i1 %235, float %257, float %229, !dbg !41
  %262 = select i1 %235, float %258, float %230, !dbg !41
  %263 = select i1 %235, float %259, float %231, !dbg !41
  %264 = select i1 %235, float %260, float %232, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %265 = fadd float %261, %262, !dbg !48
  %266 = fadd float %263, %265, !dbg !48
  %267 = fadd float %264, %266, !dbg !48
  %268 = bitcast float %267 to i32, !dbg !44
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 16, i32 31), !dbg !44
  %270 = bitcast i32 %269 to float, !dbg !44
  %271 = fadd float %267, %270, !dbg !48
  %272 = bitcast float %271 to i32, !dbg !44
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !44
  %274 = bitcast i32 %273 to float, !dbg !44
  %275 = fadd float %271, %274, !dbg !48
  %276 = bitcast float %275 to i32, !dbg !44
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 4, i32 31), !dbg !44
  %278 = bitcast i32 %277 to float, !dbg !44
  %279 = fadd float %275, %278, !dbg !48
  %280 = bitcast float %279 to i32, !dbg !44
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !44
  %282 = bitcast i32 %281 to float, !dbg !44
  %283 = fadd float %279, %282, !dbg !48
  %284 = bitcast float %283 to i32, !dbg !44
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !44
  %286 = bitcast i32 %285 to float, !dbg !44
  %287 = fadd float %283, %286, !dbg !48
  %288 = bitcast float %287 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %288, i1 %129) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %289 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %137, i1 %135) #4, !dbg !44
  %290 = bitcast i32 %289 to float, !dbg !44
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 8, i32 31), !dbg !44
  %292 = bitcast i32 %291 to float, !dbg !44
  %293 = fadd float %290, %292, !dbg !48
  %294 = bitcast float %293 to i32, !dbg !44
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !44
  %296 = bitcast i32 %295 to float, !dbg !44
  %297 = fadd float %293, %296, !dbg !48
  %298 = bitcast float %297 to i32, !dbg !44
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !44
  %300 = bitcast i32 %299 to float, !dbg !44
  %301 = fadd float %297, %300, !dbg !48
  %302 = bitcast float %301 to i32, !dbg !44
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !44
  %304 = bitcast i32 %303 to float, !dbg !44
  %305 = fadd float %301, %304, !dbg !48
  %306 = bitcast float %305 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %306, i1 %168) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %307 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %308 = fcmp olt float %307, 0x3810000000000000, !dbg !50
  %309 = fmul float %307, 0x4160000000000000, !dbg !50
  %.02.i = select i1 %308, float %309, float %307, !dbg !50
  %i.i.0.i = select i1 %308, float -2.300000e+01, float 0.000000e+00, !dbg !50
  %310 = bitcast float %.02.i to i32, !dbg !50
  %311 = add i32 %310, -1059760811, !dbg !50
  %312 = and i32 %311, -8388608, !dbg !50
  %313 = sub i32 %310, %312, !dbg !50
  %314 = bitcast i32 %313 to float, !dbg !50
  %315 = sitofp i32 %312 to float, !dbg !50
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %316, 0, !dbg !50
  %317 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %315, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !50
  %318 = tail call float @llvm.nvvm.fma.rn.f(float %315, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !50
  %.08.i = select i1 %.not.i, float %318, float %317, !dbg !50
  %319 = fadd float %314, -1.000000e+00, !dbg !50
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not1.i = icmp eq i32 %320, 0, !dbg !50
  %321 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %319, float 0x3FC2073EC0000000) #4, !dbg !50
  %322 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %319, float 0x3FC2073EC0000000) #4, !dbg !50
  %.010.i = select i1 %.not1.i, float %322, float %321, !dbg !50
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not2.i = icmp eq i32 %323, 0, !dbg !50
  %324 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %319, float 0xBFBF19B980000000) #4, !dbg !50
  %325 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %319, float 0xBFBF19B980000000) #4, !dbg !50
  %.011.i = select i1 %.not2.i, float %325, float %324, !dbg !50
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not3.i = icmp eq i32 %326, 0, !dbg !50
  %327 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %319, float 0x3FC1E52AA0000000) #4, !dbg !50
  %328 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %319, float 0x3FC1E52AA0000000) #4, !dbg !50
  %.012.i = select i1 %.not3.i, float %328, float %327, !dbg !50
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not4.i = icmp eq i32 %329, 0, !dbg !50
  %330 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %319, float 0xBFC55B1720000000) #4, !dbg !50
  %331 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %319, float 0xBFC55B1720000000) #4, !dbg !50
  %.09.i = select i1 %.not4.i, float %331, float %330, !dbg !50
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not5.i = icmp eq i32 %332, 0, !dbg !50
  %333 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %319, float 0x3FC99DA160000000) #4, !dbg !50
  %334 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %319, float 0x3FC99DA160000000) #4, !dbg !50
  %.05.i = select i1 %.not5.i, float %334, float %333, !dbg !50
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not6.i = icmp eq i32 %335, 0, !dbg !50
  %336 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %319, float 0xBFCFFFE440000000) #4, !dbg !50
  %337 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %319, float 0xBFCFFFE440000000) #4, !dbg !50
  %.01.i = select i1 %.not6.i, float %337, float %336, !dbg !50
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not7.i = icmp eq i32 %338, 0, !dbg !50
  %339 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %319, float 0x3FD5554F00000000) #4, !dbg !50
  %340 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %319, float 0x3FD5554F00000000) #4, !dbg !50
  %.0.i = select i1 %.not7.i, float %340, float %339, !dbg !50
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not8.i = icmp eq i32 %341, 0, !dbg !50
  %342 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %319, float -5.000000e-01) #4, !dbg !50
  %343 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %319, float -5.000000e-01) #4, !dbg !50
  %.07.i = select i1 %.not8.i, float %343, float %342, !dbg !50
  %344 = fmul float %319, %.07.i, !dbg !50
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not9.i = icmp eq i32 %345, 0, !dbg !50
  %346 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %344, float %319, float %319) #4, !dbg !50
  %347 = tail call float @llvm.nvvm.fma.rn.f(float %344, float %319, float %319) #4, !dbg !50
  %.06.i = select i1 %.not9.i, float %347, float %346, !dbg !50
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not10.i = icmp eq i32 %348, 0, !dbg !50
  %349 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !50
  %350 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !50
  %.04.i = select i1 %.not10.i, float %350, float %349, !dbg !50
  %351 = icmp ugt i32 %310, 2139095039, !dbg !50
  br i1 %351, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !50

__nv_fmaf_rn.exit.i.i:                            ; preds = %.split125.us
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not11.i = icmp eq i32 %352, 0, !dbg !50
  %353 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !50
  %354 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !50
  %.03.i = select i1 %.not11.i, float %354, float %353, !dbg !50
  br label %__nv_logf.exit, !dbg !50

__nv_logf.exit:                                   ; preds = %.split125.us, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %.split125.us ], !dbg !50
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br i1 %351, label %__nv_fmaf_rn.exit.i.i29, label %__nv_logf.exit32, !dbg !50

__nv_fmaf_rn.exit.i.i29:                          ; preds = %__nv_logf.exit
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br label %__nv_logf.exit32, !dbg !50

__nv_logf.exit32:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i29
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br i1 %351, label %__nv_fmaf_rn.exit.i.i59, label %__nv_logf.exit62, !dbg !50

__nv_fmaf_rn.exit.i.i59:                          ; preds = %__nv_logf.exit32
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br label %__nv_logf.exit62, !dbg !50

__nv_logf.exit62:                                 ; preds = %__nv_logf.exit32, %__nv_fmaf_rn.exit.i.i59
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br i1 %351, label %__nv_fmaf_rn.exit.i.i89, label %__nv_logf.exit92, !dbg !50

__nv_fmaf_rn.exit.i.i89:                          ; preds = %__nv_logf.exit62
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  br label %__nv_logf.exit92, !dbg !50

__nv_logf.exit92:                                 ; preds = %__nv_logf.exit62, %__nv_fmaf_rn.exit.i.i89
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i95 = icmp eq i32 %391, 0, !dbg !50
  %.08.i96 = select i1 %.not.i95, float %318, float %317, !dbg !50
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not1.i97 = icmp eq i32 %392, 0, !dbg !50
  %.010.i98 = select i1 %.not1.i97, float %322, float %321, !dbg !50
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not2.i99 = icmp eq i32 %393, 0, !dbg !50
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i98, float %319, float 0xBFBF19B980000000) #4, !dbg !50
  %395 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i98, float %319, float 0xBFBF19B980000000) #4, !dbg !50
  %.011.i100 = select i1 %.not2.i99, float %395, float %394, !dbg !50
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not3.i101 = icmp eq i32 %396, 0, !dbg !50
  %397 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i100, float %319, float 0x3FC1E52AA0000000) #4, !dbg !50
  %398 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i100, float %319, float 0x3FC1E52AA0000000) #4, !dbg !50
  %.012.i102 = select i1 %.not3.i101, float %398, float %397, !dbg !50
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not4.i103 = icmp eq i32 %399, 0, !dbg !50
  %400 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i102, float %319, float 0xBFC55B1720000000) #4, !dbg !50
  %401 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i102, float %319, float 0xBFC55B1720000000) #4, !dbg !50
  %.09.i104 = select i1 %.not4.i103, float %401, float %400, !dbg !50
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not5.i105 = icmp eq i32 %402, 0, !dbg !50
  %403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i104, float %319, float 0x3FC99DA160000000) #4, !dbg !50
  %404 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i104, float %319, float 0x3FC99DA160000000) #4, !dbg !50
  %.05.i106 = select i1 %.not5.i105, float %404, float %403, !dbg !50
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not6.i107 = icmp eq i32 %405, 0, !dbg !50
  %406 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i106, float %319, float 0xBFCFFFE440000000) #4, !dbg !50
  %407 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i106, float %319, float 0xBFCFFFE440000000) #4, !dbg !50
  %.01.i108 = select i1 %.not6.i107, float %407, float %406, !dbg !50
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not7.i109 = icmp eq i32 %408, 0, !dbg !50
  %409 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i108, float %319, float 0x3FD5554F00000000) #4, !dbg !50
  %410 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i108, float %319, float 0x3FD5554F00000000) #4, !dbg !50
  %.0.i110 = select i1 %.not7.i109, float %410, float %409, !dbg !50
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not8.i111 = icmp eq i32 %411, 0, !dbg !50
  %412 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i110, float %319, float -5.000000e-01) #4, !dbg !50
  %413 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i110, float %319, float -5.000000e-01) #4, !dbg !50
  %.07.i112 = select i1 %.not8.i111, float %413, float %412, !dbg !50
  %414 = fmul float %319, %.07.i112, !dbg !50
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not9.i113 = icmp eq i32 %415, 0, !dbg !50
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %414, float %319, float %319) #4, !dbg !50
  %417 = tail call float @llvm.nvvm.fma.rn.f(float %414, float %319, float %319) #4, !dbg !50
  %.06.i114 = select i1 %.not9.i113, float %417, float %416, !dbg !50
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not10.i115 = icmp eq i32 %418, 0, !dbg !50
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i96, float 0x3FE62E4300000000, float %.06.i114) #4, !dbg !50
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i96, float 0x3FE62E4300000000, float %.06.i114) #4, !dbg !50
  %.04.i116 = select i1 %.not10.i115, float %420, float %419, !dbg !50
  br i1 %351, label %__nv_fmaf_rn.exit.i.i119, label %__nv_logf.exit122, !dbg !50

__nv_fmaf_rn.exit.i.i119:                         ; preds = %__nv_logf.exit92
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not11.i120 = icmp eq i32 %421, 0, !dbg !50
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !50
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !50
  %.03.i121 = select i1 %.not11.i120, float %423, float %422, !dbg !50
  br label %__nv_logf.exit122, !dbg !50

__nv_logf.exit122:                                ; preds = %__nv_logf.exit92, %__nv_fmaf_rn.exit.i.i119
  %r.i.0.i117 = phi float [ %.03.i121, %__nv_fmaf_rn.exit.i.i119 ], [ %.04.i116, %__nv_logf.exit92 ], !dbg !50
  %424 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !50
  %r.i.1.i = select i1 %424, float 0xFFF0000000000000, float %r.i.0.i, !dbg !50
  %r.i.1.i118 = select i1 %424, float 0xFFF0000000000000, float %r.i.0.i117, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !52
  %426 = bitcast float %r.i.1.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %425, i1 %176) #4, !dbg !53
  %427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !54
  %428 = extractvalue { i32, i32, i32, i32 } %427, 0, !dbg !54
  %429 = extractvalue { i32, i32, i32, i32 } %427, 1, !dbg !54
  %430 = extractvalue { i32, i32, i32, i32 } %427, 2, !dbg !54
  %431 = extractvalue { i32, i32, i32, i32 } %427, 3, !dbg !54
  %432 = bitcast i32 %428 to float, !dbg !54
  %433 = bitcast i32 %429 to float, !dbg !54
  %434 = bitcast i32 %430 to float, !dbg !54
  %435 = bitcast i32 %431 to float, !dbg !54
  %436 = fsub float %432, %171, !dbg !55
  %437 = fsub float %433, %171, !dbg !55
  %438 = fsub float %434, %171, !dbg !55
  %439 = fsub float %435, %171, !dbg !55
  %440 = fsub float %436, %r.i.1.i118, !dbg !56
  %441 = fsub float %437, %r.i.1.i118, !dbg !56
  %442 = fsub float %438, %r.i.1.i118, !dbg !56
  %443 = fsub float %439, %r.i.1.i118, !dbg !56
  %444 = fmul float %440, 0x3FF7154760000000, !dbg !57
  %445 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %444) #4, !dbg !57
  %446 = fmul float %441, 0x3FF7154760000000, !dbg !57
  %447 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %446) #4, !dbg !57
  %448 = fmul float %442, 0x3FF7154760000000, !dbg !57
  %449 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %448) #4, !dbg !57
  %450 = fmul float %443, 0x3FF7154760000000, !dbg !57
  %451 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %450) #4, !dbg !57
  %452 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !58
  %453 = bitcast float %445 to i32, !dbg !59
  %454 = bitcast float %447 to i32, !dbg !59
  %455 = bitcast float %449 to i32, !dbg !59
  %456 = bitcast float %451 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %454, i32 %455, i32 %456, ptr addrspace(1) %452, i1 %8) #4, !dbg !59
  %457 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !54
  %458 = extractvalue { i32, i32, i32, i32 } %457, 0, !dbg !54
  %459 = extractvalue { i32, i32, i32, i32 } %457, 1, !dbg !54
  %460 = extractvalue { i32, i32, i32, i32 } %457, 2, !dbg !54
  %461 = extractvalue { i32, i32, i32, i32 } %457, 3, !dbg !54
  %462 = bitcast i32 %458 to float, !dbg !54
  %463 = bitcast i32 %459 to float, !dbg !54
  %464 = bitcast i32 %460 to float, !dbg !54
  %465 = bitcast i32 %461 to float, !dbg !54
  %466 = fsub float %462, %171, !dbg !55
  %467 = fsub float %463, %171, !dbg !55
  %468 = fsub float %464, %171, !dbg !55
  %469 = fsub float %465, %171, !dbg !55
  %470 = fsub float %466, %r.i.1.i118, !dbg !56
  %471 = fsub float %467, %r.i.1.i118, !dbg !56
  %472 = fsub float %468, %r.i.1.i118, !dbg !56
  %473 = fsub float %469, %r.i.1.i118, !dbg !56
  %474 = fmul float %470, 0x3FF7154760000000, !dbg !57
  %475 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %474) #4, !dbg !57
  %476 = fmul float %471, 0x3FF7154760000000, !dbg !57
  %477 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %476) #4, !dbg !57
  %478 = fmul float %472, 0x3FF7154760000000, !dbg !57
  %479 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %478) #4, !dbg !57
  %480 = fmul float %473, 0x3FF7154760000000, !dbg !57
  %481 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %480) #4, !dbg !57
  %482 = getelementptr float, ptr addrspace(1) %3, i64 %.pre-phi138, !dbg !58
  %483 = bitcast float %475 to i32, !dbg !59
  %484 = bitcast float %477 to i32, !dbg !59
  %485 = bitcast float %479 to i32, !dbg !59
  %486 = bitcast float %481 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %483, i32 %484, i32 %485, i32 %486, ptr addrspace(1) %482, i1 %8) #4, !dbg !59
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235) #4, !dbg !54
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !54
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !54
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !54
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !54
  %492 = bitcast i32 %488 to float, !dbg !54
  %493 = bitcast i32 %489 to float, !dbg !54
  %494 = bitcast i32 %490 to float, !dbg !54
  %495 = bitcast i32 %491 to float, !dbg !54
  %496 = fsub float %492, %171, !dbg !55
  %497 = fsub float %493, %171, !dbg !55
  %498 = fsub float %494, %171, !dbg !55
  %499 = fsub float %495, %171, !dbg !55
  %500 = fsub float %496, %r.i.1.i118, !dbg !56
  %501 = fsub float %497, %r.i.1.i118, !dbg !56
  %502 = fsub float %498, %r.i.1.i118, !dbg !56
  %503 = fsub float %499, %r.i.1.i118, !dbg !56
  %504 = fmul float %500, 0x3FF7154760000000, !dbg !57
  %505 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %504) #4, !dbg !57
  %506 = fmul float %501, 0x3FF7154760000000, !dbg !57
  %507 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %506) #4, !dbg !57
  %508 = fmul float %502, 0x3FF7154760000000, !dbg !57
  %509 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %508) #4, !dbg !57
  %510 = fmul float %503, 0x3FF7154760000000, !dbg !57
  %511 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %510) #4, !dbg !57
  %512 = getelementptr float, ptr addrspace(1) %3, i64 %.pre-phi142, !dbg !58
  %513 = bitcast float %505 to i32, !dbg !59
  %514 = bitcast float %507 to i32, !dbg !59
  %515 = bitcast float %509 to i32, !dbg !59
  %516 = bitcast float %511 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %513, i32 %514, i32 %515, i32 %516, ptr addrspace(1) %512, i1 %235) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_red_fused__log_softmax_exp_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__log_softmax_exp_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__log_softmax_exp_6", linkageName: "triton_red_fused__log_softmax_exp_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 36, column: 38, scope: !7)
!22 = !DILocation(line: 30, column: 25, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !24)
!24 = !DILocation(line: 34, column: 45, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !19, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !19, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !24)
!28 = !DILocation(line: 35, column: 46, scope: !7)
!29 = !DILocation(line: 43, column: 34, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !21)
!31 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!32 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !21)
!33 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !21)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !21)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 43, column: 49, scope: !7)
!38 = !DILocation(line: 44, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 27, scope: !7)
!40 = !DILocation(line: 47, column: 23, scope: !7)
!41 = !DILocation(line: 48, column: 46, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 43, column: 57, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 50, column: 24, scope: !7)
!51 = !DILocation(line: 51, column: 4, scope: !7)
!52 = !DILocation(line: 52, column: 28, scope: !7)
!53 = !DILocation(line: 52, column: 40, scope: !7)
!54 = !DILocation(line: 57, column: 50, scope: !7)
!55 = !DILocation(line: 58, column: 24, scope: !7)
!56 = !DILocation(line: 59, column: 24, scope: !7)
!57 = !DILocation(line: 60, column: 28, scope: !7)
!58 = !DILocation(line: 61, column: 29, scope: !7)
!59 = !DILocation(line: 61, column: 51, scope: !7)
!60 = !DILocation(line: 53, column: 4, scope: !7)
