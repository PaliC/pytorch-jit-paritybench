#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":36:38)
#loc38 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":49:25)
#loc63 = loc(callsite(#loc1 at #loc21))
#loc69 = loc(callsite(#loc1 at #loc38))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__log_softmax_exp_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4672_i32 = arith.constant 4672 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4672> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c4672_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8 = scf.for %arg6 = %c0_i32 to %c4672_i32 step %c2048_i32 iter_args(%arg7 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %28 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %34 = tt.load %32, %33, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
      %35 = arith.cmpf ogt, %arg7, %34 : tensor<1x2048xf32, #blocked> loc(#loc58)
      %36 = arith.cmpf une, %arg7, %arg7 : tensor<1x2048xf32, #blocked> loc(#loc59)
      %37 = arith.ori %35, %36 : tensor<1x2048xi1, #blocked> loc(#loc60)
      %38 = arith.select %37, %arg7, %34 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc61)
      %39 = arith.select %33, %38, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc18)
      scf.yield %39 : tensor<1x2048xf32, #blocked> loc(#loc19)
    } loc(#loc9)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc21)), %arg7: f32 loc(callsite(#loc1 at #loc21))):
      %28 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc71)
      %29 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc72)
      %30 = arith.ori %28, %29 : i1 loc(#loc73)
      %31 = arith.select %30, %arg6, %arg7 : f32 loc(#loc74)
      tt.reduce.return %31 : f32 loc(#loc62)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc62)
    %10 = triton_gpu.convert_layout %9 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc22)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc22)
    %12 = tt.expand_dims %9 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc22)
    %13 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc23)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %15 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc24)
    tt.store %14, %11, %15 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %16 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc25)
    %17 = scf.for %arg6 = %c0_i32 to %c4672_i32 step %c2048_i32 iter_args(%arg7 = %cst_0) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %28 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc27)
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked> loc(#loc27)
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc28)
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked> loc(#loc29)
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc30)
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked> loc(#loc31)
      %34 = tt.load %32, %33, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc32)
      %35 = arith.subf %34, %16 : tensor<1x2048xf32, #blocked> loc(#loc25)
      %36 = math.exp %35 : tensor<1x2048xf32, #blocked> loc(#loc33)
      %37 = arith.addf %arg7, %36 : tensor<1x2048xf32, #blocked> loc(#loc34)
      %38 = arith.select %33, %37, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc35)
      scf.yield %38 : tensor<1x2048xf32, #blocked> loc(#loc36)
    } loc(#loc26)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc38)), %arg7: f32 loc(callsite(#loc1 at #loc38))):
      %28 = arith.addf %arg6, %arg7 : f32 loc(#loc75)
      tt.reduce.return %28 : f32 loc(#loc68)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc68)
    %19 = triton_gpu.convert_layout %18 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc40)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc41)
    %21 = tt.expand_dims %18 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc41)
    %22 = math.log %20 : tensor<1x1xf32, #blocked1> loc(#loc40)
    %23 = math.log %21 : tensor<1x1xf32, #blocked> loc(#loc40)
    gpu.barrier loc(#loc42)
    %24 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc43)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.store %25, %22, %15 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %26 = tt.broadcast %23 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc45)
    %27 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc46)
    scf.for %arg6 = %c0_i32 to %c4672_i32 step %c2048_i32  : i32 {
      %28 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc48)
      %29 = arith.addi %28, %3 : tensor<1x2048xi32, #blocked> loc(#loc48)
      %30 = arith.cmpi slt, %29, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc49)
      %31 = arith.addi %29, %5 : tensor<1x2048xi32, #blocked> loc(#loc50)
      %32 = tt.addptr %6, %31 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc51)
      %33 = arith.andi %30, %7 : tensor<1x2048xi1, #blocked> loc(#loc52)
      %34 = tt.load %32, %33, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc53)
      %35 = arith.subf %34, %16 : tensor<1x2048xf32, #blocked> loc(#loc54)
      %36 = arith.subf %35, %26 : tensor<1x2048xf32, #blocked> loc(#loc45)
      %37 = math.exp %36 : tensor<1x2048xf32, #blocked> loc(#loc55)
      %38 = tt.addptr %27, %31 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc46)
      tt.store %38, %37, %33 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc56)
    } loc(#loc47)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":22:28)
#loc3 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":24:21)
#loc4 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":25:33)
#loc5 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":32:44)
#loc6 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":32:39)
#loc7 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":32:34)
#loc8 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":32:57)
#loc9 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":28:36)
#loc10 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":29:27)
#loc11 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":30:25)
#loc12 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":32:49)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc14 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":34:45)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc18 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":35:46)
#loc19 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":35:8)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc22 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":36:41)
#loc23 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":37:25)
#loc24 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":37:36)
#loc25 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":44:22)
#loc26 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":39:36)
#loc27 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":40:27)
#loc28 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":41:25)
#loc29 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":43:39)
#loc30 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":43:34)
#loc31 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":43:57)
#loc32 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":43:49)
#loc33 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":45:27)
#loc34 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":47:23)
#loc35 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":48:46)
#loc36 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":48:8)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc40 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":50:24)
#loc41 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":49:28)
#loc42 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":51:4)
#loc43 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":52:28)
#loc44 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":52:40)
#loc45 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":59:24)
#loc46 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":61:29)
#loc47 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":53:36)
#loc48 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":54:27)
#loc49 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":55:25)
#loc50 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":57:40)
#loc51 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":57:35)
#loc52 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":57:58)
#loc53 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":57:50)
#loc54 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":58:24)
#loc55 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":60:28)
#loc56 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":61:51)
#loc57 = loc("inductor_cache/ik/cik6q3p5wkfild6aohqu7dzm6eexarcyhbmu3an7gpxlugofmo2n.py":53:4)
#loc58 = loc(callsite(#loc13 at #loc14))
#loc59 = loc(callsite(#loc15 at #loc14))
#loc60 = loc(callsite(#loc16 at #loc14))
#loc61 = loc(callsite(#loc17 at #loc14))
#loc62 = loc(callsite(#loc20 at #loc21))
#loc64 = loc(callsite(#loc13 at #loc20))
#loc65 = loc(callsite(#loc15 at #loc20))
#loc66 = loc(callsite(#loc16 at #loc20))
#loc67 = loc(callsite(#loc17 at #loc20))
#loc68 = loc(callsite(#loc37 at #loc38))
#loc70 = loc(callsite(#loc39 at #loc37))
#loc71 = loc(callsite(#loc64 at #loc21))
#loc72 = loc(callsite(#loc65 at #loc21))
#loc73 = loc(callsite(#loc66 at #loc21))
#loc74 = loc(callsite(#loc67 at #loc21))
#loc75 = loc(callsite(#loc70 at #loc38))
