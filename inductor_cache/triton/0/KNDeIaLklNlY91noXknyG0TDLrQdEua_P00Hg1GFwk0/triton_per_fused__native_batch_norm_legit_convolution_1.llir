; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = srem i32 %9, 4, !dbg !13
  %14 = shl i32 %9, 4, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #4, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #4, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = sext i32 %13 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #4, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #4, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #4, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = fadd float %19, %25, !dbg !21
  %31 = fadd float %21, %27, !dbg !21
  %32 = fcmp ogt float %30, 0.000000e+00, !dbg !22
  %33 = fcmp ogt float %31, 0.000000e+00, !dbg !22
  %34 = fmul float %30, %29, !dbg !23
  %35 = fmul float %31, %29, !dbg !23
  %36 = select i1 %32, float %30, float %34, !dbg !24
  %37 = select i1 %33, float %31, float %35, !dbg !24
  %38 = select i1 %10, float %36, float 0.000000e+00, !dbg !25
  %39 = select i1 %10, float %37, float 0.000000e+00, !dbg !25
  %40 = bitcast float %38 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %38, %42, !dbg !30
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %47, %50, !dbg !30
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !30
  %56 = bitcast float %39 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %39, %58, !dbg !30
  %60 = bitcast float %59 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %59, %62, !dbg !30
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %67, %70, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 1.600000e+01) #4, !dbg !32
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 1.600000e+01) #4, !dbg !32
  %74 = fsub float %36, %72, !dbg !33
  %75 = fsub float %37, %73, !dbg !33
  %76 = fmul float %74, %74, !dbg !34
  %77 = fmul float %75, %75, !dbg !34
  %78 = select i1 %10, float %76, float 0.000000e+00, !dbg !35
  %79 = select i1 %10, float %77, float 0.000000e+00, !dbg !35
  %80 = bitcast float %78 to i32, !dbg !36
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fadd float %78, %82, !dbg !38
  %84 = bitcast float %83 to i32, !dbg !36
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !36
  %86 = bitcast i32 %85 to float, !dbg !36
  %87 = fadd float %83, %86, !dbg !38
  %88 = bitcast float %87 to i32, !dbg !36
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !36
  %90 = bitcast i32 %89 to float, !dbg !36
  %91 = fadd float %87, %90, !dbg !38
  %92 = bitcast float %91 to i32, !dbg !36
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = fadd float %91, %94, !dbg !38
  %96 = bitcast float %79 to i32, !dbg !36
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !36
  %98 = bitcast i32 %97 to float, !dbg !36
  %99 = fadd float %79, %98, !dbg !38
  %100 = bitcast float %99 to i32, !dbg !36
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !36
  %102 = bitcast i32 %101 to float, !dbg !36
  %103 = fadd float %99, %102, !dbg !38
  %104 = bitcast float %103 to i32, !dbg !36
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !36
  %106 = bitcast i32 %105 to float, !dbg !36
  %107 = fadd float %103, %106, !dbg !38
  %108 = bitcast float %107 to i32, !dbg !36
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = fadd float %107, %110, !dbg !38
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.600000e+01) #4, !dbg !39
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.600000e+01) #4, !dbg !39
  %114 = fadd float %112, 0x3EE4F8B580000000, !dbg !40
  %115 = fadd float %113, 0x3EE4F8B580000000, !dbg !40
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %116, 0, !dbg !41
  br i1 %.not.i, label %119, label %117, !dbg !41

117:                                              ; preds = %8
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %114), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

119:                                              ; preds = %8
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %114), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %117, %119
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], !dbg !41
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i1 = icmp eq i32 %121, 0, !dbg !41
  br i1 %.not.i1, label %124, label %122, !dbg !41

122:                                              ; preds = %__nv_rsqrtf.exit
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %122, %124
  %.0.i2 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !41
  %126 = fmul float %74, %.0.i, !dbg !42
  %127 = and i32 %11, 48, !dbg !43
  %128 = icmp eq i32 %127, 0, !dbg !43
  %129 = bitcast float %30 to i32, !dbg !43
  %130 = and i1 %128, %10, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %17, i1 %130) #4, !dbg !43
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !44
  %132 = bitcast float %126 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 %130) #4, !dbg !45
  %133 = sext i32 %9 to i64, !dbg !46
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %133, !dbg !46
  %urem = and i32 %11, 63, !dbg !47
  %135 = icmp eq i32 %urem, 0, !dbg !47
  %136 = bitcast float %.0.i2 to i32, !dbg !47
  %137 = and i1 %135, %10, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %134, i1 %137) #4, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !48
  %139 = bitcast float %73 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %138, i1 %137) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6lwvhljscjri63nwgvqb2n4xegmr7fl57azlox76lqlpajmh5cf.py", directory: "inductor_cache/6l")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_1", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 38, column: 18, scope: !7)
!23 = !DILocation(line: 39, column: 18, scope: !7)
!24 = !DILocation(line: 40, column: 32, scope: !7)
!25 = !DILocation(line: 44, column: 35, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 45, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 19, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 53, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 20, scope: !7)
!41 = !DILocation(line: 59, column: 28, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 47, scope: !7)
!44 = !DILocation(line: 62, column: 25, scope: !7)
!45 = !DILocation(line: 62, column: 45, scope: !7)
!46 = !DILocation(line: 63, column: 25, scope: !7)
!47 = !DILocation(line: 63, column: 37, scope: !7)
!48 = !DILocation(line: 64, column: 25, scope: !7)
!49 = !DILocation(line: 64, column: 37, scope: !7)
!50 = !DILocation(line: 64, column: 4, scope: !7)
