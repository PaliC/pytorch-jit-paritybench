; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 3, !dbg !12
  %12 = and i32 %11, 248, !dbg !12
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 2, !dbg !15
  %.lobit1 = lshr i32 %8, 5, !dbg !16
  %18 = and i32 %.lobit1, 3, !dbg !16
  %19 = or disjoint i32 %17, 1, !dbg !17
  %20 = or disjoint i32 %17, %18, !dbg !17
  %21 = icmp slt i32 %17, 4, !dbg !18
  %22 = icmp slt i32 %20, 4, !dbg !18
  %23 = srem i32 %19, 2, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %24 = sdiv i32 %.frozen, 512, !dbg !20
  %25 = mul i32 %24, 512, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = shl nsw i32 %23, 1, !dbg !22
  %27 = shl i32 %16, 4, !dbg !23
  %28 = or disjoint i32 %27, 8, !dbg !23
  %29 = add i32 %26, %27, !dbg !24
  %30 = add i32 %26, %28, !dbg !24
  %31 = shl i32 %13, 4, !dbg !25
  %32 = shl i32 %14, 4, !dbg !25
  %33 = add i32 %31, %27, !dbg !26
  %34 = add i32 %29, %31, !dbg !26
  %35 = add i32 %28, %31, !dbg !26
  %36 = add i32 %30, %31, !dbg !26
  %37 = add i32 %32, %27, !dbg !26
  %38 = add i32 %29, %32, !dbg !26
  %39 = add i32 %28, %32, !dbg !26
  %40 = add i32 %30, %32, !dbg !26
  %41 = sext i32 %33 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %34 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = sext i32 %35 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %36 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %37 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = sext i32 %38 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = sext i32 %39 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = sext i32 %40 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #2, !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %21) #2, !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #2, !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %21) #2, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #2, !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %21) #2, !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #2, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = or disjoint i32 %26, 1, !dbg !29
  %74 = or disjoint i32 %27, 1, !dbg !30
  %75 = add i32 %73, %27, !dbg !30
  %76 = or disjoint i32 %27, 9, !dbg !30
  %77 = add i32 %73, %28, !dbg !30
  %78 = add i32 %74, %31, !dbg !31
  %79 = add i32 %75, %31, !dbg !31
  %80 = add i32 %76, %31, !dbg !31
  %81 = add i32 %77, %31, !dbg !31
  %82 = add i32 %74, %32, !dbg !31
  %83 = add i32 %75, %32, !dbg !31
  %84 = add i32 %76, %32, !dbg !31
  %85 = add i32 %77, %32, !dbg !31
  %86 = sext i32 %78 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !32
  %88 = sext i32 %79 to i64, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !32
  %90 = sext i32 %80 to i64, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !32
  %92 = sext i32 %81 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !32
  %94 = sext i32 %82 to i64, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !32
  %96 = sext i32 %83 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !32
  %98 = sext i32 %84 to i64, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !32
  %100 = sext i32 %85 to i64, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !32
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %21) #2, !dbg !33
  %103 = bitcast i32 %102 to float, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %21) #2, !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %21) #2, !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %21) #2, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %21) #2, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %21) #2, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %21) #2, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = add nsw i32 %26, 4, !dbg !34
  %119 = or disjoint i32 %27, 4, !dbg !35
  %120 = add nuw i32 %118, %27, !dbg !35
  %121 = or disjoint i32 %27, 12, !dbg !35
  %122 = add i32 %118, %28, !dbg !35
  %123 = add i32 %119, %31, !dbg !36
  %124 = add i32 %120, %31, !dbg !36
  %125 = add i32 %121, %31, !dbg !36
  %126 = add i32 %122, %31, !dbg !36
  %127 = add i32 %119, %32, !dbg !36
  %128 = add i32 %120, %32, !dbg !36
  %129 = add i32 %121, %32, !dbg !36
  %130 = add i32 %122, %32, !dbg !36
  %131 = sext i32 %123 to i64, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !37
  %133 = sext i32 %124 to i64, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !37
  %135 = sext i32 %125 to i64, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !37
  %137 = sext i32 %126 to i64, !dbg !37
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !37
  %139 = sext i32 %127 to i64, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !37
  %141 = sext i32 %128 to i64, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !37
  %143 = sext i32 %129 to i64, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !37
  %145 = sext i32 %130 to i64, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !37
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %21) #2, !dbg !38
  %148 = bitcast i32 %147 to float, !dbg !38
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %21) #2, !dbg !38
  %150 = bitcast i32 %149 to float, !dbg !38
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %21) #2, !dbg !38
  %152 = bitcast i32 %151 to float, !dbg !38
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #2, !dbg !38
  %154 = bitcast i32 %153 to float, !dbg !38
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %21) #2, !dbg !38
  %156 = bitcast i32 %155 to float, !dbg !38
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %21) #2, !dbg !38
  %158 = bitcast i32 %157 to float, !dbg !38
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %21) #2, !dbg !38
  %160 = bitcast i32 %159 to float, !dbg !38
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %21) #2, !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = add nsw i32 %26, 5, !dbg !39
  %164 = or disjoint i32 %27, 5, !dbg !40
  %165 = add nuw i32 %163, %27, !dbg !40
  %166 = or disjoint i32 %27, 13, !dbg !40
  %167 = add i32 %163, %28, !dbg !40
  %168 = add i32 %164, %31, !dbg !41
  %169 = add i32 %165, %31, !dbg !41
  %170 = add i32 %166, %31, !dbg !41
  %171 = add i32 %167, %31, !dbg !41
  %172 = add i32 %164, %32, !dbg !41
  %173 = add i32 %165, %32, !dbg !41
  %174 = add i32 %166, %32, !dbg !41
  %175 = add i32 %167, %32, !dbg !41
  %176 = sext i32 %168 to i64, !dbg !42
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !42
  %178 = sext i32 %169 to i64, !dbg !42
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !42
  %180 = sext i32 %170 to i64, !dbg !42
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !42
  %182 = sext i32 %171 to i64, !dbg !42
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !42
  %184 = sext i32 %172 to i64, !dbg !42
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !42
  %186 = sext i32 %173 to i64, !dbg !42
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !42
  %188 = sext i32 %174 to i64, !dbg !42
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !42
  %190 = sext i32 %175 to i64, !dbg !42
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !42
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %21) #2, !dbg !43
  %193 = bitcast i32 %192 to float, !dbg !43
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %21) #2, !dbg !43
  %195 = bitcast i32 %194 to float, !dbg !43
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %21) #2, !dbg !43
  %197 = bitcast i32 %196 to float, !dbg !43
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %21) #2, !dbg !43
  %199 = bitcast i32 %198 to float, !dbg !43
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %21) #2, !dbg !43
  %201 = bitcast i32 %200 to float, !dbg !43
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !43
  %203 = bitcast i32 %202 to float, !dbg !43
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %21) #2, !dbg !43
  %205 = bitcast i32 %204 to float, !dbg !43
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %21) #2, !dbg !43
  %207 = bitcast i32 %206 to float, !dbg !43
  %208 = fcmp ogt float %103, %58, !dbg !44
  %209 = fcmp ogt float %105, %60, !dbg !44
  %210 = fcmp ogt float %107, %62, !dbg !44
  %211 = fcmp ogt float %109, %64, !dbg !44
  %212 = fcmp ogt float %111, %66, !dbg !44
  %213 = fcmp ogt float %113, %68, !dbg !44
  %214 = fcmp ogt float %115, %70, !dbg !44
  %215 = fcmp ogt float %117, %72, !dbg !44
  %216 = fcmp uno float %103, 0.000000e+00, !dbg !48
  %217 = fcmp uno float %105, 0.000000e+00, !dbg !48
  %218 = fcmp uno float %107, 0.000000e+00, !dbg !48
  %219 = fcmp uno float %109, 0.000000e+00, !dbg !48
  %220 = fcmp uno float %111, 0.000000e+00, !dbg !48
  %221 = fcmp uno float %113, 0.000000e+00, !dbg !48
  %222 = fcmp uno float %115, 0.000000e+00, !dbg !48
  %223 = fcmp uno float %117, 0.000000e+00, !dbg !48
  %224 = or i1 %208, %216, !dbg !49
  %225 = or i1 %209, %217, !dbg !49
  %226 = or i1 %210, %218, !dbg !49
  %227 = or i1 %211, %219, !dbg !49
  %228 = or i1 %212, %220, !dbg !49
  %229 = or i1 %213, %221, !dbg !49
  %230 = or i1 %214, %222, !dbg !49
  %231 = or i1 %215, %223, !dbg !49
  %232 = select i1 %224, float %103, float %58, !dbg !50
  %233 = select i1 %225, float %105, float %60, !dbg !50
  %234 = select i1 %226, float %107, float %62, !dbg !50
  %235 = select i1 %227, float %109, float %64, !dbg !50
  %236 = select i1 %228, float %111, float %66, !dbg !50
  %237 = select i1 %229, float %113, float %68, !dbg !50
  %238 = select i1 %230, float %115, float %70, !dbg !50
  %239 = select i1 %231, float %117, float %72, !dbg !50
  %240 = fcmp olt float %232, %148, !dbg !51
  %241 = fcmp olt float %233, %150, !dbg !51
  %242 = fcmp olt float %234, %152, !dbg !51
  %243 = fcmp olt float %235, %154, !dbg !51
  %244 = fcmp olt float %236, %156, !dbg !51
  %245 = fcmp olt float %237, %158, !dbg !51
  %246 = fcmp olt float %238, %160, !dbg !51
  %247 = fcmp olt float %239, %162, !dbg !51
  %248 = fcmp uno float %148, 0.000000e+00, !dbg !53
  %249 = fcmp uno float %150, 0.000000e+00, !dbg !53
  %250 = fcmp uno float %152, 0.000000e+00, !dbg !53
  %251 = fcmp uno float %154, 0.000000e+00, !dbg !53
  %252 = fcmp uno float %156, 0.000000e+00, !dbg !53
  %253 = fcmp uno float %158, 0.000000e+00, !dbg !53
  %254 = fcmp uno float %160, 0.000000e+00, !dbg !53
  %255 = fcmp uno float %162, 0.000000e+00, !dbg !53
  %256 = or i1 %240, %248, !dbg !54
  %257 = or i1 %241, %249, !dbg !54
  %258 = or i1 %242, %250, !dbg !54
  %259 = or i1 %243, %251, !dbg !54
  %260 = or i1 %244, %252, !dbg !54
  %261 = or i1 %245, %253, !dbg !54
  %262 = or i1 %246, %254, !dbg !54
  %263 = or i1 %247, %255, !dbg !54
  %264 = select i1 %256, float %148, float %232, !dbg !55
  %265 = select i1 %257, float %150, float %233, !dbg !55
  %266 = select i1 %258, float %152, float %234, !dbg !55
  %267 = select i1 %259, float %154, float %235, !dbg !55
  %268 = select i1 %260, float %156, float %236, !dbg !55
  %269 = select i1 %261, float %158, float %237, !dbg !55
  %270 = select i1 %262, float %160, float %238, !dbg !55
  %271 = select i1 %263, float %162, float %239, !dbg !55
  %272 = fcmp olt float %264, %193, !dbg !56
  %273 = fcmp olt float %265, %195, !dbg !56
  %274 = fcmp olt float %266, %197, !dbg !56
  %275 = fcmp olt float %267, %199, !dbg !56
  %276 = fcmp olt float %268, %201, !dbg !56
  %277 = fcmp olt float %269, %203, !dbg !56
  %278 = fcmp olt float %270, %205, !dbg !56
  %279 = fcmp olt float %271, %207, !dbg !56
  %280 = fcmp uno float %193, 0.000000e+00, !dbg !58
  %281 = fcmp uno float %195, 0.000000e+00, !dbg !58
  %282 = fcmp uno float %197, 0.000000e+00, !dbg !58
  %283 = fcmp uno float %199, 0.000000e+00, !dbg !58
  %284 = fcmp uno float %201, 0.000000e+00, !dbg !58
  %285 = fcmp uno float %203, 0.000000e+00, !dbg !58
  %286 = fcmp uno float %205, 0.000000e+00, !dbg !58
  %287 = fcmp uno float %207, 0.000000e+00, !dbg !58
  %288 = or i1 %272, %280, !dbg !59
  %289 = or i1 %273, %281, !dbg !59
  %290 = or i1 %274, %282, !dbg !59
  %291 = or i1 %275, %283, !dbg !59
  %292 = or i1 %276, %284, !dbg !59
  %293 = or i1 %277, %285, !dbg !59
  %294 = or i1 %278, %286, !dbg !59
  %295 = or i1 %279, %287, !dbg !59
  %296 = zext i1 %208 to i8, !dbg !60
  %297 = zext i1 %209 to i8, !dbg !60
  %298 = zext i1 %210 to i8, !dbg !60
  %299 = zext i1 %211 to i8, !dbg !60
  %300 = zext i1 %212 to i8, !dbg !60
  %301 = zext i1 %213 to i8, !dbg !60
  %302 = zext i1 %214 to i8, !dbg !60
  %303 = zext i1 %215 to i8, !dbg !60
  %304 = select i1 %240, i8 2, i8 %296, !dbg !61
  %305 = select i1 %241, i8 2, i8 %297, !dbg !61
  %306 = select i1 %242, i8 2, i8 %298, !dbg !61
  %307 = select i1 %243, i8 2, i8 %299, !dbg !61
  %308 = select i1 %244, i8 2, i8 %300, !dbg !61
  %309 = select i1 %245, i8 2, i8 %301, !dbg !61
  %310 = select i1 %246, i8 2, i8 %302, !dbg !61
  %311 = select i1 %247, i8 2, i8 %303, !dbg !61
  %312 = select i1 %272, i8 3, i8 %304, !dbg !62
  %313 = select i1 %273, i8 3, i8 %305, !dbg !62
  %314 = select i1 %274, i8 3, i8 %306, !dbg !62
  %315 = select i1 %275, i8 3, i8 %307, !dbg !62
  %316 = select i1 %276, i8 3, i8 %308, !dbg !62
  %317 = select i1 %277, i8 3, i8 %309, !dbg !62
  %318 = select i1 %278, i8 3, i8 %310, !dbg !62
  %319 = select i1 %279, i8 3, i8 %311, !dbg !62
  %320 = add i32 %13, %16, !dbg !63
  %321 = shl i32 %320, 2, !dbg !63
  %322 = add i32 %14, %16, !dbg !63
  %323 = shl i32 %322, 2, !dbg !63
  %324 = sext i32 %321 to i64, !dbg !64
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !64
  %326 = sext i32 %323 to i64, !dbg !64
  %327 = getelementptr float, ptr addrspace(1) %1, i64 %326, !dbg !64
  %328 = bitcast float %264 to i32, !dbg !65
  %329 = select i1 %288, i32 %192, i32 %328, !dbg !66
  %330 = bitcast float %265 to i32, !dbg !65
  %331 = select i1 %289, i32 %194, i32 %330, !dbg !66
  %332 = bitcast float %266 to i32, !dbg !65
  %333 = select i1 %290, i32 %196, i32 %332, !dbg !66
  %334 = bitcast float %267 to i32, !dbg !65
  %335 = select i1 %291, i32 %198, i32 %334, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %331, i32 %333, i32 %335, ptr addrspace(1) %325, i1 %21) #2, !dbg !65
  %336 = bitcast float %268 to i32, !dbg !65
  %337 = select i1 %292, i32 %200, i32 %336, !dbg !66
  %338 = bitcast float %269 to i32, !dbg !65
  %339 = select i1 %293, i32 %202, i32 %338, !dbg !66
  %340 = bitcast float %270 to i32, !dbg !65
  %341 = select i1 %294, i32 %204, i32 %340, !dbg !66
  %342 = bitcast float %271 to i32, !dbg !65
  %343 = select i1 %295, i32 %206, i32 %342, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %339, i32 %341, i32 %343, ptr addrspace(1) %327, i1 %21) #2, !dbg !65
  %344 = shl i32 %20, 9, !dbg !67
  %345 = add i32 %344, %.decomposed, !dbg !68
  %346 = shl i32 %24, 11, !dbg !69
  %347 = add i32 %345, %346, !dbg !70
  %348 = sext i32 %347 to i64, !dbg !71
  %349 = getelementptr i8, ptr addrspace(1) %2, i64 %348, !dbg !71
  %350 = and i32 %11, 1016, !dbg !72
  %351 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !72
  %352 = insertelement <1 x i8> poison, i8 %312, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %351, <1 x i8> %352, i1 true) #2, !dbg !72
  %353 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 264, !dbg !72
  %354 = insertelement <1 x i8> poison, i8 %313, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %353, <1 x i8> %354, i1 true) #2, !dbg !72
  %355 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 528, !dbg !72
  %356 = insertelement <1 x i8> poison, i8 %314, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %355, <1 x i8> %356, i1 true) #2, !dbg !72
  %357 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 792, !dbg !72
  %358 = insertelement <1 x i8> poison, i8 %315, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %357, <1 x i8> %358, i1 true) #2, !dbg !72
  %359 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !72
  %360 = insertelement <1 x i8> poison, i8 %316, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %359, <1 x i8> %360, i1 true) #2, !dbg !72
  %361 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 392, !dbg !72
  %362 = insertelement <1 x i8> poison, i8 %317, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %361, <1 x i8> %362, i1 true) #2, !dbg !72
  %363 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 656, !dbg !72
  %364 = insertelement <1 x i8> poison, i8 %318, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %363, <1 x i8> %364, i1 true) #2, !dbg !72
  %365 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 920, !dbg !72
  %366 = insertelement <1 x i8> poison, i8 %319, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %365, <1 x i8> %366, i1 true) #2, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %367 = lshr i32 %11, 5, !dbg !72
  %368 = and i32 %367, 24, !dbg !72
  %369 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %368, !dbg !72
  %370 = getelementptr i8, ptr addrspace(3) %369, i32 %350, !dbg !72
  %371 = load i32, ptr addrspace(3) %370, align 8, !dbg !72
  %372 = getelementptr inbounds i8, ptr addrspace(3) %370, i32 4, !dbg !72
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %371, i32 %373, ptr addrspace(1) %349, i1 %22) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rjn3i6dmommkba43uuwnv2uqpgcbl776txxe3w3vsoo6nytkax.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 52, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 48, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 56, scope: !7)
!34 = !DILocation(line: 36, column: 34, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 37, column: 34, scope: !7)
!40 = !DILocation(line: 37, column: 41, scope: !7)
!41 = !DILocation(line: 37, column: 48, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 56, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 44, column: 33, scope: !7)
!61 = !DILocation(line: 47, column: 35, scope: !7)
!62 = !DILocation(line: 50, column: 35, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 43, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 44, scope: !7)
!70 = !DILocation(line: 52, column: 39, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 56, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
