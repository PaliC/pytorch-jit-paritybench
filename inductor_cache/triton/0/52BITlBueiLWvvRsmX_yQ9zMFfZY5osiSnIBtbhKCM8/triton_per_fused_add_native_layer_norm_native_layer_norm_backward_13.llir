; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %13, 7, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = icmp slt i32 %17, 1024, !dbg !14
  %19 = shl i32 %13, 2, !dbg !15
  %20 = and i32 %19, 124, !dbg !15
  %21 = icmp samesign ult i32 %20, 96, !dbg !16
  %22 = mul i32 %17, 96, !dbg !17
  %23 = add i32 %22, %20, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = and i1 %21, %18, !dbg !20
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = zext nneg i32 %20 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !29
  %61 = fadd float %42, %53, !dbg !30
  %62 = fadd float %43, %54, !dbg !30
  %63 = fadd float %44, %55, !dbg !30
  %64 = fadd float %45, %56, !dbg !30
  %65 = fadd float %61, %32, !dbg !31
  %66 = fadd float %62, %33, !dbg !31
  %67 = fadd float %63, %34, !dbg !31
  %68 = fadd float %64, %35, !dbg !31
  %69 = fadd float %65, %66, !dbg !32
  %70 = fadd float %67, %69, !dbg !32
  %71 = fadd float %68, %70, !dbg !32
  %72 = select i1 %26, float %71, float 0.000000e+00, !dbg !32
  %73 = bitcast float %72 to i32, !dbg !37
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !37
  %75 = bitcast i32 %74 to float, !dbg !37
  %76 = fadd float %72, %75, !dbg !32
  %77 = bitcast float %76 to i32, !dbg !37
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !37
  %79 = bitcast i32 %78 to float, !dbg !37
  %80 = fadd float %76, %79, !dbg !32
  %81 = bitcast float %80 to i32, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fadd float %80, %83, !dbg !32
  %85 = bitcast float %84 to i32, !dbg !37
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = fadd float %84, %87, !dbg !32
  %89 = bitcast float %88 to i32, !dbg !37
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !37
  %91 = bitcast i32 %90 to float, !dbg !37
  %92 = fadd float %88, %91, !dbg !32
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 9.600000e+01) #5, !dbg !38
  %94 = fsub float %65, %93, !dbg !39
  %95 = fsub float %66, %93, !dbg !39
  %96 = fsub float %67, %93, !dbg !39
  %97 = fsub float %68, %93, !dbg !39
  %98 = fmul float %94, %94, !dbg !40
  %99 = fmul float %95, %95, !dbg !40
  %100 = fmul float %96, %96, !dbg !40
  %101 = fmul float %97, %97, !dbg !40
  %102 = fadd float %98, %99, !dbg !41
  %103 = fadd float %100, %102, !dbg !41
  %104 = fadd float %101, %103, !dbg !41
  %105 = select i1 %26, float %104, float 0.000000e+00, !dbg !41
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !41
  %110 = bitcast float %109 to i32, !dbg !43
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = fadd float %109, %112, !dbg !41
  %114 = bitcast float %113 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = fadd float %113, %116, !dbg !41
  %118 = bitcast float %117 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = fadd float %117, %120, !dbg !41
  %122 = bitcast float %121 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = fadd float %121, %124, !dbg !41
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !44
  %127 = bitcast float %125 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !44
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !44
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 9.600000e+01) #5, !dbg !45
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 9.600000e+01) #5, !dbg !45
  %132 = fadd float %130, 0x3EB0C6F7A0000000, !dbg !46
  %133 = fadd float %131, 0x3EB0C6F7A0000000, !dbg !46
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %134, 0, !dbg !47
  br i1 %.not.i, label %137, label %135, !dbg !47

135:                                              ; preds = %10
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

137:                                              ; preds = %10
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %135, %137
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], !dbg !47
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i10 = icmp eq i32 %142, 0, !dbg !47
  br i1 %.not.i10, label %145, label %143, !dbg !47

143:                                              ; preds = %__nv_rsqrtf.exit
  %144 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

145:                                              ; preds = %__nv_rsqrtf.exit
  %146 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

__nv_rsqrtf.exit12:                               ; preds = %143, %145
  %.0.i11 = phi float [ %144, %143 ], [ %146, %145 ], !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !27
  %156 = bitcast i32 %155 to float, !dbg !27
  %157 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !27
  %160 = bitcast i32 %159 to float, !dbg !27
  %161 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !27
  %162 = bitcast i32 %161 to float, !dbg !27
  %163 = or disjoint i32 %12, %16, !dbg !13
  %164 = icmp slt i32 %163, 1024, !dbg !14
  %165 = fmul float %94, %.0.i11, !dbg !48
  %166 = fmul float %95, %.0.i11, !dbg !48
  %167 = fmul float %96, %.0.i11, !dbg !48
  %168 = fmul float %97, %.0.i11, !dbg !48
  %169 = fmul float %165, %162, !dbg !49
  %170 = fmul float %166, %160, !dbg !49
  %171 = fmul float %167, %158, !dbg !49
  %172 = fmul float %168, %156, !dbg !49
  %173 = fadd float %169, %154, !dbg !50
  %174 = fadd float %170, %152, !dbg !50
  %175 = fadd float %171, %150, !dbg !50
  %176 = fadd float %172, %148, !dbg !50
  %177 = fmul float %.0.i, 0x3F85555560000000, !dbg !44
  %178 = bitcast float %65 to i32, !dbg !51
  %179 = bitcast float %66 to i32, !dbg !51
  %180 = bitcast float %67 to i32, !dbg !51
  %181 = bitcast float %68 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %25, i1 %26) #5, !dbg !51
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !52
  %183 = bitcast float %165 to i32, !dbg !53
  %184 = bitcast float %166 to i32, !dbg !53
  %185 = bitcast float %167 to i32, !dbg !53
  %186 = bitcast float %168 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %184, i32 %185, i32 %186, ptr addrspace(1) %182, i1 %26) #5, !dbg !53
  %187 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !54
  %188 = bitcast float %173 to i32, !dbg !55
  %189 = bitcast float %174 to i32, !dbg !55
  %190 = bitcast float %175 to i32, !dbg !55
  %191 = bitcast float %176 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %187, i1 %26) #5, !dbg !55
  %192 = sext i32 %163 to i64, !dbg !56
  %193 = getelementptr float, ptr addrspace(1) %7, i64 %192, !dbg !56
  %194 = and i32 %13, 248, !dbg !57
  %195 = icmp eq i32 %194, 0, !dbg !57
  %196 = bitcast float %177 to i32, !dbg !57
  %197 = and i1 %195, %164, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %193, i1 %197) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dea26b4zzczuuaqlsgwhj7eloag26ymcuissvjp564xtccycgp.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 42, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 34, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 31, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 42, column: 26, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 50, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 28, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 47, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 45, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 45, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 37, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
