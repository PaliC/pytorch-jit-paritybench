; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = icmp slt i32 %15, 196, !dbg !14
  %20 = icmp slt i32 %16, 196, !dbg !14
  %21 = icmp slt i32 %17, 196, !dbg !14
  %22 = icmp slt i32 %18, 196, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = shl i32 %12, 2, !dbg !17
  %26 = and i32 %25, 12, !dbg !17
  %27 = or disjoint i32 %24, %26, !dbg !18
  %28 = icmp slt i32 %27, 96, !dbg !19
  %29 = mul i32 %15, 96, !dbg !20
  %30 = mul i32 %16, 96, !dbg !20
  %31 = mul i32 %17, 96, !dbg !20
  %32 = mul i32 %18, 96, !dbg !20
  %33 = add i32 %27, %29, !dbg !21
  %34 = add i32 %27, %30, !dbg !21
  %35 = add i32 %27, %31, !dbg !21
  %36 = add i32 %27, %32, !dbg !21
  %37 = sext i32 %33 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %34 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %35 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %36 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = and i1 %19, %28, !dbg !23
  %46 = and i1 %20, %28, !dbg !23
  %47 = and i1 %21, %28, !dbg !23
  %48 = and i1 %22, %28, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %45) #4, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %46) #4, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #4, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %48) #4, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %45) #4, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %46) #4, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %47) #4, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %48) #4, !dbg !26
  %61 = sext i32 %27 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %28) #4, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = bitcast i32 %69 to float, !dbg !30
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !31
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %28) #4, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !33
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %28) #4, !dbg !34
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i, label %89, label %84, !dbg !36

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %94, 0, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i4, label %101, label %96, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %97, %99, %102, %104
  %.0.i6 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i9, label %113, label %108, !dbg !36

108:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

113:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %109, %111, %114, %116
  %.0.i11 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %118, 0, !dbg !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %119, 0, !dbg !36
  br i1 %.not.i14, label %125, label %120, !dbg !36

120:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %123, label %121, !dbg !36

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

125:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %128, label %126, !dbg !36

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %121, %123, %126, %128
  %.0.i16 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fsub float %131, %133, !dbg !37
  %135 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fsub float %136, %138, !dbg !37
  %140 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %141 = bitcast i32 %140 to float, !dbg !26
  %142 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %143 = bitcast i32 %142 to float, !dbg !28
  %144 = fsub float %141, %143, !dbg !37
  %145 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %146 = bitcast i32 %145 to float, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = fsub float %146, %148, !dbg !37
  %150 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %151 = bitcast i32 %150 to float, !dbg !26
  %152 = fsub float %151, %133, !dbg !37
  %153 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %154 = bitcast i32 %153 to float, !dbg !26
  %155 = fsub float %154, %138, !dbg !37
  %156 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %157 = bitcast i32 %156 to float, !dbg !26
  %158 = fsub float %157, %143, !dbg !37
  %159 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %160 = bitcast i32 %159 to float, !dbg !26
  %161 = fsub float %160, %148, !dbg !37
  %162 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %163 = bitcast i32 %162 to float, !dbg !26
  %164 = fsub float %163, %133, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %166 = bitcast i32 %165 to float, !dbg !26
  %167 = fsub float %166, %138, !dbg !37
  %168 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %169 = bitcast i32 %168 to float, !dbg !26
  %170 = fsub float %169, %143, !dbg !37
  %171 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %172 = bitcast i32 %171 to float, !dbg !26
  %173 = fsub float %172, %148, !dbg !37
  %174 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %175 = bitcast i32 %174 to float, !dbg !26
  %176 = fsub float %175, %133, !dbg !37
  %177 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %178 = bitcast i32 %177 to float, !dbg !26
  %179 = fsub float %178, %138, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %181 = bitcast i32 %180 to float, !dbg !26
  %182 = fsub float %181, %143, !dbg !37
  %183 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %184 = bitcast i32 %183 to float, !dbg !26
  %185 = fsub float %184, %148, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !34
  %187 = bitcast i32 %186 to float, !dbg !34
  %188 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !34
  %189 = bitcast i32 %188 to float, !dbg !34
  %190 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !34
  %191 = bitcast i32 %190 to float, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !34
  %193 = bitcast i32 %192 to float, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %203 = bitcast i32 %202 to float, !dbg !24
  %204 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %205 = bitcast i32 %204 to float, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %207 = bitcast i32 %206 to float, !dbg !24
  %208 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %209 = bitcast i32 %208 to float, !dbg !24
  %210 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %211 = bitcast i32 %210 to float, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %213 = bitcast i32 %212 to float, !dbg !24
  %214 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %215 = bitcast i32 %214 to float, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %217 = bitcast i32 %216 to float, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %219 = bitcast i32 %218 to float, !dbg !24
  %220 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %221 = bitcast i32 %220 to float, !dbg !24
  %222 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %223 = bitcast i32 %222 to float, !dbg !24
  %224 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %225 = bitcast i32 %224 to float, !dbg !24
  %226 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %227 = bitcast i32 %226 to float, !dbg !24
  %228 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %229 = bitcast i32 %228 to float, !dbg !24
  %230 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %231 = bitcast i32 %230 to float, !dbg !24
  %232 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %233 = bitcast i32 %232 to float, !dbg !24
  %234 = and i32 %12, 15, !dbg !17
  %235 = or disjoint i32 %24, %234, !dbg !18
  %236 = icmp slt i32 %235, 96, !dbg !19
  %237 = lshr i32 %12, 4, !dbg !12
  %238 = and i32 %237, 15, !dbg !12
  %239 = or disjoint i32 %238, %11, !dbg !13
  %240 = or disjoint i32 %239, 240, !dbg !13
  %241 = icmp slt i32 %11, 0, !dbg !14
  %242 = and i1 %241, %236, !dbg !23
  %243 = or disjoint i32 %239, 224, !dbg !13
  %244 = or disjoint i32 %239, 208, !dbg !13
  %245 = or disjoint i32 %239, 192, !dbg !13
  %246 = icmp slt i32 %245, 196, !dbg !14
  %247 = and i1 %246, %236, !dbg !23
  %248 = or disjoint i32 %239, 176, !dbg !13
  %249 = icmp slt i32 %248, 196, !dbg !14
  %250 = and i1 %249, %236, !dbg !23
  %251 = or disjoint i32 %239, 160, !dbg !13
  %252 = icmp slt i32 %251, 196, !dbg !14
  %253 = and i1 %252, %236, !dbg !23
  %254 = or disjoint i32 %239, 144, !dbg !13
  %255 = icmp slt i32 %254, 196, !dbg !14
  %256 = and i1 %255, %236, !dbg !23
  %257 = or disjoint i32 %239, 128, !dbg !13
  %258 = icmp slt i32 %257, 196, !dbg !14
  %259 = and i1 %258, %236, !dbg !23
  %260 = or disjoint i32 %239, 112, !dbg !13
  %261 = icmp slt i32 %260, 196, !dbg !14
  %262 = and i1 %261, %236, !dbg !23
  %263 = or disjoint i32 %239, 96, !dbg !13
  %264 = icmp slt i32 %263, 196, !dbg !14
  %265 = and i1 %264, %236, !dbg !23
  %266 = or disjoint i32 %239, 80, !dbg !13
  %267 = icmp slt i32 %266, 196, !dbg !14
  %268 = and i1 %267, %236, !dbg !23
  %269 = or disjoint i32 %239, 64, !dbg !13
  %270 = icmp slt i32 %269, 196, !dbg !14
  %271 = and i1 %270, %236, !dbg !23
  %272 = or disjoint i32 %239, 48, !dbg !13
  %273 = icmp slt i32 %272, 196, !dbg !14
  %274 = and i1 %273, %236, !dbg !23
  %275 = or disjoint i32 %239, 32, !dbg !13
  %276 = icmp slt i32 %275, 196, !dbg !14
  %277 = and i1 %276, %236, !dbg !23
  %278 = or disjoint i32 %239, 16, !dbg !13
  %279 = icmp slt i32 %278, 196, !dbg !14
  %280 = and i1 %279, %236, !dbg !23
  %281 = icmp slt i32 %239, 196, !dbg !14
  %282 = and i1 %281, %236, !dbg !23
  %.frozen = freeze i32 %240, !dbg !38
  %283 = sdiv i32 %.frozen, 49, !dbg !38
  %.frozen19 = freeze i32 %243, !dbg !38
  %284 = sdiv i32 %.frozen19, 49, !dbg !38
  %.frozen21 = freeze i32 %244, !dbg !38
  %285 = sdiv i32 %.frozen21, 49, !dbg !38
  %.frozen23 = freeze i32 %245, !dbg !38
  %286 = sdiv i32 %.frozen23, 49, !dbg !38
  %.frozen25 = freeze i32 %248, !dbg !38
  %287 = sdiv i32 %.frozen25, 49, !dbg !38
  %.frozen27 = freeze i32 %251, !dbg !38
  %288 = sdiv i32 %.frozen27, 49, !dbg !38
  %.frozen29 = freeze i32 %254, !dbg !38
  %289 = sdiv i32 %.frozen29, 49, !dbg !38
  %.frozen31 = freeze i32 %257, !dbg !38
  %290 = sdiv i32 %.frozen31, 49, !dbg !38
  %.frozen33 = freeze i32 %260, !dbg !38
  %291 = sdiv i32 %.frozen33, 49, !dbg !38
  %.frozen35 = freeze i32 %263, !dbg !38
  %292 = sdiv i32 %.frozen35, 49, !dbg !38
  %.frozen37 = freeze i32 %266, !dbg !38
  %293 = sdiv i32 %.frozen37, 49, !dbg !38
  %.frozen39 = freeze i32 %269, !dbg !38
  %294 = sdiv i32 %.frozen39, 49, !dbg !38
  %.frozen41 = freeze i32 %272, !dbg !38
  %295 = sdiv i32 %.frozen41, 49, !dbg !38
  %.frozen43 = freeze i32 %275, !dbg !38
  %296 = sdiv i32 %.frozen43, 49, !dbg !38
  %.frozen45 = freeze i32 %278, !dbg !38
  %297 = sdiv i32 %.frozen45, 49, !dbg !38
  %.frozen47 = freeze i32 %239, !dbg !38
  %298 = sdiv i32 %.frozen47, 49, !dbg !38
  %299 = mul i32 %283, 49, !dbg !39
  %.decomposed = sub i32 %.frozen, %299, !dbg !39
  %300 = mul i32 %284, 49, !dbg !39
  %.decomposed20 = sub i32 %.frozen19, %300, !dbg !39
  %301 = mul i32 %285, 49, !dbg !39
  %.decomposed22 = sub i32 %.frozen21, %301, !dbg !39
  %302 = mul i32 %286, 49, !dbg !39
  %.decomposed24 = sub i32 %.frozen23, %302, !dbg !39
  %303 = mul i32 %287, 49, !dbg !39
  %.decomposed26 = sub i32 %.frozen25, %303, !dbg !39
  %304 = mul i32 %288, 49, !dbg !39
  %.decomposed28 = sub i32 %.frozen27, %304, !dbg !39
  %305 = mul i32 %289, 49, !dbg !39
  %.decomposed30 = sub i32 %.frozen29, %305, !dbg !39
  %306 = mul i32 %290, 49, !dbg !39
  %.decomposed32 = sub i32 %.frozen31, %306, !dbg !39
  %307 = mul i32 %291, 49, !dbg !39
  %.decomposed34 = sub i32 %.frozen33, %307, !dbg !39
  %308 = mul i32 %292, 49, !dbg !39
  %.decomposed36 = sub i32 %.frozen35, %308, !dbg !39
  %309 = mul i32 %293, 49, !dbg !39
  %.decomposed38 = sub i32 %.frozen37, %309, !dbg !39
  %310 = mul i32 %294, 49, !dbg !39
  %.decomposed40 = sub i32 %.frozen39, %310, !dbg !39
  %311 = mul i32 %295, 49, !dbg !39
  %.decomposed42 = sub i32 %.frozen41, %311, !dbg !39
  %312 = mul i32 %296, 49, !dbg !39
  %.decomposed44 = sub i32 %.frozen43, %312, !dbg !39
  %313 = mul i32 %297, 49, !dbg !39
  %.decomposed46 = sub i32 %.frozen45, %313, !dbg !39
  %314 = mul i32 %298, 49, !dbg !39
  %.decomposed48 = sub i32 %.frozen47, %314, !dbg !39
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !40
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %319 = fmul float %185, %315, !dbg !41
  %320 = fmul float %182, %316, !dbg !41
  %321 = fmul float %179, %317, !dbg !41
  %322 = fmul float %176, %318, !dbg !41
  %323 = fmul float %173, %315, !dbg !41
  %324 = fmul float %170, %316, !dbg !41
  %325 = fmul float %167, %317, !dbg !41
  %326 = fmul float %164, %318, !dbg !41
  %327 = fmul float %161, %315, !dbg !41
  %328 = fmul float %158, %316, !dbg !41
  %329 = fmul float %155, %317, !dbg !41
  %330 = fmul float %152, %318, !dbg !41
  %331 = fmul float %149, %315, !dbg !41
  %332 = fmul float %144, %316, !dbg !41
  %333 = fmul float %139, %317, !dbg !41
  %334 = fmul float %134, %318, !dbg !41
  %335 = fmul float %319, %201, !dbg !42
  %336 = fmul float %320, %199, !dbg !42
  %337 = fmul float %321, %197, !dbg !42
  %338 = fmul float %322, %195, !dbg !42
  %339 = fmul float %323, %201, !dbg !42
  %340 = fmul float %324, %199, !dbg !42
  %341 = fmul float %325, %197, !dbg !42
  %342 = fmul float %326, %195, !dbg !42
  %343 = fmul float %327, %201, !dbg !42
  %344 = fmul float %328, %199, !dbg !42
  %345 = fmul float %329, %197, !dbg !42
  %346 = fmul float %330, %195, !dbg !42
  %347 = fmul float %331, %201, !dbg !42
  %348 = fmul float %332, %199, !dbg !42
  %349 = fmul float %333, %197, !dbg !42
  %350 = fmul float %334, %195, !dbg !42
  %351 = fadd float %335, %193, !dbg !43
  %352 = fadd float %336, %191, !dbg !43
  %353 = fadd float %337, %189, !dbg !43
  %354 = fadd float %338, %187, !dbg !43
  %355 = fadd float %339, %193, !dbg !43
  %356 = fadd float %340, %191, !dbg !43
  %357 = fadd float %341, %189, !dbg !43
  %358 = fadd float %342, %187, !dbg !43
  %359 = fadd float %343, %193, !dbg !43
  %360 = fadd float %344, %191, !dbg !43
  %361 = fadd float %345, %189, !dbg !43
  %362 = fadd float %346, %187, !dbg !43
  %363 = fadd float %347, %193, !dbg !43
  %364 = fadd float %348, %191, !dbg !43
  %365 = fadd float %349, %189, !dbg !43
  %366 = fadd float %350, %187, !dbg !43
  %367 = fadd float %351, %233, !dbg !44
  %368 = fadd float %352, %231, !dbg !44
  %369 = fadd float %353, %229, !dbg !44
  %370 = fadd float %354, %227, !dbg !44
  %371 = fadd float %355, %225, !dbg !44
  %372 = fadd float %356, %223, !dbg !44
  %373 = fadd float %357, %221, !dbg !44
  %374 = fadd float %358, %219, !dbg !44
  %375 = fadd float %359, %217, !dbg !44
  %376 = fadd float %360, %215, !dbg !44
  %377 = fadd float %361, %213, !dbg !44
  %378 = fadd float %362, %211, !dbg !44
  %379 = fadd float %363, %209, !dbg !44
  %380 = fadd float %364, %207, !dbg !44
  %381 = fadd float %365, %205, !dbg !44
  %382 = fadd float %366, %203, !dbg !44
  %383 = mul i32 %235, 49, !dbg !45
  %384 = add i32 %383, %.decomposed48, !dbg !46
  %385 = add i32 %383, %.decomposed46, !dbg !46
  %386 = add i32 %383, %.decomposed44, !dbg !46
  %387 = add i32 %383, %.decomposed42, !dbg !46
  %388 = add i32 %383, %.decomposed40, !dbg !46
  %389 = add i32 %383, %.decomposed38, !dbg !46
  %390 = add i32 %383, %.decomposed36, !dbg !46
  %391 = add i32 %383, %.decomposed34, !dbg !46
  %392 = add i32 %383, %.decomposed32, !dbg !46
  %393 = add i32 %383, %.decomposed30, !dbg !46
  %394 = add i32 %383, %.decomposed28, !dbg !46
  %395 = add i32 %383, %.decomposed26, !dbg !46
  %396 = add i32 %383, %.decomposed24, !dbg !46
  %397 = add i32 %383, %.decomposed22, !dbg !46
  %398 = add i32 %383, %.decomposed20, !dbg !46
  %399 = add i32 %383, %.decomposed, !dbg !46
  %400 = mul i32 %298, 4704, !dbg !47
  %401 = mul i32 %297, 4704, !dbg !47
  %402 = mul i32 %296, 4704, !dbg !47
  %403 = mul i32 %295, 4704, !dbg !47
  %404 = mul i32 %294, 4704, !dbg !47
  %405 = mul i32 %293, 4704, !dbg !47
  %406 = mul i32 %292, 4704, !dbg !47
  %407 = mul i32 %291, 4704, !dbg !47
  %408 = mul i32 %290, 4704, !dbg !47
  %409 = mul i32 %289, 4704, !dbg !47
  %410 = mul i32 %288, 4704, !dbg !47
  %411 = mul i32 %287, 4704, !dbg !47
  %412 = mul i32 %286, 4704, !dbg !47
  %413 = mul i32 %285, 4704, !dbg !47
  %414 = mul i32 %284, 4704, !dbg !47
  %415 = mul i32 %283, 4704, !dbg !47
  %416 = add i32 %384, %400, !dbg !48
  %417 = add i32 %385, %401, !dbg !48
  %418 = add i32 %386, %402, !dbg !48
  %419 = add i32 %387, %403, !dbg !48
  %420 = add i32 %388, %404, !dbg !48
  %421 = add i32 %389, %405, !dbg !48
  %422 = add i32 %390, %406, !dbg !48
  %423 = add i32 %391, %407, !dbg !48
  %424 = add i32 %392, %408, !dbg !48
  %425 = add i32 %393, %409, !dbg !48
  %426 = add i32 %394, %410, !dbg !48
  %427 = add i32 %395, %411, !dbg !48
  %428 = add i32 %396, %412, !dbg !48
  %429 = add i32 %397, %413, !dbg !48
  %430 = add i32 %398, %414, !dbg !48
  %431 = add i32 %399, %415, !dbg !48
  %432 = sext i32 %416 to i64, !dbg !49
  %433 = getelementptr float, ptr addrspace(1) %6, i64 %432, !dbg !49
  %434 = sext i32 %417 to i64, !dbg !49
  %435 = getelementptr float, ptr addrspace(1) %6, i64 %434, !dbg !49
  %436 = sext i32 %418 to i64, !dbg !49
  %437 = getelementptr float, ptr addrspace(1) %6, i64 %436, !dbg !49
  %438 = sext i32 %419 to i64, !dbg !49
  %439 = getelementptr float, ptr addrspace(1) %6, i64 %438, !dbg !49
  %440 = sext i32 %420 to i64, !dbg !49
  %441 = getelementptr float, ptr addrspace(1) %6, i64 %440, !dbg !49
  %442 = sext i32 %421 to i64, !dbg !49
  %443 = getelementptr float, ptr addrspace(1) %6, i64 %442, !dbg !49
  %444 = sext i32 %422 to i64, !dbg !49
  %445 = getelementptr float, ptr addrspace(1) %6, i64 %444, !dbg !49
  %446 = sext i32 %423 to i64, !dbg !49
  %447 = getelementptr float, ptr addrspace(1) %6, i64 %446, !dbg !49
  %448 = sext i32 %424 to i64, !dbg !49
  %449 = getelementptr float, ptr addrspace(1) %6, i64 %448, !dbg !49
  %450 = sext i32 %425 to i64, !dbg !49
  %451 = getelementptr float, ptr addrspace(1) %6, i64 %450, !dbg !49
  %452 = sext i32 %426 to i64, !dbg !49
  %453 = getelementptr float, ptr addrspace(1) %6, i64 %452, !dbg !49
  %454 = sext i32 %427 to i64, !dbg !49
  %455 = getelementptr float, ptr addrspace(1) %6, i64 %454, !dbg !49
  %456 = sext i32 %428 to i64, !dbg !49
  %457 = getelementptr float, ptr addrspace(1) %6, i64 %456, !dbg !49
  %458 = sext i32 %429 to i64, !dbg !49
  %459 = getelementptr float, ptr addrspace(1) %6, i64 %458, !dbg !49
  %460 = sext i32 %430 to i64, !dbg !49
  %461 = getelementptr float, ptr addrspace(1) %6, i64 %460, !dbg !49
  %462 = sext i32 %431 to i64, !dbg !49
  %463 = getelementptr float, ptr addrspace(1) %6, i64 %462, !dbg !49
  %464 = and i32 %25, 1020, !dbg !50
  %465 = and i32 %12, 255, !dbg !50
  %466 = lshr i32 %464, 4, !dbg !50
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !50
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %464, !dbg !50
  %469 = bitcast float %367 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #4, !dbg !50
  %470 = or disjoint i32 %464, 1, !dbg !50
  %471 = getelementptr float, ptr addrspace(3) %467, i32 %470, !dbg !50
  %472 = bitcast float %368 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #4, !dbg !50
  %473 = or disjoint i32 %464, 2, !dbg !50
  %474 = getelementptr float, ptr addrspace(3) %467, i32 %473, !dbg !50
  %475 = bitcast float %369 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 true) #4, !dbg !50
  %476 = or disjoint i32 %464, 3, !dbg !50
  %477 = getelementptr float, ptr addrspace(3) %467, i32 %476, !dbg !50
  %478 = bitcast float %370 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %479 = lshr i32 %465, 4, !dbg !50
  %480 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %479, !dbg !50
  %481 = getelementptr inbounds float, ptr addrspace(3) %480, i32 %465, !dbg !50
  %482 = load i32, ptr addrspace(3) %481, align 4, !dbg !50
  %483 = or disjoint i32 %465, 256, !dbg !50
  %484 = lshr i32 %483, 4, !dbg !50
  %485 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %484, !dbg !50
  %486 = getelementptr inbounds float, ptr addrspace(3) %485, i32 %483, !dbg !50
  %487 = load i32, ptr addrspace(3) %486, align 4, !dbg !50
  %488 = or disjoint i32 %465, 512, !dbg !50
  %489 = lshr i32 %488, 4, !dbg !50
  %490 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %489, !dbg !50
  %491 = getelementptr inbounds float, ptr addrspace(3) %490, i32 %488, !dbg !50
  %492 = load i32, ptr addrspace(3) %491, align 4, !dbg !50
  %493 = or disjoint i32 %465, 768, !dbg !50
  %494 = lshr i32 %493, 4, !dbg !50
  %495 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %494, !dbg !50
  %496 = getelementptr inbounds float, ptr addrspace(3) %495, i32 %493, !dbg !50
  %497 = load i32, ptr addrspace(3) %496, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %498 = bitcast float %371 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %498, i1 true) #4, !dbg !50
  %499 = bitcast float %372 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %499, i1 true) #4, !dbg !50
  %500 = bitcast float %373 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %500, i1 true) #4, !dbg !50
  %501 = bitcast float %374 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %501, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %502 = load i32, ptr addrspace(3) %481, align 4, !dbg !50
  %503 = load i32, ptr addrspace(3) %486, align 4, !dbg !50
  %504 = load i32, ptr addrspace(3) %491, align 4, !dbg !50
  %505 = load i32, ptr addrspace(3) %496, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %506 = bitcast float %375 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %506, i1 true) #4, !dbg !50
  %507 = bitcast float %376 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %507, i1 true) #4, !dbg !50
  %508 = bitcast float %377 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %508, i1 true) #4, !dbg !50
  %509 = bitcast float %378 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %509, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %510 = load i32, ptr addrspace(3) %481, align 4, !dbg !50
  %511 = load i32, ptr addrspace(3) %486, align 4, !dbg !50
  %512 = load i32, ptr addrspace(3) %491, align 4, !dbg !50
  %513 = load i32, ptr addrspace(3) %496, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %514 = bitcast float %379 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %514, i1 true) #4, !dbg !50
  %515 = bitcast float %380 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %515, i1 true) #4, !dbg !50
  %516 = bitcast float %381 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %516, i1 true) #4, !dbg !50
  %517 = bitcast float %382 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %517, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %518 = load i32, ptr addrspace(3) %481, align 4, !dbg !50
  %519 = load i32, ptr addrspace(3) %486, align 4, !dbg !50
  %520 = load i32, ptr addrspace(3) %491, align 4, !dbg !50
  %521 = load i32, ptr addrspace(3) %496, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %482, ptr addrspace(1) %433, i1 %282) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %487, ptr addrspace(1) %435, i1 %280) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %492, ptr addrspace(1) %437, i1 %277) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %439, i1 %274) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %502, ptr addrspace(1) %441, i1 %271) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %503, ptr addrspace(1) %443, i1 %268) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %504, ptr addrspace(1) %445, i1 %265) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %447, i1 %262) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %449, i1 %259) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %451, i1 %256) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %512, ptr addrspace(1) %453, i1 %253) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %513, ptr addrspace(1) %455, i1 %250) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %518, ptr addrspace(1) %457, i1 %247) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %519, ptr addrspace(1) %459, i1 %242) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %461, i1 %242) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %521, ptr addrspace(1) %463, i1 %242) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxklqyirgid5ft55pdgi4crp6bulxvd5ibodz4yeudvxfeadxgav.py", directory: "inductor_cache/xk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 33, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 43, scope: !7)
!48 = !DILocation(line: 50, column: 38, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
