; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 4064256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 126, !dbg !15
  %14 = mul i32 %13, 126, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 126, !dbg !16
  %16 = srem i32 %13, 126, !dbg !17
  %.frozen9 = freeze i32 %10, !dbg !18
  %17 = sdiv i32 %.frozen9, 15876, !dbg !18
  %.frozen7 = freeze i32 %10, !dbg !19
  %18 = sdiv i32 %.frozen7, 1016064, !dbg !19
  %19 = mul i32 %18, 1016064, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %19, !dbg !20
  %20 = mul i32 %17, 15876, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %20, !dbg !21
  %21 = shl nsw i32 %.decomposed, 1, !dbg !22
  %22 = shl nsw i32 %15, 1, !dbg !22
  %23 = mul nsw i32 %16, 506, !dbg !23
  %24 = mul i32 %17, 64009, !dbg !24
  %25 = add i32 %23, %24, !dbg !25
  %26 = add i32 %25, %21, !dbg !26
  %27 = add i32 %25, %22, !dbg !26
  %28 = sext i32 %26 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !27
  %30 = sext i32 %27 to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !27
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #1, !dbg !28
  %34 = add i32 %25, 1, !dbg !29
  %35 = add i32 %34, %21, !dbg !30
  %36 = add i32 %34, %22, !dbg !30
  %37 = sext i32 %35 to i64, !dbg !31
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !31
  %39 = sext i32 %36 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #1, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !32
  %43 = add i32 %25, 2, !dbg !33
  %44 = add i32 %43, %21, !dbg !34
  %45 = add i32 %43, %22, !dbg !34
  %46 = sext i32 %44 to i64, !dbg !35
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !35
  %48 = sext i32 %45 to i64, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !36
  %52 = add i32 %25, 253, !dbg !37
  %53 = add i32 %52, %21, !dbg !38
  %54 = add i32 %52, %22, !dbg !38
  %55 = sext i32 %53 to i64, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !39
  %57 = sext i32 %54 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !40
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %12) #1, !dbg !40
  %61 = add i32 %25, 254, !dbg !41
  %62 = add i32 %61, %21, !dbg !42
  %63 = add i32 %61, %22, !dbg !42
  %64 = sext i32 %62 to i64, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !43
  %66 = sext i32 %63 to i64, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !43
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !44
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %12) #1, !dbg !44
  %70 = add i32 %25, 255, !dbg !45
  %71 = add i32 %70, %21, !dbg !46
  %72 = add i32 %70, %22, !dbg !46
  %73 = sext i32 %71 to i64, !dbg !47
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !47
  %75 = sext i32 %72 to i64, !dbg !47
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !47
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %12) #1, !dbg !48
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %12) #1, !dbg !48
  %79 = add i32 %25, 506, !dbg !49
  %80 = add i32 %79, %21, !dbg !50
  %81 = add i32 %79, %22, !dbg !50
  %82 = sext i32 %80 to i64, !dbg !51
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !51
  %84 = sext i32 %81 to i64, !dbg !51
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !51
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %12) #1, !dbg !52
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %12) #1, !dbg !52
  %88 = add i32 %25, 507, !dbg !53
  %89 = add i32 %88, %21, !dbg !54
  %90 = add i32 %88, %22, !dbg !54
  %91 = sext i32 %89 to i64, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !55
  %93 = sext i32 %90 to i64, !dbg !55
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !55
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %12) #1, !dbg !56
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %12) #1, !dbg !56
  %97 = add i32 %25, 508, !dbg !57
  %98 = add i32 %97, %21, !dbg !58
  %99 = add i32 %97, %22, !dbg !58
  %100 = sext i32 %98 to i64, !dbg !59
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !59
  %102 = sext i32 %99 to i64, !dbg !59
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !59
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %12) #1, !dbg !60
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %12) #1, !dbg !60
  %106 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !28
  %107 = insertelement <2 x i32> %106, i32 %33, i64 1, !dbg !28
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !28
  %109 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !32
  %110 = insertelement <2 x i32> %109, i32 %42, i64 1, !dbg !32
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !32
  %112 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !36
  %113 = insertelement <2 x i32> %112, i32 %51, i64 1, !dbg !36
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !36
  %115 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !40
  %116 = insertelement <2 x i32> %115, i32 %60, i64 1, !dbg !40
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !40
  %118 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !44
  %119 = insertelement <2 x i32> %118, i32 %69, i64 1, !dbg !44
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !44
  %121 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !48
  %122 = insertelement <2 x i32> %121, i32 %78, i64 1, !dbg !48
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !48
  %124 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !52
  %125 = insertelement <2 x i32> %124, i32 %87, i64 1, !dbg !52
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !52
  %127 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !56
  %128 = insertelement <2 x i32> %127, i32 %96, i64 1, !dbg !56
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !56
  %130 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !60
  %131 = insertelement <2 x i32> %130, i32 %105, i64 1, !dbg !60
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !60
  %133 = fcmp ogt <2 x float> %111, %108, !dbg !61
  %134 = fcmp uno <2 x float> %111, zeroinitializer, !dbg !65
  %135 = or <2 x i1> %133, %134, !dbg !66
  %.v = select <2 x i1> %135, <2 x i32> %110, <2 x i32> %107, !dbg !67
  %136 = bitcast <2 x i32> %.v to <2 x float>, !dbg !67
  %137 = fcmp olt <2 x float> %136, %114, !dbg !68
  %138 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !70
  %139 = or <2 x i1> %138, %137, !dbg !71
  %.v1 = select <2 x i1> %139, <2 x i32> %113, <2 x i32> %.v, !dbg !72
  %140 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !72
  %141 = fcmp olt <2 x float> %140, %117, !dbg !73
  %142 = fcmp uno <2 x float> %117, zeroinitializer, !dbg !75
  %143 = or <2 x i1> %142, %141, !dbg !76
  %.v2 = select <2 x i1> %143, <2 x i32> %116, <2 x i32> %.v1, !dbg !77
  %144 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !77
  %145 = fcmp olt <2 x float> %144, %120, !dbg !78
  %146 = fcmp uno <2 x float> %120, zeroinitializer, !dbg !80
  %147 = or <2 x i1> %146, %145, !dbg !81
  %.v3 = select <2 x i1> %147, <2 x i32> %119, <2 x i32> %.v2, !dbg !82
  %148 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !82
  %149 = fcmp olt <2 x float> %148, %123, !dbg !83
  %150 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !85
  %151 = or <2 x i1> %150, %149, !dbg !86
  %.v4 = select <2 x i1> %151, <2 x i32> %122, <2 x i32> %.v3, !dbg !87
  %152 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !87
  %153 = fcmp olt <2 x float> %152, %126, !dbg !88
  %154 = fcmp uno <2 x float> %126, zeroinitializer, !dbg !90
  %155 = or <2 x i1> %154, %153, !dbg !91
  %.v5 = select <2 x i1> %155, <2 x i32> %125, <2 x i32> %.v4, !dbg !92
  %156 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !92
  %157 = fcmp olt <2 x float> %156, %129, !dbg !93
  %158 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !95
  %159 = or <2 x i1> %158, %157, !dbg !96
  %.v6 = select <2 x i1> %159, <2 x i32> %128, <2 x i32> %.v5, !dbg !97
  %160 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !97
  %161 = fcmp olt <2 x float> %160, %132, !dbg !98
  %162 = bitcast i32 %104 to float, !dbg !100
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !100
  %164 = bitcast i32 %105 to float, !dbg !100
  %165 = fcmp uno float %164, 0.000000e+00, !dbg !100
  %166 = extractelement <2 x i1> %161, i64 0, !dbg !101
  %167 = or i1 %163, %166, !dbg !101
  %168 = extractelement <2 x i1> %161, i64 1, !dbg !101
  %169 = or i1 %165, %168, !dbg !101
  %170 = zext <2 x i1> %133 to <2 x i8>, !dbg !102
  %171 = select <2 x i1> %137, <2 x i8> splat (i8 2), <2 x i8> %170, !dbg !103
  %172 = select <2 x i1> %141, <2 x i8> splat (i8 3), <2 x i8> %171, !dbg !104
  %173 = select <2 x i1> %145, <2 x i8> splat (i8 4), <2 x i8> %172, !dbg !105
  %174 = select <2 x i1> %149, <2 x i8> splat (i8 5), <2 x i8> %173, !dbg !106
  %175 = select <2 x i1> %153, <2 x i8> splat (i8 6), <2 x i8> %174, !dbg !107
  %176 = select <2 x i1> %157, <2 x i8> splat (i8 7), <2 x i8> %175, !dbg !108
  %177 = select <2 x i1> %161, <2 x i8> splat (i8 8), <2 x i8> %176, !dbg !109
  %178 = mul i32 %18, 2540160, !dbg !110
  %179 = add i32 %178, %.decomposed8, !dbg !111
  %180 = sext i32 %179 to i64, !dbg !112
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !112
  %182 = extractelement <2 x i32> %.v6, i64 0, !dbg !113
  %183 = select i1 %167, i32 %104, i32 %182, !dbg !114
  %184 = extractelement <2 x i32> %.v6, i64 1, !dbg !113
  %185 = select i1 %169, i32 %105, i32 %184, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %185, ptr addrspace(1) %181, i1 %12) #1, !dbg !113
  %186 = mul i32 %17, 16000, !dbg !115
  %187 = add i32 %186, %.decomposed10, !dbg !116
  %188 = sext i32 %187 to i64, !dbg !117
  %189 = getelementptr i8, ptr addrspace(1) %2, i64 %188, !dbg !117
  %190 = bitcast <2 x i8> %177 to i16, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %190, ptr addrspace(1) %189, i1 %12) #1, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukqzlmxjzyed6a245ybdnjjyiykvuj5hf7sinilms45ju24idcr.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 52, scope: !7)
!25 = !DILocation(line: 30, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 46, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 57, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 50, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 61, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 50, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 61, scope: !7)
!37 = !DILocation(line: 33, column: 43, scope: !7)
!38 = !DILocation(line: 33, column: 52, scope: !7)
!39 = !DILocation(line: 33, column: 30, scope: !7)
!40 = !DILocation(line: 33, column: 63, scope: !7)
!41 = !DILocation(line: 34, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 52, scope: !7)
!43 = !DILocation(line: 34, column: 30, scope: !7)
!44 = !DILocation(line: 34, column: 63, scope: !7)
!45 = !DILocation(line: 35, column: 43, scope: !7)
!46 = !DILocation(line: 35, column: 52, scope: !7)
!47 = !DILocation(line: 35, column: 30, scope: !7)
!48 = !DILocation(line: 35, column: 63, scope: !7)
!49 = !DILocation(line: 36, column: 44, scope: !7)
!50 = !DILocation(line: 36, column: 53, scope: !7)
!51 = !DILocation(line: 36, column: 31, scope: !7)
!52 = !DILocation(line: 36, column: 64, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 37, column: 53, scope: !7)
!55 = !DILocation(line: 37, column: 31, scope: !7)
!56 = !DILocation(line: 37, column: 64, scope: !7)
!57 = !DILocation(line: 38, column: 44, scope: !7)
!58 = !DILocation(line: 38, column: 53, scope: !7)
!59 = !DILocation(line: 38, column: 31, scope: !7)
!60 = !DILocation(line: 38, column: 64, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 39, column: 40, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !69)
!69 = !DILocation(line: 40, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 41, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !79)
!79 = !DILocation(line: 42, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !84)
!84 = !DILocation(line: 43, column: 41, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !89)
!89 = !DILocation(line: 44, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !94)
!94 = !DILocation(line: 45, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !99)
!99 = !DILocation(line: 46, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !99)
!102 = !DILocation(line: 50, column: 35, scope: !7)
!103 = !DILocation(line: 53, column: 35, scope: !7)
!104 = !DILocation(line: 56, column: 35, scope: !7)
!105 = !DILocation(line: 59, column: 35, scope: !7)
!106 = !DILocation(line: 62, column: 35, scope: !7)
!107 = !DILocation(line: 65, column: 35, scope: !7)
!108 = !DILocation(line: 68, column: 35, scope: !7)
!109 = !DILocation(line: 71, column: 35, scope: !7)
!110 = !DILocation(line: 72, column: 38, scope: !7)
!111 = !DILocation(line: 72, column: 30, scope: !7)
!112 = !DILocation(line: 72, column: 25, scope: !7)
!113 = !DILocation(line: 72, column: 50, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !99)
!115 = !DILocation(line: 73, column: 36, scope: !7)
!116 = !DILocation(line: 73, column: 30, scope: !7)
!117 = !DILocation(line: 73, column: 25, scope: !7)
!118 = !DILocation(line: 73, column: 48, scope: !7)
!119 = !DILocation(line: 73, column: 4, scope: !7)
