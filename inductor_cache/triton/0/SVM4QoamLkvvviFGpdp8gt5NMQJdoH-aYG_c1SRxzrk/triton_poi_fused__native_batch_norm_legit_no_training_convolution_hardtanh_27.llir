; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 2, !dbg !15
  %21 = lshr i32 %12, 6, !dbg !16
  %.lobit = and i32 %21, 1, !dbg !16
  %22 = or disjoint i32 %20, %.lobit, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %26 = sdiv i32 %.frozen, 1024, !dbg !19
  %27 = mul i32 %26, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = srem i32 %18, 1024, !dbg !20
  %29 = shl i32 %22, 10, !dbg !21
  %30 = shl i32 %23, 10, !dbg !21
  %31 = shl i32 %26, 12, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %29, !dbg !24
  %34 = add i32 %32, %30, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #4, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %25) #4, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = and i32 %13, 508, !dbg !26
  %50 = lshr i32 %13, 6, !dbg !26
  %51 = and i32 %50, 4, !dbg !26
  %52 = add nuw nsw i32 %51, %49, !dbg !26
  %53 = zext nneg i32 %52 to i64, !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %54, i32 %40, i32 %41, i32 %42, i32 %43, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %55 = zext nneg i32 %16 to i64, !dbg !26
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !26
  %57 = load <2 x float>, ptr addrspace(3) %56, align 8, !dbg !26
  %58 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 1040, !dbg !26
  %59 = load <2 x float>, ptr addrspace(3) %58, align 8, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %54, i32 %45, i32 %46, i32 %47, i32 %48, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %60 = load <2 x float>, ptr addrspace(3) %56, align 8, !dbg !26
  %61 = load <2 x float>, ptr addrspace(3) %58, align 8, !dbg !26
  %62 = sext i32 %28 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !29
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !30
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !30
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !30
  %69 = bitcast i32 %67 to float, !dbg !30
  %70 = bitcast i32 %68 to float, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !31
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !33
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #4, !dbg !34
  %75 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %76 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %77, 0, !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %78, 0, !dbg !36
  br i1 %.not.i, label %84, label %79, !dbg !36

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !36

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i31 = icmp eq i32 %89, 0, !dbg !36
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i34 = icmp eq i32 %90, 0, !dbg !36
  br i1 %.not.i31, label %96, label %91, !dbg !36

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %94, label %92, !dbg !36

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %92, %94, %97, %99
  %.0.i33 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !36
  %101 = extractvalue { i32, i32 } %64, 1, !dbg !28
  %102 = extractvalue { i32, i32 } %64, 0, !dbg !28
  %103 = extractelement <2 x float> %59, i64 1, !dbg !26
  %104 = extractelement <2 x float> %59, i64 0, !dbg !26
  %105 = extractelement <2 x float> %57, i64 1, !dbg !26
  %106 = extractelement <2 x float> %57, i64 0, !dbg !26
  %107 = extractvalue { i32, i32 } %74, 1, !dbg !34
  %108 = extractvalue { i32, i32 } %74, 0, !dbg !34
  %109 = extractvalue { i32, i32 } %72, 1, !dbg !32
  %110 = extractvalue { i32, i32 } %72, 0, !dbg !32
  %111 = icmp slt i32 %20, 4, !dbg !18
  %112 = and i32 %12, 127, !dbg !12
  %113 = or disjoint i32 %112, 128, !dbg !12
  %114 = or disjoint i32 %11, %113, !dbg !13
  %115 = or disjoint i32 %11, %112, !dbg !13
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !37
  %118 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !28
  %119 = insertelement <2 x i32> %118, i32 %102, i64 1, !dbg !28
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !28
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %122 = shufflevector <2 x float> %61, <2 x float> %60, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %123 = insertelement <8 x float> %122, float %103, i64 4, !dbg !38
  %124 = insertelement <8 x float> %123, float %104, i64 5, !dbg !38
  %125 = insertelement <8 x float> %124, float %105, i64 6, !dbg !38
  %126 = insertelement <8 x float> %125, float %106, i64 7, !dbg !38
  %127 = fsub <8 x float> %126, %121, !dbg !38
  %128 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !34
  %129 = insertelement <2 x i32> %128, i32 %108, i64 1, !dbg !34
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !34
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %132 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !32
  %133 = insertelement <2 x i32> %132, i32 %110, i64 1, !dbg !32
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !32
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %136 = insertelement <8 x float> poison, float %117, i64 0, !dbg !39
  %137 = insertelement <8 x float> %136, float %116, i64 1, !dbg !39
  %138 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %139 = fmul <8 x float> %127, %138, !dbg !39
  %140 = fmul <8 x float> %139, %135, !dbg !40
  %141 = fadd <8 x float> %140, %131, !dbg !41
  %142 = fcmp ole <8 x float> %141, zeroinitializer, !dbg !42
  %143 = select <8 x i1> %142, <8 x float> zeroinitializer, <8 x float> %141, !dbg !42
  %144 = fcmp olt <8 x float> %143, splat (float 6.000000e+00), !dbg !46
  %145 = extractelement <8 x float> %143, i64 7, !dbg !48
  %146 = fcmp uno float %145, 0.000000e+00, !dbg !49
  %147 = extractelement <8 x float> %143, i64 6, !dbg !48
  %148 = fcmp uno float %147, 0.000000e+00, !dbg !49
  %149 = extractelement <8 x float> %143, i64 5, !dbg !48
  %150 = fcmp uno float %149, 0.000000e+00, !dbg !49
  %151 = extractelement <8 x float> %143, i64 4, !dbg !48
  %152 = fcmp uno float %151, 0.000000e+00, !dbg !49
  %153 = extractelement <8 x float> %143, i64 3, !dbg !48
  %154 = fcmp uno float %153, 0.000000e+00, !dbg !49
  %155 = extractelement <8 x float> %143, i64 2, !dbg !48
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !49
  %157 = extractelement <8 x float> %143, i64 1, !dbg !48
  %158 = fcmp uno float %157, 0.000000e+00, !dbg !49
  %159 = extractelement <8 x float> %143, i64 0, !dbg !48
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !49
  %161 = extractelement <8 x i1> %144, i64 7, !dbg !50
  %162 = or i1 %161, %146, !dbg !50
  %163 = extractelement <8 x i1> %144, i64 6, !dbg !50
  %164 = or i1 %163, %148, !dbg !50
  %165 = extractelement <8 x i1> %144, i64 5, !dbg !50
  %166 = or i1 %165, %150, !dbg !50
  %167 = extractelement <8 x i1> %144, i64 4, !dbg !50
  %168 = or i1 %167, %152, !dbg !50
  %169 = extractelement <8 x i1> %144, i64 3, !dbg !50
  %170 = or i1 %169, %154, !dbg !50
  %171 = extractelement <8 x i1> %144, i64 2, !dbg !50
  %172 = or i1 %171, %156, !dbg !50
  %173 = extractelement <8 x i1> %144, i64 1, !dbg !50
  %174 = or i1 %173, %158, !dbg !50
  %175 = extractelement <8 x i1> %144, i64 0, !dbg !50
  %176 = or i1 %175, %160, !dbg !50
  %177 = add i32 %115, %19, !dbg !51
  %178 = shl i32 %177, 2, !dbg !51
  %179 = add i32 %114, %19, !dbg !51
  %180 = shl i32 %179, 2, !dbg !51
  %181 = sext i32 %178 to i64, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !52
  %183 = sext i32 %180 to i64, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %183, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %185 = shl i32 %12, 3, !dbg !48
  %186 = and i32 %185, 1016, !dbg !48
  %187 = lshr exact i32 %186, 2, !dbg !48
  %188 = add nuw nsw i32 %187, %186, !dbg !48
  %189 = zext nneg i32 %188 to i64, !dbg !48
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %189, !dbg !48
  %191 = bitcast float %145 to i32, !dbg !48
  %192 = select i1 %162, i32 %191, i32 1086324736, !dbg !53
  %193 = insertelement <1 x i32> poison, i32 %192, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %193, i1 true) #4, !dbg !48
  %194 = or disjoint i32 %186, 4, !dbg !48
  %195 = lshr exact i32 %194, 2, !dbg !48
  %196 = add nuw nsw i32 %195, %194, !dbg !48
  %197 = zext nneg i32 %196 to i64, !dbg !48
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %197, !dbg !48
  %199 = bitcast float %147 to i32, !dbg !48
  %200 = select i1 %164, i32 %199, i32 1086324736, !dbg !53
  %201 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %201, i1 true) #4, !dbg !48
  %202 = or disjoint i32 %186, 1, !dbg !48
  %203 = add nuw nsw i32 %202, %187, !dbg !48
  %204 = zext nneg i32 %203 to i64, !dbg !48
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !48
  %206 = bitcast float %149 to i32, !dbg !48
  %207 = select i1 %166, i32 %206, i32 1086324736, !dbg !53
  %208 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %208, i1 true) #4, !dbg !48
  %209 = or disjoint i32 %186, 5, !dbg !48
  %210 = lshr i32 %209, 2, !dbg !48
  %211 = add nuw nsw i32 %210, %209, !dbg !48
  %212 = zext nneg i32 %211 to i64, !dbg !48
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %212, !dbg !48
  %214 = bitcast float %151 to i32, !dbg !48
  %215 = select i1 %168, i32 %214, i32 1086324736, !dbg !53
  %216 = insertelement <1 x i32> poison, i32 %215, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %216, i1 true) #4, !dbg !48
  %217 = or disjoint i32 %186, 2, !dbg !48
  %218 = add nuw nsw i32 %217, %187, !dbg !48
  %219 = zext nneg i32 %218 to i64, !dbg !48
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !48
  %221 = bitcast float %153 to i32, !dbg !48
  %222 = select i1 %170, i32 %221, i32 1086324736, !dbg !53
  %223 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %223, i1 true) #4, !dbg !48
  %224 = or disjoint i32 %186, 6, !dbg !48
  %225 = lshr i32 %224, 2, !dbg !48
  %226 = add nuw nsw i32 %225, %224, !dbg !48
  %227 = zext nneg i32 %226 to i64, !dbg !48
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %227, !dbg !48
  %229 = bitcast float %155 to i32, !dbg !48
  %230 = select i1 %172, i32 %229, i32 1086324736, !dbg !53
  %231 = insertelement <1 x i32> poison, i32 %230, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %231, i1 true) #4, !dbg !48
  %232 = or disjoint i32 %186, 3, !dbg !48
  %233 = add nuw nsw i32 %232, %187, !dbg !48
  %234 = zext nneg i32 %233 to i64, !dbg !48
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !48
  %236 = bitcast float %157 to i32, !dbg !48
  %237 = select i1 %174, i32 %236, i32 1086324736, !dbg !53
  %238 = insertelement <1 x i32> poison, i32 %237, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %238, i1 true) #4, !dbg !48
  %239 = or disjoint i32 %186, 7, !dbg !48
  %240 = lshr i32 %239, 2, !dbg !48
  %241 = add nuw nsw i32 %240, %239, !dbg !48
  %242 = zext nneg i32 %241 to i64, !dbg !48
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %242, !dbg !48
  %244 = bitcast float %159 to i32, !dbg !48
  %245 = select i1 %176, i32 %244, i32 1086324736, !dbg !53
  %246 = insertelement <1 x i32> poison, i32 %245, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %246, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %247 = lshr exact i32 %49, 2, !dbg !48
  %248 = add nuw nsw i32 %247, %49, !dbg !48
  %249 = zext nneg i32 %248 to i64, !dbg !48
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %249, !dbg !48
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !48
  %252 = or disjoint i32 %49, 1, !dbg !48
  %253 = add nuw nsw i32 %252, %247, !dbg !48
  %254 = zext nneg i32 %253 to i64, !dbg !48
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !48
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !48
  %257 = or disjoint i32 %49, 2, !dbg !48
  %258 = add nuw nsw i32 %257, %247, !dbg !48
  %259 = zext nneg i32 %258 to i64, !dbg !48
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !48
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !48
  %262 = or disjoint i32 %49, 3, !dbg !48
  %263 = add nuw nsw i32 %262, %247, !dbg !48
  %264 = zext nneg i32 %263 to i64, !dbg !48
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !48
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !48
  %267 = or disjoint i32 %49, 512, !dbg !48
  %268 = lshr exact i32 %267, 2, !dbg !48
  %269 = add nuw nsw i32 %268, %267, !dbg !48
  %270 = zext nneg i32 %269 to i64, !dbg !48
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !48
  %272 = load i32, ptr addrspace(3) %271, align 4, !dbg !48
  %273 = or disjoint i32 %49, 513, !dbg !48
  %274 = lshr i32 %273, 2, !dbg !48
  %275 = add nuw nsw i32 %274, %273, !dbg !48
  %276 = zext nneg i32 %275 to i64, !dbg !48
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %276, !dbg !48
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !48
  %279 = or disjoint i32 %49, 514, !dbg !48
  %280 = lshr i32 %279, 2, !dbg !48
  %281 = add nuw nsw i32 %280, %279, !dbg !48
  %282 = zext nneg i32 %281 to i64, !dbg !48
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %282, !dbg !48
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !48
  %285 = or disjoint i32 %49, 515, !dbg !48
  %286 = lshr i32 %285, 2, !dbg !48
  %287 = add nuw nsw i32 %286, %285, !dbg !48
  %288 = zext nneg i32 %287 to i64, !dbg !48
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %288, !dbg !48
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %251, i32 %256, i32 %261, i32 %266, ptr addrspace(1) %182, i1 %111) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %278, i32 %284, i32 %290, ptr addrspace(1) %184, i1 %111) #4, !dbg !48
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !54
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %56, i32 %192, i32 %200, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %58, i32 %207, i32 %215, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %293 = load <4 x i32>, ptr addrspace(3) %54, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %56, i32 %222, i32 %230, i1 true) #4, !dbg !55
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %58, i32 %237, i32 %245, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %294 = load <4 x i32>, ptr addrspace(3) %54, align 16, !dbg !55
  %.extract = extractelement <4 x i32> %293, i64 0, !dbg !55
  %.extract24 = extractelement <4 x i32> %293, i64 1, !dbg !55
  %.extract25 = extractelement <4 x i32> %293, i64 2, !dbg !55
  %.extract26 = extractelement <4 x i32> %293, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %291, i1 %24) #4, !dbg !55
  %.extract27 = extractelement <4 x i32> %294, i64 0, !dbg !55
  %.extract28 = extractelement <4 x i32> %294, i64 1, !dbg !55
  %.extract29 = extractelement <4 x i32> %294, i64 2, !dbg !55
  %.extract30 = extractelement <4 x i32> %294, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %292, i1 %25) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwngaqovk4wsd4v4woqukosacuzozmvz7yesjba5yt453xb3sgm3.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 57, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
