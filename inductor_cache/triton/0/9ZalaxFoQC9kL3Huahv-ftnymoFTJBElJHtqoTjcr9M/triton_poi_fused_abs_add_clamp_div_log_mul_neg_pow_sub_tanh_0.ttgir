#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_abs_add_clamp_div_log_mul_neg_pow_sub_tanh_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 2.000000e+01 : f32 loc(#loc1)
    %cst_0 = arith.constant 1.000000e-01 : f32 loc(#loc1)
    %cst_1 = arith.constant 8.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant 6.000000e+00 : f32 loc(#loc1)
    %cst_3 = arith.constant 5.000000e-06 : f32 loc(#loc1)
    %cst_4 = arith.constant 5.000000e-01 : f32 loc(#loc1)
    %cst_5 = arith.constant 7.000000e+00 : f32 loc(#loc1)
    %cst_6 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %0 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc2)
    %1 = tt.load %0 : !tt.ptr<f32> loc(#loc3)
    %2 = tt.addptr %arg0, %c1_i32 : !tt.ptr<f32>, i32 loc(#loc4)
    %3 = tt.load %2 : !tt.ptr<f32> loc(#loc5)
    %4 = arith.subf %cst_6, %1 : f32 loc(#loc6)
    %5 = arith.subf %4, %cst_5 : f32 loc(#loc7)
    %6 = arith.mulf %5, %cst_4 : f32 loc(#loc8)
    %7 = arith.subf %cst_6, %3 : f32 loc(#loc9)
    %8 = tt.extern_elementwise %7 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (f32) -> f32 loc(#loc10)
    %9 = arith.subf %6, %8 : f32 loc(#loc11)
    %10 = math.absf %9 : f32 loc(#loc12)
    %11 = arith.cmpf ogt, %10, %cst_3 : f32 loc(#loc40)
    %12 = arith.cmpf une, %10, %10 : f32 loc(#loc41)
    %13 = arith.ori %11, %12 : i1 loc(#loc42)
    %14 = arith.select %13, %10, %cst_3 : f32 loc(#loc43)
    %15 = math.log %14 : f32 loc(#loc18)
    %16 = arith.addf %15, %cst_2 : f32 loc(#loc19)
    %17 = arith.mulf %3, %cst_4 : f32 loc(#loc20)
    %18 = tt.extern_elementwise %17 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (f32) -> f32 loc(#loc21)
    %19 = arith.cmpf ogt, %18, %cst_6 : f32 loc(#loc44)
    %20 = arith.cmpf une, %18, %18 : f32 loc(#loc45)
    %21 = arith.ori %19, %20 : i1 loc(#loc46)
    %22 = arith.select %21, %18, %cst_6 : f32 loc(#loc47)
    %23 = arith.mulf %16, %22 : f32 loc(#loc23)
    %24 = arith.addf %4, %cst_5 : f32 loc(#loc24)
    %25 = arith.mulf %24, %24 : f32 loc(#loc25)
    %26 = arith.subf %7, %cst_1 : f32 loc(#loc26)
    %27 = arith.mulf %26, %26 : f32 loc(#loc27)
    %28 = arith.mulf %27, %cst_0 : f32 loc(#loc28)
    %29 = arith.addf %25, %28 : f32 loc(#loc29)
    %30 = arith.mulf %29, %cst_0 : f32 loc(#loc30)
    %31 = arith.subf %30, %cst : f32 loc(#loc31)
    %32 = arith.mulf %7, %cst_4 : f32 loc(#loc32)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (f32) -> f32 loc(#loc33)
    %34 = arith.cmpf ogt, %33, %cst_6 : f32 loc(#loc48)
    %35 = arith.cmpf une, %33, %33 : f32 loc(#loc49)
    %36 = arith.ori %34, %35 : i1 loc(#loc50)
    %37 = arith.select %36, %33, %cst_6 : f32 loc(#loc51)
    %38 = arith.mulf %31, %37 : f32 loc(#loc35)
    %39 = arith.addf %23, %38 : f32 loc(#loc36)
    %40 = tt.splat %39 : f32 -> tensor<1xf32, #blocked> loc(#loc36)
    %41 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc37)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.store %42, %40 : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":24:30)
#loc3 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":24:19)
#loc4 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":26:30)
#loc5 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":26:19)
#loc6 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":28:12)
#loc7 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":30:18)
#loc8 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":32:18)
#loc9 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":33:12)
#loc10 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":34:27)
#loc11 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":35:19)
#loc12 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":36:24)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc14 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":38:42)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc18 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":39:24)
#loc19 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":41:20)
#loc20 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":42:19)
#loc21 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":43:27)
#loc22 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":45:42)
#loc23 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":46:20)
#loc24 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":47:19)
#loc25 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":48:20)
#loc26 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":50:19)
#loc27 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":51:20)
#loc28 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":53:20)
#loc29 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":54:20)
#loc30 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":55:20)
#loc31 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":57:20)
#loc32 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":58:19)
#loc33 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":59:27)
#loc34 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":60:42)
#loc35 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":61:20)
#loc36 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":62:20)
#loc37 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":63:25)
#loc38 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":63:65)
#loc39 = loc("inductor_cache/3j/c3jgqq5nhr4ewxgx7picbkqyw4443ggt65m5b72bsnpm2gne3w5q.py":63:4)
#loc40 = loc(callsite(#loc13 at #loc14))
#loc41 = loc(callsite(#loc15 at #loc14))
#loc42 = loc(callsite(#loc16 at #loc14))
#loc43 = loc(callsite(#loc17 at #loc14))
#loc44 = loc(callsite(#loc13 at #loc22))
#loc45 = loc(callsite(#loc15 at #loc22))
#loc46 = loc(callsite(#loc16 at #loc22))
#loc47 = loc(callsite(#loc17 at #loc22))
#loc48 = loc(callsite(#loc13 at #loc34))
#loc49 = loc(callsite(#loc15 at #loc34))
#loc50 = loc(callsite(#loc16 at #loc34))
#loc51 = loc(callsite(#loc17 at #loc34))
