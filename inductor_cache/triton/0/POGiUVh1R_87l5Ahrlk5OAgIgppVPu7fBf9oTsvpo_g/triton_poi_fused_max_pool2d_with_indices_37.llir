; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 30720, !dbg !14
  %11 = add i32 %9, -2400, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -1920, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -1440, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !21
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %22 = sdiv <2 x i32> %21, <i32 1920, i32 480>, !dbg !21
  %23 = srem <2 x i32> %22, splat (i32 4), !dbg !22
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !23
  %25 = icmp sgt i32 %24, 0, !dbg !24
  %26 = icmp sgt <2 x i32> %23, <i32 -1, i32 0>, !dbg !25
  %27 = extractelement <2 x i1> %26, i64 1, !dbg !26
  %28 = and i1 %25, %27, !dbg !26
  %29 = and i1 %10, %28, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %29, i32 -8388608, i1 %29) #1, !dbg !28
  %31 = bitcast i32 %30 to float, !dbg !28
  %32 = extractelement <2 x i32> %23, i64 1, !dbg !29
  %33 = icmp sgt i32 %32, -1, !dbg !30
  %34 = and i1 %25, %33, !dbg !31
  %35 = and i1 %10, %34, !dbg !32
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %35, i32 -8388608, i1 %35) #1, !dbg !33
  %37 = bitcast i32 %36 to float, !dbg !33
  %38 = fcmp ogt float %37, %31, !dbg !34
  %39 = fcmp uno float %37, 0.000000e+00, !dbg !38
  %40 = or i1 %38, %39, !dbg !39
  %41 = select i1 %40, float %37, float %31, !dbg !40
  %42 = add nsw i32 %32, 1, !dbg !41
  %43 = icmp ult i32 %42, 4, !dbg !41
  %44 = and i1 %25, %43, !dbg !42
  %45 = and i1 %10, %44, !dbg !43
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %45, i32 -8388608, i1 %45) #1, !dbg !44
  %47 = bitcast i32 %46 to float, !dbg !44
  %48 = fcmp olt float %41, %47, !dbg !45
  %49 = fcmp uno float %47, 0.000000e+00, !dbg !47
  %50 = or i1 %49, %48, !dbg !48
  %51 = select i1 %50, float %47, float %41, !dbg !49
  %52 = extractelement <2 x i1> %26, i64 0, !dbg !50
  %53 = and i1 %52, %27, !dbg !50
  %54 = add i32 %9, -480, !dbg !51
  %55 = sext i32 %54 to i64, !dbg !52
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !52
  %57 = and i1 %10, %53, !dbg !53
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %57, i32 -8388608, i1 %57) #1, !dbg !54
  %59 = bitcast i32 %58 to float, !dbg !54
  %60 = fcmp olt float %51, %59, !dbg !55
  %61 = fcmp uno float %59, 0.000000e+00, !dbg !57
  %62 = or i1 %61, %60, !dbg !58
  %63 = select i1 %62, float %59, float %51, !dbg !59
  %64 = or i32 %24, %32, !dbg !29
  %65 = icmp sgt i32 %64, -1, !dbg !29
  %66 = sext i32 %9 to i64, !dbg !60
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !60
  %68 = and i1 %10, %65, !dbg !61
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 -8388608, i1 %68) #1, !dbg !62
  %70 = bitcast i32 %69 to float, !dbg !62
  %71 = fcmp olt float %63, %70, !dbg !63
  %72 = fcmp uno float %70, 0.000000e+00, !dbg !65
  %73 = or i1 %72, %71, !dbg !66
  %74 = select i1 %73, float %70, float %63, !dbg !67
  %75 = and i1 %52, %43, !dbg !68
  %76 = add i32 %9, 480, !dbg !69
  %77 = sext i32 %76 to i64, !dbg !70
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !70
  %79 = and i1 %10, %75, !dbg !71
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 -8388608, i1 %79) #1, !dbg !72
  %81 = bitcast i32 %80 to float, !dbg !72
  %82 = fcmp olt float %74, %81, !dbg !73
  %83 = fcmp uno float %81, 0.000000e+00, !dbg !75
  %84 = or i1 %83, %82, !dbg !76
  %85 = select i1 %84, float %81, float %74, !dbg !77
  %86 = add nsw i32 %24, 1, !dbg !23
  %87 = icmp ult i32 %86, 4, !dbg !23
  %88 = and i1 %27, %87, !dbg !78
  %89 = add i32 %9, 1440, !dbg !79
  %90 = sext i32 %89 to i64, !dbg !80
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !80
  %92 = and i1 %10, %88, !dbg !81
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 -8388608, i1 %92) #1, !dbg !82
  %94 = bitcast i32 %93 to float, !dbg !82
  %95 = fcmp olt float %85, %94, !dbg !83
  %96 = fcmp uno float %94, 0.000000e+00, !dbg !85
  %97 = or i1 %96, %95, !dbg !86
  %98 = select i1 %97, float %94, float %85, !dbg !87
  %99 = and i1 %33, %87, !dbg !88
  %100 = add i32 %9, 1920, !dbg !89
  %101 = sext i32 %100 to i64, !dbg !90
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !90
  %103 = and i1 %10, %99, !dbg !91
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %103, i32 -8388608, i1 %103) #1, !dbg !92
  %105 = bitcast i32 %104 to float, !dbg !92
  %106 = fcmp olt float %98, %105, !dbg !93
  %107 = fcmp uno float %105, 0.000000e+00, !dbg !95
  %108 = or i1 %107, %106, !dbg !96
  %109 = select i1 %108, float %105, float %98, !dbg !97
  %110 = or i32 %86, %42, !dbg !98
  %111 = icmp ult i32 %110, 4, !dbg !98
  %112 = add i32 %9, 2400, !dbg !99
  %113 = sext i32 %112 to i64, !dbg !100
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !100
  %115 = and i1 %10, %111, !dbg !101
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 -8388608, i1 %115) #1, !dbg !102
  %117 = bitcast i32 %116 to float, !dbg !102
  %118 = fcmp olt float %109, %117, !dbg !103
  %119 = fcmp uno float %117, 0.000000e+00, !dbg !105
  %120 = or i1 %119, %118, !dbg !106
  %121 = zext i1 %38 to i8, !dbg !107
  %122 = select i1 %48, i8 2, i8 %121, !dbg !108
  %123 = select i1 %60, i8 3, i8 %122, !dbg !109
  %124 = select i1 %71, i8 4, i8 %123, !dbg !110
  %125 = select i1 %82, i8 5, i8 %124, !dbg !111
  %126 = select i1 %95, i8 6, i8 %125, !dbg !112
  %127 = select i1 %106, i8 7, i8 %126, !dbg !113
  %128 = select i1 %118, i8 8, i8 %127, !dbg !114
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !115
  %130 = bitcast float %109 to i32, !dbg !116
  %131 = select i1 %120, i32 %116, i32 %130, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %129, i1 %10) #1, !dbg !116
  %132 = getelementptr i8, ptr addrspace(1) %2, i64 %66, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %128, ptr addrspace(1) %132, i1 %10) #1, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pbgkkmkpygiaywocplvchuxyuenwwit64yrpmlqctup6uv4svh.py", directory: "inductor_cache/7p")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_37", linkageName: "triton_poi_fused_max_pool2d_with_indices_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 41, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 41, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 24, column: 21, scope: !7)
!22 = !DILocation(line: 24, column: 29, scope: !7)
!23 = !DILocation(line: 69, column: 20, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 54, column: 21, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 54, scope: !7)
!28 = !DILocation(line: 38, column: 46, scope: !7)
!29 = !DILocation(line: 60, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 21, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 54, scope: !7)
!33 = !DILocation(line: 44, column: 46, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 19, scope: !7)
!43 = !DILocation(line: 51, column: 54, scope: !7)
!44 = !DILocation(line: 51, column: 46, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !46)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 40, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 53, scope: !7)
!54 = !DILocation(line: 58, column: 45, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !56)
!56 = !DILocation(line: 59, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !56)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 44, scope: !7)
!62 = !DILocation(line: 61, column: 36, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !64)
!64 = !DILocation(line: 62, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !64)
!68 = !DILocation(line: 63, column: 20, scope: !7)
!69 = !DILocation(line: 64, column: 37, scope: !7)
!70 = !DILocation(line: 64, column: 31, scope: !7)
!71 = !DILocation(line: 64, column: 50, scope: !7)
!72 = !DILocation(line: 64, column: 42, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !74)
!74 = !DILocation(line: 65, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !74)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 38, scope: !7)
!80 = !DILocation(line: 71, column: 31, scope: !7)
!81 = !DILocation(line: 71, column: 51, scope: !7)
!82 = !DILocation(line: 71, column: 43, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !84)
!84 = !DILocation(line: 72, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !84)
!88 = !DILocation(line: 73, column: 20, scope: !7)
!89 = !DILocation(line: 74, column: 38, scope: !7)
!90 = !DILocation(line: 74, column: 31, scope: !7)
!91 = !DILocation(line: 74, column: 51, scope: !7)
!92 = !DILocation(line: 74, column: 43, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !94)
!94 = !DILocation(line: 75, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !94)
!98 = !DILocation(line: 76, column: 20, scope: !7)
!99 = !DILocation(line: 77, column: 38, scope: !7)
!100 = !DILocation(line: 77, column: 31, scope: !7)
!101 = !DILocation(line: 77, column: 51, scope: !7)
!102 = !DILocation(line: 77, column: 43, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !104)
!104 = !DILocation(line: 78, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !104)
!107 = !DILocation(line: 82, column: 35, scope: !7)
!108 = !DILocation(line: 85, column: 35, scope: !7)
!109 = !DILocation(line: 88, column: 35, scope: !7)
!110 = !DILocation(line: 91, column: 35, scope: !7)
!111 = !DILocation(line: 94, column: 35, scope: !7)
!112 = !DILocation(line: 97, column: 35, scope: !7)
!113 = !DILocation(line: 100, column: 35, scope: !7)
!114 = !DILocation(line: 103, column: 35, scope: !7)
!115 = !DILocation(line: 104, column: 25, scope: !7)
!116 = !DILocation(line: 104, column: 37, scope: !7)
!117 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !104)
!118 = !DILocation(line: 105, column: 25, scope: !7)
!119 = !DILocation(line: 105, column: 37, scope: !7)
!120 = !DILocation(line: 105, column: 4, scope: !7)
