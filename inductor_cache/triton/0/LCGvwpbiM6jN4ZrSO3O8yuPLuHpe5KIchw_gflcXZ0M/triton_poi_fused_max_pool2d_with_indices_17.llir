; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = or disjoint i32 %7, 1, !dbg !13
  %12 = icmp slt i32 %10, 324, !dbg !14
  %13 = icmp slt i32 %7, 324, !dbg !14
  %14 = icmp slt i32 %11, 324, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %16 = shl i32 %15, 9, !dbg !16
  %17 = shl i32 %8, 3, !dbg !17
  %18 = and i32 %17, 504, !dbg !17
  %19 = and i32 %8, 127, !dbg !17
  %20 = or disjoint i32 %19, 128, !dbg !17
  %21 = or disjoint i32 %19, 256, !dbg !17
  %22 = or disjoint i32 %19, 384, !dbg !17
  %23 = or disjoint i32 %16, %18, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %16, %19, !dbg !18
  %26 = or disjoint i32 %16, %20, !dbg !18
  %27 = or disjoint i32 %16, %21, !dbg !18
  %28 = or disjoint i32 %16, %22, !dbg !18
  %29 = icmp slt i32 %23, 512, !dbg !19
  %30 = icmp slt i32 %25, 512, !dbg !19
  %31 = icmp slt i32 %26, 512, !dbg !19
  %32 = icmp slt i32 %27, 512, !dbg !19
  %33 = icmp slt i32 %28, 512, !dbg !19
  %34 = sdiv i32 %10, 9, !dbg !20
  %35 = sdiv i32 %10, 81, !dbg !21
  %.frozen = freeze i32 %7, !dbg !21
  %36 = sdiv i32 %.frozen, 81, !dbg !21
  %.frozen14 = freeze i32 %11, !dbg !21
  %37 = sdiv i32 %.frozen14, 81, !dbg !21
  %38 = mul i32 %36, 81, !dbg !22
  %.decomposed = sub i32 %.frozen, %38, !dbg !22
  %39 = mul i32 %37, 81, !dbg !22
  %.decomposed15 = sub i32 %.frozen14, %39, !dbg !22
  %40 = mul i32 %35, 147968, !dbg !23
  %41 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !24
  %42 = insertelement <2 x i32> %41, i32 %34, i64 1, !dbg !24
  %43 = srem <2 x i32> %42, splat (i32 9), !dbg !24
  %44 = extractelement <2 x i32> %43, i64 1, !dbg !25
  %45 = icmp sgt i32 %44, 0, !dbg !26
  %46 = shl nsw <2 x i32> %43, splat (i32 1), !dbg !27
  %47 = extractelement <2 x i32> %43, i64 0, !dbg !25
  %48 = icmp sgt i32 %47, 0, !dbg !28
  %49 = and i1 %48, %45, !dbg !29
  %50 = shl nsw i32 %47, 10, !dbg !30
  %51 = mul nsw i32 %44, 17408, !dbg !31
  %52 = add i32 %40, %50, !dbg !32
  %53 = add i32 %52, -9216, !dbg !33
  %54 = add i32 %53, %23, !dbg !34
  %55 = add i32 %54, %51, !dbg !35
  %56 = add i32 %53, %24, !dbg !34
  %57 = add i32 %56, %51, !dbg !35
  %58 = sext i32 %55 to i64, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !36
  %60 = sext i32 %57 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = and i1 %29, %49, !dbg !37
  %63 = and i1 %12, %62, !dbg !38
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63) #2, !dbg !39
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !39
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !39
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !39
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !39
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63, i32 -8388608, i1 %63) #2, !dbg !39
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !39
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !39
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !39
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !39
  %74 = icmp sgt <2 x i32> %43, splat (i32 -1), !dbg !40
  %75 = extractelement <2 x i1> %74, i64 0, !dbg !41
  %76 = and i1 %75, %45, !dbg !41
  %77 = add i32 %52, -8704, !dbg !42
  %78 = add i32 %77, %23, !dbg !43
  %79 = add i32 %78, %51, !dbg !44
  %80 = add i32 %77, %24, !dbg !43
  %81 = add i32 %80, %51, !dbg !44
  %82 = sext i32 %79 to i64, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !45
  %84 = sext i32 %81 to i64, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !45
  %86 = and i1 %29, %76, !dbg !46
  %87 = and i1 %12, %86, !dbg !47
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !48
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !48
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !48
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !48
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !48
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #2, !dbg !48
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !48
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !48
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !48
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !48
  %98 = or disjoint <2 x i32> %46, splat (i32 1), !dbg !49
  %99 = icmp slt <2 x i32> %98, splat (i32 17), !dbg !50
  %100 = and <2 x i1> %74, %99, !dbg !51
  %101 = extractelement <2 x i1> %100, i64 0, !dbg !52
  %102 = and i1 %45, %101, !dbg !53
  %103 = add i32 %52, -8192, !dbg !54
  %104 = add i32 %103, %23, !dbg !55
  %105 = add i32 %104, %51, !dbg !56
  %106 = add i32 %103, %24, !dbg !55
  %107 = add i32 %106, %51, !dbg !56
  %108 = sext i32 %105 to i64, !dbg !57
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !57
  %110 = sext i32 %107 to i64, !dbg !57
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !57
  %112 = and i1 %29, %102, !dbg !58
  %113 = and i1 %12, %112, !dbg !59
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #2, !dbg !60
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !60
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !60
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !60
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !60
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #2, !dbg !60
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !60
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !60
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !60
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !60
  %124 = extractelement <2 x i1> %74, i64 1, !dbg !61
  %125 = and i1 %48, %124, !dbg !61
  %126 = add i32 %52, -512, !dbg !62
  %127 = add i32 %126, %23, !dbg !63
  %128 = add i32 %127, %51, !dbg !64
  %129 = add i32 %126, %24, !dbg !63
  %130 = add i32 %129, %51, !dbg !64
  %131 = sext i32 %128 to i64, !dbg !65
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !65
  %133 = sext i32 %130 to i64, !dbg !65
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !65
  %135 = and i1 %29, %125, !dbg !66
  %136 = and i1 %12, %135, !dbg !67
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !68
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !68
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !68
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !68
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !68
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !68
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !68
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !68
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !68
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !68
  %147 = or i32 %44, %47, !dbg !25
  %148 = icmp sgt i32 %147, -1, !dbg !25
  %149 = add i32 %52, %23, !dbg !69
  %150 = add i32 %149, %51, !dbg !70
  %151 = add i32 %52, %24, !dbg !69
  %152 = add i32 %151, %51, !dbg !70
  %153 = sext i32 %150 to i64, !dbg !71
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !71
  %155 = sext i32 %152 to i64, !dbg !71
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !71
  %157 = and i1 %29, %148, !dbg !72
  %158 = and i1 %12, %157, !dbg !73
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #2, !dbg !74
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !74
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !74
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !74
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !74
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #2, !dbg !74
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !74
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !74
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !74
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !74
  %169 = and i1 %124, %101, !dbg !75
  %170 = add i32 %52, 512, !dbg !76
  %171 = add i32 %170, %23, !dbg !77
  %172 = add i32 %171, %51, !dbg !78
  %173 = add i32 %170, %24, !dbg !77
  %174 = add i32 %173, %51, !dbg !78
  %175 = sext i32 %172 to i64, !dbg !79
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !79
  %177 = sext i32 %174 to i64, !dbg !79
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !79
  %179 = and i1 %29, %169, !dbg !80
  %180 = and i1 %12, %179, !dbg !81
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180) #2, !dbg !82
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !82
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !82
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !82
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !82
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180) #2, !dbg !82
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !82
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !82
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !82
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !82
  %191 = extractelement <2 x i1> %100, i64 1, !dbg !52
  %192 = and i1 %48, %191, !dbg !83
  %193 = add i32 %52, 8192, !dbg !84
  %194 = add i32 %193, %23, !dbg !85
  %195 = add i32 %194, %51, !dbg !86
  %196 = add i32 %193, %24, !dbg !85
  %197 = add i32 %196, %51, !dbg !86
  %198 = sext i32 %195 to i64, !dbg !87
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !87
  %200 = sext i32 %197 to i64, !dbg !87
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !87
  %202 = and i1 %29, %192, !dbg !88
  %203 = and i1 %12, %202, !dbg !89
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #2, !dbg !90
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !90
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !90
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !90
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !90
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203, i32 -8388608, i1 %203) #2, !dbg !90
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !90
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !90
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !90
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !90
  %214 = and i1 %75, %191, !dbg !91
  %215 = add i32 %52, 8704, !dbg !92
  %216 = add i32 %215, %23, !dbg !93
  %217 = add i32 %216, %51, !dbg !94
  %218 = add i32 %215, %24, !dbg !93
  %219 = add i32 %218, %51, !dbg !94
  %220 = sext i32 %217 to i64, !dbg !95
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !95
  %222 = sext i32 %219 to i64, !dbg !95
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !95
  %224 = and i1 %29, %214, !dbg !96
  %225 = and i1 %12, %224, !dbg !97
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225) #2, !dbg !98
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !98
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !98
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !98
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !98
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225, i32 -8388608, i1 %225) #2, !dbg !98
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !98
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !98
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !98
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !98
  %236 = and i1 %101, %191, !dbg !52
  %237 = add i32 %52, 9216, !dbg !99
  %238 = add i32 %237, %23, !dbg !100
  %239 = add i32 %238, %51, !dbg !101
  %240 = add i32 %237, %24, !dbg !100
  %241 = add i32 %240, %51, !dbg !101
  %242 = sext i32 %239 to i64, !dbg !102
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !102
  %244 = sext i32 %241 to i64, !dbg !102
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !102
  %246 = and i1 %29, %236, !dbg !103
  %247 = and i1 %12, %246, !dbg !104
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %243, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247) #2, !dbg !105
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !105
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !105
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !105
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !105
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247) #2, !dbg !105
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !105
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !105
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !105
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !105
  %258 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !39
  %259 = insertelement <4 x i32> %258, i32 %66, i64 1, !dbg !39
  %260 = insertelement <4 x i32> %259, i32 %67, i64 2, !dbg !39
  %261 = insertelement <4 x i32> %260, i32 %68, i64 3, !dbg !39
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !39
  %263 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !48
  %264 = insertelement <4 x i32> %263, i32 %90, i64 1, !dbg !48
  %265 = insertelement <4 x i32> %264, i32 %91, i64 2, !dbg !48
  %266 = insertelement <4 x i32> %265, i32 %92, i64 3, !dbg !48
  %267 = bitcast <4 x i32> %266 to <4 x float>, !dbg !48
  %268 = fcmp ogt <4 x float> %267, %262, !dbg !106
  %269 = fcmp uno <4 x float> %267, zeroinitializer, !dbg !110
  %270 = or <4 x i1> %268, %269, !dbg !111
  %.v = select <4 x i1> %270, <4 x i32> %266, <4 x i32> %261, !dbg !112
  %271 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %272 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !60
  %273 = insertelement <4 x i32> %272, i32 %116, i64 1, !dbg !60
  %274 = insertelement <4 x i32> %273, i32 %117, i64 2, !dbg !60
  %275 = insertelement <4 x i32> %274, i32 %118, i64 3, !dbg !60
  %276 = bitcast <4 x i32> %275 to <4 x float>, !dbg !60
  %277 = fcmp olt <4 x float> %271, %276, !dbg !113
  %278 = fcmp uno <4 x float> %276, zeroinitializer, !dbg !115
  %279 = or <4 x i1> %278, %277, !dbg !116
  %.v1 = select <4 x i1> %279, <4 x i32> %275, <4 x i32> %.v, !dbg !117
  %280 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !117
  %281 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !68
  %282 = insertelement <4 x i32> %281, i32 %139, i64 1, !dbg !68
  %283 = insertelement <4 x i32> %282, i32 %140, i64 2, !dbg !68
  %284 = insertelement <4 x i32> %283, i32 %141, i64 3, !dbg !68
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !68
  %286 = fcmp olt <4 x float> %280, %285, !dbg !118
  %287 = fcmp uno <4 x float> %285, zeroinitializer, !dbg !120
  %288 = or <4 x i1> %287, %286, !dbg !121
  %.v2 = select <4 x i1> %288, <4 x i32> %284, <4 x i32> %.v1, !dbg !122
  %289 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !122
  %290 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !74
  %291 = insertelement <4 x i32> %290, i32 %161, i64 1, !dbg !74
  %292 = insertelement <4 x i32> %291, i32 %162, i64 2, !dbg !74
  %293 = insertelement <4 x i32> %292, i32 %163, i64 3, !dbg !74
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !74
  %295 = fcmp olt <4 x float> %289, %294, !dbg !123
  %296 = fcmp uno <4 x float> %294, zeroinitializer, !dbg !125
  %297 = or <4 x i1> %296, %295, !dbg !126
  %.v3 = select <4 x i1> %297, <4 x i32> %293, <4 x i32> %.v2, !dbg !127
  %298 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !127
  %299 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !82
  %300 = insertelement <4 x i32> %299, i32 %183, i64 1, !dbg !82
  %301 = insertelement <4 x i32> %300, i32 %184, i64 2, !dbg !82
  %302 = insertelement <4 x i32> %301, i32 %185, i64 3, !dbg !82
  %303 = bitcast <4 x i32> %302 to <4 x float>, !dbg !82
  %304 = fcmp olt <4 x float> %298, %303, !dbg !128
  %305 = fcmp uno <4 x float> %303, zeroinitializer, !dbg !130
  %306 = or <4 x i1> %305, %304, !dbg !131
  %.v4 = select <4 x i1> %306, <4 x i32> %302, <4 x i32> %.v3, !dbg !132
  %307 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !132
  %308 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !90
  %309 = insertelement <4 x i32> %308, i32 %206, i64 1, !dbg !90
  %310 = insertelement <4 x i32> %309, i32 %207, i64 2, !dbg !90
  %311 = insertelement <4 x i32> %310, i32 %208, i64 3, !dbg !90
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !90
  %313 = fcmp olt <4 x float> %307, %312, !dbg !133
  %314 = fcmp uno <4 x float> %312, zeroinitializer, !dbg !135
  %315 = or <4 x i1> %314, %313, !dbg !136
  %.v5 = select <4 x i1> %315, <4 x i32> %311, <4 x i32> %.v4, !dbg !137
  %316 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !137
  %317 = insertelement <4 x i32> poison, i32 %227, i64 0, !dbg !98
  %318 = insertelement <4 x i32> %317, i32 %228, i64 1, !dbg !98
  %319 = insertelement <4 x i32> %318, i32 %229, i64 2, !dbg !98
  %320 = insertelement <4 x i32> %319, i32 %230, i64 3, !dbg !98
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !98
  %322 = fcmp olt <4 x float> %316, %321, !dbg !138
  %323 = fcmp uno <4 x float> %321, zeroinitializer, !dbg !140
  %324 = or <4 x i1> %323, %322, !dbg !141
  %.v6 = select <4 x i1> %324, <4 x i32> %320, <4 x i32> %.v5, !dbg !142
  %325 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !142
  %326 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !105
  %327 = insertelement <4 x i32> %326, i32 %250, i64 1, !dbg !105
  %328 = insertelement <4 x i32> %327, i32 %251, i64 2, !dbg !105
  %329 = insertelement <4 x i32> %328, i32 %252, i64 3, !dbg !105
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !105
  %331 = fcmp olt <4 x float> %325, %330, !dbg !143
  %332 = extractelement <4 x i1> %331, i64 0, !dbg !145
  %333 = extractelement <4 x i1> %331, i64 1, !dbg !145
  %334 = extractelement <4 x i1> %331, i64 2, !dbg !145
  %335 = extractelement <4 x i1> %331, i64 3, !dbg !145
  %336 = zext <4 x i1> %268 to <4 x i8>, !dbg !146
  %337 = select <4 x i1> %277, <4 x i8> splat (i8 2), <4 x i8> %336, !dbg !147
  %338 = select <4 x i1> %286, <4 x i8> splat (i8 3), <4 x i8> %337, !dbg !148
  %339 = select <4 x i1> %295, <4 x i8> splat (i8 4), <4 x i8> %338, !dbg !149
  %340 = select <4 x i1> %304, <4 x i8> splat (i8 5), <4 x i8> %339, !dbg !150
  %341 = select <4 x i1> %313, <4 x i8> splat (i8 6), <4 x i8> %340, !dbg !151
  %342 = select <4 x i1> %322, <4 x i8> splat (i8 7), <4 x i8> %341, !dbg !152
  %343 = select <4 x i1> %331, <4 x i8> splat (i8 8), <4 x i8> %342, !dbg !153
  %344 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !39
  %345 = insertelement <4 x i32> %344, i32 %71, i64 1, !dbg !39
  %346 = insertelement <4 x i32> %345, i32 %72, i64 2, !dbg !39
  %347 = insertelement <4 x i32> %346, i32 %73, i64 3, !dbg !39
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !39
  %349 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !48
  %350 = insertelement <4 x i32> %349, i32 %95, i64 1, !dbg !48
  %351 = insertelement <4 x i32> %350, i32 %96, i64 2, !dbg !48
  %352 = insertelement <4 x i32> %351, i32 %97, i64 3, !dbg !48
  %353 = bitcast <4 x i32> %352 to <4 x float>, !dbg !48
  %354 = fcmp ogt <4 x float> %353, %348, !dbg !106
  %355 = fcmp uno <4 x float> %353, zeroinitializer, !dbg !110
  %356 = or <4 x i1> %354, %355, !dbg !111
  %.v7 = select <4 x i1> %356, <4 x i32> %352, <4 x i32> %347, !dbg !112
  %357 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !112
  %358 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !60
  %359 = insertelement <4 x i32> %358, i32 %121, i64 1, !dbg !60
  %360 = insertelement <4 x i32> %359, i32 %122, i64 2, !dbg !60
  %361 = insertelement <4 x i32> %360, i32 %123, i64 3, !dbg !60
  %362 = bitcast <4 x i32> %361 to <4 x float>, !dbg !60
  %363 = fcmp olt <4 x float> %357, %362, !dbg !113
  %364 = fcmp uno <4 x float> %362, zeroinitializer, !dbg !115
  %365 = or <4 x i1> %364, %363, !dbg !116
  %.v8 = select <4 x i1> %365, <4 x i32> %361, <4 x i32> %.v7, !dbg !117
  %366 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !117
  %367 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !68
  %368 = insertelement <4 x i32> %367, i32 %144, i64 1, !dbg !68
  %369 = insertelement <4 x i32> %368, i32 %145, i64 2, !dbg !68
  %370 = insertelement <4 x i32> %369, i32 %146, i64 3, !dbg !68
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !68
  %372 = fcmp olt <4 x float> %366, %371, !dbg !118
  %373 = fcmp uno <4 x float> %371, zeroinitializer, !dbg !120
  %374 = or <4 x i1> %373, %372, !dbg !121
  %.v9 = select <4 x i1> %374, <4 x i32> %370, <4 x i32> %.v8, !dbg !122
  %375 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !122
  %376 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !74
  %377 = insertelement <4 x i32> %376, i32 %166, i64 1, !dbg !74
  %378 = insertelement <4 x i32> %377, i32 %167, i64 2, !dbg !74
  %379 = insertelement <4 x i32> %378, i32 %168, i64 3, !dbg !74
  %380 = bitcast <4 x i32> %379 to <4 x float>, !dbg !74
  %381 = fcmp olt <4 x float> %375, %380, !dbg !123
  %382 = fcmp uno <4 x float> %380, zeroinitializer, !dbg !125
  %383 = or <4 x i1> %382, %381, !dbg !126
  %.v10 = select <4 x i1> %383, <4 x i32> %379, <4 x i32> %.v9, !dbg !127
  %384 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !127
  %385 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !82
  %386 = insertelement <4 x i32> %385, i32 %188, i64 1, !dbg !82
  %387 = insertelement <4 x i32> %386, i32 %189, i64 2, !dbg !82
  %388 = insertelement <4 x i32> %387, i32 %190, i64 3, !dbg !82
  %389 = bitcast <4 x i32> %388 to <4 x float>, !dbg !82
  %390 = fcmp olt <4 x float> %384, %389, !dbg !128
  %391 = fcmp uno <4 x float> %389, zeroinitializer, !dbg !130
  %392 = or <4 x i1> %391, %390, !dbg !131
  %.v11 = select <4 x i1> %392, <4 x i32> %388, <4 x i32> %.v10, !dbg !132
  %393 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !132
  %394 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !90
  %395 = insertelement <4 x i32> %394, i32 %211, i64 1, !dbg !90
  %396 = insertelement <4 x i32> %395, i32 %212, i64 2, !dbg !90
  %397 = insertelement <4 x i32> %396, i32 %213, i64 3, !dbg !90
  %398 = bitcast <4 x i32> %397 to <4 x float>, !dbg !90
  %399 = fcmp olt <4 x float> %393, %398, !dbg !133
  %400 = fcmp uno <4 x float> %398, zeroinitializer, !dbg !135
  %401 = or <4 x i1> %400, %399, !dbg !136
  %.v12 = select <4 x i1> %401, <4 x i32> %397, <4 x i32> %.v11, !dbg !137
  %402 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !137
  %403 = insertelement <4 x i32> poison, i32 %232, i64 0, !dbg !98
  %404 = insertelement <4 x i32> %403, i32 %233, i64 1, !dbg !98
  %405 = insertelement <4 x i32> %404, i32 %234, i64 2, !dbg !98
  %406 = insertelement <4 x i32> %405, i32 %235, i64 3, !dbg !98
  %407 = bitcast <4 x i32> %406 to <4 x float>, !dbg !98
  %408 = fcmp olt <4 x float> %402, %407, !dbg !138
  %409 = fcmp uno <4 x float> %407, zeroinitializer, !dbg !140
  %410 = or <4 x i1> %409, %408, !dbg !141
  %.v13 = select <4 x i1> %410, <4 x i32> %406, <4 x i32> %.v12, !dbg !142
  %411 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !142
  %412 = insertelement <4 x i32> poison, i32 %254, i64 0, !dbg !105
  %413 = insertelement <4 x i32> %412, i32 %255, i64 1, !dbg !105
  %414 = insertelement <4 x i32> %413, i32 %256, i64 2, !dbg !105
  %415 = insertelement <4 x i32> %414, i32 %257, i64 3, !dbg !105
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !105
  %417 = fcmp olt <4 x float> %411, %416, !dbg !143
  %418 = shufflevector <4 x float> %416, <4 x float> %330, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !154
  %419 = fcmp uno <8 x float> %418, zeroinitializer, !dbg !154
  %420 = extractelement <8 x i1> %419, i64 7, !dbg !145
  %421 = or i1 %420, %332, !dbg !145
  %422 = extractelement <8 x i1> %419, i64 6, !dbg !145
  %423 = or i1 %422, %333, !dbg !145
  %424 = extractelement <8 x i1> %419, i64 5, !dbg !145
  %425 = or i1 %424, %334, !dbg !145
  %426 = extractelement <8 x i1> %419, i64 4, !dbg !145
  %427 = or i1 %426, %335, !dbg !145
  %428 = extractelement <4 x i1> %417, i64 0, !dbg !145
  %429 = extractelement <8 x i1> %419, i64 3, !dbg !145
  %430 = or i1 %429, %428, !dbg !145
  %431 = extractelement <4 x i1> %417, i64 1, !dbg !145
  %432 = extractelement <8 x i1> %419, i64 2, !dbg !145
  %433 = or i1 %432, %431, !dbg !145
  %434 = extractelement <4 x i1> %417, i64 2, !dbg !145
  %435 = extractelement <8 x i1> %419, i64 1, !dbg !145
  %436 = or i1 %435, %434, !dbg !145
  %437 = extractelement <4 x i1> %417, i64 3, !dbg !145
  %438 = extractelement <8 x i1> %419, i64 0, !dbg !145
  %439 = or i1 %438, %437, !dbg !145
  %440 = zext <4 x i1> %354 to <4 x i8>, !dbg !146
  %441 = select <4 x i1> %363, <4 x i8> splat (i8 2), <4 x i8> %440, !dbg !147
  %442 = select <4 x i1> %372, <4 x i8> splat (i8 3), <4 x i8> %441, !dbg !148
  %443 = select <4 x i1> %381, <4 x i8> splat (i8 4), <4 x i8> %442, !dbg !149
  %444 = select <4 x i1> %390, <4 x i8> splat (i8 5), <4 x i8> %443, !dbg !150
  %445 = select <4 x i1> %399, <4 x i8> splat (i8 6), <4 x i8> %444, !dbg !151
  %446 = select <4 x i1> %408, <4 x i8> splat (i8 7), <4 x i8> %445, !dbg !152
  %447 = select <4 x i1> %417, <4 x i8> splat (i8 8), <4 x i8> %446, !dbg !153
  %448 = mul i32 %25, 81, !dbg !155
  %449 = mul i32 %26, 81, !dbg !155
  %450 = mul i32 %27, 81, !dbg !155
  %451 = mul i32 %28, 81, !dbg !155
  %452 = mul i32 %36, 62208, !dbg !156
  %453 = mul i32 %37, 62208, !dbg !156
  %454 = add i32 %452, %.decomposed, !dbg !157
  %455 = add i32 %454, %448, !dbg !158
  %456 = add i32 %454, %449, !dbg !158
  %457 = add i32 %454, %450, !dbg !158
  %458 = add i32 %454, %451, !dbg !158
  %459 = add i32 %453, %.decomposed15, !dbg !157
  %460 = add i32 %459, %448, !dbg !158
  %461 = add i32 %459, %449, !dbg !158
  %462 = add i32 %459, %450, !dbg !158
  %463 = add i32 %459, %451, !dbg !158
  %464 = sext i32 %455 to i64, !dbg !159
  %465 = getelementptr float, ptr addrspace(1) %1, i64 %464, !dbg !159
  %466 = sext i32 %456 to i64, !dbg !159
  %467 = getelementptr float, ptr addrspace(1) %1, i64 %466, !dbg !159
  %468 = sext i32 %457 to i64, !dbg !159
  %469 = getelementptr float, ptr addrspace(1) %1, i64 %468, !dbg !159
  %470 = sext i32 %458 to i64, !dbg !159
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !159
  %472 = sext i32 %460 to i64, !dbg !159
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !159
  %474 = sext i32 %461 to i64, !dbg !159
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !159
  %476 = sext i32 %462 to i64, !dbg !159
  %477 = getelementptr float, ptr addrspace(1) %1, i64 %476, !dbg !159
  %478 = sext i32 %463 to i64, !dbg !159
  %479 = getelementptr float, ptr addrspace(1) %1, i64 %478, !dbg !159
  %480 = and i1 %13, %30, !dbg !160
  %481 = and i1 %13, %31, !dbg !160
  %482 = and i1 %13, %32, !dbg !160
  %483 = and i1 %13, %33, !dbg !160
  %484 = and i1 %14, %30, !dbg !160
  %485 = and i1 %14, %31, !dbg !160
  %486 = and i1 %14, %32, !dbg !160
  %487 = and i1 %14, %33, !dbg !160
  %488 = and i1 %12, %29, !dbg !160
  %489 = and i32 %17, 1016, !dbg !161
  %490 = lshr i32 %489, 9, !dbg !161
  %491 = or disjoint i32 %490, %489, !dbg !161
  %492 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %491, !dbg !161
  %493 = extractelement <4 x i32> %.v6, i64 0, !dbg !161
  %494 = select i1 %421, i32 %249, i32 %493, !dbg !162
  %495 = insertelement <1 x i32> poison, i32 %494, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %495, i1 true) #2, !dbg !161
  %496 = or disjoint i32 %489, 1, !dbg !161
  %497 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %490, !dbg !161
  %498 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %496, !dbg !161
  %499 = extractelement <4 x i32> %.v6, i64 1, !dbg !161
  %500 = select i1 %423, i32 %250, i32 %499, !dbg !162
  %501 = insertelement <1 x i32> poison, i32 %500, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %501, i1 true) #2, !dbg !161
  %502 = or disjoint i32 %491, 2, !dbg !161
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %502, !dbg !161
  %504 = extractelement <4 x i32> %.v6, i64 2, !dbg !161
  %505 = select i1 %425, i32 %251, i32 %504, !dbg !162
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %506, i1 true) #2, !dbg !161
  %507 = or disjoint i32 %489, 3, !dbg !161
  %508 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %507, !dbg !161
  %509 = extractelement <4 x i32> %.v6, i64 3, !dbg !161
  %510 = select i1 %427, i32 %252, i32 %509, !dbg !162
  %511 = insertelement <1 x i32> poison, i32 %510, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %511, i1 true) #2, !dbg !161
  %512 = or disjoint i32 %491, 4, !dbg !161
  %513 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %512, !dbg !161
  %514 = extractelement <4 x i32> %.v13, i64 0, !dbg !161
  %515 = select i1 %430, i32 %254, i32 %514, !dbg !162
  %516 = insertelement <1 x i32> poison, i32 %515, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %516, i1 true) #2, !dbg !161
  %517 = or disjoint i32 %489, 5, !dbg !161
  %518 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %517, !dbg !161
  %519 = extractelement <4 x i32> %.v13, i64 1, !dbg !161
  %520 = select i1 %433, i32 %255, i32 %519, !dbg !162
  %521 = insertelement <1 x i32> poison, i32 %520, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %521, i1 true) #2, !dbg !161
  %522 = or disjoint i32 %491, 6, !dbg !161
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !161
  %524 = extractelement <4 x i32> %.v13, i64 2, !dbg !161
  %525 = select i1 %436, i32 %256, i32 %524, !dbg !162
  %526 = insertelement <1 x i32> poison, i32 %525, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %523, <1 x i32> %526, i1 true) #2, !dbg !161
  %527 = or disjoint i32 %489, 7, !dbg !161
  %528 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %527, !dbg !161
  %529 = extractelement <4 x i32> %.v13, i64 3, !dbg !161
  %530 = select i1 %439, i32 %257, i32 %529, !dbg !162
  %531 = insertelement <1 x i32> poison, i32 %530, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %531, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %532 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !161
  %533 = load i32, ptr addrspace(3) %532, align 4, !dbg !161
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !161
  %535 = load i32, ptr addrspace(3) %534, align 4, !dbg !161
  %536 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !161
  %537 = load i32, ptr addrspace(3) %536, align 4, !dbg !161
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !161
  %539 = load i32, ptr addrspace(3) %538, align 4, !dbg !161
  %540 = getelementptr inbounds i8, ptr addrspace(3) %532, i32 2052, !dbg !161
  %541 = load i32, ptr addrspace(3) %540, align 4, !dbg !161
  %542 = getelementptr inbounds i8, ptr addrspace(3) %532, i32 2564, !dbg !161
  %543 = load i32, ptr addrspace(3) %542, align 4, !dbg !161
  %544 = getelementptr inbounds i8, ptr addrspace(3) %532, i32 3076, !dbg !161
  %545 = load i32, ptr addrspace(3) %544, align 4, !dbg !161
  %546 = getelementptr inbounds i8, ptr addrspace(3) %532, i32 3588, !dbg !161
  %547 = load i32, ptr addrspace(3) %546, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %533, ptr addrspace(1) %465, i1 %480) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %467, i1 %481) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %537, ptr addrspace(1) %469, i1 %482) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %471, i1 %483) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %473, i1 %484) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %543, ptr addrspace(1) %475, i1 %485) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %477, i1 %486) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %547, ptr addrspace(1) %479, i1 %487) #2, !dbg !161
  %548 = shl i32 %10, 9, !dbg !163
  %549 = add i32 %23, %548, !dbg !164
  %550 = sext i32 %549 to i64, !dbg !165
  %551 = getelementptr i8, ptr addrspace(1) %2, i64 %550, !dbg !165
  %552 = bitcast <4 x i8> %343 to i32, !dbg !166
  %553 = bitcast <4 x i8> %447 to i32, !dbg !166
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %552, i32 %553, ptr addrspace(1) %551, i1 %488) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccqvx77zasulti33kl6ipc5ri4ywtvvyvwbnxywnuumlb75kiu4m.py", directory: "inductor_cache/cq")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 45, column: 74, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 67, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 51, scope: !7)
!31 = !DILocation(line: 45, column: 62, scope: !7)
!32 = !DILocation(line: 45, column: 41, scope: !7)
!33 = !DILocation(line: 45, column: 46, scope: !7)
!34 = !DILocation(line: 45, column: 56, scope: !7)
!35 = !DILocation(line: 45, column: 67, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 87, scope: !7)
!38 = !DILocation(line: 45, column: 95, scope: !7)
!39 = !DILocation(line: 45, column: 79, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 87, scope: !7)
!47 = !DILocation(line: 51, column: 95, scope: !7)
!48 = !DILocation(line: 51, column: 79, scope: !7)
!49 = !DILocation(line: 53, column: 16, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 56, scope: !7)
!56 = !DILocation(line: 58, column: 67, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 87, scope: !7)
!59 = !DILocation(line: 58, column: 95, scope: !7)
!60 = !DILocation(line: 58, column: 79, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 45, scope: !7)
!63 = !DILocation(line: 65, column: 55, scope: !7)
!64 = !DILocation(line: 65, column: 66, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 86, scope: !7)
!67 = !DILocation(line: 65, column: 94, scope: !7)
!68 = !DILocation(line: 65, column: 78, scope: !7)
!69 = !DILocation(line: 68, column: 46, scope: !7)
!70 = !DILocation(line: 68, column: 57, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 77, scope: !7)
!73 = !DILocation(line: 68, column: 85, scope: !7)
!74 = !DILocation(line: 68, column: 69, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 71, column: 52, scope: !7)
!78 = !DILocation(line: 71, column: 63, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 83, scope: !7)
!81 = !DILocation(line: 71, column: 91, scope: !7)
!82 = !DILocation(line: 71, column: 75, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 53, scope: !7)
!86 = !DILocation(line: 78, column: 64, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 84, scope: !7)
!89 = !DILocation(line: 78, column: 92, scope: !7)
!90 = !DILocation(line: 78, column: 76, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 53, scope: !7)
!94 = !DILocation(line: 81, column: 64, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 84, scope: !7)
!97 = !DILocation(line: 81, column: 92, scope: !7)
!98 = !DILocation(line: 81, column: 76, scope: !7)
!99 = !DILocation(line: 84, column: 43, scope: !7)
!100 = !DILocation(line: 84, column: 53, scope: !7)
!101 = !DILocation(line: 84, column: 64, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 84, scope: !7)
!104 = !DILocation(line: 84, column: 92, scope: !7)
!105 = !DILocation(line: 84, column: 76, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 89, column: 35, scope: !7)
!147 = !DILocation(line: 92, column: 35, scope: !7)
!148 = !DILocation(line: 95, column: 35, scope: !7)
!149 = !DILocation(line: 98, column: 35, scope: !7)
!150 = !DILocation(line: 101, column: 35, scope: !7)
!151 = !DILocation(line: 104, column: 35, scope: !7)
!152 = !DILocation(line: 107, column: 35, scope: !7)
!153 = !DILocation(line: 110, column: 35, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!155 = !DILocation(line: 111, column: 33, scope: !7)
!156 = !DILocation(line: 111, column: 44, scope: !7)
!157 = !DILocation(line: 111, column: 30, scope: !7)
!158 = !DILocation(line: 111, column: 38, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 64, scope: !7)
!161 = !DILocation(line: 111, column: 56, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 34, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 46, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
