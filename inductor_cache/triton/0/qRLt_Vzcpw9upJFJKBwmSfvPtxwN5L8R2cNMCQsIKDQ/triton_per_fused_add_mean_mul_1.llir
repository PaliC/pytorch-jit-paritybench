; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = shl i32 %10, 1, !dbg !15
  %19 = and i32 %18, 14, !dbg !15
  %20 = sdiv i32 %14, 4, !dbg !16
  %21 = shl i32 %14, 4, !dbg !17
  %22 = or disjoint i32 %21, %19, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !20
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = bitcast i32 %27 to float, !dbg !20
  %30 = sext i32 %14 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #3, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = shl i32 %20, 4, !dbg !23
  %36 = or disjoint i32 %35, %19, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !26
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = bitcast i32 %41 to float, !dbg !26
  %44 = fadd float %28, %29, !dbg !27
  %45 = select i1 %16, float %44, float 0.000000e+00, !dbg !27
  %46 = bitcast float %45 to i32, !dbg !32
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = fadd float %45, %48, !dbg !27
  %50 = bitcast float %49 to i32, !dbg !32
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = fadd float %49, %52, !dbg !27
  %54 = bitcast float %53 to i32, !dbg !32
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !32
  %56 = bitcast i32 %55 to float, !dbg !32
  %57 = fadd float %53, %56, !dbg !27
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %59 = bitcast float %57 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !33
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !33
  %62 = fsub float 0.000000e+00, %34, !dbg !34
  %63 = fmul float %62, 0x3FF7154760000000, !dbg !36
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #3, !dbg !36
  %65 = fadd float %64, 1.000000e+00, !dbg !37
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #3, !dbg !38
  %67 = fmul float %66, %28, !dbg !39
  %68 = fmul float %66, %29, !dbg !39
  %69 = fsub float 0.000000e+00, %42, !dbg !40
  %70 = fsub float 0.000000e+00, %43, !dbg !40
  %71 = fmul float %69, 0x3FF7154760000000, !dbg !42
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #3, !dbg !42
  %73 = fmul float %70, 0x3FF7154760000000, !dbg !42
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #3, !dbg !42
  %75 = fadd float %72, 1.000000e+00, !dbg !43
  %76 = fadd float %74, 1.000000e+00, !dbg !43
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %75) #3, !dbg !44
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %76) #3, !dbg !44
  %79 = fmul float %77, %28, !dbg !45
  %80 = fmul float %78, %29, !dbg !45
  %81 = fadd float %67, %79, !dbg !46
  %82 = fadd float %68, %80, !dbg !46
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #3, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !47
  %85 = bitcast float %81 to i32, !dbg !48
  %86 = bitcast float %82 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 %16) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %87 = sext i32 %15 to i64, !dbg !50
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !50
  %89 = and i32 %10, 56, !dbg !51
  %90 = icmp eq i32 %89, 0, !dbg !51
  %91 = bitcast float %83 to i32, !dbg !51
  %92 = and i1 %90, %17, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %88, i1 %92) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cju55vyc3aidkalriyyiqmfqbpp2qmh42xqcaxgjuakhcenntnba.py", directory: "inductor_cache/ju")
!4 = !{ptr @triton_per_fused_add_mean_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_1", linkageName: "triton_per_fused_add_mean_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 37, column: 24, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !35)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !35)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !41)
!41 = !DILocation(line: 40, column: 22, scope: !7)
!42 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !41)
!44 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !41)
!45 = !DILocation(line: 41, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 25, scope: !7)
!48 = !DILocation(line: 45, column: 45, scope: !7)
!49 = !DILocation(line: 46, column: 4, scope: !7)
!50 = !DILocation(line: 47, column: 28, scope: !7)
!51 = !DILocation(line: 47, column: 40, scope: !7)
!52 = !DILocation(line: 47, column: 4, scope: !7)
