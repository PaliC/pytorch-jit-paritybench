; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_div_pow_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !11
  %11 = extractvalue { i32, i32, i32, i32 } %10, 0, !dbg !11
  %12 = extractvalue { i32, i32, i32, i32 } %10, 1, !dbg !11
  %13 = extractvalue { i32, i32, i32, i32 } %10, 2, !dbg !11
  %14 = extractvalue { i32, i32, i32, i32 } %10, 3, !dbg !11
  %15 = bitcast i32 %11 to float, !dbg !11
  %16 = bitcast i32 %12 to float, !dbg !11
  %17 = bitcast i32 %13 to float, !dbg !11
  %18 = bitcast i32 %14 to float, !dbg !11
  %19 = zext nneg i32 %9 to i64, !dbg !12
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !12
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !13
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !13
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !13
  %26 = bitcast i32 %22 to float, !dbg !13
  %27 = bitcast i32 %23 to float, !dbg !13
  %28 = bitcast i32 %24 to float, !dbg !13
  %29 = bitcast i32 %25 to float, !dbg !13
  %30 = fmul float %26, %26, !dbg !14
  %31 = fmul float %27, %27, !dbg !14
  %32 = fmul float %28, %28, !dbg !14
  %33 = fmul float %29, %29, !dbg !14
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %30) #3, !dbg !15
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float %31) #3, !dbg !15
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %17, float %32) #3, !dbg !15
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float %33) #3, !dbg !15
  %38 = fadd float %34, %35, !dbg !16
  %39 = fadd float %38, %36, !dbg !16
  %40 = fadd float %39, %37, !dbg !16
  %41 = bitcast float %40 to i32, !dbg !21
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 16, i32 31), !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = fadd float %40, %43, !dbg !16
  %45 = bitcast float %44 to i32, !dbg !21
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = fadd float %44, %47, !dbg !16
  %49 = bitcast float %48 to i32, !dbg !21
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !21
  %51 = bitcast i32 %50 to float, !dbg !21
  %52 = fadd float %48, %51, !dbg !16
  %53 = bitcast float %52 to i32, !dbg !21
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = fadd float %52, %55, !dbg !16
  %57 = bitcast float %56 to i32, !dbg !21
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !21
  %59 = bitcast i32 %58 to float, !dbg !21
  %60 = fadd float %56, %59, !dbg !16
  %61 = icmp eq i32 %6, 0, !dbg !21
  %62 = and i32 %7, 1, !dbg !21
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !21
  %64 = bitcast float %60 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 %61) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %65 = icmp slt i32 %5, 2, !dbg !21
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !21
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #3, !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !21
  %70 = bitcast i32 %69 to float, !dbg !21
  %71 = fadd float %68, %70, !dbg !16
  %72 = and i32 %5, 1, !dbg !21
  %73 = icmp eq i32 %72, 0, !dbg !21
  %74 = and i1 %65, %73, !dbg !21
  %75 = bitcast float %71 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %75, i1 %74) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %76 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %77 = fadd float %76, 0.000000e+00, !dbg !22
  %urem = and i32 %5, 63, !dbg !26
  %78 = icmp eq i32 %urem, 0, !dbg !26
  %79 = bitcast float %77 to i32, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %79, ptr addrspace(1) %2, i1 %78) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbfxs6zkxtg6dsvhp3r62snu7cfqxrnn43ofouj33q7f6imvofd.py", directory: "inductor_cache/qb")
!4 = !{ptr @triton_per_fused_div_pow_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_pow_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_pow_sum_1", linkageName: "triton_per_fused_div_pow_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 32, column: 35, scope: !7)
!12 = !DILocation(line: 33, column: 30, scope: !7)
!13 = !DILocation(line: 33, column: 35, scope: !7)
!14 = !DILocation(line: 34, column: 18, scope: !7)
!15 = !DILocation(line: 35, column: 18, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 37, column: 57, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 44, scope: !7)
!26 = !DILocation(line: 38, column: 59, scope: !7)
!27 = !DILocation(line: 38, column: 4, scope: !7)
