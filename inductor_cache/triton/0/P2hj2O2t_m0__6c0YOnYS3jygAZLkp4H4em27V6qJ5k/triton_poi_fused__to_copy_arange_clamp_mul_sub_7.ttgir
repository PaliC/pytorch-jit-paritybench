#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/xb/cxbuar63g5shpyezb33muyjnaa2ouq6szsi5mlbjpp5oy55hetcg.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__to_copy_arange_clamp_mul_sub_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xb/cxbuar63g5shpyezb33muyjnaa2ouq6szsi5mlbjpp5oy55hetcg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %0 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc2)
    %1 = tt.splat %0 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc2)
    tt.store %1, %cst : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc3)
    tt.return loc(#loc4)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/xb/cxbuar63g5shpyezb33muyjnaa2ouq6szsi5mlbjpp5oy55hetcg.py":25:25)
#loc3 = loc("inductor_cache/xb/cxbuar63g5shpyezb33muyjnaa2ouq6szsi5mlbjpp5oy55hetcg.py":25:64)
#loc4 = loc("inductor_cache/xb/cxbuar63g5shpyezb33muyjnaa2ouq6szsi5mlbjpp5oy55hetcg.py":25:4)
