; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 8, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = shl i32 %26, 1, !dbg !12
  %28 = and i32 %27, 254, !dbg !12
  %29 = or disjoint i32 %25, %28, !dbg !13
  %.frozen = freeze i32 %29, !dbg !14
  %30 = sdiv i32 %.frozen, 8, !dbg !14
  %31 = srem i32 %30, 8, !dbg !15
  %32 = mul i32 %30, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %32, !dbg !16
  %33 = sdiv i32 %29, 64, !dbg !17
  %34 = srem i32 %33, 96, !dbg !18
  %35 = sext i32 %31 to i64, !dbg !19
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %39 = sext i32 %.decomposed to i64, !dbg !21
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !21
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !22
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !22
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !23
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !24
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %50 = sext i32 %29 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !27
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %53 = sext i32 %34 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %50, !dbg !37
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !38
  %70 = getelementptr i64, ptr addrspace(1) %12, i64 %35, !dbg !39
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !40
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !42
  %76 = getelementptr i64, ptr addrspace(1) %14, i64 %35, !dbg !43
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !44
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !44
  %79 = getelementptr i64, ptr addrspace(1) %15, i64 %39, !dbg !45
  %80 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !46
  %81 = getelementptr i64, ptr addrspace(1) %17, i64 %39, !dbg !47
  %82 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !48
  %83 = getelementptr float, ptr addrspace(1) %18, i64 %39, !dbg !49
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !50
  %85 = getelementptr i64, ptr addrspace(1) %19, i64 %35, !dbg !51
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !52
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !52
  %88 = getelementptr float, ptr addrspace(1) %20, i64 %35, !dbg !53
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !54
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !54
  %91 = lshr i64 %37, 61, !dbg !55
  %92 = and i64 %91, 4, !dbg !55
  %93 = add i64 %92, %37, !dbg !55
  %94 = lshr i64 %42, 61, !dbg !56
  %95 = and i64 %94, 4, !dbg !56
  %96 = lshr i64 %43, 61, !dbg !56
  %97 = and i64 %96, 4, !dbg !56
  %98 = shl i64 %93, 2, !dbg !57
  %99 = shl nsw i32 %33, 4, !dbg !58
  %100 = sext i32 %99 to i64, !dbg !59
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !60
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %95, !dbg !60
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %98, !dbg !60
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %100, !dbg !60
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !60
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %97, !dbg !60
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %98, !dbg !60
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %100, !dbg !60
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !61
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !61
  %111 = lshr i64 %46, 61, !dbg !62
  %112 = and i64 %111, 4, !dbg !62
  %113 = lshr i64 %47, 61, !dbg !62
  %114 = and i64 %113, 4, !dbg !62
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !63
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %112, !dbg !63
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %98, !dbg !63
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %100, !dbg !63
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !63
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %114, !dbg !63
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %98, !dbg !63
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %100, !dbg !63
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !64
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !64
  %125 = fadd float %59, 0x3EE4F8B580000000, !dbg !65
  %126 = fadd float %61, 0x3EE4F8B580000000, !dbg !65
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %127, 0, !dbg !66
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %128, 0, !dbg !66
  br i1 %.not.i, label %134, label %129, !dbg !66

129:                                              ; preds = %23
  br i1 %.not1.i, label %132, label %130, !dbg !66

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

134:                                              ; preds = %23
  br i1 %.not1.i, label %137, label %135, !dbg !66

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %130, %132, %135, %137
  %.0.i = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !66
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %139, 0, !dbg !66
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %140, 0, !dbg !66
  br i1 %.not.i1, label %146, label %141, !dbg !66

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %144, label %142, !dbg !66

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %149, label %147, !dbg !66

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %142, %144, %147, %149
  %.0.i3 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !66
  %151 = extractvalue { i32, i32 } %52, 1, !dbg !28
  %152 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !30
  %153 = insertelement <2 x i32> %152, i32 %56, i64 1, !dbg !30
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !30
  %155 = extractvalue { i32, i32 } %52, 0, !dbg !28
  %156 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !28
  %157 = insertelement <2 x i32> %156, i32 %151, i64 1, !dbg !28
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !28
  %159 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %160 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %161 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !42
  %162 = insertelement <2 x i32> %161, i32 %90, i64 1, !dbg !42
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !42
  %164 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %165 = insertelement <2 x i32> %164, i32 %89, i64 1, !dbg !42
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !42
  %167 = extractvalue { i32, i32 } %84, 1, !dbg !50
  %168 = extractvalue { i32, i32 } %84, 0, !dbg !50
  %169 = extractvalue { i64, i64 } %82, 1, !dbg !48
  %170 = extractvalue { i64, i64 } %82, 0, !dbg !48
  %171 = extractvalue { i64, i64 } %80, 1, !dbg !46
  %172 = extractvalue { i64, i64 } %80, 0, !dbg !46
  %173 = extractvalue { i32, i32 } %69, 1, !dbg !38
  %174 = extractvalue { i32, i32 } %69, 0, !dbg !38
  %175 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !36
  %176 = insertelement <2 x i32> %175, i32 %67, i64 1, !dbg !36
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !36
  %178 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !34
  %179 = insertelement <2 x i32> %178, i32 %64, i64 1, !dbg !34
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !34
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %183 = lshr i64 %71, 61, !dbg !68
  %184 = and i64 %183, 4, !dbg !68
  %185 = add i64 %184, %71, !dbg !68
  %186 = shl i64 %185, 2, !dbg !69
  %187 = getelementptr float, ptr addrspace(1) %102, i64 %186, !dbg !70
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %100, !dbg !70
  %189 = getelementptr float, ptr addrspace(1) %106, i64 %186, !dbg !70
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %100, !dbg !70
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !71
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #3, !dbg !71
  %193 = getelementptr float, ptr addrspace(1) %116, i64 %186, !dbg !72
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %100, !dbg !72
  %195 = getelementptr float, ptr addrspace(1) %120, i64 %186, !dbg !72
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %100, !dbg !72
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #3, !dbg !73
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #3, !dbg !73
  %199 = lshr i64 %77, 62, !dbg !74
  %200 = and i64 %199, 2, !dbg !74
  %201 = add i64 %200, %77, !dbg !74
  %202 = lshr i64 %172, 62, !dbg !75
  %203 = and i64 %202, 2, !dbg !75
  %204 = lshr i64 %171, 62, !dbg !75
  %205 = and i64 %204, 2, !dbg !75
  %206 = shl i64 %201, 1, !dbg !76
  %207 = shl nsw i32 %33, 2, !dbg !77
  %208 = sext i32 %207 to i64, !dbg !78
  %209 = getelementptr float, ptr addrspace(1) %16, i64 %172, !dbg !79
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %203, !dbg !79
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %206, !dbg !79
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %208, !dbg !79
  %213 = getelementptr float, ptr addrspace(1) %16, i64 %171, !dbg !79
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %205, !dbg !79
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %206, !dbg !79
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %208, !dbg !79
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #3, !dbg !80
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !80
  %219 = lshr i64 %170, 62, !dbg !81
  %220 = and i64 %219, 2, !dbg !81
  %221 = lshr i64 %169, 62, !dbg !81
  %222 = and i64 %221, 2, !dbg !81
  %223 = getelementptr float, ptr addrspace(1) %16, i64 %170, !dbg !82
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %220, !dbg !82
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %206, !dbg !82
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %208, !dbg !82
  %227 = getelementptr float, ptr addrspace(1) %16, i64 %169, !dbg !82
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %222, !dbg !82
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %206, !dbg !82
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %208, !dbg !82
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #3, !dbg !83
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #3, !dbg !83
  %233 = lshr i64 %86, 62, !dbg !84
  %234 = and i64 %233, 2, !dbg !84
  %235 = add i64 %234, %86, !dbg !84
  %236 = shl i64 %235, 1, !dbg !85
  %237 = getelementptr float, ptr addrspace(1) %210, i64 %236, !dbg !86
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %208, !dbg !86
  %239 = getelementptr float, ptr addrspace(1) %214, i64 %236, !dbg !86
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %208, !dbg !86
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !87
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !87
  %243 = getelementptr float, ptr addrspace(1) %224, i64 %236, !dbg !88
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %208, !dbg !88
  %245 = getelementptr float, ptr addrspace(1) %228, i64 %236, !dbg !88
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %208, !dbg !88
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !89
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !89
  %249 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !26
  %250 = insertelement <2 x i32> %249, i32 %168, i64 1, !dbg !26
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !26
  %252 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !61
  %253 = insertelement <2 x i32> %252, i32 %217, i64 1, !dbg !61
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !61
  %255 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !64
  %256 = insertelement <2 x i32> %255, i32 %231, i64 1, !dbg !64
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !64
  %258 = fsub <2 x float> %257, %254, !dbg !90
  %259 = fmul <2 x float> %258, %251, !dbg !91
  %260 = fadd <2 x float> %259, %254, !dbg !92
  %261 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !71
  %262 = insertelement <2 x i32> %261, i32 %241, i64 1, !dbg !71
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !71
  %264 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !73
  %265 = insertelement <2 x i32> %264, i32 %247, i64 1, !dbg !73
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !73
  %267 = fsub <2 x float> %266, %263, !dbg !93
  %268 = fmul <2 x float> %267, %251, !dbg !94
  %269 = fadd <2 x float> %268, %263, !dbg !95
  %270 = fsub <2 x float> %269, %260, !dbg !96
  %271 = fmul <2 x float> %270, %166, !dbg !97
  %272 = fadd <2 x float> %260, %271, !dbg !98
  %273 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !26
  %274 = insertelement <2 x i32> %273, i32 %167, i64 1, !dbg !26
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !26
  %276 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !61
  %277 = insertelement <2 x i32> %276, i32 %218, i64 1, !dbg !61
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !61
  %279 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !64
  %280 = insertelement <2 x i32> %279, i32 %232, i64 1, !dbg !64
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !64
  %282 = fsub <2 x float> %281, %278, !dbg !90
  %283 = fmul <2 x float> %282, %275, !dbg !91
  %284 = fadd <2 x float> %283, %278, !dbg !92
  %285 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !71
  %286 = insertelement <2 x i32> %285, i32 %242, i64 1, !dbg !71
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !71
  %288 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !73
  %289 = insertelement <2 x i32> %288, i32 %248, i64 1, !dbg !73
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !73
  %291 = fsub <2 x float> %290, %287, !dbg !93
  %292 = fmul <2 x float> %291, %275, !dbg !94
  %293 = fadd <2 x float> %292, %287, !dbg !95
  %294 = fsub <2 x float> %293, %284, !dbg !96
  %295 = fmul <2 x float> %294, %163, !dbg !97
  %296 = fadd <2 x float> %284, %295, !dbg !98
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !99
  %298 = getelementptr i1, ptr addrspace(1) %21, i64 %50, !dbg !100
  %299 = fsub <2 x float> %158, %154, !dbg !101
  %300 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !38
  %301 = insertelement <2 x i32> %300, i32 %173, i64 1, !dbg !38
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !38
  %303 = insertelement <2 x float> poison, float %181, i64 0, !dbg !102
  %304 = insertelement <2 x float> %303, float %182, i64 1, !dbg !102
  %305 = fmul <2 x float> %299, %304, !dbg !102
  %306 = fmul <2 x float> %305, %180, !dbg !103
  %307 = fadd <2 x float> %306, %177, !dbg !104
  %308 = fadd <2 x float> %307, %302, !dbg !105
  %309 = shufflevector <2 x float> %272, <2 x float> %296, <2 x i32> <i32 0, i32 2>, !dbg !106
  %310 = fadd <2 x float> %308, %309, !dbg !106
  %311 = shufflevector <2 x float> %272, <2 x float> %296, <2 x i32> <i32 1, i32 3>, !dbg !107
  %312 = fadd <2 x float> %310, %311, !dbg !107
  %313 = fcmp olt <2 x float> %312, zeroinitializer, !dbg !108
  %314 = select <2 x i1> %313, <2 x float> zeroinitializer, <2 x float> %312, !dbg !112
  %315 = fcmp ole <2 x float> %314, zeroinitializer, !dbg !113
  %bc = bitcast <2 x float> %312 to <2 x i32>, !dbg !114
  %316 = extractelement <2 x i32> %bc, i64 0, !dbg !114
  %bc6 = bitcast <2 x float> %312 to <2 x i32>, !dbg !114
  %317 = extractelement <2 x i32> %bc6, i64 1, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %316, i32 %317, ptr addrspace(1) %297, i1 true) #3, !dbg !114
  %318 = zext <2 x i1> %315 to <2 x i8>, !dbg !115
  %319 = bitcast <2 x i8> %318 to i16, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %319, ptr addrspace(1) %298, i1 true) #3, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctt5aq3n2ypb4b7q6ugagbue4ywcucsapqvfsee36xoblhsuub7b.py", directory: "inductor_cache/tt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 32, scope: !7)
!56 = !DILocation(line: 53, column: 32, scope: !7)
!57 = !DILocation(line: 54, column: 39, scope: !7)
!58 = !DILocation(line: 54, column: 49, scope: !7)
!59 = !DILocation(line: 54, column: 46, scope: !7)
!60 = !DILocation(line: 54, column: 30, scope: !7)
!61 = !DILocation(line: 54, column: 54, scope: !7)
!62 = !DILocation(line: 57, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 31, scope: !7)
!64 = !DILocation(line: 58, column: 56, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 27, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 35, scope: !7)
!69 = !DILocation(line: 77, column: 40, scope: !7)
!70 = !DILocation(line: 77, column: 31, scope: !7)
!71 = !DILocation(line: 77, column: 56, scope: !7)
!72 = !DILocation(line: 78, column: 31, scope: !7)
!73 = !DILocation(line: 78, column: 57, scope: !7)
!74 = !DILocation(line: 89, column: 35, scope: !7)
!75 = !DILocation(line: 92, column: 35, scope: !7)
!76 = !DILocation(line: 93, column: 42, scope: !7)
!77 = !DILocation(line: 93, column: 52, scope: !7)
!78 = !DILocation(line: 93, column: 50, scope: !7)
!79 = !DILocation(line: 93, column: 32, scope: !7)
!80 = !DILocation(line: 93, column: 57, scope: !7)
!81 = !DILocation(line: 96, column: 35, scope: !7)
!82 = !DILocation(line: 97, column: 32, scope: !7)
!83 = !DILocation(line: 97, column: 57, scope: !7)
!84 = !DILocation(line: 103, column: 35, scope: !7)
!85 = !DILocation(line: 104, column: 42, scope: !7)
!86 = !DILocation(line: 104, column: 32, scope: !7)
!87 = !DILocation(line: 104, column: 57, scope: !7)
!88 = !DILocation(line: 105, column: 32, scope: !7)
!89 = !DILocation(line: 105, column: 57, scope: !7)
!90 = !DILocation(line: 59, column: 20, scope: !7)
!91 = !DILocation(line: 60, column: 20, scope: !7)
!92 = !DILocation(line: 61, column: 19, scope: !7)
!93 = !DILocation(line: 79, column: 20, scope: !7)
!94 = !DILocation(line: 80, column: 20, scope: !7)
!95 = !DILocation(line: 81, column: 20, scope: !7)
!96 = !DILocation(line: 82, column: 20, scope: !7)
!97 = !DILocation(line: 83, column: 20, scope: !7)
!98 = !DILocation(line: 84, column: 20, scope: !7)
!99 = !DILocation(line: 117, column: 28, scope: !7)
!100 = !DILocation(line: 118, column: 25, scope: !7)
!101 = !DILocation(line: 62, column: 20, scope: !7)
!102 = !DILocation(line: 70, column: 20, scope: !7)
!103 = !DILocation(line: 71, column: 20, scope: !7)
!104 = !DILocation(line: 72, column: 20, scope: !7)
!105 = !DILocation(line: 73, column: 20, scope: !7)
!106 = !DILocation(line: 85, column: 20, scope: !7)
!107 = !DILocation(line: 112, column: 20, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !111)
!109 = distinct !DILexicalBlockFile(scope: !7, file: !110, discriminator: 0)
!110 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!111 = !DILocation(line: 114, column: 42, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !111)
!113 = !DILocation(line: 116, column: 21, scope: !7)
!114 = !DILocation(line: 117, column: 40, scope: !7)
!115 = !DILocation(line: 118, column: 37, scope: !7)
!116 = !DILocation(line: 118, column: 4, scope: !7)
