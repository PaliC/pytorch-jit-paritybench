; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %13, 64, !dbg !12
  %.lobit = lshr exact i32 %16, 6, !dbg !12
  %17 = and i32 %13, 128, !dbg !12
  %18 = lshr exact i32 %17, 6, !dbg !12
  %19 = or disjoint i32 %.lobit, %18, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %19, !dbg !13
  %22 = or disjoint i32 %21, 4, !dbg !13
  %23 = or disjoint i32 %21, 8, !dbg !13
  %24 = or disjoint i32 %21, 12, !dbg !13
  %25 = icmp slt i32 %20, 64, !dbg !14
  %26 = icmp slt i32 %21, 64, !dbg !14
  %27 = icmp slt i32 %22, 64, !dbg !14
  %28 = icmp slt i32 %23, 64, !dbg !14
  %29 = icmp slt i32 %24, 64, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 8, !dbg !16
  %32 = lshr i32 %13, 2, !dbg !17
  %33 = and i32 %32, 15, !dbg !17
  %34 = lshr exact i32 %16, 2, !dbg !17
  %35 = or disjoint i32 %33, %34, !dbg !17
  %36 = lshr exact i32 %17, 2, !dbg !17
  %37 = or disjoint i32 %35, %36, !dbg !17
  %38 = or disjoint i32 %37, 64, !dbg !17
  %39 = or disjoint i32 %37, 128, !dbg !17
  %40 = or disjoint i32 %37, 192, !dbg !17
  %41 = and i32 %14, 252, !dbg !17
  %42 = or disjoint i32 %31, %37, !dbg !18
  %43 = or disjoint i32 %31, %38, !dbg !18
  %44 = or disjoint i32 %31, %39, !dbg !18
  %45 = or disjoint i32 %31, %40, !dbg !18
  %46 = or disjoint i32 %31, %41, !dbg !18
  %47 = icmp slt i32 %42, 256, !dbg !19
  %48 = icmp slt i32 %43, 256, !dbg !19
  %49 = icmp slt i32 %44, 256, !dbg !19
  %50 = icmp slt i32 %45, 256, !dbg !19
  %51 = icmp slt i32 %46, 256, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %52 = sdiv i32 %.frozen, 16, !dbg !20
  %53 = mul i32 %52, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %.frozen48 = freeze i32 %21, !dbg !20
  %54 = sdiv i32 %.frozen48, 16, !dbg !20
  %55 = mul i32 %54, 16, !dbg !21
  %.decomposed49 = sub i32 %.frozen48, %55, !dbg !21
  %.frozen50 = freeze i32 %22, !dbg !20
  %56 = sdiv i32 %.frozen50, 16, !dbg !20
  %57 = mul i32 %56, 16, !dbg !21
  %.decomposed51 = sub i32 %.frozen50, %57, !dbg !21
  %.frozen52 = freeze i32 %23, !dbg !20
  %58 = sdiv i32 %.frozen52, 16, !dbg !20
  %59 = mul i32 %58, 16, !dbg !21
  %.decomposed53 = sub i32 %.frozen52, %59, !dbg !21
  %.frozen54 = freeze i32 %24, !dbg !20
  %60 = sdiv i32 %.frozen54, 16, !dbg !20
  %61 = mul i32 %60, 16, !dbg !21
  %.decomposed55 = sub i32 %.frozen54, %61, !dbg !21
  %62 = shl i32 %42, 4, !dbg !22
  %63 = shl i32 %43, 4, !dbg !22
  %64 = shl i32 %44, 4, !dbg !22
  %65 = shl i32 %45, 4, !dbg !22
  %66 = shl i32 %52, 12, !dbg !23
  %67 = add i32 %66, %.decomposed, !dbg !24
  %68 = add i32 %67, %62, !dbg !25
  %69 = add i32 %67, %63, !dbg !25
  %70 = add i32 %67, %64, !dbg !25
  %71 = add i32 %67, %65, !dbg !25
  %72 = sext i32 %68 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %69 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %70 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %71 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = and i1 %25, %47, !dbg !27
  %81 = and i1 %25, %48, !dbg !27
  %82 = and i1 %25, %49, !dbg !27
  %83 = and i1 %25, %50, !dbg !27
  %84 = and i1 %26, %51, !dbg !27
  %85 = and i1 %27, %51, !dbg !27
  %86 = and i1 %28, %51, !dbg !27
  %87 = and i1 %29, %51, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %80) #4, !dbg !28
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %81) #4, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %82) #4, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %83) #4, !dbg !28
  %92 = sext i32 %.decomposed to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !29
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %25) #4, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !31
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %25) #4, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !32
  %101 = bitcast i32 %97 to float, !dbg !32
  %102 = bitcast i32 %98 to float, !dbg !32
  %103 = bitcast i32 %99 to float, !dbg !32
  %104 = bitcast i32 %100 to float, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !33
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %25) #4, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !35
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %25) #4, !dbg !36
  %109 = add i32 %46, 8192, !dbg !37
  %110 = shl nsw i32 %.decomposed49, 8, !dbg !38
  %111 = shl nsw i32 %.decomposed51, 8, !dbg !38
  %112 = shl nsw i32 %.decomposed53, 8, !dbg !38
  %113 = shl nsw i32 %.decomposed55, 8, !dbg !38
  %114 = shl i32 %54, 14, !dbg !39
  %115 = shl i32 %56, 14, !dbg !39
  %116 = shl i32 %58, 14, !dbg !39
  %117 = shl i32 %60, 14, !dbg !39
  %118 = add i32 %114, %110, !dbg !40
  %119 = add i32 %118, %109, !dbg !41
  %120 = add i32 %115, %111, !dbg !40
  %121 = add i32 %120, %109, !dbg !41
  %122 = add i32 %116, %112, !dbg !40
  %123 = add i32 %122, %109, !dbg !41
  %124 = add i32 %117, %113, !dbg !40
  %125 = add i32 %124, %109, !dbg !41
  %126 = sext i32 %119 to i64, !dbg !42
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %126, !dbg !42
  %128 = sext i32 %121 to i64, !dbg !42
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !42
  %130 = sext i32 %123 to i64, !dbg !42
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %130, !dbg !42
  %132 = sext i32 %125 to i64, !dbg !42
  %133 = getelementptr float, ptr addrspace(1) %5, i64 %132, !dbg !42
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %84) #4, !dbg !43
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %85) #4, !dbg !43
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %86) #4, !dbg !43
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %87) #4, !dbg !43
  %138 = fadd float %101, 0x3EE4F8B580000000, !dbg !44
  %139 = fadd float %102, 0x3EE4F8B580000000, !dbg !44
  %140 = fadd float %103, 0x3EE4F8B580000000, !dbg !44
  %141 = fadd float %104, 0x3EE4F8B580000000, !dbg !44
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %142, 0, !dbg !45
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %143, 0, !dbg !45
  br i1 %.not.i, label %149, label %144, !dbg !45

144:                                              ; preds = %10
  br i1 %.not1.i, label %147, label %145, !dbg !45

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

149:                                              ; preds = %10
  br i1 %.not1.i, label %152, label %150, !dbg !45

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %145, %147, %150, %152
  %.0.i = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !45
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i33 = icmp eq i32 %154, 0, !dbg !45
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i36 = icmp eq i32 %155, 0, !dbg !45
  br i1 %.not.i33, label %161, label %156, !dbg !45

156:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %159, label %157, !dbg !45

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %164, label %162, !dbg !45

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %157, %159, %162, %164
  %.0.i35 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !45
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i38 = icmp eq i32 %166, 0, !dbg !45
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i41 = icmp eq i32 %167, 0, !dbg !45
  br i1 %.not.i38, label %173, label %168, !dbg !45

168:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %171, label %169, !dbg !45

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

173:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %176, label %174, !dbg !45

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

__nv_sqrtf.exit42:                                ; preds = %169, %171, %174, %176
  %.0.i40 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !45
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i43 = icmp eq i32 %178, 0, !dbg !45
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i46 = icmp eq i32 %179, 0, !dbg !45
  br i1 %.not.i43, label %185, label %180, !dbg !45

180:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %183, label %181, !dbg !45

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

185:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %188, label %186, !dbg !45

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

__nv_sqrtf.exit47:                                ; preds = %181, %183, %186, %188
  %.0.i45 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !45
  %190 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %193 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !30
  %196 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !28
  %204 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !28
  %206 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %207 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %208 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %209 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %210 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !43
  %211 = bitcast i32 %210 to float, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !43
  %213 = bitcast i32 %212 to float, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !43
  %217 = bitcast i32 %216 to float, !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !43
  %219 = bitcast i32 %218 to float, !dbg !43
  %220 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !43
  %221 = bitcast i32 %220 to float, !dbg !43
  %222 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !43
  %225 = bitcast i32 %224 to float, !dbg !43
  %226 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !43
  %227 = bitcast i32 %226 to float, !dbg !43
  %228 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !43
  %229 = bitcast i32 %228 to float, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !43
  %235 = bitcast i32 %234 to float, !dbg !43
  %236 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !43
  %237 = bitcast i32 %236 to float, !dbg !43
  %238 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !43
  %239 = bitcast i32 %238 to float, !dbg !43
  %240 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !43
  %241 = bitcast i32 %240 to float, !dbg !43
  %242 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !36
  %243 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !36
  %244 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !36
  %246 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !34
  %247 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !34
  %248 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !34
  %249 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !34
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !46
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !46
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !46
  %254 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !30
  %255 = insertelement <4 x i32> %254, i32 %193, i64 1, !dbg !30
  %256 = insertelement <4 x i32> %255, i32 %195, i64 2, !dbg !30
  %257 = insertelement <4 x i32> %256, i32 %197, i64 3, !dbg !30
  %258 = bitcast <4 x i32> %257 to <4 x float>, !dbg !30
  %259 = shufflevector <4 x float> %258, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %260 = insertelement <16 x i32> poison, i32 %190, i64 0, !dbg !28
  %261 = insertelement <16 x i32> %260, i32 %192, i64 1, !dbg !28
  %262 = insertelement <16 x i32> %261, i32 %194, i64 2, !dbg !28
  %263 = insertelement <16 x i32> %262, i32 %196, i64 3, !dbg !28
  %264 = insertelement <16 x i32> %263, i32 %198, i64 4, !dbg !28
  %265 = insertelement <16 x i32> %264, i32 %199, i64 5, !dbg !28
  %266 = insertelement <16 x i32> %265, i32 %200, i64 6, !dbg !28
  %267 = insertelement <16 x i32> %266, i32 %201, i64 7, !dbg !28
  %268 = insertelement <16 x i32> %267, i32 %202, i64 8, !dbg !28
  %269 = insertelement <16 x i32> %268, i32 %203, i64 9, !dbg !28
  %270 = insertelement <16 x i32> %269, i32 %204, i64 10, !dbg !28
  %271 = insertelement <16 x i32> %270, i32 %205, i64 11, !dbg !28
  %272 = insertelement <16 x i32> %271, i32 %206, i64 12, !dbg !28
  %273 = insertelement <16 x i32> %272, i32 %207, i64 13, !dbg !28
  %274 = insertelement <16 x i32> %273, i32 %208, i64 14, !dbg !28
  %275 = insertelement <16 x i32> %274, i32 %209, i64 15, !dbg !28
  %276 = bitcast <16 x i32> %275 to <16 x float>, !dbg !28
  %277 = fsub <16 x float> %276, %259, !dbg !47
  %278 = insertelement <4 x i32> poison, i32 %242, i64 0, !dbg !36
  %279 = insertelement <4 x i32> %278, i32 %243, i64 1, !dbg !36
  %280 = insertelement <4 x i32> %279, i32 %244, i64 2, !dbg !36
  %281 = insertelement <4 x i32> %280, i32 %245, i64 3, !dbg !36
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !36
  %283 = shufflevector <4 x float> %282, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %284 = insertelement <4 x i32> poison, i32 %246, i64 0, !dbg !34
  %285 = insertelement <4 x i32> %284, i32 %247, i64 1, !dbg !34
  %286 = insertelement <4 x i32> %285, i32 %248, i64 2, !dbg !34
  %287 = insertelement <4 x i32> %286, i32 %249, i64 3, !dbg !34
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !34
  %289 = shufflevector <4 x float> %288, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %290 = insertelement <16 x float> poison, float %253, i64 0, !dbg !48
  %291 = insertelement <16 x float> %290, float %252, i64 1, !dbg !48
  %292 = insertelement <16 x float> %291, float %251, i64 2, !dbg !48
  %293 = insertelement <16 x float> %292, float %250, i64 3, !dbg !48
  %294 = shufflevector <16 x float> %293, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !48
  %295 = fmul <16 x float> %277, %294, !dbg !48
  %296 = fmul <16 x float> %295, %289, !dbg !49
  %297 = fadd <16 x float> %296, %283, !dbg !50
  %298 = fcmp olt <16 x float> %297, zeroinitializer, !dbg !51
  %299 = extractelement <16 x i1> %298, i64 15, !dbg !55
  %300 = extractelement <16 x float> %297, i64 15, !dbg !55
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !55
  %302 = extractelement <16 x i1> %298, i64 14, !dbg !55
  %303 = extractelement <16 x float> %297, i64 14, !dbg !55
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !55
  %305 = extractelement <16 x i1> %298, i64 13, !dbg !55
  %306 = extractelement <16 x float> %297, i64 13, !dbg !55
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !55
  %308 = extractelement <16 x i1> %298, i64 12, !dbg !55
  %309 = extractelement <16 x float> %297, i64 12, !dbg !55
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !55
  %311 = extractelement <16 x i1> %298, i64 11, !dbg !55
  %312 = extractelement <16 x float> %297, i64 11, !dbg !55
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !55
  %314 = extractelement <16 x i1> %298, i64 10, !dbg !55
  %315 = extractelement <16 x float> %297, i64 10, !dbg !55
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !55
  %317 = extractelement <16 x i1> %298, i64 9, !dbg !55
  %318 = extractelement <16 x float> %297, i64 9, !dbg !55
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !55
  %320 = extractelement <16 x i1> %298, i64 8, !dbg !55
  %321 = extractelement <16 x float> %297, i64 8, !dbg !55
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !55
  %323 = extractelement <16 x i1> %298, i64 7, !dbg !55
  %324 = extractelement <16 x float> %297, i64 7, !dbg !55
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !55
  %326 = extractelement <16 x i1> %298, i64 6, !dbg !55
  %327 = extractelement <16 x float> %297, i64 6, !dbg !55
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !55
  %329 = extractelement <16 x i1> %298, i64 5, !dbg !55
  %330 = extractelement <16 x float> %297, i64 5, !dbg !55
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !55
  %332 = extractelement <16 x i1> %298, i64 4, !dbg !55
  %333 = extractelement <16 x float> %297, i64 4, !dbg !55
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !55
  %335 = extractelement <16 x i1> %298, i64 3, !dbg !55
  %336 = extractelement <16 x float> %297, i64 3, !dbg !55
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !55
  %338 = extractelement <16 x i1> %298, i64 2, !dbg !55
  %339 = extractelement <16 x float> %297, i64 2, !dbg !55
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !55
  %341 = extractelement <16 x i1> %298, i64 1, !dbg !55
  %342 = extractelement <16 x float> %297, i64 1, !dbg !55
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !55
  %344 = extractelement <16 x i1> %298, i64 0, !dbg !55
  %345 = extractelement <16 x float> %297, i64 0, !dbg !55
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !55
  %347 = shl i32 %13, 10, !dbg !55
  %348 = and i32 %347, 3072, !dbg !55
  %349 = and i32 %32, 15, !dbg !55
  %350 = or disjoint i32 %348, %349, !dbg !55
  %351 = or disjoint i32 %34, %350, !dbg !55
  %352 = or disjoint i32 %351, %36, !dbg !55
  %353 = and i32 %14, 1020, !dbg !55
  %354 = lshr exact i32 %348, 6, !dbg !55
  %355 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %354, !dbg !55
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %352, !dbg !55
  %357 = bitcast float %301 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !55
  %358 = or disjoint i32 %352, 256, !dbg !55
  %359 = lshr i32 %358, 8, !dbg !55
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i32 %359, !dbg !55
  %361 = getelementptr float, ptr addrspace(3) %360, i32 %358, !dbg !55
  %362 = bitcast float %304 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !55
  %363 = or disjoint i32 %352, 512, !dbg !55
  %364 = lshr i32 %363, 8, !dbg !55
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !55
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %363, !dbg !55
  %367 = bitcast float %307 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !55
  %368 = or disjoint i32 %352, 768, !dbg !55
  %369 = lshr i32 %368, 8, !dbg !55
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i32 %369, !dbg !55
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %368, !dbg !55
  %372 = bitcast float %310 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !55
  %373 = or disjoint i32 %352, 64, !dbg !55
  %374 = getelementptr float, ptr addrspace(3) %355, i32 %373, !dbg !55
  %375 = bitcast float %313 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !55
  %376 = or disjoint i32 %352, 320, !dbg !55
  %377 = lshr i32 %376, 8, !dbg !55
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !55
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %376, !dbg !55
  %380 = bitcast float %316 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !55
  %381 = or disjoint i32 %352, 576, !dbg !55
  %382 = lshr i32 %381, 8, !dbg !55
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !55
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %381, !dbg !55
  %385 = bitcast float %319 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !55
  %386 = or disjoint i32 %352, 832, !dbg !55
  %387 = lshr i32 %386, 8, !dbg !55
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !55
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %386, !dbg !55
  %390 = bitcast float %322 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !55
  %391 = or disjoint i32 %352, 128, !dbg !55
  %392 = getelementptr float, ptr addrspace(3) %355, i32 %391, !dbg !55
  %393 = bitcast float %325 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !55
  %394 = or disjoint i32 %352, 384, !dbg !55
  %395 = lshr i32 %394, 8, !dbg !55
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i32 %395, !dbg !55
  %397 = getelementptr float, ptr addrspace(3) %396, i32 %394, !dbg !55
  %398 = bitcast float %328 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #4, !dbg !55
  %399 = or disjoint i32 %352, 640, !dbg !55
  %400 = lshr i32 %399, 8, !dbg !55
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %400, !dbg !55
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %399, !dbg !55
  %403 = bitcast float %331 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !55
  %404 = or disjoint i32 %352, 896, !dbg !55
  %405 = lshr i32 %404, 8, !dbg !55
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !55
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %404, !dbg !55
  %408 = bitcast float %334 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !55
  %409 = or disjoint i32 %352, 192, !dbg !55
  %410 = getelementptr float, ptr addrspace(3) %355, i32 %409, !dbg !55
  %411 = bitcast float %337 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !55
  %412 = or disjoint i32 %352, 448, !dbg !55
  %413 = lshr i32 %412, 8, !dbg !55
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i32 %413, !dbg !55
  %415 = getelementptr float, ptr addrspace(3) %414, i32 %412, !dbg !55
  %416 = bitcast float %340 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #4, !dbg !55
  %417 = or disjoint i32 %352, 704, !dbg !55
  %418 = lshr i32 %417, 8, !dbg !55
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !55
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %417, !dbg !55
  %421 = bitcast float %343 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !55
  %422 = or disjoint i32 %352, 960, !dbg !55
  %423 = lshr i32 %422, 8, !dbg !55
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i32 %423, !dbg !55
  %425 = getelementptr float, ptr addrspace(3) %424, i32 %422, !dbg !55
  %426 = bitcast float %346 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %427 = lshr i32 %353, 8, !dbg !55
  %428 = or disjoint i32 %427, %353, !dbg !55
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !55
  %430 = load float, ptr addrspace(3) %429, align 4, !dbg !55
  %431 = or disjoint i32 %353, 1, !dbg !55
  %432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %427, !dbg !55
  %433 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %431, !dbg !55
  %434 = load float, ptr addrspace(3) %433, align 4, !dbg !55
  %435 = or disjoint i32 %353, 2, !dbg !55
  %436 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %435, !dbg !55
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !55
  %438 = or disjoint i32 %353, 3, !dbg !55
  %439 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %438, !dbg !55
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !55
  %441 = or disjoint i32 %353, 1024, !dbg !55
  %442 = lshr i32 %441, 8, !dbg !55
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !55
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %441, !dbg !55
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !55
  %446 = or disjoint i32 %353, 1025, !dbg !55
  %447 = lshr i32 %446, 8, !dbg !55
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !55
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !55
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !55
  %451 = or disjoint i32 %353, 1026, !dbg !55
  %452 = lshr i32 %451, 8, !dbg !55
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !55
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !55
  %455 = load float, ptr addrspace(3) %454, align 4, !dbg !55
  %456 = or disjoint i32 %353, 1027, !dbg !55
  %457 = lshr i32 %456, 8, !dbg !55
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !55
  %459 = getelementptr inbounds float, ptr addrspace(3) %458, i32 %456, !dbg !55
  %460 = load float, ptr addrspace(3) %459, align 4, !dbg !55
  %461 = or disjoint i32 %353, 2048, !dbg !55
  %462 = lshr i32 %461, 8, !dbg !55
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !55
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %461, !dbg !55
  %465 = load float, ptr addrspace(3) %464, align 4, !dbg !55
  %466 = or disjoint i32 %353, 2049, !dbg !55
  %467 = lshr i32 %466, 8, !dbg !55
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !55
  %469 = getelementptr inbounds float, ptr addrspace(3) %468, i32 %466, !dbg !55
  %470 = load float, ptr addrspace(3) %469, align 4, !dbg !55
  %471 = or disjoint i32 %353, 2050, !dbg !55
  %472 = lshr i32 %471, 8, !dbg !55
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !55
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %471, !dbg !55
  %475 = load float, ptr addrspace(3) %474, align 4, !dbg !55
  %476 = or disjoint i32 %353, 2051, !dbg !55
  %477 = lshr i32 %476, 8, !dbg !55
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !55
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %476, !dbg !55
  %480 = load float, ptr addrspace(3) %479, align 4, !dbg !55
  %481 = or disjoint i32 %353, 3072, !dbg !55
  %482 = lshr i32 %481, 8, !dbg !55
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !55
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %481, !dbg !55
  %485 = load float, ptr addrspace(3) %484, align 4, !dbg !55
  %486 = or disjoint i32 %353, 3073, !dbg !55
  %487 = lshr i32 %486, 8, !dbg !55
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !55
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %486, !dbg !55
  %490 = load float, ptr addrspace(3) %489, align 4, !dbg !55
  %491 = or disjoint i32 %353, 3074, !dbg !55
  %492 = lshr i32 %491, 8, !dbg !55
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %492, !dbg !55
  %494 = getelementptr inbounds float, ptr addrspace(3) %493, i32 %491, !dbg !55
  %495 = load float, ptr addrspace(3) %494, align 4, !dbg !55
  %496 = or disjoint i32 %353, 3075, !dbg !55
  %497 = lshr i32 %496, 8, !dbg !55
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !55
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %496, !dbg !55
  %500 = load float, ptr addrspace(3) %499, align 4, !dbg !55
  %501 = fadd float %430, %241, !dbg !56
  %502 = fadd float %434, %239, !dbg !56
  %503 = fadd float %437, %237, !dbg !56
  %504 = fadd float %440, %235, !dbg !56
  %505 = fadd float %445, %233, !dbg !56
  %506 = fadd float %450, %231, !dbg !56
  %507 = fadd float %455, %229, !dbg !56
  %508 = fadd float %460, %227, !dbg !56
  %509 = fadd float %465, %225, !dbg !56
  %510 = fadd float %470, %223, !dbg !56
  %511 = fadd float %475, %221, !dbg !56
  %512 = fadd float %480, %219, !dbg !56
  %513 = fadd float %485, %217, !dbg !56
  %514 = fadd float %490, %215, !dbg !56
  %515 = fadd float %495, %213, !dbg !56
  %516 = fadd float %500, %211, !dbg !56
  %517 = add i32 %118, %46, !dbg !57
  %518 = add i32 %120, %46, !dbg !57
  %519 = add i32 %122, %46, !dbg !57
  %520 = add i32 %124, %46, !dbg !57
  %521 = sext i32 %517 to i64, !dbg !58
  %522 = getelementptr float, ptr addrspace(1) %6, i64 %521, !dbg !58
  %523 = sext i32 %518 to i64, !dbg !58
  %524 = getelementptr float, ptr addrspace(1) %6, i64 %523, !dbg !58
  %525 = sext i32 %519 to i64, !dbg !58
  %526 = getelementptr float, ptr addrspace(1) %6, i64 %525, !dbg !58
  %527 = sext i32 %520 to i64, !dbg !58
  %528 = getelementptr float, ptr addrspace(1) %6, i64 %527, !dbg !58
  %529 = bitcast float %430 to i32, !dbg !59
  %530 = bitcast float %434 to i32, !dbg !59
  %531 = bitcast float %437 to i32, !dbg !59
  %532 = bitcast float %440 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %529, i32 %530, i32 %531, i32 %532, ptr addrspace(1) %522, i1 %84) #4, !dbg !59
  %533 = bitcast float %445 to i32, !dbg !59
  %534 = bitcast float %450 to i32, !dbg !59
  %535 = bitcast float %455 to i32, !dbg !59
  %536 = bitcast float %460 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %534, i32 %535, i32 %536, ptr addrspace(1) %524, i1 %85) #4, !dbg !59
  %537 = bitcast float %465 to i32, !dbg !59
  %538 = bitcast float %470 to i32, !dbg !59
  %539 = bitcast float %475 to i32, !dbg !59
  %540 = bitcast float %480 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %538, i32 %539, i32 %540, ptr addrspace(1) %526, i1 %86) #4, !dbg !59
  %541 = bitcast float %485 to i32, !dbg !59
  %542 = bitcast float %490 to i32, !dbg !59
  %543 = bitcast float %495 to i32, !dbg !59
  %544 = bitcast float %500 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %542, i32 %543, i32 %544, ptr addrspace(1) %528, i1 %87) #4, !dbg !59
  %545 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !60
  %546 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !60
  %547 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !60
  %548 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %549 = shl i32 %13, 6, !dbg !61
  %550 = and i32 %549, 4032, !dbg !61
  %551 = or disjoint i32 %550, %.lobit, !dbg !61
  %552 = or disjoint i32 %551, %18, !dbg !61
  %553 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %550, !dbg !61
  %554 = getelementptr float, ptr addrspace(3) %553, i32 %552, !dbg !61
  %555 = bitcast float %501 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %554, <1 x i32> %555, i1 true) #4, !dbg !61
  %556 = or disjoint i32 %552, 16, !dbg !61
  %557 = lshr i32 %556, 2, !dbg !61
  %558 = and i32 %557, 16777212, !dbg !61
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i32 %558, !dbg !61
  %560 = getelementptr float, ptr addrspace(3) %559, i32 %556, !dbg !61
  %561 = bitcast float %502 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %561, i1 true) #4, !dbg !61
  %562 = or disjoint i32 %552, 32, !dbg !61
  %563 = lshr i32 %562, 2, !dbg !61
  %564 = and i32 %563, 16777212, !dbg !61
  %565 = getelementptr float, ptr addrspace(3) @global_smem, i32 %564, !dbg !61
  %566 = getelementptr float, ptr addrspace(3) %565, i32 %562, !dbg !61
  %567 = bitcast float %503 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %567, i1 true) #4, !dbg !61
  %568 = or disjoint i32 %552, 48, !dbg !61
  %569 = lshr i32 %568, 2, !dbg !61
  %570 = and i32 %569, 16777212, !dbg !61
  %571 = getelementptr float, ptr addrspace(3) @global_smem, i32 %570, !dbg !61
  %572 = getelementptr float, ptr addrspace(3) %571, i32 %568, !dbg !61
  %573 = bitcast float %504 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %573, i1 true) #4, !dbg !61
  %574 = or disjoint i32 %552, 4, !dbg !61
  %575 = getelementptr float, ptr addrspace(3) %553, i32 %574, !dbg !61
  %576 = bitcast float %505 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %575, <1 x i32> %576, i1 true) #4, !dbg !61
  %577 = or disjoint i32 %552, 20, !dbg !61
  %578 = lshr i32 %577, 2, !dbg !61
  %579 = and i32 %578, 16777212, !dbg !61
  %580 = getelementptr float, ptr addrspace(3) @global_smem, i32 %579, !dbg !61
  %581 = getelementptr float, ptr addrspace(3) %580, i32 %577, !dbg !61
  %582 = bitcast float %506 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %582, i1 true) #4, !dbg !61
  %583 = or disjoint i32 %552, 36, !dbg !61
  %584 = lshr i32 %583, 2, !dbg !61
  %585 = and i32 %584, 16777212, !dbg !61
  %586 = getelementptr float, ptr addrspace(3) @global_smem, i32 %585, !dbg !61
  %587 = getelementptr float, ptr addrspace(3) %586, i32 %583, !dbg !61
  %588 = bitcast float %507 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %587, <1 x i32> %588, i1 true) #4, !dbg !61
  %589 = or disjoint i32 %552, 52, !dbg !61
  %590 = lshr i32 %589, 2, !dbg !61
  %591 = and i32 %590, 16777212, !dbg !61
  %592 = getelementptr float, ptr addrspace(3) @global_smem, i32 %591, !dbg !61
  %593 = getelementptr float, ptr addrspace(3) %592, i32 %589, !dbg !61
  %594 = bitcast float %508 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %593, <1 x i32> %594, i1 true) #4, !dbg !61
  %595 = or disjoint i32 %552, 8, !dbg !61
  %596 = getelementptr float, ptr addrspace(3) %553, i32 %595, !dbg !61
  %597 = bitcast float %509 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %596, <1 x i32> %597, i1 true) #4, !dbg !61
  %598 = or disjoint i32 %552, 24, !dbg !61
  %599 = lshr i32 %598, 2, !dbg !61
  %600 = and i32 %599, 16777212, !dbg !61
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i32 %600, !dbg !61
  %602 = getelementptr float, ptr addrspace(3) %601, i32 %598, !dbg !61
  %603 = bitcast float %510 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %602, <1 x i32> %603, i1 true) #4, !dbg !61
  %604 = or disjoint i32 %552, 40, !dbg !61
  %605 = lshr i32 %604, 2, !dbg !61
  %606 = and i32 %605, 16777212, !dbg !61
  %607 = getelementptr float, ptr addrspace(3) @global_smem, i32 %606, !dbg !61
  %608 = getelementptr float, ptr addrspace(3) %607, i32 %604, !dbg !61
  %609 = bitcast float %511 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %608, <1 x i32> %609, i1 true) #4, !dbg !61
  %610 = or disjoint i32 %552, 56, !dbg !61
  %611 = lshr i32 %610, 2, !dbg !61
  %612 = and i32 %611, 16777212, !dbg !61
  %613 = getelementptr float, ptr addrspace(3) @global_smem, i32 %612, !dbg !61
  %614 = getelementptr float, ptr addrspace(3) %613, i32 %610, !dbg !61
  %615 = bitcast float %512 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %614, <1 x i32> %615, i1 true) #4, !dbg !61
  %616 = or disjoint i32 %552, 12, !dbg !61
  %617 = getelementptr float, ptr addrspace(3) %553, i32 %616, !dbg !61
  %618 = bitcast float %513 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %618, i1 true) #4, !dbg !61
  %619 = or disjoint i32 %552, 28, !dbg !61
  %620 = lshr i32 %619, 2, !dbg !61
  %621 = and i32 %620, 16777212, !dbg !61
  %622 = getelementptr float, ptr addrspace(3) @global_smem, i32 %621, !dbg !61
  %623 = getelementptr float, ptr addrspace(3) %622, i32 %619, !dbg !61
  %624 = bitcast float %514 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %623, <1 x i32> %624, i1 true) #4, !dbg !61
  %625 = or disjoint i32 %552, 44, !dbg !61
  %626 = lshr i32 %625, 2, !dbg !61
  %627 = and i32 %626, 16777212, !dbg !61
  %628 = getelementptr float, ptr addrspace(3) @global_smem, i32 %627, !dbg !61
  %629 = getelementptr float, ptr addrspace(3) %628, i32 %625, !dbg !61
  %630 = bitcast float %515 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %630, i1 true) #4, !dbg !61
  %631 = or disjoint i32 %552, 60, !dbg !61
  %632 = lshr i32 %631, 2, !dbg !61
  %633 = and i32 %632, 16777212, !dbg !61
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %633, !dbg !61
  %635 = getelementptr float, ptr addrspace(3) %634, i32 %631, !dbg !61
  %636 = bitcast float %516 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %636, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %637 = and i32 %13, 252, !dbg !61
  %638 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %637, !dbg !61
  %639 = getelementptr inbounds float, ptr addrspace(3) %638, i32 %353, !dbg !61
  %640 = lshr exact i32 %441, 2, !dbg !61
  %641 = and i32 %640, 508, !dbg !61
  %642 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %641, !dbg !61
  %643 = getelementptr inbounds float, ptr addrspace(3) %642, i32 %441, !dbg !61
  %644 = load <4 x i32>, ptr addrspace(3) %643, align 16, !dbg !61
  %645 = lshr exact i32 %461, 2, !dbg !61
  %646 = and i32 %645, 764, !dbg !61
  %647 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %646, !dbg !61
  %648 = getelementptr inbounds float, ptr addrspace(3) %647, i32 %461, !dbg !61
  %649 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !61
  %650 = lshr exact i32 %481, 2, !dbg !61
  %651 = and i32 %650, 1020, !dbg !61
  %652 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %651, !dbg !61
  %653 = getelementptr inbounds float, ptr addrspace(3) %652, i32 %481, !dbg !61
  %654 = load <4 x i32>, ptr addrspace(3) %653, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %639, align 16, !dbg !61
  %655 = getelementptr inbounds i8, ptr addrspace(3) %639, i32 4, !dbg !61
  %.extract18 = load i32, ptr addrspace(3) %655, align 4, !dbg !61
  %656 = getelementptr inbounds i8, ptr addrspace(3) %639, i32 8, !dbg !61
  %.extract19 = load i32, ptr addrspace(3) %656, align 8, !dbg !61
  %657 = getelementptr inbounds i8, ptr addrspace(3) %639, i32 12, !dbg !61
  %.extract20 = load i32, ptr addrspace(3) %657, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %545, i1 %80) #4, !dbg !61
  %.extract21 = extractelement <4 x i32> %644, i64 0, !dbg !61
  %.extract22 = extractelement <4 x i32> %644, i64 1, !dbg !61
  %.extract23 = extractelement <4 x i32> %644, i64 2, !dbg !61
  %.extract24 = extractelement <4 x i32> %644, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %546, i1 %81) #4, !dbg !61
  %.extract25 = extractelement <4 x i32> %649, i64 0, !dbg !61
  %.extract26 = extractelement <4 x i32> %649, i64 1, !dbg !61
  %.extract27 = extractelement <4 x i32> %649, i64 2, !dbg !61
  %.extract28 = extractelement <4 x i32> %649, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %547, i1 %82) #4, !dbg !61
  %.extract29 = extractelement <4 x i32> %654, i64 0, !dbg !61
  %.extract30 = extractelement <4 x i32> %654, i64 1, !dbg !61
  %.extract31 = extractelement <4 x i32> %654, i64 2, !dbg !61
  %.extract32 = extractelement <4 x i32> %654, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %548, i1 %83) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py", directory: "inductor_cache/ug")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 48, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 47, scope: !7)
!39 = !DILocation(line: 36, column: 58, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 52, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 63, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 39, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 57, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
